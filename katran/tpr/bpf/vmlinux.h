#ifndef __VMLINUX_H__
#define __VMLINUX_H__

#ifndef BPF_NO_PRESERVE_ACCESS_INDEX
#pragma clang attribute push( \
    __attribute__((preserve_access_index)), apply_to = record)
#endif

typedef signed char __s8;

typedef unsigned char __u8;

typedef short int __s16;

typedef short unsigned int __u16;

typedef int __s32;

typedef unsigned int __u32;

typedef long long int __s64;

typedef long long unsigned int __u64;

typedef __s8 s8;

typedef __u8 u8;

typedef __s16 s16;

typedef __u16 u16;

typedef __s32 s32;

typedef __u32 u32;

typedef __s64 s64;

typedef __u64 u64;

enum {
  false = 0,
  true = 1,
};

typedef long int __kernel_long_t;

typedef long unsigned int __kernel_ulong_t;

typedef int __kernel_pid_t;

typedef unsigned int __kernel_uid32_t;

typedef unsigned int __kernel_gid32_t;

typedef __kernel_ulong_t __kernel_size_t;

typedef __kernel_long_t __kernel_ssize_t;

typedef long long int __kernel_loff_t;

typedef long long int __kernel_time64_t;

typedef __kernel_long_t __kernel_clock_t;

typedef int __kernel_timer_t;

typedef int __kernel_clockid_t;

typedef unsigned int __poll_t;

typedef u32 __kernel_dev_t;

typedef __kernel_dev_t dev_t;

typedef short unsigned int umode_t;

typedef __kernel_pid_t pid_t;

typedef __kernel_clockid_t clockid_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;

typedef __kernel_gid32_t gid_t;

typedef __kernel_loff_t loff_t;

typedef __kernel_size_t size_t;

typedef __kernel_ssize_t ssize_t;

typedef s32 int32_t;

typedef u32 uint32_t;

typedef u64 sector_t;

typedef u64 blkcnt_t;

typedef u64 dma_addr_t;

typedef unsigned int gfp_t;

typedef unsigned int fmode_t;

typedef u64 phys_addr_t;

typedef phys_addr_t resource_size_t;

typedef struct {
  int counter;
} atomic_t;

typedef struct {
  s64 counter;
} atomic64_t;

struct list_head {
  struct list_head* next;
  struct list_head* prev;
};

struct hlist_node;

struct hlist_head {
  struct hlist_node* first;
};

struct hlist_node {
  struct hlist_node* next;
  struct hlist_node** pprev;
};

struct callback_head {
  struct callback_head* next;
  void (*func)(struct callback_head*);
};

typedef int initcall_entry_t;

struct lock_class_key {};

struct fs_context;

struct fs_parameter_spec;

struct dentry;

struct super_block;

struct module;

struct file_system_type {
  const char* name;
  int fs_flags;
  int (*init_fs_context)(struct fs_context*);
  const struct fs_parameter_spec* parameters;
  struct dentry* (*mount)(struct file_system_type*, int, const char*, void*);
  void (*kill_sb)(struct super_block*);
  struct module* owner;
  struct file_system_type* next;
  struct hlist_head fs_supers;
  struct lock_class_key s_lock_key;
  struct lock_class_key s_umount_key;
  struct lock_class_key s_vfs_rename_key;
  struct lock_class_key s_writers_key[3];
  struct lock_class_key i_lock_key;
  struct lock_class_key i_mutex_key;
  struct lock_class_key i_mutex_dir_key;
};

struct qspinlock {
  union {
    atomic_t val;
    struct {
      u8 locked;
      u8 pending;
    };
    struct {
      u16 locked_pending;
      u16 tail;
    };
  };
};

typedef struct qspinlock arch_spinlock_t;

struct qrwlock {
  union {
    atomic_t cnts;
    struct {
      u8 wlocked;
      u8 __lstate[3];
    };
  };
  arch_spinlock_t wait_lock;
};

typedef struct qrwlock arch_rwlock_t;

struct lockdep_map {};

struct raw_spinlock {
  arch_spinlock_t raw_lock;
};

typedef struct raw_spinlock raw_spinlock_t;

struct spinlock {
  union {
    struct raw_spinlock rlock;
  };
};

typedef struct spinlock spinlock_t;

typedef struct {
  arch_rwlock_t raw_lock;
} rwlock_t;

struct ratelimit_state {
  raw_spinlock_t lock;
  int interval;
  int burst;
  int printed;
  int missed;
  long unsigned int begin;
  long unsigned int flags;
};

struct jump_entry {
  s32 code;
  s32 target;
  long int key;
};

struct static_key_mod;

struct static_key {
  atomic_t enabled;
  union {
    long unsigned int type;
    struct jump_entry* entries;
    struct static_key_mod* next;
  };
};

struct static_key_true {
  struct static_key key;
};

struct static_key_false {
  struct static_key key;
};

typedef void* fl_owner_t;

struct file;

struct kiocb;

struct iov_iter;

struct dir_context;

struct poll_table_struct;

struct vm_area_struct;

struct inode;

struct file_lock;

struct page;

struct pipe_inode_info;

struct seq_file;

struct file_operations {
  struct module* owner;
  loff_t (*llseek)(struct file*, loff_t, int);
  ssize_t (*read)(struct file*, char*, size_t, loff_t*);
  ssize_t (*write)(struct file*, const char*, size_t, loff_t*);
  ssize_t (*read_iter)(struct kiocb*, struct iov_iter*);
  ssize_t (*write_iter)(struct kiocb*, struct iov_iter*);
  int (*iopoll)(struct kiocb*, bool);
  int (*iterate)(struct file*, struct dir_context*);
  int (*iterate_shared)(struct file*, struct dir_context*);
  __poll_t (*poll)(struct file*, struct poll_table_struct*);
  long int (*unlocked_ioctl)(struct file*, unsigned int, long unsigned int);
  long int (*compat_ioctl)(struct file*, unsigned int, long unsigned int);
  int (*mmap)(struct file*, struct vm_area_struct*);
  long unsigned int mmap_supported_flags;
  int (*open)(struct inode*, struct file*);
  int (*flush)(struct file*, fl_owner_t);
  int (*release)(struct inode*, struct file*);
  int (*fsync)(struct file*, loff_t, loff_t, int);
  int (*fasync)(int, struct file*, int);
  int (*lock)(struct file*, int, struct file_lock*);
  ssize_t (*sendpage)(struct file*, struct page*, int, size_t, loff_t*, int);
  long unsigned int (*get_unmapped_area)(
      struct file*,
      long unsigned int,
      long unsigned int,
      long unsigned int,
      long unsigned int);
  int (*check_flags)(int);
  int (*flock)(struct file*, int, struct file_lock*);
  ssize_t (*splice_write)(
      struct pipe_inode_info*,
      struct file*,
      loff_t*,
      size_t,
      unsigned int);
  ssize_t (*splice_read)(
      struct file*,
      loff_t*,
      struct pipe_inode_info*,
      size_t,
      unsigned int);
  int (*setlease)(struct file*, long int, struct file_lock**, void**);
  long int (*fallocate)(struct file*, int, loff_t, loff_t);
  void (*show_fdinfo)(struct seq_file*, struct file*);
  ssize_t (*copy_file_range)(
      struct file*,
      loff_t,
      struct file*,
      loff_t,
      size_t,
      unsigned int);
  loff_t (*remap_file_range)(
      struct file*,
      loff_t,
      struct file*,
      loff_t,
      loff_t,
      unsigned int);
  int (*fadvise)(struct file*, loff_t, loff_t, int);
};

struct notifier_block;

struct atomic_notifier_head {
  spinlock_t lock;
  struct notifier_block* head;
};

enum system_states {
  SYSTEM_BOOTING = 0,
  SYSTEM_SCHEDULING = 1,
  SYSTEM_RUNNING = 2,
  SYSTEM_HALT = 3,
  SYSTEM_POWER_OFF = 4,
  SYSTEM_RESTART = 5,
  SYSTEM_SUSPEND = 6,
};

struct taint_flag {
  char c_true;
  char c_false;
  bool module;
};

typedef __s64 time64_t;

struct __kernel_timespec {
  __kernel_time64_t tv_sec;
  long long int tv_nsec;
};

struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

struct timespec64 {
  time64_t tv_sec;
  long int tv_nsec;
};

enum timespec_type {
  TT_NONE = 0,
  TT_NATIVE = 1,
  TT_COMPAT = 2,
};

typedef s32 old_time32_t;

struct old_timespec32 {
  old_time32_t tv_sec;
  s32 tv_nsec;
};

struct pollfd;

struct restart_block {
  long unsigned int arch_data;
  long int (*fn)(struct restart_block*);
  union {
    struct {
      u32* uaddr;
      u32 val;
      u32 flags;
      u32 bitset;
      u64 time;
      u32* uaddr2;
    } futex;
    struct {
      clockid_t clockid;
      enum timespec_type type;
      union {
        struct __kernel_timespec* rmtp;
        struct old_timespec32* compat_rmtp;
      };
      u64 expires;
    } nanosleep;
    struct {
      struct pollfd* ufds;
      int nfds;
      int has_timeout;
      long unsigned int tv_sec;
      long unsigned int tv_nsec;
    } poll;
  };
};

struct thread_info {
  long unsigned int flags;
  long unsigned int syscall_work;
  u32 status;
};

struct refcount_struct {
  atomic_t refs;
};

typedef struct refcount_struct refcount_t;

struct llist_node {
  struct llist_node* next;
};

struct __call_single_node {
  struct llist_node llist;
  union {
    unsigned int u_flags;
    atomic_t a_flags;
  };
  u16 src;
  u16 dst;
};

struct load_weight {
  long unsigned int weight;
  u32 inv_weight;
};

struct rb_node {
  long unsigned int __rb_parent_color;
  struct rb_node* rb_right;
  struct rb_node* rb_left;
};

struct sched_statistics {
  u64 wait_start;
  u64 wait_max;
  u64 wait_count;
  u64 wait_sum;
  u64 iowait_count;
  u64 iowait_sum;
  u64 sleep_start;
  u64 sleep_max;
  s64 sum_sleep_runtime;
  u64 block_start;
  u64 block_max;
  u64 exec_max;
  u64 slice_max;
  u64 nr_migrations_cold;
  u64 nr_failed_migrations_affine;
  u64 nr_failed_migrations_running;
  u64 nr_failed_migrations_hot;
  u64 nr_forced_migrations;
  u64 nr_wakeups;
  u64 nr_wakeups_sync;
  u64 nr_wakeups_migrate;
  u64 nr_wakeups_local;
  u64 nr_wakeups_remote;
  u64 nr_wakeups_affine;
  u64 nr_wakeups_affine_attempts;
  u64 nr_wakeups_passive;
  u64 nr_wakeups_idle;
};

struct util_est {
  unsigned int enqueued;
  unsigned int ewma;
};

struct sched_avg {
  u64 last_update_time;
  u64 load_sum;
  u64 runnable_sum;
  u32 util_sum;
  u32 period_contrib;
  long unsigned int load_avg;
  long unsigned int runnable_avg;
  long unsigned int util_avg;
  struct util_est util_est;
};

struct cfs_rq;

struct sched_entity {
  struct load_weight load;
  struct rb_node run_node;
  struct list_head group_node;
  unsigned int on_rq;
  u64 exec_start;
  u64 sum_exec_runtime;
  u64 vruntime;
  u64 prev_sum_exec_runtime;
  u64 nr_migrations;
  struct sched_statistics statistics;
  int depth;
  struct sched_entity* parent;
  struct cfs_rq* cfs_rq;
  struct cfs_rq* my_q;
  long unsigned int runnable_weight;
  long : 64;
  long : 64;
  long : 64;
  struct sched_avg avg;
};

struct sched_rt_entity {
  struct list_head run_list;
  long unsigned int timeout;
  long unsigned int watchdog_stamp;
  unsigned int time_slice;
  short unsigned int on_rq;
  short unsigned int on_list;
  struct sched_rt_entity* back;
};

typedef s64 ktime_t;

struct timerqueue_node {
  struct rb_node node;
  ktime_t expires;
};

enum hrtimer_restart {
  HRTIMER_NORESTART = 0,
  HRTIMER_RESTART = 1,
};

struct hrtimer_clock_base;

struct hrtimer {
  struct timerqueue_node node;
  ktime_t _softexpires;
  enum hrtimer_restart (*function)(struct hrtimer*);
  struct hrtimer_clock_base* base;
  u8 state;
  u8 is_rel;
  u8 is_soft;
  u8 is_hard;
};

struct sched_dl_entity {
  struct rb_node rb_node;
  u64 dl_runtime;
  u64 dl_deadline;
  u64 dl_period;
  u64 dl_bw;
  u64 dl_density;
  s64 runtime;
  u64 deadline;
  unsigned int flags;
  unsigned int dl_throttled : 1;
  unsigned int dl_yielded : 1;
  unsigned int dl_non_contending : 1;
  unsigned int dl_overrun : 1;
  struct hrtimer dl_timer;
  struct hrtimer inactive_timer;
  struct sched_dl_entity* pi_se;
};

struct cpumask {
  long unsigned int bits[2];
};

typedef struct cpumask cpumask_t;

union rcu_special {
  struct {
    u8 blocked;
    u8 need_qs;
    u8 exp_hint;
    u8 need_mb;
  } b;
  u32 s;
};

struct sched_info {
  long unsigned int pcount;
  long long unsigned int run_delay;
  long long unsigned int last_arrival;
  long long unsigned int last_queued;
};

struct plist_node {
  int prio;
  struct list_head prio_list;
  struct list_head node_list;
};

struct vmacache {
  u64 seqnum;
  struct vm_area_struct* vmas[4];
};

struct task_rss_stat {
  int events;
  int count[4];
};

struct prev_cputime {
  u64 utime;
  u64 stime;
  raw_spinlock_t lock;
};

struct rb_root {
  struct rb_node* rb_node;
};

struct rb_root_cached {
  struct rb_root rb_root;
  struct rb_node* rb_leftmost;
};

struct timerqueue_head {
  struct rb_root_cached rb_root;
};

struct posix_cputimer_base {
  u64 nextevt;
  struct timerqueue_head tqhead;
};

struct posix_cputimers {
  struct posix_cputimer_base bases[3];
  unsigned int timers_active;
  unsigned int expiry_active;
};

struct posix_cputimers_work {
  struct callback_head work;
  unsigned int scheduled;
};

struct sem_undo_list;

struct sysv_sem {
  struct sem_undo_list* undo_list;
};

struct sysv_shm {
  struct list_head shm_clist;
};

typedef struct {
  long unsigned int sig[1];
} sigset_t;

struct sigpending {
  struct list_head list;
  sigset_t signal;
};

typedef struct {
  uid_t val;
} kuid_t;

struct seccomp_filter;

struct seccomp {
  int mode;
  atomic_t filter_count;
  struct seccomp_filter* filter;
};

struct syscall_user_dispatch {
  char* selector;
  long unsigned int offset;
  long unsigned int len;
  bool on_dispatch;
};

struct wake_q_node {
  struct wake_q_node* next;
};

struct task_io_accounting {
  u64 rchar;
  u64 wchar;
  u64 syscr;
  u64 syscw;
  u64 read_bytes;
  u64 write_bytes;
  u64 cancelled_write_bytes;
};

typedef struct {
  long unsigned int bits[1];
} nodemask_t;

struct seqcount {
  unsigned int sequence;
};

typedef struct seqcount seqcount_t;

struct seqcount_spinlock {
  seqcount_t seqcount;
};

typedef struct seqcount_spinlock seqcount_spinlock_t;

typedef atomic64_t atomic_long_t;

struct optimistic_spin_queue {
  atomic_t tail;
};

struct mutex {
  atomic_long_t owner;
  spinlock_t wait_lock;
  struct optimistic_spin_queue osq;
  struct list_head wait_list;
};

struct arch_tlbflush_unmap_batch {
  struct cpumask cpumask;
};

struct tlbflush_unmap_batch {
  struct arch_tlbflush_unmap_batch arch;
  bool flush_required;
  bool writable;
};

struct page_frag {
  struct page* page;
  __u32 offset;
  __u32 size;
};

struct kmap_ctrl {};

struct llist_head {
  struct llist_node* first;
};

struct desc_struct {
  u16 limit0;
  u16 base0;
  u16 base1 : 8;
  u16 type : 4;
  u16 s : 1;
  u16 dpl : 2;
  u16 p : 1;
  u16 limit1 : 4;
  u16 avl : 1;
  u16 l : 1;
  u16 d : 1;
  u16 g : 1;
  u16 base2 : 8;
};

struct fregs_state {
  u32 cwd;
  u32 swd;
  u32 twd;
  u32 fip;
  u32 fcs;
  u32 foo;
  u32 fos;
  u32 st_space[20];
  u32 status;
};

struct fxregs_state {
  u16 cwd;
  u16 swd;
  u16 twd;
  u16 fop;
  union {
    struct {
      u64 rip;
      u64 rdp;
    };
    struct {
      u32 fip;
      u32 fcs;
      u32 foo;
      u32 fos;
    };
  };
  u32 mxcsr;
  u32 mxcsr_mask;
  u32 st_space[32];
  u32 xmm_space[64];
  u32 padding[12];
  union {
    u32 padding1[12];
    u32 sw_reserved[12];
  };
};

struct math_emu_info;

struct swregs_state {
  u32 cwd;
  u32 swd;
  u32 twd;
  u32 fip;
  u32 fcs;
  u32 foo;
  u32 fos;
  u32 st_space[20];
  u8 ftop;
  u8 changed;
  u8 lookahead;
  u8 no_update;
  u8 rm;
  u8 alimit;
  struct math_emu_info* info;
  u32 entry_eip;
};

struct xstate_header {
  u64 xfeatures;
  u64 xcomp_bv;
  u64 reserved[6];
};

struct xregs_state {
  struct fxregs_state i387;
  struct xstate_header header;
  u8 extended_state_area[0];
};

union fpregs_state {
  struct fregs_state fsave;
  struct fxregs_state fxsave;
  struct swregs_state soft;
  struct xregs_state xsave;
  u8 __padding[4096];
};

struct fpu {
  unsigned int last_cpu;
  long unsigned int avx512_timestamp;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  union fpregs_state state;
};

struct perf_event;

struct io_bitmap;

struct thread_struct {
  struct desc_struct tls_array[3];
  long unsigned int sp;
  short unsigned int es;
  short unsigned int ds;
  short unsigned int fsindex;
  short unsigned int gsindex;
  long unsigned int fsbase;
  long unsigned int gsbase;
  struct perf_event* ptrace_bps[4];
  long unsigned int virtual_dr6;
  long unsigned int ptrace_dr7;
  long unsigned int cr2;
  long unsigned int trap_nr;
  long unsigned int error_code;
  struct io_bitmap* io_bitmap;
  long unsigned int iopl_emul;
  unsigned int sig_on_uaccess_err : 1;
  long : 63;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct fpu fpu;
};

struct sched_class;

struct task_group;

struct mm_struct;

struct pid;

struct completion;

struct cred;

struct key;

struct nameidata;

struct fs_struct;

struct files_struct;

struct io_uring_task;

struct nsproxy;

struct signal_struct;

struct sighand_struct;

struct audit_context;

struct rt_mutex_waiter;

struct bio_list;

struct blk_plug;

struct reclaim_state;

struct backing_dev_info;

struct io_context;

struct capture_control;

struct kernel_siginfo;

typedef struct kernel_siginfo kernel_siginfo_t;

struct css_set;

struct robust_list_head;

struct compat_robust_list_head;

struct futex_pi_state;

struct perf_event_context;

struct mempolicy;

struct numa_group;

struct rseq;

struct task_delay_info;

struct ftrace_ret_stack;

struct mem_cgroup;

struct request_queue;

struct uprobe_task;

struct vm_struct;

struct bpf_local_storage;

struct bpf_run_ctx;

struct task_struct {
  struct thread_info thread_info;
  volatile long int state;
  void* stack;
  refcount_t usage;
  unsigned int flags;
  unsigned int ptrace;
  int on_cpu;
  struct __call_single_node wake_entry;
  unsigned int cpu;
  unsigned int wakee_flips;
  long unsigned int wakee_flip_decay_ts;
  struct task_struct* last_wakee;
  int recent_used_cpu;
  int wake_cpu;
  int on_rq;
  int prio;
  int static_prio;
  int normal_prio;
  unsigned int rt_priority;
  const struct sched_class* sched_class;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct sched_entity se;
  struct sched_rt_entity rt;
  struct task_group* sched_task_group;
  struct sched_dl_entity dl;
  struct hlist_head preempt_notifiers;
  unsigned int btrace_seq;
  unsigned int policy;
  int nr_cpus_allowed;
  const cpumask_t* cpus_ptr;
  cpumask_t cpus_mask;
  void* migration_pending;
  short unsigned int migration_disabled;
  short unsigned int migration_flags;
  long unsigned int rcu_tasks_nvcsw;
  u8 rcu_tasks_holdout;
  u8 rcu_tasks_idx;
  int rcu_tasks_idle_cpu;
  struct list_head rcu_tasks_holdout_list;
  int trc_reader_nesting;
  int trc_ipi_to_cpu;
  union rcu_special trc_reader_special;
  bool trc_reader_checked;
  struct list_head trc_holdout_list;
  struct sched_info sched_info;
  struct list_head tasks;
  struct plist_node pushable_tasks;
  struct rb_node pushable_dl_tasks;
  struct mm_struct* mm;
  struct mm_struct* active_mm;
  struct vmacache vmacache;
  struct task_rss_stat rss_stat;
  int exit_state;
  int exit_code;
  int exit_signal;
  int pdeath_signal;
  long unsigned int jobctl;
  unsigned int personality;
  unsigned int sched_reset_on_fork : 1;
  unsigned int sched_contributes_to_load : 1;
  unsigned int sched_migrated : 1;
  unsigned int sched_psi_wake_requeue : 1;
  int : 28;
  unsigned int sched_remote_wakeup : 1;
  unsigned int in_execve : 1;
  unsigned int in_iowait : 1;
  unsigned int restore_sigmask : 1;
  unsigned int in_user_fault : 1;
  unsigned int brk_randomized : 1;
  unsigned int no_cgroup_migration : 1;
  unsigned int frozen : 1;
  unsigned int use_memdelay : 1;
  unsigned int in_memstall : 1;
  long unsigned int atomic_flags;
  struct restart_block restart_block;
  pid_t pid;
  pid_t tgid;
  long unsigned int stack_canary;
  struct task_struct* real_parent;
  struct task_struct* parent;
  struct list_head children;
  struct list_head sibling;
  struct task_struct* group_leader;
  struct list_head ptraced;
  struct list_head ptrace_entry;
  struct pid* thread_pid;
  struct hlist_node pid_links[4];
  struct list_head thread_group;
  struct list_head thread_node;
  struct completion* vfork_done;
  int* set_child_tid;
  int* clear_child_tid;
  void* pf_io_worker;
  u64 utime;
  u64 stime;
  u64 gtime;
  struct prev_cputime prev_cputime;
  long unsigned int nvcsw;
  long unsigned int nivcsw;
  u64 start_time;
  u64 start_boottime;
  long unsigned int min_flt;
  long unsigned int maj_flt;
  struct posix_cputimers posix_cputimers;
  struct posix_cputimers_work posix_cputimers_work;
  const struct cred* ptracer_cred;
  const struct cred* real_cred;
  const struct cred* cred;
  struct key* cached_requested_key;
  char comm[16];
  struct nameidata* nameidata;
  struct sysv_sem sysvsem;
  struct sysv_shm sysvshm;
  long unsigned int last_switch_count;
  long unsigned int last_switch_time;
  struct fs_struct* fs;
  struct files_struct* files;
  struct io_uring_task* io_uring;
  struct nsproxy* nsproxy;
  struct signal_struct* signal;
  struct sighand_struct* sighand;
  sigset_t blocked;
  sigset_t real_blocked;
  sigset_t saved_sigmask;
  struct sigpending pending;
  long unsigned int sas_ss_sp;
  size_t sas_ss_size;
  unsigned int sas_ss_flags;
  struct callback_head* task_works;
  struct audit_context* audit_context;
  kuid_t loginuid;
  unsigned int sessionid;
  struct seccomp seccomp;
  struct syscall_user_dispatch syscall_dispatch;
  u64 parent_exec_id;
  u64 self_exec_id;
  spinlock_t alloc_lock;
  raw_spinlock_t pi_lock;
  struct wake_q_node wake_q;
  struct rb_root_cached pi_waiters;
  struct task_struct* pi_top_task;
  struct rt_mutex_waiter* pi_blocked_on;
  void* journal_info;
  struct bio_list* bio_list;
  struct blk_plug* plug;
  struct reclaim_state* reclaim_state;
  struct backing_dev_info* backing_dev_info;
  struct io_context* io_context;
  struct capture_control* capture_control;
  long unsigned int ptrace_message;
  kernel_siginfo_t* last_siginfo;
  struct task_io_accounting ioac;
  unsigned int psi_flags;
  u64 acct_rss_mem1;
  u64 acct_vm_mem1;
  u64 acct_timexpd;
  nodemask_t mems_allowed;
  seqcount_spinlock_t mems_allowed_seq;
  int cpuset_mem_spread_rotor;
  int cpuset_slab_spread_rotor;
  struct css_set* cgroups;
  struct list_head cg_list;
  struct robust_list_head* robust_list;
  struct compat_robust_list_head* compat_robust_list;
  struct list_head pi_state_list;
  struct futex_pi_state* pi_state_cache;
  struct mutex futex_exit_mutex;
  unsigned int futex_state;
  struct perf_event_context* perf_event_ctxp[2];
  struct mutex perf_event_mutex;
  struct list_head perf_event_list;
  struct mempolicy* mempolicy;
  short int il_prev;
  short int pref_node_fork;
  int numa_scan_seq;
  unsigned int numa_scan_period;
  unsigned int numa_scan_period_max;
  int numa_preferred_nid;
  long unsigned int numa_migrate_retry;
  u64 node_stamp;
  u64 last_task_numa_placement;
  u64 last_sum_exec_runtime;
  struct callback_head numa_work;
  struct numa_group* numa_group;
  long unsigned int* numa_faults;
  long unsigned int total_numa_faults;
  long unsigned int numa_faults_locality[3];
  long unsigned int numa_pages_migrated;
  struct rseq* rseq;
  u32 rseq_sig;
  long unsigned int rseq_event_mask;
  struct tlbflush_unmap_batch tlb_ubc;
  union {
    refcount_t rcu_users;
    struct callback_head rcu;
  };
  struct pipe_inode_info* splice_pipe;
  struct page_frag task_frag;
  struct task_delay_info* delays;
  int make_it_fail;
  unsigned int fail_nth;
  int nr_dirtied;
  int nr_dirtied_pause;
  long unsigned int dirty_paused_when;
  u64 timer_slack_ns;
  u64 default_timer_slack_ns;
  int curr_ret_stack;
  int curr_ret_depth;
  struct ftrace_ret_stack* ret_stack;
  long long unsigned int ftrace_timestamp;
  atomic_t trace_overrun;
  atomic_t tracing_graph_pause;
  long unsigned int trace;
  long unsigned int trace_recursion;
  struct mem_cgroup* memcg_in_oom;
  gfp_t memcg_oom_gfp_mask;
  int memcg_oom_order;
  unsigned int memcg_nr_pages_over_high;
  struct mem_cgroup* active_memcg;
  struct request_queue* throttle_queue;
  struct uprobe_task* utask;
  unsigned int sequential_io;
  unsigned int sequential_io_avg;
  struct kmap_ctrl kmap_ctrl;
  int pagefault_disabled;
  struct task_struct* oom_reaper_list;
  struct vm_struct* stack_vm_area;
  refcount_t stack_refcount;
  int patch_state;
  void* security;
  struct bpf_local_storage* bpf_storage;
  struct bpf_run_ctx* bpf_ctx;
  void* mce_vaddr;
  __u64 mce_kflags;
  u64 mce_addr;
  __u64 mce_ripv : 1;
  __u64 mce_whole_page : 1;
  __u64 __mce_reserved : 62;
  struct callback_head mce_kill_me;
  struct llist_head kretprobe_instances;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct thread_struct thread;
};

struct screen_info {
  __u8 orig_x;
  __u8 orig_y;
  __u16 ext_mem_k;
  __u16 orig_video_page;
  __u8 orig_video_mode;
  __u8 orig_video_cols;
  __u8 flags;
  __u8 unused2;
  __u16 orig_video_ega_bx;
  __u16 unused3;
  __u8 orig_video_lines;
  __u8 orig_video_isVGA;
  __u16 orig_video_points;
  __u16 lfb_width;
  __u16 lfb_height;
  __u16 lfb_depth;
  __u32 lfb_base;
  __u32 lfb_size;
  __u16 cl_magic;
  __u16 cl_offset;
  __u16 lfb_linelength;
  __u8 red_size;
  __u8 red_pos;
  __u8 green_size;
  __u8 green_pos;
  __u8 blue_size;
  __u8 blue_pos;
  __u8 rsvd_size;
  __u8 rsvd_pos;
  __u16 vesapm_seg;
  __u16 vesapm_off;
  __u16 pages;
  __u16 vesa_attributes;
  __u32 capabilities;
  __u32 ext_lfb_base;
  __u8 _reserved[2];
} __attribute__((packed));

struct apm_bios_info {
  __u16 version;
  __u16 cseg;
  __u32 offset;
  __u16 cseg_16;
  __u16 dseg;
  __u16 flags;
  __u16 cseg_len;
  __u16 cseg_16_len;
  __u16 dseg_len;
};

struct apm_info {
  struct apm_bios_info bios;
  short unsigned int connection_version;
  int get_power_status_broken;
  int get_power_status_swabinminutes;
  int allow_ints;
  int forbid_idle;
  int realmode_power_off;
  int disabled;
};

struct edd_device_params {
  __u16 length;
  __u16 info_flags;
  __u32 num_default_cylinders;
  __u32 num_default_heads;
  __u32 sectors_per_track;
  __u64 number_of_sectors;
  __u16 bytes_per_sector;
  __u32 dpte_ptr;
  __u16 key;
  __u8 device_path_info_length;
  __u8 reserved2;
  __u16 reserved3;
  __u8 host_bus_type[4];
  __u8 interface_type[8];
  union {
    struct {
      __u16 base_address;
      __u16 reserved1;
      __u32 reserved2;
    } isa;
    struct {
      __u8 bus;
      __u8 slot;
      __u8 function;
      __u8 channel;
      __u32 reserved;
    } pci;
    struct {
      __u64 reserved;
    } ibnd;
    struct {
      __u64 reserved;
    } xprs;
    struct {
      __u64 reserved;
    } htpt;
    struct {
      __u64 reserved;
    } unknown;
  } interface_path;
  union {
    struct {
      __u8 device;
      __u8 reserved1;
      __u16 reserved2;
      __u32 reserved3;
      __u64 reserved4;
    } ata;
    struct {
      __u8 device;
      __u8 lun;
      __u8 reserved1;
      __u8 reserved2;
      __u32 reserved3;
      __u64 reserved4;
    } atapi;
    struct {
      __u16 id;
      __u64 lun;
      __u16 reserved1;
      __u32 reserved2;
    } __attribute__((packed)) scsi;
    struct {
      __u64 serial_number;
      __u64 reserved;
    } usb;
    struct {
      __u64 eui;
      __u64 reserved;
    } i1394;
    struct {
      __u64 wwid;
      __u64 lun;
    } fibre;
    struct {
      __u64 identity_tag;
      __u64 reserved;
    } i2o;
    struct {
      __u32 array_number;
      __u32 reserved1;
      __u64 reserved2;
    } raid;
    struct {
      __u8 device;
      __u8 reserved1;
      __u16 reserved2;
      __u32 reserved3;
      __u64 reserved4;
    } sata;
    struct {
      __u64 reserved1;
      __u64 reserved2;
    } unknown;
  } device_path;
  __u8 reserved4;
  __u8 checksum;
} __attribute__((packed));

struct edd_info {
  __u8 device;
  __u8 version;
  __u16 interface_support;
  __u16 legacy_max_cylinder;
  __u8 legacy_max_head;
  __u8 legacy_sectors_per_track;
  struct edd_device_params params;
} __attribute__((packed));

struct edd {
  unsigned int mbr_signature[16];
  struct edd_info edd_info[6];
  unsigned char mbr_signature_nr;
  unsigned char edd_info_nr;
};

struct ist_info {
  __u32 signature;
  __u32 command;
  __u32 event;
  __u32 perf_level;
};

struct edid_info {
  unsigned char dummy[128];
};

struct setup_header {
  __u8 setup_sects;
  __u16 root_flags;
  __u32 syssize;
  __u16 ram_size;
  __u16 vid_mode;
  __u16 root_dev;
  __u16 boot_flag;
  __u16 jump;
  __u32 header;
  __u16 version;
  __u32 realmode_swtch;
  __u16 start_sys_seg;
  __u16 kernel_version;
  __u8 type_of_loader;
  __u8 loadflags;
  __u16 setup_move_size;
  __u32 code32_start;
  __u32 ramdisk_image;
  __u32 ramdisk_size;
  __u32 bootsect_kludge;
  __u16 heap_end_ptr;
  __u8 ext_loader_ver;
  __u8 ext_loader_type;
  __u32 cmd_line_ptr;
  __u32 initrd_addr_max;
  __u32 kernel_alignment;
  __u8 relocatable_kernel;
  __u8 min_alignment;
  __u16 xloadflags;
  __u32 cmdline_size;
  __u32 hardware_subarch;
  __u64 hardware_subarch_data;
  __u32 payload_offset;
  __u32 payload_length;
  __u64 setup_data;
  __u64 pref_address;
  __u32 init_size;
  __u32 handover_offset;
  __u32 kernel_info_offset;
} __attribute__((packed));

struct sys_desc_table {
  __u16 length;
  __u8 table[14];
};

struct olpc_ofw_header {
  __u32 ofw_magic;
  __u32 ofw_version;
  __u32 cif_handler;
  __u32 irq_desc_table;
};

struct efi_info {
  __u32 efi_loader_signature;
  __u32 efi_systab;
  __u32 efi_memdesc_size;
  __u32 efi_memdesc_version;
  __u32 efi_memmap;
  __u32 efi_memmap_size;
  __u32 efi_systab_hi;
  __u32 efi_memmap_hi;
};

struct boot_e820_entry {
  __u64 addr;
  __u64 size;
  __u32 type;
} __attribute__((packed));

struct boot_params {
  struct screen_info screen_info;
  struct apm_bios_info apm_bios_info;
  __u8 _pad2[4];
  __u64 tboot_addr;
  struct ist_info ist_info;
  __u64 acpi_rsdp_addr;
  __u8 _pad3[8];
  __u8 hd0_info[16];
  __u8 hd1_info[16];
  struct sys_desc_table sys_desc_table;
  struct olpc_ofw_header olpc_ofw_header;
  __u32 ext_ramdisk_image;
  __u32 ext_ramdisk_size;
  __u32 ext_cmd_line_ptr;
  __u8 _pad4[116];
  struct edid_info edid_info;
  struct efi_info efi_info;
  __u32 alt_mem_k;
  __u32 scratch;
  __u8 e820_entries;
  __u8 eddbuf_entries;
  __u8 edd_mbr_sig_buf_entries;
  __u8 kbd_status;
  __u8 secure_boot;
  __u8 _pad5[2];
  __u8 sentinel;
  __u8 _pad6[1];
  struct setup_header hdr;
  __u8 _pad7[36];
  __u32 edd_mbr_sig_buffer[16];
  struct boot_e820_entry e820_table[128];
  __u8 _pad8[48];
  struct edd_info eddbuf[6];
  __u8 _pad9[276];
} __attribute__((packed));

enum x86_hardware_subarch {
  X86_SUBARCH_PC = 0,
  X86_SUBARCH_LGUEST = 1,
  X86_SUBARCH_XEN = 2,
  X86_SUBARCH_INTEL_MID = 3,
  X86_SUBARCH_CE4100 = 4,
  X86_NR_SUBARCHS = 5,
};

struct range {
  u64 start;
  u64 end;
};

struct pt_regs {
  long unsigned int r15;
  long unsigned int r14;
  long unsigned int r13;
  long unsigned int r12;
  long unsigned int bp;
  long unsigned int bx;
  long unsigned int r11;
  long unsigned int r10;
  long unsigned int r9;
  long unsigned int r8;
  long unsigned int ax;
  long unsigned int cx;
  long unsigned int dx;
  long unsigned int si;
  long unsigned int di;
  long unsigned int orig_ax;
  long unsigned int ip;
  long unsigned int cs;
  long unsigned int flags;
  long unsigned int sp;
  long unsigned int ss;
};

enum {
  GATE_INTERRUPT = 14,
  GATE_TRAP = 15,
  GATE_CALL = 12,
  GATE_TASK = 5,
};

struct idt_bits {
  u16 ist : 3;
  u16 zero : 5;
  u16 type : 5;
  u16 dpl : 2;
  u16 p : 1;
};

struct idt_data {
  unsigned int vector;
  unsigned int segment;
  struct idt_bits bits;
  const void* addr;
};

struct gate_struct {
  u16 offset_low;
  u16 segment;
  struct idt_bits bits;
  u16 offset_middle;
  u32 offset_high;
  u32 reserved;
};

typedef struct gate_struct gate_desc;

struct desc_ptr {
  short unsigned int size;
  long unsigned int address;
} __attribute__((packed));

typedef long unsigned int pteval_t;

typedef long unsigned int pmdval_t;

typedef long unsigned int pudval_t;

typedef long unsigned int p4dval_t;

typedef long unsigned int pgdval_t;

typedef long unsigned int pgprotval_t;

typedef struct {
  pteval_t pte;
} pte_t;

struct pgprot {
  pgprotval_t pgprot;
};

typedef struct pgprot pgprot_t;

typedef struct {
  pgdval_t pgd;
} pgd_t;

typedef struct {
  pgd_t pgd;
} p4d_t;

typedef struct {
  pudval_t pud;
} pud_t;

typedef struct {
  pmdval_t pmd;
} pmd_t;

typedef struct page* pgtable_t;

struct address_space;

struct kmem_cache;

struct dev_pagemap;

struct page {
  long unsigned int flags;
  union {
    struct {
      struct list_head lru;
      struct address_space* mapping;
      long unsigned int index;
      long unsigned int private;
    };
    struct {
      dma_addr_t dma_addr;
    };
    struct {
      union {
        struct list_head slab_list;
        struct {
          struct page* next;
          int pages;
          int pobjects;
        };
      };
      struct kmem_cache* slab_cache;
      void* freelist;
      union {
        void* s_mem;
        long unsigned int counters;
        struct {
          unsigned int inuse : 16;
          unsigned int objects : 15;
          unsigned int frozen : 1;
        };
      };
    };
    struct {
      long unsigned int compound_head;
      unsigned char compound_dtor;
      unsigned char compound_order;
      atomic_t compound_mapcount;
      unsigned int compound_nr;
    };
    struct {
      long unsigned int _compound_pad_1;
      atomic_t hpage_pinned_refcount;
      struct list_head deferred_list;
    };
    struct {
      long unsigned int _pt_pad_1;
      pgtable_t pmd_huge_pte;
      long unsigned int _pt_pad_2;
      union {
        struct mm_struct* pt_mm;
        atomic_t pt_frag_refcount;
      };
      spinlock_t ptl;
    };
    struct {
      struct dev_pagemap* pgmap;
      void* zone_device_data;
    };
    struct callback_head callback_head;
  };
  union {
    atomic_t _mapcount;
    unsigned int page_type;
    unsigned int active;
    int units;
  };
  atomic_t _refcount;
  long unsigned int memcg_data;
};

struct paravirt_callee_save {
  void* func;
};

struct pv_info {
  const char* name;
};

struct pv_init_ops {
  unsigned int (*patch)(u8, void*, long unsigned int, unsigned int);
};

struct pv_time_ops {
  long long unsigned int (*sched_clock)();
  long long unsigned int (*steal_clock)(int);
};

struct pv_cpu_ops {
  void (*io_delay)();
};

struct pv_irq_ops {};

struct flush_tlb_info;

struct mmu_gather;

struct pv_mmu_ops {
  void (*flush_tlb_user)();
  void (*flush_tlb_kernel)();
  void (*flush_tlb_one_user)(long unsigned int);
  void (*flush_tlb_others)(const struct cpumask*, const struct flush_tlb_info*);
  void (*tlb_remove_table)(struct mmu_gather*, void*);
  void (*exit_mmap)(struct mm_struct*);
};

struct flush_tlb_info {
  struct mm_struct* mm;
  long unsigned int start;
  long unsigned int end;
  u64 new_tlb_gen;
  unsigned int stride_shift;
  bool freed_tables;
};

struct rw_semaphore {
  atomic_long_t count;
  atomic_long_t owner;
  struct optimistic_spin_queue osq;
  raw_spinlock_t wait_lock;
  struct list_head wait_list;
};

struct mm_rss_stat {
  atomic_long_t count[4];
};

struct ldt_struct;

struct vdso_image;

typedef struct {
  u64 ctx_id;
  atomic64_t tlb_gen;
  struct rw_semaphore ldt_usr_sem;
  struct ldt_struct* ldt;
  short unsigned int flags;
  struct mutex lock;
  void* vdso;
  const struct vdso_image* vdso_image;
  atomic_t perf_rdpmc_allowed;
  u16 pkey_allocation_map;
  s16 execute_only_pkey;
} mm_context_t;

struct xol_area;

struct uprobes_state {
  struct xol_area* xol_area;
};

struct work_struct;

typedef void (*work_func_t)(struct work_struct*);

struct work_struct {
  atomic_long_t data;
  struct list_head entry;
  work_func_t func;
};

struct linux_binfmt;

struct core_state;

struct kioctx_table;

struct user_namespace;

struct mmu_notifier_subscriptions;

struct mm_struct {
  struct {
    struct vm_area_struct* mmap;
    struct rb_root mm_rb;
    u64 vmacache_seqnum;
    long unsigned int (*get_unmapped_area)(
        struct file*,
        long unsigned int,
        long unsigned int,
        long unsigned int,
        long unsigned int);
    long unsigned int mmap_base;
    long unsigned int mmap_legacy_base;
    long unsigned int mmap_compat_base;
    long unsigned int mmap_compat_legacy_base;
    long unsigned int task_size;
    long unsigned int highest_vm_end;
    pgd_t* pgd;
    atomic_t membarrier_state;
    atomic_t mm_users;
    atomic_t mm_count;
    atomic_t has_pinned;
    atomic_long_t pgtables_bytes;
    int map_count;
    spinlock_t page_table_lock;
    struct rw_semaphore mmap_lock;
    struct list_head mmlist;
    long unsigned int hiwater_rss;
    long unsigned int hiwater_vm;
    long unsigned int total_vm;
    long unsigned int locked_vm;
    atomic64_t pinned_vm;
    long unsigned int data_vm;
    long unsigned int exec_vm;
    long unsigned int stack_vm;
    long unsigned int def_flags;
    seqcount_t write_protect_seq;
    spinlock_t arg_lock;
    long unsigned int start_code;
    long unsigned int end_code;
    long unsigned int start_data;
    long unsigned int end_data;
    long unsigned int start_brk;
    long unsigned int brk;
    long unsigned int start_stack;
    long unsigned int arg_start;
    long unsigned int arg_end;
    long unsigned int env_start;
    long unsigned int env_end;
    long unsigned int saved_auxv[46];
    struct mm_rss_stat rss_stat;
    struct linux_binfmt* binfmt;
    mm_context_t context;
    long unsigned int flags;
    struct core_state* core_state;
    spinlock_t ioctx_lock;
    struct kioctx_table* ioctx_table;
    struct task_struct* owner;
    struct user_namespace* user_ns;
    struct file* exe_file;
    struct mmu_notifier_subscriptions* notifier_subscriptions;
    long unsigned int numa_next_scan;
    long unsigned int numa_scan_offset;
    int numa_scan_seq;
    atomic_t tlb_flush_pending;
    bool tlb_flush_batched;
    struct uprobes_state uprobes_state;
    atomic_long_t hugetlb_usage;
    struct work_struct async_put_work;
    u32 pasid;
  };
  long unsigned int cpu_bitmap[0];
};

struct pv_lock_ops {
  void (*queued_spin_lock_slowpath)(struct qspinlock*, u32);
  struct paravirt_callee_save queued_spin_unlock;
  void (*wait)(u8*, u8);
  void (*kick)(int);
  struct paravirt_callee_save vcpu_is_preempted;
};

struct paravirt_patch_template {
  struct pv_init_ops init;
  struct pv_time_ops time;
  struct pv_cpu_ops cpu;
  struct pv_irq_ops irq;
  struct pv_mmu_ops mmu;
  struct pv_lock_ops lock;
};

struct paravirt_patch_site {
  u8* instr;
  u8 type;
  u8 len;
};

struct math_emu_info {
  long int ___orig_eip;
  struct pt_regs* regs;
};

typedef struct cpumask cpumask_var_t[1];

struct tracepoint_func {
  void* func;
  void* data;
  int prio;
};

struct static_call_key;

struct tracepoint {
  const char* name;
  struct static_key key;
  struct static_call_key* static_call_key;
  void* static_call_tramp;
  void* iterator;
  int (*regfunc)();
  void (*unregfunc)();
  struct tracepoint_func* funcs;
};

enum {
  UNAME26 = 131072,
  ADDR_NO_RANDOMIZE = 262144,
  FDPIC_FUNCPTRS = 524288,
  MMAP_PAGE_ZERO = 1048576,
  ADDR_COMPAT_LAYOUT = 2097152,
  READ_IMPLIES_EXEC = 4194304,
  ADDR_LIMIT_32BIT = 8388608,
  SHORT_INODE = 16777216,
  WHOLE_SECONDS = 33554432,
  STICKY_TIMEOUTS = 67108864,
  ADDR_LIMIT_3GB = 134217728,
};

enum tlb_infos {
  ENTRIES = 0,
  NR_INFO = 1,
};

struct cpuinfo_x86 {
  __u8 x86;
  __u8 x86_vendor;
  __u8 x86_model;
  __u8 x86_stepping;
  int x86_tlbsize;
  __u32 vmx_capability[3];
  __u8 x86_virt_bits;
  __u8 x86_phys_bits;
  __u8 x86_coreid_bits;
  __u8 cu_id;
  __u32 extended_cpuid_level;
  int cpuid_level;
  union {
    __u32 x86_capability[21];
    long unsigned int x86_capability_alignment;
  };
  char x86_vendor_id[16];
  char x86_model_id[64];
  unsigned int x86_cache_size;
  int x86_cache_alignment;
  int x86_cache_max_rmid;
  int x86_cache_occ_scale;
  int x86_cache_mbm_width_offset;
  int x86_power;
  long unsigned int loops_per_jiffy;
  u16 x86_max_cores;
  u16 apicid;
  u16 initial_apicid;
  u16 x86_clflush_size;
  u16 booted_cores;
  u16 phys_proc_id;
  u16 logical_proc_id;
  u16 cpu_core_id;
  u16 cpu_die_id;
  u16 logical_die_id;
  u16 cpu_index;
  u32 microcode;
  u8 x86_cache_bits;
  unsigned int initialized : 1;
};

struct seq_operations {
  void* (*start)(struct seq_file*, loff_t*);
  void (*stop)(struct seq_file*, void*);
  void* (*next)(struct seq_file*, void*, loff_t*);
  int (*show)(struct seq_file*, void*);
};

struct x86_hw_tss {
  u32 reserved1;
  u64 sp0;
  u64 sp1;
  u64 sp2;
  u64 reserved2;
  u64 ist[7];
  u32 reserved3;
  u32 reserved4;
  u16 reserved5;
  u16 io_bitmap_base;
} __attribute__((packed));

struct entry_stack {
  char stack[4096];
};

struct entry_stack_page {
  struct entry_stack stack;
};

struct x86_io_bitmap {
  u64 prev_sequence;
  unsigned int prev_max;
  long unsigned int bitmap[1025];
  long unsigned int mapall[1025];
};

struct tss_struct {
  struct x86_hw_tss x86_tss;
  struct x86_io_bitmap io_bitmap;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct fixed_percpu_data {
  char gs_base[40];
  long unsigned int stack_canary;
};

enum l1tf_mitigations {
  L1TF_MITIGATION_OFF = 0,
  L1TF_MITIGATION_FLUSH_NOWARN = 1,
  L1TF_MITIGATION_FLUSH = 2,
  L1TF_MITIGATION_FLUSH_NOSMT = 3,
  L1TF_MITIGATION_FULL = 4,
  L1TF_MITIGATION_FULL_FORCE = 5,
};

struct smp_ops {
  void (*smp_prepare_boot_cpu)();
  void (*smp_prepare_cpus)(unsigned int);
  void (*smp_cpus_done)(unsigned int);
  void (*stop_other_cpus)(int);
  void (*crash_stop_other_cpus)();
  void (*smp_send_reschedule)(int);
  int (*cpu_up)(unsigned int, struct task_struct*);
  int (*cpu_disable)();
  void (*cpu_die)(unsigned int);
  void (*play_dead)();
  void (*send_call_func_ipi)(const struct cpumask*);
  void (*send_call_func_single_ipi)(int);
};

enum pcpu_fc {
  PCPU_FC_AUTO = 0,
  PCPU_FC_EMBED = 1,
  PCPU_FC_PAGE = 2,
  PCPU_FC_NR = 3,
};

struct fwnode_operations;

struct device;

struct fwnode_handle {
  struct fwnode_handle* secondary;
  const struct fwnode_operations* ops;
  struct device* dev;
  struct list_head suppliers;
  struct list_head consumers;
  u8 flags;
};

struct fwnode_reference_args;

struct fwnode_endpoint;

struct fwnode_operations {
  struct fwnode_handle* (*get)(struct fwnode_handle*);
  void (*put)(struct fwnode_handle*);
  bool (*device_is_available)(const struct fwnode_handle*);
  const void* (*device_get_match_data)(
      const struct fwnode_handle*,
      const struct device*);
  bool (*property_present)(const struct fwnode_handle*, const char*);
  int (*property_read_int_array)(
      const struct fwnode_handle*,
      const char*,
      unsigned int,
      void*,
      size_t);
  int (*property_read_string_array)(
      const struct fwnode_handle*,
      const char*,
      const char**,
      size_t);
  const char* (*get_name)(const struct fwnode_handle*);
  const char* (*get_name_prefix)(const struct fwnode_handle*);
  struct fwnode_handle* (*get_parent)(const struct fwnode_handle*);
  struct fwnode_handle* (
      *get_next_child_node)(const struct fwnode_handle*, struct fwnode_handle*);
  struct fwnode_handle* (
      *get_named_child_node)(const struct fwnode_handle*, const char*);
  int (*get_reference_args)(
      const struct fwnode_handle*,
      const char*,
      const char*,
      unsigned int,
      unsigned int,
      struct fwnode_reference_args*);
  struct fwnode_handle* (*graph_get_next_endpoint)(
      const struct fwnode_handle*,
      struct fwnode_handle*);
  struct fwnode_handle* (*graph_get_remote_endpoint)(
      const struct fwnode_handle*);
  struct fwnode_handle* (*graph_get_port_parent)(struct fwnode_handle*);
  int (*graph_parse_endpoint)(
      const struct fwnode_handle*,
      struct fwnode_endpoint*);
  int (*add_links)(struct fwnode_handle*);
};

struct kref {
  refcount_t refcount;
};

struct kset;

struct kobj_type;

struct kernfs_node;

struct kobject {
  const char* name;
  struct list_head entry;
  struct kobject* parent;
  struct kset* kset;
  struct kobj_type* ktype;
  struct kernfs_node* sd;
  struct kref kref;
  unsigned int state_initialized : 1;
  unsigned int state_in_sysfs : 1;
  unsigned int state_add_uevent_sent : 1;
  unsigned int state_remove_uevent_sent : 1;
  unsigned int uevent_suppress : 1;
};

enum dl_dev_state {
  DL_DEV_NO_DRIVER = 0,
  DL_DEV_PROBING = 1,
  DL_DEV_DRIVER_BOUND = 2,
  DL_DEV_UNBINDING = 3,
};

struct dev_links_info {
  struct list_head suppliers;
  struct list_head consumers;
  struct list_head defer_sync;
  enum dl_dev_state status;
};

struct pm_message {
  int event;
};

typedef struct pm_message pm_message_t;

struct pm_subsys_data;

struct dev_pm_qos;

struct dev_pm_info {
  pm_message_t power_state;
  unsigned int can_wakeup : 1;
  unsigned int async_suspend : 1;
  bool in_dpm_list : 1;
  bool is_prepared : 1;
  bool is_suspended : 1;
  bool is_noirq_suspended : 1;
  bool is_late_suspended : 1;
  bool no_pm : 1;
  bool early_init : 1;
  bool direct_complete : 1;
  u32 driver_flags;
  spinlock_t lock;
  unsigned int should_wakeup : 1;
  struct pm_subsys_data* subsys_data;
  void (*set_latency_tolerance)(struct device*, s32);
  struct dev_pm_qos* qos;
};

struct dev_archdata {};

struct device_private;

struct device_type;

struct bus_type;

struct device_driver;

struct dev_pm_domain;

struct irq_domain;

struct dma_map_ops;

struct bus_dma_region;

struct device_dma_parameters;

struct cma;

struct device_node;

struct class;

struct attribute_group;

struct iommu_group;

struct dev_iommu;

struct device {
  struct kobject kobj;
  struct device* parent;
  struct device_private* p;
  const char* init_name;
  const struct device_type* type;
  struct bus_type* bus;
  struct device_driver* driver;
  void* platform_data;
  void* driver_data;
  struct mutex mutex;
  struct dev_links_info links;
  struct dev_pm_info power;
  struct dev_pm_domain* pm_domain;
  struct irq_domain* msi_domain;
  struct list_head msi_list;
  const struct dma_map_ops* dma_ops;
  u64* dma_mask;
  u64 coherent_dma_mask;
  u64 bus_dma_limit;
  const struct bus_dma_region* dma_range_map;
  struct device_dma_parameters* dma_parms;
  struct list_head dma_pools;
  struct cma* cma_area;
  struct dev_archdata archdata;
  struct device_node* of_node;
  struct fwnode_handle* fwnode;
  int numa_node;
  dev_t devt;
  u32 id;
  spinlock_t devres_lock;
  struct list_head devres_head;
  struct class* class;
  const struct attribute_group** groups;
  void (*release)(struct device*);
  struct iommu_group* iommu_group;
  struct dev_iommu* iommu;
  bool offline_disabled : 1;
  bool offline : 1;
  bool of_node_reused : 1;
  bool state_synced : 1;
};

struct fwnode_endpoint {
  unsigned int port;
  unsigned int id;
  const struct fwnode_handle* local_fwnode;
};

struct fwnode_reference_args {
  struct fwnode_handle* fwnode;
  unsigned int nargs;
  u64 args[8];
};

struct vm_struct {
  struct vm_struct* next;
  void* addr;
  long unsigned int size;
  long unsigned int flags;
  struct page** pages;
  unsigned int nr_pages;
  phys_addr_t phys_addr;
  const void* caller;
};

struct wait_queue_head {
  spinlock_t lock;
  struct list_head head;
};

typedef struct wait_queue_head wait_queue_head_t;

struct seqcount_raw_spinlock {
  seqcount_t seqcount;
};

typedef struct seqcount_raw_spinlock seqcount_raw_spinlock_t;

typedef struct {
  seqcount_spinlock_t seqcount;
  spinlock_t lock;
} seqlock_t;

enum node_states {
  N_POSSIBLE = 0,
  N_ONLINE = 1,
  N_NORMAL_MEMORY = 2,
  N_HIGH_MEMORY = 2,
  N_MEMORY = 3,
  N_CPU = 4,
  N_GENERIC_INITIATOR = 5,
  NR_NODE_STATES = 6,
};

struct userfaultfd_ctx;

struct vm_userfaultfd_ctx {
  struct userfaultfd_ctx* ctx;
};

struct anon_vma;

struct vm_operations_struct;

struct vm_area_struct {
  long unsigned int vm_start;
  long unsigned int vm_end;
  struct vm_area_struct* vm_next;
  struct vm_area_struct* vm_prev;
  struct rb_node vm_rb;
  long unsigned int rb_subtree_gap;
  struct mm_struct* vm_mm;
  pgprot_t vm_page_prot;
  long unsigned int vm_flags;
  struct {
    struct rb_node rb;
    long unsigned int rb_subtree_last;
  } shared;
  struct list_head anon_vma_chain;
  struct anon_vma* anon_vma;
  const struct vm_operations_struct* vm_ops;
  long unsigned int vm_pgoff;
  struct file* vm_file;
  void* vm_private_data;
  atomic_long_t swap_readahead_info;
  struct mempolicy* vm_policy;
  struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
};

enum {
  MM_FILEPAGES = 0,
  MM_ANONPAGES = 1,
  MM_SWAPENTS = 2,
  MM_SHMEMPAGES = 3,
  NR_MM_COUNTERS = 4,
};

struct swait_queue_head {
  raw_spinlock_t lock;
  struct list_head task_list;
};

struct completion {
  unsigned int done;
  struct swait_queue_head wait;
};

typedef int (*notifier_fn_t)(struct notifier_block*, long unsigned int, void*);

struct notifier_block {
  notifier_fn_t notifier_call;
  struct notifier_block* next;
  int priority;
};

struct blocking_notifier_head {
  struct rw_semaphore rwsem;
  struct notifier_block* head;
};

struct arch_uprobe_task {
  long unsigned int saved_scratch_register;
  unsigned int saved_trap_nr;
  unsigned int saved_tf;
};

enum uprobe_task_state {
  UTASK_RUNNING = 0,
  UTASK_SSTEP = 1,
  UTASK_SSTEP_ACK = 2,
  UTASK_SSTEP_TRAPPED = 3,
};

struct uprobe;

struct return_instance;

struct uprobe_task {
  enum uprobe_task_state state;
  union {
    struct {
      struct arch_uprobe_task autask;
      long unsigned int vaddr;
    };
    struct {
      struct callback_head dup_xol_work;
      long unsigned int dup_xol_addr;
    };
  };
  struct uprobe* active_uprobe;
  long unsigned int xol_vaddr;
  struct return_instance* return_instances;
  unsigned int depth;
};

struct return_instance {
  struct uprobe* uprobe;
  long unsigned int func;
  long unsigned int stack;
  long unsigned int orig_ret_vaddr;
  bool chained;
  struct return_instance* next;
};

struct vdso_image {
  void* data;
  long unsigned int size;
  long unsigned int alt;
  long unsigned int alt_len;
  long unsigned int extable_base;
  long unsigned int extable_len;
  const void* extable;
  long int sym_vvar_start;
  long int sym_vvar_page;
  long int sym_pvclock_page;
  long int sym_hvclock_page;
  long int sym_timens_page;
  long int sym_VDSO32_NOTE_MASK;
  long int sym___kernel_sigreturn;
  long int sym___kernel_rt_sigreturn;
  long int sym___kernel_vsyscall;
  long int sym_int80_landing_pad;
  long int sym_vdso32_sigreturn_landing_pad;
  long int sym_vdso32_rt_sigreturn_landing_pad;
};

struct xarray {
  spinlock_t xa_lock;
  gfp_t xa_flags;
  void* xa_head;
};

typedef u32 errseq_t;

struct address_space_operations;

struct address_space {
  struct inode* host;
  struct xarray i_pages;
  gfp_t gfp_mask;
  atomic_t i_mmap_writable;
  atomic_t nr_thps;
  struct rb_root_cached i_mmap;
  struct rw_semaphore i_mmap_rwsem;
  long unsigned int nrpages;
  long unsigned int nrexceptional;
  long unsigned int writeback_index;
  const struct address_space_operations* a_ops;
  long unsigned int flags;
  errseq_t wb_err;
  spinlock_t private_lock;
  struct list_head private_list;
  void* private_data;
};

struct vmem_altmap {
  const long unsigned int base_pfn;
  const long unsigned int end_pfn;
  const long unsigned int reserve;
  long unsigned int free;
  long unsigned int align;
  long unsigned int alloc;
};

struct percpu_ref_data;

struct percpu_ref {
  long unsigned int percpu_count_ptr;
  struct percpu_ref_data* data;
};

enum memory_type {
  MEMORY_DEVICE_PRIVATE = 1,
  MEMORY_DEVICE_FS_DAX = 2,
  MEMORY_DEVICE_GENERIC = 3,
  MEMORY_DEVICE_PCI_P2PDMA = 4,
};

struct dev_pagemap_ops;

struct dev_pagemap {
  struct vmem_altmap altmap;
  struct percpu_ref* ref;
  struct percpu_ref internal_ref;
  struct completion done;
  enum memory_type type;
  unsigned int flags;
  const struct dev_pagemap_ops* ops;
  void* owner;
  int nr_range;
  union {
    struct range range;
    struct range ranges[0];
  };
};

struct vfsmount;

struct path {
  struct vfsmount* mnt;
  struct dentry* dentry;
};

enum rw_hint {
  WRITE_LIFE_NOT_SET = 0,
  WRITE_LIFE_NONE = 1,
  WRITE_LIFE_SHORT = 2,
  WRITE_LIFE_MEDIUM = 3,
  WRITE_LIFE_LONG = 4,
  WRITE_LIFE_EXTREME = 5,
};

enum pid_type {
  PIDTYPE_PID = 0,
  PIDTYPE_TGID = 1,
  PIDTYPE_PGID = 2,
  PIDTYPE_SID = 3,
  PIDTYPE_MAX = 4,
};

struct fown_struct {
  rwlock_t lock;
  struct pid* pid;
  enum pid_type pid_type;
  kuid_t uid;
  kuid_t euid;
  int signum;
};

struct file_ra_state {
  long unsigned int start;
  unsigned int size;
  unsigned int async_size;
  unsigned int ra_pages;
  unsigned int mmap_miss;
  loff_t prev_pos;
};

struct file {
  union {
    struct llist_node fu_llist;
    struct callback_head fu_rcuhead;
  } f_u;
  struct path f_path;
  struct inode* f_inode;
  const struct file_operations* f_op;
  spinlock_t f_lock;
  enum rw_hint f_write_hint;
  atomic_long_t f_count;
  unsigned int f_flags;
  fmode_t f_mode;
  struct mutex f_pos_lock;
  loff_t f_pos;
  struct fown_struct f_owner;
  const struct cred* f_cred;
  struct file_ra_state f_ra;
  u64 f_version;
  void* f_security;
  void* private_data;
  struct hlist_head* f_ep;
  struct address_space* f_mapping;
  errseq_t f_wb_err;
  errseq_t f_sb_err;
};

typedef unsigned int vm_fault_t;

enum page_entry_size {
  PE_SIZE_PTE = 0,
  PE_SIZE_PMD = 1,
  PE_SIZE_PUD = 2,
};

struct vm_fault;

struct vm_operations_struct {
  void (*open)(struct vm_area_struct*);
  void (*close)(struct vm_area_struct*);
  int (*may_split)(struct vm_area_struct*, long unsigned int);
  int (*mremap)(struct vm_area_struct*, long unsigned int);
  int (*mprotect)(
      struct vm_area_struct*,
      long unsigned int,
      long unsigned int,
      long unsigned int);
  vm_fault_t (*fault)(struct vm_fault*);
  vm_fault_t (*huge_fault)(struct vm_fault*, enum page_entry_size);
  vm_fault_t (
      *map_pages)(struct vm_fault*, long unsigned int, long unsigned int);
  long unsigned int (*pagesize)(struct vm_area_struct*);
  vm_fault_t (*page_mkwrite)(struct vm_fault*);
  vm_fault_t (*pfn_mkwrite)(struct vm_fault*);
  int (*access)(struct vm_area_struct*, long unsigned int, void*, int, int);
  const char* (*name)(struct vm_area_struct*);
  int (*set_policy)(struct vm_area_struct*, struct mempolicy*);
  struct mempolicy* (*get_policy)(struct vm_area_struct*, long unsigned int);
  struct page* (*find_special_page)(struct vm_area_struct*, long unsigned int);
};

struct core_thread {
  struct task_struct* task;
  struct core_thread* next;
};

struct core_state {
  atomic_t nr_threads;
  struct core_thread dumper;
  struct completion startup;
};

struct vm_fault {
  const struct {
    struct vm_area_struct* vma;
    gfp_t gfp_mask;
    long unsigned int pgoff;
    long unsigned int address;
  };
  unsigned int flags;
  pmd_t* pmd;
  pud_t* pud;
  pte_t orig_pte;
  struct page* cow_page;
  struct page* page;
  pte_t* pte;
  spinlock_t* ptl;
  pgtable_t prealloc_pte;
};

enum migratetype {
  MIGRATE_UNMOVABLE = 0,
  MIGRATE_MOVABLE = 1,
  MIGRATE_RECLAIMABLE = 2,
  MIGRATE_PCPTYPES = 3,
  MIGRATE_HIGHATOMIC = 3,
  MIGRATE_CMA = 4,
  MIGRATE_ISOLATE = 5,
  MIGRATE_TYPES = 6,
};

struct free_area {
  struct list_head free_list[6];
  long unsigned int nr_free;
};

struct zone_padding {
  char x[0];
};

enum numa_stat_item {
  NUMA_HIT = 0,
  NUMA_MISS = 1,
  NUMA_FOREIGN = 2,
  NUMA_INTERLEAVE_HIT = 3,
  NUMA_LOCAL = 4,
  NUMA_OTHER = 5,
  NR_VM_NUMA_STAT_ITEMS = 6,
};

enum zone_stat_item {
  NR_FREE_PAGES = 0,
  NR_ZONE_LRU_BASE = 1,
  NR_ZONE_INACTIVE_ANON = 1,
  NR_ZONE_ACTIVE_ANON = 2,
  NR_ZONE_INACTIVE_FILE = 3,
  NR_ZONE_ACTIVE_FILE = 4,
  NR_ZONE_UNEVICTABLE = 5,
  NR_ZONE_WRITE_PENDING = 6,
  NR_MLOCK = 7,
  NR_BOUNCE = 8,
  NR_ZSPAGES = 9,
  NR_FREE_CMA_PAGES = 10,
  NR_VM_ZONE_STAT_ITEMS = 11,
};

enum node_stat_item {
  NR_LRU_BASE = 0,
  NR_INACTIVE_ANON = 0,
  NR_ACTIVE_ANON = 1,
  NR_INACTIVE_FILE = 2,
  NR_ACTIVE_FILE = 3,
  NR_UNEVICTABLE = 4,
  NR_SLAB_RECLAIMABLE_B = 5,
  NR_SLAB_UNRECLAIMABLE_B = 6,
  NR_ISOLATED_ANON = 7,
  NR_ISOLATED_FILE = 8,
  WORKINGSET_NODES = 9,
  WORKINGSET_REFAULT_BASE = 10,
  WORKINGSET_REFAULT_ANON = 10,
  WORKINGSET_REFAULT_FILE = 11,
  WORKINGSET_ACTIVATE_BASE = 12,
  WORKINGSET_ACTIVATE_ANON = 12,
  WORKINGSET_ACTIVATE_FILE = 13,
  WORKINGSET_RESTORE_BASE = 14,
  WORKINGSET_RESTORE_ANON = 14,
  WORKINGSET_RESTORE_FILE = 15,
  WORKINGSET_NODERECLAIM = 16,
  NR_ANON_MAPPED = 17,
  NR_FILE_MAPPED = 18,
  NR_FILE_PAGES = 19,
  NR_FILE_DIRTY = 20,
  NR_WRITEBACK = 21,
  NR_WRITEBACK_TEMP = 22,
  NR_SHMEM = 23,
  NR_SHMEM_THPS = 24,
  NR_SHMEM_PMDMAPPED = 25,
  NR_FILE_THPS = 26,
  NR_FILE_PMDMAPPED = 27,
  NR_ANON_THPS = 28,
  NR_VMSCAN_WRITE = 29,
  NR_VMSCAN_IMMEDIATE = 30,
  NR_DIRTIED = 31,
  NR_WRITTEN = 32,
  NR_KERNEL_MISC_RECLAIMABLE = 33,
  NR_FOLL_PIN_ACQUIRED = 34,
  NR_FOLL_PIN_RELEASED = 35,
  NR_KERNEL_STACK_KB = 36,
  NR_PAGETABLE = 37,
  NR_SWAPCACHE = 38,
  NR_VM_NODE_STAT_ITEMS = 39,
};

enum lru_list {
  LRU_INACTIVE_ANON = 0,
  LRU_ACTIVE_ANON = 1,
  LRU_INACTIVE_FILE = 2,
  LRU_ACTIVE_FILE = 3,
  LRU_UNEVICTABLE = 4,
  NR_LRU_LISTS = 5,
};

struct pglist_data;

struct lruvec {
  struct list_head lists[5];
  spinlock_t lru_lock;
  long unsigned int anon_cost;
  long unsigned int file_cost;
  atomic_long_t nonresident_age;
  long unsigned int refaults[2];
  long unsigned int flags;
  struct pglist_data* pgdat;
};

struct per_cpu_pageset;

struct zone {
  long unsigned int _watermark[3];
  long unsigned int watermark_boost;
  long unsigned int nr_reserved_highatomic;
  long int lowmem_reserve[5];
  int node;
  struct pglist_data* zone_pgdat;
  struct per_cpu_pageset* pageset;
  int pageset_high;
  int pageset_batch;
  long unsigned int zone_start_pfn;
  atomic_long_t managed_pages;
  long unsigned int spanned_pages;
  long unsigned int present_pages;
  long unsigned int cma_pages;
  const char* name;
  long unsigned int nr_isolate_pageblock;
  seqlock_t span_seqlock;
  int initialized;
  long : 32;
  long : 64;
  struct zone_padding _pad1_;
  struct free_area free_area[11];
  long unsigned int flags;
  spinlock_t lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct zone_padding _pad2_;
  long unsigned int percpu_drift_mark;
  long unsigned int compact_cached_free_pfn;
  long unsigned int compact_cached_migrate_pfn[2];
  long unsigned int compact_init_migrate_pfn;
  long unsigned int compact_init_free_pfn;
  unsigned int compact_considered;
  unsigned int compact_defer_shift;
  int compact_order_failed;
  bool compact_blockskip_flush;
  bool contiguous;
  short : 16;
  struct zone_padding _pad3_;
  atomic_long_t vm_stat[11];
  atomic_long_t vm_numa_stat[6];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct zoneref {
  struct zone* zone;
  int zone_idx;
};

struct zonelist {
  struct zoneref _zonerefs[41];
};

enum zone_type {
  ZONE_DMA = 0,
  ZONE_DMA32 = 1,
  ZONE_NORMAL = 2,
  ZONE_MOVABLE = 3,
  ZONE_DEVICE = 4,
  __MAX_NR_ZONES = 5,
};

struct deferred_split {
  spinlock_t split_queue_lock;
  struct list_head split_queue;
  long unsigned int split_queue_len;
};

struct per_cpu_nodestat;

struct pglist_data {
  struct zone node_zones[5];
  struct zonelist node_zonelists[2];
  int nr_zones;
  spinlock_t node_size_lock;
  long unsigned int node_start_pfn;
  long unsigned int node_present_pages;
  long unsigned int node_spanned_pages;
  int node_id;
  wait_queue_head_t kswapd_wait;
  wait_queue_head_t pfmemalloc_wait;
  struct task_struct* kswapd;
  int kswapd_order;
  enum zone_type kswapd_highest_zoneidx;
  int kswapd_failures;
  int kcompactd_max_order;
  enum zone_type kcompactd_highest_zoneidx;
  wait_queue_head_t kcompactd_wait;
  struct task_struct* kcompactd;
  long unsigned int totalreserve_pages;
  long unsigned int min_unmapped_pages;
  long unsigned int min_slab_pages;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct zone_padding _pad1_;
  struct deferred_split deferred_split_queue;
  struct lruvec __lruvec;
  long unsigned int flags;
  long : 64;
  struct zone_padding _pad2_;
  struct per_cpu_nodestat* per_cpu_nodestats;
  atomic_long_t vm_stat[39];
};

typedef unsigned int isolate_mode_t;

enum zone_watermarks {
  WMARK_MIN = 0,
  WMARK_LOW = 1,
  WMARK_HIGH = 2,
  NR_WMARK = 3,
};

struct per_cpu_pages {
  int count;
  int high;
  int batch;
  struct list_head lists[3];
};

struct per_cpu_pageset {
  struct per_cpu_pages pcp;
  s8 expire;
  u16 vm_numa_stat_diff[6];
  s8 stat_threshold;
  s8 vm_stat_diff[11];
};

struct per_cpu_nodestat {
  s8 stat_threshold;
  s8 vm_node_stat_diff[39];
};

enum {
  ZONELIST_FALLBACK = 0,
  ZONELIST_NOFALLBACK = 1,
  MAX_ZONELISTS = 2,
};

typedef struct pglist_data pg_data_t;

struct mem_section_usage {
  long unsigned int subsection_map[1];
  long unsigned int pageblock_flags[0];
};

struct mem_section {
  long unsigned int section_mem_map;
  struct mem_section_usage* usage;
};

struct x86_init_mpparse {
  void (*setup_ioapic_ids)();
  void (*find_smp_config)();
  void (*get_smp_config)(unsigned int);
};

struct x86_init_resources {
  void (*probe_roms)();
  void (*reserve_resources)();
  char* (*memory_setup)();
};

struct x86_init_irqs {
  void (*pre_vector_init)();
  void (*intr_init)();
  void (*intr_mode_select)();
  void (*intr_mode_init)();
  struct irq_domain* (*create_pci_msi_domain)();
};

struct x86_init_oem {
  void (*arch_setup)();
  void (*banner)();
};

struct x86_init_paging {
  void (*pagetable_init)();
};

struct x86_init_timers {
  void (*setup_percpu_clockev)();
  void (*timer_init)();
  void (*wallclock_init)();
};

struct x86_init_iommu {
  int (*iommu_init)();
};

struct x86_init_pci {
  int (*arch_init)();
  int (*init)();
  void (*init_irq)();
  void (*fixup_irqs)();
};

struct x86_hyper_init {
  void (*init_platform)();
  void (*guest_late_init)();
  bool (*x2apic_available)();
  bool (*msi_ext_dest_id)();
  void (*init_mem_mapping)();
  void (*init_after_bootmem)();
};

struct x86_init_acpi {
  void (*set_root_pointer)(u64);
  u64 (*get_root_pointer)();
  void (*reduced_hw_early_init)();
};

struct x86_init_ops {
  struct x86_init_resources resources;
  struct x86_init_mpparse mpparse;
  struct x86_init_irqs irqs;
  struct x86_init_oem oem;
  struct x86_init_paging paging;
  struct x86_init_timers timers;
  struct x86_init_iommu iommu;
  struct x86_init_pci pci;
  struct x86_hyper_init hyper;
  struct x86_init_acpi acpi;
};

struct x86_cpuinit_ops {
  void (*setup_percpu_clockev)();
  void (*early_percpu_clock_init)();
  void (*fixup_cpu_id)(struct cpuinfo_x86*, int);
};

struct x86_legacy_devices {
  int pnpbios;
};

enum x86_legacy_i8042_state {
  X86_LEGACY_I8042_PLATFORM_ABSENT = 0,
  X86_LEGACY_I8042_FIRMWARE_ABSENT = 1,
  X86_LEGACY_I8042_EXPECTED_PRESENT = 2,
};

struct x86_legacy_features {
  enum x86_legacy_i8042_state i8042;
  int rtc;
  int warm_reset;
  int no_vga;
  int reserve_bios_regions;
  struct x86_legacy_devices devices;
};

struct ghcb;

struct x86_hyper_runtime {
  void (*pin_vcpu)(int);
  void (*sev_es_hcall_prepare)(struct ghcb*, struct pt_regs*);
  bool (*sev_es_hcall_finish)(struct ghcb*, struct pt_regs*);
};

struct x86_platform_ops {
  long unsigned int (*calibrate_cpu)();
  long unsigned int (*calibrate_tsc)();
  void (*get_wallclock)(struct timespec64*);
  int (*set_wallclock)(const struct timespec64*);
  void (*iommu_shutdown)();
  bool (*is_untracked_pat_range)(u64, u64);
  void (*nmi_init)();
  unsigned char (*get_nmi_reason)();
  void (*save_sched_clock_state)();
  void (*restore_sched_clock_state)();
  void (*apic_post_init)();
  struct x86_legacy_features legacy;
  void (*set_legacy_features)();
  struct x86_hyper_runtime hyper;
};

struct pci_dev;

struct x86_msi_ops {
  void (*restore_msi_irqs)(struct pci_dev*);
};

struct x86_apic_ops {
  unsigned int (*io_apic_read)(unsigned int, unsigned int);
  void (*restore)();
};

struct physid_mask {
  long unsigned int mask[512];
};

typedef struct physid_mask physid_mask_t;

typedef void percpu_ref_func_t(struct percpu_ref*);

struct percpu_ref_data {
  atomic_long_t count;
  percpu_ref_func_t* release;
  percpu_ref_func_t* confirm_switch;
  bool force_atomic : 1;
  bool allow_reinit : 1;
  struct callback_head rcu;
  struct percpu_ref* ref;
};

struct shrink_control {
  gfp_t gfp_mask;
  int nid;
  long unsigned int nr_to_scan;
  long unsigned int nr_scanned;
  struct mem_cgroup* memcg;
};

struct shrinker {
  long unsigned int (*count_objects)(struct shrinker*, struct shrink_control*);
  long unsigned int (*scan_objects)(struct shrinker*, struct shrink_control*);
  long int batch;
  int seeks;
  unsigned int flags;
  struct list_head list;
  int id;
  atomic_long_t* nr_deferred;
};

struct rlimit {
  __kernel_ulong_t rlim_cur;
  __kernel_ulong_t rlim_max;
};

struct resource {
  resource_size_t start;
  resource_size_t end;
  const char* name;
  long unsigned int flags;
  long unsigned int desc;
  struct resource* parent;
  struct resource* sibling;
  struct resource* child;
};

struct dev_pagemap_ops {
  void (*page_free)(struct page*);
  void (*kill)(struct dev_pagemap*);
  void (*cleanup)(struct dev_pagemap*);
  vm_fault_t (*migrate_to_ram)(struct vm_fault*);
};

struct pid_namespace;

struct upid {
  int nr;
  struct pid_namespace* ns;
};

struct pid {
  refcount_t count;
  unsigned int level;
  spinlock_t lock;
  struct hlist_head tasks[4];
  struct hlist_head inodes;
  wait_queue_head_t wait_pidfd;
  struct callback_head rcu;
  struct upid numbers[1];
};

typedef struct {
  gid_t val;
} kgid_t;

struct hrtimer_cpu_base;

struct hrtimer_clock_base {
  struct hrtimer_cpu_base* cpu_base;
  unsigned int index;
  clockid_t clockid;
  seqcount_raw_spinlock_t seq;
  struct hrtimer* running;
  struct timerqueue_head active;
  ktime_t (*get_time)();
  ktime_t offset;
};

struct hrtimer_cpu_base {
  raw_spinlock_t lock;
  unsigned int cpu;
  unsigned int active_bases;
  unsigned int clock_was_set_seq;
  unsigned int hres_active : 1;
  unsigned int in_hrtirq : 1;
  unsigned int hang_detected : 1;
  unsigned int softirq_activated : 1;
  unsigned int nr_events;
  short unsigned int nr_retries;
  short unsigned int nr_hangs;
  unsigned int max_hang_time;
  ktime_t expires_next;
  struct hrtimer* next_timer;
  ktime_t softirq_expires_next;
  struct hrtimer* softirq_next_timer;
  struct hrtimer_clock_base clock_base[8];
};

enum hrtimer_base_type {
  HRTIMER_BASE_MONOTONIC = 0,
  HRTIMER_BASE_REALTIME = 1,
  HRTIMER_BASE_BOOTTIME = 2,
  HRTIMER_BASE_TAI = 3,
  HRTIMER_BASE_MONOTONIC_SOFT = 4,
  HRTIMER_BASE_REALTIME_SOFT = 5,
  HRTIMER_BASE_BOOTTIME_SOFT = 6,
  HRTIMER_BASE_TAI_SOFT = 7,
  HRTIMER_MAX_CLOCK_BASES = 8,
};

struct tick_device;

typedef void __signalfn_t(int);

typedef __signalfn_t* __sighandler_t;

typedef void __restorefn_t();

typedef __restorefn_t* __sigrestore_t;

union sigval {
  int sival_int;
  void* sival_ptr;
};

typedef union sigval sigval_t;

union __sifields {
  struct {
    __kernel_pid_t _pid;
    __kernel_uid32_t _uid;
  } _kill;
  struct {
    __kernel_timer_t _tid;
    int _overrun;
    sigval_t _sigval;
    int _sys_private;
  } _timer;
  struct {
    __kernel_pid_t _pid;
    __kernel_uid32_t _uid;
    sigval_t _sigval;
  } _rt;
  struct {
    __kernel_pid_t _pid;
    __kernel_uid32_t _uid;
    int _status;
    __kernel_clock_t _utime;
    __kernel_clock_t _stime;
  } _sigchld;
  struct {
    void* _addr;
    union {
      short int _addr_lsb;
      struct {
        char _dummy_bnd[8];
        void* _lower;
        void* _upper;
      } _addr_bnd;
      struct {
        char _dummy_pkey[8];
        __u32 _pkey;
      } _addr_pkey;
    };
  } _sigfault;
  struct {
    long int _band;
    int _fd;
  } _sigpoll;
  struct {
    void* _call_addr;
    int _syscall;
    unsigned int _arch;
  } _sigsys;
};

struct kernel_siginfo {
  struct {
    int si_signo;
    int si_errno;
    int si_code;
    union __sifields _sifields;
  };
};

struct user_struct {
  refcount_t __count;
  atomic_t processes;
  atomic_t sigpending;
  atomic_t fanotify_listeners;
  atomic_long_t epoll_watches;
  long unsigned int mq_bytes;
  long unsigned int locked_shm;
  long unsigned int unix_inflight;
  atomic_long_t pipe_bufs;
  struct hlist_node uidhash_node;
  kuid_t uid;
  atomic_long_t locked_vm;
  struct ratelimit_state ratelimit;
};

struct sigaction {
  __sighandler_t sa_handler;
  long unsigned int sa_flags;
  __sigrestore_t sa_restorer;
  sigset_t sa_mask;
};

struct k_sigaction {
  struct sigaction sa;
};

struct cpu_itimer {
  u64 expires;
  u64 incr;
};

struct task_cputime_atomic {
  atomic64_t utime;
  atomic64_t stime;
  atomic64_t sum_exec_runtime;
};

struct thread_group_cputimer {
  struct task_cputime_atomic cputime_atomic;
};

struct tty_struct;

struct taskstats;

struct tty_audit_buf;

struct signal_struct {
  refcount_t sigcnt;
  atomic_t live;
  int nr_threads;
  struct list_head thread_head;
  wait_queue_head_t wait_chldexit;
  struct task_struct* curr_target;
  struct sigpending shared_pending;
  struct hlist_head multiprocess;
  int group_exit_code;
  int notify_count;
  struct task_struct* group_exit_task;
  int group_stop_count;
  unsigned int flags;
  unsigned int is_child_subreaper : 1;
  unsigned int has_child_subreaper : 1;
  int posix_timer_id;
  struct list_head posix_timers;
  struct hrtimer real_timer;
  ktime_t it_real_incr;
  struct cpu_itimer it[2];
  struct thread_group_cputimer cputimer;
  struct posix_cputimers posix_cputimers;
  struct pid* pids[4];
  struct pid* tty_old_pgrp;
  int leader;
  struct tty_struct* tty;
  seqlock_t stats_lock;
  u64 utime;
  u64 stime;
  u64 cutime;
  u64 cstime;
  u64 gtime;
  u64 cgtime;
  struct prev_cputime prev_cputime;
  long unsigned int nvcsw;
  long unsigned int nivcsw;
  long unsigned int cnvcsw;
  long unsigned int cnivcsw;
  long unsigned int min_flt;
  long unsigned int maj_flt;
  long unsigned int cmin_flt;
  long unsigned int cmaj_flt;
  long unsigned int inblock;
  long unsigned int oublock;
  long unsigned int cinblock;
  long unsigned int coublock;
  long unsigned int maxrss;
  long unsigned int cmaxrss;
  struct task_io_accounting ioac;
  long long unsigned int sum_sched_runtime;
  struct rlimit rlim[16];
  struct taskstats* stats;
  unsigned int audit_tty;
  struct tty_audit_buf* tty_audit_buf;
  bool oom_flag_origin;
  short int oom_score_adj;
  short int oom_score_adj_min;
  struct mm_struct* oom_mm;
  struct mutex cred_guard_mutex;
  struct rw_semaphore exec_update_lock;
};

enum rseq_cs_flags_bit {
  RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
  RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
  RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

struct rseq {
  __u32 cpu_id_start;
  __u32 cpu_id;
  union {
    __u64 ptr64;
    __u64 ptr;
  } rseq_cs;
  __u32 flags;
  long : 32;
  long : 64;
};

struct root_domain;

enum perf_event_task_context {
  perf_invalid_context = 4294967295,
  perf_hw_context = 0,
  perf_sw_context = 1,
  perf_nr_task_contexts = 2,
};

struct rq;

struct rq_flags;

struct sched_class {
  void (*enqueue_task)(struct rq*, struct task_struct*, int);
  void (*dequeue_task)(struct rq*, struct task_struct*, int);
  void (*yield_task)(struct rq*);
  bool (*yield_to_task)(struct rq*, struct task_struct*);
  void (*check_preempt_curr)(struct rq*, struct task_struct*, int);
  struct task_struct* (*pick_next_task)(struct rq*);
  void (*put_prev_task)(struct rq*, struct task_struct*);
  void (*set_next_task)(struct rq*, struct task_struct*, bool);
  int (*balance)(struct rq*, struct task_struct*, struct rq_flags*);
  int (*select_task_rq)(struct task_struct*, int, int);
  void (*migrate_task_rq)(struct task_struct*, int);
  void (*task_woken)(struct rq*, struct task_struct*);
  void (*set_cpus_allowed)(struct task_struct*, const struct cpumask*, u32);
  void (*rq_online)(struct rq*);
  void (*rq_offline)(struct rq*);
  struct rq* (*find_lock_rq)(struct task_struct*, struct rq*);
  void (*task_tick)(struct rq*, struct task_struct*, int);
  void (*task_fork)(struct task_struct*);
  void (*task_dead)(struct task_struct*);
  void (*switched_from)(struct rq*, struct task_struct*);
  void (*switched_to)(struct rq*, struct task_struct*);
  void (*prio_changed)(struct rq*, struct task_struct*, int);
  unsigned int (*get_rr_interval)(struct rq*, struct task_struct*);
  void (*update_curr)(struct rq*);
  void (*task_change_group)(struct task_struct*, int);
};

struct kernel_cap_struct {
  __u32 cap[2];
};

typedef struct kernel_cap_struct kernel_cap_t;

struct ucounts;

struct group_info;

struct cred {
  atomic_t usage;
  atomic_t subscribers;
  void* put_addr;
  unsigned int magic;
  kuid_t uid;
  kgid_t gid;
  kuid_t suid;
  kgid_t sgid;
  kuid_t euid;
  kgid_t egid;
  kuid_t fsuid;
  kgid_t fsgid;
  unsigned int securebits;
  kernel_cap_t cap_inheritable;
  kernel_cap_t cap_permitted;
  kernel_cap_t cap_effective;
  kernel_cap_t cap_bset;
  kernel_cap_t cap_ambient;
  unsigned char jit_keyring;
  struct key* session_keyring;
  struct key* process_keyring;
  struct key* thread_keyring;
  struct key* request_key_auth;
  void* security;
  struct user_struct* user;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  struct group_info* group_info;
  union {
    int non_rcu;
    struct callback_head rcu;
  };
};

typedef int32_t key_serial_t;

typedef uint32_t key_perm_t;

struct key_type;

struct key_tag;

struct keyring_index_key {
  long unsigned int hash;
  union {
    struct {
      u16 desc_len;
      char desc[6];
    };
    long unsigned int x;
  };
  struct key_type* type;
  struct key_tag* domain_tag;
  const char* description;
};

union key_payload {
  void* rcu_data0;
  void* data[4];
};

struct assoc_array_ptr;

struct assoc_array {
  struct assoc_array_ptr* root;
  long unsigned int nr_leaves_on_tree;
};

struct key_user;

struct key_restriction;

struct key {
  refcount_t usage;
  key_serial_t serial;
  union {
    struct list_head graveyard_link;
    struct rb_node serial_node;
  };
  struct rw_semaphore sem;
  struct key_user* user;
  void* security;
  union {
    time64_t expiry;
    time64_t revoked_at;
  };
  time64_t last_used_at;
  kuid_t uid;
  kgid_t gid;
  key_perm_t perm;
  short unsigned int quotalen;
  short unsigned int datalen;
  short int state;
  long unsigned int flags;
  union {
    struct keyring_index_key index_key;
    struct {
      long unsigned int hash;
      long unsigned int len_desc;
      struct key_type* type;
      struct key_tag* domain_tag;
      char* description;
    };
  };
  union {
    union key_payload payload;
    struct {
      struct list_head name_link;
      struct assoc_array keys;
    };
  };
  struct key_restriction* restrict_link;
};

struct sighand_struct {
  spinlock_t siglock;
  refcount_t count;
  wait_queue_head_t signalfd_wqh;
  struct k_sigaction action[64];
};

struct io_cq;

struct io_context {
  atomic_long_t refcount;
  atomic_t active_ref;
  atomic_t nr_tasks;
  spinlock_t lock;
  short unsigned int ioprio;
  struct xarray icq_tree;
  struct io_cq* icq_hint;
  struct hlist_head icq_list;
  struct work_struct release_work;
};

union thread_union {
  struct task_struct task;
  long unsigned int stack[2048];
};

enum rseq_event_mask_bits {
  RSEQ_EVENT_PREEMPT_BIT = 0,
  RSEQ_EVENT_SIGNAL_BIT = 1,
  RSEQ_EVENT_MIGRATE_BIT = 2,
};

struct movsl_mask {
  int mask;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum fixed_addresses {
  VSYSCALL_PAGE = 511,
  FIX_DBGP_BASE = 512,
  FIX_EARLYCON_MEM_BASE = 513,
  FIX_APIC_BASE = 514,
  FIX_IO_APIC_BASE_0 = 515,
  FIX_IO_APIC_BASE_END = 642,
  FIX_APEI_GHES_IRQ = 643,
  FIX_APEI_GHES_NMI = 644,
  __end_of_permanent_fixed_addresses = 645,
  FIX_BTMAP_END = 1024,
  FIX_BTMAP_BEGIN = 1535,
  FIX_TBOOT_BASE = 1536,
  __end_of_fixed_addresses = 1537,
};

struct hlist_bl_node;

struct hlist_bl_head {
  struct hlist_bl_node* first;
};

struct hlist_bl_node {
  struct hlist_bl_node* next;
  struct hlist_bl_node** pprev;
};

struct lockref {
  union {
    __u64 lock_count;
    struct {
      spinlock_t lock;
      int count;
    };
  };
};

struct qstr {
  union {
    struct {
      u32 hash;
      u32 len;
    };
    u64 hash_len;
  };
  const unsigned char* name;
};

struct dentry_stat_t {
  long int nr_dentry;
  long int nr_unused;
  long int age_limit;
  long int want_pages;
  long int nr_negative;
  long int dummy;
};

struct dentry_operations;

struct dentry {
  unsigned int d_flags;
  seqcount_spinlock_t d_seq;
  struct hlist_bl_node d_hash;
  struct dentry* d_parent;
  struct qstr d_name;
  struct inode* d_inode;
  unsigned char d_iname[32];
  struct lockref d_lockref;
  const struct dentry_operations* d_op;
  struct super_block* d_sb;
  long unsigned int d_time;
  void* d_fsdata;
  union {
    struct list_head d_lru;
    wait_queue_head_t* d_wait;
  };
  struct list_head d_child;
  struct list_head d_subdirs;
  union {
    struct hlist_node d_alias;
    struct hlist_bl_node d_in_lookup_hash;
    struct callback_head d_rcu;
  } d_u;
};

struct posix_acl;

struct inode_operations;

struct bdi_writeback;

struct file_lock_context;

struct cdev;

struct fsnotify_mark_connector;

struct fsverity_info;

struct inode {
  umode_t i_mode;
  short unsigned int i_opflags;
  kuid_t i_uid;
  kgid_t i_gid;
  unsigned int i_flags;
  struct posix_acl* i_acl;
  struct posix_acl* i_default_acl;
  const struct inode_operations* i_op;
  struct super_block* i_sb;
  struct address_space* i_mapping;
  void* i_security;
  long unsigned int i_ino;
  union {
    const unsigned int i_nlink;
    unsigned int __i_nlink;
  };
  dev_t i_rdev;
  loff_t i_size;
  struct timespec64 i_atime;
  struct timespec64 i_mtime;
  struct timespec64 i_ctime;
  spinlock_t i_lock;
  short unsigned int i_bytes;
  u8 i_blkbits;
  u8 i_write_hint;
  blkcnt_t i_blocks;
  long unsigned int i_state;
  struct rw_semaphore i_rwsem;
  long unsigned int dirtied_when;
  long unsigned int dirtied_time_when;
  struct hlist_node i_hash;
  struct list_head i_io_list;
  struct bdi_writeback* i_wb;
  int i_wb_frn_winner;
  u16 i_wb_frn_avg_time;
  u16 i_wb_frn_history;
  struct list_head i_lru;
  struct list_head i_sb_list;
  struct list_head i_wb_list;
  union {
    struct hlist_head i_dentry;
    struct callback_head i_rcu;
  };
  atomic64_t i_version;
  atomic64_t i_sequence;
  atomic_t i_count;
  atomic_t i_dio_count;
  atomic_t i_writecount;
  atomic_t i_readcount;
  union {
    const struct file_operations* i_fop;
    void (*free_inode)(struct inode*);
  };
  struct file_lock_context* i_flctx;
  struct address_space i_data;
  struct list_head i_devices;
  union {
    struct pipe_inode_info* i_pipe;
    struct cdev* i_cdev;
    char* i_link;
    unsigned int i_dir_seq;
  };
  __u32 i_generation;
  __u32 i_fsnotify_mask;
  struct fsnotify_mark_connector* i_fsnotify_marks;
  struct fsverity_info* i_verity_info;
  void* i_private;
};

struct dentry_operations {
  int (*d_revalidate)(struct dentry*, unsigned int);
  int (*d_weak_revalidate)(struct dentry*, unsigned int);
  int (*d_hash)(const struct dentry*, struct qstr*);
  int (*d_compare)(
      const struct dentry*,
      unsigned int,
      const char*,
      const struct qstr*);
  int (*d_delete)(const struct dentry*);
  int (*d_init)(struct dentry*);
  void (*d_release)(struct dentry*);
  void (*d_prune)(struct dentry*);
  void (*d_iput)(struct dentry*, struct inode*);
  char* (*d_dname)(struct dentry*, char*, int);
  struct vfsmount* (*d_automount)(struct path*);
  int (*d_manage)(const struct path*, bool);
  struct dentry* (*d_real)(struct dentry*, const struct inode*);
  long : 64;
  long : 64;
  long : 64;
};

struct mtd_info;

typedef long long int qsize_t;

struct quota_format_type;

struct mem_dqinfo {
  struct quota_format_type* dqi_format;
  int dqi_fmt_id;
  struct list_head dqi_dirty_list;
  long unsigned int dqi_flags;
  unsigned int dqi_bgrace;
  unsigned int dqi_igrace;
  qsize_t dqi_max_spc_limit;
  qsize_t dqi_max_ino_limit;
  void* dqi_priv;
};

struct quota_format_ops;

struct quota_info {
  unsigned int flags;
  struct rw_semaphore dqio_sem;
  struct inode* files[3];
  struct mem_dqinfo info[3];
  const struct quota_format_ops* ops[3];
};

struct rcu_sync {
  int gp_state;
  int gp_count;
  wait_queue_head_t gp_wait;
  struct callback_head cb_head;
};

struct rcuwait {
  struct task_struct* task;
};

struct percpu_rw_semaphore {
  struct rcu_sync rss;
  unsigned int* read_count;
  struct rcuwait writer;
  wait_queue_head_t waiters;
  atomic_t block;
};

struct sb_writers {
  int frozen;
  wait_queue_head_t wait_unfrozen;
  struct percpu_rw_semaphore rw_sem[3];
};

typedef struct {
  __u8 b[16];
} uuid_t;

struct list_lru_node;

struct list_lru {
  struct list_lru_node* node;
  struct list_head list;
  int shrinker_id;
  bool memcg_aware;
};

struct super_operations;

struct dquot_operations;

struct quotactl_ops;

struct export_operations;

struct xattr_handler;

struct fsverity_operations;

struct block_device;

struct workqueue_struct;

struct super_block {
  struct list_head s_list;
  dev_t s_dev;
  unsigned char s_blocksize_bits;
  long unsigned int s_blocksize;
  loff_t s_maxbytes;
  struct file_system_type* s_type;
  const struct super_operations* s_op;
  const struct dquot_operations* dq_op;
  const struct quotactl_ops* s_qcop;
  const struct export_operations* s_export_op;
  long unsigned int s_flags;
  long unsigned int s_iflags;
  long unsigned int s_magic;
  struct dentry* s_root;
  struct rw_semaphore s_umount;
  int s_count;
  atomic_t s_active;
  void* s_security;
  const struct xattr_handler** s_xattr;
  const struct fsverity_operations* s_vop;
  struct hlist_bl_head s_roots;
  struct list_head s_mounts;
  struct block_device* s_bdev;
  struct backing_dev_info* s_bdi;
  struct mtd_info* s_mtd;
  struct hlist_node s_instances;
  unsigned int s_quota_types;
  struct quota_info s_dquot;
  struct sb_writers s_writers;
  void* s_fs_info;
  u32 s_time_gran;
  time64_t s_time_min;
  time64_t s_time_max;
  __u32 s_fsnotify_mask;
  struct fsnotify_mark_connector* s_fsnotify_marks;
  char s_id[32];
  uuid_t s_uuid;
  unsigned int s_max_links;
  fmode_t s_mode;
  struct mutex s_vfs_rename_mutex;
  const char* s_subtype;
  const struct dentry_operations* s_d_op;
  int cleancache_poolid;
  struct shrinker s_shrink;
  atomic_long_t s_remove_count;
  atomic_long_t s_fsnotify_inode_refs;
  int s_readonly_remount;
  errseq_t s_wb_err;
  struct workqueue_struct* s_dio_done_wq;
  struct hlist_head s_pins;
  struct user_namespace* s_user_ns;
  struct list_lru s_dentry_lru;
  struct list_lru s_inode_lru;
  struct callback_head rcu;
  struct work_struct destroy_work;
  struct mutex s_sync_lock;
  int s_stack_depth;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t s_inode_list_lock;
  struct list_head s_inodes;
  spinlock_t s_inode_wblist_lock;
  struct list_head s_inodes_wb;
  long : 64;
  long : 64;
};

struct vfsmount {
  struct dentry* mnt_root;
  struct super_block* mnt_sb;
  int mnt_flags;
  struct user_namespace* mnt_userns;
};

struct kstat {
  u32 result_mask;
  umode_t mode;
  unsigned int nlink;
  uint32_t blksize;
  u64 attributes;
  u64 attributes_mask;
  u64 ino;
  dev_t dev;
  dev_t rdev;
  kuid_t uid;
  kgid_t gid;
  loff_t size;
  struct timespec64 atime;
  struct timespec64 mtime;
  struct timespec64 ctime;
  struct timespec64 btime;
  u64 blocks;
  u64 mnt_id;
};

struct list_lru_one {
  struct list_head list;
  long int nr_items;
};

struct list_lru_memcg {
  struct callback_head rcu;
  struct list_lru_one* lru[0];
};

struct list_lru_node {
  spinlock_t lock;
  struct list_lru_one lru;
  struct list_lru_memcg* memcg_lrus;
  long int nr_items;
  long : 64;
  long : 64;
};

struct xa_node {
  unsigned char shift;
  unsigned char offset;
  unsigned char count;
  unsigned char nr_values;
  struct xa_node* parent;
  struct xarray* array;
  union {
    struct list_head private_list;
    struct callback_head callback_head;
  };
  void* slots[64];
  union {
    long unsigned int tags[3];
    long unsigned int marks[3];
  };
};

typedef struct {
} local_lock_t;

struct radix_tree_preload {
  local_lock_t lock;
  unsigned int nr;
  struct xa_node* nodes;
};

enum migrate_mode {
  MIGRATE_ASYNC = 0,
  MIGRATE_SYNC_LIGHT = 1,
  MIGRATE_SYNC = 2,
  MIGRATE_SYNC_NO_COPY = 3,
};

struct ctl_table;

typedef int proc_handler(struct ctl_table*, int, void*, size_t*, loff_t*);

struct ctl_table_poll;

struct ctl_table {
  const char* procname;
  void* data;
  int maxlen;
  umode_t mode;
  struct ctl_table* child;
  proc_handler* proc_handler;
  struct ctl_table_poll* poll;
  void* extra1;
  void* extra2;
};

struct ctl_table_poll {
  atomic_t event;
  wait_queue_head_t wait;
};

struct key_tag {
  struct callback_head rcu;
  refcount_t usage;
  bool removed;
};

typedef int (*request_key_actor_t)(struct key*, void*);

struct key_preparsed_payload;

struct key_match_data;

struct kernel_pkey_params;

struct kernel_pkey_query;

struct key_type {
  const char* name;
  size_t def_datalen;
  unsigned int flags;
  int (*vet_description)(const char*);
  int (*preparse)(struct key_preparsed_payload*);
  void (*free_preparse)(struct key_preparsed_payload*);
  int (*instantiate)(struct key*, struct key_preparsed_payload*);
  int (*update)(struct key*, struct key_preparsed_payload*);
  int (*match_preparse)(struct key_match_data*);
  void (*match_free)(struct key_match_data*);
  void (*revoke)(struct key*);
  void (*destroy)(struct key*);
  void (*describe)(const struct key*, struct seq_file*);
  long int (*read)(const struct key*, char*, size_t);
  request_key_actor_t request_key;
  struct key_restriction* (*lookup_restriction)(const char*);
  int (
      *asym_query)(const struct kernel_pkey_params*, struct kernel_pkey_query*);
  int (*asym_eds_op)(struct kernel_pkey_params*, const void*, void*);
  int (*asym_verify_signature)(
      struct kernel_pkey_params*,
      const void*,
      const void*);
  struct list_head link;
  struct lock_class_key lock_class;
};

typedef int (*key_restrict_link_func_t)(
    struct key*,
    const struct key_type*,
    const union key_payload*,
    struct key*);

struct key_restriction {
  key_restrict_link_func_t check;
  struct key* key;
  struct key_type* keytype;
};

struct group_info {
  atomic_t usage;
  int ngroups;
  kgid_t gid[0];
};

struct delayed_call {
  void (*fn)(void*);
  void* arg;
};

typedef struct {
  __u8 b[16];
} guid_t;

struct io_cq {
  struct request_queue* q;
  struct io_context* ioc;
  union {
    struct list_head q_node;
    struct kmem_cache* __rcu_icq_cache;
  };
  union {
    struct hlist_node ioc_node;
    struct callback_head __rcu_head;
  };
  unsigned int flags;
};

struct files_stat_struct {
  long unsigned int nr_files;
  long unsigned int nr_free_files;
  long unsigned int max_files;
};

struct inodes_stat_t {
  long int nr_inodes;
  long int nr_unused;
  long int dummy[5];
};

struct wait_page_queue;

struct kiocb {
  struct file* ki_filp;
  loff_t ki_pos;
  void (*ki_complete)(struct kiocb*, long int, long int);
  void* private;
  int ki_flags;
  u16 ki_hint;
  u16 ki_ioprio;
  union {
    unsigned int ki_cookie;
    struct wait_page_queue* ki_waitq;
  };
};

struct iattr {
  unsigned int ia_valid;
  umode_t ia_mode;
  kuid_t ia_uid;
  kgid_t ia_gid;
  loff_t ia_size;
  struct timespec64 ia_atime;
  struct timespec64 ia_mtime;
  struct timespec64 ia_ctime;
  struct file* ia_file;
};

struct percpu_counter {
  raw_spinlock_t lock;
  s64 count;
  struct list_head list;
  s32* counters;
};

typedef __kernel_uid32_t projid_t;

typedef struct {
  projid_t val;
} kprojid_t;

enum quota_type {
  USRQUOTA = 0,
  GRPQUOTA = 1,
  PRJQUOTA = 2,
};

struct kqid {
  union {
    kuid_t uid;
    kgid_t gid;
    kprojid_t projid;
  };
  enum quota_type type;
};

struct mem_dqblk {
  qsize_t dqb_bhardlimit;
  qsize_t dqb_bsoftlimit;
  qsize_t dqb_curspace;
  qsize_t dqb_rsvspace;
  qsize_t dqb_ihardlimit;
  qsize_t dqb_isoftlimit;
  qsize_t dqb_curinodes;
  time64_t dqb_btime;
  time64_t dqb_itime;
};

struct dquot {
  struct hlist_node dq_hash;
  struct list_head dq_inuse;
  struct list_head dq_free;
  struct list_head dq_dirty;
  struct mutex dq_lock;
  spinlock_t dq_dqb_lock;
  atomic_t dq_count;
  struct super_block* dq_sb;
  struct kqid dq_id;
  loff_t dq_off;
  long unsigned int dq_flags;
  struct mem_dqblk dq_dqb;
};

enum {
  DQF_ROOT_SQUASH_B = 0,
  DQF_SYS_FILE_B = 16,
  DQF_PRIVATE = 17,
};

struct quota_format_type {
  int qf_fmt_id;
  const struct quota_format_ops* qf_ops;
  struct module* qf_owner;
  struct quota_format_type* qf_next;
};

enum {
  DQST_LOOKUPS = 0,
  DQST_DROPS = 1,
  DQST_READS = 2,
  DQST_WRITES = 3,
  DQST_CACHE_HITS = 4,
  DQST_ALLOC_DQUOTS = 5,
  DQST_FREE_DQUOTS = 6,
  DQST_SYNCS = 7,
  _DQST_DQSTAT_LAST = 8,
};

struct dqstats {
  long unsigned int stat[8];
  struct percpu_counter counter[8];
};

struct quota_format_ops {
  int (*check_quota_file)(struct super_block*, int);
  int (*read_file_info)(struct super_block*, int);
  int (*write_file_info)(struct super_block*, int);
  int (*free_file_info)(struct super_block*, int);
  int (*read_dqblk)(struct dquot*);
  int (*commit_dqblk)(struct dquot*);
  int (*release_dqblk)(struct dquot*);
  int (*get_next_id)(struct super_block*, struct kqid*);
};

struct dquot_operations {
  int (*write_dquot)(struct dquot*);
  struct dquot* (*alloc_dquot)(struct super_block*, int);
  void (*destroy_dquot)(struct dquot*);
  int (*acquire_dquot)(struct dquot*);
  int (*release_dquot)(struct dquot*);
  int (*mark_dirty)(struct dquot*);
  int (*write_info)(struct super_block*, int);
  qsize_t* (*get_reserved_space)(struct inode*);
  int (*get_projid)(struct inode*, kprojid_t*);
  int (*get_inode_usage)(struct inode*, qsize_t*);
  int (*get_next_id)(struct super_block*, struct kqid*);
};

struct qc_dqblk {
  int d_fieldmask;
  u64 d_spc_hardlimit;
  u64 d_spc_softlimit;
  u64 d_ino_hardlimit;
  u64 d_ino_softlimit;
  u64 d_space;
  u64 d_ino_count;
  s64 d_ino_timer;
  s64 d_spc_timer;
  int d_ino_warns;
  int d_spc_warns;
  u64 d_rt_spc_hardlimit;
  u64 d_rt_spc_softlimit;
  u64 d_rt_space;
  s64 d_rt_spc_timer;
  int d_rt_spc_warns;
};

struct qc_type_state {
  unsigned int flags;
  unsigned int spc_timelimit;
  unsigned int ino_timelimit;
  unsigned int rt_spc_timelimit;
  unsigned int spc_warnlimit;
  unsigned int ino_warnlimit;
  unsigned int rt_spc_warnlimit;
  long long unsigned int ino;
  blkcnt_t blocks;
  blkcnt_t nextents;
};

struct qc_state {
  unsigned int s_incoredqs;
  struct qc_type_state s_state[3];
};

struct qc_info {
  int i_fieldmask;
  unsigned int i_flags;
  unsigned int i_spc_timelimit;
  unsigned int i_ino_timelimit;
  unsigned int i_rt_spc_timelimit;
  unsigned int i_spc_warnlimit;
  unsigned int i_ino_warnlimit;
  unsigned int i_rt_spc_warnlimit;
};

struct quotactl_ops {
  int (*quota_on)(struct super_block*, int, int, const struct path*);
  int (*quota_off)(struct super_block*, int);
  int (*quota_enable)(struct super_block*, unsigned int);
  int (*quota_disable)(struct super_block*, unsigned int);
  int (*quota_sync)(struct super_block*, int);
  int (*set_info)(struct super_block*, int, struct qc_info*);
  int (*get_dqblk)(struct super_block*, struct kqid, struct qc_dqblk*);
  int (*get_nextdqblk)(struct super_block*, struct kqid*, struct qc_dqblk*);
  int (*set_dqblk)(struct super_block*, struct kqid, struct qc_dqblk*);
  int (*get_state)(struct super_block*, struct qc_state*);
  int (*rm_xquota)(struct super_block*, unsigned int);
};

struct writeback_control;

struct readahead_control;

struct swap_info_struct;

struct address_space_operations {
  int (*writepage)(struct page*, struct writeback_control*);
  int (*readpage)(struct file*, struct page*);
  int (*writepages)(struct address_space*, struct writeback_control*);
  int (*set_page_dirty)(struct page*);
  int (*readpages)(
      struct file*,
      struct address_space*,
      struct list_head*,
      unsigned int);
  void (*readahead)(struct readahead_control*);
  int (*write_begin)(
      struct file*,
      struct address_space*,
      loff_t,
      unsigned int,
      unsigned int,
      struct page**,
      void**);
  int (*write_end)(
      struct file*,
      struct address_space*,
      loff_t,
      unsigned int,
      unsigned int,
      struct page*,
      void*);
  sector_t (*bmap)(struct address_space*, sector_t);
  void (*invalidatepage)(struct page*, unsigned int, unsigned int);
  int (*releasepage)(struct page*, gfp_t);
  void (*freepage)(struct page*);
  ssize_t (*direct_IO)(struct kiocb*, struct iov_iter*);
  int (*migratepage)(
      struct address_space*,
      struct page*,
      struct page*,
      enum migrate_mode);
  bool (*isolate_page)(struct page*, isolate_mode_t);
  void (*putback_page)(struct page*);
  int (*launder_page)(struct page*);
  int (*is_partially_uptodate)(
      struct page*,
      long unsigned int,
      long unsigned int);
  void (*is_dirty_writeback)(struct page*, bool*, bool*);
  int (*error_remove_page)(struct address_space*, struct page*);
  int (*swap_activate)(struct swap_info_struct*, struct file*, sector_t*);
  void (*swap_deactivate)(struct file*);
};

struct fiemap_extent_info;

struct inode_operations {
  struct dentry* (*lookup)(struct inode*, struct dentry*, unsigned int);
  const char* (*get_link)(struct dentry*, struct inode*, struct delayed_call*);
  int (*permission)(struct user_namespace*, struct inode*, int);
  struct posix_acl* (*get_acl)(struct inode*, int);
  int (*readlink)(struct dentry*, char*, int);
  int (*create)(
      struct user_namespace*,
      struct inode*,
      struct dentry*,
      umode_t,
      bool);
  int (*link)(struct dentry*, struct inode*, struct dentry*);
  int (*unlink)(struct inode*, struct dentry*);
  int (*symlink)(
      struct user_namespace*,
      struct inode*,
      struct dentry*,
      const char*);
  int (*mkdir)(struct user_namespace*, struct inode*, struct dentry*, umode_t);
  int (*rmdir)(struct inode*, struct dentry*);
  int (*mknod)(
      struct user_namespace*,
      struct inode*,
      struct dentry*,
      umode_t,
      dev_t);
  int (*rename)(
      struct user_namespace*,
      struct inode*,
      struct dentry*,
      struct inode*,
      struct dentry*,
      unsigned int);
  int (*setattr)(struct user_namespace*, struct dentry*, struct iattr*);
  int (*getattr)(
      struct user_namespace*,
      const struct path*,
      struct kstat*,
      u32,
      unsigned int);
  ssize_t (*listxattr)(struct dentry*, char*, size_t);
  int (*fiemap)(struct inode*, struct fiemap_extent_info*, u64, u64);
  int (*update_time)(struct inode*, struct timespec64*, int);
  int (*atomic_open)(
      struct inode*,
      struct dentry*,
      struct file*,
      unsigned int,
      umode_t);
  int (
      *tmpfile)(struct user_namespace*, struct inode*, struct dentry*, umode_t);
  int (*set_acl)(struct user_namespace*, struct inode*, struct posix_acl*, int);
  long : 64;
  long : 64;
  long : 64;
};

struct file_lock_context {
  spinlock_t flc_lock;
  struct list_head flc_flock;
  struct list_head flc_posix;
  struct list_head flc_lease;
};

struct file_lock_operations {
  void (*fl_copy_lock)(struct file_lock*, struct file_lock*);
  void (*fl_release_private)(struct file_lock*);
};

struct nlm_lockowner;

struct nfs_lock_info {
  u32 state;
  struct nlm_lockowner* owner;
  struct list_head list;
};

struct nfs4_lock_state;

struct nfs4_lock_info {
  struct nfs4_lock_state* owner;
};

struct fasync_struct;

struct lock_manager_operations;

struct file_lock {
  struct file_lock* fl_blocker;
  struct list_head fl_list;
  struct hlist_node fl_link;
  struct list_head fl_blocked_requests;
  struct list_head fl_blocked_member;
  fl_owner_t fl_owner;
  unsigned int fl_flags;
  unsigned char fl_type;
  unsigned int fl_pid;
  int fl_link_cpu;
  wait_queue_head_t fl_wait;
  struct file* fl_file;
  loff_t fl_start;
  loff_t fl_end;
  struct fasync_struct* fl_fasync;
  long unsigned int fl_break_time;
  long unsigned int fl_downgrade_time;
  const struct file_lock_operations* fl_ops;
  const struct lock_manager_operations* fl_lmops;
  union {
    struct nfs_lock_info nfs_fl;
    struct nfs4_lock_info nfs4_fl;
    struct {
      struct list_head link;
      int state;
      unsigned int debug_id;
    } afs;
  } fl_u;
};

struct lock_manager_operations {
  fl_owner_t (*lm_get_owner)(fl_owner_t);
  void (*lm_put_owner)(fl_owner_t);
  void (*lm_notify)(struct file_lock*);
  int (*lm_grant)(struct file_lock*, int);
  bool (*lm_break)(struct file_lock*);
  int (*lm_change)(struct file_lock*, int, struct list_head*);
  void (*lm_setup)(struct file_lock*, void**);
  bool (*lm_breaker_owns_lease)(struct file_lock*);
};

struct fasync_struct {
  rwlock_t fa_lock;
  int magic;
  int fa_fd;
  struct fasync_struct* fa_next;
  struct file* fa_file;
  struct callback_head fa_rcu;
};

enum {
  SB_UNFROZEN = 0,
  SB_FREEZE_WRITE = 1,
  SB_FREEZE_PAGEFAULT = 2,
  SB_FREEZE_FS = 3,
  SB_FREEZE_COMPLETE = 4,
};

struct kstatfs;

struct super_operations {
  struct inode* (*alloc_inode)(struct super_block*);
  void (*destroy_inode)(struct inode*);
  void (*free_inode)(struct inode*);
  void (*dirty_inode)(struct inode*, int);
  int (*write_inode)(struct inode*, struct writeback_control*);
  int (*drop_inode)(struct inode*);
  void (*evict_inode)(struct inode*);
  void (*put_super)(struct super_block*);
  int (*sync_fs)(struct super_block*, int);
  int (*freeze_super)(struct super_block*);
  int (*freeze_fs)(struct super_block*);
  int (*thaw_super)(struct super_block*);
  int (*unfreeze_fs)(struct super_block*);
  int (*statfs)(struct dentry*, struct kstatfs*);
  int (*remount_fs)(struct super_block*, int*, char*);
  void (*umount_begin)(struct super_block*);
  int (*show_options)(struct seq_file*, struct dentry*);
  int (*show_devname)(struct seq_file*, struct dentry*);
  int (*show_path)(struct seq_file*, struct dentry*);
  int (*show_stats)(struct seq_file*, struct dentry*);
  ssize_t (*quota_read)(struct super_block*, int, char*, size_t, loff_t);
  ssize_t (*quota_write)(struct super_block*, int, const char*, size_t, loff_t);
  struct dquot** (*get_dquots)(struct inode*);
  int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
  long int (*nr_cached_objects)(struct super_block*, struct shrink_control*);
  long int (*free_cached_objects)(struct super_block*, struct shrink_control*);
};

struct fid;

struct iomap;

struct export_operations {
  int (*encode_fh)(struct inode*, __u32*, int*, struct inode*);
  struct dentry* (*fh_to_dentry)(struct super_block*, struct fid*, int, int);
  struct dentry* (*fh_to_parent)(struct super_block*, struct fid*, int, int);
  int (*get_name)(struct dentry*, char*, struct dentry*);
  struct dentry* (*get_parent)(struct dentry*);
  int (*commit_metadata)(struct inode*);
  int (*get_uuid)(struct super_block*, u8*, u32*, u64*);
  int (*map_blocks)(struct inode*, loff_t, u64, struct iomap*, bool, u32*);
  int (*commit_blocks)(struct inode*, struct iomap*, int, struct iattr*);
  u64 (*fetch_iversion)(struct inode*);
  long unsigned int flags;
};

struct xattr_handler {
  const char* name;
  const char* prefix;
  int flags;
  bool (*list)(struct dentry*);
  int (*get)(
      const struct xattr_handler*,
      struct dentry*,
      struct inode*,
      const char*,
      void*,
      size_t);
  int (*set)(
      const struct xattr_handler*,
      struct user_namespace*,
      struct dentry*,
      struct inode*,
      const char*,
      const void*,
      size_t,
      int);
};

struct fsverity_operations {
  int (*begin_enable_verity)(struct file*);
  int (*end_enable_verity)(struct file*, const void*, size_t, u64);
  int (*get_verity_descriptor)(struct inode*, void*, size_t);
  struct page* (*read_merkle_tree_page)(
      struct inode*,
      long unsigned int,
      long unsigned int);
  int (*write_merkle_tree_block)(struct inode*, const void*, u64, int);
};

typedef int (*filldir_t)(
    struct dir_context*,
    const char*,
    int,
    loff_t,
    u64,
    unsigned int);

struct dir_context {
  filldir_t actor;
  loff_t pos;
};

struct p_log;

struct fs_parameter;

struct fs_parse_result;

typedef int fs_param_type(
    struct p_log*,
    const struct fs_parameter_spec*,
    struct fs_parameter*,
    struct fs_parse_result*);

struct fs_parameter_spec {
  const char* name;
  fs_param_type* type;
  u8 opt;
  short unsigned int flags;
  const void* data;
};

struct attribute {
  const char* name;
  umode_t mode;
};

struct kobj_attribute {
  struct attribute attr;
  ssize_t (*show)(struct kobject*, struct kobj_attribute*, char*);
  ssize_t (
      *store)(struct kobject*, struct kobj_attribute*, const char*, size_t);
};

typedef void compound_page_dtor(struct page*);

enum compound_dtor_id {
  NULL_COMPOUND_DTOR = 0,
  COMPOUND_PAGE_DTOR = 1,
  HUGETLB_PAGE_DTOR = 2,
  TRANSHUGE_PAGE_DTOR = 3,
  NR_COMPOUND_DTORS = 4,
};

enum vm_event_item {
  PGPGIN = 0,
  PGPGOUT = 1,
  PSWPIN = 2,
  PSWPOUT = 3,
  PGALLOC_DMA = 4,
  PGALLOC_DMA32 = 5,
  PGALLOC_NORMAL = 6,
  PGALLOC_MOVABLE = 7,
  ALLOCSTALL_DMA = 8,
  ALLOCSTALL_DMA32 = 9,
  ALLOCSTALL_NORMAL = 10,
  ALLOCSTALL_MOVABLE = 11,
  PGSCAN_SKIP_DMA = 12,
  PGSCAN_SKIP_DMA32 = 13,
  PGSCAN_SKIP_NORMAL = 14,
  PGSCAN_SKIP_MOVABLE = 15,
  PGFREE = 16,
  PGACTIVATE = 17,
  PGDEACTIVATE = 18,
  PGLAZYFREE = 19,
  PGFAULT = 20,
  PGMAJFAULT = 21,
  PGLAZYFREED = 22,
  PGREFILL = 23,
  PGREUSE = 24,
  PGSTEAL_KSWAPD = 25,
  PGSTEAL_DIRECT = 26,
  PGSCAN_KSWAPD = 27,
  PGSCAN_DIRECT = 28,
  PGSCAN_DIRECT_THROTTLE = 29,
  PGSCAN_ANON = 30,
  PGSCAN_FILE = 31,
  PGSTEAL_ANON = 32,
  PGSTEAL_FILE = 33,
  PGSCAN_ZONE_RECLAIM_FAILED = 34,
  PGINODESTEAL = 35,
  SLABS_SCANNED = 36,
  KSWAPD_INODESTEAL = 37,
  KSWAPD_LOW_WMARK_HIT_QUICKLY = 38,
  KSWAPD_HIGH_WMARK_HIT_QUICKLY = 39,
  PAGEOUTRUN = 40,
  PGROTATED = 41,
  DROP_PAGECACHE = 42,
  DROP_SLAB = 43,
  OOM_KILL = 44,
  NUMA_PTE_UPDATES = 45,
  NUMA_HUGE_PTE_UPDATES = 46,
  NUMA_HINT_FAULTS = 47,
  NUMA_HINT_FAULTS_LOCAL = 48,
  NUMA_PAGE_MIGRATE = 49,
  PGMIGRATE_SUCCESS = 50,
  PGMIGRATE_FAIL = 51,
  THP_MIGRATION_SUCCESS = 52,
  THP_MIGRATION_FAIL = 53,
  THP_MIGRATION_SPLIT = 54,
  COMPACTMIGRATE_SCANNED = 55,
  COMPACTFREE_SCANNED = 56,
  COMPACTISOLATED = 57,
  COMPACTSTALL = 58,
  COMPACTFAIL = 59,
  COMPACTSUCCESS = 60,
  KCOMPACTD_WAKE = 61,
  KCOMPACTD_MIGRATE_SCANNED = 62,
  KCOMPACTD_FREE_SCANNED = 63,
  HTLB_BUDDY_PGALLOC = 64,
  HTLB_BUDDY_PGALLOC_FAIL = 65,
  UNEVICTABLE_PGCULLED = 66,
  UNEVICTABLE_PGSCANNED = 67,
  UNEVICTABLE_PGRESCUED = 68,
  UNEVICTABLE_PGMLOCKED = 69,
  UNEVICTABLE_PGMUNLOCKED = 70,
  UNEVICTABLE_PGCLEARED = 71,
  UNEVICTABLE_PGSTRANDED = 72,
  THP_FAULT_ALLOC = 73,
  THP_FAULT_FALLBACK = 74,
  THP_FAULT_FALLBACK_CHARGE = 75,
  THP_COLLAPSE_ALLOC = 76,
  THP_COLLAPSE_ALLOC_FAILED = 77,
  THP_FILE_ALLOC = 78,
  THP_FILE_FALLBACK = 79,
  THP_FILE_FALLBACK_CHARGE = 80,
  THP_FILE_MAPPED = 81,
  THP_SPLIT_PAGE = 82,
  THP_SPLIT_PAGE_FAILED = 83,
  THP_DEFERRED_SPLIT_PAGE = 84,
  THP_SPLIT_PMD = 85,
  THP_SPLIT_PUD = 86,
  THP_ZERO_PAGE_ALLOC = 87,
  THP_ZERO_PAGE_ALLOC_FAILED = 88,
  THP_SWPOUT = 89,
  THP_SWPOUT_FALLBACK = 90,
  BALLOON_INFLATE = 91,
  BALLOON_DEFLATE = 92,
  BALLOON_MIGRATE = 93,
  SWAP_RA = 94,
  SWAP_RA_HIT = 95,
  DIRECT_MAP_LEVEL2_SPLIT = 96,
  DIRECT_MAP_LEVEL3_SPLIT = 97,
  NR_VM_EVENT_ITEMS = 98,
};

struct vm_event_state {
  long unsigned int event[98];
};

enum memblock_flags {
  MEMBLOCK_NONE = 0,
  MEMBLOCK_HOTPLUG = 1,
  MEMBLOCK_MIRROR = 2,
  MEMBLOCK_NOMAP = 4,
};

struct memblock_region {
  phys_addr_t base;
  phys_addr_t size;
  enum memblock_flags flags;
  int nid;
};

struct memblock_type {
  long unsigned int cnt;
  long unsigned int max;
  phys_addr_t total_size;
  struct memblock_region* regions;
  char* name;
};

struct memblock {
  bool bottom_up;
  phys_addr_t current_limit;
  struct memblock_type memory;
  struct memblock_type reserved;
};

struct debug_store {
  u64 bts_buffer_base;
  u64 bts_index;
  u64 bts_absolute_maximum;
  u64 bts_interrupt_threshold;
  u64 pebs_buffer_base;
  u64 pebs_index;
  u64 pebs_absolute_maximum;
  u64 pebs_interrupt_threshold;
  u64 pebs_event_reset[12];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct debug_store_buffers {
  char bts_buffer[65536];
  char pebs_buffer[65536];
};

struct cea_exception_stacks {
  char DF_stack_guard[4096];
  char DF_stack[4096];
  char NMI_stack_guard[4096];
  char NMI_stack[4096];
  char DB_stack_guard[4096];
  char DB_stack[4096];
  char MCE_stack_guard[4096];
  char MCE_stack[4096];
  char VC_stack_guard[4096];
  char VC_stack[4096];
  char VC2_stack_guard[4096];
  char VC2_stack[4096];
  char IST_top_guard[4096];
};

struct cpu_entry_area {
  char gdt[4096];
  struct entry_stack_page entry_stack_page;
  struct tss_struct tss;
  struct cea_exception_stacks estacks;
  struct debug_store cpu_debug_store;
  struct debug_store_buffers cpu_debug_buffers;
};

struct gdt_page {
  struct desc_struct gdt[16];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct tlb_context {
  u64 ctx_id;
  u64 tlb_gen;
};

struct tlb_state {
  struct mm_struct* loaded_mm;
  union {
    struct mm_struct* last_user_mm;
    long unsigned int last_user_mm_ibpb;
  };
  u16 loaded_mm_asid;
  u16 next_asid;
  bool is_lazy;
  bool invalidate_other;
  short unsigned int user_pcid_flush_mask;
  long unsigned int cr4;
  struct tlb_context ctxs[6];
};

enum e820_type {
  E820_TYPE_RAM = 1,
  E820_TYPE_RESERVED = 2,
  E820_TYPE_ACPI = 3,
  E820_TYPE_NVS = 4,
  E820_TYPE_UNUSABLE = 5,
  E820_TYPE_PMEM = 7,
  E820_TYPE_PRAM = 12,
  E820_TYPE_SOFT_RESERVED = 4026531839,
  E820_TYPE_RESERVED_KERN = 128,
};

struct e820_entry {
  u64 addr;
  u64 size;
  enum e820_type type;
} __attribute__((packed));

struct e820_table {
  __u32 nr_entries;
  struct e820_entry entries[152];
} __attribute__((packed));

struct boot_params_to_save {
  unsigned int start;
  unsigned int len;
};

struct idr {
  struct xarray idr_rt;
  unsigned int idr_base;
  unsigned int idr_next;
};

struct kernfs_root;

struct kernfs_elem_dir {
  long unsigned int subdirs;
  struct rb_root children;
  struct kernfs_root* root;
};

struct kernfs_syscall_ops;

struct kernfs_root {
  struct kernfs_node* kn;
  unsigned int flags;
  struct idr ino_idr;
  u32 last_id_lowbits;
  u32 id_highbits;
  struct kernfs_syscall_ops* syscall_ops;
  struct list_head supers;
  wait_queue_head_t deactivate_waitq;
};

struct kernfs_elem_symlink {
  struct kernfs_node* target_kn;
};

struct kernfs_ops;

struct kernfs_open_node;

struct kernfs_elem_attr {
  const struct kernfs_ops* ops;
  struct kernfs_open_node* open;
  loff_t size;
  struct kernfs_node* notify_next;
};

struct kernfs_iattrs;

struct kernfs_node {
  atomic_t count;
  atomic_t active;
  struct kernfs_node* parent;
  const char* name;
  struct rb_node rb;
  const void* ns;
  unsigned int hash;
  union {
    struct kernfs_elem_dir dir;
    struct kernfs_elem_symlink symlink;
    struct kernfs_elem_attr attr;
  };
  void* priv;
  u64 id;
  short unsigned int flags;
  umode_t mode;
  struct kernfs_iattrs* iattr;
};

struct kernfs_open_file;

struct kernfs_ops {
  int (*open)(struct kernfs_open_file*);
  void (*release)(struct kernfs_open_file*);
  int (*seq_show)(struct seq_file*, void*);
  void* (*seq_start)(struct seq_file*, loff_t*);
  void* (*seq_next)(struct seq_file*, void*, loff_t*);
  void (*seq_stop)(struct seq_file*, void*);
  ssize_t (*read)(struct kernfs_open_file*, char*, size_t, loff_t);
  size_t atomic_write_len;
  bool prealloc;
  ssize_t (*write)(struct kernfs_open_file*, char*, size_t, loff_t);
  __poll_t (*poll)(struct kernfs_open_file*, struct poll_table_struct*);
  int (*mmap)(struct kernfs_open_file*, struct vm_area_struct*);
};

struct kernfs_syscall_ops {
  int (*show_options)(struct seq_file*, struct kernfs_root*);
  int (*mkdir)(struct kernfs_node*, const char*, umode_t);
  int (*rmdir)(struct kernfs_node*);
  int (*rename)(struct kernfs_node*, struct kernfs_node*, const char*);
  int (*show_path)(struct seq_file*, struct kernfs_node*, struct kernfs_root*);
};

struct kernfs_open_file {
  struct kernfs_node* kn;
  struct file* file;
  struct seq_file* seq_file;
  void* priv;
  struct mutex mutex;
  struct mutex prealloc_mutex;
  int event;
  struct list_head list;
  char* prealloc_buf;
  size_t atomic_write_len;
  bool mmapped : 1;
  bool released : 1;
  const struct vm_operations_struct* vm_ops;
};

enum kobj_ns_type {
  KOBJ_NS_TYPE_NONE = 0,
  KOBJ_NS_TYPE_NET = 1,
  KOBJ_NS_TYPES = 2,
};

struct sock;

struct kobj_ns_type_operations {
  enum kobj_ns_type type;
  bool (*current_may_mount)();
  void* (*grab_current_ns)();
  const void* (*netlink_ns)(struct sock*);
  const void* (*initial_ns)();
  void (*drop_ns)(void*);
};

struct bin_attribute;

struct attribute_group {
  const char* name;
  umode_t (*is_visible)(struct kobject*, struct attribute*, int);
  umode_t (*is_bin_visible)(struct kobject*, struct bin_attribute*, int);
  struct attribute** attrs;
  struct bin_attribute** bin_attrs;
};

struct bin_attribute {
  struct attribute attr;
  size_t size;
  void* private;
  struct address_space* mapping;
  ssize_t (*read)(
      struct file*,
      struct kobject*,
      struct bin_attribute*,
      char*,
      loff_t,
      size_t);
  ssize_t (*write)(
      struct file*,
      struct kobject*,
      struct bin_attribute*,
      char*,
      loff_t,
      size_t);
  int (*mmap)(
      struct file*,
      struct kobject*,
      struct bin_attribute*,
      struct vm_area_struct*);
};

struct sysfs_ops {
  ssize_t (*show)(struct kobject*, struct attribute*, char*);
  ssize_t (*store)(struct kobject*, struct attribute*, const char*, size_t);
};

struct kset_uevent_ops;

struct kset {
  struct list_head list;
  spinlock_t list_lock;
  struct kobject kobj;
  const struct kset_uevent_ops* uevent_ops;
};

struct kobj_type {
  void (*release)(struct kobject*);
  const struct sysfs_ops* sysfs_ops;
  struct attribute** default_attrs;
  const struct attribute_group** default_groups;
  const struct kobj_ns_type_operations* (*child_ns_type)(struct kobject*);
  const void* (*namespace)(struct kobject*);
  void (*get_ownership)(struct kobject*, kuid_t*, kgid_t*);
};

struct kobj_uevent_env {
  char* argv[3];
  char* envp[64];
  int envp_idx;
  char buf[2048];
  int buflen;
};

struct kset_uevent_ops {
  int (*const filter)(struct kset*, struct kobject*);
  const char* (*const name)(struct kset*, struct kobject*);
  int (*const uevent)(struct kset*, struct kobject*, struct kobj_uevent_env*);
};

enum cpu_idle_type {
  CPU_IDLE = 0,
  CPU_NOT_IDLE = 1,
  CPU_NEWLY_IDLE = 2,
  CPU_MAX_IDLE_TYPES = 3,
};

enum {
  __SD_BALANCE_NEWIDLE = 0,
  __SD_BALANCE_EXEC = 1,
  __SD_BALANCE_FORK = 2,
  __SD_BALANCE_WAKE = 3,
  __SD_WAKE_AFFINE = 4,
  __SD_ASYM_CPUCAPACITY = 5,
  __SD_SHARE_CPUCAPACITY = 6,
  __SD_SHARE_PKG_RESOURCES = 7,
  __SD_SERIALIZE = 8,
  __SD_ASYM_PACKING = 9,
  __SD_PREFER_SIBLING = 10,
  __SD_OVERLAP = 11,
  __SD_NUMA = 12,
  __SD_FLAG_CNT = 13,
};

struct sd_flag_debug {
  unsigned int meta_flags;
  char* name;
};

struct dev_pm_ops {
  int (*prepare)(struct device*);
  void (*complete)(struct device*);
  int (*suspend)(struct device*);
  int (*resume)(struct device*);
  int (*freeze)(struct device*);
  int (*thaw)(struct device*);
  int (*poweroff)(struct device*);
  int (*restore)(struct device*);
  int (*suspend_late)(struct device*);
  int (*resume_early)(struct device*);
  int (*freeze_late)(struct device*);
  int (*thaw_early)(struct device*);
  int (*poweroff_late)(struct device*);
  int (*restore_early)(struct device*);
  int (*suspend_noirq)(struct device*);
  int (*resume_noirq)(struct device*);
  int (*freeze_noirq)(struct device*);
  int (*thaw_noirq)(struct device*);
  int (*poweroff_noirq)(struct device*);
  int (*restore_noirq)(struct device*);
  int (*runtime_suspend)(struct device*);
  int (*runtime_resume)(struct device*);
  int (*runtime_idle)(struct device*);
};

struct pm_subsys_data {
  spinlock_t lock;
  unsigned int refcount;
};

struct dev_pm_domain {
  struct dev_pm_ops ops;
  int (*start)(struct device*);
  void (*detach)(struct device*, bool);
  int (*activate)(struct device*);
  void (*sync)(struct device*);
  void (*dismiss)(struct device*);
};

struct iommu_ops;

struct subsys_private;

struct bus_type {
  const char* name;
  const char* dev_name;
  struct device* dev_root;
  const struct attribute_group** bus_groups;
  const struct attribute_group** dev_groups;
  const struct attribute_group** drv_groups;
  int (*match)(struct device*, struct device_driver*);
  int (*uevent)(struct device*, struct kobj_uevent_env*);
  int (*probe)(struct device*);
  void (*sync_state)(struct device*);
  int (*remove)(struct device*);
  void (*shutdown)(struct device*);
  int (*online)(struct device*);
  int (*offline)(struct device*);
  int (*suspend)(struct device*, pm_message_t);
  int (*resume)(struct device*);
  int (*num_vf)(struct device*);
  int (*dma_configure)(struct device*);
  const struct dev_pm_ops* pm;
  const struct iommu_ops* iommu_ops;
  struct subsys_private* p;
  struct lock_class_key lock_key;
  bool need_parent_lock;
};

enum probe_type {
  PROBE_DEFAULT_STRATEGY = 0,
  PROBE_PREFER_ASYNCHRONOUS = 1,
  PROBE_FORCE_SYNCHRONOUS = 2,
};

struct of_device_id;

struct acpi_device_id;

struct driver_private;

struct device_driver {
  const char* name;
  struct bus_type* bus;
  struct module* owner;
  const char* mod_name;
  bool suppress_bind_attrs;
  enum probe_type probe_type;
  const struct of_device_id* of_match_table;
  const struct acpi_device_id* acpi_match_table;
  int (*probe)(struct device*);
  void (*sync_state)(struct device*);
  int (*remove)(struct device*);
  void (*shutdown)(struct device*);
  int (*suspend)(struct device*, pm_message_t);
  int (*resume)(struct device*);
  const struct attribute_group** groups;
  const struct attribute_group** dev_groups;
  const struct dev_pm_ops* pm;
  void (*coredump)(struct device*);
  struct driver_private* p;
};

enum iommu_cap {
  IOMMU_CAP_CACHE_COHERENCY = 0,
  IOMMU_CAP_INTR_REMAP = 1,
  IOMMU_CAP_NOEXEC = 2,
};

enum iommu_attr {
  DOMAIN_ATTR_GEOMETRY = 0,
  DOMAIN_ATTR_PAGING = 1,
  DOMAIN_ATTR_WINDOWS = 2,
  DOMAIN_ATTR_FSL_PAMU_STASH = 3,
  DOMAIN_ATTR_FSL_PAMU_ENABLE = 4,
  DOMAIN_ATTR_FSL_PAMUV1 = 5,
  DOMAIN_ATTR_NESTING = 6,
  DOMAIN_ATTR_DMA_USE_FLUSH_QUEUE = 7,
  DOMAIN_ATTR_IO_PGTABLE_CFG = 8,
  DOMAIN_ATTR_MAX = 9,
};

enum iommu_dev_features {
  IOMMU_DEV_FEAT_AUX = 0,
  IOMMU_DEV_FEAT_SVA = 1,
};

struct iommu_domain;

struct iommu_iotlb_gather;

struct iommu_device;

struct iommu_resv_region;

struct of_phandle_args;

struct iommu_sva;

struct iommu_fault_event;

struct iommu_page_response;

struct iommu_cache_invalidate_info;

struct iommu_gpasid_bind_data;

struct iommu_ops {
  bool (*capable)(enum iommu_cap);
  struct iommu_domain* (*domain_alloc)(unsigned int);
  void (*domain_free)(struct iommu_domain*);
  int (*attach_dev)(struct iommu_domain*, struct device*);
  void (*detach_dev)(struct iommu_domain*, struct device*);
  int (*map)(
      struct iommu_domain*,
      long unsigned int,
      phys_addr_t,
      size_t,
      int,
      gfp_t);
  size_t (*unmap)(
      struct iommu_domain*,
      long unsigned int,
      size_t,
      struct iommu_iotlb_gather*);
  void (*flush_iotlb_all)(struct iommu_domain*);
  void (*iotlb_sync_map)(struct iommu_domain*, long unsigned int, size_t);
  void (*iotlb_sync)(struct iommu_domain*, struct iommu_iotlb_gather*);
  phys_addr_t (*iova_to_phys)(struct iommu_domain*, dma_addr_t);
  struct iommu_device* (*probe_device)(struct device*);
  void (*release_device)(struct device*);
  void (*probe_finalize)(struct device*);
  struct iommu_group* (*device_group)(struct device*);
  int (*domain_get_attr)(struct iommu_domain*, enum iommu_attr, void*);
  int (*domain_set_attr)(struct iommu_domain*, enum iommu_attr, void*);
  void (*get_resv_regions)(struct device*, struct list_head*);
  void (*put_resv_regions)(struct device*, struct list_head*);
  void (*apply_resv_region)(
      struct device*,
      struct iommu_domain*,
      struct iommu_resv_region*);
  int (*domain_window_enable)(struct iommu_domain*, u32, phys_addr_t, u64, int);
  void (*domain_window_disable)(struct iommu_domain*, u32);
  int (*of_xlate)(struct device*, struct of_phandle_args*);
  bool (*is_attach_deferred)(struct iommu_domain*, struct device*);
  bool (*dev_has_feat)(struct device*, enum iommu_dev_features);
  bool (*dev_feat_enabled)(struct device*, enum iommu_dev_features);
  int (*dev_enable_feat)(struct device*, enum iommu_dev_features);
  int (*dev_disable_feat)(struct device*, enum iommu_dev_features);
  int (*aux_attach_dev)(struct iommu_domain*, struct device*);
  void (*aux_detach_dev)(struct iommu_domain*, struct device*);
  int (*aux_get_pasid)(struct iommu_domain*, struct device*);
  struct iommu_sva* (*sva_bind)(struct device*, struct mm_struct*, void*);
  void (*sva_unbind)(struct iommu_sva*);
  u32 (*sva_get_pasid)(struct iommu_sva*);
  int (*page_response)(
      struct device*,
      struct iommu_fault_event*,
      struct iommu_page_response*);
  int (*cache_invalidate)(
      struct iommu_domain*,
      struct device*,
      struct iommu_cache_invalidate_info*);
  int (*sva_bind_gpasid)(
      struct iommu_domain*,
      struct device*,
      struct iommu_gpasid_bind_data*);
  int (*sva_unbind_gpasid)(struct device*, u32);
  int (*def_domain_type)(struct device*);
  long unsigned int pgsize_bitmap;
  struct module* owner;
};

struct device_type {
  const char* name;
  const struct attribute_group** groups;
  int (*uevent)(struct device*, struct kobj_uevent_env*);
  char* (*devnode)(struct device*, umode_t*, kuid_t*, kgid_t*);
  void (*release)(struct device*);
  const struct dev_pm_ops* pm;
};

struct class {
  const char* name;
  struct module* owner;
  const struct attribute_group** class_groups;
  const struct attribute_group** dev_groups;
  struct kobject* dev_kobj;
  int (*dev_uevent)(struct device*, struct kobj_uevent_env*);
  char* (*devnode)(struct device*, umode_t*);
  void (*class_release)(struct class*);
  void (*dev_release)(struct device*);
  int (*shutdown_pre)(struct device*);
  const struct kobj_ns_type_operations* ns_type;
  const void* (*namespace)(struct device*);
  void (*get_ownership)(struct device*, kuid_t*, kgid_t*);
  const struct dev_pm_ops* pm;
  struct subsys_private* p;
};

struct of_device_id {
  char name[32];
  char type[32];
  char compatible[128];
  const void* data;
};

typedef long unsigned int kernel_ulong_t;

struct acpi_device_id {
  __u8 id[9];
  kernel_ulong_t driver_data;
  __u32 cls;
  __u32 cls_msk;
};

struct device_dma_parameters {
  unsigned int max_segment_size;
  unsigned int min_align_mask;
  long unsigned int segment_boundary_mask;
};

enum dma_data_direction {
  DMA_BIDIRECTIONAL = 0,
  DMA_TO_DEVICE = 1,
  DMA_FROM_DEVICE = 2,
  DMA_NONE = 3,
};

struct sg_table;

struct scatterlist;

struct dma_map_ops {
  void* (*alloc)(struct device*, size_t, dma_addr_t*, gfp_t, long unsigned int);
  void (*free)(struct device*, size_t, void*, dma_addr_t, long unsigned int);
  struct page* (*alloc_pages)(
      struct device*,
      size_t,
      dma_addr_t*,
      enum dma_data_direction,
      gfp_t);
  void (*free_pages)(
      struct device*,
      size_t,
      struct page*,
      dma_addr_t,
      enum dma_data_direction);
  int (*mmap)(
      struct device*,
      struct vm_area_struct*,
      void*,
      dma_addr_t,
      size_t,
      long unsigned int);
  int (*get_sgtable)(
      struct device*,
      struct sg_table*,
      void*,
      dma_addr_t,
      size_t,
      long unsigned int);
  dma_addr_t (*map_page)(
      struct device*,
      struct page*,
      long unsigned int,
      size_t,
      enum dma_data_direction,
      long unsigned int);
  void (*unmap_page)(
      struct device*,
      dma_addr_t,
      size_t,
      enum dma_data_direction,
      long unsigned int);
  int (*map_sg)(
      struct device*,
      struct scatterlist*,
      int,
      enum dma_data_direction,
      long unsigned int);
  void (*unmap_sg)(
      struct device*,
      struct scatterlist*,
      int,
      enum dma_data_direction,
      long unsigned int);
  dma_addr_t (*map_resource)(
      struct device*,
      phys_addr_t,
      size_t,
      enum dma_data_direction,
      long unsigned int);
  void (*unmap_resource)(
      struct device*,
      dma_addr_t,
      size_t,
      enum dma_data_direction,
      long unsigned int);
  void (*sync_single_for_cpu)(
      struct device*,
      dma_addr_t,
      size_t,
      enum dma_data_direction);
  void (*sync_single_for_device)(
      struct device*,
      dma_addr_t,
      size_t,
      enum dma_data_direction);
  void (*sync_sg_for_cpu)(
      struct device*,
      struct scatterlist*,
      int,
      enum dma_data_direction);
  void (*sync_sg_for_device)(
      struct device*,
      struct scatterlist*,
      int,
      enum dma_data_direction);
  void (*cache_sync)(struct device*, void*, size_t, enum dma_data_direction);
  int (*dma_supported)(struct device*, u64);
  u64 (*get_required_mask)(struct device*);
  size_t (*max_mapping_size)(struct device*);
  long unsigned int (*get_merge_boundary)(struct device*);
};

struct bus_dma_region {
  phys_addr_t cpu_start;
  dma_addr_t dma_start;
  u64 size;
  u64 offset;
};

struct node {
  struct device dev;
  struct list_head access_list;
  struct work_struct node_work;
};

enum cpuhp_smt_control {
  CPU_SMT_ENABLED = 0,
  CPU_SMT_DISABLED = 1,
  CPU_SMT_FORCE_DISABLED = 2,
  CPU_SMT_NOT_SUPPORTED = 3,
  CPU_SMT_NOT_IMPLEMENTED = 4,
};

struct cpu_signature {
  unsigned int sig;
  unsigned int pf;
  unsigned int rev;
};

struct ucode_cpu_info {
  struct cpu_signature cpu_sig;
  int valid;
  void* mc;
};

struct real_mode_header {
  u32 text_start;
  u32 ro_end;
  u32 trampoline_start;
  u32 trampoline_header;
  u32 sev_es_trampoline_start;
  u32 trampoline_pgd;
  u32 machine_real_restart_asm;
  u32 machine_real_restart_seg;
};

struct kobj_attribute___2;

struct file_system_type___2;

struct atomic_notifier_head___2;

typedef __u32 __le32;

typedef long unsigned int irq_hw_number_t;

struct kernel_symbol {
  int value_offset;
  int name_offset;
  int namespace_offset;
};

typedef int (*initcall_t)();

struct obs_kernel_param {
  const char* str;
  int (*setup_func)(char*);
  int early;
};

struct pi_entry {
  const char* fmt;
  const char* func;
  const char* file;
  unsigned int line;
  const char* level;
  const char* subsys_fmt_prefix;
} __attribute__((packed));

struct _ddebug {
  const char* modname;
  const char* function;
  const char* filename;
  const char* format;
  unsigned int lineno : 18;
  unsigned int flags : 8;
  union {
    struct static_key_true dd_key_true;
    struct static_key_false dd_key_false;
  } key;
};

struct static_call_site {
  s32 addr;
  s32 key;
};

enum ftrace_dump_mode {
  DUMP_NONE = 0,
  DUMP_ALL = 1,
  DUMP_ORIG = 2,
};

struct orc_entry {
  s16 sp_offset;
  s16 bp_offset;
  unsigned int sp_reg : 4;
  unsigned int bp_reg : 4;
  unsigned int type : 2;
  unsigned int end : 1;
} __attribute__((packed));

struct bug_entry {
  int bug_addr_disp;
  int file_disp;
  short unsigned int line;
  short unsigned int flags;
};

struct static_call_mod;

struct static_call_key {
  void* func;
  union {
    long unsigned int type;
    struct static_call_mod* mods;
    struct static_call_site* sites;
  };
};

typedef const int tracepoint_ptr_t;

struct bpf_raw_event_map {
  struct tracepoint* tp;
  void* bpf_func;
  u32 num_args;
  u32 writable_size;
  long : 64;
};

enum perf_event_state {
  PERF_EVENT_STATE_DEAD = 4294967292,
  PERF_EVENT_STATE_EXIT = 4294967293,
  PERF_EVENT_STATE_ERROR = 4294967294,
  PERF_EVENT_STATE_OFF = 4294967295,
  PERF_EVENT_STATE_INACTIVE = 0,
  PERF_EVENT_STATE_ACTIVE = 1,
};

typedef struct {
  atomic_long_t a;
} local_t;

typedef struct {
  local_t a;
} local64_t;

struct perf_event_attr {
  __u32 type;
  __u32 size;
  __u64 config;
  union {
    __u64 sample_period;
    __u64 sample_freq;
  };
  __u64 sample_type;
  __u64 read_format;
  __u64 disabled : 1;
  __u64 inherit : 1;
  __u64 pinned : 1;
  __u64 exclusive : 1;
  __u64 exclude_user : 1;
  __u64 exclude_kernel : 1;
  __u64 exclude_hv : 1;
  __u64 exclude_idle : 1;
  __u64 mmap : 1;
  __u64 comm : 1;
  __u64 freq : 1;
  __u64 inherit_stat : 1;
  __u64 enable_on_exec : 1;
  __u64 task : 1;
  __u64 watermark : 1;
  __u64 precise_ip : 2;
  __u64 mmap_data : 1;
  __u64 sample_id_all : 1;
  __u64 exclude_host : 1;
  __u64 exclude_guest : 1;
  __u64 exclude_callchain_kernel : 1;
  __u64 exclude_callchain_user : 1;
  __u64 mmap2 : 1;
  __u64 comm_exec : 1;
  __u64 use_clockid : 1;
  __u64 context_switch : 1;
  __u64 write_backward : 1;
  __u64 namespaces : 1;
  __u64 ksymbol : 1;
  __u64 bpf_event : 1;
  __u64 aux_output : 1;
  __u64 cgroup : 1;
  __u64 text_poke : 1;
  __u64 build_id : 1;
  __u64 __reserved_1 : 29;
  union {
    __u32 wakeup_events;
    __u32 wakeup_watermark;
  };
  __u32 bp_type;
  union {
    __u64 bp_addr;
    __u64 kprobe_func;
    __u64 uprobe_path;
    __u64 config1;
  };
  union {
    __u64 bp_len;
    __u64 kprobe_addr;
    __u64 probe_offset;
    __u64 config2;
  };
  __u64 branch_sample_type;
  __u64 sample_regs_user;
  __u32 sample_stack_user;
  __s32 clockid;
  __u64 sample_regs_intr;
  __u32 aux_watermark;
  __u16 sample_max_stack;
  __u16 __reserved_2;
  __u32 aux_sample_size;
  __u32 __reserved_3;
};

struct hw_perf_event_extra {
  u64 config;
  unsigned int reg;
  int alloc;
  int idx;
};

struct arch_hw_breakpoint {
  long unsigned int address;
  long unsigned int mask;
  u8 len;
  u8 type;
};

struct hw_perf_event {
  union {
    struct {
      u64 config;
      u64 last_tag;
      long unsigned int config_base;
      long unsigned int event_base;
      int event_base_rdpmc;
      int idx;
      int last_cpu;
      int flags;
      struct hw_perf_event_extra extra_reg;
      struct hw_perf_event_extra branch_reg;
    };
    struct {
      struct hrtimer hrtimer;
    };
    struct {
      struct list_head tp_list;
    };
    struct {
      u64 pwr_acc;
      u64 ptsc;
    };
    struct {
      struct arch_hw_breakpoint info;
      struct list_head bp_list;
    };
    struct {
      u8 iommu_bank;
      u8 iommu_cntr;
      u16 padding;
      u64 conf;
      u64 conf1;
    };
  };
  struct task_struct* target;
  void* addr_filters;
  long unsigned int addr_filters_gen;
  int state;
  local64_t prev_count;
  u64 sample_period;
  union {
    struct {
      u64 last_period;
      local64_t period_left;
    };
    struct {
      u64 saved_metric;
      u64 saved_slots;
    };
  };
  u64 interrupts_seq;
  u64 interrupts;
  u64 freq_time_stamp;
  u64 freq_count_stamp;
};

struct irq_work {
  struct __call_single_node node;
  void (*func)(struct irq_work*);
};

struct perf_addr_filters_head {
  struct list_head list;
  raw_spinlock_t lock;
  unsigned int nr_file_filters;
};

struct perf_sample_data;

typedef void (*perf_overflow_handler_t)(
    struct perf_event*,
    struct perf_sample_data*,
    struct pt_regs*);

struct ftrace_ops;

struct ftrace_regs;

typedef void (*ftrace_func_t)(
    long unsigned int,
    long unsigned int,
    struct ftrace_ops*,
    struct ftrace_regs*);

struct ftrace_hash;

struct ftrace_ops_hash {
  struct ftrace_hash* notrace_hash;
  struct ftrace_hash* filter_hash;
  struct mutex regex_lock;
};

struct ftrace_ops {
  ftrace_func_t func;
  struct ftrace_ops* next;
  long unsigned int flags;
  void* private;
  ftrace_func_t saved_func;
  struct ftrace_ops_hash local_hash;
  struct ftrace_ops_hash* func_hash;
  struct ftrace_ops_hash old_hash;
  long unsigned int trampoline;
  long unsigned int trampoline_size;
  struct list_head list;
};

struct pmu;

struct perf_buffer;

struct perf_addr_filter_range;

struct bpf_prog;

struct trace_event_call;

struct event_filter;

struct perf_cgroup;

struct perf_event {
  struct list_head event_entry;
  struct list_head sibling_list;
  struct list_head active_list;
  struct rb_node group_node;
  u64 group_index;
  struct list_head migrate_entry;
  struct hlist_node hlist_entry;
  struct list_head active_entry;
  int nr_siblings;
  int event_caps;
  int group_caps;
  struct perf_event* group_leader;
  struct pmu* pmu;
  void* pmu_private;
  enum perf_event_state state;
  unsigned int attach_state;
  local64_t count;
  atomic64_t child_count;
  u64 total_time_enabled;
  u64 total_time_running;
  u64 tstamp;
  u64 shadow_ctx_time;
  struct perf_event_attr attr;
  u16 header_size;
  u16 id_header_size;
  u16 read_size;
  struct hw_perf_event hw;
  struct perf_event_context* ctx;
  atomic_long_t refcount;
  atomic64_t child_total_time_enabled;
  atomic64_t child_total_time_running;
  struct mutex child_mutex;
  struct list_head child_list;
  struct perf_event* parent;
  int oncpu;
  int cpu;
  struct list_head owner_entry;
  struct task_struct* owner;
  struct mutex mmap_mutex;
  atomic_t mmap_count;
  struct perf_buffer* rb;
  struct list_head rb_entry;
  long unsigned int rcu_batches;
  int rcu_pending;
  wait_queue_head_t waitq;
  struct fasync_struct* fasync;
  int pending_wakeup;
  int pending_kill;
  int pending_disable;
  struct irq_work pending;
  atomic_t event_limit;
  struct perf_addr_filters_head addr_filters;
  struct perf_addr_filter_range* addr_filter_ranges;
  long unsigned int addr_filters_gen;
  struct perf_event* aux_event;
  void (*destroy)(struct perf_event*);
  struct callback_head callback_head;
  struct pid_namespace* ns;
  u64 id;
  u64 (*clock)();
  perf_overflow_handler_t overflow_handler;
  void* overflow_handler_context;
  perf_overflow_handler_t orig_overflow_handler;
  struct bpf_prog* prog;
  u64 bpf_cookie;
  struct trace_event_call* tp_event;
  struct event_filter* filter;
  struct ftrace_ops ftrace_ops;
  struct perf_cgroup* cgrp;
  void* security;
  struct list_head sb_list;
};

struct uid_gid_extent {
  u32 first;
  u32 lower_first;
  u32 count;
};

struct uid_gid_map {
  u32 nr_extents;
  union {
    struct uid_gid_extent extent[5];
    struct {
      struct uid_gid_extent* forward;
      struct uid_gid_extent* reverse;
    };
  };
};

struct proc_ns_operations;

struct ns_common {
  atomic_long_t stashed;
  const struct proc_ns_operations* ops;
  unsigned int inum;
  refcount_t count;
};

struct ctl_table_root;

struct ctl_table_set;

struct ctl_dir;

struct ctl_node;

struct ctl_table_header {
  union {
    struct {
      struct ctl_table* ctl_table;
      int used;
      int count;
      int nreg;
    };
    struct callback_head rcu;
  };
  struct completion* unregistering;
  struct ctl_table* ctl_table_arg;
  struct ctl_table_root* root;
  struct ctl_table_set* set;
  struct ctl_dir* parent;
  struct ctl_node* node;
  struct hlist_head inodes;
};

struct ctl_dir {
  struct ctl_table_header header;
  struct rb_root root;
};

struct ctl_table_set {
  int (*is_seen)(struct ctl_table_set*);
  struct ctl_dir dir;
};

struct user_namespace {
  struct uid_gid_map uid_map;
  struct uid_gid_map gid_map;
  struct uid_gid_map projid_map;
  struct user_namespace* parent;
  int level;
  kuid_t owner;
  kgid_t group;
  struct ns_common ns;
  long unsigned int flags;
  bool parent_could_setfcap;
  struct list_head keyring_name_list;
  struct key* user_keyring_register;
  struct rw_semaphore keyring_sem;
  struct work_struct work;
  struct ctl_table_set set;
  struct ctl_table_header* sysctls;
  struct ucounts* ucounts;
  int ucount_max[10];
};

struct pollfd {
  int fd;
  short int events;
  short int revents;
};

typedef void (*smp_call_func_t)(void*);

struct __call_single_data {
  struct __call_single_node node;
  smp_call_func_t func;
  void* info;
};

struct wait_queue_entry;

typedef int (
    *wait_queue_func_t)(struct wait_queue_entry*, unsigned int, int, void*);

struct wait_queue_entry {
  unsigned int flags;
  void* private;
  wait_queue_func_t func;
  struct list_head entry;
};

typedef struct wait_queue_entry wait_queue_entry_t;

struct timer_list {
  struct hlist_node entry;
  long unsigned int expires;
  void (*function)(struct timer_list*);
  u32 flags;
};

struct delayed_work {
  struct work_struct work;
  struct timer_list timer;
  struct workqueue_struct* wq;
  int cpu;
};

struct rcu_work {
  struct work_struct work;
  struct callback_head rcu;
  struct workqueue_struct* wq;
};

struct rcu_segcblist {
  struct callback_head* head;
  struct callback_head** tails[4];
  long unsigned int gp_seq[4];
  long int len;
  long int seglen[4];
  u8 flags;
};

struct srcu_node;

struct srcu_struct;

struct srcu_data {
  long unsigned int srcu_lock_count[2];
  long unsigned int srcu_unlock_count[2];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t lock;
  struct rcu_segcblist srcu_cblist;
  long unsigned int srcu_gp_seq_needed;
  long unsigned int srcu_gp_seq_needed_exp;
  bool srcu_cblist_invoking;
  struct timer_list delay_work;
  struct work_struct work;
  struct callback_head srcu_barrier_head;
  struct srcu_node* mynode;
  long unsigned int grpmask;
  int cpu;
  struct srcu_struct* ssp;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct srcu_node {
  spinlock_t lock;
  long unsigned int srcu_have_cbs[4];
  long unsigned int srcu_data_have_cbs[4];
  long unsigned int srcu_gp_seq_needed_exp;
  struct srcu_node* srcu_parent;
  int grplo;
  int grphi;
};

struct srcu_struct {
  struct srcu_node node[9];
  struct srcu_node* level[3];
  struct mutex srcu_cb_mutex;
  spinlock_t lock;
  struct mutex srcu_gp_mutex;
  unsigned int srcu_idx;
  long unsigned int srcu_gp_seq;
  long unsigned int srcu_gp_seq_needed;
  long unsigned int srcu_gp_seq_needed_exp;
  long unsigned int srcu_last_gp_end;
  struct srcu_data* sda;
  long unsigned int srcu_barrier_seq;
  struct mutex srcu_barrier_mutex;
  struct completion srcu_barrier_completion;
  atomic_t srcu_barrier_cpu_cnt;
  struct delayed_work work;
};

struct anon_vma {
  struct anon_vma* root;
  struct rw_semaphore rwsem;
  atomic_t refcount;
  unsigned int degree;
  struct anon_vma* parent;
  struct rb_root_cached rb_root;
};

struct mempolicy {
  atomic_t refcnt;
  short unsigned int mode;
  short unsigned int flags;
  union {
    short int preferred_node;
    nodemask_t nodes;
  } v;
  union {
    nodemask_t cpuset_mems_allowed;
    nodemask_t user_nodemask;
  } w;
};

struct linux_binprm;

struct coredump_params;

struct linux_binfmt {
  struct list_head lh;
  struct module* module;
  int (*load_binary)(struct linux_binprm*);
  int (*load_shlib)(struct file*);
  int (*core_dump)(struct coredump_params*);
  long unsigned int min_coredump;
};

enum irq_domain_bus_token {
  DOMAIN_BUS_ANY = 0,
  DOMAIN_BUS_WIRED = 1,
  DOMAIN_BUS_GENERIC_MSI = 2,
  DOMAIN_BUS_PCI_MSI = 3,
  DOMAIN_BUS_PLATFORM_MSI = 4,
  DOMAIN_BUS_NEXUS = 5,
  DOMAIN_BUS_IPI = 6,
  DOMAIN_BUS_FSL_MC_MSI = 7,
  DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
  DOMAIN_BUS_WAKEUP = 9,
  DOMAIN_BUS_VMD_MSI = 10,
};

struct irq_domain_ops;

struct irq_domain_chip_generic;

struct irq_domain {
  struct list_head link;
  const char* name;
  const struct irq_domain_ops* ops;
  void* host_data;
  unsigned int flags;
  unsigned int mapcount;
  struct fwnode_handle* fwnode;
  enum irq_domain_bus_token bus_token;
  struct irq_domain_chip_generic* gc;
  struct irq_domain* parent;
  irq_hw_number_t hwirq_max;
  unsigned int revmap_direct_max_irq;
  unsigned int revmap_size;
  struct xarray revmap_tree;
  struct mutex revmap_tree_mutex;
  unsigned int linear_revmap[0];
};

struct ctl_node {
  struct rb_node node;
  struct ctl_table_header* header;
};

struct ctl_table_root {
  struct ctl_table_set default_set;
  struct ctl_table_set* (*lookup)(struct ctl_table_root*);
  void (*set_ownership)(
      struct ctl_table_header*,
      struct ctl_table*,
      kuid_t*,
      kgid_t*);
  int (*permissions)(struct ctl_table_header*, struct ctl_table*);
};

enum umh_disable_depth {
  UMH_ENABLED = 0,
  UMH_FREEZING = 1,
  UMH_DISABLED = 2,
};

struct va_alignment {
  int flags;
  long unsigned int mask;
  long unsigned int bits;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

typedef __u64 Elf64_Addr;

typedef __u16 Elf64_Half;

typedef __u64 Elf64_Off;

typedef __u32 Elf64_Word;

typedef __u64 Elf64_Xword;

typedef __s64 Elf64_Sxword;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;

struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
};

typedef struct elf64_sym Elf64_Sym;

struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
};

typedef struct elf64_hdr Elf64_Ehdr;

struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
};

typedef struct elf64_shdr Elf64_Shdr;

struct seq_file {
  char* buf;
  size_t size;
  size_t from;
  size_t count;
  size_t pad_until;
  loff_t index;
  loff_t read_pos;
  struct mutex lock;
  const struct seq_operations* op;
  int poll_event;
  const struct file* file;
  void* private;
};

typedef void (*poll_queue_proc)(
    struct file*,
    wait_queue_head_t*,
    struct poll_table_struct*);

struct poll_table_struct {
  poll_queue_proc _qproc;
  __poll_t _key;
};

enum refcount_saturation_type {
  REFCOUNT_ADD_NOT_ZERO_OVF = 0,
  REFCOUNT_ADD_OVF = 1,
  REFCOUNT_ADD_UAF = 2,
  REFCOUNT_SUB_UAF = 3,
  REFCOUNT_DEC_LEAK = 4,
};

struct kernel_param;

struct kernel_param_ops {
  unsigned int flags;
  int (*set)(const char*, const struct kernel_param*);
  int (*get)(char*, const struct kernel_param*);
  void (*free)(void*);
};

struct kparam_string;

struct kparam_array;

struct kernel_param {
  const char* name;
  struct module* mod;
  const struct kernel_param_ops* ops;
  const u16 perm;
  s8 level;
  u8 flags;
  union {
    void* arg;
    const struct kparam_string* str;
    const struct kparam_array* arr;
  };
};

struct kparam_string {
  unsigned int maxlen;
  char* string;
};

struct kparam_array {
  unsigned int max;
  unsigned int elemsize;
  unsigned int* num;
  const struct kernel_param_ops* ops;
  void* elem;
};

enum module_state {
  MODULE_STATE_LIVE = 0,
  MODULE_STATE_COMING = 1,
  MODULE_STATE_GOING = 2,
  MODULE_STATE_UNFORMED = 3,
};

struct module_param_attrs;

struct module_kobject {
  struct kobject kobj;
  struct module* mod;
  struct kobject* drivers_dir;
  struct module_param_attrs* mp;
  struct completion* kobj_completion;
};

struct latch_tree_node {
  struct rb_node node[2];
};

struct mod_tree_node {
  struct module* mod;
  struct latch_tree_node node;
};

struct module_layout {
  void* base;
  unsigned int size;
  unsigned int text_size;
  unsigned int ro_size;
  unsigned int ro_after_init_size;
  struct mod_tree_node mtn;
};

struct mod_arch_specific {
  unsigned int num_orcs;
  int* orc_unwind_ip;
  struct orc_entry* orc_unwind;
};

struct mod_kallsyms {
  Elf64_Sym* symtab;
  unsigned int num_symtab;
  char* strtab;
  char* typetab;
};

struct module_attribute;

struct exception_table_entry;

struct module_sect_attrs;

struct module_notes_attrs;

struct trace_eval_map;

struct klp_modinfo;

struct error_injection_entry;

struct module {
  enum module_state state;
  struct list_head list;
  char name[56];
  struct module_kobject mkobj;
  struct module_attribute* modinfo_attrs;
  const char* version;
  const char* srcversion;
  struct kobject* holders_dir;
  const struct kernel_symbol* syms;
  const s32* crcs;
  unsigned int num_syms;
  struct mutex param_lock;
  struct kernel_param* kp;
  unsigned int num_kp;
  unsigned int num_gpl_syms;
  const struct kernel_symbol* gpl_syms;
  const s32* gpl_crcs;
  bool using_gplonly_symbols;
  bool async_probe_requested;
  unsigned int num_exentries;
  struct exception_table_entry* extable;
  int (*init)();
  struct module_layout core_layout;
  struct module_layout init_layout;
  struct mod_arch_specific arch;
  long unsigned int taints;
  unsigned int num_bugs;
  struct list_head bug_list;
  struct bug_entry* bug_table;
  struct mod_kallsyms* kallsyms;
  struct mod_kallsyms core_kallsyms;
  struct module_sect_attrs* sect_attrs;
  struct module_notes_attrs* notes_attrs;
  char* args;
  void* percpu;
  unsigned int percpu_size;
  void* noinstr_text_start;
  unsigned int noinstr_text_size;
  unsigned int num_tracepoints;
  tracepoint_ptr_t* tracepoints_ptrs;
  unsigned int num_srcu_structs;
  struct srcu_struct** srcu_struct_ptrs;
  unsigned int num_bpf_raw_events;
  struct bpf_raw_event_map* bpf_raw_events;
  unsigned int btf_data_size;
  void* btf_data;
  struct jump_entry* jump_entries;
  unsigned int num_jump_entries;
  unsigned int num_trace_bprintk_fmt;
  const char** trace_bprintk_fmt_start;
  struct trace_event_call** trace_events;
  unsigned int num_trace_events;
  struct trace_eval_map** trace_evals;
  unsigned int num_trace_evals;
  unsigned int num_ftrace_callsites;
  long unsigned int* ftrace_callsites;
  void* kprobes_text_start;
  unsigned int kprobes_text_size;
  long unsigned int* kprobe_blacklist;
  unsigned int num_kprobe_blacklist;
  int num_static_call_sites;
  struct static_call_site* static_call_sites;
  bool klp;
  bool klp_alive;
  struct klp_modinfo* klp_info;
  unsigned int printk_index_size;
  struct pi_entry** printk_index_start;
  struct list_head source_list;
  struct list_head target_list;
  void (*exit)();
  atomic_t refcnt;
  struct error_injection_entry* ei_funcs;
  unsigned int num_ei_funcs;
};

struct error_injection_entry {
  long unsigned int addr;
  int etype;
};

struct module_attribute {
  struct attribute attr;
  ssize_t (*show)(struct module_attribute*, struct module_kobject*, char*);
  ssize_t (*store)(
      struct module_attribute*,
      struct module_kobject*,
      const char*,
      size_t);
  void (*setup)(struct module*, const char*);
  int (*test)(struct module*);
  void (*free)(struct module*);
};

struct klp_modinfo {
  Elf64_Ehdr hdr;
  Elf64_Shdr* sechdrs;
  char* secstrings;
  unsigned int symndx;
};

struct exception_table_entry {
  int insn;
  int fixup;
  int handler;
};

struct trace_event_functions;

struct trace_event {
  struct hlist_node node;
  struct list_head list;
  int type;
  struct trace_event_functions* funcs;
};

struct trace_event_class;

struct bpf_prog_array;

struct trace_event_call {
  struct list_head list;
  struct trace_event_class* class;
  union {
    char* name;
    struct tracepoint* tp;
  };
  struct trace_event event;
  char* print_fmt;
  struct event_filter* filter;
  void* mod;
  void* data;
  int flags;
  int perf_refcount;
  struct hlist_head* perf_events;
  struct bpf_prog_array* prog_array;
  int (*perf_perm)(struct trace_event_call*, struct perf_event*);
};

struct trace_eval_map {
  const char* system;
  const char* eval_string;
  long unsigned int eval_value;
};

struct cgroup;

struct cgroup_subsys;

struct cgroup_subsys_state {
  struct cgroup* cgroup;
  struct cgroup_subsys* ss;
  struct percpu_ref refcnt;
  struct list_head sibling;
  struct list_head children;
  struct list_head rstat_css_node;
  int id;
  unsigned int flags;
  u64 serial_nr;
  atomic_t online_cnt;
  struct work_struct destroy_work;
  struct rcu_work destroy_rwork;
  struct cgroup_subsys_state* parent;
};

struct mem_cgroup_id {
  int id;
  refcount_t ref;
};

struct page_counter {
  atomic_long_t usage;
  long unsigned int min;
  long unsigned int low;
  long unsigned int high;
  long unsigned int max;
  long unsigned int emin;
  atomic_long_t min_usage;
  atomic_long_t children_min_usage;
  long unsigned int elow;
  atomic_long_t low_usage;
  atomic_long_t children_low_usage;
  long unsigned int watermark;
  long unsigned int failcnt;
  struct page_counter* parent;
};

struct vmpressure {
  long unsigned int scanned;
  long unsigned int reclaimed;
  long unsigned int tree_scanned;
  long unsigned int tree_reclaimed;
  spinlock_t sr_lock;
  struct list_head events;
  struct mutex events_lock;
  struct work_struct work;
};

struct cgroup_file {
  struct kernfs_node* kn;
  long unsigned int notified_at;
  struct timer_list notify_timer;
};

struct mem_cgroup_threshold_ary;

struct mem_cgroup_thresholds {
  struct mem_cgroup_threshold_ary* primary;
  struct mem_cgroup_threshold_ary* spare;
};

struct memcg_padding {
  char x[0];
};

struct memcg_vmstats {
  long int state[44];
  long unsigned int events[98];
  long int state_pending[44];
  long unsigned int events_pending[98];
};

enum memcg_kmem_state {
  KMEM_NONE = 0,
  KMEM_ALLOCATED = 1,
  KMEM_ONLINE = 2,
};

struct fprop_global {
  struct percpu_counter events;
  unsigned int period;
  seqcount_t sequence;
};

struct wb_domain {
  spinlock_t lock;
  struct fprop_global completions;
  struct timer_list period_timer;
  long unsigned int period_time;
  long unsigned int dirty_limit_tstamp;
  long unsigned int dirty_limit;
};

struct wb_completion {
  atomic_t cnt;
  wait_queue_head_t* waitq;
};

struct memcg_cgwb_frn {
  u64 bdi_id;
  int memcg_id;
  u64 at;
  struct wb_completion done;
};

struct obj_cgroup;

struct memcg_vmstats_percpu;

struct mem_cgroup_per_node;

struct mem_cgroup {
  struct cgroup_subsys_state css;
  struct mem_cgroup_id id;
  struct page_counter memory;
  union {
    struct page_counter swap;
    struct page_counter memsw;
  };
  struct page_counter kmem;
  struct page_counter tcpmem;
  struct work_struct high_work;
  long unsigned int zswap_max;
  long unsigned int soft_limit;
  struct vmpressure vmpressure;
  bool oom_group;
  bool oom_lock;
  int under_oom;
  int swappiness;
  int oom_kill_disable;
  struct cgroup_file events_file;
  struct cgroup_file events_local_file;
  struct cgroup_file swap_events_file;
  struct mutex thresholds_lock;
  struct mem_cgroup_thresholds thresholds;
  struct mem_cgroup_thresholds memsw_thresholds;
  struct list_head oom_notify;
  long unsigned int move_charge_at_immigrate;
  spinlock_t move_lock;
  long unsigned int move_lock_flags;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct memcg_padding _pad1_;
  struct memcg_vmstats vmstats;
  atomic_long_t memory_events[8];
  atomic_long_t memory_events_local[8];
  long unsigned int socket_pressure;
  bool tcpmem_active;
  int tcpmem_pressure;
  int kmemcg_id;
  enum memcg_kmem_state kmem_state;
  struct obj_cgroup* objcg;
  struct list_head objcg_list;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct memcg_padding _pad2_;
  atomic_t moving_account;
  struct task_struct* move_lock_task;
  struct memcg_vmstats_percpu* vmstats_percpu;
  struct list_head cgwb_list;
  struct wb_domain cgwb_domain;
  struct memcg_cgwb_frn cgwb_frn[4];
  struct list_head event_list;
  spinlock_t event_list_lock;
  struct deferred_split deferred_split_queue;
  struct mem_cgroup_per_node* nodeinfo[0];
  long : 64;
};

struct pid_namespace {
  struct idr idr;
  struct callback_head rcu;
  unsigned int pid_allocated;
  struct task_struct* child_reaper;
  struct kmem_cache* pid_cachep;
  unsigned int level;
  struct pid_namespace* parent;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  int reboot;
  struct ns_common ns;
};

struct task_cputime {
  u64 stime;
  u64 utime;
  long long unsigned int sum_exec_runtime;
};

struct uts_namespace;

struct ipc_namespace;

struct mnt_namespace;

struct net;

struct time_namespace;

struct cgroup_namespace;

struct nsproxy {
  atomic_t count;
  struct uts_namespace* uts_ns;
  struct ipc_namespace* ipc_ns;
  struct mnt_namespace* mnt_ns;
  struct pid_namespace* pid_ns_for_children;
  struct net* net_ns;
  struct time_namespace* time_ns;
  struct time_namespace* time_ns_for_children;
  struct cgroup_namespace* cgroup_ns;
};

struct bio;

struct bio_list {
  struct bio* head;
  struct bio* tail;
};

struct blk_plug {
  struct list_head mq_list;
  struct list_head cb_list;
  short unsigned int rq_count;
  bool multiple_queues;
  bool nowait;
};

struct reclaim_state {
  long unsigned int reclaimed_slab;
};

struct fprop_local_percpu {
  struct percpu_counter events;
  unsigned int period;
  raw_spinlock_t lock;
};

enum wb_reason {
  WB_REASON_BACKGROUND = 0,
  WB_REASON_VMSCAN = 1,
  WB_REASON_SYNC = 2,
  WB_REASON_PERIODIC = 3,
  WB_REASON_LAPTOP_TIMER = 4,
  WB_REASON_FS_FREE_SPACE = 5,
  WB_REASON_FORKER_THREAD = 6,
  WB_REASON_FOREIGN_FLUSH = 7,
  WB_REASON_MAX = 8,
};

struct bdi_writeback {
  struct backing_dev_info* bdi;
  long unsigned int state;
  long unsigned int last_old_flush;
  struct list_head b_dirty;
  struct list_head b_io;
  struct list_head b_more_io;
  struct list_head b_dirty_time;
  spinlock_t list_lock;
  struct percpu_counter stat[4];
  long unsigned int congested;
  long unsigned int bw_time_stamp;
  long unsigned int dirtied_stamp;
  long unsigned int written_stamp;
  long unsigned int write_bandwidth;
  long unsigned int avg_write_bandwidth;
  long unsigned int dirty_ratelimit;
  long unsigned int balanced_dirty_ratelimit;
  struct fprop_local_percpu completions;
  int dirty_exceeded;
  enum wb_reason start_all_reason;
  spinlock_t work_lock;
  struct list_head work_list;
  struct delayed_work dwork;
  long unsigned int dirty_sleep;
  struct list_head bdi_node;
  struct percpu_ref refcnt;
  struct fprop_local_percpu memcg_completions;
  struct cgroup_subsys_state* memcg_css;
  struct cgroup_subsys_state* blkcg_css;
  struct list_head memcg_node;
  struct list_head blkcg_node;
  struct list_head b_attached;
  struct list_head offline_node;
  union {
    struct work_struct release_work;
    struct callback_head rcu;
  };
};

struct backing_dev_info {
  u64 id;
  struct rb_node rb_node;
  struct list_head bdi_list;
  long unsigned int ra_pages;
  long unsigned int io_pages;
  struct kref refcnt;
  unsigned int capabilities;
  unsigned int min_ratio;
  unsigned int max_ratio;
  unsigned int max_prop_frac;
  atomic_long_t tot_write_bandwidth;
  struct bdi_writeback wb;
  struct list_head wb_list;
  struct xarray cgwb_tree;
  struct mutex cgwb_release_mutex;
  struct rw_semaphore wb_switch_rwsem;
  wait_queue_head_t wb_waitq;
  struct device* dev;
  char dev_name[64];
  struct device* owner;
  struct timer_list laptop_mode_wb_timer;
  struct dentry* debug_dir;
};

struct css_set {
  struct cgroup_subsys_state* subsys[12];
  refcount_t refcount;
  struct css_set* dom_cset;
  struct cgroup* dfl_cgrp;
  int nr_tasks;
  struct list_head tasks;
  struct list_head mg_tasks;
  struct list_head dying_tasks;
  struct list_head task_iters;
  struct list_head e_cset_node[12];
  struct list_head threaded_csets;
  struct list_head threaded_csets_node;
  struct hlist_node hlist;
  struct list_head cgrp_links;
  struct list_head mg_preload_node;
  struct list_head mg_node;
  struct cgroup* mg_src_cgrp;
  struct cgroup* mg_dst_cgrp;
  struct css_set* mg_dst_cset;
  bool dead;
  struct callback_head callback_head;
};

typedef u32 compat_uptr_t;

struct compat_robust_list {
  compat_uptr_t next;
};

typedef s32 compat_long_t;

struct compat_robust_list_head {
  struct compat_robust_list list;
  compat_long_t futex_offset;
  compat_uptr_t list_op_pending;
};

struct perf_event_groups {
  struct rb_root tree;
  u64 index;
};

struct perf_event_context {
  struct pmu* pmu;
  raw_spinlock_t lock;
  struct mutex mutex;
  struct list_head active_ctx_list;
  struct perf_event_groups pinned_groups;
  struct perf_event_groups flexible_groups;
  struct list_head event_list;
  struct list_head pinned_active;
  struct list_head flexible_active;
  int nr_events;
  int nr_active;
  int is_active;
  int nr_stat;
  int nr_freq;
  int rotate_disable;
  int rotate_necessary;
  refcount_t refcount;
  struct task_struct* task;
  u64 time;
  u64 timestamp;
  struct perf_event_context* parent_ctx;
  u64 parent_gen;
  u64 generation;
  int pin_count;
  int nr_cgroups;
  void* task_ctx_data;
  struct callback_head callback_head;
};

struct task_delay_info {
  raw_spinlock_t lock;
  unsigned int flags;
  u64 blkio_start;
  u64 blkio_delay;
  u64 swapin_delay;
  u32 blkio_count;
  u32 swapin_count;
  u64 freepages_start;
  u64 freepages_delay;
  u64 thrashing_start;
  u64 thrashing_delay;
  u32 freepages_count;
  u32 thrashing_count;
};

struct ftrace_ret_stack {
  long unsigned int ret;
  long unsigned int func;
  long long unsigned int calltime;
  long unsigned int* retp;
};

struct blk_rq_stat {
  u64 mean;
  u64 min;
  u64 max;
  u32 nr_samples;
  u64 batch;
};

enum blk_zoned_model {
  BLK_ZONED_NONE = 0,
  BLK_ZONED_HA = 1,
  BLK_ZONED_HM = 2,
};

struct queue_limits {
  long unsigned int bounce_pfn;
  long unsigned int seg_boundary_mask;
  long unsigned int virt_boundary_mask;
  unsigned int max_hw_sectors;
  unsigned int max_dev_sectors;
  unsigned int chunk_sectors;
  unsigned int max_sectors;
  unsigned int max_segment_size;
  unsigned int physical_block_size;
  unsigned int logical_block_size;
  unsigned int alignment_offset;
  unsigned int io_min;
  unsigned int io_opt;
  unsigned int max_discard_sectors;
  unsigned int max_hw_discard_sectors;
  unsigned int max_write_same_sectors;
  unsigned int max_write_zeroes_sectors;
  unsigned int max_zone_append_sectors;
  unsigned int discard_granularity;
  unsigned int discard_alignment;
  unsigned int zone_write_granularity;
  short unsigned int max_segments;
  short unsigned int max_integrity_segments;
  short unsigned int max_discard_segments;
  unsigned char misaligned;
  unsigned char discard_misaligned;
  unsigned char raid_partial_stripes_expensive;
  enum blk_zoned_model zoned;
};

struct bsg_ops;

struct bsg_class_device {
  struct device* class_dev;
  int minor;
  struct request_queue* queue;
  const struct bsg_ops* ops;
};

typedef void* mempool_alloc_t(gfp_t, void*);

typedef void mempool_free_t(void*, void*);

struct mempool_s {
  spinlock_t lock;
  int min_nr;
  int curr_nr;
  void** elements;
  void* pool_data;
  mempool_alloc_t* alloc;
  mempool_free_t* free;
  wait_queue_head_t wait;
};

typedef struct mempool_s mempool_t;

struct bio_alloc_cache;

struct bio_set {
  struct kmem_cache* bio_slab;
  unsigned int front_pad;
  struct bio_alloc_cache* cache;
  mempool_t bio_pool;
  mempool_t bvec_pool;
  unsigned int back_pad;
  spinlock_t rescue_lock;
  struct bio_list rescue_list;
  struct work_struct rescue_work;
  struct workqueue_struct* rescue_workqueue;
  struct hlist_node cpuhp_dead;
};

struct request;

struct elevator_queue;

struct blk_queue_stats;

struct rq_qos;

struct blk_mq_ops;

struct blk_mq_ctx;

struct blk_mq_hw_ctx;

struct blk_stat_callback;

struct blkcg_gq;

struct blk_trace;

struct blk_flush_queue;

struct throtl_data;

struct blk_mq_tag_set;

struct request_queue {
  struct request* last_merge;
  struct elevator_queue* elevator;
  struct percpu_ref q_usage_counter;
  struct blk_queue_stats* stats;
  struct rq_qos* rq_qos;
  const struct blk_mq_ops* mq_ops;
  struct blk_mq_ctx* queue_ctx;
  unsigned int queue_depth;
  struct blk_mq_hw_ctx** queue_hw_ctx;
  unsigned int nr_hw_queues;
  struct backing_dev_info* backing_dev_info;
  void* queuedata;
  long unsigned int queue_flags;
  atomic_t pm_only;
  int id;
  gfp_t bounce_gfp;
  spinlock_t queue_lock;
  struct kobject kobj;
  struct kobject* mq_kobj;
  long unsigned int nr_requests;
  unsigned int dma_pad_mask;
  unsigned int dma_alignment;
  unsigned int rq_timeout;
  int poll_nsec;
  struct blk_stat_callback* poll_cb;
  struct blk_rq_stat poll_stat[16];
  struct timer_list timeout;
  struct work_struct timeout_work;
  atomic_t nr_active_requests_shared_sbitmap;
  struct list_head icq_list;
  long unsigned int blkcg_pols[1];
  struct blkcg_gq* root_blkg;
  struct list_head blkg_list;
  struct queue_limits limits;
  unsigned int required_elevator_features;
  unsigned int sg_timeout;
  unsigned int sg_reserved_size;
  int node;
  struct mutex debugfs_mutex;
  struct blk_trace* blk_trace;
  struct blk_flush_queue* fq;
  struct list_head requeue_list;
  spinlock_t requeue_lock;
  struct delayed_work requeue_work;
  struct mutex sysfs_lock;
  struct mutex sysfs_dir_lock;
  struct list_head unused_hctx_list;
  spinlock_t unused_hctx_lock;
  int mq_freeze_depth;
  struct bsg_class_device bsg_dev;
  struct throtl_data* td;
  struct callback_head callback_head;
  wait_queue_head_t mq_freeze_wq;
  struct mutex mq_freeze_lock;
  struct blk_mq_tag_set* tag_set;
  struct list_head tag_set_list;
  struct bio_set bio_split;
  struct dentry* debugfs_dir;
  struct dentry* sched_debugfs_dir;
  struct dentry* rqos_debugfs_dir;
  bool mq_sysfs_init_done;
  size_t cmd_size;
  u64 write_hints[5];
};

struct bpf_run_ctx {};

struct cgroup_base_stat {
  struct task_cputime cputime;
};

struct psi_group_cpu;

struct psi_group {
  struct mutex avgs_lock;
  struct psi_group_cpu* pcpu;
  u64 avg_total[6];
  u64 avg_last_update;
  u64 avg_next_update;
  struct delayed_work avgs_work;
  u64 total[12];
  long unsigned int avg[18];
  struct task_struct* poll_task;
  struct timer_list poll_timer;
  wait_queue_head_t poll_wait;
  atomic_t poll_wakeup;
  struct mutex trigger_lock;
  struct list_head triggers;
  u32 nr_triggers[6];
  u32 poll_states;
  u64 poll_min_period;
  u64 polling_total[6];
  u64 polling_next_update;
  u64 polling_until;
};

struct cgroup_bpf {
  struct bpf_prog_array* effective[23];
  struct list_head progs[23];
  u32 flags[23];
  struct list_head storages;
  struct bpf_prog_array* inactive;
  struct percpu_ref refcnt;
  struct work_struct release_work;
};

struct cgroup_freezer_state {
  bool freeze;
  int e_freeze;
  int nr_frozen_descendants;
  int nr_frozen_tasks;
};

struct cgroup_root;

struct cgroup_rstat_cpu;

struct cgroup {
  struct cgroup_subsys_state self;
  long unsigned int flags;
  int level;
  int max_depth;
  int nr_descendants;
  int nr_dying_descendants;
  int max_descendants;
  int nr_populated_csets;
  int nr_populated_domain_children;
  int nr_populated_threaded_children;
  int nr_threaded_children;
  struct kernfs_node* kn;
  struct cgroup_file procs_file;
  struct cgroup_file events_file;
  u16 subtree_control;
  u16 subtree_ss_mask;
  u16 old_subtree_control;
  u16 old_subtree_ss_mask;
  struct cgroup_subsys_state* subsys[12];
  struct cgroup_root* root;
  struct list_head cset_links;
  struct list_head e_csets[12];
  struct cgroup* dom_cgrp;
  struct cgroup* old_dom_cgrp;
  struct cgroup_rstat_cpu* rstat_cpu;
  struct list_head rstat_css_list;
  struct cgroup_base_stat last_bstat;
  struct cgroup_base_stat bstat;
  struct prev_cputime prev_cputime;
  struct list_head pidlists;
  struct mutex pidlist_mutex;
  wait_queue_head_t offline_waitq;
  struct work_struct release_agent_work;
  struct psi_group psi;
  struct cgroup_bpf bpf;
  atomic_t congestion_count;
  struct cgroup_freezer_state freezer;
  u64 ancestor_ids[0];
};

struct ucounts {
  struct hlist_node node;
  struct user_namespace* ns;
  kuid_t uid;
  int count;
  atomic_t ucount[10];
};

struct taskstats {
  __u16 version;
  __u32 ac_exitcode;
  __u8 ac_flag;
  __u8 ac_nice;
  __u64 cpu_count;
  __u64 cpu_delay_total;
  __u64 blkio_count;
  __u64 blkio_delay_total;
  __u64 swapin_count;
  __u64 swapin_delay_total;
  __u64 cpu_run_real_total;
  __u64 cpu_run_virtual_total;
  char ac_comm[32];
  __u8 ac_sched;
  __u8 ac_pad[3];
  int : 32;
  __u32 ac_uid;
  __u32 ac_gid;
  __u32 ac_pid;
  __u32 ac_ppid;
  __u32 ac_btime;
  __u64 ac_etime;
  __u64 ac_utime;
  __u64 ac_stime;
  __u64 ac_minflt;
  __u64 ac_majflt;
  __u64 coremem;
  __u64 virtmem;
  __u64 hiwater_rss;
  __u64 hiwater_vm;
  __u64 read_char;
  __u64 write_char;
  __u64 read_syscalls;
  __u64 write_syscalls;
  __u64 read_bytes;
  __u64 write_bytes;
  __u64 cancelled_write_bytes;
  __u64 nvcsw;
  __u64 nivcsw;
  __u64 ac_utimescaled;
  __u64 ac_stimescaled;
  __u64 cpu_scaled_run_real_total;
  __u64 freepages_count;
  __u64 freepages_delay_total;
  __u64 thrashing_count;
  __u64 thrashing_delay_total;
  __u64 ac_btime64;
};

struct wait_page_queue {
  struct page* page;
  int bit_nr;
  wait_queue_entry_t wait;
};

enum writeback_sync_modes {
  WB_SYNC_NONE = 0,
  WB_SYNC_ALL = 1,
};

struct writeback_control {
  long int nr_to_write;
  long int pages_skipped;
  loff_t range_start;
  loff_t range_end;
  enum writeback_sync_modes sync_mode;
  enum wb_reason reason;
  unsigned int for_kupdate : 1;
  unsigned int for_background : 1;
  unsigned int tagged_writepages : 1;
  unsigned int for_reclaim : 1;
  unsigned int range_cyclic : 1;
  unsigned int for_sync : 1;
  unsigned int no_cgroup_owner : 1;
  unsigned int punt_to_cgroup : 1;
  struct bdi_writeback* wb;
  struct inode* inode;
  int wb_id;
  int wb_lcand_id;
  int wb_tcand_id;
  size_t wb_bytes;
  size_t wb_lcand_bytes;
  size_t wb_tcand_bytes;
};

struct readahead_control {
  struct file* file;
  struct address_space* mapping;
  long unsigned int _index;
  unsigned int _nr_pages;
  unsigned int _batch_count;
};

struct iovec;

struct kvec;

struct bio_vec;

struct iov_iter {
  unsigned int type;
  size_t iov_offset;
  size_t count;
  union {
    const struct iovec* iov;
    const struct kvec* kvec;
    const struct bio_vec* bvec;
    struct pipe_inode_info* pipe;
  };
  union {
    long unsigned int nr_segs;
    struct {
      unsigned int head;
      unsigned int start_head;
    };
  };
};

struct swap_cluster_info {
  spinlock_t lock;
  unsigned int data : 24;
  unsigned int flags : 8;
};

struct swap_cluster_list {
  struct swap_cluster_info head;
  struct swap_cluster_info tail;
};

struct percpu_cluster;

struct swap_info_struct {
  long unsigned int flags;
  short int prio;
  struct plist_node list;
  signed char type;
  unsigned int max;
  unsigned char* swap_map;
  struct swap_cluster_info* cluster_info;
  struct swap_cluster_list free_clusters;
  unsigned int lowest_bit;
  unsigned int highest_bit;
  unsigned int pages;
  unsigned int inuse_pages;
  unsigned int cluster_next;
  unsigned int cluster_nr;
  unsigned int* cluster_next_cpu;
  struct percpu_cluster* percpu_cluster;
  struct rb_root swap_extent_root;
  struct block_device* bdev;
  struct file* swap_file;
  unsigned int old_block_size;
  long unsigned int* frontswap_map;
  atomic_t frontswap_pages;
  spinlock_t lock;
  spinlock_t cont_lock;
  struct work_struct discard_work;
  struct swap_cluster_list discard_clusters;
  struct plist_node avail_lists[0];
};

struct cdev {
  struct kobject kobj;
  struct module* owner;
  const struct file_operations* ops;
  struct list_head list;
  dev_t dev;
  unsigned int count;
};

struct disk_stats;

struct gendisk;

struct partition_meta_info;

struct block_device {
  sector_t bd_start_sect;
  struct disk_stats* bd_stats;
  long unsigned int bd_stamp;
  bool bd_read_only;
  dev_t bd_dev;
  int bd_openers;
  struct inode* bd_inode;
  struct super_block* bd_super;
  struct mutex bd_mutex;
  void* bd_claiming;
  struct device bd_device;
  void* bd_holder;
  int bd_holders;
  bool bd_write_holder;
  struct list_head bd_holder_disks;
  struct kobject* bd_holder_dir;
  u8 bd_partno;
  unsigned int bd_part_count;
  spinlock_t bd_size_lock;
  struct gendisk* bd_disk;
  struct backing_dev_info* bd_bdi;
  int bd_fsfreeze_count;
  struct mutex bd_fsfreeze_mutex;
  struct super_block* bd_fsfreeze_sb;
  struct partition_meta_info* bd_meta_info;
};

struct fc_log;

struct p_log {
  const char* prefix;
  struct fc_log* log;
};

enum fs_context_purpose {
  FS_CONTEXT_FOR_MOUNT = 0,
  FS_CONTEXT_FOR_SUBMOUNT = 1,
  FS_CONTEXT_FOR_RECONFIGURE = 2,
};

enum fs_context_phase {
  FS_CONTEXT_CREATE_PARAMS = 0,
  FS_CONTEXT_CREATING = 1,
  FS_CONTEXT_AWAITING_MOUNT = 2,
  FS_CONTEXT_AWAITING_RECONF = 3,
  FS_CONTEXT_RECONF_PARAMS = 4,
  FS_CONTEXT_RECONFIGURING = 5,
  FS_CONTEXT_FAILED = 6,
};

struct fs_context_operations;

struct fs_context {
  const struct fs_context_operations* ops;
  struct mutex uapi_mutex;
  struct file_system_type* fs_type;
  void* fs_private;
  void* sget_key;
  struct dentry* root;
  struct user_namespace* user_ns;
  struct net* net_ns;
  const struct cred* cred;
  struct p_log log;
  const char* source;
  void* security;
  void* s_fs_info;
  unsigned int sb_flags;
  unsigned int sb_flags_mask;
  unsigned int s_iflags;
  unsigned int lsm_flags;
  enum fs_context_purpose purpose : 8;
  enum fs_context_phase phase : 8;
  bool need_free : 1;
  bool global : 1;
  bool oldapi : 1;
};

struct audit_names;

struct filename {
  const char* name;
  const char* uptr;
  int refcnt;
  struct audit_names* aname;
  const char iname[0];
};

typedef u8 blk_status_t;

struct bvec_iter {
  sector_t bi_sector;
  unsigned int bi_size;
  unsigned int bi_idx;
  unsigned int bi_bvec_done;
};

typedef void bio_end_io_t(struct bio*);

struct bio_issue {
  u64 value;
};

struct bio_vec {
  struct page* bv_page;
  unsigned int bv_len;
  unsigned int bv_offset;
};

struct bio {
  struct bio* bi_next;
  struct block_device* bi_bdev;
  unsigned int bi_opf;
  short unsigned int bi_flags;
  short unsigned int bi_ioprio;
  short unsigned int bi_write_hint;
  blk_status_t bi_status;
  atomic_t __bi_remaining;
  struct bvec_iter bi_iter;
  bio_end_io_t* bi_end_io;
  void* bi_private;
  struct blkcg_gq* bi_blkg;
  struct bio_issue bi_issue;
  u64 bi_iocost_cost;
  union {};
  short unsigned int bi_vcnt;
  short unsigned int bi_max_vecs;
  atomic_t __bi_cnt;
  struct bio_vec* bi_io_vec;
  struct bio_set* bi_pool;
  struct bio_vec bi_inline_vecs[0];
};

struct linux_binprm {
  struct vm_area_struct* vma;
  long unsigned int vma_pages;
  struct mm_struct* mm;
  long unsigned int p;
  long unsigned int argmin;
  unsigned int have_execfd : 1;
  unsigned int execfd_creds : 1;
  unsigned int secureexec : 1;
  unsigned int point_of_no_return : 1;
  struct file* executable;
  struct file* interpreter;
  struct file* file;
  struct cred* cred;
  int unsafe;
  unsigned int per_clear;
  int argc;
  int envc;
  const char* filename;
  const char* interp;
  const char* fdpath;
  unsigned int interp_flags;
  int execfd;
  long unsigned int loader;
  long unsigned int exec;
  struct rlimit rlim_stack;
  char buf[256];
};

struct coredump_params {
  const kernel_siginfo_t* siginfo;
  struct pt_regs* regs;
  struct file* file;
  long unsigned int limit;
  long unsigned int mm_flags;
  loff_t written;
  loff_t pos;
};

typedef u32 phandle;

struct property;

struct device_node {
  const char* name;
  phandle phandle;
  const char* full_name;
  struct fwnode_handle fwnode;
  struct property* properties;
  struct property* deadprops;
  struct device_node* parent;
  struct device_node* child;
  struct device_node* sibling;
  long unsigned int _flags;
  void* data;
};

enum cpuhp_state {
  CPUHP_INVALID = 4294967295,
  CPUHP_OFFLINE = 0,
  CPUHP_CREATE_THREADS = 1,
  CPUHP_PERF_PREPARE = 2,
  CPUHP_PERF_X86_PREPARE = 3,
  CPUHP_PERF_X86_AMD_UNCORE_PREP = 4,
  CPUHP_PERF_POWER = 5,
  CPUHP_PERF_SUPERH = 6,
  CPUHP_X86_HPET_DEAD = 7,
  CPUHP_X86_APB_DEAD = 8,
  CPUHP_X86_MCE_DEAD = 9,
  CPUHP_VIRT_NET_DEAD = 10,
  CPUHP_SLUB_DEAD = 11,
  CPUHP_DEBUG_OBJ_DEAD = 12,
  CPUHP_MM_WRITEBACK_DEAD = 13,
  CPUHP_MM_VMSTAT_DEAD = 14,
  CPUHP_SOFTIRQ_DEAD = 15,
  CPUHP_NET_MVNETA_DEAD = 16,
  CPUHP_CPUIDLE_DEAD = 17,
  CPUHP_ARM64_FPSIMD_DEAD = 18,
  CPUHP_ARM_OMAP_WAKE_DEAD = 19,
  CPUHP_IRQ_POLL_DEAD = 20,
  CPUHP_BLOCK_SOFTIRQ_DEAD = 21,
  CPUHP_BIO_DEAD = 22,
  CPUHP_ACPI_CPUDRV_DEAD = 23,
  CPUHP_S390_PFAULT_DEAD = 24,
  CPUHP_BLK_MQ_DEAD = 25,
  CPUHP_FS_BUFF_DEAD = 26,
  CPUHP_PRINTK_DEAD = 27,
  CPUHP_MM_MEMCQ_DEAD = 28,
  CPUHP_PERCPU_CNT_DEAD = 29,
  CPUHP_RADIX_DEAD = 30,
  CPUHP_PAGE_ALLOC_DEAD = 31,
  CPUHP_NET_DEV_DEAD = 32,
  CPUHP_PCI_XGENE_DEAD = 33,
  CPUHP_IOMMU_INTEL_DEAD = 34,
  CPUHP_LUSTRE_CFS_DEAD = 35,
  CPUHP_AP_ARM_CACHE_B15_RAC_DEAD = 36,
  CPUHP_PADATA_DEAD = 37,
  CPUHP_WORKQUEUE_PREP = 38,
  CPUHP_POWER_NUMA_PREPARE = 39,
  CPUHP_HRTIMERS_PREPARE = 40,
  CPUHP_PROFILE_PREPARE = 41,
  CPUHP_X2APIC_PREPARE = 42,
  CPUHP_SMPCFD_PREPARE = 43,
  CPUHP_RELAY_PREPARE = 44,
  CPUHP_SLAB_PREPARE = 45,
  CPUHP_MD_RAID5_PREPARE = 46,
  CPUHP_RCUTREE_PREP = 47,
  CPUHP_CPUIDLE_COUPLED_PREPARE = 48,
  CPUHP_POWERPC_PMAC_PREPARE = 49,
  CPUHP_POWERPC_MMU_CTX_PREPARE = 50,
  CPUHP_XEN_PREPARE = 51,
  CPUHP_XEN_EVTCHN_PREPARE = 52,
  CPUHP_ARM_SHMOBILE_SCU_PREPARE = 53,
  CPUHP_SH_SH3X_PREPARE = 54,
  CPUHP_NET_FLOW_PREPARE = 55,
  CPUHP_TOPOLOGY_PREPARE = 56,
  CPUHP_NET_IUCV_PREPARE = 57,
  CPUHP_ARM_BL_PREPARE = 58,
  CPUHP_TRACE_RB_PREPARE = 59,
  CPUHP_MM_ZS_PREPARE = 60,
  CPUHP_MM_ZSWP_MEM_PREPARE = 61,
  CPUHP_MM_ZSWP_POOL_PREPARE = 62,
  CPUHP_KVM_PPC_BOOK3S_PREPARE = 63,
  CPUHP_ZCOMP_PREPARE = 64,
  CPUHP_TIMERS_PREPARE = 65,
  CPUHP_MIPS_SOC_PREPARE = 66,
  CPUHP_BP_PREPARE_DYN = 67,
  CPUHP_BP_PREPARE_DYN_END = 87,
  CPUHP_BRINGUP_CPU = 88,
  CPUHP_AP_IDLE_DEAD = 89,
  CPUHP_AP_OFFLINE = 90,
  CPUHP_AP_SCHED_STARTING = 91,
  CPUHP_AP_RCUTREE_DYING = 92,
  CPUHP_AP_CPU_PM_STARTING = 93,
  CPUHP_AP_IRQ_GIC_STARTING = 94,
  CPUHP_AP_IRQ_HIP04_STARTING = 95,
  CPUHP_AP_IRQ_ARMADA_XP_STARTING = 96,
  CPUHP_AP_IRQ_BCM2836_STARTING = 97,
  CPUHP_AP_IRQ_MIPS_GIC_STARTING = 98,
  CPUHP_AP_IRQ_RISCV_STARTING = 99,
  CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING = 100,
  CPUHP_AP_ARM_MVEBU_COHERENCY = 101,
  CPUHP_AP_MICROCODE_LOADER = 102,
  CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING = 103,
  CPUHP_AP_PERF_X86_STARTING = 104,
  CPUHP_AP_PERF_X86_AMD_IBS_STARTING = 105,
  CPUHP_AP_PERF_X86_CQM_STARTING = 106,
  CPUHP_AP_PERF_X86_CSTATE_STARTING = 107,
  CPUHP_AP_PERF_XTENSA_STARTING = 108,
  CPUHP_AP_MIPS_OP_LOONGSON3_STARTING = 109,
  CPUHP_AP_ARM_SDEI_STARTING = 110,
  CPUHP_AP_ARM_VFP_STARTING = 111,
  CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING = 112,
  CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING = 113,
  CPUHP_AP_PERF_ARM_ACPI_STARTING = 114,
  CPUHP_AP_PERF_ARM_STARTING = 115,
  CPUHP_AP_ARM_L2X0_STARTING = 116,
  CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING = 117,
  CPUHP_AP_ARM_ARCH_TIMER_STARTING = 118,
  CPUHP_AP_ARM_GLOBAL_TIMER_STARTING = 119,
  CPUHP_AP_JCORE_TIMER_STARTING = 120,
  CPUHP_AP_ARM_TWD_STARTING = 121,
  CPUHP_AP_QCOM_TIMER_STARTING = 122,
  CPUHP_AP_TEGRA_TIMER_STARTING = 123,
  CPUHP_AP_ARMADA_TIMER_STARTING = 124,
  CPUHP_AP_MARCO_TIMER_STARTING = 125,
  CPUHP_AP_MIPS_GIC_TIMER_STARTING = 126,
  CPUHP_AP_ARC_TIMER_STARTING = 127,
  CPUHP_AP_RISCV_TIMER_STARTING = 128,
  CPUHP_AP_CLINT_TIMER_STARTING = 129,
  CPUHP_AP_CSKY_TIMER_STARTING = 130,
  CPUHP_AP_HYPERV_TIMER_STARTING = 131,
  CPUHP_AP_KVM_STARTING = 132,
  CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING = 133,
  CPUHP_AP_KVM_ARM_VGIC_STARTING = 134,
  CPUHP_AP_KVM_ARM_TIMER_STARTING = 135,
  CPUHP_AP_DUMMY_TIMER_STARTING = 136,
  CPUHP_AP_ARM_XEN_STARTING = 137,
  CPUHP_AP_ARM_CORESIGHT_STARTING = 138,
  CPUHP_AP_ARM_CORESIGHT_CTI_STARTING = 139,
  CPUHP_AP_ARM64_ISNDEP_STARTING = 140,
  CPUHP_AP_SMPCFD_DYING = 141,
  CPUHP_AP_X86_TBOOT_DYING = 142,
  CPUHP_AP_ARM_CACHE_B15_RAC_DYING = 143,
  CPUHP_AP_ONLINE = 144,
  CPUHP_TEARDOWN_CPU = 145,
  CPUHP_AP_ONLINE_IDLE = 146,
  CPUHP_AP_SCHED_WAIT_EMPTY = 147,
  CPUHP_AP_SMPBOOT_THREADS = 148,
  CPUHP_AP_X86_VDSO_VMA_ONLINE = 149,
  CPUHP_AP_IRQ_AFFINITY_ONLINE = 150,
  CPUHP_AP_BLK_MQ_ONLINE = 151,
  CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS = 152,
  CPUHP_AP_X86_INTEL_EPB_ONLINE = 153,
  CPUHP_AP_PERF_ONLINE = 154,
  CPUHP_AP_PERF_X86_ONLINE = 155,
  CPUHP_AP_PERF_X86_UNCORE_ONLINE = 156,
  CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE = 157,
  CPUHP_AP_PERF_X86_AMD_POWER_ONLINE = 158,
  CPUHP_AP_PERF_X86_RAPL_ONLINE = 159,
  CPUHP_AP_PERF_X86_CQM_ONLINE = 160,
  CPUHP_AP_PERF_X86_CSTATE_ONLINE = 161,
  CPUHP_AP_PERF_S390_CF_ONLINE = 162,
  CPUHP_AP_PERF_S390_CFD_ONLINE = 163,
  CPUHP_AP_PERF_S390_SF_ONLINE = 164,
  CPUHP_AP_PERF_ARM_CCI_ONLINE = 165,
  CPUHP_AP_PERF_ARM_CCN_ONLINE = 166,
  CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE = 167,
  CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE = 168,
  CPUHP_AP_PERF_ARM_HISI_L3_ONLINE = 169,
  CPUHP_AP_PERF_ARM_L2X0_ONLINE = 170,
  CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE = 171,
  CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE = 172,
  CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE = 173,
  CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE = 174,
  CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE = 175,
  CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE = 176,
  CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE = 177,
  CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE = 178,
  CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE = 179,
  CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE = 180,
  CPUHP_AP_PERF_CSKY_ONLINE = 181,
  CPUHP_AP_WATCHDOG_ONLINE = 182,
  CPUHP_AP_WORKQUEUE_ONLINE = 183,
  CPUHP_AP_RCUTREE_ONLINE = 184,
  CPUHP_AP_BASE_CACHEINFO_ONLINE = 185,
  CPUHP_AP_ONLINE_DYN = 186,
  CPUHP_AP_ONLINE_DYN_END = 216,
  CPUHP_AP_X86_HPET_ONLINE = 217,
  CPUHP_AP_X86_KVM_CLK_ONLINE = 218,
  CPUHP_AP_DTPM_CPU_ONLINE = 219,
  CPUHP_AP_ACTIVE = 220,
  CPUHP_ONLINE = 221,
};

struct static_call_mod {
  struct static_call_mod* next;
  struct module* mod;
  struct static_call_site* sites;
};

struct ring_buffer_event {
  u32 type_len : 5;
  u32 time_delta : 27;
  u32 array[0];
};

struct seq_buf {
  char* buffer;
  size_t size;
  size_t len;
  loff_t readpos;
};

struct trace_seq {
  char buffer[4096];
  struct seq_buf seq;
  int full;
};

typedef struct {
  u16 __softirq_pending;
  u8 kvm_cpu_l1tf_flush_l1d;
  unsigned int __nmi_count;
  unsigned int apic_timer_irqs;
  unsigned int irq_spurious_count;
  unsigned int icr_read_retry_count;
  unsigned int kvm_posted_intr_ipis;
  unsigned int kvm_posted_intr_wakeup_ipis;
  unsigned int kvm_posted_intr_nested_ipis;
  unsigned int x86_platform_ipis;
  unsigned int apic_perf_irqs;
  unsigned int apic_irq_work_irqs;
  unsigned int irq_resched_count;
  unsigned int irq_call_count;
  unsigned int irq_tlb_count;
  unsigned int irq_thermal_count;
  unsigned int irq_threshold_count;
  unsigned int irq_deferred_error_count;
  unsigned int irq_hv_callback_count;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
} irq_cpustat_t;

enum perf_sw_ids {
  PERF_COUNT_SW_CPU_CLOCK = 0,
  PERF_COUNT_SW_TASK_CLOCK = 1,
  PERF_COUNT_SW_PAGE_FAULTS = 2,
  PERF_COUNT_SW_CONTEXT_SWITCHES = 3,
  PERF_COUNT_SW_CPU_MIGRATIONS = 4,
  PERF_COUNT_SW_PAGE_FAULTS_MIN = 5,
  PERF_COUNT_SW_PAGE_FAULTS_MAJ = 6,
  PERF_COUNT_SW_ALIGNMENT_FAULTS = 7,
  PERF_COUNT_SW_EMULATION_FAULTS = 8,
  PERF_COUNT_SW_DUMMY = 9,
  PERF_COUNT_SW_BPF_OUTPUT = 10,
  PERF_COUNT_SW_CGROUP_SWITCHES = 11,
  PERF_COUNT_SW_MAX = 12,
};

union perf_mem_data_src {
  __u64 val;
  struct {
    __u64 mem_op : 5;
    __u64 mem_lvl : 14;
    __u64 mem_snoop : 5;
    __u64 mem_lock : 2;
    __u64 mem_dtlb : 7;
    __u64 mem_lvl_num : 4;
    __u64 mem_remote : 1;
    __u64 mem_snoopx : 2;
    __u64 mem_blk : 3;
    __u64 mem_rsvd : 21;
  };
};

struct perf_branch_entry {
  __u64 from;
  __u64 to;
  __u64 mispred : 1;
  __u64 predicted : 1;
  __u64 in_tx : 1;
  __u64 abort : 1;
  __u64 cycles : 16;
  __u64 type : 4;
  __u64 reserved : 40;
};

union perf_sample_weight {
  __u64 full;
  struct {
    __u32 var1_dw;
    __u16 var2_w;
    __u16 var3_w;
  };
};

struct new_utsname {
  char sysname[65];
  char nodename[65];
  char release[65];
  char version[65];
  char machine[65];
  char domainname[65];
};

struct uts_namespace {
  struct new_utsname name;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  struct ns_common ns;
};

struct cgroup_namespace {
  struct ns_common ns;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  struct css_set* root_cset;
};

struct nsset {
  unsigned int flags;
  struct nsproxy* nsproxy;
  struct fs_struct* fs;
  const struct cred* cred;
};

struct proc_ns_operations {
  const char* name;
  const char* real_ns_name;
  int type;
  struct ns_common* (*get)(struct task_struct*);
  void (*put)(struct ns_common*);
  int (*install)(struct nsset*, struct ns_common*);
  struct user_namespace* (*owner)(struct ns_common*);
  struct ns_common* (*get_parent)(struct ns_common*);
};

struct perf_guest_info_callbacks {
  int (*is_in_guest)();
  int (*is_user_mode)();
  long unsigned int (*get_guest_ip)();
  void (*handle_intel_pt_intr)();
};

struct perf_cpu_context;

struct perf_output_handle;

struct pmu {
  struct list_head entry;
  struct module* module;
  struct device* dev;
  const struct attribute_group** attr_groups;
  const struct attribute_group** attr_update;
  const char* name;
  int type;
  int capabilities;
  int* pmu_disable_count;
  struct perf_cpu_context* pmu_cpu_context;
  atomic_t exclusive_cnt;
  int task_ctx_nr;
  int hrtimer_interval_ms;
  unsigned int nr_addr_filters;
  void (*pmu_enable)(struct pmu*);
  void (*pmu_disable)(struct pmu*);
  int (*event_init)(struct perf_event*);
  void (*event_mapped)(struct perf_event*, struct mm_struct*);
  void (*event_unmapped)(struct perf_event*, struct mm_struct*);
  int (*add)(struct perf_event*, int);
  void (*del)(struct perf_event*, int);
  void (*start)(struct perf_event*, int);
  void (*stop)(struct perf_event*, int);
  void (*read)(struct perf_event*);
  void (*start_txn)(struct pmu*, unsigned int);
  int (*commit_txn)(struct pmu*);
  void (*cancel_txn)(struct pmu*);
  int (*event_idx)(struct perf_event*);
  void (*sched_task)(struct perf_event_context*, bool);
  struct kmem_cache* task_ctx_cache;
  void (*swap_task_ctx)(struct perf_event_context*, struct perf_event_context*);
  void* (*setup_aux)(struct perf_event*, void**, int, bool);
  void (*free_aux)(void*);
  long int (*snapshot_aux)(
      struct perf_event*,
      struct perf_output_handle*,
      long unsigned int);
  int (*addr_filters_validate)(struct list_head*);
  void (*addr_filters_sync)(struct perf_event*);
  int (*aux_output_match)(struct perf_event*);
  int (*filter_match)(struct perf_event*);
  int (*check_period)(struct perf_event*, u64);
};

struct ftrace_regs {
  struct pt_regs regs;
};

struct iovec {
  void* iov_base;
  __kernel_size_t iov_len;
};

struct kvec {
  void* iov_base;
  size_t iov_len;
};

enum ftrace_tracing_type_t {
  FTRACE_TYPE_ENTER = 0,
  FTRACE_TYPE_RETURN = 1,
};

enum ftrace_bug_type {
  FTRACE_BUG_UNKNOWN = 0,
  FTRACE_BUG_INIT = 1,
  FTRACE_BUG_NOP = 2,
  FTRACE_BUG_CALL = 3,
  FTRACE_BUG_UPDATE = 4,
};

struct ftrace_graph_ent {
  long unsigned int func;
  int depth;
} __attribute__((packed));

struct ftrace_graph_ret {
  long unsigned int func;
  int depth;
  unsigned int overrun;
  long long unsigned int calltime;
  long long unsigned int rettime;
};

typedef void (*trace_func_graph_ret_t)(struct ftrace_graph_ret*);

typedef int (*trace_func_graph_ent_t)(struct ftrace_graph_ent*);

struct perf_regs {
  __u64 abi;
  struct pt_regs* regs;
};

struct kernel_cpustat {
  u64 cpustat[10];
};

struct kernel_stat {
  long unsigned int irqs_sum;
  unsigned int softirqs[10];
};

struct u64_stats_sync {};

struct bpf_insn {
  __u8 code;
  __u8 dst_reg : 4;
  __u8 src_reg : 4;
  __s16 off;
  __s32 imm;
};

struct bpf_cgroup_storage_key {
  __u64 cgroup_inode_id;
  __u32 attach_type;
};

enum bpf_map_type {
  BPF_MAP_TYPE_UNSPEC = 0,
  BPF_MAP_TYPE_HASH = 1,
  BPF_MAP_TYPE_ARRAY = 2,
  BPF_MAP_TYPE_PROG_ARRAY = 3,
  BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
  BPF_MAP_TYPE_PERCPU_HASH = 5,
  BPF_MAP_TYPE_PERCPU_ARRAY = 6,
  BPF_MAP_TYPE_STACK_TRACE = 7,
  BPF_MAP_TYPE_CGROUP_ARRAY = 8,
  BPF_MAP_TYPE_LRU_HASH = 9,
  BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
  BPF_MAP_TYPE_LPM_TRIE = 11,
  BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
  BPF_MAP_TYPE_HASH_OF_MAPS = 13,
  BPF_MAP_TYPE_DEVMAP = 14,
  BPF_MAP_TYPE_SOCKMAP = 15,
  BPF_MAP_TYPE_CPUMAP = 16,
  BPF_MAP_TYPE_XSKMAP = 17,
  BPF_MAP_TYPE_SOCKHASH = 18,
  BPF_MAP_TYPE_CGROUP_STORAGE = 19,
  BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
  BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
  BPF_MAP_TYPE_QUEUE = 22,
  BPF_MAP_TYPE_STACK = 23,
  BPF_MAP_TYPE_SK_STORAGE = 24,
  BPF_MAP_TYPE_DEVMAP_HASH = 25,
  BPF_MAP_TYPE_STRUCT_OPS = 26,
  BPF_MAP_TYPE_RINGBUF = 27,
  BPF_MAP_TYPE_INODE_STORAGE = 28,
  BPF_MAP_TYPE_TASK_STORAGE = 29,
};

enum bpf_prog_type {
  BPF_PROG_TYPE_UNSPEC = 0,
  BPF_PROG_TYPE_SOCKET_FILTER = 1,
  BPF_PROG_TYPE_KPROBE = 2,
  BPF_PROG_TYPE_SCHED_CLS = 3,
  BPF_PROG_TYPE_SCHED_ACT = 4,
  BPF_PROG_TYPE_TRACEPOINT = 5,
  BPF_PROG_TYPE_XDP = 6,
  BPF_PROG_TYPE_PERF_EVENT = 7,
  BPF_PROG_TYPE_CGROUP_SKB = 8,
  BPF_PROG_TYPE_CGROUP_SOCK = 9,
  BPF_PROG_TYPE_LWT_IN = 10,
  BPF_PROG_TYPE_LWT_OUT = 11,
  BPF_PROG_TYPE_LWT_XMIT = 12,
  BPF_PROG_TYPE_SOCK_OPS = 13,
  BPF_PROG_TYPE_SK_SKB = 14,
  BPF_PROG_TYPE_CGROUP_DEVICE = 15,
  BPF_PROG_TYPE_SK_MSG = 16,
  BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
  BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
  BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
  BPF_PROG_TYPE_LIRC_MODE2 = 20,
  BPF_PROG_TYPE_SK_REUSEPORT = 21,
  BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
  BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
  BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
  BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
  BPF_PROG_TYPE_TRACING = 26,
  BPF_PROG_TYPE_STRUCT_OPS = 27,
  BPF_PROG_TYPE_EXT = 28,
  BPF_PROG_TYPE_LSM = 29,
  BPF_PROG_TYPE_SK_LOOKUP = 30,
  BPF_PROG_TYPE_SYSCALL = 31,
};

enum bpf_attach_type {
  BPF_CGROUP_INET_INGRESS = 0,
  BPF_CGROUP_INET_EGRESS = 1,
  BPF_CGROUP_INET_SOCK_CREATE = 2,
  BPF_CGROUP_SOCK_OPS = 3,
  BPF_SK_SKB_STREAM_PARSER = 4,
  BPF_SK_SKB_STREAM_VERDICT = 5,
  BPF_CGROUP_DEVICE = 6,
  BPF_SK_MSG_VERDICT = 7,
  BPF_CGROUP_INET4_BIND = 8,
  BPF_CGROUP_INET6_BIND = 9,
  BPF_CGROUP_INET4_CONNECT = 10,
  BPF_CGROUP_INET6_CONNECT = 11,
  BPF_CGROUP_INET4_POST_BIND = 12,
  BPF_CGROUP_INET6_POST_BIND = 13,
  BPF_CGROUP_UDP4_SENDMSG = 14,
  BPF_CGROUP_UDP6_SENDMSG = 15,
  BPF_LIRC_MODE2 = 16,
  BPF_FLOW_DISSECTOR = 17,
  BPF_CGROUP_SYSCTL = 18,
  BPF_CGROUP_UDP4_RECVMSG = 19,
  BPF_CGROUP_UDP6_RECVMSG = 20,
  BPF_CGROUP_GETSOCKOPT = 21,
  BPF_CGROUP_SETSOCKOPT = 22,
  BPF_TRACE_RAW_TP = 23,
  BPF_TRACE_FENTRY = 24,
  BPF_TRACE_FEXIT = 25,
  BPF_MODIFY_RETURN = 26,
  BPF_LSM_MAC = 27,
  BPF_TRACE_ITER = 28,
  BPF_CGROUP_INET4_GETPEERNAME = 29,
  BPF_CGROUP_INET6_GETPEERNAME = 30,
  BPF_CGROUP_INET4_GETSOCKNAME = 31,
  BPF_CGROUP_INET6_GETSOCKNAME = 32,
  BPF_XDP_DEVMAP = 33,
  BPF_CGROUP_INET_SOCK_RELEASE = 34,
  BPF_XDP_CPUMAP = 35,
  BPF_SK_LOOKUP = 36,
  BPF_XDP = 37,
  BPF_SK_SKB_VERDICT = 38,
  BPF_SK_REUSEPORT_SELECT = 39,
  BPF_SK_REUSEPORT_SELECT_OR_MIGRATE = 40,
  BPF_PERF_EVENT = 41,
  __MAX_BPF_ATTACH_TYPE = 42,
};

union bpf_attr {
  struct {
    __u32 map_type;
    __u32 key_size;
    __u32 value_size;
    __u32 max_entries;
    __u32 map_flags;
    __u32 inner_map_fd;
    __u32 numa_node;
    char map_name[16];
    __u32 map_ifindex;
    __u32 btf_fd;
    __u32 btf_key_type_id;
    __u32 btf_value_type_id;
    __u32 btf_vmlinux_value_type_id;
  };
  struct {
    __u32 map_fd;
    __u64 key;
    union {
      __u64 value;
      __u64 next_key;
    };
    __u64 flags;
  };
  struct {
    __u64 in_batch;
    __u64 out_batch;
    __u64 keys;
    __u64 values;
    __u32 count;
    __u32 map_fd;
    __u64 elem_flags;
    __u64 flags;
  } batch;
  struct {
    __u32 prog_type;
    __u32 insn_cnt;
    __u64 insns;
    __u64 license;
    __u32 log_level;
    __u32 log_size;
    __u64 log_buf;
    __u32 kern_version;
    __u32 prog_flags;
    char prog_name[16];
    __u32 prog_ifindex;
    __u32 expected_attach_type;
    __u32 prog_btf_fd;
    __u32 func_info_rec_size;
    __u64 func_info;
    __u32 func_info_cnt;
    __u32 line_info_rec_size;
    __u64 line_info;
    __u32 line_info_cnt;
    __u32 attach_btf_id;
    union {
      __u32 attach_prog_fd;
      __u32 attach_btf_obj_fd;
    };
    __u64 fd_array;
  };
  struct {
    __u64 pathname;
    __u32 bpf_fd;
    __u32 file_flags;
  };
  struct {
    __u32 target_fd;
    __u32 attach_bpf_fd;
    __u32 attach_type;
    __u32 attach_flags;
    __u32 replace_bpf_fd;
  };
  struct {
    __u32 prog_fd;
    __u32 retval;
    __u32 data_size_in;
    __u32 data_size_out;
    __u64 data_in;
    __u64 data_out;
    __u32 repeat;
    __u32 duration;
    __u32 ctx_size_in;
    __u32 ctx_size_out;
    __u64 ctx_in;
    __u64 ctx_out;
    __u32 flags;
    __u32 cpu;
  } test;
  struct {
    union {
      __u32 start_id;
      __u32 prog_id;
      __u32 map_id;
      __u32 btf_id;
      __u32 link_id;
    };
    __u32 next_id;
    __u32 open_flags;
  };
  struct {
    __u32 bpf_fd;
    __u32 info_len;
    __u64 info;
  } info;
  struct {
    __u32 target_fd;
    __u32 attach_type;
    __u32 query_flags;
    __u32 attach_flags;
    __u64 prog_ids;
    __u32 prog_cnt;
  } query;
  struct {
    __u64 name;
    __u32 prog_fd;
  } raw_tracepoint;
  struct {
    __u64 btf;
    __u64 btf_log_buf;
    __u32 btf_size;
    __u32 btf_log_size;
    __u32 btf_log_level;
  };
  struct {
    __u32 pid;
    __u32 fd;
    __u32 flags;
    __u32 buf_len;
    __u64 buf;
    __u32 prog_id;
    __u32 fd_type;
    __u64 probe_offset;
    __u64 probe_addr;
  } task_fd_query;
  struct {
    __u32 prog_fd;
    union {
      __u32 target_fd;
      __u32 target_ifindex;
    };
    __u32 attach_type;
    __u32 flags;
    union {
      __u32 target_btf_id;
      struct {
        __u64 iter_info;
        __u32 iter_info_len;
      };
      struct {
        __u64 bpf_cookie;
      } perf_event;
    };
  } link_create;
  struct {
    __u32 link_fd;
    __u32 new_prog_fd;
    __u32 flags;
    __u32 old_prog_fd;
  } link_update;
  struct {
    __u32 link_fd;
  } link_detach;
  struct {
    __u32 type;
  } enable_stats;
  struct {
    __u32 link_fd;
    __u32 flags;
  } iter_create;
  struct {
    __u32 prog_fd;
    __u32 map_fd;
    __u32 flags;
  } prog_bind_map;
};

enum bpf_func_id {
  BPF_FUNC_unspec = 0,
  BPF_FUNC_map_lookup_elem = 1,
  BPF_FUNC_map_update_elem = 2,
  BPF_FUNC_map_delete_elem = 3,
  BPF_FUNC_probe_read = 4,
  BPF_FUNC_ktime_get_ns = 5,
  BPF_FUNC_trace_printk = 6,
  BPF_FUNC_get_prandom_u32 = 7,
  BPF_FUNC_get_smp_processor_id = 8,
  BPF_FUNC_skb_store_bytes = 9,
  BPF_FUNC_l3_csum_replace = 10,
  BPF_FUNC_l4_csum_replace = 11,
  BPF_FUNC_tail_call = 12,
  BPF_FUNC_clone_redirect = 13,
  BPF_FUNC_get_current_pid_tgid = 14,
  BPF_FUNC_get_current_uid_gid = 15,
  BPF_FUNC_get_current_comm = 16,
  BPF_FUNC_get_cgroup_classid = 17,
  BPF_FUNC_skb_vlan_push = 18,
  BPF_FUNC_skb_vlan_pop = 19,
  BPF_FUNC_skb_get_tunnel_key = 20,
  BPF_FUNC_skb_set_tunnel_key = 21,
  BPF_FUNC_perf_event_read = 22,
  BPF_FUNC_redirect = 23,
  BPF_FUNC_get_route_realm = 24,
  BPF_FUNC_perf_event_output = 25,
  BPF_FUNC_skb_load_bytes = 26,
  BPF_FUNC_get_stackid = 27,
  BPF_FUNC_csum_diff = 28,
  BPF_FUNC_skb_get_tunnel_opt = 29,
  BPF_FUNC_skb_set_tunnel_opt = 30,
  BPF_FUNC_skb_change_proto = 31,
  BPF_FUNC_skb_change_type = 32,
  BPF_FUNC_skb_under_cgroup = 33,
  BPF_FUNC_get_hash_recalc = 34,
  BPF_FUNC_get_current_task = 35,
  BPF_FUNC_probe_write_user = 36,
  BPF_FUNC_current_task_under_cgroup = 37,
  BPF_FUNC_skb_change_tail = 38,
  BPF_FUNC_skb_pull_data = 39,
  BPF_FUNC_csum_update = 40,
  BPF_FUNC_set_hash_invalid = 41,
  BPF_FUNC_get_numa_node_id = 42,
  BPF_FUNC_skb_change_head = 43,
  BPF_FUNC_xdp_adjust_head = 44,
  BPF_FUNC_probe_read_str = 45,
  BPF_FUNC_get_socket_cookie = 46,
  BPF_FUNC_get_socket_uid = 47,
  BPF_FUNC_set_hash = 48,
  BPF_FUNC_setsockopt = 49,
  BPF_FUNC_skb_adjust_room = 50,
  BPF_FUNC_redirect_map = 51,
  BPF_FUNC_sk_redirect_map = 52,
  BPF_FUNC_sock_map_update = 53,
  BPF_FUNC_xdp_adjust_meta = 54,
  BPF_FUNC_perf_event_read_value = 55,
  BPF_FUNC_perf_prog_read_value = 56,
  BPF_FUNC_getsockopt = 57,
  BPF_FUNC_override_return = 58,
  BPF_FUNC_sock_ops_cb_flags_set = 59,
  BPF_FUNC_msg_redirect_map = 60,
  BPF_FUNC_msg_apply_bytes = 61,
  BPF_FUNC_msg_cork_bytes = 62,
  BPF_FUNC_msg_pull_data = 63,
  BPF_FUNC_bind = 64,
  BPF_FUNC_xdp_adjust_tail = 65,
  BPF_FUNC_skb_get_xfrm_state = 66,
  BPF_FUNC_get_stack = 67,
  BPF_FUNC_skb_load_bytes_relative = 68,
  BPF_FUNC_fib_lookup = 69,
  BPF_FUNC_sock_hash_update = 70,
  BPF_FUNC_msg_redirect_hash = 71,
  BPF_FUNC_sk_redirect_hash = 72,
  BPF_FUNC_lwt_push_encap = 73,
  BPF_FUNC_lwt_seg6_store_bytes = 74,
  BPF_FUNC_lwt_seg6_adjust_srh = 75,
  BPF_FUNC_lwt_seg6_action = 76,
  BPF_FUNC_rc_repeat = 77,
  BPF_FUNC_rc_keydown = 78,
  BPF_FUNC_skb_cgroup_id = 79,
  BPF_FUNC_get_current_cgroup_id = 80,
  BPF_FUNC_get_local_storage = 81,
  BPF_FUNC_sk_select_reuseport = 82,
  BPF_FUNC_skb_ancestor_cgroup_id = 83,
  BPF_FUNC_sk_lookup_tcp = 84,
  BPF_FUNC_sk_lookup_udp = 85,
  BPF_FUNC_sk_release = 86,
  BPF_FUNC_map_push_elem = 87,
  BPF_FUNC_map_pop_elem = 88,
  BPF_FUNC_map_peek_elem = 89,
  BPF_FUNC_msg_push_data = 90,
  BPF_FUNC_msg_pop_data = 91,
  BPF_FUNC_rc_pointer_rel = 92,
  BPF_FUNC_spin_lock = 93,
  BPF_FUNC_spin_unlock = 94,
  BPF_FUNC_sk_fullsock = 95,
  BPF_FUNC_tcp_sock = 96,
  BPF_FUNC_skb_ecn_set_ce = 97,
  BPF_FUNC_get_listener_sock = 98,
  BPF_FUNC_skc_lookup_tcp = 99,
  BPF_FUNC_tcp_check_syncookie = 100,
  BPF_FUNC_sysctl_get_name = 101,
  BPF_FUNC_sysctl_get_current_value = 102,
  BPF_FUNC_sysctl_get_new_value = 103,
  BPF_FUNC_sysctl_set_new_value = 104,
  BPF_FUNC_strtol = 105,
  BPF_FUNC_strtoul = 106,
  BPF_FUNC_sk_storage_get = 107,
  BPF_FUNC_sk_storage_delete = 108,
  BPF_FUNC_send_signal = 109,
  BPF_FUNC_tcp_gen_syncookie = 110,
  BPF_FUNC_skb_output = 111,
  BPF_FUNC_probe_read_user = 112,
  BPF_FUNC_probe_read_kernel = 113,
  BPF_FUNC_probe_read_user_str = 114,
  BPF_FUNC_probe_read_kernel_str = 115,
  BPF_FUNC_tcp_send_ack = 116,
  BPF_FUNC_send_signal_thread = 117,
  BPF_FUNC_jiffies64 = 118,
  BPF_FUNC_read_branch_records = 119,
  BPF_FUNC_get_ns_current_pid_tgid = 120,
  BPF_FUNC_xdp_output = 121,
  BPF_FUNC_get_netns_cookie = 122,
  BPF_FUNC_get_current_ancestor_cgroup_id = 123,
  BPF_FUNC_sk_assign = 124,
  BPF_FUNC_ktime_get_boot_ns = 125,
  BPF_FUNC_seq_printf = 126,
  BPF_FUNC_seq_write = 127,
  BPF_FUNC_sk_cgroup_id = 128,
  BPF_FUNC_sk_ancestor_cgroup_id = 129,
  BPF_FUNC_ringbuf_output = 130,
  BPF_FUNC_ringbuf_reserve = 131,
  BPF_FUNC_ringbuf_submit = 132,
  BPF_FUNC_ringbuf_discard = 133,
  BPF_FUNC_ringbuf_query = 134,
  BPF_FUNC_csum_level = 135,
  BPF_FUNC_skc_to_tcp6_sock = 136,
  BPF_FUNC_skc_to_tcp_sock = 137,
  BPF_FUNC_skc_to_tcp_timewait_sock = 138,
  BPF_FUNC_skc_to_tcp_request_sock = 139,
  BPF_FUNC_skc_to_udp6_sock = 140,
  BPF_FUNC_get_task_stack = 141,
  BPF_FUNC_load_hdr_opt = 142,
  BPF_FUNC_store_hdr_opt = 143,
  BPF_FUNC_reserve_hdr_opt = 144,
  BPF_FUNC_inode_storage_get = 145,
  BPF_FUNC_inode_storage_delete = 146,
  BPF_FUNC_d_path = 147,
  BPF_FUNC_copy_from_user = 148,
  BPF_FUNC_snprintf_btf = 149,
  BPF_FUNC_seq_printf_btf = 150,
  BPF_FUNC_skb_cgroup_classid = 151,
  BPF_FUNC_redirect_neigh = 152,
  BPF_FUNC_per_cpu_ptr = 153,
  BPF_FUNC_this_cpu_ptr = 154,
  BPF_FUNC_redirect_peer = 155,
  BPF_FUNC_task_storage_get = 156,
  BPF_FUNC_task_storage_delete = 157,
  BPF_FUNC_get_current_task_btf = 158,
  BPF_FUNC_bprm_opts_set = 159,
  BPF_FUNC_ktime_get_coarse_ns = 160,
  BPF_FUNC_ima_inode_hash = 161,
  BPF_FUNC_sock_from_file = 162,
  BPF_FUNC_check_mtu = 163,
  BPF_FUNC_for_each_map_elem = 164,
  BPF_FUNC_snprintf = 165,
  BPF_FUNC_sys_bpf = 166,
  BPF_FUNC_btf_find_by_name_kind = 167,
  BPF_FUNC_sys_close = 168,
  BPF_FUNC_timer_init = 169,
  BPF_FUNC_timer_set_callback = 170,
  BPF_FUNC_timer_start = 171,
  BPF_FUNC_timer_cancel = 172,
  BPF_FUNC_get_func_ip = 173,
  BPF_FUNC_get_attach_cookie = 174,
  BPF_FUNC_task_pt_regs = 175,
  BPF_FUNC_get_branch_snapshot = 176,
  BPF_FUNC_trace_vprintk = 177,
  __BPF_FUNC_MAX_ID = 178,
};

struct bpf_func_info {
  __u32 insn_off;
  __u32 type_id;
};

struct bpf_line_info {
  __u32 insn_off;
  __u32 file_name_off;
  __u32 line_off;
  __u32 line_col;
};

enum kmalloc_cache_type {
  KMALLOC_NORMAL = 0,
  KMALLOC_RECLAIM = 1,
  KMALLOC_DMA = 2,
  NR_KMALLOC_TYPES = 3,
};

typedef u64 (*bpf_callback_t)(u64, u64, u64, u64, u64);

struct bpf_iter_aux_info;

typedef int (*bpf_iter_init_seq_priv_t)(void*, struct bpf_iter_aux_info*);

struct bpf_map;

struct bpf_iter_aux_info {
  struct bpf_map* map;
};

typedef void (*bpf_iter_fini_seq_priv_t)(void*);

struct bpf_iter_seq_info {
  const struct seq_operations* seq_ops;
  bpf_iter_init_seq_priv_t init_seq_private;
  bpf_iter_fini_seq_priv_t fini_seq_private;
  u32 seq_priv_size;
};

struct btf;

struct btf_type;

struct bpf_prog_aux;

struct bpf_local_storage_map;

struct bpf_verifier_env;

struct bpf_func_state;

struct bpf_map_ops {
  int (*map_alloc_check)(union bpf_attr*);
  struct bpf_map* (*map_alloc)(union bpf_attr*);
  void (*map_release)(struct bpf_map*, struct file*);
  void (*map_free)(struct bpf_map*);
  int (*map_get_next_key)(struct bpf_map*, void*, void*);
  void (*map_release_uref)(struct bpf_map*);
  void* (*map_lookup_elem_sys_only)(struct bpf_map*, void*);
  int (*map_lookup_batch)(
      struct bpf_map*,
      const union bpf_attr*,
      union bpf_attr*);
  int (*map_lookup_and_delete_elem)(struct bpf_map*, void*, void*, u64);
  int (*map_lookup_and_delete_batch)(
      struct bpf_map*,
      const union bpf_attr*,
      union bpf_attr*);
  int (*map_update_batch)(
      struct bpf_map*,
      const union bpf_attr*,
      union bpf_attr*);
  int (*map_delete_batch)(
      struct bpf_map*,
      const union bpf_attr*,
      union bpf_attr*);
  void* (*map_lookup_elem)(struct bpf_map*, void*);
  int (*map_update_elem)(struct bpf_map*, void*, void*, u64);
  int (*map_delete_elem)(struct bpf_map*, void*);
  int (*map_push_elem)(struct bpf_map*, void*, u64);
  int (*map_pop_elem)(struct bpf_map*, void*);
  int (*map_peek_elem)(struct bpf_map*, void*);
  void* (*map_fd_get_ptr)(struct bpf_map*, struct file*, int);
  void (*map_fd_put_ptr)(void*);
  int (*map_gen_lookup)(struct bpf_map*, struct bpf_insn*);
  u32 (*map_fd_sys_lookup_elem)(void*);
  void (*map_seq_show_elem)(struct bpf_map*, void*, struct seq_file*);
  int (*map_check_btf)(
      const struct bpf_map*,
      const struct btf*,
      const struct btf_type*,
      const struct btf_type*);
  int (*map_poke_track)(struct bpf_map*, struct bpf_prog_aux*);
  void (*map_poke_untrack)(struct bpf_map*, struct bpf_prog_aux*);
  void (
      *map_poke_run)(struct bpf_map*, u32, struct bpf_prog*, struct bpf_prog*);
  int (*map_direct_value_addr)(const struct bpf_map*, u64*, u32);
  int (*map_direct_value_meta)(const struct bpf_map*, u64, u32*);
  int (*map_mmap)(struct bpf_map*, struct vm_area_struct*);
  __poll_t (
      *map_poll)(struct bpf_map*, struct file*, struct poll_table_struct*);
  int (*map_local_storage_charge)(struct bpf_local_storage_map*, void*, u32);
  void (*map_local_storage_uncharge)(struct bpf_local_storage_map*, void*, u32);
  struct bpf_local_storage** (*map_owner_storage_ptr)(void*);
  int (*map_redirect)(struct bpf_map*, u32, u64);
  bool (*map_meta_equal)(const struct bpf_map*, const struct bpf_map*);
  int (*map_set_for_each_callback_args)(
      struct bpf_verifier_env*,
      struct bpf_func_state*,
      struct bpf_func_state*);
  int (*map_for_each_callback)(struct bpf_map*, bpf_callback_t, void*, u64);
  const char* const map_btf_name;
  int* map_btf_id;
  const struct bpf_iter_seq_info* iter_seq_info;
};

struct bpf_map {
  const struct bpf_map_ops* ops;
  struct bpf_map* inner_map_meta;
  void* security;
  enum bpf_map_type map_type;
  u32 key_size;
  u32 value_size;
  u32 max_entries;
  u32 map_flags;
  int spin_lock_off;
  int timer_off;
  u32 id;
  int numa_node;
  u32 btf_key_type_id;
  u32 btf_value_type_id;
  struct btf* btf;
  struct mem_cgroup* memcg;
  char name[16];
  u32 btf_vmlinux_value_type_id;
  bool bypass_spec_v1;
  bool frozen;
  long : 16;
  long : 64;
  long : 64;
  atomic64_t refcnt;
  atomic64_t usercnt;
  struct work_struct work;
  struct mutex freeze_mutex;
  u64 writecnt;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct btf_header {
  __u16 magic;
  __u8 version;
  __u8 flags;
  __u32 hdr_len;
  __u32 type_off;
  __u32 type_len;
  __u32 str_off;
  __u32 str_len;
};

struct btf {
  void* data;
  struct btf_type** types;
  u32* resolved_ids;
  u32* resolved_sizes;
  const char* strings;
  void* nohdr_data;
  struct btf_header hdr;
  u32 nr_types;
  u32 types_size;
  u32 data_size;
  refcount_t refcnt;
  u32 id;
  struct callback_head rcu;
  struct btf* base_btf;
  u32 start_id;
  u32 start_str_off;
  char name[56];
  bool kernel_btf;
};

struct btf_type {
  __u32 name_off;
  __u32 info;
  union {
    __u32 size;
    __u32 type;
  };
};

struct bpf_ksym {
  long unsigned int start;
  long unsigned int end;
  char name[128];
  struct list_head lnode;
  struct latch_tree_node tnode;
  bool prog;
};

struct bpf_ctx_arg_aux;

struct bpf_trampoline;

struct bpf_jit_poke_descriptor;

struct bpf_kfunc_desc_tab;

struct bpf_kfunc_btf_tab;

struct bpf_prog_ops;

struct btf_mod_pair;

struct bpf_prog_offload;

struct bpf_func_info_aux;

struct bpf_prog_aux {
  atomic64_t refcnt;
  u32 used_map_cnt;
  u32 used_btf_cnt;
  u32 max_ctx_offset;
  u32 max_pkt_offset;
  u32 max_tp_access;
  u32 stack_depth;
  u32 id;
  u32 func_cnt;
  u32 func_idx;
  u32 attach_btf_id;
  u32 ctx_arg_info_size;
  u32 max_rdonly_access;
  u32 max_rdwr_access;
  struct btf* attach_btf;
  const struct bpf_ctx_arg_aux* ctx_arg_info;
  struct mutex dst_mutex;
  struct bpf_prog* dst_prog;
  struct bpf_trampoline* dst_trampoline;
  enum bpf_prog_type saved_dst_prog_type;
  enum bpf_attach_type saved_dst_attach_type;
  bool verifier_zext;
  bool offload_requested;
  bool attach_btf_trace;
  bool func_proto_unreliable;
  bool sleepable;
  bool tail_call_reachable;
  struct hlist_node tramp_hlist;
  const struct btf_type* attach_func_proto;
  const char* attach_func_name;
  struct bpf_prog** func;
  void* jit_data;
  struct bpf_jit_poke_descriptor* poke_tab;
  struct bpf_kfunc_desc_tab* kfunc_tab;
  struct bpf_kfunc_btf_tab* kfunc_btf_tab;
  u32 size_poke_tab;
  struct bpf_ksym ksym;
  const struct bpf_prog_ops* ops;
  struct bpf_map** used_maps;
  struct mutex used_maps_mutex;
  struct btf_mod_pair* used_btfs;
  struct bpf_prog* prog;
  struct user_struct* user;
  u64 load_time;
  struct bpf_map* cgroup_storage[2];
  char name[16];
  void* security;
  struct bpf_prog_offload* offload;
  struct btf* btf;
  struct bpf_func_info* func_info;
  struct bpf_func_info_aux* func_info_aux;
  struct bpf_line_info* linfo;
  void** jited_linfo;
  u32 func_info_cnt;
  u32 nr_linfo;
  u32 linfo_idx;
  u32 num_exentries;
  struct exception_table_entry* extable;
  union {
    struct work_struct work;
    struct callback_head rcu;
  };
};

struct sock_filter {
  __u16 code;
  __u8 jt;
  __u8 jf;
  __u32 k;
};

struct bpf_prog_stats;

struct sock_fprog_kern;

struct bpf_prog {
  u16 pages;
  u16 jited : 1;
  u16 jit_requested : 1;
  u16 gpl_compatible : 1;
  u16 cb_access : 1;
  u16 dst_needed : 1;
  u16 blinded : 1;
  u16 is_func : 1;
  u16 kprobe_override : 1;
  u16 has_callchain_buf : 1;
  u16 enforce_expected_attach_type : 1;
  u16 call_get_stack : 1;
  u16 call_get_func_ip : 1;
  enum bpf_prog_type type;
  enum bpf_attach_type expected_attach_type;
  u32 len;
  u32 jited_len;
  u8 tag[8];
  struct bpf_prog_stats* stats;
  int* active;
  unsigned int (*bpf_func)(const void*, const struct bpf_insn*);
  struct bpf_prog_aux* aux;
  struct sock_fprog_kern* orig_prog;
  struct sock_filter insns[0];
  struct bpf_insn insnsi[0];
};

enum bpf_arg_type {
  ARG_DONTCARE = 0,
  ARG_CONST_MAP_PTR = 1,
  ARG_PTR_TO_MAP_KEY = 2,
  ARG_PTR_TO_MAP_VALUE = 3,
  ARG_PTR_TO_UNINIT_MAP_VALUE = 4,
  ARG_PTR_TO_MAP_VALUE_OR_NULL = 5,
  ARG_PTR_TO_MEM = 6,
  ARG_PTR_TO_MEM_OR_NULL = 7,
  ARG_PTR_TO_UNINIT_MEM = 8,
  ARG_CONST_SIZE = 9,
  ARG_CONST_SIZE_OR_ZERO = 10,
  ARG_PTR_TO_CTX = 11,
  ARG_PTR_TO_CTX_OR_NULL = 12,
  ARG_ANYTHING = 13,
  ARG_PTR_TO_SPIN_LOCK = 14,
  ARG_PTR_TO_SOCK_COMMON = 15,
  ARG_PTR_TO_INT = 16,
  ARG_PTR_TO_LONG = 17,
  ARG_PTR_TO_SOCKET = 18,
  ARG_PTR_TO_SOCKET_OR_NULL = 19,
  ARG_PTR_TO_BTF_ID = 20,
  ARG_PTR_TO_ALLOC_MEM = 21,
  ARG_PTR_TO_ALLOC_MEM_OR_NULL = 22,
  ARG_CONST_ALLOC_SIZE_OR_ZERO = 23,
  ARG_PTR_TO_BTF_ID_SOCK_COMMON = 24,
  ARG_PTR_TO_PERCPU_BTF_ID = 25,
  ARG_PTR_TO_FUNC = 26,
  ARG_PTR_TO_STACK_OR_NULL = 27,
  ARG_PTR_TO_CONST_STR = 28,
  ARG_PTR_TO_TIMER = 29,
  __BPF_ARG_TYPE_MAX = 30,
};

enum bpf_return_type {
  RET_INTEGER = 0,
  RET_VOID = 1,
  RET_PTR_TO_MAP_VALUE = 2,
  RET_PTR_TO_MAP_VALUE_OR_NULL = 3,
  RET_PTR_TO_SOCKET_OR_NULL = 4,
  RET_PTR_TO_TCP_SOCK_OR_NULL = 5,
  RET_PTR_TO_SOCK_COMMON_OR_NULL = 6,
  RET_PTR_TO_ALLOC_MEM_OR_NULL = 7,
  RET_PTR_TO_BTF_ID_OR_NULL = 8,
  RET_PTR_TO_MEM_OR_BTF_ID_OR_NULL = 9,
  RET_PTR_TO_MEM_OR_BTF_ID = 10,
  RET_PTR_TO_BTF_ID = 11,
};

struct bpf_func_proto {
  u64 (*func)(u64, u64, u64, u64, u64);
  bool gpl_only;
  bool pkt_access;
  enum bpf_return_type ret_type;
  union {
    struct {
      enum bpf_arg_type arg1_type;
      enum bpf_arg_type arg2_type;
      enum bpf_arg_type arg3_type;
      enum bpf_arg_type arg4_type;
      enum bpf_arg_type arg5_type;
    };
    enum bpf_arg_type arg_type[5];
  };
  union {
    struct {
      u32* arg1_btf_id;
      u32* arg2_btf_id;
      u32* arg3_btf_id;
      u32* arg4_btf_id;
      u32* arg5_btf_id;
    };
    u32* arg_btf_id[5];
  };
  int* ret_btf_id;
  bool (*allowed)(const struct bpf_prog*);
};

enum bpf_access_type {
  BPF_READ = 1,
  BPF_WRITE = 2,
};

enum bpf_reg_type {
  NOT_INIT = 0,
  SCALAR_VALUE = 1,
  PTR_TO_CTX = 2,
  CONST_PTR_TO_MAP = 3,
  PTR_TO_MAP_VALUE = 4,
  PTR_TO_MAP_VALUE_OR_NULL = 5,
  PTR_TO_STACK = 6,
  PTR_TO_PACKET_META = 7,
  PTR_TO_PACKET = 8,
  PTR_TO_PACKET_END = 9,
  PTR_TO_FLOW_KEYS = 10,
  PTR_TO_SOCKET = 11,
  PTR_TO_SOCKET_OR_NULL = 12,
  PTR_TO_SOCK_COMMON = 13,
  PTR_TO_SOCK_COMMON_OR_NULL = 14,
  PTR_TO_TCP_SOCK = 15,
  PTR_TO_TCP_SOCK_OR_NULL = 16,
  PTR_TO_TP_BUFFER = 17,
  PTR_TO_XDP_SOCK = 18,
  PTR_TO_BTF_ID = 19,
  PTR_TO_BTF_ID_OR_NULL = 20,
  PTR_TO_MEM = 21,
  PTR_TO_MEM_OR_NULL = 22,
  PTR_TO_RDONLY_BUF = 23,
  PTR_TO_RDONLY_BUF_OR_NULL = 24,
  PTR_TO_RDWR_BUF = 25,
  PTR_TO_RDWR_BUF_OR_NULL = 26,
  PTR_TO_PERCPU_BTF_ID = 27,
  PTR_TO_FUNC = 28,
  PTR_TO_MAP_KEY = 29,
  __BPF_REG_TYPE_MAX = 30,
};

struct bpf_verifier_log;

struct bpf_insn_access_aux {
  enum bpf_reg_type reg_type;
  union {
    int ctx_field_size;
    struct {
      struct btf* btf;
      u32 btf_id;
    };
  };
  struct bpf_verifier_log* log;
};

struct bpf_prog_ops {
  int (*test_run)(struct bpf_prog*, const union bpf_attr*, union bpf_attr*);
};

struct bpf_verifier_ops {
  const struct bpf_func_proto* (
      *get_func_proto)(enum bpf_func_id, const struct bpf_prog*);
  bool (*is_valid_access)(
      int,
      int,
      enum bpf_access_type,
      const struct bpf_prog*,
      struct bpf_insn_access_aux*);
  int (*gen_prologue)(struct bpf_insn*, bool, const struct bpf_prog*);
  int (*gen_ld_abs)(const struct bpf_insn*, struct bpf_insn*);
  u32 (*convert_ctx_access)(
      enum bpf_access_type,
      const struct bpf_insn*,
      struct bpf_insn*,
      struct bpf_prog*,
      u32*);
  int (*btf_struct_access)(
      struct bpf_verifier_log*,
      const struct btf*,
      const struct btf_type*,
      int,
      int,
      enum bpf_access_type,
      u32*);
  bool (*check_kfunc_call)(u32, struct module*);
};

struct net_device;

struct bpf_offload_dev;

struct bpf_prog_offload {
  struct bpf_prog* prog;
  struct net_device* netdev;
  struct bpf_offload_dev* offdev;
  void* dev_priv;
  struct list_head offloads;
  bool dev_state;
  bool opt_failed;
  void* jited_image;
  u32 jited_len;
};

struct btf_func_model {
  u8 ret_size;
  u8 nr_args;
  u8 arg_size[12];
};

struct bpf_tramp_image {
  void* image;
  struct bpf_ksym ksym;
  struct percpu_ref pcref;
  void* ip_after_call;
  void* ip_epilogue;
  union {
    struct callback_head rcu;
    struct work_struct work;
  };
};

struct bpf_trampoline {
  struct hlist_node hlist;
  struct mutex mutex;
  refcount_t refcnt;
  u64 key;
  struct {
    struct btf_func_model model;
    void* addr;
    bool ftrace_managed;
  } func;
  struct bpf_prog* extension_prog;
  struct hlist_head progs_hlist[3];
  int progs_cnt[3];
  struct bpf_tramp_image* cur_image;
  u64 selector;
  struct module* mod;
};

struct bpf_func_info_aux {
  u16 linkage;
  bool unreliable;
};

struct bpf_jit_poke_descriptor {
  void* tailcall_target;
  void* tailcall_bypass;
  void* bypass_addr;
  void* aux;
  union {
    struct {
      struct bpf_map* map;
      u32 key;
    } tail_call;
  };
  bool tailcall_target_stable;
  u8 adj_off;
  u16 reason;
  u32 insn_idx;
};

struct bpf_ctx_arg_aux {
  u32 offset;
  enum bpf_reg_type reg_type;
  u32 btf_id;
};

struct btf_mod_pair {
  struct btf* btf;
  struct module* module;
};

struct bpf_storage_buffer;

struct bpf_cgroup_storage_map;

struct bpf_cgroup_storage {
  union {
    struct bpf_storage_buffer* buf;
    void* percpu_buf;
  };
  struct bpf_cgroup_storage_map* map;
  struct bpf_cgroup_storage_key key;
  struct list_head list_map;
  struct list_head list_cg;
  struct rb_node node;
  struct callback_head rcu;
};

struct bpf_prog_array_item {
  struct bpf_prog* prog;
  union {
    struct bpf_cgroup_storage* cgroup_storage[2];
    u64 bpf_cookie;
  };
};

struct bpf_prog_array {
  struct callback_head rcu;
  struct bpf_prog_array_item items[0];
};

struct bpf_storage_buffer {
  struct callback_head rcu;
  char data[0];
};

struct psi_group_cpu {
  seqcount_t seq;
  unsigned int tasks[4];
  u32 state_mask;
  u32 times[7];
  u64 state_start;
  u32 times_prev[14];
  long : 64;
};

struct cgroup_taskset;

struct cftype;

struct cgroup_subsys {
  struct cgroup_subsys_state* (*css_alloc)(struct cgroup_subsys_state*);
  int (*css_online)(struct cgroup_subsys_state*);
  void (*css_offline)(struct cgroup_subsys_state*);
  void (*css_released)(struct cgroup_subsys_state*);
  void (*css_free)(struct cgroup_subsys_state*);
  void (*css_reset)(struct cgroup_subsys_state*);
  void (*css_rstat_flush)(struct cgroup_subsys_state*, int);
  int (*css_extra_stat_show)(struct seq_file*, struct cgroup_subsys_state*);
  int (*can_attach)(struct cgroup_taskset*);
  void (*cancel_attach)(struct cgroup_taskset*);
  void (*attach)(struct cgroup_taskset*);
  void (*post_attach)();
  int (*can_fork)(struct task_struct*, struct css_set*);
  void (*cancel_fork)(struct task_struct*, struct css_set*);
  void (*fork)(struct task_struct*);
  void (*exit)(struct task_struct*);
  void (*release)(struct task_struct*);
  void (*bind)(struct cgroup_subsys_state*);
  bool early_init : 1;
  bool implicit_on_dfl : 1;
  bool threaded : 1;
  int id;
  const char* name;
  const char* legacy_name;
  struct cgroup_root* root;
  struct idr css_idr;
  struct list_head cfts;
  struct cftype* dfl_cftypes;
  struct cftype* legacy_cftypes;
  unsigned int depends_on;
};

struct cgroup_rstat_cpu {
  struct u64_stats_sync bsync;
  struct cgroup_base_stat bstat;
  struct cgroup_base_stat last_bstat;
  struct cgroup* updated_children;
  struct cgroup* updated_next;
};

struct cgroup_root {
  struct kernfs_root* kf_root;
  unsigned int subsys_mask;
  int hierarchy_id;
  struct cgroup cgrp;
  u64 cgrp_ancestor_id_storage;
  atomic_t nr_cgrps;
  struct list_head root_list;
  unsigned int flags;
  char release_agent_path[4096];
  char name[64];
};

struct cftype {
  char name[64];
  long unsigned int private;
  size_t max_write_len;
  unsigned int flags;
  unsigned int file_offset;
  struct cgroup_subsys* ss;
  struct list_head node;
  struct kernfs_ops* kf_ops;
  int (*open)(struct kernfs_open_file*);
  void (*release)(struct kernfs_open_file*);
  u64 (*read_u64)(struct cgroup_subsys_state*, struct cftype*);
  s64 (*read_s64)(struct cgroup_subsys_state*, struct cftype*);
  int (*seq_show)(struct seq_file*, void*);
  void* (*seq_start)(struct seq_file*, loff_t*);
  void* (*seq_next)(struct seq_file*, void*, loff_t*);
  void (*seq_stop)(struct seq_file*, void*);
  int (*write_u64)(struct cgroup_subsys_state*, struct cftype*, u64);
  int (*write_s64)(struct cgroup_subsys_state*, struct cftype*, s64);
  ssize_t (*write)(struct kernfs_open_file*, char*, size_t, loff_t);
  __poll_t (*poll)(struct kernfs_open_file*, struct poll_table_struct*);
};

struct perf_callchain_entry {
  __u64 nr;
  __u64 ip[0];
};

typedef long unsigned int (
    *perf_copy_f)(void*, const void*, long unsigned int, long unsigned int);

struct perf_raw_frag {
  union {
    struct perf_raw_frag* next;
    long unsigned int pad;
  };
  perf_copy_f copy;
  void* data;
  u32 size;
} __attribute__((packed));

struct perf_raw_record {
  struct perf_raw_frag frag;
  u32 size;
};

struct perf_branch_stack {
  __u64 nr;
  __u64 hw_idx;
  struct perf_branch_entry entries[0];
};

struct perf_cpu_context {
  struct perf_event_context ctx;
  struct perf_event_context* task_ctx;
  int active_oncpu;
  int exclusive;
  raw_spinlock_t hrtimer_lock;
  struct hrtimer hrtimer;
  ktime_t hrtimer_interval;
  unsigned int hrtimer_active;
  struct perf_cgroup* cgrp;
  struct list_head cgrp_cpuctx_entry;
  struct list_head sched_cb_entry;
  int sched_cb_usage;
  int online;
  int heap_size;
  struct perf_event** heap;
  struct perf_event* heap_default[2];
};

struct perf_output_handle {
  struct perf_event* event;
  struct perf_buffer* rb;
  long unsigned int wakeup;
  long unsigned int size;
  u64 aux_flags;
  union {
    void* addr;
    long unsigned int head;
  };
  int page;
};

struct perf_addr_filter_range {
  long unsigned int start;
  long unsigned int size;
};

struct perf_sample_data {
  u64 addr;
  struct perf_raw_record* raw;
  struct perf_branch_stack* br_stack;
  u64 period;
  union perf_sample_weight weight;
  u64 txn;
  union perf_mem_data_src data_src;
  u64 type;
  u64 ip;
  struct {
    u32 pid;
    u32 tid;
  } tid_entry;
  u64 time;
  u64 id;
  u64 stream_id;
  struct {
    u32 cpu;
    u32 reserved;
  } cpu_entry;
  struct perf_callchain_entry* callchain;
  u64 aux_size;
  struct perf_regs regs_user;
  struct perf_regs regs_intr;
  u64 stack_user_size;
  u64 phys_addr;
  u64 cgroup;
  u64 data_page_size;
  u64 code_page_size;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct perf_cgroup_info;

struct perf_cgroup {
  struct cgroup_subsys_state css;
  struct perf_cgroup_info* info;
};

struct perf_cgroup_info {
  u64 time;
  u64 timestamp;
};

struct trace_entry {
  short unsigned int type;
  unsigned char flags;
  unsigned char preempt_count;
  int pid;
};

struct trace_array;

struct tracer;

struct array_buffer;

struct ring_buffer_iter;

struct trace_iterator {
  struct trace_array* tr;
  struct tracer* trace;
  struct array_buffer* array_buffer;
  void* private;
  int cpu_file;
  struct mutex mutex;
  struct ring_buffer_iter** buffer_iter;
  long unsigned int iter_flags;
  void* temp;
  unsigned int temp_size;
  char* fmt;
  unsigned int fmt_size;
  struct trace_seq tmp_seq;
  cpumask_var_t started;
  bool snapshot;
  struct trace_seq seq;
  struct trace_entry* ent;
  long unsigned int lost_events;
  int leftover;
  int ent_size;
  int cpu;
  u64 ts;
  loff_t pos;
  long int idx;
};

enum print_line_t {
  TRACE_TYPE_PARTIAL_LINE = 0,
  TRACE_TYPE_HANDLED = 1,
  TRACE_TYPE_UNHANDLED = 2,
  TRACE_TYPE_NO_CONSUME = 3,
};

typedef enum print_line_t (
    *trace_print_func)(struct trace_iterator*, int, struct trace_event*);

struct trace_event_functions {
  trace_print_func trace;
  trace_print_func raw;
  trace_print_func hex;
  trace_print_func binary;
};

enum trace_reg {
  TRACE_REG_REGISTER = 0,
  TRACE_REG_UNREGISTER = 1,
  TRACE_REG_PERF_REGISTER = 2,
  TRACE_REG_PERF_UNREGISTER = 3,
  TRACE_REG_PERF_OPEN = 4,
  TRACE_REG_PERF_CLOSE = 5,
  TRACE_REG_PERF_ADD = 6,
  TRACE_REG_PERF_DEL = 7,
};

struct trace_event_fields {
  const char* type;
  union {
    struct {
      const char* name;
      const int size;
      const int align;
      const int is_signed;
      const int filter_type;
    };
    int (*define_fields)(struct trace_event_call*);
  };
};

struct trace_event_class {
  const char* system;
  void* probe;
  void* perf_probe;
  int (*reg)(struct trace_event_call*, enum trace_reg, void*);
  struct trace_event_fields* fields_array;
  struct list_head* (*get_fields)(struct trace_event_call*);
  struct list_head fields;
  int (*raw_init)(struct trace_event_call*);
};

struct trace_buffer;

struct trace_event_file;

struct trace_event_buffer {
  struct trace_buffer* buffer;
  struct ring_buffer_event* event;
  struct trace_event_file* trace_file;
  void* entry;
  unsigned int trace_ctx;
  struct pt_regs* regs;
};

struct trace_subsystem_dir;

struct trace_event_file {
  struct list_head list;
  struct trace_event_call* event_call;
  struct event_filter* filter;
  struct dentry* dir;
  struct trace_array* tr;
  struct trace_subsystem_dir* system;
  struct list_head triggers;
  long unsigned int flags;
  atomic_t sm_ref;
  atomic_t tm_ref;
};

enum {
  TRACE_EVENT_FL_FILTERED_BIT = 0,
  TRACE_EVENT_FL_CAP_ANY_BIT = 1,
  TRACE_EVENT_FL_NO_SET_FILTER_BIT = 2,
  TRACE_EVENT_FL_IGNORE_ENABLE_BIT = 3,
  TRACE_EVENT_FL_TRACEPOINT_BIT = 4,
  TRACE_EVENT_FL_KPROBE_BIT = 5,
  TRACE_EVENT_FL_UPROBE_BIT = 6,
};

enum {
  TRACE_EVENT_FL_FILTERED = 1,
  TRACE_EVENT_FL_CAP_ANY = 2,
  TRACE_EVENT_FL_NO_SET_FILTER = 4,
  TRACE_EVENT_FL_IGNORE_ENABLE = 8,
  TRACE_EVENT_FL_TRACEPOINT = 16,
  TRACE_EVENT_FL_KPROBE = 32,
  TRACE_EVENT_FL_UPROBE = 64,
};

enum {
  EVENT_FILE_FL_ENABLED_BIT = 0,
  EVENT_FILE_FL_RECORDED_CMD_BIT = 1,
  EVENT_FILE_FL_RECORDED_TGID_BIT = 2,
  EVENT_FILE_FL_FILTERED_BIT = 3,
  EVENT_FILE_FL_NO_SET_FILTER_BIT = 4,
  EVENT_FILE_FL_SOFT_MODE_BIT = 5,
  EVENT_FILE_FL_SOFT_DISABLED_BIT = 6,
  EVENT_FILE_FL_TRIGGER_MODE_BIT = 7,
  EVENT_FILE_FL_TRIGGER_COND_BIT = 8,
  EVENT_FILE_FL_PID_FILTER_BIT = 9,
  EVENT_FILE_FL_WAS_ENABLED_BIT = 10,
};

enum {
  EVENT_FILE_FL_ENABLED = 1,
  EVENT_FILE_FL_RECORDED_CMD = 2,
  EVENT_FILE_FL_RECORDED_TGID = 4,
  EVENT_FILE_FL_FILTERED = 8,
  EVENT_FILE_FL_NO_SET_FILTER = 16,
  EVENT_FILE_FL_SOFT_MODE = 32,
  EVENT_FILE_FL_SOFT_DISABLED = 64,
  EVENT_FILE_FL_TRIGGER_MODE = 128,
  EVENT_FILE_FL_TRIGGER_COND = 256,
  EVENT_FILE_FL_PID_FILTER = 512,
  EVENT_FILE_FL_WAS_ENABLED = 1024,
};

enum {
  FILTER_OTHER = 0,
  FILTER_STATIC_STRING = 1,
  FILTER_DYN_STRING = 2,
  FILTER_PTR_STRING = 3,
  FILTER_TRACE_FN = 4,
  FILTER_COMM = 5,
  FILTER_CPU = 6,
};

struct property {
  char* name;
  int length;
  void* value;
  struct property* next;
};

struct irq_fwspec {
  struct fwnode_handle* fwnode;
  int param_count;
  u32 param[16];
};

struct irq_data;

struct irq_domain_ops {
  int (*match)(
      struct irq_domain*,
      struct device_node*,
      enum irq_domain_bus_token);
  int (*select)(
      struct irq_domain*,
      struct irq_fwspec*,
      enum irq_domain_bus_token);
  int (*map)(struct irq_domain*, unsigned int, irq_hw_number_t);
  void (*unmap)(struct irq_domain*, unsigned int);
  int (*xlate)(
      struct irq_domain*,
      struct device_node*,
      const u32*,
      unsigned int,
      long unsigned int*,
      unsigned int*);
  int (*alloc)(struct irq_domain*, unsigned int, unsigned int, void*);
  void (*free)(struct irq_domain*, unsigned int, unsigned int);
  int (*activate)(struct irq_domain*, struct irq_data*, bool);
  void (*deactivate)(struct irq_domain*, struct irq_data*);
  int (*translate)(
      struct irq_domain*,
      struct irq_fwspec*,
      long unsigned int*,
      unsigned int*);
};

struct acpi_table_header {
  char signature[4];
  u32 length;
  u8 revision;
  u8 checksum;
  char oem_id[6];
  char oem_table_id[8];
  u32 oem_revision;
  char asl_compiler_id[4];
  u32 asl_compiler_revision;
};

struct acpi_generic_address {
  u8 space_id;
  u8 bit_width;
  u8 bit_offset;
  u8 access_width;
  u64 address;
} __attribute__((packed));

struct acpi_table_fadt {
  struct acpi_table_header header;
  u32 facs;
  u32 dsdt;
  u8 model;
  u8 preferred_profile;
  u16 sci_interrupt;
  u32 smi_command;
  u8 acpi_enable;
  u8 acpi_disable;
  u8 s4_bios_request;
  u8 pstate_control;
  u32 pm1a_event_block;
  u32 pm1b_event_block;
  u32 pm1a_control_block;
  u32 pm1b_control_block;
  u32 pm2_control_block;
  u32 pm_timer_block;
  u32 gpe0_block;
  u32 gpe1_block;
  u8 pm1_event_length;
  u8 pm1_control_length;
  u8 pm2_control_length;
  u8 pm_timer_length;
  u8 gpe0_block_length;
  u8 gpe1_block_length;
  u8 gpe1_base;
  u8 cst_control;
  u16 c2_latency;
  u16 c3_latency;
  u16 flush_size;
  u16 flush_stride;
  u8 duty_offset;
  u8 duty_width;
  u8 day_alarm;
  u8 month_alarm;
  u8 century;
  u16 boot_flags;
  u8 reserved;
  u32 flags;
  struct acpi_generic_address reset_register;
  u8 reset_value;
  u16 arm_boot_flags;
  u8 minor_revision;
  u64 Xfacs;
  u64 Xdsdt;
  struct acpi_generic_address xpm1a_event_block;
  struct acpi_generic_address xpm1b_event_block;
  struct acpi_generic_address xpm1a_control_block;
  struct acpi_generic_address xpm1b_control_block;
  struct acpi_generic_address xpm2_control_block;
  struct acpi_generic_address xpm_timer_block;
  struct acpi_generic_address xgpe0_block;
  struct acpi_generic_address xgpe1_block;
  struct acpi_generic_address sleep_control;
  struct acpi_generic_address sleep_status;
  u64 hypervisor_id;
} __attribute__((packed));

enum acpi_irq_model_id {
  ACPI_IRQ_MODEL_PIC = 0,
  ACPI_IRQ_MODEL_IOAPIC = 1,
  ACPI_IRQ_MODEL_IOSAPIC = 2,
  ACPI_IRQ_MODEL_PLATFORM = 3,
  ACPI_IRQ_MODEL_GIC = 4,
  ACPI_IRQ_MODEL_COUNT = 5,
};

enum con_scroll {
  SM_UP = 0,
  SM_DOWN = 1,
};

enum vc_intensity {
  VCI_HALF_BRIGHT = 0,
  VCI_NORMAL = 1,
  VCI_BOLD = 2,
  VCI_MASK = 3,
};

struct vc_data;

struct console_font;

struct consw {
  struct module* owner;
  const char* (*con_startup)();
  void (*con_init)(struct vc_data*, int);
  void (*con_deinit)(struct vc_data*);
  void (*con_clear)(struct vc_data*, int, int, int, int);
  void (*con_putc)(struct vc_data*, int, int, int);
  void (*con_putcs)(struct vc_data*, const short unsigned int*, int, int, int);
  void (*con_cursor)(struct vc_data*, int);
  bool (*con_scroll)(
      struct vc_data*,
      unsigned int,
      unsigned int,
      enum con_scroll,
      unsigned int);
  int (*con_switch)(struct vc_data*);
  int (*con_blank)(struct vc_data*, int, int);
  int (*con_font_set)(struct vc_data*, struct console_font*, unsigned int);
  int (*con_font_get)(struct vc_data*, struct console_font*);
  int (*con_font_default)(struct vc_data*, struct console_font*, char*);
  int (*con_resize)(struct vc_data*, unsigned int, unsigned int, unsigned int);
  void (*con_set_palette)(struct vc_data*, const unsigned char*);
  void (*con_scrolldelta)(struct vc_data*, int);
  int (*con_set_origin)(struct vc_data*);
  void (*con_save_screen)(struct vc_data*);
  u8 (*con_build_attr)(
      struct vc_data*,
      u8,
      enum vc_intensity,
      bool,
      bool,
      bool,
      bool);
  void (*con_invert_region)(struct vc_data*, u16*, int);
  u16* (*con_screen_pos)(const struct vc_data*, int);
  long unsigned int (
      *con_getxy)(struct vc_data*, long unsigned int, int*, int*);
  void (*con_flush_scrollback)(struct vc_data*);
  int (*con_debug_enter)(struct vc_data*);
  int (*con_debug_leave)(struct vc_data*);
};

struct tty_buffer {
  union {
    struct tty_buffer* next;
    struct llist_node free;
  };
  int used;
  int size;
  int commit;
  int read;
  int flags;
  long unsigned int data[0];
};

struct tty_bufhead {
  struct tty_buffer* head;
  struct work_struct work;
  struct mutex lock;
  atomic_t priority;
  struct tty_buffer sentinel;
  struct llist_head free;
  atomic_t mem_used;
  int mem_limit;
  struct tty_buffer* tail;
};

struct tty_port_operations;

struct tty_port_client_operations;

struct tty_port {
  struct tty_bufhead buf;
  struct tty_struct* tty;
  struct tty_struct* itty;
  const struct tty_port_operations* ops;
  const struct tty_port_client_operations* client_ops;
  spinlock_t lock;
  int blocked_open;
  int count;
  wait_queue_head_t open_wait;
  wait_queue_head_t delta_msr_wait;
  long unsigned int flags;
  long unsigned int iflags;
  unsigned char console : 1;
  struct mutex mutex;
  struct mutex buf_mutex;
  unsigned char* xmit_buf;
  unsigned int close_delay;
  unsigned int closing_wait;
  int drain_delay;
  struct kref kref;
  void* client_data;
};

struct vc_state {
  unsigned int x;
  unsigned int y;
  unsigned char color;
  unsigned char Gx_charset[2];
  unsigned int charset : 1;
  enum vc_intensity intensity;
  bool italic;
  bool underline;
  bool blink;
  bool reverse;
};

struct console_font {
  unsigned int width;
  unsigned int height;
  unsigned int charcount;
  unsigned char* data;
};

struct vt_mode {
  char mode;
  char waitv;
  short int relsig;
  short int acqsig;
  short int frsig;
};

struct uni_pagedir;

struct uni_screen;

struct vc_data {
  struct tty_port port;
  struct vc_state state;
  struct vc_state saved_state;
  short unsigned int vc_num;
  unsigned int vc_cols;
  unsigned int vc_rows;
  unsigned int vc_size_row;
  unsigned int vc_scan_lines;
  long unsigned int vc_origin;
  long unsigned int vc_scr_end;
  long unsigned int vc_visible_origin;
  unsigned int vc_top;
  unsigned int vc_bottom;
  const struct consw* vc_sw;
  short unsigned int* vc_screenbuf;
  unsigned int vc_screenbuf_size;
  unsigned char vc_mode;
  unsigned char vc_attr;
  unsigned char vc_def_color;
  unsigned char vc_ulcolor;
  unsigned char vc_itcolor;
  unsigned char vc_halfcolor;
  unsigned int vc_cursor_type;
  short unsigned int vc_complement_mask;
  short unsigned int vc_s_complement_mask;
  long unsigned int vc_pos;
  short unsigned int vc_hi_font_mask;
  struct console_font vc_font;
  short unsigned int vc_video_erase_char;
  unsigned int vc_state;
  unsigned int vc_npar;
  unsigned int vc_par[16];
  struct vt_mode vt_mode;
  struct pid* vt_pid;
  int vt_newvt;
  wait_queue_head_t paste_wait;
  unsigned int vc_disp_ctrl : 1;
  unsigned int vc_toggle_meta : 1;
  unsigned int vc_decscnm : 1;
  unsigned int vc_decom : 1;
  unsigned int vc_decawm : 1;
  unsigned int vc_deccm : 1;
  unsigned int vc_decim : 1;
  unsigned int vc_priv : 3;
  unsigned int vc_need_wrap : 1;
  unsigned int vc_can_do_color : 1;
  unsigned int vc_report_mouse : 2;
  unsigned char vc_utf : 1;
  unsigned char vc_utf_count;
  int vc_utf_char;
  long unsigned int vc_tab_stop[4];
  unsigned char vc_palette[48];
  short unsigned int* vc_translate;
  unsigned int vc_resize_user;
  unsigned int vc_bell_pitch;
  unsigned int vc_bell_duration;
  short unsigned int vc_cur_blink_ms;
  struct vc_data** vc_display_fg;
  struct uni_pagedir* vc_uni_pagedir;
  struct uni_pagedir** vc_uni_pagedir_loc;
  struct uni_screen* vc_uni_screen;
};

struct tty_driver;

struct console {
  char name[16];
  void (*write)(struct console*, const char*, unsigned int);
  int (*read)(struct console*, char*, unsigned int);
  struct tty_driver* (*device)(struct console*, int*);
  void (*unblank)();
  int (*setup)(struct console*, char*);
  int (*exit)(struct console*);
  int (*match)(struct console*, char*, int, char*);
  short int flags;
  short int index;
  int cflag;
  void* data;
  struct console* next;
};

typedef u8 kprobe_opcode_t;

struct arch_specific_insn {
  kprobe_opcode_t* insn;
  unsigned int boostable : 1;
  unsigned int if_modifier : 1;
  unsigned int is_call : 1;
  unsigned int is_pushf : 1;
  unsigned int is_abs_ip : 1;
  int tp_len;
};

struct kprobe;

struct prev_kprobe {
  struct kprobe* kp;
  long unsigned int status;
  long unsigned int old_flags;
  long unsigned int saved_flags;
};

typedef int (*kprobe_pre_handler_t)(struct kprobe*, struct pt_regs*);

typedef void (
    *kprobe_post_handler_t)(struct kprobe*, struct pt_regs*, long unsigned int);

struct kprobe {
  struct hlist_node hlist;
  struct list_head list;
  long unsigned int nmissed;
  kprobe_opcode_t* addr;
  const char* symbol_name;
  unsigned int offset;
  kprobe_pre_handler_t pre_handler;
  kprobe_post_handler_t post_handler;
  kprobe_opcode_t opcode;
  struct arch_specific_insn ainsn;
  u32 flags;
};

struct kprobe_ctlblk {
  long unsigned int kprobe_status;
  long unsigned int kprobe_old_flags;
  long unsigned int kprobe_saved_flags;
  struct prev_kprobe prev_kprobe;
};

struct kretprobe_blackpoint {
  const char* name;
  void* addr;
};

struct kprobe_insn_cache {
  struct mutex mutex;
  void* (*alloc)();
  void (*free)(void*);
  const char* sym;
  struct list_head pages;
  size_t insn_size;
  int nr_garbage;
};

enum wb_stat_item {
  WB_RECLAIMABLE = 0,
  WB_WRITEBACK = 1,
  WB_DIRTIED = 2,
  WB_WRITTEN = 3,
  NR_WB_STAT_ITEMS = 4,
};

struct block_device_operations;

struct timer_rand_state;

struct disk_events;

struct cdrom_device_info;

struct badblocks;

struct gendisk {
  int major;
  int first_minor;
  int minors;
  char disk_name[32];
  short unsigned int events;
  short unsigned int event_flags;
  struct xarray part_tbl;
  struct block_device* part0;
  const struct block_device_operations* fops;
  struct request_queue* queue;
  void* private_data;
  int flags;
  long unsigned int state;
  struct kobject* slave_dir;
  struct timer_rand_state* random;
  atomic_t sync_io;
  struct disk_events* ev;
  struct cdrom_device_info* cdi;
  int node_id;
  struct badblocks* bb;
  struct lockdep_map lockdep_map;
};

struct partition_meta_info {
  char uuid[37];
  u8 volname[64];
};

struct blkg_iostat {
  u64 bytes[3];
  u64 ios[3];
};

struct blkg_iostat_set {
  struct u64_stats_sync sync;
  struct blkg_iostat cur;
  struct blkg_iostat last;
};

struct blkcg;

struct blkg_policy_data;

struct blkcg_gq {
  struct request_queue* q;
  struct list_head q_node;
  struct hlist_node blkcg_node;
  struct blkcg* blkcg;
  struct blkcg_gq* parent;
  struct percpu_ref refcnt;
  bool online;
  struct blkg_iostat_set* iostat_cpu;
  struct blkg_iostat_set iostat;
  struct blkg_policy_data* pd[5];
  spinlock_t async_bio_lock;
  struct bio_list async_bios;
  struct work_struct async_bio_work;
  atomic_t use_delay;
  atomic64_t delay_nsec;
  atomic64_t delay_start;
  u64 last_delay;
  int last_use;
  struct callback_head callback_head;
};

typedef unsigned int blk_qc_t;

struct blk_zone;

typedef int (*report_zones_cb)(struct blk_zone*, unsigned int, void*);

struct hd_geometry;

struct pr_ops;

struct block_device_operations {
  blk_qc_t (*submit_bio)(struct bio*);
  int (*open)(struct block_device*, fmode_t);
  void (*release)(struct gendisk*, fmode_t);
  int (*rw_page)(struct block_device*, sector_t, struct page*, unsigned int);
  int (*ioctl)(struct block_device*, fmode_t, unsigned int, long unsigned int);
  int (*compat_ioctl)(
      struct block_device*,
      fmode_t,
      unsigned int,
      long unsigned int);
  unsigned int (*check_events)(struct gendisk*, unsigned int);
  void (*unlock_native_capacity)(struct gendisk*);
  int (*revalidate_disk)(struct gendisk*);
  int (*getgeo)(struct block_device*, struct hd_geometry*);
  int (*set_read_only)(struct block_device*, bool);
  void (*swap_slot_free_notify)(struct block_device*, long unsigned int);
  int (*report_zones)(
      struct gendisk*,
      sector_t,
      unsigned int,
      report_zones_cb,
      void*);
  char* (*devnode)(struct gendisk*, umode_t*);
  struct module* owner;
  const struct pr_ops* pr_ops;
};

struct sg_io_v4 {
  __s32 guard;
  __u32 protocol;
  __u32 subprotocol;
  __u32 request_len;
  __u64 request;
  __u64 request_tag;
  __u32 request_attr;
  __u32 request_priority;
  __u32 request_extra;
  __u32 max_response_len;
  __u64 response;
  __u32 dout_iovec_count;
  __u32 dout_xfer_len;
  __u32 din_iovec_count;
  __u32 din_xfer_len;
  __u64 dout_xferp;
  __u64 din_xferp;
  __u32 timeout;
  __u32 flags;
  __u64 usr_ptr;
  __u32 spare_in;
  __u32 driver_status;
  __u32 transport_status;
  __u32 device_status;
  __u32 retry_delay;
  __u32 info;
  __u32 duration;
  __u32 response_len;
  __s32 din_resid;
  __s32 dout_resid;
  __u64 generated_tag;
  __u32 spare_out;
  __u32 padding;
};

struct bsg_ops {
  int (*check_proto)(struct sg_io_v4*);
  int (*fill_hdr)(struct request*, struct sg_io_v4*, fmode_t);
  int (*complete_rq)(struct request*, struct sg_io_v4*);
  void (*free_rq)(struct request*);
};

typedef __u32 req_flags_t;

typedef void rq_end_io_fn(struct request*, blk_status_t);

enum mq_rq_state {
  MQ_RQ_IDLE = 0,
  MQ_RQ_IN_FLIGHT = 1,
  MQ_RQ_COMPLETE = 2,
};

struct request {
  struct request_queue* q;
  struct blk_mq_ctx* mq_ctx;
  struct blk_mq_hw_ctx* mq_hctx;
  unsigned int cmd_flags;
  req_flags_t rq_flags;
  int tag;
  int internal_tag;
  unsigned int __data_len;
  sector_t __sector;
  struct bio* bio;
  struct bio* biotail;
  struct list_head queuelist;
  union {
    struct hlist_node hash;
    struct llist_node ipi_list;
  };
  union {
    struct rb_node rb_node;
    struct bio_vec special_vec;
    void* completion_data;
    int error_count;
  };
  union {
    struct {
      struct io_cq* icq;
      void* priv[2];
    } elv;
    struct {
      unsigned int seq;
      struct list_head list;
      rq_end_io_fn* saved_end_io;
    } flush;
  };
  struct gendisk* rq_disk;
  struct block_device* part;
  u64 alloc_time_ns;
  u64 start_time_ns;
  u64 io_start_time_ns;
  short unsigned int wbt_flags;
  short unsigned int stats_sectors;
  short unsigned int nr_phys_segments;
  short unsigned int write_hint;
  short unsigned int ioprio;
  enum mq_rq_state state;
  refcount_t ref;
  unsigned int timeout;
  long unsigned int deadline;
  union {
    struct __call_single_data csd;
    u64 fifo_time;
  };
  rq_end_io_fn* end_io;
  void* end_io_data;
};

struct blk_zone {
  __u64 start;
  __u64 len;
  __u64 wp;
  __u8 type;
  __u8 cond;
  __u8 non_seq;
  __u8 reset;
  __u8 resv[4];
  __u64 capacity;
  __u8 reserved[24];
};

enum elv_merge {
  ELEVATOR_NO_MERGE = 0,
  ELEVATOR_FRONT_MERGE = 1,
  ELEVATOR_BACK_MERGE = 2,
  ELEVATOR_DISCARD_MERGE = 3,
};

struct elevator_type;

struct blk_mq_alloc_data;

struct elevator_mq_ops {
  int (*init_sched)(struct request_queue*, struct elevator_type*);
  void (*exit_sched)(struct elevator_queue*);
  int (*init_hctx)(struct blk_mq_hw_ctx*, unsigned int);
  void (*exit_hctx)(struct blk_mq_hw_ctx*, unsigned int);
  void (*depth_updated)(struct blk_mq_hw_ctx*);
  bool (*allow_merge)(struct request_queue*, struct request*, struct bio*);
  bool (*bio_merge)(struct request_queue*, struct bio*, unsigned int);
  int (*request_merge)(struct request_queue*, struct request**, struct bio*);
  void (
      *request_merged)(struct request_queue*, struct request*, enum elv_merge);
  void (*requests_merged)(
      struct request_queue*,
      struct request*,
      struct request*);
  void (*limit_depth)(unsigned int, struct blk_mq_alloc_data*);
  void (*prepare_request)(struct request*);
  void (*finish_request)(struct request*);
  void (*insert_requests)(struct blk_mq_hw_ctx*, struct list_head*, bool);
  struct request* (*dispatch_request)(struct blk_mq_hw_ctx*);
  bool (*has_work)(struct blk_mq_hw_ctx*);
  void (*completed_request)(struct request*, u64);
  void (*requeue_request)(struct request*);
  struct request* (*former_request)(struct request_queue*, struct request*);
  struct request* (*next_request)(struct request_queue*, struct request*);
  void (*init_icq)(struct io_cq*);
  void (*exit_icq)(struct io_cq*);
};

struct elv_fs_entry;

struct blk_mq_debugfs_attr;

struct elevator_type {
  struct kmem_cache* icq_cache;
  struct elevator_mq_ops ops;
  size_t icq_size;
  size_t icq_align;
  struct elv_fs_entry* elevator_attrs;
  const char* elevator_name;
  const char* elevator_alias;
  const unsigned int elevator_features;
  struct module* elevator_owner;
  const struct blk_mq_debugfs_attr* queue_debugfs_attrs;
  const struct blk_mq_debugfs_attr* hctx_debugfs_attrs;
  char icq_cache_name[22];
  struct list_head list;
};

struct elevator_queue {
  struct elevator_type* type;
  void* elevator_data;
  struct kobject kobj;
  struct mutex sysfs_lock;
  unsigned int registered : 1;
  struct hlist_head hash[64];
};

struct elv_fs_entry {
  struct attribute attr;
  ssize_t (*show)(struct elevator_queue*, char*);
  ssize_t (*store)(struct elevator_queue*, const char*, size_t);
};

struct blk_mq_debugfs_attr {
  const char* name;
  umode_t mode;
  int (*show)(void*, struct seq_file*);
  ssize_t (*write)(void*, const char*, size_t, loff_t*);
  const struct seq_operations* seq_ops;
};

enum blk_eh_timer_return {
  BLK_EH_DONE = 0,
  BLK_EH_RESET_TIMER = 1,
};

struct blk_mq_queue_data;

struct blk_mq_ops {
  blk_status_t (
      *queue_rq)(struct blk_mq_hw_ctx*, const struct blk_mq_queue_data*);
  void (*commit_rqs)(struct blk_mq_hw_ctx*);
  bool (*get_budget)(struct request_queue*);
  void (*put_budget)(struct request_queue*);
  enum blk_eh_timer_return (*timeout)(struct request*, bool);
  int (*poll)(struct blk_mq_hw_ctx*);
  void (*complete)(struct request*);
  int (*init_hctx)(struct blk_mq_hw_ctx*, void*, unsigned int);
  void (*exit_hctx)(struct blk_mq_hw_ctx*, unsigned int);
  int (*init_request)(
      struct blk_mq_tag_set*,
      struct request*,
      unsigned int,
      unsigned int);
  void (*exit_request)(struct blk_mq_tag_set*, struct request*, unsigned int);
  void (*initialize_rq_fn)(struct request*);
  void (*cleanup_rq)(struct request*);
  bool (*busy)(struct request_queue*);
  int (*map_queues)(struct blk_mq_tag_set*);
  void (*show_rq)(struct seq_file*, struct request*);
};

enum pr_type {
  PR_WRITE_EXCLUSIVE = 1,
  PR_EXCLUSIVE_ACCESS = 2,
  PR_WRITE_EXCLUSIVE_REG_ONLY = 3,
  PR_EXCLUSIVE_ACCESS_REG_ONLY = 4,
  PR_WRITE_EXCLUSIVE_ALL_REGS = 5,
  PR_EXCLUSIVE_ACCESS_ALL_REGS = 6,
};

struct pr_ops {
  int (*pr_register)(struct block_device*, u64, u64, u32);
  int (*pr_reserve)(struct block_device*, u64, enum pr_type, u32);
  int (*pr_release)(struct block_device*, u64, enum pr_type);
  int (*pr_preempt)(struct block_device*, u64, u64, enum pr_type, bool);
  int (*pr_clear)(struct block_device*, u64);
};

enum blkg_iostat_type {
  BLKG_IOSTAT_READ = 0,
  BLKG_IOSTAT_WRITE = 1,
  BLKG_IOSTAT_DISCARD = 2,
  BLKG_IOSTAT_NR = 3,
};

struct blkcg_policy_data;

struct blkcg {
  struct cgroup_subsys_state css;
  spinlock_t lock;
  refcount_t online_pin;
  struct xarray blkg_tree;
  struct blkcg_gq* blkg_hint;
  struct hlist_head blkg_list;
  struct blkcg_policy_data* cpd[5];
  struct list_head all_blkcgs_node;
  struct list_head cgwb_list;
};

struct blkcg_policy_data {
  struct blkcg* blkcg;
  int plid;
};

struct blkg_policy_data {
  struct blkcg_gq* blkg;
  int plid;
};

enum reboot_mode {
  REBOOT_UNDEFINED = 4294967295,
  REBOOT_COLD = 0,
  REBOOT_WARM = 1,
  REBOOT_HARD = 2,
  REBOOT_SOFT = 3,
  REBOOT_GPIO = 4,
};

enum reboot_type {
  BOOT_TRIPLE = 116,
  BOOT_KBD = 107,
  BOOT_BIOS = 98,
  BOOT_ACPI = 97,
  BOOT_EFI = 101,
  BOOT_CF9_FORCE = 112,
  BOOT_CF9_SAFE = 113,
};

typedef long unsigned int efi_status_t;

typedef u8 efi_bool_t;

typedef u16 efi_char16_t;

typedef guid_t efi_guid_t;

typedef struct {
  u64 signature;
  u32 revision;
  u32 headersize;
  u32 crc32;
  u32 reserved;
} efi_table_hdr_t;

typedef struct {
  u32 type;
  u32 pad;
  u64 phys_addr;
  u64 virt_addr;
  u64 num_pages;
  u64 attribute;
} efi_memory_desc_t;

typedef struct {
  efi_guid_t guid;
  u32 headersize;
  u32 flags;
  u32 imagesize;
} efi_capsule_header_t;

typedef struct {
  u16 year;
  u8 month;
  u8 day;
  u8 hour;
  u8 minute;
  u8 second;
  u8 pad1;
  u32 nanosecond;
  s16 timezone;
  u8 daylight;
  u8 pad2;
} efi_time_t;

typedef struct {
  u32 resolution;
  u32 accuracy;
  u8 sets_to_zero;
} efi_time_cap_t;

typedef struct {
  efi_table_hdr_t hdr;
  u32 get_time;
  u32 set_time;
  u32 get_wakeup_time;
  u32 set_wakeup_time;
  u32 set_virtual_address_map;
  u32 convert_pointer;
  u32 get_variable;
  u32 get_next_variable;
  u32 set_variable;
  u32 get_next_high_mono_count;
  u32 reset_system;
  u32 update_capsule;
  u32 query_capsule_caps;
  u32 query_variable_info;
} efi_runtime_services_32_t;

typedef efi_status_t efi_get_time_t(efi_time_t*, efi_time_cap_t*);

typedef efi_status_t efi_set_time_t(efi_time_t*);

typedef efi_status_t
efi_get_wakeup_time_t(efi_bool_t*, efi_bool_t*, efi_time_t*);

typedef efi_status_t efi_set_wakeup_time_t(efi_bool_t, efi_time_t*);

typedef efi_status_t
efi_get_variable_t(efi_char16_t*, efi_guid_t*, u32*, long unsigned int*, void*);

typedef efi_status_t
efi_get_next_variable_t(long unsigned int*, efi_char16_t*, efi_guid_t*);

typedef efi_status_t
efi_set_variable_t(efi_char16_t*, efi_guid_t*, u32, long unsigned int, void*);

typedef efi_status_t efi_get_next_high_mono_count_t(u32*);

typedef void
efi_reset_system_t(int, efi_status_t, long unsigned int, efi_char16_t*);

typedef efi_status_t efi_query_variable_info_t(u32, u64*, u64*, u64*);

typedef efi_status_t efi_update_capsule_t(
    efi_capsule_header_t**,
    long unsigned int,
    long unsigned int);

typedef efi_status_t
efi_query_capsule_caps_t(efi_capsule_header_t**, long unsigned int, u64*, int*);

typedef union {
  struct {
    efi_table_hdr_t hdr;
    efi_status_t (*get_time)(efi_time_t*, efi_time_cap_t*);
    efi_status_t (*set_time)(efi_time_t*);
    efi_status_t (*get_wakeup_time)(efi_bool_t*, efi_bool_t*, efi_time_t*);
    efi_status_t (*set_wakeup_time)(efi_bool_t, efi_time_t*);
    efi_status_t (*set_virtual_address_map)(
        long unsigned int,
        long unsigned int,
        u32,
        efi_memory_desc_t*);
    void* convert_pointer;
    efi_status_t (*get_variable)(
        efi_char16_t*,
        efi_guid_t*,
        u32*,
        long unsigned int*,
        void*);
    efi_status_t (
        *get_next_variable)(long unsigned int*, efi_char16_t*, efi_guid_t*);
    efi_status_t (*set_variable)(
        efi_char16_t*,
        efi_guid_t*,
        u32,
        long unsigned int,
        void*);
    efi_status_t (*get_next_high_mono_count)(u32*);
    void (*reset_system)(int, efi_status_t, long unsigned int, efi_char16_t*);
    efi_status_t (*update_capsule)(
        efi_capsule_header_t**,
        long unsigned int,
        long unsigned int);
    efi_status_t (*query_capsule_caps)(
        efi_capsule_header_t**,
        long unsigned int,
        u64*,
        int*);
    efi_status_t (*query_variable_info)(u32, u64*, u64*, u64*);
  };
  efi_runtime_services_32_t mixed_mode;
} efi_runtime_services_t;

struct efi_memory_map {
  phys_addr_t phys_map;
  void* map;
  void* map_end;
  int nr_map;
  long unsigned int desc_version;
  long unsigned int desc_size;
  long unsigned int flags;
};

struct efi {
  const efi_runtime_services_t* runtime;
  unsigned int runtime_version;
  unsigned int runtime_supported_mask;
  long unsigned int acpi;
  long unsigned int acpi20;
  long unsigned int smbios;
  long unsigned int smbios3;
  long unsigned int esrt;
  long unsigned int tpm_log;
  long unsigned int tpm_final_log;
  long unsigned int mokvar_table;
  efi_get_time_t* get_time;
  efi_set_time_t* set_time;
  efi_get_wakeup_time_t* get_wakeup_time;
  efi_set_wakeup_time_t* set_wakeup_time;
  efi_get_variable_t* get_variable;
  efi_get_next_variable_t* get_next_variable;
  efi_set_variable_t* set_variable;
  efi_set_variable_t* set_variable_nonblocking;
  efi_query_variable_info_t* query_variable_info;
  efi_query_variable_info_t* query_variable_info_nonblocking;
  efi_update_capsule_t* update_capsule;
  efi_query_capsule_caps_t* query_capsule_caps;
  efi_get_next_high_mono_count_t* get_next_high_mono_count;
  efi_reset_system_t* reset_system;
  struct efi_memory_map memmap;
  long unsigned int flags;
};

enum efi_rts_ids {
  EFI_NONE = 0,
  EFI_GET_TIME = 1,
  EFI_SET_TIME = 2,
  EFI_GET_WAKEUP_TIME = 3,
  EFI_SET_WAKEUP_TIME = 4,
  EFI_GET_VARIABLE = 5,
  EFI_GET_NEXT_VARIABLE = 6,
  EFI_SET_VARIABLE = 7,
  EFI_QUERY_VARIABLE_INFO = 8,
  EFI_GET_NEXT_HIGH_MONO_COUNT = 9,
  EFI_RESET_SYSTEM = 10,
  EFI_UPDATE_CAPSULE = 11,
  EFI_QUERY_CAPSULE_CAPS = 12,
};

struct efi_runtime_work {
  void* arg1;
  void* arg2;
  void* arg3;
  void* arg4;
  void* arg5;
  efi_status_t status;
  struct work_struct work;
  enum efi_rts_ids efi_rts_id;
  struct completion efi_rts_comp;
};

enum memcg_stat_item {
  MEMCG_SWAP = 39,
  MEMCG_SOCK = 40,
  MEMCG_PERCPU_B = 41,
  MEMCG_ZSWAP_B = 42,
  MEMCG_ZSWAPPED = 43,
  MEMCG_NR_STAT = 44,
};

enum memcg_memory_event {
  MEMCG_LOW = 0,
  MEMCG_HIGH = 1,
  MEMCG_MAX = 2,
  MEMCG_OOM = 3,
  MEMCG_OOM_KILL = 4,
  MEMCG_SWAP_HIGH = 5,
  MEMCG_SWAP_MAX = 6,
  MEMCG_SWAP_FAIL = 7,
  MEMCG_NR_MEMORY_EVENTS = 8,
};

enum mem_cgroup_events_target {
  MEM_CGROUP_TARGET_THRESH = 0,
  MEM_CGROUP_TARGET_SOFTLIMIT = 1,
  MEM_CGROUP_NTARGETS = 2,
};

struct memcg_vmstats_percpu {
  long int state[44];
  long unsigned int events[98];
  long int state_prev[44];
  long unsigned int events_prev[98];
  long unsigned int nr_page_events;
  long unsigned int targets[2];
};

struct mem_cgroup_reclaim_iter {
  struct mem_cgroup* position;
  unsigned int generation;
};

struct lruvec_stat {
  long int count[39];
};

struct batched_lruvec_stat {
  s32 count[39];
};

struct memcg_shrinker_map {
  struct callback_head rcu;
  long unsigned int map[0];
};

struct mem_cgroup_per_node {
  struct lruvec lruvec;
  struct lruvec_stat* lruvec_stat_local;
  struct batched_lruvec_stat* lruvec_stat_cpu;
  atomic_long_t lruvec_stat[39];
  long unsigned int lru_zone_size[25];
  struct mem_cgroup_reclaim_iter iter;
  struct memcg_shrinker_map* shrinker_map;
  struct rb_node tree_node;
  long unsigned int usage_in_excess;
  bool on_tree;
  struct mem_cgroup* memcg;
};

struct eventfd_ctx;

struct mem_cgroup_threshold {
  struct eventfd_ctx* eventfd;
  long unsigned int threshold;
};

struct mem_cgroup_threshold_ary {
  int current_threshold;
  unsigned int size;
  struct mem_cgroup_threshold entries[0];
};

struct obj_cgroup {
  struct percpu_ref refcnt;
  struct mem_cgroup* memcg;
  atomic_t nr_charged_bytes;
  union {
    struct list_head list;
    struct callback_head rcu;
  };
};

struct percpu_cluster {
  struct swap_cluster_info index;
  unsigned int next;
};

enum fs_value_type {
  fs_value_is_undefined = 0,
  fs_value_is_flag = 1,
  fs_value_is_string = 2,
  fs_value_is_blob = 3,
  fs_value_is_filename = 4,
  fs_value_is_file = 5,
};

struct fs_parameter {
  const char* key;
  enum fs_value_type type : 8;
  union {
    char* string;
    void* blob;
    struct filename* name;
    struct file* file;
  };
  size_t size;
  int dirfd;
};

struct fc_log {
  refcount_t usage;
  u8 head;
  u8 tail;
  u8 need_free;
  struct module* owner;
  char* buffer[8];
};

struct fs_context_operations {
  void (*free)(struct fs_context*);
  int (*dup)(struct fs_context*, struct fs_context*);
  int (*parse_param)(struct fs_context*, struct fs_parameter*);
  int (*parse_monolithic)(struct fs_context*, void*);
  int (*get_tree)(struct fs_context*);
  int (*reconfigure)(struct fs_context*);
};

struct fs_parse_result {
  bool negated;
  union {
    bool boolean;
    int int_32;
    unsigned int uint_32;
    u64 uint_64;
  };
};

struct trace_event_raw_initcall_level {
  struct trace_entry ent;
  u32 __data_loc_level;
  char __data[0];
};

struct trace_event_raw_initcall_start {
  struct trace_entry ent;
  initcall_t func;
  char __data[0];
};

struct trace_event_raw_initcall_finish {
  struct trace_entry ent;
  initcall_t func;
  int ret;
  char __data[0];
};

struct trace_event_data_offsets_initcall_level {
  u32 level;
};

struct trace_event_data_offsets_initcall_start {};

struct trace_event_data_offsets_initcall_finish {};

typedef void (*btf_trace_initcall_level)(void*, const char*);

typedef void (*btf_trace_initcall_start)(void*, initcall_t);

typedef void (*btf_trace_initcall_finish)(void*, initcall_t, int);

struct blacklist_entry {
  struct list_head next;
  char* buf;
};

typedef __u32 Elf32_Word;

struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
};

struct rw_semaphore___2;

enum {
  PROC_ROOT_INO = 1,
  PROC_IPC_INIT_INO = 4026531839,
  PROC_UTS_INIT_INO = 4026531838,
  PROC_USER_INIT_INO = 4026531837,
  PROC_PID_INIT_INO = 4026531836,
  PROC_CGROUP_INIT_INO = 4026531835,
  PROC_TIME_INIT_INO = 4026531834,
};

typedef __u16 __le16;

typedef __u16 __be16;

typedef __u32 __be32;

typedef __u64 __be64;

typedef __u32 __wsum;

typedef u64 uint64_t;

typedef unsigned int slab_flags_t;

typedef struct __call_single_data call_single_data_t;

struct raw_notifier_head {
  struct notifier_block* head;
};

struct ida {
  struct xarray xa;
};

typedef __u64 __addrpair;

typedef __u32 __portpair;

typedef struct {
  struct net* net;
} possible_net_t;

struct in6_addr {
  union {
    __u8 u6_addr8[16];
    __be16 u6_addr16[8];
    __be32 u6_addr32[4];
  } in6_u;
};

struct hlist_nulls_node {
  struct hlist_nulls_node* next;
  struct hlist_nulls_node** pprev;
};

struct proto;

struct inet_timewait_death_row;

struct sock_common {
  union {
    __addrpair skc_addrpair;
    struct {
      __be32 skc_daddr;
      __be32 skc_rcv_saddr;
    };
  };
  union {
    unsigned int skc_hash;
    __u16 skc_u16hashes[2];
  };
  union {
    __portpair skc_portpair;
    struct {
      __be16 skc_dport;
      __u16 skc_num;
    };
  };
  short unsigned int skc_family;
  volatile unsigned char skc_state;
  unsigned char skc_reuse : 4;
  unsigned char skc_reuseport : 1;
  unsigned char skc_ipv6only : 1;
  unsigned char skc_net_refcnt : 1;
  int skc_bound_dev_if;
  union {
    struct hlist_node skc_bind_node;
    struct hlist_node skc_portaddr_node;
  };
  struct proto* skc_prot;
  possible_net_t skc_net;
  struct in6_addr skc_v6_daddr;
  struct in6_addr skc_v6_rcv_saddr;
  atomic64_t skc_cookie;
  union {
    long unsigned int skc_flags;
    struct sock* skc_listener;
    struct inet_timewait_death_row* skc_tw_dr;
  };
  int skc_dontcopy_begin[0];
  union {
    struct hlist_node skc_node;
    struct hlist_nulls_node skc_nulls_node;
  };
  short unsigned int skc_tx_queue_mapping;
  short unsigned int skc_rx_queue_mapping;
  union {
    int skc_incoming_cpu;
    u32 skc_rcv_wnd;
    u32 skc_tw_rcv_nxt;
  };
  refcount_t skc_refcnt;
  int skc_dontcopy_end[0];
  union {
    u32 skc_rxhash;
    u32 skc_window_clamp;
    u32 skc_tw_snd_nxt;
  };
};

typedef struct {
  spinlock_t slock;
  int owned;
  wait_queue_head_t wq;
} socket_lock_t;

struct sk_buff;

struct sk_buff_head {
  struct sk_buff* next;
  struct sk_buff* prev;
  __u32 qlen;
  spinlock_t lock;
};

typedef u64 netdev_features_t;

struct sock_cgroup_data {
  struct cgroup* cgroup;
  u32 classid;
  u16 prioidx;
};

struct sk_filter;

struct socket_wq;

struct xfrm_policy;

struct dst_entry;

struct socket;

struct sock_reuseport;

struct sock {
  struct sock_common __sk_common;
  socket_lock_t sk_lock;
  atomic_t sk_drops;
  int sk_rcvlowat;
  struct sk_buff_head sk_error_queue;
  struct sk_buff* sk_rx_skb_cache;
  struct sk_buff_head sk_receive_queue;
  struct {
    atomic_t rmem_alloc;
    int len;
    struct sk_buff* head;
    struct sk_buff* tail;
  } sk_backlog;
  int sk_forward_alloc;
  unsigned int sk_ll_usec;
  unsigned int sk_napi_id;
  int sk_rcvbuf;
  struct sk_filter* sk_filter;
  union {
    struct socket_wq* sk_wq;
    struct socket_wq* sk_wq_raw;
  };
  struct xfrm_policy* sk_policy[2];
  struct dst_entry* sk_rx_dst;
  struct dst_entry* sk_dst_cache;
  atomic_t sk_omem_alloc;
  int sk_sndbuf;
  int sk_wmem_queued;
  refcount_t sk_wmem_alloc;
  long unsigned int sk_tsq_flags;
  union {
    struct sk_buff* sk_send_head;
    struct rb_root tcp_rtx_queue;
  };
  struct sk_buff* sk_tx_skb_cache;
  struct sk_buff_head sk_write_queue;
  __s32 sk_peek_off;
  int sk_write_pending;
  __u32 sk_dst_pending_confirm;
  u32 sk_pacing_status;
  long int sk_sndtimeo;
  struct timer_list sk_timer;
  __u32 sk_priority;
  __u32 sk_mark;
  long unsigned int sk_pacing_rate;
  long unsigned int sk_max_pacing_rate;
  struct page_frag sk_frag;
  netdev_features_t sk_route_caps;
  netdev_features_t sk_route_nocaps;
  netdev_features_t sk_route_forced_caps;
  int sk_gso_type;
  unsigned int sk_gso_max_size;
  gfp_t sk_allocation;
  __u32 sk_txhash;
  u8 sk_padding : 1;
  u8 sk_kern_sock : 1;
  u8 sk_no_check_tx : 1;
  u8 sk_no_check_rx : 1;
  u8 sk_userlocks : 4;
  u8 sk_pacing_shift;
  u16 sk_type;
  u16 sk_protocol;
  u16 sk_gso_max_segs;
  long unsigned int sk_lingertime;
  struct proto* sk_prot_creator;
  rwlock_t sk_callback_lock;
  int sk_err;
  int sk_err_soft;
  u32 sk_ack_backlog;
  u32 sk_max_ack_backlog;
  kuid_t sk_uid;
  u8 sk_prefer_busy_poll;
  u16 sk_busy_poll_budget;
  spinlock_t sk_peer_lock;
  struct pid* sk_peer_pid;
  const struct cred* sk_peer_cred;
  long int sk_rcvtimeo;
  ktime_t sk_stamp;
  u16 sk_tsflags;
  u8 sk_shutdown;
  u32 sk_tskey;
  atomic_t sk_zckey;
  u8 sk_clockid;
  u8 sk_txtime_deadline_mode : 1;
  u8 sk_txtime_report_errors : 1;
  u8 sk_txtime_unused : 6;
  struct socket* sk_socket;
  void* sk_user_data;
  void* sk_security;
  struct sock_cgroup_data sk_cgrp_data;
  struct mem_cgroup* sk_memcg;
  void (*sk_state_change)(struct sock*);
  void (*sk_data_ready)(struct sock*);
  void (*sk_write_space)(struct sock*);
  void (*sk_error_report)(struct sock*);
  int (*sk_backlog_rcv)(struct sock*, struct sk_buff*);
  void (*sk_destruct)(struct sock*);
  struct sock_reuseport* sk_reuseport_cb;
  struct bpf_local_storage* sk_bpf_storage;
  struct callback_head sk_rcu;
};

struct rhash_head {
  struct rhash_head* next;
};

struct rhashtable;

struct rhashtable_compare_arg {
  struct rhashtable* ht;
  const void* key;
};

typedef u32 (*rht_hashfn_t)(const void*, u32, u32);

typedef u32 (*rht_obj_hashfn_t)(const void*, u32, u32);

typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg*, const void*);

struct rhashtable_params {
  u16 nelem_hint;
  u16 key_len;
  u16 key_offset;
  u16 head_offset;
  unsigned int max_size;
  u16 min_size;
  bool automatic_shrinking;
  rht_hashfn_t hashfn;
  rht_obj_hashfn_t obj_hashfn;
  rht_obj_cmpfn_t obj_cmpfn;
};

struct bucket_table;

struct rhashtable {
  struct bucket_table* tbl;
  unsigned int key_len;
  unsigned int max_elems;
  struct rhashtable_params p;
  bool rhlist;
  struct work_struct run_work;
  struct mutex mutex;
  spinlock_t lock;
  atomic_t nelems;
};

struct fs_struct {
  int users;
  spinlock_t lock;
  seqcount_spinlock_t seq;
  int umask;
  int in_exec;
  struct path root;
  struct path pwd;
};

struct pipe_buffer;

struct pipe_inode_info {
  struct mutex mutex;
  wait_queue_head_t rd_wait;
  wait_queue_head_t wr_wait;
  unsigned int head;
  unsigned int tail;
  unsigned int max_usage;
  unsigned int ring_size;
  unsigned int nr_accounted;
  unsigned int readers;
  unsigned int writers;
  unsigned int files;
  unsigned int r_counter;
  unsigned int w_counter;
  struct page* tmp_page;
  struct fasync_struct* fasync_readers;
  struct fasync_struct* fasync_writers;
  struct pipe_buffer* bufs;
  struct user_struct* user;
};

typedef short unsigned int __kernel_sa_family_t;

struct __kernel_sockaddr_storage {
  union {
    struct {
      __kernel_sa_family_t ss_family;
      char __data[126];
    };
    void* __align;
  };
};

typedef __kernel_sa_family_t sa_family_t;

struct sockaddr {
  sa_family_t sa_family;
  char sa_data[14];
};

struct msghdr {
  void* msg_name;
  int msg_namelen;
  struct iov_iter msg_iter;
  union {
    void* msg_control;
    void* msg_control_user;
  };
  bool msg_control_is_user : 1;
  __kernel_size_t msg_controllen;
  unsigned int msg_flags;
  struct kiocb* msg_iocb;
};

typedef struct {
  unsigned int clock_rate;
  unsigned int clock_type;
  short unsigned int loopback;
} sync_serial_settings;

typedef struct {
  unsigned int clock_rate;
  unsigned int clock_type;
  short unsigned int loopback;
  unsigned int slot_map;
} te1_settings;

typedef struct {
  short unsigned int encoding;
  short unsigned int parity;
} raw_hdlc_proto;

typedef struct {
  unsigned int t391;
  unsigned int t392;
  unsigned int n391;
  unsigned int n392;
  unsigned int n393;
  short unsigned int lmi;
  short unsigned int dce;
} fr_proto;

typedef struct {
  unsigned int dlci;
} fr_proto_pvc;

typedef struct {
  unsigned int dlci;
  char master[16];
} fr_proto_pvc_info;

typedef struct {
  unsigned int interval;
  unsigned int timeout;
} cisco_proto;

typedef struct {
  short unsigned int dce;
  unsigned int modulo;
  unsigned int window;
  unsigned int t1;
  unsigned int t2;
  unsigned int n2;
} x25_hdlc_proto;

struct ifmap {
  long unsigned int mem_start;
  long unsigned int mem_end;
  short unsigned int base_addr;
  unsigned char irq;
  unsigned char dma;
  unsigned char port;
};

struct if_settings {
  unsigned int type;
  unsigned int size;
  union {
    raw_hdlc_proto* raw_hdlc;
    cisco_proto* cisco;
    fr_proto* fr;
    fr_proto_pvc* fr_pvc;
    fr_proto_pvc_info* fr_pvc_info;
    x25_hdlc_proto* x25;
    sync_serial_settings* sync;
    te1_settings* te1;
  } ifs_ifsu;
};

struct ifreq {
  union {
    char ifrn_name[16];
  } ifr_ifrn;
  union {
    struct sockaddr ifru_addr;
    struct sockaddr ifru_dstaddr;
    struct sockaddr ifru_broadaddr;
    struct sockaddr ifru_netmask;
    struct sockaddr ifru_hwaddr;
    short int ifru_flags;
    int ifru_ivalue;
    int ifru_mtu;
    struct ifmap ifru_map;
    char ifru_slave[16];
    char ifru_newname[16];
    void* ifru_data;
    struct if_settings ifru_settings;
  } ifr_ifru;
};

struct ld_semaphore {
  atomic_long_t count;
  raw_spinlock_t wait_lock;
  unsigned int wait_readers;
  struct list_head read_wait;
  struct list_head write_wait;
};

typedef unsigned int tcflag_t;

typedef unsigned char cc_t;

typedef unsigned int speed_t;

struct ktermios {
  tcflag_t c_iflag;
  tcflag_t c_oflag;
  tcflag_t c_cflag;
  tcflag_t c_lflag;
  cc_t c_line;
  cc_t c_cc[19];
  speed_t c_ispeed;
  speed_t c_ospeed;
};

struct winsize {
  short unsigned int ws_row;
  short unsigned int ws_col;
  short unsigned int ws_xpixel;
  short unsigned int ws_ypixel;
};

struct tty_operations;

struct tty_ldisc;

struct tty_struct {
  int magic;
  struct kref kref;
  struct device* dev;
  struct tty_driver* driver;
  const struct tty_operations* ops;
  int index;
  struct ld_semaphore ldisc_sem;
  struct tty_ldisc* ldisc;
  struct mutex atomic_write_lock;
  struct mutex legacy_mutex;
  struct mutex throttle_mutex;
  struct rw_semaphore termios_rwsem;
  struct mutex winsize_mutex;
  spinlock_t ctrl_lock;
  spinlock_t flow_lock;
  struct ktermios termios;
  struct ktermios termios_locked;
  char name[64];
  struct pid* pgrp;
  struct pid* session;
  long unsigned int flags;
  int count;
  struct winsize winsize;
  long unsigned int stopped : 1;
  long unsigned int flow_stopped : 1;
  int : 30;
  long unsigned int unused : 62;
  int hw_stopped;
  long unsigned int ctrl_status : 8;
  long unsigned int packet : 1;
  int : 23;
  long unsigned int unused_ctrl : 55;
  unsigned int receive_room;
  int flow_change;
  struct tty_struct* link;
  struct fasync_struct* fasync;
  wait_queue_head_t write_wait;
  wait_queue_head_t read_wait;
  struct work_struct hangup_work;
  void* disc_data;
  void* driver_data;
  spinlock_t files_lock;
  struct list_head tty_files;
  int closing;
  unsigned char* write_buf;
  int write_cnt;
  struct work_struct SAK_work;
  struct tty_port* port;
};

typedef struct {
  size_t written;
  size_t count;
  union {
    char* buf;
    void* data;
  } arg;
  int error;
} read_descriptor_t;

struct posix_acl_entry {
  short int e_tag;
  short unsigned int e_perm;
  union {
    kuid_t e_uid;
    kgid_t e_gid;
  };
};

struct posix_acl {
  refcount_t a_refcount;
  struct callback_head a_rcu;
  unsigned int a_count;
  struct posix_acl_entry a_entries[0];
};

struct serial_icounter_struct;

struct serial_struct;

struct tty_operations {
  struct tty_struct* (*lookup)(struct tty_driver*, struct file*, int);
  int (*install)(struct tty_driver*, struct tty_struct*);
  void (*remove)(struct tty_driver*, struct tty_struct*);
  int (*open)(struct tty_struct*, struct file*);
  void (*close)(struct tty_struct*, struct file*);
  void (*shutdown)(struct tty_struct*);
  void (*cleanup)(struct tty_struct*);
  int (*write)(struct tty_struct*, const unsigned char*, int);
  int (*put_char)(struct tty_struct*, unsigned char);
  void (*flush_chars)(struct tty_struct*);
  int (*write_room)(struct tty_struct*);
  int (*chars_in_buffer)(struct tty_struct*);
  int (*ioctl)(struct tty_struct*, unsigned int, long unsigned int);
  long int (*compat_ioctl)(struct tty_struct*, unsigned int, long unsigned int);
  void (*set_termios)(struct tty_struct*, struct ktermios*);
  void (*throttle)(struct tty_struct*);
  void (*unthrottle)(struct tty_struct*);
  void (*stop)(struct tty_struct*);
  void (*start)(struct tty_struct*);
  void (*hangup)(struct tty_struct*);
  int (*break_ctl)(struct tty_struct*, int);
  void (*flush_buffer)(struct tty_struct*);
  void (*set_ldisc)(struct tty_struct*);
  void (*wait_until_sent)(struct tty_struct*, int);
  void (*send_xchar)(struct tty_struct*, char);
  int (*tiocmget)(struct tty_struct*);
  int (*tiocmset)(struct tty_struct*, unsigned int, unsigned int);
  int (*resize)(struct tty_struct*, struct winsize*);
  int (*get_icount)(struct tty_struct*, struct serial_icounter_struct*);
  int (*get_serial)(struct tty_struct*, struct serial_struct*);
  int (*set_serial)(struct tty_struct*, struct serial_struct*);
  void (*show_fdinfo)(struct tty_struct*, struct seq_file*);
  int (*proc_show)(struct seq_file*, void*);
};

struct proc_dir_entry;

struct tty_driver {
  int magic;
  struct kref kref;
  struct cdev** cdevs;
  struct module* owner;
  const char* driver_name;
  const char* name;
  int name_base;
  int major;
  int minor_start;
  unsigned int num;
  short int type;
  short int subtype;
  struct ktermios init_termios;
  long unsigned int flags;
  struct proc_dir_entry* proc_entry;
  struct tty_driver* other;
  struct tty_struct** ttys;
  struct tty_port** ports;
  struct ktermios** termios;
  void* driver_state;
  const struct tty_operations* ops;
  struct list_head tty_drivers;
};

struct tty_ldisc_ops {
  int magic;
  char* name;
  int num;
  int flags;
  int (*open)(struct tty_struct*);
  void (*close)(struct tty_struct*);
  void (*flush_buffer)(struct tty_struct*);
  ssize_t (*read)(
      struct tty_struct*,
      struct file*,
      unsigned char*,
      size_t,
      void**,
      long unsigned int);
  ssize_t (
      *write)(struct tty_struct*, struct file*, const unsigned char*, size_t);
  int (*ioctl)(
      struct tty_struct*,
      struct file*,
      unsigned int,
      long unsigned int);
  int (*compat_ioctl)(
      struct tty_struct*,
      struct file*,
      unsigned int,
      long unsigned int);
  void (*set_termios)(struct tty_struct*, struct ktermios*);
  __poll_t (*poll)(struct tty_struct*, struct file*, struct poll_table_struct*);
  int (*hangup)(struct tty_struct*);
  void (*receive_buf)(struct tty_struct*, const unsigned char*, char*, int);
  void (*write_wakeup)(struct tty_struct*);
  void (*dcd_change)(struct tty_struct*, unsigned int);
  int (*receive_buf2)(struct tty_struct*, const unsigned char*, char*, int);
  struct module* owner;
  int refcount;
};

struct tty_ldisc {
  struct tty_ldisc_ops* ops;
  struct tty_struct* tty;
};

struct tty_port_operations {
  int (*carrier_raised)(struct tty_port*);
  void (*dtr_rts)(struct tty_port*, int);
  void (*shutdown)(struct tty_port*);
  int (*activate)(struct tty_port*, struct tty_struct*);
  void (*destruct)(struct tty_port*);
};

struct tty_port_client_operations {
  int (*receive_buf)(
      struct tty_port*,
      const unsigned char*,
      const unsigned char*,
      size_t);
  void (*write_wakeup)(struct tty_port*);
};

struct prot_inuse;

struct netns_core {
  struct ctl_table_header* sysctl_hdr;
  int sysctl_somaxconn;
  int* sock_inuse;
  struct prot_inuse* prot_inuse;
};

struct tcp_mib;

struct ipstats_mib;

struct linux_mib;

struct udp_mib;

struct icmp_mib;

struct icmpmsg_mib;

struct icmpv6_mib;

struct icmpv6msg_mib;

struct linux_tls_mib;

struct netns_mib {
  struct tcp_mib* tcp_statistics;
  struct ipstats_mib* ip_statistics;
  struct linux_mib* net_statistics;
  struct udp_mib* udp_statistics;
  struct udp_mib* udplite_statistics;
  struct icmp_mib* icmp_statistics;
  struct icmpmsg_mib* icmpmsg_statistics;
  struct proc_dir_entry* proc_net_devsnmp6;
  struct udp_mib* udp_stats_in6;
  struct udp_mib* udplite_stats_in6;
  struct ipstats_mib* ipv6_statistics;
  struct icmpv6_mib* icmpv6_statistics;
  struct icmpv6msg_mib* icmpv6msg_statistics;
  struct linux_tls_mib* tls_statistics;
};

struct netns_packet {
  struct mutex sklist_lock;
  struct hlist_head sklist;
};

struct netns_unix {
  int sysctl_max_dgram_qlen;
  struct ctl_table_header* ctl;
};

struct netns_nexthop {
  struct rb_root rb_root;
  struct hlist_head* devhash;
  unsigned int seq;
  u32 last_id_allocated;
  struct blocking_notifier_head notifier_chain;
};

struct local_ports {
  seqlock_t lock;
  int range[2];
  bool warned;
};

struct inet_hashinfo;

struct inet_timewait_death_row {
  atomic_t tw_count;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct inet_hashinfo* hashinfo;
  int sysctl_max_tw_buckets;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct ping_group_range {
  seqlock_t lock;
  kgid_t range[2];
};

typedef struct {
  u64 key[2];
} siphash_key_t;

struct ipv4_devconf;

struct ip_ra_chain;

struct fib_rules_ops;

struct fib_table;

struct inet_peer_base;

struct fqdir;

struct xt_table;

struct tcp_congestion_ops;

struct tcp_fastopen_context;

struct mr_table;

struct fib_notifier_ops;

struct netns_ipv4 {
  struct ctl_table_header* forw_hdr;
  struct ctl_table_header* frags_hdr;
  struct ctl_table_header* ipv4_hdr;
  struct ctl_table_header* route_hdr;
  struct ctl_table_header* xfrm4_hdr;
  struct ipv4_devconf* devconf_all;
  struct ipv4_devconf* devconf_dflt;
  struct ip_ra_chain* ra_chain;
  struct mutex ra_mutex;
  struct fib_rules_ops* rules_ops;
  bool fib_has_custom_rules;
  unsigned int fib_rules_require_fldissect;
  struct fib_table* fib_main;
  struct fib_table* fib_default;
  bool fib_has_custom_local_routes;
  int fib_num_tclassid_users;
  struct hlist_head* fib_table_hash;
  bool fib_offload_disabled;
  struct sock* fibnl;
  struct sock** icmp_sk;
  struct sock* mc_autojoin_sk;
  struct inet_peer_base* peers;
  struct sock** tcp_sk;
  struct fqdir* fqdir;
  struct xt_table* iptable_filter;
  struct xt_table* iptable_mangle;
  struct xt_table* iptable_raw;
  struct xt_table* arptable_filter;
  struct xt_table* iptable_security;
  struct xt_table* nat_table;
  u8 sysctl_icmp_echo_ignore_all;
  u8 sysctl_icmp_echo_ignore_broadcasts;
  u8 sysctl_icmp_ignore_bogus_error_responses;
  u8 sysctl_icmp_errors_use_inbound_ifaddr;
  int sysctl_icmp_ratelimit;
  int sysctl_icmp_ratemask;
  struct local_ports ip_local_ports;
  u8 sysctl_tcp_ecn;
  u8 sysctl_tcp_ecn_fallback;
  u8 sysctl_ip_default_ttl;
  u8 sysctl_ip_no_pmtu_disc;
  u8 sysctl_ip_fwd_use_pmtu;
  u8 sysctl_ip_fwd_update_priority;
  u8 sysctl_ip_nonlocal_bind;
  u8 sysctl_ip_autobind_reuse;
  u8 sysctl_ip_dynaddr;
  u8 sysctl_ip_early_demux;
  u8 sysctl_tcp_early_demux;
  u8 sysctl_udp_early_demux;
  u8 sysctl_nexthop_compat_mode;
  u8 sysctl_fwmark_reflect;
  u8 sysctl_tcp_fwmark_accept;
  u8 sysctl_tcp_mtu_probing;
  int sysctl_tcp_mtu_probe_floor;
  int sysctl_tcp_base_mss;
  int sysctl_tcp_min_snd_mss;
  int sysctl_tcp_probe_threshold;
  u32 sysctl_tcp_probe_interval;
  int sysctl_tcp_keepalive_time;
  int sysctl_tcp_keepalive_intvl;
  u8 sysctl_tcp_keepalive_probes;
  u8 sysctl_tcp_syn_retries;
  u8 sysctl_tcp_synack_retries;
  u8 sysctl_tcp_syncookies;
  u8 sysctl_tcp_migrate_req;
  int sysctl_tcp_reordering;
  u8 sysctl_tcp_retries1;
  u8 sysctl_tcp_retries2;
  u8 sysctl_tcp_orphan_retries;
  u8 sysctl_tcp_tw_reuse;
  int sysctl_tcp_fin_timeout;
  unsigned int sysctl_tcp_notsent_lowat;
  u8 sysctl_tcp_sack;
  u8 sysctl_tcp_window_scaling;
  u8 sysctl_tcp_timestamps;
  u8 sysctl_tcp_early_retrans;
  u8 sysctl_tcp_recovery;
  u8 sysctl_tcp_thin_linear_timeouts;
  u8 sysctl_tcp_slow_start_after_idle;
  u8 sysctl_tcp_retrans_collapse;
  u8 sysctl_tcp_stdurg;
  u8 sysctl_tcp_rfc1337;
  u8 sysctl_tcp_abort_on_overflow;
  u8 sysctl_tcp_fack;
  int sysctl_tcp_max_reordering;
  int sysctl_tcp_adv_win_scale;
  u8 sysctl_tcp_dsack;
  u8 sysctl_tcp_app_win;
  u8 sysctl_tcp_frto;
  u8 sysctl_tcp_nometrics_save;
  u8 sysctl_tcp_no_ssthresh_metrics_save;
  u8 sysctl_tcp_moderate_rcvbuf;
  u8 sysctl_tcp_tso_win_divisor;
  u8 sysctl_tcp_workaround_signed_windows;
  int sysctl_tcp_limit_output_bytes;
  int sysctl_tcp_challenge_ack_limit;
  int sysctl_tcp_min_rtt_wlen;
  u8 sysctl_tcp_min_tso_segs;
  u8 sysctl_tcp_autocorking;
  u8 sysctl_tcp_reflect_tos;
  int sysctl_tcp_invalid_ratelimit;
  int sysctl_tcp_pacing_ss_ratio;
  int sysctl_tcp_pacing_ca_ratio;
  int sysctl_tcp_wmem[3];
  int sysctl_tcp_rmem[3];
  int sysctl_tcp_comp_sack_nr;
  long unsigned int sysctl_tcp_comp_sack_delay_ns;
  long unsigned int sysctl_tcp_comp_sack_slack_ns;
  struct inet_timewait_death_row tcp_death_row;
  int sysctl_max_syn_backlog;
  int sysctl_tcp_fastopen;
  const struct tcp_congestion_ops* tcp_congestion_control;
  struct tcp_fastopen_context* tcp_fastopen_ctx;
  spinlock_t tcp_fastopen_ctx_lock;
  unsigned int sysctl_tcp_fastopen_blackhole_timeout;
  atomic_t tfo_active_disable_times;
  long unsigned int tfo_active_disable_stamp;
  int sysctl_tcp_min_rto_ms;
  int sysctl_tcp_max_delack_ms;
  int sysctl_udp_wmem_min;
  int sysctl_udp_rmem_min;
  int sysctl_fib_notify_on_flag_change;
  int sysctl_igmp_max_memberships;
  int sysctl_igmp_max_msf;
  int sysctl_igmp_llm_reports;
  int sysctl_igmp_qrv;
  struct ping_group_range ping_group_range;
  atomic_t dev_addr_genid;
  long unsigned int* sysctl_local_reserved_ports;
  int sysctl_ip_prot_sock;
  struct mr_table* mrt;
  int sysctl_fib_multipath_use_neigh;
  int sysctl_fib_multipath_hash_policy;
  struct fib_notifier_ops* notifier_ops;
  unsigned int fib_seq;
  struct fib_notifier_ops* ipmr_notifier_ops;
  unsigned int ipmr_seq;
  atomic_t rt_genid;
  siphash_key_t ip_id_key;
  long : 64;
};

struct netns_sysctl_ipv6 {
  struct ctl_table_header* hdr;
  struct ctl_table_header* route_hdr;
  struct ctl_table_header* icmp_hdr;
  struct ctl_table_header* frags_hdr;
  struct ctl_table_header* xfrm6_hdr;
  int bindv6only;
  int flush_delay;
  int ip6_rt_max_size;
  int ip6_rt_gc_min_interval;
  int ip6_rt_gc_timeout;
  int ip6_rt_gc_interval;
  int ip6_rt_gc_elasticity;
  int ip6_rt_mtu_expires;
  int ip6_rt_min_advmss;
  int multipath_hash_policy;
  int flowlabel_consistency;
  int auto_flowlabels;
  int icmpv6_time;
  int icmpv6_echo_ignore_all;
  int icmpv6_echo_ignore_multicast;
  int icmpv6_echo_ignore_anycast;
  long unsigned int icmpv6_ratemask[4];
  long unsigned int* icmpv6_ratemask_ptr;
  int anycast_src_echo_reply;
  int ip_nonlocal_bind;
  int fwmark_reflect;
  int idgen_retries;
  int idgen_delay;
  int flowlabel_state_ranges;
  int flowlabel_reflect;
  int max_dst_opts_cnt;
  int max_hbh_opts_cnt;
  int max_dst_opts_len;
  int max_hbh_opts_len;
  int seg6_flowlabel;
  bool skip_notify_on_dev_down;
  int fib_notify_on_flag_change;
};

struct neighbour;

struct dst_ops {
  short unsigned int family;
  unsigned int gc_thresh;
  int (*gc)(struct dst_ops*);
  struct dst_entry* (*check)(struct dst_entry*, __u32);
  unsigned int (*default_advmss)(const struct dst_entry*);
  unsigned int (*mtu)(const struct dst_entry*);
  u32* (*cow_metrics)(struct dst_entry*, long unsigned int);
  void (*destroy)(struct dst_entry*);
  void (*ifdown)(struct dst_entry*, struct net_device*, int);
  struct dst_entry* (*negative_advice)(struct dst_entry*);
  void (*link_failure)(struct sk_buff*);
  void (*update_pmtu)(
      struct dst_entry*,
      struct sock*,
      struct sk_buff*,
      u32,
      bool);
  void (*redirect)(struct dst_entry*, struct sock*, struct sk_buff*);
  int (*local_out)(struct net*, struct sock*, struct sk_buff*);
  struct neighbour* (
      *neigh_lookup)(const struct dst_entry*, struct sk_buff*, const void*);
  void (*confirm_neigh)(const struct dst_entry*, const void*);
  struct kmem_cache* kmem_cachep;
  struct percpu_counter pcpuc_entries;
  long : 64;
  long : 64;
  long : 64;
};

struct ipv6_devconf;

struct fib6_info;

struct rt6_info;

struct rt6_statistics;

struct fib6_table;

struct seg6_pernet_data;

struct netns_ipv6 {
  struct netns_sysctl_ipv6 sysctl;
  struct ipv6_devconf* devconf_all;
  struct ipv6_devconf* devconf_dflt;
  struct inet_peer_base* peers;
  struct fqdir* fqdir;
  struct xt_table* ip6table_filter;
  struct xt_table* ip6table_mangle;
  struct xt_table* ip6table_raw;
  struct xt_table* ip6table_security;
  struct xt_table* ip6table_nat;
  struct fib6_info* fib6_null_entry;
  struct rt6_info* ip6_null_entry;
  struct rt6_statistics* rt6_stats;
  struct timer_list ip6_fib_timer;
  struct hlist_head* fib_table_hash;
  struct fib6_table* fib6_main_tbl;
  struct list_head fib6_walkers;
  long : 64;
  long : 64;
  struct dst_ops ip6_dst_ops;
  rwlock_t fib6_walker_lock;
  spinlock_t fib6_gc_lock;
  unsigned int ip6_rt_gc_expire;
  long unsigned int ip6_rt_last_gc;
  unsigned int fib6_rules_require_fldissect;
  bool fib6_has_custom_rules;
  unsigned int fib6_routes_require_src;
  struct rt6_info* ip6_prohibit_entry;
  struct rt6_info* ip6_blk_hole_entry;
  struct fib6_table* fib6_local_tbl;
  struct fib_rules_ops* fib6_rules_ops;
  struct sock** icmp_sk;
  struct sock* ndisc_sk;
  struct sock* tcp_sk;
  struct sock* igmp_sk;
  struct sock* mc_autojoin_sk;
  atomic_t dev_addr_genid;
  atomic_t fib6_sernum;
  struct seg6_pernet_data* seg6_data;
  struct fib_notifier_ops* notifier_ops;
  struct fib_notifier_ops* ip6mr_notifier_ops;
  unsigned int ipmr_seq;
  struct {
    struct hlist_head head;
    spinlock_t lock;
    u32 seq;
  } ip6addrlbl_table;
  long : 64;
  long : 64;
  long : 64;
};

struct nf_queue_handler;

struct nf_logger;

struct nf_hook_entries;

struct netns_nf {
  struct proc_dir_entry* proc_netfilter;
  const struct nf_queue_handler* queue_handler;
  const struct nf_logger* nf_loggers[13];
  struct ctl_table_header* nf_log_dir_header;
  struct nf_hook_entries* hooks_ipv4[5];
  struct nf_hook_entries* hooks_ipv6[5];
  struct nf_hook_entries* hooks_arp[3];
  struct nf_hook_entries* hooks_bridge[5];
  bool defrag_ipv4;
  bool defrag_ipv6;
};

struct ebt_table;

struct netns_xt {
  struct list_head tables[13];
  bool notrack_deprecated_warning;
  bool clusterip_deprecated_warning;
  struct ebt_table* broute_table;
  struct ebt_table* frame_filter;
  struct ebt_table* frame_nat;
};

struct nf_ct_event_notifier;

struct nf_exp_event_notifier;

struct nf_generic_net {
  unsigned int timeout;
};

struct nf_tcp_net {
  unsigned int timeouts[14];
  int tcp_loose;
  int tcp_be_liberal;
  int tcp_max_retrans;
};

struct nf_udp_net {
  unsigned int timeouts[2];
};

struct nf_icmp_net {
  unsigned int timeout;
};

struct nf_ip_net {
  struct nf_generic_net generic;
  struct nf_tcp_net tcp;
  struct nf_udp_net udp;
  struct nf_icmp_net icmp;
  struct nf_icmp_net icmpv6;
};

struct ct_pcpu;

struct ip_conntrack_stat;

struct netns_ct {
  atomic_t count;
  unsigned int expect_count;
  bool auto_assign_helper_warned;
  struct ctl_table_header* sysctl_header;
  unsigned int sysctl_log_invalid;
  int sysctl_events;
  int sysctl_acct;
  int sysctl_auto_assign_helper;
  int sysctl_tstamp;
  int sysctl_checksum;
  struct ct_pcpu* pcpu_lists;
  struct ip_conntrack_stat* stat;
  struct nf_ct_event_notifier* nf_conntrack_event_cb;
  struct nf_exp_event_notifier* nf_expect_event_cb;
  struct nf_ip_net nf_ct_proto;
};

struct netns_nf_frag {
  struct fqdir* fqdir;
};

struct netns_bpf {
  struct bpf_prog_array* run_array[2];
  struct bpf_prog* progs[2];
  struct list_head links[2];
};

struct xfrm_policy_hash {
  struct hlist_head* table;
  unsigned int hmask;
  u8 dbits4;
  u8 sbits4;
  u8 dbits6;
  u8 sbits6;
};

struct xfrm_policy_hthresh {
  struct work_struct work;
  seqlock_t lock;
  u8 lbits4;
  u8 rbits4;
  u8 lbits6;
  u8 rbits6;
};

struct netns_xfrm {
  struct list_head state_all;
  struct hlist_head* state_bydst;
  struct hlist_head* state_bysrc;
  struct hlist_head* state_byspi;
  unsigned int state_hmask;
  unsigned int state_num;
  struct work_struct state_hash_work;
  struct list_head policy_all;
  struct hlist_head* policy_byidx;
  unsigned int policy_idx_hmask;
  struct hlist_head policy_inexact[3];
  struct xfrm_policy_hash policy_bydst[3];
  unsigned int policy_count[6];
  struct work_struct policy_hash_work;
  struct xfrm_policy_hthresh policy_hthresh;
  struct list_head inexact_bins;
  struct sock* nlsk;
  struct sock* nlsk_stash;
  u32 sysctl_aevent_etime;
  u32 sysctl_aevent_rseqth;
  int sysctl_larval_drop;
  u32 sysctl_acq_expires;
  struct ctl_table_header* sysctl_hdr;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct dst_ops xfrm4_dst_ops;
  struct dst_ops xfrm6_dst_ops;
  spinlock_t xfrm_state_lock;
  seqcount_spinlock_t xfrm_state_hash_generation;
  seqcount_spinlock_t xfrm_policy_hash_generation;
  spinlock_t xfrm_policy_lock;
  struct mutex xfrm_cfg_mutex;
  long : 64;
  long : 64;
};

struct netns_ipvs;

struct mpls_route;

struct netns_mpls {
  int ip_ttl_propagate;
  int default_ttl;
  size_t platform_labels;
  struct mpls_route** platform_label;
  struct ctl_table_header* ctl;
};

struct netns_xdp {
  struct mutex lock;
  struct hlist_head list;
};

struct uevent_sock;

struct net_generic;

struct net {
  refcount_t passive;
  spinlock_t rules_mod_lock;
  unsigned int dev_unreg_count;
  unsigned int dev_base_seq;
  int ifindex;
  spinlock_t nsid_lock;
  atomic_t fnhe_genid;
  struct list_head list;
  struct list_head exit_list;
  struct llist_node cleanup_list;
  struct key_tag* key_domain;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  struct idr netns_ids;
  struct ns_common ns;
  struct list_head dev_base_head;
  struct proc_dir_entry* proc_net;
  struct proc_dir_entry* proc_net_stat;
  struct ctl_table_set sysctls;
  struct sock* rtnl;
  struct sock* genl_sock;
  struct uevent_sock* uevent_sock;
  struct hlist_head* dev_name_head;
  struct hlist_head* dev_index_head;
  struct raw_notifier_head netdev_chain;
  u32 hash_mix;
  struct net_device* loopback_dev;
  struct list_head rules_ops;
  struct netns_core core;
  struct netns_mib mib;
  struct netns_packet packet;
  struct netns_unix unx;
  struct netns_nexthop nexthop;
  long : 64;
  long : 64;
  struct netns_ipv4 ipv4;
  struct netns_ipv6 ipv6;
  struct netns_nf nf;
  struct netns_xt xt;
  struct netns_ct ct;
  struct netns_nf_frag nf_frag;
  struct ctl_table_header* nf_frag_frags_hdr;
  struct sock* nfnl;
  struct sock* nfnl_stash;
  struct net_generic* gen;
  struct netns_bpf bpf;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct netns_xfrm xfrm;
  u64 net_cookie;
  struct netns_ipvs* ipvs;
  struct netns_mpls mpls;
  struct netns_xdp xdp;
  struct sock* diag_nlsk;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

typedef struct {
  local64_t v;
} u64_stats_t;

typedef struct {
  union {
    void* kernel;
    void* user;
  };
  bool is_kernel : 1;
} sockptr_t;

struct bpf_offloaded_map;

struct bpf_map_dev_ops {
  int (*map_get_next_key)(struct bpf_offloaded_map*, void*, void*);
  int (*map_lookup_elem)(struct bpf_offloaded_map*, void*, void*);
  int (*map_update_elem)(struct bpf_offloaded_map*, void*, void*, u64);
  int (*map_delete_elem)(struct bpf_offloaded_map*, void*);
};

struct bpf_offloaded_map {
  struct bpf_map map;
  struct net_device* netdev;
  const struct bpf_map_dev_ops* dev_ops;
  void* dev_priv;
  struct list_head offloads;
  long : 64;
  long : 64;
  long : 64;
};

struct net_device_stats {
  long unsigned int rx_packets;
  long unsigned int tx_packets;
  long unsigned int rx_bytes;
  long unsigned int tx_bytes;
  long unsigned int rx_errors;
  long unsigned int tx_errors;
  long unsigned int rx_dropped;
  long unsigned int tx_dropped;
  long unsigned int multicast;
  long unsigned int collisions;
  long unsigned int rx_length_errors;
  long unsigned int rx_over_errors;
  long unsigned int rx_crc_errors;
  long unsigned int rx_frame_errors;
  long unsigned int rx_fifo_errors;
  long unsigned int rx_missed_errors;
  long unsigned int tx_aborted_errors;
  long unsigned int tx_carrier_errors;
  long unsigned int tx_fifo_errors;
  long unsigned int tx_heartbeat_errors;
  long unsigned int tx_window_errors;
  long unsigned int rx_compressed;
  long unsigned int tx_compressed;
};

struct netdev_hw_addr_list {
  struct list_head list;
  int count;
};

struct wireless_dev;

struct mpls_dev;

enum rx_handler_result {
  RX_HANDLER_CONSUMED = 0,
  RX_HANDLER_ANOTHER = 1,
  RX_HANDLER_EXACT = 2,
  RX_HANDLER_PASS = 3,
};

typedef enum rx_handler_result rx_handler_result_t;

typedef rx_handler_result_t rx_handler_func_t(struct sk_buff**);

enum netdev_ml_priv_type {
  ML_PRIV_NONE = 0,
  ML_PRIV_CAN = 1,
};

struct pcpu_dstats;

struct netdev_tc_txq {
  u16 count;
  u16 offset;
};

struct sfp_bus;

struct udp_tunnel_nic;

struct bpf_xdp_link;

struct bpf_xdp_entity {
  struct bpf_prog* prog;
  struct bpf_xdp_link* link;
};

struct netdev_name_node;

struct dev_ifalias;

struct net_device_ops;

struct ethtool_ops;

struct ndisc_ops;

struct header_ops;

struct vlan_info;

struct in_device;

struct inet6_dev;

struct wpan_dev;

struct netdev_rx_queue;

struct mini_Qdisc;

struct netdev_queue;

struct cpu_rmap;

struct Qdisc;

struct xdp_dev_bulk_queue;

struct xps_dev_maps;

struct netpoll_info;

struct pcpu_lstats;

struct pcpu_sw_netstats;

struct rtnl_link_ops;

struct dcbnl_rtnl_ops;

struct netprio_map;

struct phy_device;

struct udp_tunnel_nic_info;

struct net_device {
  char name[16];
  struct netdev_name_node* name_node;
  struct dev_ifalias* ifalias;
  long unsigned int mem_end;
  long unsigned int mem_start;
  long unsigned int base_addr;
  long unsigned int state;
  struct list_head dev_list;
  struct list_head napi_list;
  struct list_head unreg_list;
  struct list_head close_list;
  struct list_head ptype_all;
  struct list_head ptype_specific;
  struct {
    struct list_head upper;
    struct list_head lower;
  } adj_list;
  unsigned int flags;
  unsigned int priv_flags;
  const struct net_device_ops* netdev_ops;
  int ifindex;
  short unsigned int gflags;
  short unsigned int hard_header_len;
  unsigned int mtu;
  short unsigned int needed_headroom;
  short unsigned int needed_tailroom;
  netdev_features_t features;
  netdev_features_t hw_features;
  netdev_features_t wanted_features;
  netdev_features_t vlan_features;
  netdev_features_t hw_enc_features;
  netdev_features_t mpls_features;
  netdev_features_t gso_partial_features;
  unsigned int min_mtu;
  unsigned int max_mtu;
  short unsigned int type;
  unsigned char min_header_len;
  unsigned char name_assign_type;
  int group;
  struct net_device_stats stats;
  atomic_long_t rx_dropped;
  atomic_long_t tx_dropped;
  atomic_long_t rx_nohandler;
  atomic_t carrier_up_count;
  atomic_t carrier_down_count;
  const struct ethtool_ops* ethtool_ops;
  const struct ndisc_ops* ndisc_ops;
  const struct header_ops* header_ops;
  unsigned char operstate;
  unsigned char link_mode;
  unsigned char if_port;
  unsigned char dma;
  unsigned char perm_addr[32];
  unsigned char addr_assign_type;
  unsigned char addr_len;
  unsigned char upper_level;
  unsigned char lower_level;
  short unsigned int neigh_priv_len;
  short unsigned int dev_id;
  short unsigned int dev_port;
  short unsigned int padded;
  spinlock_t addr_list_lock;
  int irq;
  struct netdev_hw_addr_list uc;
  struct netdev_hw_addr_list mc;
  struct netdev_hw_addr_list dev_addrs;
  struct kset* queues_kset;
  unsigned int promiscuity;
  unsigned int allmulti;
  bool uc_promisc;
  struct vlan_info* vlan_info;
  struct in_device* ip_ptr;
  struct inet6_dev* ip6_ptr;
  struct wireless_dev* ieee80211_ptr;
  struct wpan_dev* ieee802154_ptr;
  struct mpls_dev* mpls_ptr;
  unsigned char* dev_addr;
  struct netdev_rx_queue* _rx;
  unsigned int num_rx_queues;
  unsigned int real_num_rx_queues;
  struct bpf_prog* xdp_prog;
  long unsigned int gro_flush_timeout;
  int napi_defer_hard_irqs;
  rx_handler_func_t* rx_handler;
  void* rx_handler_data;
  struct mini_Qdisc* miniq_ingress;
  struct netdev_queue* ingress_queue;
  unsigned char broadcast[32];
  struct cpu_rmap* rx_cpu_rmap;
  struct hlist_node index_hlist;
  long : 64;
  long : 64;
  long : 64;
  struct netdev_queue* _tx;
  unsigned int num_tx_queues;
  unsigned int real_num_tx_queues;
  struct Qdisc* qdisc;
  unsigned int tx_queue_len;
  spinlock_t tx_global_lock;
  struct xdp_dev_bulk_queue* xdp_bulkq;
  struct xps_dev_maps* xps_cpus_map;
  struct xps_dev_maps* xps_rxqs_map;
  struct mini_Qdisc* miniq_egress;
  struct hlist_head qdisc_hash[16];
  struct timer_list watchdog_timer;
  int watchdog_timeo;
  u32 proto_down_reason;
  struct list_head todo_list;
  int* pcpu_refcnt;
  struct list_head link_watch_list;
  enum {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5,
  } reg_state : 8;
  bool dismantle;
  enum {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1,
  } rtnl_link_state : 16;
  bool needs_free_netdev;
  void (*priv_destructor)(struct net_device*);
  struct netpoll_info* npinfo;
  possible_net_t nd_net;
  void* ml_priv;
  enum netdev_ml_priv_type ml_priv_type;
  union {
    struct pcpu_lstats* lstats;
    struct pcpu_sw_netstats* tstats;
    struct pcpu_dstats* dstats;
  };
  struct device dev;
  const struct attribute_group* sysfs_groups[4];
  const struct attribute_group* sysfs_rx_queue_group;
  const struct rtnl_link_ops* rtnl_link_ops;
  unsigned int gso_max_size;
  u16 gso_max_segs;
  const struct dcbnl_rtnl_ops* dcbnl_ops;
  s16 num_tc;
  struct netdev_tc_txq tc_to_txq[16];
  u8 prio_tc_map[16];
  struct netprio_map* priomap;
  struct phy_device* phydev;
  struct sfp_bus* sfp_bus;
  struct lock_class_key* qdisc_tx_busylock;
  struct lock_class_key* qdisc_running_key;
  bool proto_down;
  unsigned int wol_enabled : 1;
  unsigned int threaded : 1;
  struct list_head net_notifier_list;
  const struct udp_tunnel_nic_info* udp_tunnel_nic_info;
  struct udp_tunnel_nic* udp_tunnel_nic;
  struct bpf_xdp_entity xdp_state[3];
  long : 64;
};

struct bpf_dispatcher_prog {
  struct bpf_prog* prog;
  refcount_t users;
};

struct bpf_dispatcher {
  struct mutex mutex;
  void* func;
  struct bpf_dispatcher_prog progs[48];
  int num_progs;
  void* image;
  u32 image_off;
  struct bpf_ksym ksym;
};

typedef unsigned int sk_buff_data_t;

struct skb_ext;

struct sk_buff {
  union {
    struct {
      struct sk_buff* next;
      struct sk_buff* prev;
      union {
        struct net_device* dev;
        long unsigned int dev_scratch;
      };
    };
    struct rb_node rbnode;
    struct list_head list;
  };
  union {
    struct sock* sk;
    int ip_defrag_offset;
  };
  union {
    ktime_t tstamp;
    u64 skb_mstamp_ns;
  };
  char cb[48];
  union {
    struct {
      long unsigned int _skb_refdst;
      void (*destructor)(struct sk_buff*);
    };
    struct list_head tcp_tsorted_anchor;
    long unsigned int _sk_redir;
  };
  long unsigned int _nfct;
  unsigned int len;
  unsigned int data_len;
  __u16 mac_len;
  __u16 hdr_len;
  __u16 queue_mapping;
  __u8 __cloned_offset[0];
  __u8 cloned : 1;
  __u8 nohdr : 1;
  __u8 fclone : 2;
  __u8 peeked : 1;
  __u8 head_frag : 1;
  __u8 pfmemalloc : 1;
  __u8 active_extensions;
  __u32 headers_start[0];
  __u8 __pkt_type_offset[0];
  __u8 pkt_type : 3;
  __u8 ignore_df : 1;
  __u8 nf_trace : 1;
  __u8 ip_summed : 2;
  __u8 ooo_okay : 1;
  __u8 l4_hash : 1;
  __u8 sw_hash : 1;
  __u8 wifi_acked_valid : 1;
  __u8 wifi_acked : 1;
  __u8 no_fcs : 1;
  __u8 encapsulation : 1;
  __u8 encap_hdr_csum : 1;
  __u8 csum_valid : 1;
  __u8 __pkt_vlan_present_offset[0];
  __u8 vlan_present : 1;
  __u8 csum_complete_sw : 1;
  __u8 csum_level : 2;
  __u8 csum_not_inet : 1;
  __u8 dst_pending_confirm : 1;
  __u8 ndisc_nodetype : 2;
  __u8 ipvs_property : 1;
  __u8 inner_protocol_type : 1;
  __u8 remcsum_offload : 1;
  __u8 offload_fwd_mark : 1;
  __u8 offload_l3_fwd_mark : 1;
  __u8 tc_skip_classify : 1;
  __u8 tc_at_ingress : 1;
  __u8 redirected : 1;
  __u16 tc_index;
  union {
    __wsum csum;
    struct {
      __u16 csum_start;
      __u16 csum_offset;
    };
  };
  __u32 priority;
  int skb_iif;
  __u32 hash;
  __be16 vlan_proto;
  __u16 vlan_tci;
  union {
    unsigned int napi_id;
    unsigned int sender_cpu;
  };
  __u32 secmark;
  union {
    __u32 mark;
    __u32 reserved_tailroom;
  };
  union {
    __be16 inner_protocol;
    __u8 inner_ipproto;
  };
  __u16 inner_transport_header;
  __u16 inner_network_header;
  __u16 inner_mac_header;
  __be16 protocol;
  __u16 transport_header;
  __u16 network_header;
  __u16 mac_header;
  __u32 headers_end[0];
  sk_buff_data_t tail;
  sk_buff_data_t end;
  unsigned char* head;
  unsigned char* data;
  unsigned int truesize;
  refcount_t users;
  struct skb_ext* extensions;
};

enum suspend_stat_step {
  SUSPEND_FREEZE = 1,
  SUSPEND_PREPARE = 2,
  SUSPEND_SUSPEND = 3,
  SUSPEND_SUSPEND_LATE = 4,
  SUSPEND_SUSPEND_NOIRQ = 5,
  SUSPEND_RESUME_NOIRQ = 6,
  SUSPEND_RESUME_EARLY = 7,
  SUSPEND_RESUME = 8,
};

struct suspend_stats {
  int success;
  int fail;
  int failed_freeze;
  int failed_prepare;
  int failed_suspend;
  int failed_suspend_late;
  int failed_suspend_noirq;
  int failed_resume;
  int failed_resume_early;
  int failed_resume_noirq;
  int last_failed_dev;
  char failed_devs[80];
  int last_failed_errno;
  int errno[2];
  int last_failed_step;
  enum suspend_stat_step failed_steps[2];
};

enum {
  Root_NFS = 255,
  Root_CIFS = 254,
  Root_RAM0 = 1048576,
  Root_RAM1 = 1048577,
  Root_FD0 = 2097152,
  Root_HDA1 = 3145729,
  Root_HDA2 = 3145730,
  Root_SDA1 = 8388609,
  Root_SDA2 = 8388610,
  Root_HDC1 = 23068673,
  Root_SR0 = 11534336,
};

struct xdr_buf {
  struct kvec head[1];
  struct kvec tail[1];
  struct bio_vec* bvec;
  struct page** pages;
  unsigned int page_base;
  unsigned int page_len;
  unsigned int flags;
  unsigned int buflen;
  unsigned int len;
};

struct rpc_rqst;

struct xdr_stream {
  __be32* p;
  struct xdr_buf* buf;
  __be32* end;
  struct kvec* iov;
  struct kvec scratch;
  struct page** page_ptr;
  unsigned int nwords;
  struct rpc_rqst* rqst;
};

struct rpc_xprt;

struct rpc_task;

struct rpc_cred;

struct rpc_rqst {
  struct rpc_xprt* rq_xprt;
  struct xdr_buf rq_snd_buf;
  struct xdr_buf rq_rcv_buf;
  struct rpc_task* rq_task;
  struct rpc_cred* rq_cred;
  __be32 rq_xid;
  int rq_cong;
  u32 rq_seqno;
  int rq_enc_pages_num;
  struct page** rq_enc_pages;
  void (*rq_release_snd_buf)(struct rpc_rqst*);
  union {
    struct list_head rq_list;
    struct rb_node rq_recv;
  };
  struct list_head rq_xmit;
  struct list_head rq_xmit2;
  void* rq_buffer;
  size_t rq_callsize;
  void* rq_rbuffer;
  size_t rq_rcvsize;
  size_t rq_xmit_bytes_sent;
  size_t rq_reply_bytes_recvd;
  struct xdr_buf rq_private_buf;
  long unsigned int rq_majortimeo;
  long unsigned int rq_minortimeo;
  long unsigned int rq_timeout;
  ktime_t rq_rtt;
  unsigned int rq_retries;
  unsigned int rq_connect_cookie;
  atomic_t rq_pin;
  u32 rq_bytes_sent;
  ktime_t rq_xtime;
  int rq_ntrans;
};

typedef void (*kxdreproc_t)(struct rpc_rqst*, struct xdr_stream*, const void*);

typedef int (*kxdrdproc_t)(struct rpc_rqst*, struct xdr_stream*, void*);

struct rpc_procinfo;

struct rpc_message {
  const struct rpc_procinfo* rpc_proc;
  void* rpc_argp;
  void* rpc_resp;
  const struct cred* rpc_cred;
};

struct rpc_procinfo {
  u32 p_proc;
  kxdreproc_t p_encode;
  kxdrdproc_t p_decode;
  unsigned int p_arglen;
  unsigned int p_replen;
  unsigned int p_timer;
  u32 p_statidx;
  const char* p_name;
};

struct rpc_wait {
  struct list_head list;
  struct list_head links;
  struct list_head timer_list;
};

struct rpc_wait_queue;

struct rpc_call_ops;

struct rpc_clnt;

struct rpc_task {
  atomic_t tk_count;
  int tk_status;
  struct list_head tk_task;
  void (*tk_callback)(struct rpc_task*);
  void (*tk_action)(struct rpc_task*);
  long unsigned int tk_timeout;
  long unsigned int tk_runstate;
  struct rpc_wait_queue* tk_waitqueue;
  union {
    struct work_struct tk_work;
    struct rpc_wait tk_wait;
  } u;
  int tk_rpc_status;
  struct rpc_message tk_msg;
  void* tk_calldata;
  const struct rpc_call_ops* tk_ops;
  struct rpc_clnt* tk_client;
  struct rpc_xprt* tk_xprt;
  struct rpc_cred* tk_op_cred;
  struct rpc_rqst* tk_rqstp;
  struct workqueue_struct* tk_workqueue;
  ktime_t tk_start;
  pid_t tk_owner;
  short unsigned int tk_flags;
  short unsigned int tk_timeouts;
  short unsigned int tk_pid;
  unsigned char tk_priority : 2;
  unsigned char tk_garb_retry : 2;
  unsigned char tk_cred_retry : 2;
  unsigned char tk_rebind_retry : 2;
};

struct rpc_timer {
  struct list_head list;
  long unsigned int expires;
  struct delayed_work dwork;
};

struct rpc_wait_queue {
  spinlock_t lock;
  struct list_head tasks[4];
  unsigned char maxpriority;
  unsigned char priority;
  unsigned char nr;
  short unsigned int qlen;
  struct rpc_timer timer_list;
  const char* name;
};

struct rpc_call_ops {
  void (*rpc_call_prepare)(struct rpc_task*, void*);
  void (*rpc_call_done)(struct rpc_task*, void*);
  void (*rpc_count_stats)(struct rpc_task*, void*);
  void (*rpc_release)(void*);
};

struct rpc_iostats;

struct rpc_pipe_dir_head {
  struct list_head pdh_entries;
  struct dentry* pdh_dentry;
};

struct rpc_rtt {
  long unsigned int timeo;
  long unsigned int srtt[5];
  long unsigned int sdrtt[5];
  int ntimeouts[5];
};

struct rpc_timeout {
  long unsigned int to_initval;
  long unsigned int to_maxval;
  long unsigned int to_increment;
  unsigned int to_retries;
  unsigned char to_exponential;
};

struct rpc_xprt_switch;

struct rpc_xprt_iter_ops;

struct rpc_xprt_iter {
  struct rpc_xprt_switch* xpi_xpswitch;
  struct rpc_xprt* xpi_cursor;
  const struct rpc_xprt_iter_ops* xpi_ops;
};

struct rpc_auth;

struct rpc_stat;

struct rpc_program;

struct rpc_clnt {
  atomic_t cl_count;
  unsigned int cl_clid;
  struct list_head cl_clients;
  struct list_head cl_tasks;
  spinlock_t cl_lock;
  struct rpc_xprt* cl_xprt;
  const struct rpc_procinfo* cl_procinfo;
  u32 cl_prog;
  u32 cl_vers;
  u32 cl_maxproc;
  struct rpc_auth* cl_auth;
  struct rpc_stat* cl_stats;
  struct rpc_iostats* cl_metrics;
  unsigned int cl_softrtry : 1;
  unsigned int cl_softerr : 1;
  unsigned int cl_discrtry : 1;
  unsigned int cl_noretranstimeo : 1;
  unsigned int cl_autobind : 1;
  unsigned int cl_chatty : 1;
  struct rpc_rtt* cl_rtt;
  const struct rpc_timeout* cl_timeout;
  atomic_t cl_swapper;
  int cl_nodelen;
  char cl_nodename[65];
  struct rpc_pipe_dir_head cl_pipedir_objects;
  struct rpc_clnt* cl_parent;
  struct rpc_rtt cl_rtt_default;
  struct rpc_timeout cl_timeout_default;
  const struct rpc_program* cl_program;
  const char* cl_principal;
  union {
    struct rpc_xprt_iter cl_xpi;
    struct work_struct cl_work;
  };
  const struct cred* cl_cred;
};

struct svc_xprt;

struct rpc_xprt_ops;

struct rpc_xprt {
  struct kref kref;
  const struct rpc_xprt_ops* ops;
  const struct rpc_timeout* timeout;
  struct __kernel_sockaddr_storage addr;
  size_t addrlen;
  int prot;
  long unsigned int cong;
  long unsigned int cwnd;
  size_t max_payload;
  struct rpc_wait_queue binding;
  struct rpc_wait_queue sending;
  struct rpc_wait_queue pending;
  struct rpc_wait_queue backlog;
  struct list_head free;
  unsigned int max_reqs;
  unsigned int min_reqs;
  unsigned int num_reqs;
  long unsigned int state;
  unsigned char resvport : 1;
  unsigned char reuseport : 1;
  atomic_t swapper;
  unsigned int bind_index;
  struct list_head xprt_switch;
  long unsigned int bind_timeout;
  long unsigned int reestablish_timeout;
  unsigned int connect_cookie;
  struct work_struct task_cleanup;
  struct timer_list timer;
  long unsigned int last_used;
  long unsigned int idle_timeout;
  long unsigned int connect_timeout;
  long unsigned int max_reconnect_timeout;
  atomic_long_t queuelen;
  spinlock_t transport_lock;
  spinlock_t reserve_lock;
  spinlock_t queue_lock;
  u32 xid;
  struct rpc_task* snd_task;
  struct list_head xmit_queue;
  struct svc_xprt* bc_xprt;
  struct rb_root recv_queue;
  struct {
    long unsigned int bind_count;
    long unsigned int connect_count;
    long unsigned int connect_start;
    long unsigned int connect_time;
    long unsigned int sends;
    long unsigned int recvs;
    long unsigned int bad_xids;
    long unsigned int max_slots;
    long long unsigned int req_u;
    long long unsigned int bklog_u;
    long long unsigned int sending_u;
    long long unsigned int pending_u;
  } stat;
  struct net* xprt_net;
  const char* servername;
  const char* address_strings[6];
  struct callback_head rcu;
};

struct rpc_credops;

struct rpc_cred {
  struct hlist_node cr_hash;
  struct list_head cr_lru;
  struct callback_head cr_rcu;
  struct rpc_auth* cr_auth;
  const struct rpc_credops* cr_ops;
  long unsigned int cr_expire;
  long unsigned int cr_flags;
  refcount_t cr_count;
  const struct cred* cr_cred;
};

typedef u32 rpc_authflavor_t;

struct flow_dissector {
  unsigned int used_keys;
  short unsigned int offset[28];
};

struct flowi_tunnel {
  __be64 tun_id;
};

struct flowi_common {
  int flowic_oif;
  int flowic_iif;
  __u32 flowic_mark;
  __u8 flowic_tos;
  __u8 flowic_scope;
  __u8 flowic_proto;
  __u8 flowic_flags;
  __u32 flowic_secid;
  kuid_t flowic_uid;
  struct flowi_tunnel flowic_tun_key;
  __u32 flowic_multipath_hash;
};

union flowi_uli {
  struct {
    __be16 dport;
    __be16 sport;
  } ports;
  struct {
    __u8 type;
    __u8 code;
  } icmpt;
  struct {
    __le16 dport;
    __le16 sport;
  } dnports;
  __be32 spi;
  __be32 gre_key;
  struct {
    __u8 type;
  } mht;
};

struct flowi4 {
  struct flowi_common __fl_common;
  __be32 saddr;
  __be32 daddr;
  union flowi_uli uli;
};

struct flowi6 {
  struct flowi_common __fl_common;
  struct in6_addr daddr;
  struct in6_addr saddr;
  __be32 flowlabel;
  union flowi_uli uli;
  __u32 mp_hash;
};

struct flowidn {
  struct flowi_common __fl_common;
  __le16 daddr;
  __le16 saddr;
  union flowi_uli uli;
};

struct flowi {
  union {
    struct flowi_common __fl_common;
    struct flowi4 ip4;
    struct flowi6 ip6;
    struct flowidn dn;
  } u;
};

struct ipstats_mib {
  u64 mibs[37];
  struct u64_stats_sync syncp;
};

struct icmp_mib {
  long unsigned int mibs[28];
};

struct icmpmsg_mib {
  atomic_long_t mibs[512];
};

struct icmpv6_mib {
  long unsigned int mibs[6];
};

struct icmpv6_mib_device {
  atomic_long_t mibs[6];
};

struct icmpv6msg_mib {
  atomic_long_t mibs[512];
};

struct icmpv6msg_mib_device {
  atomic_long_t mibs[512];
};

struct tcp_mib {
  long unsigned int mibs[16];
};

struct udp_mib {
  long unsigned int mibs[10];
};

struct linux_mib {
  long unsigned int mibs[124];
};

struct linux_tls_mib {
  long unsigned int mibs[11];
};

struct inet_frags;

struct fqdir {
  long int high_thresh;
  long int low_thresh;
  int timeout;
  int max_dist;
  struct inet_frags* f;
  struct net* net;
  bool dead;
  long : 56;
  long : 64;
  long : 64;
  struct rhashtable rhashtable;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  atomic_long_t mem;
  struct work_struct destroy_work;
  struct llist_node free_list;
  long : 64;
  long : 64;
};

struct inet_frag_queue;

struct inet_frags {
  unsigned int qsize;
  void (*constructor)(struct inet_frag_queue*, const void*);
  void (*destructor)(struct inet_frag_queue*);
  void (*frag_expire)(struct timer_list*);
  struct kmem_cache* frags_cachep;
  const char* frags_cache_name;
  struct rhashtable_params rhash_params;
  refcount_t refcnt;
  struct completion completion;
};

struct frag_v4_compare_key {
  __be32 saddr;
  __be32 daddr;
  u32 user;
  u32 vif;
  __be16 id;
  u16 protocol;
};

struct frag_v6_compare_key {
  struct in6_addr saddr;
  struct in6_addr daddr;
  u32 user;
  __be32 id;
  u32 iif;
};

struct inet_frag_queue {
  struct rhash_head node;
  union {
    struct frag_v4_compare_key v4;
    struct frag_v6_compare_key v6;
  } key;
  struct timer_list timer;
  spinlock_t lock;
  refcount_t refcnt;
  struct rb_root rb_fragments;
  struct sk_buff* fragments_tail;
  struct sk_buff* last_run_head;
  ktime_t stamp;
  int len;
  int meat;
  __u8 flags;
  u16 max_size;
  struct fqdir* fqdir;
  struct callback_head rcu;
};

struct fib_rule;

struct fib_lookup_arg;

struct fib_rule_hdr;

struct nlattr;

struct netlink_ext_ack;

struct nla_policy;

struct fib_rules_ops {
  int family;
  struct list_head list;
  int rule_size;
  int addr_size;
  int unresolved_rules;
  int nr_goto_rules;
  unsigned int fib_rules_seq;
  int (*action)(struct fib_rule*, struct flowi*, int, struct fib_lookup_arg*);
  bool (*suppress)(struct fib_rule*, struct fib_lookup_arg*);
  int (*match)(struct fib_rule*, struct flowi*, int);
  int (*configure)(
      struct fib_rule*,
      struct sk_buff*,
      struct fib_rule_hdr*,
      struct nlattr**,
      struct netlink_ext_ack*);
  int (*delete)(struct fib_rule*);
  int (*compare)(struct fib_rule*, struct fib_rule_hdr*, struct nlattr**);
  int (*fill)(struct fib_rule*, struct sk_buff*, struct fib_rule_hdr*);
  size_t (*nlmsg_payload)(struct fib_rule*);
  void (*flush_cache)(struct fib_rules_ops*);
  int nlgroup;
  const struct nla_policy* policy;
  struct list_head rules_list;
  struct module* owner;
  struct net* fro_net;
  struct callback_head rcu;
};

enum tcp_ca_event {
  CA_EVENT_TX_START = 0,
  CA_EVENT_CWND_RESTART = 1,
  CA_EVENT_COMPLETE_CWR = 2,
  CA_EVENT_LOSS = 3,
  CA_EVENT_ECN_NO_CE = 4,
  CA_EVENT_ECN_IS_CE = 5,
};

struct ack_sample;

struct rate_sample;

union tcp_cc_info;

struct tcp_congestion_ops {
  struct list_head list;
  u32 key;
  u32 flags;
  void (*init)(struct sock*);
  void (*release)(struct sock*);
  u32 (*ssthresh)(struct sock*);
  void (*cong_avoid)(struct sock*, u32, u32);
  void (*set_state)(struct sock*, u8);
  void (*cwnd_event)(struct sock*, enum tcp_ca_event);
  void (*in_ack_event)(struct sock*, u32);
  u32 (*undo_cwnd)(struct sock*);
  void (*pkts_acked)(struct sock*, const struct ack_sample*);
  u32 (*min_tso_segs)(struct sock*);
  u32 (*sndbuf_expand)(struct sock*);
  void (*cong_control)(struct sock*, const struct rate_sample*);
  size_t (*get_info)(struct sock*, u32, int*, union tcp_cc_info*);
  char name[16];
  struct module* owner;
};

struct fib_notifier_ops {
  int family;
  struct list_head list;
  unsigned int (*fib_seq_read)(struct net*);
  int (*fib_dump)(struct net*, struct notifier_block*, struct netlink_ext_ack*);
  struct module* owner;
  struct callback_head rcu;
};

struct xfrm_state;

struct lwtunnel_state;

struct dst_entry {
  struct net_device* dev;
  struct dst_ops* ops;
  long unsigned int _metrics;
  long unsigned int expires;
  struct xfrm_state* xfrm;
  int (*input)(struct sk_buff*);
  int (*output)(struct net*, struct sock*, struct sk_buff*);
  short unsigned int flags;
  short int obsolete;
  short unsigned int header_len;
  short unsigned int trailer_len;
  atomic_t __refcnt;
  int __use;
  long unsigned int lastuse;
  struct lwtunnel_state* lwtstate;
  struct callback_head callback_head;
  short int error;
  short int __pad;
  __u32 tclassid;
};

struct hh_cache {
  unsigned int hh_len;
  seqlock_t hh_lock;
  long unsigned int hh_data[4];
};

struct neigh_table;

struct neigh_parms;

struct neigh_ops;

struct neighbour {
  struct neighbour* next;
  struct neigh_table* tbl;
  struct neigh_parms* parms;
  long unsigned int confirmed;
  long unsigned int updated;
  rwlock_t lock;
  refcount_t refcnt;
  unsigned int arp_queue_len_bytes;
  struct sk_buff_head arp_queue;
  struct timer_list timer;
  long unsigned int used;
  atomic_t probes;
  __u8 flags;
  __u8 nud_state;
  __u8 type;
  __u8 dead;
  u8 protocol;
  seqlock_t ha_lock;
  int : 32;
  unsigned char ha[32];
  struct hh_cache hh;
  int (*output)(struct neighbour*, struct sk_buff*);
  const struct neigh_ops* ops;
  struct list_head gc_list;
  struct callback_head rcu;
  struct net_device* dev;
  u8 primary_key[0];
};

struct ipv6_stable_secret {
  bool initialized;
  struct in6_addr secret;
};

struct ipv6_devconf {
  __s32 forwarding;
  __s32 hop_limit;
  __s32 mtu6;
  __s32 accept_ra;
  __s32 accept_redirects;
  __s32 autoconf;
  __s32 dad_transmits;
  __s32 rtr_solicits;
  __s32 rtr_solicit_interval;
  __s32 rtr_solicit_max_interval;
  __s32 rtr_solicit_delay;
  __s32 force_mld_version;
  __s32 mldv1_unsolicited_report_interval;
  __s32 mldv2_unsolicited_report_interval;
  __s32 use_tempaddr;
  __s32 temp_valid_lft;
  __s32 temp_prefered_lft;
  __s32 regen_max_retry;
  __s32 max_desync_factor;
  __s32 max_addresses;
  __s32 accept_ra_defrtr;
  __u32 ra_defrtr_metric;
  __s32 accept_ra_min_hop_limit;
  __s32 accept_ra_pinfo;
  __s32 ignore_routes_with_linkdown;
  __s32 accept_ra_rtr_pref;
  __s32 rtr_probe_interval;
  __s32 accept_ra_rt_info_min_plen;
  __s32 accept_ra_rt_info_max_plen;
  __s32 proxy_ndp;
  __s32 accept_source_route;
  __s32 accept_ra_from_local;
  __s32 disable_ipv6;
  __s32 drop_unicast_in_l2_multicast;
  __s32 accept_dad;
  __s32 force_tllao;
  __s32 ndisc_notify;
  __s32 suppress_frag_ndisc;
  __s32 accept_ra_mtu;
  __s32 drop_unsolicited_na;
  struct ipv6_stable_secret stable_secret;
  __s32 use_oif_addrs_only;
  __s32 keep_addr_on_down;
  __s32 seg6_enabled;
  __u32 enhanced_dad;
  __u32 addr_gen_mode;
  __s32 disable_policy;
  __s32 ndisc_tclass;
  __s32 rpl_seg_enabled;
  struct ctl_table_header* sysctl_header;
};

struct nf_queue_entry;

struct nf_queue_handler {
  int (*outfn)(struct nf_queue_entry*, unsigned int);
  void (*nf_hook_drop)(struct net*);
};

enum nf_log_type {
  NF_LOG_TYPE_LOG = 0,
  NF_LOG_TYPE_ULOG = 1,
  NF_LOG_TYPE_MAX = 2,
};

typedef u8 u_int8_t;

struct nf_loginfo;

typedef void nf_logfn(
    struct net*,
    u_int8_t,
    unsigned int,
    const struct sk_buff*,
    const struct net_device*,
    const struct net_device*,
    const struct nf_loginfo*,
    const char*);

struct nf_logger {
  char* name;
  enum nf_log_type type;
  nf_logfn* logfn;
  struct module* me;
};

struct hlist_nulls_head {
  struct hlist_nulls_node* first;
};

struct ct_pcpu {
  spinlock_t lock;
  struct hlist_nulls_head unconfirmed;
  struct hlist_nulls_head dying;
};

struct ip_conntrack_stat {
  unsigned int found;
  unsigned int invalid;
  unsigned int insert;
  unsigned int insert_failed;
  unsigned int clash_resolve;
  unsigned int drop;
  unsigned int early_drop;
  unsigned int error;
  unsigned int expect_new;
  unsigned int expect_create;
  unsigned int expect_delete;
  unsigned int search_restart;
};

typedef enum {
  SS_FREE = 0,
  SS_UNCONNECTED = 1,
  SS_CONNECTING = 2,
  SS_CONNECTED = 3,
  SS_DISCONNECTING = 4,
} socket_state;

struct socket_wq {
  wait_queue_head_t wait;
  struct fasync_struct* fasync_list;
  long unsigned int flags;
  struct callback_head rcu;
  long : 64;
};

struct proto_ops;

struct socket {
  socket_state state;
  short int type;
  long unsigned int flags;
  struct file* file;
  struct sock* sk;
  const struct proto_ops* ops;
  long : 64;
  long : 64;
  long : 64;
  struct socket_wq wq;
};

typedef int (*sk_read_actor_t)(
    read_descriptor_t*,
    struct sk_buff*,
    unsigned int,
    size_t);

struct proto_ops {
  int family;
  struct module* owner;
  int (*release)(struct socket*);
  int (*bind)(struct socket*, struct sockaddr*, int);
  int (*connect)(struct socket*, struct sockaddr*, int, int);
  int (*socketpair)(struct socket*, struct socket*);
  int (*accept)(struct socket*, struct socket*, int, bool);
  int (*getname)(struct socket*, struct sockaddr*, int);
  __poll_t (*poll)(struct file*, struct socket*, struct poll_table_struct*);
  int (*ioctl)(struct socket*, unsigned int, long unsigned int);
  int (*compat_ioctl)(struct socket*, unsigned int, long unsigned int);
  int (*gettstamp)(struct socket*, void*, bool, bool);
  int (*listen)(struct socket*, int);
  int (*shutdown)(struct socket*, int);
  int (*setsockopt)(struct socket*, int, int, sockptr_t, unsigned int);
  int (*getsockopt)(struct socket*, int, int, char*, int*);
  void (*show_fdinfo)(struct seq_file*, struct socket*);
  int (*sendmsg)(struct socket*, struct msghdr*, size_t);
  int (*recvmsg)(struct socket*, struct msghdr*, size_t, int);
  int (*mmap)(struct file*, struct socket*, struct vm_area_struct*);
  ssize_t (*sendpage)(struct socket*, struct page*, int, size_t, int);
  ssize_t (*splice_read)(
      struct socket*,
      loff_t*,
      struct pipe_inode_info*,
      size_t,
      unsigned int);
  int (*set_peek_off)(struct sock*, int);
  int (*peek_len)(struct socket*);
  int (*read_sock)(struct sock*, read_descriptor_t*, sk_read_actor_t);
  int (*sendpage_locked)(struct sock*, struct page*, int, size_t, int);
  int (*sendmsg_locked)(struct sock*, struct msghdr*, size_t);
  int (*set_rcvlowat)(struct sock*, int);
};

struct pipe_buf_operations;

struct pipe_buffer {
  struct page* page;
  unsigned int offset;
  unsigned int len;
  const struct pipe_buf_operations* ops;
  unsigned int flags;
  long unsigned int private;
};

struct pipe_buf_operations {
  int (*confirm)(struct pipe_inode_info*, struct pipe_buffer*);
  void (*release)(struct pipe_inode_info*, struct pipe_buffer*);
  bool (*try_steal)(struct pipe_inode_info*, struct pipe_buffer*);
  bool (*get)(struct pipe_inode_info*, struct pipe_buffer*);
};

struct skb_ext {
  refcount_t refcnt;
  u8 offset[2];
  u8 chunks;
  char : 8;
  char data[0];
};

struct skb_checksum_ops {
  __wsum (*update)(const void*, int, __wsum);
  __wsum (*combine)(__wsum, __wsum, int, int);
};

struct pernet_operations {
  struct list_head list;
  int (*init)(struct net*);
  void (*pre_exit)(struct net*);
  void (*exit)(struct net*);
  void (*exit_batch)(struct list_head*);
  unsigned int* id;
  size_t size;
};

struct auth_cred {
  const struct cred* cred;
  const char* principal;
};

struct rpc_cred_cache;

struct rpc_authops;

struct rpc_auth {
  unsigned int au_cslack;
  unsigned int au_rslack;
  unsigned int au_verfsize;
  unsigned int au_ralign;
  long unsigned int au_flags;
  const struct rpc_authops* au_ops;
  rpc_authflavor_t au_flavor;
  refcount_t au_count;
  struct rpc_cred_cache* au_credcache;
};

struct rpc_credops {
  const char* cr_name;
  int (*cr_init)(struct rpc_auth*, struct rpc_cred*);
  void (*crdestroy)(struct rpc_cred*);
  int (*crmatch)(struct auth_cred*, struct rpc_cred*, int);
  int (*crmarshal)(struct rpc_task*, struct xdr_stream*);
  int (*crrefresh)(struct rpc_task*);
  int (*crvalidate)(struct rpc_task*, struct xdr_stream*);
  int (*crwrap_req)(struct rpc_task*, struct xdr_stream*);
  int (*crunwrap_resp)(struct rpc_task*, struct xdr_stream*);
  int (*crkey_timeout)(struct rpc_cred*);
  char* (*crstringify_acceptor)(struct rpc_cred*);
  bool (*crneed_reencode)(struct rpc_task*);
};

struct rpc_auth_create_args;

struct rpcsec_gss_info;

struct rpc_authops {
  struct module* owner;
  rpc_authflavor_t au_flavor;
  char* au_name;
  struct rpc_auth* (
      *create)(const struct rpc_auth_create_args*, struct rpc_clnt*);
  void (*destroy)(struct rpc_auth*);
  int (*hash_cred)(struct auth_cred*, unsigned int);
  struct rpc_cred* (*lookup_cred)(struct rpc_auth*, struct auth_cred*, int);
  struct rpc_cred* (*crcreate)(struct rpc_auth*, struct auth_cred*, int, gfp_t);
  rpc_authflavor_t (*info2flavor)(struct rpcsec_gss_info*);
  int (*flavor2info)(rpc_authflavor_t, struct rpcsec_gss_info*);
  int (*key_timeout)(struct rpc_auth*, struct rpc_cred*);
};

struct rpc_auth_create_args {
  rpc_authflavor_t pseudoflavor;
  const char* target_name;
};

struct rpcsec_gss_oid {
  unsigned int len;
  u8 data[32];
};

struct rpcsec_gss_info {
  struct rpcsec_gss_oid oid;
  u32 qop;
  u32 service;
};

struct rpc_xprt_ops {
  void (*set_buffer_size)(struct rpc_xprt*, size_t, size_t);
  int (*reserve_xprt)(struct rpc_xprt*, struct rpc_task*);
  void (*release_xprt)(struct rpc_xprt*, struct rpc_task*);
  void (*alloc_slot)(struct rpc_xprt*, struct rpc_task*);
  void (*free_slot)(struct rpc_xprt*, struct rpc_rqst*);
  void (*rpcbind)(struct rpc_task*);
  void (*set_port)(struct rpc_xprt*, short unsigned int);
  void (*connect)(struct rpc_xprt*, struct rpc_task*);
  int (*buf_alloc)(struct rpc_task*);
  void (*buf_free)(struct rpc_task*);
  void (*prepare_request)(struct rpc_rqst*);
  int (*send_request)(struct rpc_rqst*);
  void (*wait_for_reply_request)(struct rpc_task*);
  void (*timer)(struct rpc_xprt*, struct rpc_task*);
  void (*release_request)(struct rpc_task*);
  void (*close)(struct rpc_xprt*);
  void (*destroy)(struct rpc_xprt*);
  void (*set_connect_timeout)(
      struct rpc_xprt*,
      long unsigned int,
      long unsigned int);
  void (*print_stats)(struct rpc_xprt*, struct seq_file*);
  int (*enable_swap)(struct rpc_xprt*);
  void (*disable_swap)(struct rpc_xprt*);
  void (*inject_disconnect)(struct rpc_xprt*);
  int (*bc_setup)(struct rpc_xprt*, unsigned int);
  size_t (*bc_maxpayload)(struct rpc_xprt*);
  unsigned int (*bc_num_slots)(struct rpc_xprt*);
  void (*bc_free_rqst)(struct rpc_rqst*);
  void (*bc_destroy)(struct rpc_xprt*, unsigned int);
};

struct rpc_xprt_switch {
  spinlock_t xps_lock;
  struct kref xps_kref;
  unsigned int xps_nxprts;
  unsigned int xps_nactive;
  atomic_long_t xps_queuelen;
  struct list_head xps_xprt_list;
  struct net* xps_net;
  const struct rpc_xprt_iter_ops* xps_iter_ops;
  struct callback_head xps_rcu;
};

struct rpc_stat {
  const struct rpc_program* program;
  unsigned int netcnt;
  unsigned int netudpcnt;
  unsigned int nettcpcnt;
  unsigned int nettcpconn;
  unsigned int netreconn;
  unsigned int rpccnt;
  unsigned int rpcretrans;
  unsigned int rpcauthrefresh;
  unsigned int rpcgarbage;
};

struct rpc_version;

struct rpc_program {
  const char* name;
  u32 number;
  unsigned int nrvers;
  const struct rpc_version** version;
  struct rpc_stat* stats;
  const char* pipe_dir_name;
};

struct ipv6_params {
  __s32 disable_ipv6;
  __s32 autoconf;
};

struct dql {
  unsigned int num_queued;
  unsigned int adj_limit;
  unsigned int last_obj_cnt;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  unsigned int limit;
  unsigned int num_completed;
  unsigned int prev_ovlimit;
  unsigned int prev_num_queued;
  unsigned int prev_last_obj_cnt;
  unsigned int lowest_slack;
  long unsigned int slack_start_time;
  unsigned int max_limit;
  unsigned int min_limit;
  unsigned int slack_hold_time;
  long : 32;
  long : 64;
  long : 64;
};

struct ieee_ets {
  __u8 willing;
  __u8 ets_cap;
  __u8 cbs;
  __u8 tc_tx_bw[8];
  __u8 tc_rx_bw[8];
  __u8 tc_tsa[8];
  __u8 prio_tc[8];
  __u8 tc_reco_bw[8];
  __u8 tc_reco_tsa[8];
  __u8 reco_prio_tc[8];
};

struct ieee_maxrate {
  __u64 tc_maxrate[8];
};

struct ieee_qcn {
  __u8 rpg_enable[8];
  __u32 rppp_max_rps[8];
  __u32 rpg_time_reset[8];
  __u32 rpg_byte_reset[8];
  __u32 rpg_threshold[8];
  __u32 rpg_max_rate[8];
  __u32 rpg_ai_rate[8];
  __u32 rpg_hai_rate[8];
  __u32 rpg_gd[8];
  __u32 rpg_min_dec_fac[8];
  __u32 rpg_min_rate[8];
  __u32 cndd_state_machine[8];
};

struct ieee_qcn_stats {
  __u64 rppp_rp_centiseconds[8];
  __u32 rppp_created_rps[8];
};

struct ieee_pfc {
  __u8 pfc_cap;
  __u8 pfc_en;
  __u8 mbc;
  __u16 delay;
  __u64 requests[8];
  __u64 indications[8];
};

struct dcbnl_buffer {
  __u8 prio2buffer[8];
  __u32 buffer_size[8];
  __u32 total_size;
};

struct cee_pg {
  __u8 willing;
  __u8 error;
  __u8 pg_en;
  __u8 tcs_supported;
  __u8 pg_bw[8];
  __u8 prio_pg[8];
};

struct cee_pfc {
  __u8 willing;
  __u8 error;
  __u8 pfc_en;
  __u8 tcs_supported;
};

struct dcb_app {
  __u8 selector;
  __u8 priority;
  __u16 protocol;
};

struct dcb_peer_app_info {
  __u8 willing;
  __u8 error;
};

struct dcbnl_rtnl_ops {
  int (*ieee_getets)(struct net_device*, struct ieee_ets*);
  int (*ieee_setets)(struct net_device*, struct ieee_ets*);
  int (*ieee_getmaxrate)(struct net_device*, struct ieee_maxrate*);
  int (*ieee_setmaxrate)(struct net_device*, struct ieee_maxrate*);
  int (*ieee_getqcn)(struct net_device*, struct ieee_qcn*);
  int (*ieee_setqcn)(struct net_device*, struct ieee_qcn*);
  int (*ieee_getqcnstats)(struct net_device*, struct ieee_qcn_stats*);
  int (*ieee_getpfc)(struct net_device*, struct ieee_pfc*);
  int (*ieee_setpfc)(struct net_device*, struct ieee_pfc*);
  int (*ieee_getapp)(struct net_device*, struct dcb_app*);
  int (*ieee_setapp)(struct net_device*, struct dcb_app*);
  int (*ieee_delapp)(struct net_device*, struct dcb_app*);
  int (*ieee_peer_getets)(struct net_device*, struct ieee_ets*);
  int (*ieee_peer_getpfc)(struct net_device*, struct ieee_pfc*);
  u8 (*getstate)(struct net_device*);
  u8 (*setstate)(struct net_device*, u8);
  void (*getpermhwaddr)(struct net_device*, u8*);
  void (*setpgtccfgtx)(struct net_device*, int, u8, u8, u8, u8);
  void (*setpgbwgcfgtx)(struct net_device*, int, u8);
  void (*setpgtccfgrx)(struct net_device*, int, u8, u8, u8, u8);
  void (*setpgbwgcfgrx)(struct net_device*, int, u8);
  void (*getpgtccfgtx)(struct net_device*, int, u8*, u8*, u8*, u8*);
  void (*getpgbwgcfgtx)(struct net_device*, int, u8*);
  void (*getpgtccfgrx)(struct net_device*, int, u8*, u8*, u8*, u8*);
  void (*getpgbwgcfgrx)(struct net_device*, int, u8*);
  void (*setpfccfg)(struct net_device*, int, u8);
  void (*getpfccfg)(struct net_device*, int, u8*);
  u8 (*setall)(struct net_device*);
  u8 (*getcap)(struct net_device*, int, u8*);
  int (*getnumtcs)(struct net_device*, int, u8*);
  int (*setnumtcs)(struct net_device*, int, u8);
  u8 (*getpfcstate)(struct net_device*);
  void (*setpfcstate)(struct net_device*, u8);
  void (*getbcncfg)(struct net_device*, int, u32*);
  void (*setbcncfg)(struct net_device*, int, u32);
  void (*getbcnrp)(struct net_device*, int, u8*);
  void (*setbcnrp)(struct net_device*, int, u8);
  int (*setapp)(struct net_device*, u8, u16, u8);
  int (*getapp)(struct net_device*, u8, u16);
  u8 (*getfeatcfg)(struct net_device*, int, u8*);
  u8 (*setfeatcfg)(struct net_device*, int, u8);
  u8 (*getdcbx)(struct net_device*);
  u8 (*setdcbx)(struct net_device*, u8);
  int (*peer_getappinfo)(struct net_device*, struct dcb_peer_app_info*, u16*);
  int (*peer_getapptable)(struct net_device*, struct dcb_app*);
  int (*cee_peer_getpg)(struct net_device*, struct cee_pg*);
  int (*cee_peer_getpfc)(struct net_device*, struct cee_pfc*);
  int (*dcbnl_getbuffer)(struct net_device*, struct dcbnl_buffer*);
  int (*dcbnl_setbuffer)(struct net_device*, struct dcbnl_buffer*);
};

struct netprio_map {
  struct callback_head rcu;
  u32 priomap_len;
  u32 priomap[0];
};

struct xdp_mem_info {
  u32 type;
  u32 id;
};

struct xdp_rxq_info {
  struct net_device* dev;
  u32 queue_index;
  u32 reg_state;
  struct xdp_mem_info mem;
  unsigned int napi_id;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct xdp_txq_info {
  struct net_device* dev;
};

struct xdp_buff {
  void* data;
  void* data_end;
  void* data_meta;
  void* data_hard_start;
  struct xdp_rxq_info* rxq;
  struct xdp_txq_info* txq;
  u32 frame_sz;
};

struct xdp_frame {
  void* data;
  u16 len;
  u16 headroom;
  u32 metasize : 8;
  u32 frame_sz : 24;
  struct xdp_mem_info mem;
  struct net_device* dev_rx;
};

struct nlmsghdr {
  __u32 nlmsg_len;
  __u16 nlmsg_type;
  __u16 nlmsg_flags;
  __u32 nlmsg_seq;
  __u32 nlmsg_pid;
};

struct nlattr {
  __u16 nla_len;
  __u16 nla_type;
};

struct netlink_ext_ack {
  const char* _msg;
  const struct nlattr* bad_attr;
  const struct nla_policy* policy;
  u8 cookie[20];
  u8 cookie_len;
};

struct netlink_range_validation;

struct netlink_range_validation_signed;

struct nla_policy {
  u8 type;
  u8 validation_type;
  u16 len;
  union {
    const u32 bitfield32_valid;
    const u32 mask;
    const char* reject_message;
    const struct nla_policy* nested_policy;
    struct netlink_range_validation* range;
    struct netlink_range_validation_signed* range_signed;
    struct {
      s16 min;
      s16 max;
    };
    int (*validate)(const struct nlattr*, struct netlink_ext_ack*);
    u16 strict_start_type;
  };
};

struct netlink_callback {
  struct sk_buff* skb;
  const struct nlmsghdr* nlh;
  int (*dump)(struct sk_buff*, struct netlink_callback*);
  int (*done)(struct netlink_callback*);
  void* data;
  struct module* module;
  struct netlink_ext_ack* extack;
  u16 family;
  u16 answer_flags;
  u32 min_dump_alloc;
  unsigned int prev_seq;
  unsigned int seq;
  bool strict_check;
  union {
    u8 ctx[48];
    long int args[6];
  };
};

struct ndmsg {
  __u8 ndm_family;
  __u8 ndm_pad1;
  __u16 ndm_pad2;
  __s32 ndm_ifindex;
  __u16 ndm_state;
  __u8 ndm_flags;
  __u8 ndm_type;
};

struct rtnl_link_stats64 {
  __u64 rx_packets;
  __u64 tx_packets;
  __u64 rx_bytes;
  __u64 tx_bytes;
  __u64 rx_errors;
  __u64 tx_errors;
  __u64 rx_dropped;
  __u64 tx_dropped;
  __u64 multicast;
  __u64 collisions;
  __u64 rx_length_errors;
  __u64 rx_over_errors;
  __u64 rx_crc_errors;
  __u64 rx_frame_errors;
  __u64 rx_fifo_errors;
  __u64 rx_missed_errors;
  __u64 tx_aborted_errors;
  __u64 tx_carrier_errors;
  __u64 tx_fifo_errors;
  __u64 tx_heartbeat_errors;
  __u64 tx_window_errors;
  __u64 rx_compressed;
  __u64 tx_compressed;
  __u64 rx_nohandler;
};

struct ifla_vf_guid {
  __u32 vf;
  __u64 guid;
};

struct ifla_vf_stats {
  __u64 rx_packets;
  __u64 tx_packets;
  __u64 rx_bytes;
  __u64 tx_bytes;
  __u64 broadcast;
  __u64 multicast;
  __u64 rx_dropped;
  __u64 tx_dropped;
};

struct ifla_vf_info {
  __u32 vf;
  __u8 mac[32];
  __u32 vlan;
  __u32 qos;
  __u32 spoofchk;
  __u32 linkstate;
  __u32 min_tx_rate;
  __u32 max_tx_rate;
  __u32 rss_query_en;
  __u32 trusted;
  __be16 vlan_proto;
};

struct tc_stats {
  __u64 bytes;
  __u32 packets;
  __u32 drops;
  __u32 overlimits;
  __u32 bps;
  __u32 pps;
  __u32 qlen;
  __u32 backlog;
};

struct tc_sizespec {
  unsigned char cell_log;
  unsigned char size_log;
  short int cell_align;
  int overhead;
  unsigned int linklayer;
  unsigned int mpu;
  unsigned int mtu;
  unsigned int tsize;
};

enum netdev_tx {
  __NETDEV_TX_MIN = 2147483648,
  NETDEV_TX_OK = 0,
  NETDEV_TX_BUSY = 16,
};

typedef enum netdev_tx netdev_tx_t;

struct header_ops {
  int (*create)(
      struct sk_buff*,
      struct net_device*,
      short unsigned int,
      const void*,
      const void*,
      unsigned int);
  int (*parse)(const struct sk_buff*, unsigned char*);
  int (*cache)(const struct neighbour*, struct hh_cache*, __be16);
  void (*cache_update)(
      struct hh_cache*,
      const struct net_device*,
      const unsigned char*);
  bool (*validate)(const char*, unsigned int);
  __be16 (*parse_protocol)(const struct sk_buff*);
};

struct gro_list {
  struct list_head list;
  int count;
};

struct napi_struct {
  struct list_head poll_list;
  long unsigned int state;
  int weight;
  int defer_hard_irqs_count;
  long unsigned int gro_bitmask;
  int (*poll)(struct napi_struct*, int);
  int poll_owner;
  struct net_device* dev;
  struct gro_list gro_hash[8];
  struct sk_buff* skb;
  struct list_head rx_list;
  int rx_count;
  struct hrtimer timer;
  struct list_head dev_list;
  struct hlist_node napi_hash_node;
  unsigned int napi_id;
  struct task_struct* thread;
};

struct xsk_buff_pool;

struct netdev_queue {
  struct net_device* dev;
  struct Qdisc* qdisc;
  struct Qdisc* qdisc_sleeping;
  struct kobject kobj;
  int numa_node;
  long unsigned int tx_maxrate;
  long unsigned int trans_timeout;
  struct net_device* sb_dev;
  struct xsk_buff_pool* pool;
  spinlock_t _xmit_lock;
  int xmit_lock_owner;
  long unsigned int trans_start;
  long unsigned int state;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct dql dql;
};

struct qdisc_skb_head {
  struct sk_buff* head;
  struct sk_buff* tail;
  __u32 qlen;
  spinlock_t lock;
};

struct gnet_stats_basic_packed {
  __u64 bytes;
  __u64 packets;
};

struct gnet_stats_queue {
  __u32 qlen;
  __u32 backlog;
  __u32 drops;
  __u32 requeues;
  __u32 overlimits;
};

struct Qdisc_ops;

struct qdisc_size_table;

struct net_rate_estimator;

struct gnet_stats_basic_cpu;

struct Qdisc {
  int (*enqueue)(struct sk_buff*, struct Qdisc*, struct sk_buff**);
  struct sk_buff* (*dequeue)(struct Qdisc*);
  unsigned int flags;
  u32 limit;
  const struct Qdisc_ops* ops;
  struct qdisc_size_table* stab;
  struct hlist_node hash;
  u32 handle;
  u32 parent;
  struct netdev_queue* dev_queue;
  struct net_rate_estimator* rate_est;
  struct gnet_stats_basic_cpu* cpu_bstats;
  struct gnet_stats_queue* cpu_qstats;
  int pad;
  refcount_t refcnt;
  long : 64;
  long : 64;
  long : 64;
  struct sk_buff_head gso_skb;
  struct qdisc_skb_head q;
  struct gnet_stats_basic_packed bstats;
  seqcount_t running;
  struct gnet_stats_queue qstats;
  long unsigned int state;
  struct Qdisc* next_sched;
  struct sk_buff_head skb_bad_txq;
  spinlock_t busylock;
  spinlock_t seqlock;
  bool empty;
  struct callback_head rcu;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long int privdata[0];
};

struct rps_map {
  unsigned int len;
  struct callback_head rcu;
  u16 cpus[0];
};

struct rps_dev_flow {
  u16 cpu;
  u16 filter;
  unsigned int last_qtail;
};

struct rps_dev_flow_table {
  unsigned int mask;
  struct callback_head rcu;
  struct rps_dev_flow flows[0];
};

struct rps_sock_flow_table {
  u32 mask;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 ents[0];
};

struct netdev_rx_queue {
  struct rps_map* rps_map;
  struct rps_dev_flow_table* rps_flow_table;
  struct kobject kobj;
  struct net_device* dev;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct xdp_rxq_info xdp_rxq;
  struct xsk_buff_pool* pool;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct xps_map {
  unsigned int len;
  unsigned int alloc_len;
  struct callback_head rcu;
  u16 queues[0];
};

struct xps_dev_maps {
  struct callback_head rcu;
  struct xps_map* attr_map[0];
};

struct netdev_phys_item_id {
  unsigned char id[32];
  unsigned char id_len;
};

enum tc_setup_type {
  TC_SETUP_QDISC_MQPRIO = 0,
  TC_SETUP_CLSU32 = 1,
  TC_SETUP_CLSFLOWER = 2,
  TC_SETUP_CLSMATCHALL = 3,
  TC_SETUP_CLSBPF = 4,
  TC_SETUP_BLOCK = 5,
  TC_SETUP_QDISC_CBS = 6,
  TC_SETUP_QDISC_RED = 7,
  TC_SETUP_QDISC_PRIO = 8,
  TC_SETUP_QDISC_MQ = 9,
  TC_SETUP_QDISC_ETF = 10,
  TC_SETUP_ROOT_QDISC = 11,
  TC_SETUP_QDISC_GRED = 12,
  TC_SETUP_QDISC_TAPRIO = 13,
  TC_SETUP_FT = 14,
  TC_SETUP_QDISC_ETS = 15,
  TC_SETUP_QDISC_TBF = 16,
  TC_SETUP_QDISC_FIFO = 17,
  TC_SETUP_QDISC_HTB = 18,
};

enum bpf_netdev_command {
  XDP_SETUP_PROG = 0,
  XDP_SETUP_PROG_HW = 1,
  BPF_OFFLOAD_MAP_ALLOC = 2,
  BPF_OFFLOAD_MAP_FREE = 3,
  XDP_SETUP_XSK_POOL = 4,
};

struct netdev_bpf {
  enum bpf_netdev_command command;
  union {
    struct {
      u32 flags;
      struct bpf_prog* prog;
      struct netlink_ext_ack* extack;
    };
    struct {
      struct bpf_offloaded_map* offmap;
    };
    struct {
      struct xsk_buff_pool* pool;
      u16 queue_id;
    } xsk;
  };
};

struct dev_ifalias {
  struct callback_head rcuhead;
  char ifalias[0];
};

struct netdev_name_node {
  struct hlist_node hlist;
  struct list_head list;
  struct net_device* dev;
  const char* name;
};

struct devlink_port;

struct ip_tunnel_parm;

struct net_device_ops {
  int (*ndo_init)(struct net_device*);
  void (*ndo_uninit)(struct net_device*);
  int (*ndo_open)(struct net_device*);
  int (*ndo_stop)(struct net_device*);
  netdev_tx_t (*ndo_start_xmit)(struct sk_buff*, struct net_device*);
  netdev_features_t (*ndo_features_check)(
      struct sk_buff*,
      struct net_device*,
      netdev_features_t);
  u16 (*ndo_select_queue)(
      struct net_device*,
      struct sk_buff*,
      struct net_device*);
  void (*ndo_change_rx_flags)(struct net_device*, int);
  void (*ndo_set_rx_mode)(struct net_device*);
  int (*ndo_set_mac_address)(struct net_device*, void*);
  int (*ndo_validate_addr)(struct net_device*);
  int (*ndo_do_ioctl)(struct net_device*, struct ifreq*, int);
  int (*ndo_set_config)(struct net_device*, struct ifmap*);
  int (*ndo_change_mtu)(struct net_device*, int);
  int (*ndo_neigh_setup)(struct net_device*, struct neigh_parms*);
  void (*ndo_tx_timeout)(struct net_device*, unsigned int);
  void (*ndo_get_stats64)(struct net_device*, struct rtnl_link_stats64*);
  bool (*ndo_has_offload_stats)(const struct net_device*, int);
  int (*ndo_get_offload_stats)(int, const struct net_device*, void*);
  struct net_device_stats* (*ndo_get_stats)(struct net_device*);
  int (*ndo_vlan_rx_add_vid)(struct net_device*, __be16, u16);
  int (*ndo_vlan_rx_kill_vid)(struct net_device*, __be16, u16);
  void (*ndo_poll_controller)(struct net_device*);
  int (*ndo_netpoll_setup)(struct net_device*, struct netpoll_info*);
  void (*ndo_netpoll_cleanup)(struct net_device*);
  int (*ndo_set_vf_mac)(struct net_device*, int, u8*);
  int (*ndo_set_vf_vlan)(struct net_device*, int, u16, u8, __be16);
  int (*ndo_set_vf_rate)(struct net_device*, int, int, int);
  int (*ndo_set_vf_spoofchk)(struct net_device*, int, bool);
  int (*ndo_set_vf_trust)(struct net_device*, int, bool);
  int (*ndo_get_vf_config)(struct net_device*, int, struct ifla_vf_info*);
  int (*ndo_set_vf_link_state)(struct net_device*, int, int);
  int (*ndo_get_vf_stats)(struct net_device*, int, struct ifla_vf_stats*);
  int (*ndo_set_vf_port)(struct net_device*, int, struct nlattr**);
  int (*ndo_get_vf_port)(struct net_device*, int, struct sk_buff*);
  int (*ndo_get_vf_guid)(
      struct net_device*,
      int,
      struct ifla_vf_guid*,
      struct ifla_vf_guid*);
  int (*ndo_set_vf_guid)(struct net_device*, int, u64, int);
  int (*ndo_set_vf_rss_query_en)(struct net_device*, int, bool);
  int (*ndo_setup_tc)(struct net_device*, enum tc_setup_type, void*);
  int (*ndo_rx_flow_steer)(struct net_device*, const struct sk_buff*, u16, u32);
  int (*ndo_add_slave)(
      struct net_device*,
      struct net_device*,
      struct netlink_ext_ack*);
  int (*ndo_del_slave)(struct net_device*, struct net_device*);
  struct net_device* (
      *ndo_get_xmit_slave)(struct net_device*, struct sk_buff*, bool);
  struct net_device* (*ndo_sk_get_lower_dev)(struct net_device*, struct sock*);
  netdev_features_t (*ndo_fix_features)(struct net_device*, netdev_features_t);
  int (*ndo_set_features)(struct net_device*, netdev_features_t);
  int (*ndo_neigh_construct)(struct net_device*, struct neighbour*);
  void (*ndo_neigh_destroy)(struct net_device*, struct neighbour*);
  int (*ndo_fdb_add)(
      struct ndmsg*,
      struct nlattr**,
      struct net_device*,
      const unsigned char*,
      u16,
      u16,
      struct netlink_ext_ack*);
  int (*ndo_fdb_del)(
      struct ndmsg*,
      struct nlattr**,
      struct net_device*,
      const unsigned char*,
      u16);
  int (*ndo_fdb_dump)(
      struct sk_buff*,
      struct netlink_callback*,
      struct net_device*,
      struct net_device*,
      int*);
  int (*ndo_fdb_get)(
      struct sk_buff*,
      struct nlattr**,
      struct net_device*,
      const unsigned char*,
      u16,
      u32,
      u32,
      struct netlink_ext_ack*);
  int (*ndo_bridge_setlink)(
      struct net_device*,
      struct nlmsghdr*,
      u16,
      struct netlink_ext_ack*);
  int (*ndo_bridge_getlink)(
      struct sk_buff*,
      u32,
      u32,
      struct net_device*,
      u32,
      int);
  int (*ndo_bridge_dellink)(struct net_device*, struct nlmsghdr*, u16);
  int (*ndo_change_carrier)(struct net_device*, bool);
  int (*ndo_get_phys_port_id)(struct net_device*, struct netdev_phys_item_id*);
  int (
      *ndo_get_port_parent_id)(struct net_device*, struct netdev_phys_item_id*);
  int (*ndo_get_phys_port_name)(struct net_device*, char*, size_t);
  void* (*ndo_dfwd_add_station)(struct net_device*, struct net_device*);
  void (*ndo_dfwd_del_station)(struct net_device*, void*);
  int (*ndo_set_tx_maxrate)(struct net_device*, int, u32);
  int (*ndo_get_iflink)(const struct net_device*);
  int (*ndo_change_proto_down)(struct net_device*, bool);
  int (*ndo_fill_metadata_dst)(struct net_device*, struct sk_buff*);
  void (*ndo_set_rx_headroom)(struct net_device*, int);
  int (*ndo_bpf)(struct net_device*, struct netdev_bpf*);
  int (*ndo_xdp_xmit)(struct net_device*, int, struct xdp_frame**, u32);
  struct net_device* (
      *ndo_xdp_get_xmit_slave)(struct net_device*, struct xdp_buff*);
  int (*ndo_xsk_wakeup)(struct net_device*, u32, u32);
  struct devlink_port* (*ndo_get_devlink_port)(struct net_device*);
  int (*ndo_tunnel_ctl)(struct net_device*, struct ip_tunnel_parm*, int);
  struct net_device* (*ndo_get_peer_dev)(struct net_device*);
};

struct neigh_parms {
  possible_net_t net;
  struct net_device* dev;
  struct list_head list;
  int (*neigh_setup)(struct neighbour*);
  struct neigh_table* tbl;
  void* sysctl_table;
  int dead;
  refcount_t refcnt;
  struct callback_head callback_head;
  int reachable_time;
  int data[13];
  long unsigned int data_state[1];
};

struct pcpu_lstats {
  u64_stats_t packets;
  u64_stats_t bytes;
  struct u64_stats_sync syncp;
};

struct pcpu_sw_netstats {
  u64 rx_packets;
  u64 rx_bytes;
  u64 tx_packets;
  u64 tx_bytes;
  struct u64_stats_sync syncp;
};

enum ethtool_phys_id_state {
  ETHTOOL_ID_INACTIVE = 0,
  ETHTOOL_ID_ACTIVE = 1,
  ETHTOOL_ID_ON = 2,
  ETHTOOL_ID_OFF = 3,
};

struct ethtool_drvinfo;

struct ethtool_regs;

struct ethtool_wolinfo;

struct ethtool_link_ext_state_info;

struct ethtool_eeprom;

struct ethtool_coalesce;

struct ethtool_ringparam;

struct ethtool_pause_stats;

struct ethtool_pauseparam;

struct ethtool_test;

struct ethtool_stats;

struct ethtool_rxnfc;

struct ethtool_flash;

struct ethtool_channels;

struct ethtool_dump;

struct ethtool_ts_info;

struct ethtool_modinfo;

struct ethtool_eee;

struct ethtool_tunable;

struct ethtool_link_ksettings;

struct ethtool_fec_stats;

struct ethtool_fecparam;

struct ethtool_module_eeprom;

struct ethtool_eth_phy_stats;

struct ethtool_eth_mac_stats;

struct ethtool_eth_ctrl_stats;

struct ethtool_rmon_stats;

struct ethtool_rmon_hist_range;

struct ethtool_ops {
  u32 cap_link_lanes_supported : 1;
  u32 supported_coalesce_params;
  void (*get_drvinfo)(struct net_device*, struct ethtool_drvinfo*);
  int (*get_regs_len)(struct net_device*);
  void (*get_regs)(struct net_device*, struct ethtool_regs*, void*);
  void (*get_wol)(struct net_device*, struct ethtool_wolinfo*);
  int (*set_wol)(struct net_device*, struct ethtool_wolinfo*);
  u32 (*get_msglevel)(struct net_device*);
  void (*set_msglevel)(struct net_device*, u32);
  int (*nway_reset)(struct net_device*);
  u32 (*get_link)(struct net_device*);
  int (*get_link_ext_state)(
      struct net_device*,
      struct ethtool_link_ext_state_info*);
  int (*get_eeprom_len)(struct net_device*);
  int (*get_eeprom)(struct net_device*, struct ethtool_eeprom*, u8*);
  int (*set_eeprom)(struct net_device*, struct ethtool_eeprom*, u8*);
  int (*get_coalesce)(struct net_device*, struct ethtool_coalesce*);
  int (*set_coalesce)(struct net_device*, struct ethtool_coalesce*);
  void (*get_ringparam)(struct net_device*, struct ethtool_ringparam*);
  int (*set_ringparam)(struct net_device*, struct ethtool_ringparam*);
  void (*get_pause_stats)(struct net_device*, struct ethtool_pause_stats*);
  void (*get_pauseparam)(struct net_device*, struct ethtool_pauseparam*);
  int (*set_pauseparam)(struct net_device*, struct ethtool_pauseparam*);
  void (*self_test)(struct net_device*, struct ethtool_test*, u64*);
  void (*get_strings)(struct net_device*, u32, u8*);
  int (*set_phys_id)(struct net_device*, enum ethtool_phys_id_state);
  void (*get_ethtool_stats)(struct net_device*, struct ethtool_stats*, u64*);
  int (*begin)(struct net_device*);
  void (*complete)(struct net_device*);
  u32 (*get_priv_flags)(struct net_device*);
  int (*set_priv_flags)(struct net_device*, u32);
  int (*get_sset_count)(struct net_device*, int);
  int (*get_rxnfc)(struct net_device*, struct ethtool_rxnfc*, u32*);
  int (*set_rxnfc)(struct net_device*, struct ethtool_rxnfc*);
  int (*flash_device)(struct net_device*, struct ethtool_flash*);
  int (*reset)(struct net_device*, u32*);
  u32 (*get_rxfh_key_size)(struct net_device*);
  u32 (*get_rxfh_indir_size)(struct net_device*);
  int (*get_rxfh)(struct net_device*, u32*, u8*, u8*);
  int (*set_rxfh)(struct net_device*, const u32*, const u8*, const u8);
  int (*get_rxfh_context)(struct net_device*, u32*, u8*, u8*, u32);
  int (*set_rxfh_context)(
      struct net_device*,
      const u32*,
      const u8*,
      const u8,
      u32*,
      bool);
  void (*get_channels)(struct net_device*, struct ethtool_channels*);
  int (*set_channels)(struct net_device*, struct ethtool_channels*);
  int (*get_dump_flag)(struct net_device*, struct ethtool_dump*);
  int (*get_dump_data)(struct net_device*, struct ethtool_dump*, void*);
  int (*set_dump)(struct net_device*, struct ethtool_dump*);
  int (*get_ts_info)(struct net_device*, struct ethtool_ts_info*);
  int (*get_module_info)(struct net_device*, struct ethtool_modinfo*);
  int (*get_module_eeprom)(struct net_device*, struct ethtool_eeprom*, u8*);
  int (*get_eee)(struct net_device*, struct ethtool_eee*);
  int (*set_eee)(struct net_device*, struct ethtool_eee*);
  int (*get_tunable)(struct net_device*, const struct ethtool_tunable*, void*);
  int (*set_tunable)(
      struct net_device*,
      const struct ethtool_tunable*,
      const void*);
  int (*get_per_queue_coalesce)(
      struct net_device*,
      u32,
      struct ethtool_coalesce*);
  int (*set_per_queue_coalesce)(
      struct net_device*,
      u32,
      struct ethtool_coalesce*);
  int (*get_link_ksettings)(struct net_device*, struct ethtool_link_ksettings*);
  int (*set_link_ksettings)(
      struct net_device*,
      const struct ethtool_link_ksettings*);
  void (*get_fec_stats)(struct net_device*, struct ethtool_fec_stats*);
  int (*get_fecparam)(struct net_device*, struct ethtool_fecparam*);
  int (*set_fecparam)(struct net_device*, struct ethtool_fecparam*);
  void (
      *get_ethtool_phy_stats)(struct net_device*, struct ethtool_stats*, u64*);
  int (*get_phy_tunable)(
      struct net_device*,
      const struct ethtool_tunable*,
      void*);
  int (*set_phy_tunable)(
      struct net_device*,
      const struct ethtool_tunable*,
      const void*);
  int (*get_module_eeprom_by_page)(
      struct net_device*,
      const struct ethtool_module_eeprom*,
      struct netlink_ext_ack*);
  void (*get_eth_phy_stats)(struct net_device*, struct ethtool_eth_phy_stats*);
  void (*get_eth_mac_stats)(struct net_device*, struct ethtool_eth_mac_stats*);
  void (
      *get_eth_ctrl_stats)(struct net_device*, struct ethtool_eth_ctrl_stats*);
  void (*get_rmon_stats)(
      struct net_device*,
      struct ethtool_rmon_stats*,
      const struct ethtool_rmon_hist_range**);
};

struct nd_opt_hdr;

struct ndisc_options;

struct prefix_info;

struct ndisc_ops {
  int (*is_useropt)(u8);
  int (*parse_options)(
      const struct net_device*,
      struct nd_opt_hdr*,
      struct ndisc_options*);
  void (*update)(
      const struct net_device*,
      struct neighbour*,
      u32,
      u8,
      const struct ndisc_options*);
  int (*opt_addr_space)(
      const struct net_device*,
      u8,
      struct neighbour*,
      u8*,
      u8**);
  void (*fill_addr_option)(
      const struct net_device*,
      struct sk_buff*,
      u8,
      const u8*);
  void (*prefix_rcv_add_addr)(
      struct net*,
      struct net_device*,
      const struct prefix_info*,
      struct inet6_dev*,
      struct in6_addr*,
      int,
      u32,
      bool,
      bool,
      __u32,
      u32,
      bool);
};

struct ipv6_devstat {
  struct proc_dir_entry* proc_dir_entry;
  struct ipstats_mib* ipv6;
  struct icmpv6_mib_device* icmpv6dev;
  struct icmpv6msg_mib_device* icmpv6msgdev;
};

struct ifmcaddr6;

struct ifacaddr6;

struct inet6_dev {
  struct net_device* dev;
  struct list_head addr_list;
  struct ifmcaddr6* mc_list;
  struct ifmcaddr6* mc_tomb;
  spinlock_t mc_lock;
  unsigned char mc_qrv;
  unsigned char mc_gq_running;
  unsigned char mc_ifc_count;
  unsigned char mc_dad_count;
  long unsigned int mc_v1_seen;
  long unsigned int mc_qi;
  long unsigned int mc_qri;
  long unsigned int mc_maxdelay;
  struct timer_list mc_gq_timer;
  struct timer_list mc_ifc_timer;
  struct timer_list mc_dad_timer;
  struct ifacaddr6* ac_list;
  rwlock_t lock;
  refcount_t refcnt;
  __u32 if_flags;
  int dead;
  u32 desync_factor;
  struct list_head tempaddr_list;
  struct in6_addr token;
  struct neigh_parms* nd_parms;
  struct ipv6_devconf cnf;
  struct ipv6_devstat stats;
  struct timer_list rs_timer;
  __s32 rs_interval;
  __u8 rs_probes;
  long unsigned int tstamp;
  struct callback_head rcu;
};

struct tcf_proto;

struct tcf_block;

struct mini_Qdisc {
  struct tcf_proto* filter_list;
  struct tcf_block* block;
  struct gnet_stats_basic_cpu* cpu_bstats;
  struct gnet_stats_queue* cpu_qstats;
  struct callback_head rcu;
};

struct rtnl_link_ops {
  struct list_head list;
  const char* kind;
  size_t priv_size;
  void (*setup)(struct net_device*);
  bool netns_refund;
  unsigned int maxtype;
  const struct nla_policy* policy;
  int (*validate)(struct nlattr**, struct nlattr**, struct netlink_ext_ack*);
  int (*newlink)(
      struct net*,
      struct net_device*,
      struct nlattr**,
      struct nlattr**,
      struct netlink_ext_ack*);
  int (*changelink)(
      struct net_device*,
      struct nlattr**,
      struct nlattr**,
      struct netlink_ext_ack*);
  void (*dellink)(struct net_device*, struct list_head*);
  size_t (*get_size)(const struct net_device*);
  int (*fill_info)(struct sk_buff*, const struct net_device*);
  size_t (*get_xstats_size)(const struct net_device*);
  int (*fill_xstats)(struct sk_buff*, const struct net_device*);
  unsigned int (*get_num_tx_queues)();
  unsigned int (*get_num_rx_queues)();
  unsigned int slave_maxtype;
  const struct nla_policy* slave_policy;
  int (*slave_changelink)(
      struct net_device*,
      struct net_device*,
      struct nlattr**,
      struct nlattr**,
      struct netlink_ext_ack*);
  size_t (*get_slave_size)(const struct net_device*, const struct net_device*);
  int (*fill_slave_info)(
      struct sk_buff*,
      const struct net_device*,
      const struct net_device*);
  struct net* (*get_link_net)(const struct net_device*);
  size_t (*get_linkxstats_size)(const struct net_device*, int);
  int (*fill_linkxstats)(struct sk_buff*, const struct net_device*, int*, int);
};

struct udp_tunnel_nic_table_info {
  unsigned int n_entries;
  unsigned int tunnel_types;
};

struct udp_tunnel_info;

struct udp_tunnel_nic_shared;

struct udp_tunnel_nic_info {
  int (*set_port)(
      struct net_device*,
      unsigned int,
      unsigned int,
      struct udp_tunnel_info*);
  int (*unset_port)(
      struct net_device*,
      unsigned int,
      unsigned int,
      struct udp_tunnel_info*);
  int (*sync_table)(struct net_device*, unsigned int);
  struct udp_tunnel_nic_shared* shared;
  unsigned int flags;
  struct udp_tunnel_nic_table_info tables[4];
};

struct sd_flow_limit {
  u64 count;
  unsigned int num_buckets;
  unsigned int history_head;
  u16 history[128];
  u8 buckets[0];
};

struct softnet_data {
  struct list_head poll_list;
  struct sk_buff_head process_queue;
  unsigned int processed;
  unsigned int time_squeeze;
  unsigned int received_rps;
  struct softnet_data* rps_ipi_list;
  struct sd_flow_limit* flow_limit;
  struct Qdisc* output_queue;
  struct Qdisc** output_queue_tailp;
  struct sk_buff* completion_queue;
  struct {
    u16 recursion;
    u8 more;
  } xmit;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  unsigned int input_queue_head;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  call_single_data_t csd;
  struct softnet_data* rps_ipi_next;
  unsigned int cpu;
  unsigned int input_queue_tail;
  unsigned int dropped;
  struct sk_buff_head input_pkt_queue;
  struct napi_struct backlog;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum {
  RTAX_UNSPEC = 0,
  RTAX_LOCK = 1,
  RTAX_MTU = 2,
  RTAX_WINDOW = 3,
  RTAX_RTT = 4,
  RTAX_RTTVAR = 5,
  RTAX_SSTHRESH = 6,
  RTAX_CWND = 7,
  RTAX_ADVMSS = 8,
  RTAX_REORDERING = 9,
  RTAX_HOPLIMIT = 10,
  RTAX_INITCWND = 11,
  RTAX_FEATURES = 12,
  RTAX_RTO_MIN = 13,
  RTAX_INITRWND = 14,
  RTAX_QUICKACK = 15,
  RTAX_CC_ALGO = 16,
  RTAX_FASTOPEN_NO_COOKIE = 17,
  __RTAX_MAX = 18,
};

struct tcmsg {
  unsigned char tcm_family;
  unsigned char tcm__pad1;
  short unsigned int tcm__pad2;
  int tcm_ifindex;
  __u32 tcm_handle;
  __u32 tcm_parent;
  __u32 tcm_info;
};

struct gnet_stats_basic_cpu {
  struct gnet_stats_basic_packed bstats;
  struct u64_stats_sync syncp;
};

struct gnet_dump {
  spinlock_t* lock;
  struct sk_buff* skb;
  struct nlattr* tail;
  int compat_tc_stats;
  int compat_xstats;
  int padattr;
  void* xstats;
  int xstats_len;
  struct tc_stats tc_stats;
};

struct netlink_range_validation {
  u64 min;
  u64 max;
};

struct netlink_range_validation_signed {
  s64 min;
  s64 max;
};

struct nl_info {
  struct nlmsghdr* nlh;
  struct net* nl_net;
  u32 portid;
  u8 skip_notify : 1;
  u8 skip_notify_kernel : 1;
};

enum flow_action_hw_stats_bit {
  FLOW_ACTION_HW_STATS_IMMEDIATE_BIT = 0,
  FLOW_ACTION_HW_STATS_DELAYED_BIT = 1,
  FLOW_ACTION_HW_STATS_DISABLED_BIT = 2,
  FLOW_ACTION_HW_STATS_NUM_BITS = 3,
};

struct flow_block {
  struct list_head cb_list;
};

typedef int flow_setup_cb_t(enum tc_setup_type, void*, void*);

struct qdisc_size_table {
  struct callback_head rcu;
  struct list_head list;
  struct tc_sizespec szopts;
  int refcnt;
  u16 data[0];
};

struct Qdisc_class_ops;

struct Qdisc_ops {
  struct Qdisc_ops* next;
  const struct Qdisc_class_ops* cl_ops;
  char id[16];
  int priv_size;
  unsigned int static_flags;
  int (*enqueue)(struct sk_buff*, struct Qdisc*, struct sk_buff**);
  struct sk_buff* (*dequeue)(struct Qdisc*);
  struct sk_buff* (*peek)(struct Qdisc*);
  int (*init)(struct Qdisc*, struct nlattr*, struct netlink_ext_ack*);
  void (*reset)(struct Qdisc*);
  void (*destroy)(struct Qdisc*);
  int (*change)(struct Qdisc*, struct nlattr*, struct netlink_ext_ack*);
  void (*attach)(struct Qdisc*);
  int (*change_tx_queue_len)(struct Qdisc*, unsigned int);
  void (*change_real_num_tx)(struct Qdisc*, unsigned int);
  int (*dump)(struct Qdisc*, struct sk_buff*);
  int (*dump_stats)(struct Qdisc*, struct gnet_dump*);
  void (*ingress_block_set)(struct Qdisc*, u32);
  void (*egress_block_set)(struct Qdisc*, u32);
  u32 (*ingress_block_get)(struct Qdisc*);
  u32 (*egress_block_get)(struct Qdisc*);
  struct module* owner;
};

struct qdisc_walker;

struct Qdisc_class_ops {
  unsigned int flags;
  struct netdev_queue* (*select_queue)(struct Qdisc*, struct tcmsg*);
  int (*graft)(
      struct Qdisc*,
      long unsigned int,
      struct Qdisc*,
      struct Qdisc**,
      struct netlink_ext_ack*);
  struct Qdisc* (*leaf)(struct Qdisc*, long unsigned int);
  void (*qlen_notify)(struct Qdisc*, long unsigned int);
  long unsigned int (*find)(struct Qdisc*, u32);
  int (*change)(
      struct Qdisc*,
      u32,
      u32,
      struct nlattr**,
      long unsigned int*,
      struct netlink_ext_ack*);
  int (*delete)(struct Qdisc*, long unsigned int, struct netlink_ext_ack*);
  void (*walk)(struct Qdisc*, struct qdisc_walker*);
  struct tcf_block* (
      *tcf_block)(struct Qdisc*, long unsigned int, struct netlink_ext_ack*);
  long unsigned int (*bind_tcf)(struct Qdisc*, long unsigned int, u32);
  void (*unbind_tcf)(struct Qdisc*, long unsigned int);
  int (*dump)(struct Qdisc*, long unsigned int, struct sk_buff*, struct tcmsg*);
  int (*dump_stats)(struct Qdisc*, long unsigned int, struct gnet_dump*);
};

struct tcf_chain;

struct tcf_block {
  struct mutex lock;
  struct list_head chain_list;
  u32 index;
  u32 classid;
  refcount_t refcnt;
  struct net* net;
  struct Qdisc* q;
  struct rw_semaphore cb_lock;
  struct flow_block flow_block;
  struct list_head owner_list;
  bool keep_dst;
  atomic_t offloadcnt;
  unsigned int nooffloaddevcnt;
  unsigned int lockeddevcnt;
  struct {
    struct tcf_chain* chain;
    struct list_head filter_chain_list;
  } chain0;
  struct callback_head rcu;
  struct hlist_head proto_destroy_ht[128];
  struct mutex proto_destroy_lock;
};

struct tcf_result;

struct tcf_proto_ops;

struct tcf_proto {
  struct tcf_proto* next;
  void* root;
  int (*classify)(struct sk_buff*, const struct tcf_proto*, struct tcf_result*);
  __be16 protocol;
  u32 prio;
  void* data;
  const struct tcf_proto_ops* ops;
  struct tcf_chain* chain;
  spinlock_t lock;
  bool deleting;
  refcount_t refcnt;
  struct callback_head rcu;
  struct hlist_node destroy_ht_node;
};

struct tcf_result {
  union {
    struct {
      long unsigned int class;
      u32 classid;
    };
    const struct tcf_proto* goto_tp;
    struct {
      bool ingress;
      struct gnet_stats_queue* qstats;
    };
  };
};

struct tcf_walker;

struct tcf_proto_ops {
  struct list_head head;
  char kind[16];
  int (*classify)(struct sk_buff*, const struct tcf_proto*, struct tcf_result*);
  int (*init)(struct tcf_proto*);
  void (*destroy)(struct tcf_proto*, bool, struct netlink_ext_ack*);
  void* (*get)(struct tcf_proto*, u32);
  void (*put)(struct tcf_proto*, void*);
  int (*change)(
      struct net*,
      struct sk_buff*,
      struct tcf_proto*,
      long unsigned int,
      u32,
      struct nlattr**,
      void**,
      u32,
      struct netlink_ext_ack*);
  int (*delete)(struct tcf_proto*, void*, bool*, bool, struct netlink_ext_ack*);
  bool (*delete_empty)(struct tcf_proto*);
  void (*walk)(struct tcf_proto*, struct tcf_walker*, bool);
  int (*reoffload)(
      struct tcf_proto*,
      bool,
      flow_setup_cb_t*,
      void*,
      struct netlink_ext_ack*);
  void (*hw_add)(struct tcf_proto*, void*);
  void (*hw_del)(struct tcf_proto*, void*);
  void (*bind_class)(void*, u32, long unsigned int, void*, long unsigned int);
  void* (*tmplt_create)(
      struct net*,
      struct tcf_chain*,
      struct nlattr**,
      struct netlink_ext_ack*);
  void (*tmplt_destroy)(void*);
  int (*dump)(
      struct net*,
      struct tcf_proto*,
      void*,
      struct sk_buff*,
      struct tcmsg*,
      bool);
  int (*terse_dump)(
      struct net*,
      struct tcf_proto*,
      void*,
      struct sk_buff*,
      struct tcmsg*,
      bool);
  int (*tmplt_dump)(struct sk_buff*, struct net*, void*);
  struct module* owner;
  int flags;
};

struct tcf_chain {
  struct mutex filter_chain_lock;
  struct tcf_proto* filter_chain;
  struct list_head list;
  struct tcf_block* block;
  u32 index;
  unsigned int refcnt;
  unsigned int action_refcnt;
  bool explicitly_created;
  bool flushing;
  const struct tcf_proto_ops* tmplt_ops;
  void* tmplt_priv;
  struct callback_head rcu;
};

struct sock_fprog_kern {
  u16 len;
  struct sock_filter* filter;
};

struct bpf_prog_stats {
  u64 cnt;
  u64 nsecs;
  u64 misses;
  struct u64_stats_sync syncp;
  long : 64;
};

struct sk_filter {
  refcount_t refcnt;
  struct callback_head rcu;
  struct bpf_prog* prog;
};

struct bpf_nh_params {
  u32 nh_family;
  union {
    u32 ipv4_nh;
    struct in6_addr ipv6_nh;
  };
};

struct bpf_redirect_info {
  u32 flags;
  u32 tgt_index;
  void* tgt_value;
  struct bpf_map* map;
  u32 map_id;
  enum bpf_map_type map_type;
  u32 kern_flags;
  struct bpf_nh_params nh;
};

enum {
  NEIGH_VAR_MCAST_PROBES = 0,
  NEIGH_VAR_UCAST_PROBES = 1,
  NEIGH_VAR_APP_PROBES = 2,
  NEIGH_VAR_MCAST_REPROBES = 3,
  NEIGH_VAR_RETRANS_TIME = 4,
  NEIGH_VAR_BASE_REACHABLE_TIME = 5,
  NEIGH_VAR_DELAY_PROBE_TIME = 6,
  NEIGH_VAR_GC_STALETIME = 7,
  NEIGH_VAR_QUEUE_LEN_BYTES = 8,
  NEIGH_VAR_PROXY_QLEN = 9,
  NEIGH_VAR_ANYCAST_DELAY = 10,
  NEIGH_VAR_PROXY_DELAY = 11,
  NEIGH_VAR_LOCKTIME = 12,
  NEIGH_VAR_QUEUE_LEN = 13,
  NEIGH_VAR_RETRANS_TIME_MS = 14,
  NEIGH_VAR_BASE_REACHABLE_TIME_MS = 15,
  NEIGH_VAR_GC_INTERVAL = 16,
  NEIGH_VAR_GC_THRESH1 = 17,
  NEIGH_VAR_GC_THRESH2 = 18,
  NEIGH_VAR_GC_THRESH3 = 19,
  NEIGH_VAR_MAX = 20,
};

struct pneigh_entry;

struct neigh_statistics;

struct neigh_hash_table;

struct neigh_table {
  int family;
  unsigned int entry_size;
  unsigned int key_len;
  __be16 protocol;
  __u32 (*hash)(const void*, const struct net_device*, __u32*);
  bool (*key_eq)(const struct neighbour*, const void*);
  int (*constructor)(struct neighbour*);
  int (*pconstructor)(struct pneigh_entry*);
  void (*pdestructor)(struct pneigh_entry*);
  void (*proxy_redo)(struct sk_buff*);
  int (*is_multicast)(const void*);
  bool (*allow_add)(const struct net_device*, struct netlink_ext_ack*);
  char* id;
  struct neigh_parms parms;
  struct list_head parms_list;
  int gc_interval;
  int gc_thresh1;
  int gc_thresh2;
  int gc_thresh3;
  long unsigned int last_flush;
  struct delayed_work gc_work;
  struct timer_list proxy_timer;
  struct sk_buff_head proxy_queue;
  atomic_t entries;
  atomic_t gc_entries;
  struct list_head gc_list;
  rwlock_t lock;
  long unsigned int last_rand;
  struct neigh_statistics* stats;
  struct neigh_hash_table* nht;
  struct pneigh_entry** phash_buckets;
};

struct neigh_statistics {
  long unsigned int allocs;
  long unsigned int destroys;
  long unsigned int hash_grows;
  long unsigned int res_failed;
  long unsigned int lookups;
  long unsigned int hits;
  long unsigned int rcv_probes_mcast;
  long unsigned int rcv_probes_ucast;
  long unsigned int periodic_gc_runs;
  long unsigned int forced_gc_runs;
  long unsigned int unres_discards;
  long unsigned int table_fulls;
};

struct neigh_ops {
  int family;
  void (*solicit)(struct neighbour*, struct sk_buff*);
  void (*error_report)(struct neighbour*, struct sk_buff*);
  int (*output)(struct neighbour*, struct sk_buff*);
  int (*connected_output)(struct neighbour*, struct sk_buff*);
};

struct pneigh_entry {
  struct pneigh_entry* next;
  possible_net_t net;
  struct net_device* dev;
  u8 flags;
  u8 protocol;
  u8 key[0];
};

struct neigh_hash_table {
  struct neighbour** hash_buckets;
  unsigned int hash_shift;
  __u32 hash_rnd[4];
  struct callback_head rcu;
};

struct dst_metrics {
  u32 metrics[17];
  refcount_t refcnt;
};

enum {
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT = 2,
  TCP_SYN_RECV = 3,
  TCP_FIN_WAIT1 = 4,
  TCP_FIN_WAIT2 = 5,
  TCP_TIME_WAIT = 6,
  TCP_CLOSE = 7,
  TCP_CLOSE_WAIT = 8,
  TCP_LAST_ACK = 9,
  TCP_LISTEN = 10,
  TCP_CLOSING = 11,
  TCP_NEW_SYN_RECV = 12,
  TCP_MAX_STATES = 13,
};

struct fib_rule_hdr {
  __u8 family;
  __u8 dst_len;
  __u8 src_len;
  __u8 tos;
  __u8 table;
  __u8 res1;
  __u8 res2;
  __u8 action;
  __u32 flags;
};

struct fib_rule_port_range {
  __u16 start;
  __u16 end;
};

struct fib_kuid_range {
  kuid_t start;
  kuid_t end;
};

struct fib_rule {
  struct list_head list;
  int iifindex;
  int oifindex;
  u32 mark;
  u32 mark_mask;
  u32 flags;
  u32 table;
  u8 action;
  u8 l3mdev;
  u8 proto;
  u8 ip_proto;
  u32 target;
  __be64 tun_id;
  struct fib_rule* ctarget;
  struct net* fr_net;
  refcount_t refcnt;
  u32 pref;
  int suppress_ifgroup;
  int suppress_prefixlen;
  char iifname[16];
  char oifname[16];
  struct fib_kuid_range uid_range;
  struct fib_rule_port_range sport_range;
  struct fib_rule_port_range dport_range;
  struct callback_head rcu;
};

struct fib_lookup_arg {
  void* lookup_ptr;
  const void* lookup_data;
  void* result;
  struct fib_rule* rule;
  u32 table;
  int flags;
};

struct smc_hashinfo;

struct sk_psock;

struct request_sock_ops;

struct timewait_sock_ops;

struct udp_table;

struct raw_hashinfo;

struct proto {
  void (*close)(struct sock*, long int);
  int (*pre_connect)(struct sock*, struct sockaddr*, int);
  int (*connect)(struct sock*, struct sockaddr*, int);
  int (*disconnect)(struct sock*, int);
  struct sock* (*accept)(struct sock*, int, int*, bool);
  int (*ioctl)(struct sock*, int, long unsigned int);
  int (*init)(struct sock*);
  void (*destroy)(struct sock*);
  void (*shutdown)(struct sock*, int);
  int (*setsockopt)(struct sock*, int, int, sockptr_t, unsigned int);
  int (*getsockopt)(struct sock*, int, int, char*, int*);
  void (*keepalive)(struct sock*, int);
  int (*compat_ioctl)(struct sock*, unsigned int, long unsigned int);
  int (*sendmsg)(struct sock*, struct msghdr*, size_t);
  int (*recvmsg)(struct sock*, struct msghdr*, size_t, int, int, int*);
  int (*sendpage)(struct sock*, struct page*, int, size_t, int);
  int (*bind)(struct sock*, struct sockaddr*, int);
  int (*bind_add)(struct sock*, struct sockaddr*, int);
  int (*backlog_rcv)(struct sock*, struct sk_buff*);
  bool (*bpf_bypass_getsockopt)(int, int);
  void (*release_cb)(struct sock*);
  int (*hash)(struct sock*);
  void (*unhash)(struct sock*);
  void (*rehash)(struct sock*);
  int (*get_port)(struct sock*, short unsigned int);
  int (*psock_update_sk_prot)(struct sock*, struct sk_psock*, bool);
  unsigned int inuse_idx;
  bool (*stream_memory_free)(const struct sock*, int);
  bool (*stream_memory_read)(const struct sock*);
  void (*enter_memory_pressure)(struct sock*);
  void (*leave_memory_pressure)(struct sock*);
  atomic_long_t* memory_allocated;
  struct percpu_counter* sockets_allocated;
  long unsigned int* memory_pressure;
  long int* sysctl_mem;
  int* sysctl_wmem;
  int* sysctl_rmem;
  u32 sysctl_wmem_offset;
  u32 sysctl_rmem_offset;
  int max_header;
  bool no_autobind;
  struct kmem_cache* slab;
  unsigned int obj_size;
  slab_flags_t slab_flags;
  unsigned int useroffset;
  unsigned int usersize;
  struct percpu_counter* orphan_count;
  struct request_sock_ops* rsk_prot;
  struct timewait_sock_ops* twsk_prot;
  union {
    struct inet_hashinfo* hashinfo;
    struct udp_table* udp_table;
    struct raw_hashinfo* raw_hash;
    struct smc_hashinfo* smc_hash;
  } h;
  struct module* owner;
  char name[32];
  struct list_head node;
  int (*diag_destroy)(struct sock*, int);
};

struct request_sock;

struct request_sock_ops {
  int family;
  unsigned int obj_size;
  struct kmem_cache* slab;
  char* slab_name;
  int (*rtx_syn_ack)(const struct sock*, struct request_sock*);
  void (*send_ack)(const struct sock*, struct sk_buff*, struct request_sock*);
  void (*send_reset)(const struct sock*, struct sk_buff*);
  void (*destructor)(struct request_sock*);
  void (*syn_ack_timeout)(const struct request_sock*);
};

struct timewait_sock_ops {
  struct kmem_cache* twsk_slab;
  char* twsk_slab_name;
  unsigned int twsk_obj_size;
  int (*twsk_unique)(struct sock*, struct sock*, void*);
  void (*twsk_destructor)(struct sock*);
};

struct saved_syn;

struct request_sock {
  struct sock_common __req_common;
  struct request_sock* dl_next;
  u16 mss;
  u8 num_retrans;
  u8 syncookie : 1;
  u8 num_timeout : 7;
  u32 ts_recent;
  struct timer_list rsk_timer;
  const struct request_sock_ops* rsk_ops;
  struct sock* sk;
  struct saved_syn* saved_syn;
  u32 secid;
  u32 peer_secid;
};

struct saved_syn {
  u32 mac_hdrlen;
  u32 network_hdrlen;
  u32 tcp_hdrlen;
  u8 data[0];
};

enum tsq_enum {
  TSQ_THROTTLED = 0,
  TSQ_QUEUED = 1,
  TCP_TSQ_DEFERRED = 2,
  TCP_WRITE_TIMER_DEFERRED = 3,
  TCP_DELACK_TIMER_DEFERRED = 4,
  TCP_MTU_REDUCED_DEFERRED = 5,
};

struct static_key_false_deferred {
  struct static_key_false key;
  long unsigned int timeout;
  struct delayed_work work;
};

struct ip6_sf_list {
  struct ip6_sf_list* sf_next;
  struct in6_addr sf_addr;
  long unsigned int sf_count[2];
  unsigned char sf_gsresp;
  unsigned char sf_oldin;
  unsigned char sf_crcount;
};

struct ifmcaddr6 {
  struct in6_addr mca_addr;
  struct inet6_dev* idev;
  struct ifmcaddr6* next;
  struct ip6_sf_list* mca_sources;
  struct ip6_sf_list* mca_tomb;
  unsigned int mca_sfmode;
  unsigned char mca_crcount;
  long unsigned int mca_sfcount[2];
  struct timer_list mca_timer;
  unsigned int mca_flags;
  int mca_users;
  refcount_t mca_refcnt;
  spinlock_t mca_lock;
  long unsigned int mca_cstamp;
  long unsigned int mca_tstamp;
};

struct ifacaddr6 {
  struct in6_addr aca_addr;
  struct fib6_info* aca_rt;
  struct ifacaddr6* aca_next;
  struct hlist_node aca_addr_lst;
  int aca_users;
  refcount_t aca_refcnt;
  long unsigned int aca_cstamp;
  long unsigned int aca_tstamp;
  struct callback_head rcu;
};

struct fib6_result;

struct fib6_nh;

struct fib6_config;

struct ipv6_stub {
  int (*ipv6_sock_mc_join)(struct sock*, int, const struct in6_addr*);
  int (*ipv6_sock_mc_drop)(struct sock*, int, const struct in6_addr*);
  struct dst_entry* (*ipv6_dst_lookup_flow)(
      struct net*,
      const struct sock*,
      struct flowi6*,
      const struct in6_addr*);
  int (*ipv6_route_input)(struct sk_buff*);
  struct fib6_table* (*fib6_get_table)(struct net*, u32);
  int (
      *fib6_lookup)(struct net*, int, struct flowi6*, struct fib6_result*, int);
  int (*fib6_table_lookup)(
      struct net*,
      struct fib6_table*,
      int,
      struct flowi6*,
      struct fib6_result*,
      int);
  void (*fib6_select_path)(
      const struct net*,
      struct fib6_result*,
      struct flowi6*,
      int,
      bool,
      const struct sk_buff*,
      int);
  u32 (*ip6_mtu_from_fib6)(
      const struct fib6_result*,
      const struct in6_addr*,
      const struct in6_addr*);
  int (*fib6_nh_init)(
      struct net*,
      struct fib6_nh*,
      struct fib6_config*,
      gfp_t,
      struct netlink_ext_ack*);
  void (*fib6_nh_release)(struct fib6_nh*);
  void (*fib6_update_sernum)(struct net*, struct fib6_info*);
  int (*ip6_del_rt)(struct net*, struct fib6_info*, bool);
  void (*fib6_rt_update)(struct net*, struct fib6_info*, struct nl_info*);
  void (*udpv6_encap_enable)();
  void (*ndisc_send_na)(
      struct net_device*,
      const struct in6_addr*,
      const struct in6_addr*,
      bool,
      bool,
      bool,
      bool);
  void (*xfrm6_local_rxpmtu)(struct sk_buff*, u32);
  int (*xfrm6_udp_encap_rcv)(struct sock*, struct sk_buff*);
  int (*xfrm6_rcv_encap)(struct sk_buff*, int, __be32, int);
  struct neigh_table* nd_tbl;
  int (*ipv6_fragment)(
      struct net*,
      struct sock*,
      struct sk_buff*,
      int (*)(struct net*, struct sock*, struct sk_buff*));
};

struct fib6_result {
  struct fib6_nh* nh;
  struct fib6_info* f6i;
  u32 fib6_flags;
  u8 fib6_type;
  struct rt6_info* rt6;
};

struct ipv6_bpf_stub {
  int (*inet6_bind)(struct sock*, struct sockaddr*, int, u32);
  struct sock* (*udp6_lib_lookup)(
      struct net*,
      const struct in6_addr*,
      __be16,
      const struct in6_addr*,
      __be16,
      int,
      int,
      struct udp_table*,
      struct sk_buff*);
};

enum {
  __ND_OPT_PREFIX_INFO_END = 0,
  ND_OPT_SOURCE_LL_ADDR = 1,
  ND_OPT_TARGET_LL_ADDR = 2,
  ND_OPT_PREFIX_INFO = 3,
  ND_OPT_REDIRECT_HDR = 4,
  ND_OPT_MTU = 5,
  ND_OPT_NONCE = 14,
  __ND_OPT_ARRAY_MAX = 15,
  ND_OPT_ROUTE_INFO = 24,
  ND_OPT_RDNSS = 25,
  ND_OPT_DNSSL = 31,
  ND_OPT_6CO = 34,
  ND_OPT_CAPTIVE_PORTAL = 37,
  ND_OPT_PREF64 = 38,
  __ND_OPT_MAX = 39,
};

struct nd_opt_hdr {
  __u8 nd_opt_type;
  __u8 nd_opt_len;
};

struct ndisc_options {
  struct nd_opt_hdr* nd_opt_array[15];
  struct nd_opt_hdr* nd_opts_ri;
  struct nd_opt_hdr* nd_opts_ri_end;
  struct nd_opt_hdr* nd_useropts;
  struct nd_opt_hdr* nd_useropts_end;
};

struct prefix_info {
  __u8 type;
  __u8 length;
  __u8 prefix_len;
  __u8 reserved : 6;
  __u8 autoconf : 1;
  __u8 onlink : 1;
  __be32 valid;
  __be32 prefered;
  __be32 reserved2;
  struct in6_addr prefix;
};

struct ip6_ra_chain {
  struct ip6_ra_chain* next;
  struct sock* sk;
  int sel;
  void (*destructor)(struct sock*);
};

struct rpc_xprt_iter_ops {
  void (*xpi_rewind)(struct rpc_xprt_iter*);
  struct rpc_xprt* (*xpi_xprt)(struct rpc_xprt_iter*);
  struct rpc_xprt* (*xpi_next)(struct rpc_xprt_iter*);
};

struct rpc_version {
  u32 number;
  unsigned int nrprocs;
  const struct rpc_procinfo* procs;
  unsigned int* counts;
};

struct nfs_fh {
  short unsigned int size;
  unsigned char data[128];
};

enum nfs3_stable_how {
  NFS_UNSTABLE = 0,
  NFS_DATA_SYNC = 1,
  NFS_FILE_SYNC = 2,
  NFS_INVALID_STABLE_HOW = 4294967295,
};

struct nfs4_label {
  uint32_t lfs;
  uint32_t pi;
  u32 len;
  char* label;
};

typedef struct {
  char data[8];
} nfs4_verifier;

struct nfs4_stateid_struct {
  union {
    char data[16];
    struct {
      __be32 seqid;
      char other[12];
    };
  };
  enum {
    NFS4_INVALID_STATEID_TYPE = 0,
    NFS4_SPECIAL_STATEID_TYPE = 1,
    NFS4_OPEN_STATEID_TYPE = 2,
    NFS4_LOCK_STATEID_TYPE = 3,
    NFS4_DELEGATION_STATEID_TYPE = 4,
    NFS4_LAYOUT_STATEID_TYPE = 5,
    NFS4_PNFS_DS_STATEID_TYPE = 6,
    NFS4_REVOKED_STATEID_TYPE = 7,
  } type;
};

typedef struct nfs4_stateid_struct nfs4_stateid;

enum nfs_opnum4 {
  OP_ACCESS = 3,
  OP_CLOSE = 4,
  OP_COMMIT = 5,
  OP_CREATE = 6,
  OP_DELEGPURGE = 7,
  OP_DELEGRETURN = 8,
  OP_GETATTR = 9,
  OP_GETFH = 10,
  OP_LINK = 11,
  OP_LOCK = 12,
  OP_LOCKT = 13,
  OP_LOCKU = 14,
  OP_LOOKUP = 15,
  OP_LOOKUPP = 16,
  OP_NVERIFY = 17,
  OP_OPEN = 18,
  OP_OPENATTR = 19,
  OP_OPEN_CONFIRM = 20,
  OP_OPEN_DOWNGRADE = 21,
  OP_PUTFH = 22,
  OP_PUTPUBFH = 23,
  OP_PUTROOTFH = 24,
  OP_READ = 25,
  OP_READDIR = 26,
  OP_READLINK = 27,
  OP_REMOVE = 28,
  OP_RENAME = 29,
  OP_RENEW = 30,
  OP_RESTOREFH = 31,
  OP_SAVEFH = 32,
  OP_SECINFO = 33,
  OP_SETATTR = 34,
  OP_SETCLIENTID = 35,
  OP_SETCLIENTID_CONFIRM = 36,
  OP_VERIFY = 37,
  OP_WRITE = 38,
  OP_RELEASE_LOCKOWNER = 39,
  OP_BACKCHANNEL_CTL = 40,
  OP_BIND_CONN_TO_SESSION = 41,
  OP_EXCHANGE_ID = 42,
  OP_CREATE_SESSION = 43,
  OP_DESTROY_SESSION = 44,
  OP_FREE_STATEID = 45,
  OP_GET_DIR_DELEGATION = 46,
  OP_GETDEVICEINFO = 47,
  OP_GETDEVICELIST = 48,
  OP_LAYOUTCOMMIT = 49,
  OP_LAYOUTGET = 50,
  OP_LAYOUTRETURN = 51,
  OP_SECINFO_NO_NAME = 52,
  OP_SEQUENCE = 53,
  OP_SET_SSV = 54,
  OP_TEST_STATEID = 55,
  OP_WANT_DELEGATION = 56,
  OP_DESTROY_CLIENTID = 57,
  OP_RECLAIM_COMPLETE = 58,
  OP_ALLOCATE = 59,
  OP_COPY = 60,
  OP_COPY_NOTIFY = 61,
  OP_DEALLOCATE = 62,
  OP_IO_ADVISE = 63,
  OP_LAYOUTERROR = 64,
  OP_LAYOUTSTATS = 65,
  OP_OFFLOAD_CANCEL = 66,
  OP_OFFLOAD_STATUS = 67,
  OP_READ_PLUS = 68,
  OP_SEEK = 69,
  OP_WRITE_SAME = 70,
  OP_CLONE = 71,
  OP_GETXATTR = 72,
  OP_SETXATTR = 73,
  OP_LISTXATTRS = 74,
  OP_REMOVEXATTR = 75,
  OP_ILLEGAL = 10044,
};

struct nfs4_string {
  unsigned int len;
  char* data;
};

struct nfs_fsid {
  uint64_t major;
  uint64_t minor;
};

struct nfs4_threshold {
  __u32 bm;
  __u32 l_type;
  __u64 rd_sz;
  __u64 wr_sz;
  __u64 rd_io_sz;
  __u64 wr_io_sz;
};

struct nfs_fattr {
  unsigned int valid;
  umode_t mode;
  __u32 nlink;
  kuid_t uid;
  kgid_t gid;
  dev_t rdev;
  __u64 size;
  union {
    struct {
      __u32 blocksize;
      __u32 blocks;
    } nfs2;
    struct {
      __u64 used;
    } nfs3;
  } du;
  struct nfs_fsid fsid;
  __u64 fileid;
  __u64 mounted_on_fileid;
  struct timespec64 atime;
  struct timespec64 mtime;
  struct timespec64 ctime;
  __u64 change_attr;
  __u64 pre_change_attr;
  __u64 pre_size;
  struct timespec64 pre_mtime;
  struct timespec64 pre_ctime;
  long unsigned int time_start;
  long unsigned int gencount;
  struct nfs4_string* owner_name;
  struct nfs4_string* group_name;
  struct nfs4_threshold* mdsthreshold;
  struct nfs4_label* label;
};

struct nfs_fsinfo {
  struct nfs_fattr* fattr;
  __u32 rtmax;
  __u32 rtpref;
  __u32 rtmult;
  __u32 wtmax;
  __u32 wtpref;
  __u32 wtmult;
  __u32 dtpref;
  __u64 maxfilesize;
  struct timespec64 time_delta;
  __u32 lease_time;
  __u32 nlayouttypes;
  __u32 layouttype[8];
  __u32 blksize;
  __u32 clone_blksize;
  __u32 xattr_support;
};

struct nfs_fsstat {
  struct nfs_fattr* fattr;
  __u64 tbytes;
  __u64 fbytes;
  __u64 abytes;
  __u64 tfiles;
  __u64 ffiles;
  __u64 afiles;
};

struct nfs_pathconf {
  struct nfs_fattr* fattr;
  __u32 max_link;
  __u32 max_namelen;
};

struct nfs4_change_info {
  u32 atomic;
  u64 before;
  u64 after;
};

struct nfs4_slot;

struct nfs4_sequence_args {
  struct nfs4_slot* sa_slot;
  u8 sa_cache_this : 1;
  u8 sa_privileged : 1;
};

struct nfs4_sequence_res {
  struct nfs4_slot* sr_slot;
  long unsigned int sr_timestamp;
  int sr_status;
  u32 sr_status_flags;
  u32 sr_highest_slotid;
  u32 sr_target_highest_slotid;
};

struct nfs_open_context;

struct nfs_lock_context {
  refcount_t count;
  struct list_head list;
  struct nfs_open_context* open_context;
  fl_owner_t lockowner;
  atomic_t io_count;
  struct callback_head callback_head;
};

struct nfs4_state;

struct nfs_open_context {
  struct nfs_lock_context lock_context;
  fl_owner_t flock_owner;
  struct dentry* dentry;
  const struct cred* cred;
  struct rpc_cred* ll_cred;
  struct nfs4_state* state;
  fmode_t mode;
  long unsigned int flags;
  int error;
  struct list_head list;
  struct nfs4_threshold* mdsthreshold;
  struct callback_head callback_head;
};

struct nlm_host;

struct nfs_iostats;

struct nfs_auth_info {
  unsigned int flavor_len;
  rpc_authflavor_t flavors[12];
};

struct nfs_fscache_key;

struct fscache_cookie;

struct pnfs_layoutdriver_type;

struct nfs_client;

struct nfs_server {
  struct nfs_client* nfs_client;
  struct list_head client_link;
  struct list_head master_link;
  struct rpc_clnt* client;
  struct rpc_clnt* client_acl;
  struct nlm_host* nlm_host;
  struct nfs_iostats* io_stats;
  atomic_long_t writeback;
  unsigned int flags;
  unsigned int caps;
  unsigned int rsize;
  unsigned int rpages;
  unsigned int wsize;
  unsigned int wpages;
  unsigned int wtmult;
  unsigned int dtsize;
  short unsigned int port;
  unsigned int bsize;
  unsigned int acregmin;
  unsigned int acregmax;
  unsigned int acdirmin;
  unsigned int acdirmax;
  unsigned int namelen;
  unsigned int options;
  unsigned int clone_blksize;
  struct nfs_fsid fsid;
  __u64 maxfilesize;
  struct timespec64 time_delta;
  long unsigned int mount_time;
  struct super_block* super;
  dev_t s_dev;
  struct nfs_auth_info auth_info;
  struct nfs_fscache_key* fscache_key;
  struct fscache_cookie* fscache;
  u32 pnfs_blksize;
  u32 attr_bitmask[3];
  u32 attr_bitmask_nl[3];
  u32 exclcreat_bitmask[3];
  u32 cache_consistency_bitmask[3];
  u32 acl_bitmask;
  u32 fh_expire_type;
  struct pnfs_layoutdriver_type* pnfs_curr_ld;
  struct rpc_wait_queue roc_rpcwaitq;
  void* pnfs_ld_data;
  struct rb_root state_owners;
  struct ida openowner_id;
  struct ida lockowner_id;
  struct list_head state_owners_lru;
  struct list_head layouts;
  struct list_head delegations;
  struct list_head ss_copies;
  long unsigned int mig_gen;
  long unsigned int mig_status;
  void (*destroy)(struct nfs_server*);
  atomic_t active;
  struct __kernel_sockaddr_storage mountd_address;
  size_t mountd_addrlen;
  u32 mountd_version;
  short unsigned int mountd_port;
  short unsigned int mountd_protocol;
  struct rpc_wait_queue uoc_rpcwaitq;
  unsigned int read_hdrsize;
  const struct cred* cred;
};

struct nfs_subversion;

struct idmap;

struct nfs4_minor_version_ops;

struct nfs4_slot_table;

struct nfs4_session;

struct nfs41_server_owner;

struct nfs41_server_scope;

struct nfs41_impl_id;

struct nfs_rpc_ops;

struct nfs_client {
  refcount_t cl_count;
  atomic_t cl_mds_count;
  int cl_cons_state;
  long unsigned int cl_res_state;
  long unsigned int cl_flags;
  struct __kernel_sockaddr_storage cl_addr;
  size_t cl_addrlen;
  char* cl_hostname;
  char* cl_acceptor;
  struct list_head cl_share_link;
  struct list_head cl_superblocks;
  struct rpc_clnt* cl_rpcclient;
  const struct nfs_rpc_ops* rpc_ops;
  int cl_proto;
  struct nfs_subversion* cl_nfs_mod;
  u32 cl_minorversion;
  unsigned int cl_nconnect;
  const char* cl_principal;
  struct list_head cl_ds_clients;
  u64 cl_clientid;
  nfs4_verifier cl_confirm;
  long unsigned int cl_state;
  spinlock_t cl_lock;
  long unsigned int cl_lease_time;
  long unsigned int cl_last_renewal;
  struct delayed_work cl_renewd;
  struct rpc_wait_queue cl_rpcwaitq;
  struct idmap* cl_idmap;
  const char* cl_owner_id;
  u32 cl_cb_ident;
  const struct nfs4_minor_version_ops* cl_mvops;
  long unsigned int cl_mig_gen;
  struct nfs4_slot_table* cl_slot_tbl;
  u32 cl_seqid;
  u32 cl_exchange_flags;
  struct nfs4_session* cl_session;
  bool cl_preserve_clid;
  struct nfs41_server_owner* cl_serverowner;
  struct nfs41_server_scope* cl_serverscope;
  struct nfs41_impl_id* cl_implid;
  long unsigned int cl_sp4_flags;
  char cl_ipaddr[48];
  struct fscache_cookie* fscache;
  struct net* cl_net;
  struct list_head pending_cb_stateids;
};

struct pnfs_layout_segment;

struct nfs_write_verifier {
  char data[8];
};

struct nfs_writeverf {
  struct nfs_write_verifier verifier;
  enum nfs3_stable_how committed;
};

struct nfs_pgio_args {
  struct nfs4_sequence_args seq_args;
  struct nfs_fh* fh;
  struct nfs_open_context* context;
  struct nfs_lock_context* lock_context;
  nfs4_stateid stateid;
  __u64 offset;
  __u32 count;
  unsigned int pgbase;
  struct page** pages;
  union {
    unsigned int replen;
    struct {
      const u32* bitmask;
      u32 bitmask_store[3];
      enum nfs3_stable_how stable;
    };
  };
};

struct nfs_pgio_res {
  struct nfs4_sequence_res seq_res;
  struct nfs_fattr* fattr;
  __u64 count;
  __u32 op_status;
  union {
    struct {
      unsigned int replen;
      int eof;
    };
    struct {
      struct nfs_writeverf* verf;
      const struct nfs_server* server;
    };
  };
};

struct nfs_commitargs {
  struct nfs4_sequence_args seq_args;
  struct nfs_fh* fh;
  __u64 offset;
  __u32 count;
  const u32* bitmask;
};

struct nfs_commitres {
  struct nfs4_sequence_res seq_res;
  __u32 op_status;
  struct nfs_fattr* fattr;
  struct nfs_writeverf* verf;
  const struct nfs_server* server;
};

struct nfs_removeargs {
  struct nfs4_sequence_args seq_args;
  const struct nfs_fh* fh;
  struct qstr name;
};

struct nfs_removeres {
  struct nfs4_sequence_res seq_res;
  struct nfs_server* server;
  struct nfs_fattr* dir_attr;
  struct nfs4_change_info cinfo;
};

struct nfs_renameargs {
  struct nfs4_sequence_args seq_args;
  const struct nfs_fh* old_dir;
  const struct nfs_fh* new_dir;
  const struct qstr* old_name;
  const struct qstr* new_name;
};

struct nfs_renameres {
  struct nfs4_sequence_res seq_res;
  struct nfs_server* server;
  struct nfs4_change_info old_cinfo;
  struct nfs_fattr* old_fattr;
  struct nfs4_change_info new_cinfo;
  struct nfs_fattr* new_fattr;
};

struct nfs_entry {
  __u64 ino;
  __u64 cookie;
  __u64 prev_cookie;
  const char* name;
  unsigned int len;
  int eof;
  struct nfs_fh* fh;
  struct nfs_fattr* fattr;
  struct nfs4_label* label;
  unsigned char d_type;
  struct nfs_server* server;
};

struct nfs_readdir_arg {
  struct dentry* dentry;
  const struct cred* cred;
  __be32* verf;
  u64 cookie;
  struct page** pages;
  unsigned int page_len;
  bool plus;
};

struct nfs_readdir_res {
  __be32* verf;
};

struct pnfs_ds_commit_info {};

struct nfs_page_array {
  struct page** pagevec;
  unsigned int npages;
  struct page* page_array[8];
};

struct nfs_page;

struct nfs_rw_ops;

struct nfs_io_completion;

struct nfs_direct_req;

struct nfs_pgio_completion_ops;

struct nfs_pgio_header {
  struct inode* inode;
  const struct cred* cred;
  struct list_head pages;
  struct nfs_page* req;
  struct nfs_writeverf verf;
  fmode_t rw_mode;
  struct pnfs_layout_segment* lseg;
  loff_t io_start;
  const struct rpc_call_ops* mds_ops;
  void (*release)(struct nfs_pgio_header*);
  const struct nfs_pgio_completion_ops* completion_ops;
  const struct nfs_rw_ops* rw_ops;
  struct nfs_io_completion* io_completion;
  struct nfs_direct_req* dreq;
  int pnfs_error;
  int error;
  unsigned int good_bytes;
  long unsigned int flags;
  struct rpc_task task;
  struct nfs_fattr fattr;
  struct nfs_pgio_args args;
  struct nfs_pgio_res res;
  long unsigned int timestamp;
  int (*pgio_done_cb)(struct rpc_task*, struct nfs_pgio_header*);
  __u64 mds_offset;
  struct nfs_page_array page_array;
  struct nfs_client* ds_clp;
  u32 ds_commit_idx;
  u32 pgio_mirror_idx;
};

struct nfs_pgio_completion_ops {
  void (*error_cleanup)(struct list_head*, int);
  void (*init_hdr)(struct nfs_pgio_header*);
  void (*completion)(struct nfs_pgio_header*);
  void (*reschedule_io)(struct nfs_pgio_header*);
};

struct nfs_mds_commit_info {
  atomic_t rpcs_out;
  atomic_long_t ncommit;
  struct list_head list;
};

struct nfs_commit_data;

struct nfs_commit_info;

struct nfs_commit_completion_ops {
  void (*completion)(struct nfs_commit_data*);
  void (*resched_write)(struct nfs_commit_info*, struct nfs_page*);
};

struct nfs_commit_data {
  struct rpc_task task;
  struct inode* inode;
  const struct cred* cred;
  struct nfs_fattr fattr;
  struct nfs_writeverf verf;
  struct list_head pages;
  struct list_head list;
  struct nfs_direct_req* dreq;
  struct nfs_commitargs args;
  struct nfs_commitres res;
  struct nfs_open_context* context;
  struct pnfs_layout_segment* lseg;
  struct nfs_client* ds_clp;
  int ds_commit_index;
  loff_t lwb;
  const struct rpc_call_ops* mds_ops;
  const struct nfs_commit_completion_ops* completion_ops;
  int (*commit_done_cb)(struct rpc_task*, struct nfs_commit_data*);
  long unsigned int flags;
};

struct nfs_commit_info {
  struct inode* inode;
  struct nfs_mds_commit_info* mds;
  struct pnfs_ds_commit_info* ds;
  struct nfs_direct_req* dreq;
  const struct nfs_commit_completion_ops* completion_ops;
};

struct nfs_unlinkdata {
  struct nfs_removeargs args;
  struct nfs_removeres res;
  struct dentry* dentry;
  wait_queue_head_t wq;
  const struct cred* cred;
  struct nfs_fattr dir_attr;
  long int timeout;
};

struct nfs_renamedata {
  struct nfs_renameargs args;
  struct nfs_renameres res;
  const struct cred* cred;
  struct inode* old_dir;
  struct dentry* old_dentry;
  struct nfs_fattr old_fattr;
  struct inode* new_dir;
  struct dentry* new_dentry;
  struct nfs_fattr new_fattr;
  void (*complete)(struct rpc_task*, struct nfs_renamedata*);
  long int timeout;
  bool cancelled;
};

struct nlmclnt_operations;

struct nfs_client_initdata;

struct nfs_access_entry;

struct nfs_rpc_ops {
  u32 version;
  const struct dentry_operations* dentry_ops;
  const struct inode_operations* dir_inode_ops;
  const struct inode_operations* file_inode_ops;
  const struct file_operations* file_ops;
  const struct nlmclnt_operations* nlmclnt_ops;
  int (*getroot)(struct nfs_server*, struct nfs_fh*, struct nfs_fsinfo*);
  int (*submount)(struct fs_context*, struct nfs_server*);
  int (*try_get_tree)(struct fs_context*);
  int (*getattr)(
      struct nfs_server*,
      struct nfs_fh*,
      struct nfs_fattr*,
      struct nfs4_label*,
      struct inode*);
  int (*setattr)(struct dentry*, struct nfs_fattr*, struct iattr*);
  int (*lookup)(
      struct inode*,
      struct dentry*,
      struct nfs_fh*,
      struct nfs_fattr*,
      struct nfs4_label*);
  int (*lookupp)(
      struct inode*,
      struct nfs_fh*,
      struct nfs_fattr*,
      struct nfs4_label*);
  int (*access)(struct inode*, struct nfs_access_entry*);
  int (*readlink)(struct inode*, struct page*, unsigned int, unsigned int);
  int (*create)(struct inode*, struct dentry*, struct iattr*, int);
  int (*remove)(struct inode*, struct dentry*);
  void (*unlink_setup)(struct rpc_message*, struct dentry*, struct inode*);
  void (*unlink_rpc_prepare)(struct rpc_task*, struct nfs_unlinkdata*);
  int (*unlink_done)(struct rpc_task*, struct inode*);
  void (*rename_setup)(struct rpc_message*, struct dentry*, struct dentry*);
  void (*rename_rpc_prepare)(struct rpc_task*, struct nfs_renamedata*);
  int (*rename_done)(struct rpc_task*, struct inode*, struct inode*);
  int (*link)(struct inode*, struct inode*, const struct qstr*);
  int (*symlink)(
      struct inode*,
      struct dentry*,
      struct page*,
      unsigned int,
      struct iattr*);
  int (*mkdir)(struct inode*, struct dentry*, struct iattr*);
  int (*rmdir)(struct inode*, const struct qstr*);
  int (*readdir)(struct nfs_readdir_arg*, struct nfs_readdir_res*);
  int (*mknod)(struct inode*, struct dentry*, struct iattr*, dev_t);
  int (*statfs)(struct nfs_server*, struct nfs_fh*, struct nfs_fsstat*);
  int (*fsinfo)(struct nfs_server*, struct nfs_fh*, struct nfs_fsinfo*);
  int (*pathconf)(struct nfs_server*, struct nfs_fh*, struct nfs_pathconf*);
  int (*set_capabilities)(struct nfs_server*, struct nfs_fh*);
  int (*decode_dirent)(struct xdr_stream*, struct nfs_entry*, bool);
  int (*pgio_rpc_prepare)(struct rpc_task*, struct nfs_pgio_header*);
  void (*read_setup)(struct nfs_pgio_header*, struct rpc_message*);
  int (*read_done)(struct rpc_task*, struct nfs_pgio_header*);
  void (*write_setup)(
      struct nfs_pgio_header*,
      struct rpc_message*,
      struct rpc_clnt**);
  int (*write_done)(struct rpc_task*, struct nfs_pgio_header*);
  void (*commit_setup)(
      struct nfs_commit_data*,
      struct rpc_message*,
      struct rpc_clnt**);
  void (*commit_rpc_prepare)(struct rpc_task*, struct nfs_commit_data*);
  int (*commit_done)(struct rpc_task*, struct nfs_commit_data*);
  int (*lock)(struct file*, int, struct file_lock*);
  int (*lock_check_bounds)(const struct file_lock*);
  void (*clear_acl_cache)(struct inode*);
  void (*close_context)(struct nfs_open_context*, int);
  struct inode* (*open_context)(
      struct inode*,
      struct nfs_open_context*,
      int,
      struct iattr*,
      int*);
  int (*have_delegation)(struct inode*, fmode_t);
  struct nfs_client* (*alloc_client)(const struct nfs_client_initdata*);
  struct nfs_client* (
      *init_client)(struct nfs_client*, const struct nfs_client_initdata*);
  void (*free_client)(struct nfs_client*);
  struct nfs_server* (*create_server)(struct fs_context*);
  struct nfs_server* (*clone_server)(
      struct nfs_server*,
      struct nfs_fh*,
      struct nfs_fattr*,
      rpc_authflavor_t);
};

struct nfs_access_entry {
  struct rb_node rb_node;
  struct list_head lru;
  const struct cred* cred;
  __u32 mask;
  struct callback_head callback_head;
};

enum perf_branch_sample_type_shift {
  PERF_SAMPLE_BRANCH_USER_SHIFT = 0,
  PERF_SAMPLE_BRANCH_KERNEL_SHIFT = 1,
  PERF_SAMPLE_BRANCH_HV_SHIFT = 2,
  PERF_SAMPLE_BRANCH_ANY_SHIFT = 3,
  PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT = 4,
  PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT = 5,
  PERF_SAMPLE_BRANCH_IND_CALL_SHIFT = 6,
  PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT = 7,
  PERF_SAMPLE_BRANCH_IN_TX_SHIFT = 8,
  PERF_SAMPLE_BRANCH_NO_TX_SHIFT = 9,
  PERF_SAMPLE_BRANCH_COND_SHIFT = 10,
  PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT = 11,
  PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT = 12,
  PERF_SAMPLE_BRANCH_CALL_SHIFT = 13,
  PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT = 14,
  PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT = 15,
  PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT = 16,
  PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT = 17,
  PERF_SAMPLE_BRANCH_MAX_SHIFT = 18,
};

enum exception_stack_ordering {
  ESTACK_DF = 0,
  ESTACK_NMI = 1,
  ESTACK_DB = 2,
  ESTACK_MCE = 3,
  ESTACK_VC = 4,
  ESTACK_VC2 = 5,
  N_EXCEPTION_STACKS = 6,
};

enum {
  TSK_TRACE_FL_TRACE_BIT = 0,
  TSK_TRACE_FL_GRAPH_BIT = 1,
};

struct uuidcmp {
  const char* uuid;
  int len;
};

typedef __u64 __le64;

struct minix_super_block {
  __u16 s_ninodes;
  __u16 s_nzones;
  __u16 s_imap_blocks;
  __u16 s_zmap_blocks;
  __u16 s_firstdatazone;
  __u16 s_log_zone_size;
  __u32 s_max_size;
  __u16 s_magic;
  __u16 s_state;
  __u32 s_zones;
};

struct romfs_super_block {
  __be32 word0;
  __be32 word1;
  __be32 size;
  __be32 checksum;
  char name[0];
};

struct cramfs_inode {
  __u32 mode : 16;
  __u32 uid : 16;
  __u32 size : 24;
  __u32 gid : 8;
  __u32 namelen : 6;
  __u32 offset : 26;
};

struct cramfs_info {
  __u32 crc;
  __u32 edition;
  __u32 blocks;
  __u32 files;
};

struct cramfs_super {
  __u32 magic;
  __u32 size;
  __u32 flags;
  __u32 future;
  __u8 signature[16];
  struct cramfs_info fsid;
  __u8 name[16];
  struct cramfs_inode root;
};

struct squashfs_super_block {
  __le32 s_magic;
  __le32 inodes;
  __le32 mkfs_time;
  __le32 block_size;
  __le32 fragments;
  __le16 compression;
  __le16 block_log;
  __le16 flags;
  __le16 no_ids;
  __le16 s_major;
  __le16 s_minor;
  __le64 root_inode;
  __le64 bytes_used;
  __le64 id_table_start;
  __le64 xattr_id_table_start;
  __le64 inode_table_start;
  __le64 directory_table_start;
  __le64 fragment_table_start;
  __le64 lookup_table_start;
};

typedef int (*decompress_fn)(
    unsigned char*,
    long int,
    long int (*)(void*, long unsigned int),
    long int (*)(void*, long unsigned int),
    unsigned char*,
    long int*,
    void (*)(char*));

struct subprocess_info {
  struct work_struct work;
  struct completion* complete;
  const char* path;
  char** argv;
  char** envp;
  int wait;
  int retval;
  int (*init)(struct subprocess_info*, struct cred*);
  void (*cleanup)(struct subprocess_info*);
  void* data;
};

struct __va_list_tag {
  unsigned int gp_offset;
  unsigned int fp_offset;
  void* overflow_arg_area;
  void* reg_save_area;
};

typedef __builtin_va_list __gnuc_va_list;

typedef __gnuc_va_list va_list;

struct hash {
  int ino;
  int minor;
  int major;
  umode_t mode;
  struct hash* next;
  char name[4098];
};

struct dir_entry {
  struct list_head list;
  char* name;
  time64_t mtime;
};

enum state {
  Start = 0,
  Collect = 1,
  GotHeader = 2,
  SkipIt = 3,
  GotName = 4,
  CopyFile = 5,
  GotSymlink = 6,
  Reset = 7,
};

typedef u32 note_buf_t[92];

struct kimage_arch {
  p4d_t* p4d;
  pud_t* pud;
  pmd_t* pmd;
  pte_t* pte;
  void* elf_headers;
  long unsigned int elf_headers_sz;
  long unsigned int elf_load_addr;
};

typedef void crash_vmclear_fn();

typedef long unsigned int kimage_entry_t;

struct kexec_segment {
  union {
    void* buf;
    void* kbuf;
  };
  size_t bufsz;
  long unsigned int mem;
  size_t memsz;
};

struct purgatory_info {
  const Elf64_Ehdr* ehdr;
  Elf64_Shdr* sechdrs;
  void* purgatory_buf;
};

typedef int kexec_probe_t(const char*, long unsigned int);

struct kimage;

typedef void* kexec_load_t(
    struct kimage*,
    char*,
    long unsigned int,
    char*,
    long unsigned int,
    char*,
    long unsigned int);

struct kexec_file_ops;

struct kimage {
  kimage_entry_t head;
  kimage_entry_t* entry;
  kimage_entry_t* last_entry;
  long unsigned int start;
  struct page* control_code_page;
  struct page* swap_page;
  void* vmcoreinfo_data_copy;
  long unsigned int nr_segments;
  struct kexec_segment segment[16];
  struct list_head control_pages;
  struct list_head dest_pages;
  struct list_head unusable_pages;
  long unsigned int control_page;
  unsigned int type : 1;
  unsigned int preserve_context : 1;
  unsigned int file_mode : 1;
  struct kimage_arch arch;
  void* kernel_buf;
  long unsigned int kernel_buf_len;
  void* initrd_buf;
  long unsigned int initrd_buf_len;
  char* cmdline_buf;
  long unsigned int cmdline_buf_len;
  const struct kexec_file_ops* fops;
  void* image_loader_data;
  struct purgatory_info purgatory_info;
};

typedef int kexec_cleanup_t(void*);

struct kexec_file_ops {
  kexec_probe_t* probe;
  kexec_load_t* load;
  kexec_cleanup_t* cleanup;
};

enum {
  HI_SOFTIRQ = 0,
  TIMER_SOFTIRQ = 1,
  NET_TX_SOFTIRQ = 2,
  NET_RX_SOFTIRQ = 3,
  BLOCK_SOFTIRQ = 4,
  IRQ_POLL_SOFTIRQ = 5,
  TASKLET_SOFTIRQ = 6,
  SCHED_SOFTIRQ = 7,
  HRTIMER_SOFTIRQ = 8,
  RCU_SOFTIRQ = 9,
  NR_SOFTIRQS = 10,
};

enum ucount_type {
  UCOUNT_USER_NAMESPACES = 0,
  UCOUNT_PID_NAMESPACES = 1,
  UCOUNT_UTS_NAMESPACES = 2,
  UCOUNT_IPC_NAMESPACES = 3,
  UCOUNT_NET_NAMESPACES = 4,
  UCOUNT_MNT_NAMESPACES = 5,
  UCOUNT_CGROUP_NAMESPACES = 6,
  UCOUNT_TIME_NAMESPACES = 7,
  UCOUNT_INOTIFY_INSTANCES = 8,
  UCOUNT_INOTIFY_WATCHES = 9,
  UCOUNT_COUNTS = 10,
};

enum flow_dissector_key_id {
  FLOW_DISSECTOR_KEY_CONTROL = 0,
  FLOW_DISSECTOR_KEY_BASIC = 1,
  FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
  FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
  FLOW_DISSECTOR_KEY_PORTS = 4,
  FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
  FLOW_DISSECTOR_KEY_ICMP = 6,
  FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
  FLOW_DISSECTOR_KEY_TIPC = 8,
  FLOW_DISSECTOR_KEY_ARP = 9,
  FLOW_DISSECTOR_KEY_VLAN = 10,
  FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
  FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
  FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
  FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
  FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
  FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
  FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
  FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
  FLOW_DISSECTOR_KEY_MPLS = 19,
  FLOW_DISSECTOR_KEY_TCP = 20,
  FLOW_DISSECTOR_KEY_IP = 21,
  FLOW_DISSECTOR_KEY_CVLAN = 22,
  FLOW_DISSECTOR_KEY_ENC_IP = 23,
  FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
  FLOW_DISSECTOR_KEY_META = 25,
  FLOW_DISSECTOR_KEY_CT = 26,
  FLOW_DISSECTOR_KEY_HASH = 27,
  FLOW_DISSECTOR_KEY_MAX = 28,
};

enum {
  IPSTATS_MIB_NUM = 0,
  IPSTATS_MIB_INPKTS = 1,
  IPSTATS_MIB_INOCTETS = 2,
  IPSTATS_MIB_INDELIVERS = 3,
  IPSTATS_MIB_OUTFORWDATAGRAMS = 4,
  IPSTATS_MIB_OUTPKTS = 5,
  IPSTATS_MIB_OUTOCTETS = 6,
  IPSTATS_MIB_INHDRERRORS = 7,
  IPSTATS_MIB_INTOOBIGERRORS = 8,
  IPSTATS_MIB_INNOROUTES = 9,
  IPSTATS_MIB_INADDRERRORS = 10,
  IPSTATS_MIB_INUNKNOWNPROTOS = 11,
  IPSTATS_MIB_INTRUNCATEDPKTS = 12,
  IPSTATS_MIB_INDISCARDS = 13,
  IPSTATS_MIB_OUTDISCARDS = 14,
  IPSTATS_MIB_OUTNOROUTES = 15,
  IPSTATS_MIB_REASMTIMEOUT = 16,
  IPSTATS_MIB_REASMREQDS = 17,
  IPSTATS_MIB_REASMOKS = 18,
  IPSTATS_MIB_REASMFAILS = 19,
  IPSTATS_MIB_FRAGOKS = 20,
  IPSTATS_MIB_FRAGFAILS = 21,
  IPSTATS_MIB_FRAGCREATES = 22,
  IPSTATS_MIB_INMCASTPKTS = 23,
  IPSTATS_MIB_OUTMCASTPKTS = 24,
  IPSTATS_MIB_INBCASTPKTS = 25,
  IPSTATS_MIB_OUTBCASTPKTS = 26,
  IPSTATS_MIB_INMCASTOCTETS = 27,
  IPSTATS_MIB_OUTMCASTOCTETS = 28,
  IPSTATS_MIB_INBCASTOCTETS = 29,
  IPSTATS_MIB_OUTBCASTOCTETS = 30,
  IPSTATS_MIB_CSUMERRORS = 31,
  IPSTATS_MIB_NOECTPKTS = 32,
  IPSTATS_MIB_ECT1PKTS = 33,
  IPSTATS_MIB_ECT0PKTS = 34,
  IPSTATS_MIB_CEPKTS = 35,
  IPSTATS_MIB_REASM_OVERLAPS = 36,
  __IPSTATS_MIB_MAX = 37,
};

enum {
  ICMP_MIB_NUM = 0,
  ICMP_MIB_INMSGS = 1,
  ICMP_MIB_INERRORS = 2,
  ICMP_MIB_INDESTUNREACHS = 3,
  ICMP_MIB_INTIMEEXCDS = 4,
  ICMP_MIB_INPARMPROBS = 5,
  ICMP_MIB_INSRCQUENCHS = 6,
  ICMP_MIB_INREDIRECTS = 7,
  ICMP_MIB_INECHOS = 8,
  ICMP_MIB_INECHOREPS = 9,
  ICMP_MIB_INTIMESTAMPS = 10,
  ICMP_MIB_INTIMESTAMPREPS = 11,
  ICMP_MIB_INADDRMASKS = 12,
  ICMP_MIB_INADDRMASKREPS = 13,
  ICMP_MIB_OUTMSGS = 14,
  ICMP_MIB_OUTERRORS = 15,
  ICMP_MIB_OUTDESTUNREACHS = 16,
  ICMP_MIB_OUTTIMEEXCDS = 17,
  ICMP_MIB_OUTPARMPROBS = 18,
  ICMP_MIB_OUTSRCQUENCHS = 19,
  ICMP_MIB_OUTREDIRECTS = 20,
  ICMP_MIB_OUTECHOS = 21,
  ICMP_MIB_OUTECHOREPS = 22,
  ICMP_MIB_OUTTIMESTAMPS = 23,
  ICMP_MIB_OUTTIMESTAMPREPS = 24,
  ICMP_MIB_OUTADDRMASKS = 25,
  ICMP_MIB_OUTADDRMASKREPS = 26,
  ICMP_MIB_CSUMERRORS = 27,
  __ICMP_MIB_MAX = 28,
};

enum {
  ICMP6_MIB_NUM = 0,
  ICMP6_MIB_INMSGS = 1,
  ICMP6_MIB_INERRORS = 2,
  ICMP6_MIB_OUTMSGS = 3,
  ICMP6_MIB_OUTERRORS = 4,
  ICMP6_MIB_CSUMERRORS = 5,
  __ICMP6_MIB_MAX = 6,
};

enum {
  TCP_MIB_NUM = 0,
  TCP_MIB_RTOALGORITHM = 1,
  TCP_MIB_RTOMIN = 2,
  TCP_MIB_RTOMAX = 3,
  TCP_MIB_MAXCONN = 4,
  TCP_MIB_ACTIVEOPENS = 5,
  TCP_MIB_PASSIVEOPENS = 6,
  TCP_MIB_ATTEMPTFAILS = 7,
  TCP_MIB_ESTABRESETS = 8,
  TCP_MIB_CURRESTAB = 9,
  TCP_MIB_INSEGS = 10,
  TCP_MIB_OUTSEGS = 11,
  TCP_MIB_RETRANSSEGS = 12,
  TCP_MIB_INERRS = 13,
  TCP_MIB_OUTRSTS = 14,
  TCP_MIB_CSUMERRORS = 15,
  __TCP_MIB_MAX = 16,
};

enum {
  UDP_MIB_NUM = 0,
  UDP_MIB_INDATAGRAMS = 1,
  UDP_MIB_NOPORTS = 2,
  UDP_MIB_INERRORS = 3,
  UDP_MIB_OUTDATAGRAMS = 4,
  UDP_MIB_RCVBUFERRORS = 5,
  UDP_MIB_SNDBUFERRORS = 6,
  UDP_MIB_CSUMERRORS = 7,
  UDP_MIB_IGNOREDMULTI = 8,
  UDP_MIB_MEMERRORS = 9,
  __UDP_MIB_MAX = 10,
};

enum {
  LINUX_MIB_NUM = 0,
  LINUX_MIB_SYNCOOKIESSENT = 1,
  LINUX_MIB_SYNCOOKIESRECV = 2,
  LINUX_MIB_SYNCOOKIESFAILED = 3,
  LINUX_MIB_EMBRYONICRSTS = 4,
  LINUX_MIB_PRUNECALLED = 5,
  LINUX_MIB_RCVPRUNED = 6,
  LINUX_MIB_OFOPRUNED = 7,
  LINUX_MIB_OUTOFWINDOWICMPS = 8,
  LINUX_MIB_LOCKDROPPEDICMPS = 9,
  LINUX_MIB_ARPFILTER = 10,
  LINUX_MIB_TIMEWAITED = 11,
  LINUX_MIB_TIMEWAITRECYCLED = 12,
  LINUX_MIB_TIMEWAITKILLED = 13,
  LINUX_MIB_PAWSACTIVEREJECTED = 14,
  LINUX_MIB_PAWSESTABREJECTED = 15,
  LINUX_MIB_DELAYEDACKS = 16,
  LINUX_MIB_DELAYEDACKLOCKED = 17,
  LINUX_MIB_DELAYEDACKLOST = 18,
  LINUX_MIB_LISTENOVERFLOWS = 19,
  LINUX_MIB_LISTENDROPS = 20,
  LINUX_MIB_TCPHPHITS = 21,
  LINUX_MIB_TCPPUREACKS = 22,
  LINUX_MIB_TCPHPACKS = 23,
  LINUX_MIB_TCPRENORECOVERY = 24,
  LINUX_MIB_TCPSACKRECOVERY = 25,
  LINUX_MIB_TCPSACKRENEGING = 26,
  LINUX_MIB_TCPSACKREORDER = 27,
  LINUX_MIB_TCPRENOREORDER = 28,
  LINUX_MIB_TCPTSREORDER = 29,
  LINUX_MIB_TCPFULLUNDO = 30,
  LINUX_MIB_TCPPARTIALUNDO = 31,
  LINUX_MIB_TCPDSACKUNDO = 32,
  LINUX_MIB_TCPLOSSUNDO = 33,
  LINUX_MIB_TCPLOSTRETRANSMIT = 34,
  LINUX_MIB_TCPRENOFAILURES = 35,
  LINUX_MIB_TCPSACKFAILURES = 36,
  LINUX_MIB_TCPLOSSFAILURES = 37,
  LINUX_MIB_TCPFASTRETRANS = 38,
  LINUX_MIB_TCPSLOWSTARTRETRANS = 39,
  LINUX_MIB_TCPTIMEOUTS = 40,
  LINUX_MIB_TCPLOSSPROBES = 41,
  LINUX_MIB_TCPLOSSPROBERECOVERY = 42,
  LINUX_MIB_TCPRENORECOVERYFAIL = 43,
  LINUX_MIB_TCPSACKRECOVERYFAIL = 44,
  LINUX_MIB_TCPRCVCOLLAPSED = 45,
  LINUX_MIB_TCPDSACKOLDSENT = 46,
  LINUX_MIB_TCPDSACKOFOSENT = 47,
  LINUX_MIB_TCPDSACKRECV = 48,
  LINUX_MIB_TCPDSACKOFORECV = 49,
  LINUX_MIB_TCPABORTONDATA = 50,
  LINUX_MIB_TCPABORTONCLOSE = 51,
  LINUX_MIB_TCPABORTONMEMORY = 52,
  LINUX_MIB_TCPABORTONTIMEOUT = 53,
  LINUX_MIB_TCPABORTONLINGER = 54,
  LINUX_MIB_TCPABORTFAILED = 55,
  LINUX_MIB_TCPMEMORYPRESSURES = 56,
  LINUX_MIB_TCPMEMORYPRESSURESCHRONO = 57,
  LINUX_MIB_TCPSACKDISCARD = 58,
  LINUX_MIB_TCPDSACKIGNOREDOLD = 59,
  LINUX_MIB_TCPDSACKIGNOREDNOUNDO = 60,
  LINUX_MIB_TCPSPURIOUSRTOS = 61,
  LINUX_MIB_TCPMD5NOTFOUND = 62,
  LINUX_MIB_TCPMD5UNEXPECTED = 63,
  LINUX_MIB_TCPMD5FAILURE = 64,
  LINUX_MIB_SACKSHIFTED = 65,
  LINUX_MIB_SACKMERGED = 66,
  LINUX_MIB_SACKSHIFTFALLBACK = 67,
  LINUX_MIB_TCPBACKLOGDROP = 68,
  LINUX_MIB_PFMEMALLOCDROP = 69,
  LINUX_MIB_TCPMINTTLDROP = 70,
  LINUX_MIB_TCPDEFERACCEPTDROP = 71,
  LINUX_MIB_IPRPFILTER = 72,
  LINUX_MIB_TCPTIMEWAITOVERFLOW = 73,
  LINUX_MIB_TCPREQQFULLDOCOOKIES = 74,
  LINUX_MIB_TCPREQQFULLDROP = 75,
  LINUX_MIB_TCPRETRANSFAIL = 76,
  LINUX_MIB_TCPRCVCOALESCE = 77,
  LINUX_MIB_TCPBACKLOGCOALESCE = 78,
  LINUX_MIB_TCPOFOQUEUE = 79,
  LINUX_MIB_TCPOFODROP = 80,
  LINUX_MIB_TCPOFOMERGE = 81,
  LINUX_MIB_TCPCHALLENGEACK = 82,
  LINUX_MIB_TCPSYNCHALLENGE = 83,
  LINUX_MIB_TCPFASTOPENACTIVE = 84,
  LINUX_MIB_TCPFASTOPENACTIVEFAIL = 85,
  LINUX_MIB_TCPFASTOPENPASSIVE = 86,
  LINUX_MIB_TCPFASTOPENPASSIVEFAIL = 87,
  LINUX_MIB_TCPFASTOPENLISTENOVERFLOW = 88,
  LINUX_MIB_TCPFASTOPENCOOKIEREQD = 89,
  LINUX_MIB_TCPFASTOPENBLACKHOLE = 90,
  LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES = 91,
  LINUX_MIB_BUSYPOLLRXPACKETS = 92,
  LINUX_MIB_TCPAUTOCORKING = 93,
  LINUX_MIB_TCPFROMZEROWINDOWADV = 94,
  LINUX_MIB_TCPTOZEROWINDOWADV = 95,
  LINUX_MIB_TCPWANTZEROWINDOWADV = 96,
  LINUX_MIB_TCPSYNRETRANS = 97,
  LINUX_MIB_TCPORIGDATASENT = 98,
  LINUX_MIB_TCPHYSTARTTRAINDETECT = 99,
  LINUX_MIB_TCPHYSTARTTRAINCWND = 100,
  LINUX_MIB_TCPHYSTARTDELAYDETECT = 101,
  LINUX_MIB_TCPHYSTARTDELAYCWND = 102,
  LINUX_MIB_TCPACKSKIPPEDSYNRECV = 103,
  LINUX_MIB_TCPACKSKIPPEDPAWS = 104,
  LINUX_MIB_TCPACKSKIPPEDSEQ = 105,
  LINUX_MIB_TCPACKSKIPPEDFINWAIT2 = 106,
  LINUX_MIB_TCPACKSKIPPEDTIMEWAIT = 107,
  LINUX_MIB_TCPACKSKIPPEDCHALLENGE = 108,
  LINUX_MIB_TCPWINPROBE = 109,
  LINUX_MIB_TCPKEEPALIVE = 110,
  LINUX_MIB_TCPMTUPFAIL = 111,
  LINUX_MIB_TCPMTUPSUCCESS = 112,
  LINUX_MIB_TCPDELIVERED = 113,
  LINUX_MIB_TCPDELIVEREDCE = 114,
  LINUX_MIB_TCPACKCOMPRESSED = 115,
  LINUX_MIB_TCPZEROWINDOWDROP = 116,
  LINUX_MIB_TCPRCVQDROP = 117,
  LINUX_MIB_TCPWQUEUETOOBIG = 118,
  LINUX_MIB_TCPFASTOPENPASSIVEALTKEY = 119,
  LINUX_MIB_TCPTIMEOUTREHASH = 120,
  LINUX_MIB_TCPDUPLICATEDATAREHASH = 121,
  LINUX_MIB_TCPDSACKRECVSEGS = 122,
  LINUX_MIB_TCPDSACKIGNOREDDUBIOUS = 123,
  __LINUX_MIB_MAX = 124,
};

enum {
  LINUX_MIB_XFRMNUM = 0,
  LINUX_MIB_XFRMINERROR = 1,
  LINUX_MIB_XFRMINBUFFERERROR = 2,
  LINUX_MIB_XFRMINHDRERROR = 3,
  LINUX_MIB_XFRMINNOSTATES = 4,
  LINUX_MIB_XFRMINSTATEPROTOERROR = 5,
  LINUX_MIB_XFRMINSTATEMODEERROR = 6,
  LINUX_MIB_XFRMINSTATESEQERROR = 7,
  LINUX_MIB_XFRMINSTATEEXPIRED = 8,
  LINUX_MIB_XFRMINSTATEMISMATCH = 9,
  LINUX_MIB_XFRMINSTATEINVALID = 10,
  LINUX_MIB_XFRMINTMPLMISMATCH = 11,
  LINUX_MIB_XFRMINNOPOLS = 12,
  LINUX_MIB_XFRMINPOLBLOCK = 13,
  LINUX_MIB_XFRMINPOLERROR = 14,
  LINUX_MIB_XFRMOUTERROR = 15,
  LINUX_MIB_XFRMOUTBUNDLEGENERROR = 16,
  LINUX_MIB_XFRMOUTBUNDLECHECKERROR = 17,
  LINUX_MIB_XFRMOUTNOSTATES = 18,
  LINUX_MIB_XFRMOUTSTATEPROTOERROR = 19,
  LINUX_MIB_XFRMOUTSTATEMODEERROR = 20,
  LINUX_MIB_XFRMOUTSTATESEQERROR = 21,
  LINUX_MIB_XFRMOUTSTATEEXPIRED = 22,
  LINUX_MIB_XFRMOUTPOLBLOCK = 23,
  LINUX_MIB_XFRMOUTPOLDEAD = 24,
  LINUX_MIB_XFRMOUTPOLERROR = 25,
  LINUX_MIB_XFRMFWDHDRERROR = 26,
  LINUX_MIB_XFRMOUTSTATEINVALID = 27,
  LINUX_MIB_XFRMACQUIREERROR = 28,
  __LINUX_MIB_XFRMMAX = 29,
};

enum {
  LINUX_MIB_TLSNUM = 0,
  LINUX_MIB_TLSCURRTXSW = 1,
  LINUX_MIB_TLSCURRRXSW = 2,
  LINUX_MIB_TLSCURRTXDEVICE = 3,
  LINUX_MIB_TLSCURRRXDEVICE = 4,
  LINUX_MIB_TLSTXSW = 5,
  LINUX_MIB_TLSRXSW = 6,
  LINUX_MIB_TLSTXDEVICE = 7,
  LINUX_MIB_TLSRXDEVICE = 8,
  LINUX_MIB_TLSDECRYPTERROR = 9,
  LINUX_MIB_TLSRXDEVICERESYNC = 10,
  __LINUX_MIB_TLSMAX = 11,
};

enum nf_inet_hooks {
  NF_INET_PRE_ROUTING = 0,
  NF_INET_LOCAL_IN = 1,
  NF_INET_FORWARD = 2,
  NF_INET_LOCAL_OUT = 3,
  NF_INET_POST_ROUTING = 4,
  NF_INET_NUMHOOKS = 5,
  NF_INET_INGRESS = 5,
};

enum {
  NFPROTO_UNSPEC = 0,
  NFPROTO_INET = 1,
  NFPROTO_IPV4 = 2,
  NFPROTO_ARP = 3,
  NFPROTO_NETDEV = 5,
  NFPROTO_BRIDGE = 7,
  NFPROTO_IPV6 = 10,
  NFPROTO_DECNET = 12,
  NFPROTO_NUMPROTO = 13,
};

enum tcp_conntrack {
  TCP_CONNTRACK_NONE = 0,
  TCP_CONNTRACK_SYN_SENT = 1,
  TCP_CONNTRACK_SYN_RECV = 2,
  TCP_CONNTRACK_ESTABLISHED = 3,
  TCP_CONNTRACK_FIN_WAIT = 4,
  TCP_CONNTRACK_CLOSE_WAIT = 5,
  TCP_CONNTRACK_LAST_ACK = 6,
  TCP_CONNTRACK_TIME_WAIT = 7,
  TCP_CONNTRACK_CLOSE = 8,
  TCP_CONNTRACK_LISTEN = 9,
  TCP_CONNTRACK_MAX = 10,
  TCP_CONNTRACK_IGNORE = 11,
  TCP_CONNTRACK_RETRANS = 12,
  TCP_CONNTRACK_UNACK = 13,
  TCP_CONNTRACK_TIMEOUT_MAX = 14,
};

enum udp_conntrack {
  UDP_CT_UNREPLIED = 0,
  UDP_CT_REPLIED = 1,
  UDP_CT_MAX = 2,
};

enum {
  XFRM_POLICY_IN = 0,
  XFRM_POLICY_OUT = 1,
  XFRM_POLICY_FWD = 2,
  XFRM_POLICY_MASK = 3,
  XFRM_POLICY_MAX = 3,
};

enum netns_bpf_attach_type {
  NETNS_BPF_INVALID = 4294967295,
  NETNS_BPF_FLOW_DISSECTOR = 0,
  NETNS_BPF_SK_LOOKUP = 1,
  MAX_NETNS_BPF_ATTACH_TYPE = 2,
};

enum skb_ext_id {
  SKB_EXT_BRIDGE_NF = 0,
  SKB_EXT_SEC_PATH = 1,
  SKB_EXT_NUM = 2,
};

enum sched_tunable_scaling {
  SCHED_TUNABLESCALING_NONE = 0,
  SCHED_TUNABLESCALING_LOG = 1,
  SCHED_TUNABLESCALING_LINEAR = 2,
  SCHED_TUNABLESCALING_END = 3,
};

enum audit_ntp_type {
  AUDIT_NTP_OFFSET = 0,
  AUDIT_NTP_FREQ = 1,
  AUDIT_NTP_STATUS = 2,
  AUDIT_NTP_TAI = 3,
  AUDIT_NTP_TICK = 4,
  AUDIT_NTP_ADJUST = 5,
  AUDIT_NTP_NVALS = 6,
};

typedef long int (*sys_call_ptr_t)(const struct pt_regs*);

struct io_bitmap {
  u64 sequence;
  refcount_t refcnt;
  unsigned int max;
  long unsigned int bitmap[1024];
};

enum {
  EI_ETYPE_NONE = 0,
  EI_ETYPE_NULL = 1,
  EI_ETYPE_ERRNO = 2,
  EI_ETYPE_ERRNO_NULL = 3,
  EI_ETYPE_TRUE = 4,
};

struct syscall_metadata {
  const char* name;
  int syscall_nr;
  int nb_args;
  const char** types;
  const char** args;
  struct list_head enter_fields;
  struct trace_event_call* enter_event;
  struct trace_event_call* exit_event;
};

struct alt_instr {
  s32 instr_offset;
  s32 repl_offset;
  u16 cpuid;
  u8 instrlen;
  u8 replacementlen;
  u8 padlen;
} __attribute__((packed));

struct mmu_gather_batch {
  struct mmu_gather_batch* next;
  unsigned int nr;
  unsigned int max;
  struct page* pages[0];
};

struct mmu_table_batch;

struct mmu_gather {
  struct mm_struct* mm;
  struct mmu_table_batch* batch;
  long unsigned int start;
  long unsigned int end;
  unsigned int fullmm : 1;
  unsigned int need_flush_all : 1;
  unsigned int freed_tables : 1;
  unsigned int cleared_ptes : 1;
  unsigned int cleared_pmds : 1;
  unsigned int cleared_puds : 1;
  unsigned int cleared_p4ds : 1;
  unsigned int vma_exec : 1;
  unsigned int vma_huge : 1;
  unsigned int batch_count;
  struct mmu_gather_batch* active;
  struct mmu_gather_batch local;
  struct page* __pages[8];
};

struct timens_offset {
  s64 sec;
  u64 nsec;
};

enum vm_fault_reason {
  VM_FAULT_OOM = 1,
  VM_FAULT_SIGBUS = 2,
  VM_FAULT_MAJOR = 4,
  VM_FAULT_WRITE = 8,
  VM_FAULT_HWPOISON = 16,
  VM_FAULT_HWPOISON_LARGE = 32,
  VM_FAULT_SIGSEGV = 64,
  VM_FAULT_NOPAGE = 256,
  VM_FAULT_LOCKED = 512,
  VM_FAULT_RETRY = 1024,
  VM_FAULT_FALLBACK = 2048,
  VM_FAULT_DONE_COW = 4096,
  VM_FAULT_NEEDDSYNC = 8192,
  VM_FAULT_HINDEX_MASK = 983040,
};

struct vm_special_mapping {
  const char* name;
  struct page** pages;
  vm_fault_t (*fault)(
      const struct vm_special_mapping*,
      struct vm_area_struct*,
      struct vm_fault*);
  int (*mremap)(const struct vm_special_mapping*, struct vm_area_struct*);
};

struct timens_offsets {
  struct timespec64 monotonic;
  struct timespec64 boottime;
};

struct time_namespace {
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  struct ns_common ns;
  struct timens_offsets offsets;
  struct page* vvar_page;
  bool frozen_offsets;
};

struct pvclock_vcpu_time_info {
  u32 version;
  u32 pad0;
  u64 tsc_timestamp;
  u64 system_time;
  u32 tsc_to_system_mul;
  s8 tsc_shift;
  u8 flags;
  u8 pad[2];
};

struct pvclock_vsyscall_time_info {
  struct pvclock_vcpu_time_info pvti;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum vdso_clock_mode {
  VDSO_CLOCKMODE_NONE = 0,
  VDSO_CLOCKMODE_TSC = 1,
  VDSO_CLOCKMODE_PVCLOCK = 2,
  VDSO_CLOCKMODE_HVCLOCK = 3,
  VDSO_CLOCKMODE_MAX = 4,
  VDSO_CLOCKMODE_TIMENS = 2147483647,
};

struct arch_vdso_data {};

struct vdso_timestamp {
  u64 sec;
  u64 nsec;
};

struct vdso_data {
  u32 seq;
  s32 clock_mode;
  u64 cycle_last;
  u64 mask;
  u32 mult;
  u32 shift;
  union {
    struct vdso_timestamp basetime[12];
    struct timens_offset offset[12];
  };
  s32 tz_minuteswest;
  s32 tz_dsttime;
  u32 hrtimer_res;
  u32 __unused;
  struct arch_vdso_data arch_data;
};

struct irq_desc;

typedef struct irq_desc* vector_irq_t[256];

struct ms_hyperv_tsc_page {
  volatile u32 tsc_sequence;
  u32 reserved1;
  volatile u64 tsc_scale;
  volatile s64 tsc_offset;
};

struct ms_hyperv_info {
  u32 features;
  u32 features_b;
  u32 misc_features;
  u32 hints;
  u32 nested_features;
  u32 max_vp_index;
  u32 max_lp_index;
  u32 isolation_config_a;
  u32 isolation_config_b;
};

enum {
  TASKSTATS_CMD_UNSPEC = 0,
  TASKSTATS_CMD_GET = 1,
  TASKSTATS_CMD_NEW = 2,
  __TASKSTATS_CMD_MAX = 3,
};

enum cpu_usage_stat {
  CPUTIME_USER = 0,
  CPUTIME_NICE = 1,
  CPUTIME_SYSTEM = 2,
  CPUTIME_SOFTIRQ = 3,
  CPUTIME_IRQ = 4,
  CPUTIME_IDLE = 5,
  CPUTIME_IOWAIT = 6,
  CPUTIME_STEAL = 7,
  CPUTIME_GUEST = 8,
  CPUTIME_GUEST_NICE = 9,
  NR_STATS = 10,
};

enum bpf_cgroup_storage_type {
  BPF_CGROUP_STORAGE_SHARED = 0,
  BPF_CGROUP_STORAGE_PERCPU = 1,
  __BPF_CGROUP_STORAGE_MAX = 2,
};

enum bpf_tramp_prog_type {
  BPF_TRAMP_FENTRY = 0,
  BPF_TRAMP_FEXIT = 1,
  BPF_TRAMP_MODIFY_RETURN = 2,
  BPF_TRAMP_MAX = 3,
  BPF_TRAMP_REPLACE = 4,
};

enum cgroup_bpf_attach_type {
  CGROUP_BPF_ATTACH_TYPE_INVALID = 4294967295,
  CGROUP_INET_INGRESS = 0,
  CGROUP_INET_EGRESS = 1,
  CGROUP_INET_SOCK_CREATE = 2,
  CGROUP_SOCK_OPS = 3,
  CGROUP_DEVICE = 4,
  CGROUP_INET4_BIND = 5,
  CGROUP_INET6_BIND = 6,
  CGROUP_INET4_CONNECT = 7,
  CGROUP_INET6_CONNECT = 8,
  CGROUP_INET4_POST_BIND = 9,
  CGROUP_INET6_POST_BIND = 10,
  CGROUP_UDP4_SENDMSG = 11,
  CGROUP_UDP6_SENDMSG = 12,
  CGROUP_SYSCTL = 13,
  CGROUP_UDP4_RECVMSG = 14,
  CGROUP_UDP6_RECVMSG = 15,
  CGROUP_GETSOCKOPT = 16,
  CGROUP_SETSOCKOPT = 17,
  CGROUP_INET4_GETPEERNAME = 18,
  CGROUP_INET6_GETPEERNAME = 19,
  CGROUP_INET4_GETSOCKNAME = 20,
  CGROUP_INET6_GETSOCKNAME = 21,
  CGROUP_INET_SOCK_RELEASE = 22,
  MAX_CGROUP_BPF_ATTACH_TYPE = 23,
};

enum psi_task_count {
  NR_IOWAIT = 0,
  NR_MEMSTALL = 1,
  NR_RUNNING = 2,
  NR_ONCPU = 3,
  NR_PSI_TASK_COUNTS = 4,
};

enum psi_states {
  PSI_IO_SOME = 0,
  PSI_IO_FULL = 1,
  PSI_MEM_SOME = 2,
  PSI_MEM_FULL = 3,
  PSI_CPU_SOME = 4,
  PSI_CPU_FULL = 5,
  PSI_NONIDLE = 6,
  NR_PSI_STATES = 7,
};

enum psi_aggregators {
  PSI_AVGS = 0,
  PSI_POLL = 1,
  NR_PSI_AGGREGATORS = 2,
};

enum cgroup_subsys_id {
  cpuset_cgrp_id = 0,
  cpu_cgrp_id = 1,
  cpuacct_cgrp_id = 2,
  io_cgrp_id = 3,
  memory_cgrp_id = 4,
  devices_cgrp_id = 5,
  freezer_cgrp_id = 6,
  net_cls_cgrp_id = 7,
  perf_event_cgrp_id = 8,
  net_prio_cgrp_id = 9,
  hugetlb_cgrp_id = 10,
  pids_cgrp_id = 11,
  CGROUP_SUBSYS_COUNT = 12,
};

struct mmu_table_batch {
  struct callback_head rcu;
  unsigned int nr;
  void* tables[0];
};

struct vdso_exception_table_entry {
  int insn;
  int fixup;
};

enum syscall_work_bit {
  SYSCALL_WORK_BIT_SECCOMP = 0,
  SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT = 1,
  SYSCALL_WORK_BIT_SYSCALL_TRACE = 2,
  SYSCALL_WORK_BIT_SYSCALL_EMU = 3,
  SYSCALL_WORK_BIT_SYSCALL_AUDIT = 4,
  SYSCALL_WORK_BIT_SYSCALL_USER_DISPATCH = 5,
  SYSCALL_WORK_BIT_SYSCALL_EXIT_TRAP = 6,
};

enum x86_pf_error_code {
  X86_PF_PROT = 1,
  X86_PF_WRITE = 2,
  X86_PF_USER = 4,
  X86_PF_RSVD = 8,
  X86_PF_INSTR = 16,
  X86_PF_PK = 32,
  X86_PF_SGX = 32768,
};

struct trace_event_raw_emulate_vsyscall {
  struct trace_entry ent;
  int nr;
  char __data[0];
};

struct trace_event_data_offsets_emulate_vsyscall {};

typedef void (*btf_trace_emulate_vsyscall)(void*, int);

enum {
  EMULATE = 0,
  XONLY = 1,
  NONE = 2,
};

enum perf_type_id {
  PERF_TYPE_HARDWARE = 0,
  PERF_TYPE_SOFTWARE = 1,
  PERF_TYPE_TRACEPOINT = 2,
  PERF_TYPE_HW_CACHE = 3,
  PERF_TYPE_RAW = 4,
  PERF_TYPE_BREAKPOINT = 5,
  PERF_TYPE_MAX = 6,
};

enum perf_hw_id {
  PERF_COUNT_HW_CPU_CYCLES = 0,
  PERF_COUNT_HW_INSTRUCTIONS = 1,
  PERF_COUNT_HW_CACHE_REFERENCES = 2,
  PERF_COUNT_HW_CACHE_MISSES = 3,
  PERF_COUNT_HW_BRANCH_INSTRUCTIONS = 4,
  PERF_COUNT_HW_BRANCH_MISSES = 5,
  PERF_COUNT_HW_BUS_CYCLES = 6,
  PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 7,
  PERF_COUNT_HW_STALLED_CYCLES_BACKEND = 8,
  PERF_COUNT_HW_REF_CPU_CYCLES = 9,
  PERF_COUNT_HW_MAX = 10,
};

enum perf_hw_cache_id {
  PERF_COUNT_HW_CACHE_L1D = 0,
  PERF_COUNT_HW_CACHE_L1I = 1,
  PERF_COUNT_HW_CACHE_LL = 2,
  PERF_COUNT_HW_CACHE_DTLB = 3,
  PERF_COUNT_HW_CACHE_ITLB = 4,
  PERF_COUNT_HW_CACHE_BPU = 5,
  PERF_COUNT_HW_CACHE_NODE = 6,
  PERF_COUNT_HW_CACHE_MAX = 7,
};

enum perf_hw_cache_op_id {
  PERF_COUNT_HW_CACHE_OP_READ = 0,
  PERF_COUNT_HW_CACHE_OP_WRITE = 1,
  PERF_COUNT_HW_CACHE_OP_PREFETCH = 2,
  PERF_COUNT_HW_CACHE_OP_MAX = 3,
};

enum perf_hw_cache_op_result_id {
  PERF_COUNT_HW_CACHE_RESULT_ACCESS = 0,
  PERF_COUNT_HW_CACHE_RESULT_MISS = 1,
  PERF_COUNT_HW_CACHE_RESULT_MAX = 2,
};

enum perf_event_sample_format {
  PERF_SAMPLE_IP = 1,
  PERF_SAMPLE_TID = 2,
  PERF_SAMPLE_TIME = 4,
  PERF_SAMPLE_ADDR = 8,
  PERF_SAMPLE_READ = 16,
  PERF_SAMPLE_CALLCHAIN = 32,
  PERF_SAMPLE_ID = 64,
  PERF_SAMPLE_CPU = 128,
  PERF_SAMPLE_PERIOD = 256,
  PERF_SAMPLE_STREAM_ID = 512,
  PERF_SAMPLE_RAW = 1024,
  PERF_SAMPLE_BRANCH_STACK = 2048,
  PERF_SAMPLE_REGS_USER = 4096,
  PERF_SAMPLE_STACK_USER = 8192,
  PERF_SAMPLE_WEIGHT = 16384,
  PERF_SAMPLE_DATA_SRC = 32768,
  PERF_SAMPLE_IDENTIFIER = 65536,
  PERF_SAMPLE_TRANSACTION = 131072,
  PERF_SAMPLE_REGS_INTR = 262144,
  PERF_SAMPLE_PHYS_ADDR = 524288,
  PERF_SAMPLE_AUX = 1048576,
  PERF_SAMPLE_CGROUP = 2097152,
  PERF_SAMPLE_DATA_PAGE_SIZE = 4194304,
  PERF_SAMPLE_CODE_PAGE_SIZE = 8388608,
  PERF_SAMPLE_WEIGHT_STRUCT = 16777216,
  PERF_SAMPLE_MAX = 33554432,
  __PERF_SAMPLE_CALLCHAIN_EARLY = 0,
};

enum perf_branch_sample_type {
  PERF_SAMPLE_BRANCH_USER = 1,
  PERF_SAMPLE_BRANCH_KERNEL = 2,
  PERF_SAMPLE_BRANCH_HV = 4,
  PERF_SAMPLE_BRANCH_ANY = 8,
  PERF_SAMPLE_BRANCH_ANY_CALL = 16,
  PERF_SAMPLE_BRANCH_ANY_RETURN = 32,
  PERF_SAMPLE_BRANCH_IND_CALL = 64,
  PERF_SAMPLE_BRANCH_ABORT_TX = 128,
  PERF_SAMPLE_BRANCH_IN_TX = 256,
  PERF_SAMPLE_BRANCH_NO_TX = 512,
  PERF_SAMPLE_BRANCH_COND = 1024,
  PERF_SAMPLE_BRANCH_CALL_STACK = 2048,
  PERF_SAMPLE_BRANCH_IND_JUMP = 4096,
  PERF_SAMPLE_BRANCH_CALL = 8192,
  PERF_SAMPLE_BRANCH_NO_FLAGS = 16384,
  PERF_SAMPLE_BRANCH_NO_CYCLES = 32768,
  PERF_SAMPLE_BRANCH_TYPE_SAVE = 65536,
  PERF_SAMPLE_BRANCH_HW_INDEX = 131072,
  PERF_SAMPLE_BRANCH_MAX = 262144,
};

struct perf_event_mmap_page {
  __u32 version;
  __u32 compat_version;
  __u32 lock;
  __u32 index;
  __s64 offset;
  __u64 time_enabled;
  __u64 time_running;
  union {
    __u64 capabilities;
    struct {
      __u64 cap_bit0 : 1;
      __u64 cap_bit0_is_deprecated : 1;
      __u64 cap_user_rdpmc : 1;
      __u64 cap_user_time : 1;
      __u64 cap_user_time_zero : 1;
      __u64 cap_user_time_short : 1;
      __u64 cap_____res : 58;
    };
  };
  __u16 pmc_width;
  __u16 time_shift;
  __u32 time_mult;
  __u64 time_offset;
  __u64 time_zero;
  __u32 size;
  __u32 __reserved_1;
  __u64 time_cycles;
  __u64 time_mask;
  __u8 __reserved[928];
  __u64 data_head;
  __u64 data_tail;
  __u64 data_offset;
  __u64 data_size;
  __u64 aux_head;
  __u64 aux_tail;
  __u64 aux_offset;
  __u64 aux_size;
};

struct ldt_struct {
  struct desc_struct* entries;
  unsigned int nr_entries;
  int slot;
};

enum apic_delivery_modes {
  APIC_DELIVERY_MODE_FIXED = 0,
  APIC_DELIVERY_MODE_LOWESTPRIO = 1,
  APIC_DELIVERY_MODE_SMI = 2,
  APIC_DELIVERY_MODE_NMI = 4,
  APIC_DELIVERY_MODE_INIT = 5,
  APIC_DELIVERY_MODE_EXTINT = 7,
};

struct x86_pmu_capability {
  int version;
  int num_counters_gp;
  int num_counters_fixed;
  int bit_width_gp;
  int bit_width_fixed;
  unsigned int events_mask;
  int events_mask_len;
};

enum stack_type {
  STACK_TYPE_UNKNOWN = 0,
  STACK_TYPE_TASK = 1,
  STACK_TYPE_IRQ = 2,
  STACK_TYPE_SOFTIRQ = 3,
  STACK_TYPE_ENTRY = 4,
  STACK_TYPE_EXCEPTION = 5,
  STACK_TYPE_EXCEPTION_LAST = 10,
};

struct stack_info {
  enum stack_type type;
  long unsigned int* begin;
  long unsigned int* end;
  long unsigned int* next_sp;
};

struct stack_frame {
  struct stack_frame* next_frame;
  long unsigned int return_address;
};

struct stack_frame_ia32 {
  u32 next_frame;
  u32 return_address;
};

struct perf_guest_switch_msr {
  unsigned int msr;
  u64 host;
  u64 guest;
};

struct device_attribute {
  struct attribute attr;
  ssize_t (*show)(struct device*, struct device_attribute*, char*);
  ssize_t (
      *store)(struct device*, struct device_attribute*, const char*, size_t);
};

enum perf_event_x86_regs {
  PERF_REG_X86_AX = 0,
  PERF_REG_X86_BX = 1,
  PERF_REG_X86_CX = 2,
  PERF_REG_X86_DX = 3,
  PERF_REG_X86_SI = 4,
  PERF_REG_X86_DI = 5,
  PERF_REG_X86_BP = 6,
  PERF_REG_X86_SP = 7,
  PERF_REG_X86_IP = 8,
  PERF_REG_X86_FLAGS = 9,
  PERF_REG_X86_CS = 10,
  PERF_REG_X86_SS = 11,
  PERF_REG_X86_DS = 12,
  PERF_REG_X86_ES = 13,
  PERF_REG_X86_FS = 14,
  PERF_REG_X86_GS = 15,
  PERF_REG_X86_R8 = 16,
  PERF_REG_X86_R9 = 17,
  PERF_REG_X86_R10 = 18,
  PERF_REG_X86_R11 = 19,
  PERF_REG_X86_R12 = 20,
  PERF_REG_X86_R13 = 21,
  PERF_REG_X86_R14 = 22,
  PERF_REG_X86_R15 = 23,
  PERF_REG_X86_32_MAX = 16,
  PERF_REG_X86_64_MAX = 24,
  PERF_REG_X86_XMM0 = 32,
  PERF_REG_X86_XMM1 = 34,
  PERF_REG_X86_XMM2 = 36,
  PERF_REG_X86_XMM3 = 38,
  PERF_REG_X86_XMM4 = 40,
  PERF_REG_X86_XMM5 = 42,
  PERF_REG_X86_XMM6 = 44,
  PERF_REG_X86_XMM7 = 46,
  PERF_REG_X86_XMM8 = 48,
  PERF_REG_X86_XMM9 = 50,
  PERF_REG_X86_XMM10 = 52,
  PERF_REG_X86_XMM11 = 54,
  PERF_REG_X86_XMM12 = 56,
  PERF_REG_X86_XMM13 = 58,
  PERF_REG_X86_XMM14 = 60,
  PERF_REG_X86_XMM15 = 62,
  PERF_REG_X86_XMM_MAX = 64,
};

struct perf_callchain_entry_ctx {
  struct perf_callchain_entry* entry;
  u32 max_stack;
  u32 nr;
  short int contexts;
  bool contexts_maxed;
};

struct perf_pmu_events_attr {
  struct device_attribute attr;
  u64 id;
  const char* event_str;
};

struct perf_pmu_events_ht_attr {
  struct device_attribute attr;
  u64 id;
  const char* event_str_ht;
  const char* event_str_noht;
};

enum apic_intr_mode_id {
  APIC_PIC = 0,
  APIC_VIRTUAL_WIRE = 1,
  APIC_VIRTUAL_WIRE_NO_CONFIG = 2,
  APIC_SYMMETRIC_IO = 3,
  APIC_SYMMETRIC_IO_NO_ROUTING = 4,
};

struct apic {
  void (*eoi_write)(u32, u32);
  void (*native_eoi_write)(u32, u32);
  void (*write)(u32, u32);
  u32 (*read)(u32);
  void (*wait_icr_idle)();
  u32 (*safe_wait_icr_idle)();
  void (*send_IPI)(int, int);
  void (*send_IPI_mask)(const struct cpumask*, int);
  void (*send_IPI_mask_allbutself)(const struct cpumask*, int);
  void (*send_IPI_allbutself)(int);
  void (*send_IPI_all)(int);
  void (*send_IPI_self)(int);
  u32 disable_esr;
  enum apic_delivery_modes delivery_mode;
  bool dest_mode_logical;
  u32 (*calc_dest_apicid)(unsigned int);
  u64 (*icr_read)();
  void (*icr_write)(u32, u32);
  int (*probe)();
  int (*acpi_madt_oem_check)(char*, char*);
  int (*apic_id_valid)(u32);
  int (*apic_id_registered)();
  bool (*check_apicid_used)(physid_mask_t*, int);
  void (*init_apic_ldr)();
  void (*ioapic_phys_id_map)(physid_mask_t*, physid_mask_t*);
  void (*setup_apic_routing)();
  int (*cpu_present_to_apicid)(int);
  void (*apicid_to_cpu_present)(int, physid_mask_t*);
  int (*check_phys_apicid_present)(int);
  int (*phys_pkg_id)(int, int);
  u32 (*get_apic_id)(long unsigned int);
  u32 (*set_apic_id)(unsigned int);
  int (*wakeup_secondary_cpu)(int, long unsigned int);
  void (*inquire_remote_apic)(int);
  char* name;
};

enum {
  NMI_LOCAL = 0,
  NMI_UNKNOWN = 1,
  NMI_SERR = 2,
  NMI_IO_CHECK = 3,
  NMI_MAX = 4,
};

typedef int (*nmi_handler_t)(unsigned int, struct pt_regs*);

struct nmiaction {
  struct list_head list;
  nmi_handler_t handler;
  u64 max_duration;
  long unsigned int flags;
  const char* name;
};

struct cyc2ns_data {
  u32 cyc2ns_mul;
  u32 cyc2ns_shift;
  u64 cyc2ns_offset;
};

struct unwind_state {
  struct stack_info stack_info;
  long unsigned int stack_mask;
  struct task_struct* task;
  int graph_idx;
  struct llist_node* kr_cur;
  bool error;
  bool signal;
  bool full_regs;
  long unsigned int sp;
  long unsigned int bp;
  long unsigned int ip;
  struct pt_regs* regs;
  struct pt_regs* prev_regs;
};

enum extra_reg_type {
  EXTRA_REG_NONE = 4294967295,
  EXTRA_REG_RSP_0 = 0,
  EXTRA_REG_RSP_1 = 1,
  EXTRA_REG_LBR = 2,
  EXTRA_REG_LDLAT = 3,
  EXTRA_REG_FE = 4,
  EXTRA_REG_MAX = 5,
};

struct event_constraint {
  union {
    long unsigned int idxmsk[1];
    u64 idxmsk64;
  };
  u64 code;
  u64 cmask;
  int weight;
  int overlap;
  int flags;
  unsigned int size;
};

struct amd_nb {
  int nb_id;
  int refcnt;
  struct perf_event* owners[64];
  struct event_constraint event_constraints[64];
};

struct er_account {
  raw_spinlock_t lock;
  u64 config;
  u64 reg;
  atomic_t ref;
};

struct intel_shared_regs {
  struct er_account regs[5];
  int refcnt;
  unsigned int core_id;
};

enum intel_excl_state_type {
  INTEL_EXCL_UNUSED = 0,
  INTEL_EXCL_SHARED = 1,
  INTEL_EXCL_EXCLUSIVE = 2,
};

struct intel_excl_states {
  enum intel_excl_state_type state[64];
  bool sched_started;
};

struct intel_excl_cntrs {
  raw_spinlock_t lock;
  struct intel_excl_states states[2];
  union {
    u16 has_exclusive[2];
    u32 exclusive_present;
  };
  int refcnt;
  unsigned int core_id;
};

enum {
  X86_PERF_KFREE_SHARED = 0,
  X86_PERF_KFREE_EXCL = 1,
  X86_PERF_KFREE_MAX = 2,
};

struct cpu_hw_events {
  struct perf_event* events[64];
  long unsigned int active_mask[1];
  long unsigned int running[1];
  int enabled;
  int n_events;
  int n_added;
  int n_txn;
  int n_txn_pair;
  int n_txn_metric;
  int assign[64];
  u64 tags[64];
  struct perf_event* event_list[64];
  struct event_constraint* event_constraint[64];
  int n_excl;
  unsigned int txn_flags;
  int is_fake;
  struct debug_store* ds;
  void* ds_pebs_vaddr;
  void* ds_bts_vaddr;
  u64 pebs_enabled;
  int n_pebs;
  int n_large_pebs;
  int n_pebs_via_pt;
  int pebs_output;
  u64 pebs_data_cfg;
  u64 active_pebs_data_cfg;
  int pebs_record_size;
  int lbr_users;
  int lbr_pebs_users;
  struct perf_branch_stack lbr_stack;
  struct perf_branch_entry lbr_entries[32];
  union {
    struct er_account* lbr_sel;
    struct er_account* lbr_ctl;
  };
  u64 br_sel;
  void* last_task_ctx;
  int last_log_id;
  int lbr_select;
  void* lbr_xsave;
  u64 intel_ctrl_guest_mask;
  u64 intel_ctrl_host_mask;
  struct perf_guest_switch_msr guest_switch_msrs[64];
  u64 intel_cp_status;
  struct intel_shared_regs* shared_regs;
  struct event_constraint* constraint_list;
  struct intel_excl_cntrs* excl_cntrs;
  int excl_thread_id;
  u64 tfa_shadow;
  int n_metric;
  struct amd_nb* amd_nb;
  u64 perf_ctr_virt_mask;
  int n_pair;
  void* kfree_on_online[2];
  struct pmu* pmu;
};

struct extra_reg {
  unsigned int event;
  unsigned int msr;
  u64 config_mask;
  u64 valid_mask;
  int idx;
  bool extra_msr_access;
};

union perf_capabilities {
  struct {
    u64 lbr_format : 6;
    u64 pebs_trap : 1;
    u64 pebs_arch_reg : 1;
    u64 pebs_format : 4;
    u64 smm_freeze : 1;
    u64 full_width_write : 1;
    u64 pebs_baseline : 1;
    u64 perf_metrics : 1;
    u64 pebs_output_pt_available : 1;
    u64 anythread_deprecated : 1;
  };
  u64 capabilities;
};

struct x86_pmu_quirk {
  struct x86_pmu_quirk* next;
  void (*func)();
};

enum {
  x86_lbr_exclusive_lbr = 0,
  x86_lbr_exclusive_bts = 1,
  x86_lbr_exclusive_pt = 2,
  x86_lbr_exclusive_max = 3,
};

struct x86_pmu {
  const char* name;
  int version;
  int (*handle_irq)(struct pt_regs*);
  void (*disable_all)();
  void (*enable_all)(int);
  void (*enable)(struct perf_event*);
  void (*disable)(struct perf_event*);
  void (*add)(struct perf_event*);
  void (*del)(struct perf_event*);
  void (*read)(struct perf_event*);
  int (*hw_config)(struct perf_event*);
  int (*schedule_events)(struct cpu_hw_events*, int, int*);
  unsigned int eventsel;
  unsigned int perfctr;
  int (*addr_offset)(int, bool);
  int (*rdpmc_index)(int);
  u64 (*event_map)(int);
  int max_events;
  int num_counters;
  int num_counters_fixed;
  int cntval_bits;
  u64 cntval_mask;
  union {
    long unsigned int events_maskl;
    long unsigned int events_mask[1];
  };
  int events_mask_len;
  int apic;
  u64 max_period;
  struct event_constraint* (
      *get_event_constraints)(struct cpu_hw_events*, int, struct perf_event*);
  void (*put_event_constraints)(struct cpu_hw_events*, struct perf_event*);
  void (*start_scheduling)(struct cpu_hw_events*);
  void (*commit_scheduling)(struct cpu_hw_events*, int, int);
  void (*stop_scheduling)(struct cpu_hw_events*);
  struct event_constraint* event_constraints;
  struct x86_pmu_quirk* quirks;
  int perfctr_second_write;
  u64 (*limit_period)(struct perf_event*, u64);
  unsigned int late_ack : 1;
  unsigned int enabled_ack : 1;
  int attr_rdpmc_broken;
  int attr_rdpmc;
  struct attribute** format_attrs;
  ssize_t (*events_sysfs_show)(char*, u64);
  const struct attribute_group** attr_update;
  long unsigned int attr_freeze_on_smi;
  int (*cpu_prepare)(int);
  void (*cpu_starting)(int);
  void (*cpu_dying)(int);
  void (*cpu_dead)(int);
  void (*check_microcode)();
  void (*sched_task)(struct perf_event_context*, bool);
  u64 intel_ctrl;
  union perf_capabilities intel_cap;
  unsigned int bts : 1;
  unsigned int bts_active : 1;
  unsigned int pebs : 1;
  unsigned int pebs_active : 1;
  unsigned int pebs_broken : 1;
  unsigned int pebs_prec_dist : 1;
  unsigned int pebs_no_tlb : 1;
  unsigned int pebs_no_isolation : 1;
  unsigned int pebs_block : 1;
  int pebs_record_size;
  int pebs_buffer_size;
  int max_pebs_events;
  void (*drain_pebs)(struct pt_regs*, struct perf_sample_data*);
  struct event_constraint* pebs_constraints;
  void (*pebs_aliases)(struct perf_event*);
  long unsigned int large_pebs_flags;
  u64 rtm_abort_event;
  unsigned int lbr_tos;
  unsigned int lbr_from;
  unsigned int lbr_to;
  unsigned int lbr_info;
  unsigned int lbr_nr;
  union {
    u64 lbr_sel_mask;
    u64 lbr_ctl_mask;
  };
  union {
    const int* lbr_sel_map;
    int* lbr_ctl_map;
  };
  bool lbr_double_abort;
  bool lbr_pt_coexist;
  unsigned int lbr_depth_mask : 8;
  unsigned int lbr_deep_c_reset : 1;
  unsigned int lbr_lip : 1;
  unsigned int lbr_cpl : 1;
  unsigned int lbr_filter : 1;
  unsigned int lbr_call_stack : 1;
  unsigned int lbr_mispred : 1;
  unsigned int lbr_timed_lbr : 1;
  unsigned int lbr_br_type : 1;
  void (*lbr_reset)();
  void (*lbr_read)(struct cpu_hw_events*);
  void (*lbr_save)(void*);
  void (*lbr_restore)(void*);
  atomic_t lbr_exclusive[3];
  int num_topdown_events;
  u64 (*update_topdown_event)(struct perf_event*);
  int (*set_topdown_event_period)(struct perf_event*);
  void (*swap_task_ctx)(struct perf_event_context*, struct perf_event_context*);
  unsigned int amd_nb_constraints : 1;
  u64 perf_ctr_pair_en;
  struct extra_reg* extra_regs;
  unsigned int flags;
  struct perf_guest_switch_msr* (*guest_get_msrs)(int*);
  int (*check_period)(struct perf_event*, u64);
  int (*aux_output_match)(struct perf_event*);
};

struct sched_state {
  int weight;
  int event;
  int counter;
  int unassigned;
  int nr_gp;
  u64 used;
};

struct perf_sched {
  int max_weight;
  int max_events;
  int max_gp;
  int saved_states;
  struct event_constraint** constraints;
  struct sched_state state;
  struct sched_state saved[2];
};

struct perf_msr {
  u64 msr;
  struct attribute_group* grp;
  bool (*test)(int, void*);
  bool no_check;
  u64 mask;
};

typedef void (*exitcall_t)();

enum hrtimer_mode {
  HRTIMER_MODE_ABS = 0,
  HRTIMER_MODE_REL = 1,
  HRTIMER_MODE_PINNED = 2,
  HRTIMER_MODE_SOFT = 4,
  HRTIMER_MODE_HARD = 8,
  HRTIMER_MODE_ABS_PINNED = 2,
  HRTIMER_MODE_REL_PINNED = 3,
  HRTIMER_MODE_ABS_SOFT = 4,
  HRTIMER_MODE_REL_SOFT = 5,
  HRTIMER_MODE_ABS_PINNED_SOFT = 6,
  HRTIMER_MODE_REL_PINNED_SOFT = 7,
  HRTIMER_MODE_ABS_HARD = 8,
  HRTIMER_MODE_REL_HARD = 9,
  HRTIMER_MODE_ABS_PINNED_HARD = 10,
  HRTIMER_MODE_REL_PINNED_HARD = 11,
};

struct x86_cpu_id {
  __u16 vendor;
  __u16 family;
  __u16 model;
  __u16 steppings;
  __u16 feature;
  kernel_ulong_t driver_data;
};

enum perf_rapl_events {
  PERF_RAPL_PP0 = 0,
  PERF_RAPL_PKG = 1,
  PERF_RAPL_RAM = 2,
  PERF_RAPL_PP1 = 3,
  PERF_RAPL_PSYS = 4,
  PERF_RAPL_MAX = 5,
  NR_RAPL_DOMAINS = 5,
};

struct rapl_pmu {
  raw_spinlock_t lock;
  int n_active;
  int cpu;
  struct list_head active_list;
  struct pmu* pmu;
  ktime_t timer_interval;
  struct hrtimer hrtimer;
};

struct rapl_pmus {
  struct pmu pmu;
  unsigned int maxdie;
  struct rapl_pmu* pmus[0];
};

enum rapl_unit_quirk {
  RAPL_UNIT_QUIRK_NONE = 0,
  RAPL_UNIT_QUIRK_INTEL_HSW = 1,
  RAPL_UNIT_QUIRK_INTEL_SPR = 2,
};

struct rapl_model {
  struct perf_msr* rapl_msrs;
  long unsigned int events;
  unsigned int msr_power_unit;
  enum rapl_unit_quirk unit_quirk;
};

struct amd_uncore {
  int id;
  int refcnt;
  int cpu;
  int num_counters;
  int rdpmc_base;
  u32 msr_base;
  cpumask_t* active_mask;
  struct pmu* pmu;
  struct perf_event* events[6];
  struct hlist_node node;
};

typedef int pci_power_t;

typedef unsigned int pci_channel_state_t;

typedef short unsigned int pci_dev_flags_t;

struct pci_bus;

struct pci_slot;

struct aer_stats;

struct rcec_ea;

struct pci_driver;

struct pcie_link_state;

struct pci_vpd;

struct pci_sriov;

struct pci_dev {
  struct list_head bus_list;
  struct pci_bus* bus;
  struct pci_bus* subordinate;
  void* sysdata;
  struct proc_dir_entry* procent;
  struct pci_slot* slot;
  unsigned int devfn;
  short unsigned int vendor;
  short unsigned int device;
  short unsigned int subsystem_vendor;
  short unsigned int subsystem_device;
  unsigned int class;
  u8 revision;
  u8 hdr_type;
  u16 aer_cap;
  struct aer_stats* aer_stats;
  struct rcec_ea* rcec_ea;
  struct pci_dev* rcec;
  u8 pcie_cap;
  u8 msi_cap;
  u8 msix_cap;
  u8 pcie_mpss : 3;
  u8 rom_base_reg;
  u8 pin;
  u16 pcie_flags_reg;
  long unsigned int* dma_alias_mask;
  struct pci_driver* driver;
  u64 dma_mask;
  struct device_dma_parameters dma_parms;
  pci_power_t current_state;
  unsigned int imm_ready : 1;
  u8 pm_cap;
  unsigned int pme_support : 5;
  unsigned int pme_poll : 1;
  unsigned int d1_support : 1;
  unsigned int d2_support : 1;
  unsigned int no_d1d2 : 1;
  unsigned int no_d3cold : 1;
  unsigned int bridge_d3 : 1;
  unsigned int d3cold_allowed : 1;
  unsigned int mmio_always_on : 1;
  unsigned int wakeup_prepared : 1;
  unsigned int runtime_d3cold : 1;
  unsigned int skip_bus_pm : 1;
  unsigned int ignore_hotplug : 1;
  unsigned int hotplug_user_indicators : 1;
  unsigned int clear_retrain_link : 1;
  unsigned int d3hot_delay;
  unsigned int d3cold_delay;
  struct pcie_link_state* link_state;
  unsigned int ltr_path : 1;
  u16 l1ss;
  unsigned int eetlp_prefix_path : 1;
  pci_channel_state_t error_state;
  struct device dev;
  int cfg_size;
  unsigned int irq;
  struct resource resource[17];
  bool match_driver;
  unsigned int transparent : 1;
  unsigned int io_window : 1;
  unsigned int pref_window : 1;
  unsigned int pref_64_window : 1;
  unsigned int multifunction : 1;
  unsigned int is_busmaster : 1;
  unsigned int no_msi : 1;
  unsigned int no_64bit_msi : 1;
  unsigned int block_cfg_access : 1;
  unsigned int broken_parity_status : 1;
  unsigned int irq_reroute_variant : 2;
  unsigned int msi_enabled : 1;
  unsigned int msix_enabled : 1;
  unsigned int ari_enabled : 1;
  unsigned int ats_enabled : 1;
  unsigned int pasid_enabled : 1;
  unsigned int pri_enabled : 1;
  unsigned int is_managed : 1;
  unsigned int needs_freset : 1;
  unsigned int state_saved : 1;
  unsigned int is_physfn : 1;
  unsigned int is_virtfn : 1;
  unsigned int reset_fn : 1;
  unsigned int is_hotplug_bridge : 1;
  unsigned int shpc_managed : 1;
  unsigned int is_thunderbolt : 1;
  unsigned int untrusted : 1;
  unsigned int external_facing : 1;
  unsigned int broken_intx_masking : 1;
  unsigned int io_window_1k : 1;
  unsigned int irq_managed : 1;
  unsigned int non_compliant_bars : 1;
  unsigned int is_probed : 1;
  unsigned int link_active_reporting : 1;
  unsigned int no_vf_scan : 1;
  unsigned int no_command_memory : 1;
  pci_dev_flags_t dev_flags;
  atomic_t enable_cnt;
  u32 saved_config_space[16];
  struct hlist_head saved_cap_space;
  struct bin_attribute* rom_attr;
  int rom_attr_enabled;
  struct bin_attribute* res_attr[17];
  struct bin_attribute* res_attr_wc[17];
  unsigned int broken_cmd_compl : 1;
  const struct attribute_group** msi_irq_groups;
  struct pci_vpd* vpd;
  u16 dpc_cap;
  unsigned int dpc_rp_extensions : 1;
  u8 dpc_rp_log_size;
  union {
    struct pci_sriov* sriov;
    struct pci_dev* physfn;
  };
  u16 ats_cap;
  u8 ats_stu;
  u16 pri_cap;
  u32 pri_reqs_alloc;
  unsigned int pasid_required : 1;
  u16 pasid_cap;
  u16 pasid_features;
  u16 acs_cap;
  phys_addr_t rom;
  size_t romlen;
  char* driver_override;
  long unsigned int priv_flags;
};

struct pci_device_id {
  __u32 vendor;
  __u32 device;
  __u32 subvendor;
  __u32 subdevice;
  __u32 class;
  __u32 class_mask;
  kernel_ulong_t driver_data;
};

struct hotplug_slot;

struct pci_slot {
  struct pci_bus* bus;
  struct list_head list;
  struct hotplug_slot* hotplug;
  unsigned char number;
  struct kobject kobj;
};

typedef short unsigned int pci_bus_flags_t;

struct pci_ops;

struct msi_controller;

struct pci_bus {
  struct list_head node;
  struct pci_bus* parent;
  struct list_head children;
  struct list_head devices;
  struct pci_dev* self;
  struct list_head slots;
  struct resource* resource[4];
  struct list_head resources;
  struct resource busn_res;
  struct pci_ops* ops;
  struct msi_controller* msi;
  void* sysdata;
  struct proc_dir_entry* procdir;
  unsigned char number;
  unsigned char primary;
  unsigned char max_bus_speed;
  unsigned char cur_bus_speed;
  char name[48];
  short unsigned int bridge_ctl;
  pci_bus_flags_t bus_flags;
  struct device* bridge;
  struct device dev;
  struct bin_attribute* legacy_io;
  struct bin_attribute* legacy_mem;
  unsigned int is_added : 1;
};

enum {
  PCI_STD_RESOURCES = 0,
  PCI_STD_RESOURCE_END = 5,
  PCI_ROM_RESOURCE = 6,
  PCI_IOV_RESOURCES = 7,
  PCI_IOV_RESOURCE_END = 12,
  PCI_BRIDGE_RESOURCES = 13,
  PCI_BRIDGE_RESOURCE_END = 16,
  PCI_NUM_RESOURCES = 17,
  DEVICE_COUNT_RESOURCE = 17,
};

typedef unsigned int pcie_reset_state_t;

struct pci_dynids {
  spinlock_t lock;
  struct list_head list;
};

struct pci_error_handlers;

struct pci_driver {
  struct list_head node;
  const char* name;
  const struct pci_device_id* id_table;
  int (*probe)(struct pci_dev*, const struct pci_device_id*);
  void (*remove)(struct pci_dev*);
  int (*suspend)(struct pci_dev*, pm_message_t);
  int (*resume)(struct pci_dev*);
  void (*shutdown)(struct pci_dev*);
  int (*sriov_configure)(struct pci_dev*, int);
  const struct pci_error_handlers* err_handler;
  const struct attribute_group** groups;
  struct device_driver driver;
  struct pci_dynids dynids;
};

struct pci_ops {
  int (*add_bus)(struct pci_bus*);
  void (*remove_bus)(struct pci_bus*);
  void* (*map_bus)(struct pci_bus*, unsigned int, int);
  int (*read)(struct pci_bus*, unsigned int, int, int, u32*);
  int (*write)(struct pci_bus*, unsigned int, int, int, u32);
};

typedef unsigned int pci_ers_result_t;

struct pci_error_handlers {
  pci_ers_result_t (*error_detected)(struct pci_dev*, pci_channel_state_t);
  pci_ers_result_t (*mmio_enabled)(struct pci_dev*);
  pci_ers_result_t (*slot_reset)(struct pci_dev*);
  void (*reset_prepare)(struct pci_dev*);
  void (*reset_done)(struct pci_dev*);
  void (*resume)(struct pci_dev*);
};

enum pcie_bus_config_types {
  PCIE_BUS_TUNE_OFF = 0,
  PCIE_BUS_DEFAULT = 1,
  PCIE_BUS_SAFE = 2,
  PCIE_BUS_PERFORMANCE = 3,
  PCIE_BUS_PEER2PEER = 4,
};

enum ibs_states {
  IBS_ENABLED = 0,
  IBS_STARTED = 1,
  IBS_STOPPING = 2,
  IBS_STOPPED = 3,
  IBS_MAX_STATES = 4,
};

struct cpu_perf_ibs {
  struct perf_event* event;
  long unsigned int state[1];
};

struct perf_ibs {
  struct pmu pmu;
  unsigned int msr;
  u64 config_mask;
  u64 cnt_mask;
  u64 enable_mask;
  u64 valid_mask;
  u64 max_period;
  long unsigned int offset_mask[1];
  int offset_max;
  unsigned int fetch_count_reset_broken : 1;
  struct cpu_perf_ibs* pcpu;
  struct attribute** format_attrs;
  struct attribute_group format_group;
  const struct attribute_group* attr_groups[2];
  u64 (*get_count)(u64);
};

struct perf_ibs_data {
  u32 size;
  union {
    u32 data[0];
    u32 caps;
  };
  u64 regs[8];
};

enum perf_msr_id {
  PERF_MSR_TSC = 0,
  PERF_MSR_APERF = 1,
  PERF_MSR_MPERF = 2,
  PERF_MSR_PPERF = 3,
  PERF_MSR_SMI = 4,
  PERF_MSR_PTSC = 5,
  PERF_MSR_IRPERF = 6,
  PERF_MSR_THERM = 7,
  PERF_MSR_EVENT_MAX = 8,
};

struct x86_cpu_desc {
  u8 x86_family;
  u8 x86_vendor;
  u8 x86_model;
  u8 x86_stepping;
  u32 x86_microcode_rev;
};

union cpuid10_eax {
  struct {
    unsigned int version_id : 8;
    unsigned int num_counters : 8;
    unsigned int bit_width : 8;
    unsigned int mask_length : 8;
  } split;
  unsigned int full;
};

union cpuid10_ebx {
  struct {
    unsigned int no_unhalted_core_cycles : 1;
    unsigned int no_instructions_retired : 1;
    unsigned int no_unhalted_reference_cycles : 1;
    unsigned int no_llc_reference : 1;
    unsigned int no_llc_misses : 1;
    unsigned int no_branch_instruction_retired : 1;
    unsigned int no_branch_misses_retired : 1;
  } split;
  unsigned int full;
};

union cpuid10_edx {
  struct {
    unsigned int num_counters_fixed : 5;
    unsigned int bit_width_fixed : 8;
    unsigned int reserved1 : 2;
    unsigned int anythread_deprecated : 1;
    unsigned int reserved2 : 16;
  } split;
  unsigned int full;
};

enum {
  LBR_FORMAT_32 = 0,
  LBR_FORMAT_LIP = 1,
  LBR_FORMAT_EIP = 2,
  LBR_FORMAT_EIP_FLAGS = 3,
  LBR_FORMAT_EIP_FLAGS2 = 4,
  LBR_FORMAT_INFO = 5,
  LBR_FORMAT_TIME = 6,
  LBR_FORMAT_MAX_KNOWN = 6,
};

union x86_pmu_config {
  struct {
    u64 event : 8;
    u64 umask : 8;
    u64 usr : 1;
    u64 os : 1;
    u64 edge : 1;
    u64 pc : 1;
    u64 interrupt : 1;
    u64 __reserved1 : 1;
    u64 en : 1;
    u64 inv : 1;
    u64 cmask : 8;
    u64 event2 : 4;
    u64 __reserved2 : 4;
    u64 go : 1;
    u64 ho : 1;
  } bits;
  u64 value;
};

enum pageflags {
  PG_locked = 0,
  PG_referenced = 1,
  PG_uptodate = 2,
  PG_dirty = 3,
  PG_lru = 4,
  PG_active = 5,
  PG_workingset = 6,
  PG_waiters = 7,
  PG_error = 8,
  PG_slab = 9,
  PG_owner_priv_1 = 10,
  PG_arch_1 = 11,
  PG_reserved = 12,
  PG_private = 13,
  PG_private_2 = 14,
  PG_writeback = 15,
  PG_head = 16,
  PG_mappedtodisk = 17,
  PG_reclaim = 18,
  PG_swapbacked = 19,
  PG_unevictable = 20,
  PG_mlocked = 21,
  PG_uncached = 22,
  PG_hwpoison = 23,
  PG_arch_2 = 24,
  __NR_PAGEFLAGS = 25,
  PG_checked = 10,
  PG_swapcache = 10,
  PG_fscache = 14,
  PG_pinned = 10,
  PG_savepinned = 3,
  PG_foreign = 10,
  PG_xen_remapped = 10,
  PG_slob_free = 13,
  PG_double_map = 6,
  PG_isolated = 18,
  PG_reported = 2,
};

struct bts_ctx {
  struct perf_output_handle handle;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct debug_store ds_back;
  int state;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum {
  BTS_STATE_STOPPED = 0,
  BTS_STATE_INACTIVE = 1,
  BTS_STATE_ACTIVE = 2,
};

struct bts_phys {
  struct page* page;
  long unsigned int size;
  long unsigned int offset;
  long unsigned int displacement;
};

struct bts_buffer {
  size_t real_size;
  unsigned int nr_pages;
  unsigned int nr_bufs;
  unsigned int cur_buf;
  bool snapshot;
  local_t data_size;
  local_t head;
  long unsigned int end;
  void** data_pages;
  struct bts_phys buf[0];
};

struct lbr_entry {
  u64 from;
  u64 to;
  u64 info;
};

struct pebs_basic {
  u64 format_size;
  u64 ip;
  u64 applicable_counters;
  u64 tsc;
};

struct pebs_meminfo {
  u64 address;
  u64 aux;
  u64 latency;
  u64 tsx_tuning;
};

struct pebs_gprs {
  u64 flags;
  u64 ip;
  u64 ax;
  u64 cx;
  u64 dx;
  u64 bx;
  u64 sp;
  u64 bp;
  u64 si;
  u64 di;
  u64 r8;
  u64 r9;
  u64 r10;
  u64 r11;
  u64 r12;
  u64 r13;
  u64 r14;
  u64 r15;
};

struct pebs_xmm {
  u64 xmm[32];
};

struct x86_perf_regs {
  struct pt_regs regs;
  u64* xmm_regs;
};

typedef unsigned int insn_attr_t;

typedef unsigned char insn_byte_t;

typedef int insn_value_t;

struct insn_field {
  union {
    insn_value_t value;
    insn_byte_t bytes[4];
  };
  unsigned char got;
  unsigned char nbytes;
};

struct insn {
  struct insn_field prefixes;
  struct insn_field rex_prefix;
  struct insn_field vex_prefix;
  struct insn_field opcode;
  struct insn_field modrm;
  struct insn_field sib;
  struct insn_field displacement;
  union {
    struct insn_field immediate;
    struct insn_field moffset1;
    struct insn_field immediate1;
  };
  union {
    struct insn_field moffset2;
    struct insn_field immediate2;
  };
  int emulate_prefix_size;
  insn_attr_t attr;
  unsigned char opnd_bytes;
  unsigned char addr_bytes;
  unsigned char length;
  unsigned char x86_64;
  const insn_byte_t* kaddr;
  const insn_byte_t* end_kaddr;
  const insn_byte_t* next_byte;
};

enum {
  PERF_TXN_ELISION = 1,
  PERF_TXN_TRANSACTION = 2,
  PERF_TXN_SYNC = 4,
  PERF_TXN_ASYNC = 8,
  PERF_TXN_RETRY = 16,
  PERF_TXN_CONFLICT = 32,
  PERF_TXN_CAPACITY_WRITE = 64,
  PERF_TXN_CAPACITY_READ = 128,
  PERF_TXN_MAX = 256,
  PERF_TXN_ABORT_MASK = 0,
  PERF_TXN_ABORT_SHIFT = 32,
};

struct perf_event_header {
  __u32 type;
  __u16 misc;
  __u16 size;
};

union intel_x86_pebs_dse {
  u64 val;
  struct {
    unsigned int ld_dse : 4;
    unsigned int ld_stlb_miss : 1;
    unsigned int ld_locked : 1;
    unsigned int ld_data_blk : 1;
    unsigned int ld_addr_blk : 1;
    unsigned int ld_reserved : 24;
  };
  struct {
    unsigned int st_l1d_hit : 1;
    unsigned int st_reserved1 : 3;
    unsigned int st_stlb_miss : 1;
    unsigned int st_locked : 1;
    unsigned int st_reserved2 : 26;
  };
  struct {
    unsigned int st_lat_dse : 4;
    unsigned int st_lat_stlb_miss : 1;
    unsigned int st_lat_locked : 1;
    unsigned int ld_reserved3 : 26;
  };
};

struct pebs_record_core {
  u64 flags;
  u64 ip;
  u64 ax;
  u64 bx;
  u64 cx;
  u64 dx;
  u64 si;
  u64 di;
  u64 bp;
  u64 sp;
  u64 r8;
  u64 r9;
  u64 r10;
  u64 r11;
  u64 r12;
  u64 r13;
  u64 r14;
  u64 r15;
};

struct pebs_record_nhm {
  u64 flags;
  u64 ip;
  u64 ax;
  u64 bx;
  u64 cx;
  u64 dx;
  u64 si;
  u64 di;
  u64 bp;
  u64 sp;
  u64 r8;
  u64 r9;
  u64 r10;
  u64 r11;
  u64 r12;
  u64 r13;
  u64 r14;
  u64 r15;
  u64 status;
  u64 dla;
  u64 dse;
  u64 lat;
};

union hsw_tsx_tuning {
  struct {
    u32 cycles_last_block : 32;
    u32 hle_abort : 1;
    u32 rtm_abort : 1;
    u32 instruction_abort : 1;
    u32 non_instruction_abort : 1;
    u32 retry : 1;
    u32 data_conflict : 1;
    u32 capacity_writes : 1;
    u32 capacity_reads : 1;
  };
  u64 value;
};

struct pebs_record_skl {
  u64 flags;
  u64 ip;
  u64 ax;
  u64 bx;
  u64 cx;
  u64 dx;
  u64 si;
  u64 di;
  u64 bp;
  u64 sp;
  u64 r8;
  u64 r9;
  u64 r10;
  u64 r11;
  u64 r12;
  u64 r13;
  u64 r14;
  u64 r15;
  u64 status;
  u64 dla;
  u64 dse;
  u64 lat;
  u64 real_ip;
  u64 tsx_tuning;
  u64 tsc;
};

struct bts_record {
  u64 from;
  u64 to;
  u64 flags;
};

enum {
  PERF_BR_UNKNOWN = 0,
  PERF_BR_COND = 1,
  PERF_BR_UNCOND = 2,
  PERF_BR_IND = 3,
  PERF_BR_CALL = 4,
  PERF_BR_IND_CALL = 5,
  PERF_BR_RET = 6,
  PERF_BR_SYSCALL = 7,
  PERF_BR_SYSRET = 8,
  PERF_BR_COND_CALL = 9,
  PERF_BR_COND_RET = 10,
  PERF_BR_MAX = 11,
};

enum xfeature {
  XFEATURE_FP = 0,
  XFEATURE_SSE = 1,
  XFEATURE_YMM = 2,
  XFEATURE_BNDREGS = 3,
  XFEATURE_BNDCSR = 4,
  XFEATURE_OPMASK = 5,
  XFEATURE_ZMM_Hi256 = 6,
  XFEATURE_Hi16_ZMM = 7,
  XFEATURE_PT_UNIMPLEMENTED_SO_FAR = 8,
  XFEATURE_PKRU = 9,
  XFEATURE_PASID = 10,
  XFEATURE_RSRVD_COMP_11 = 11,
  XFEATURE_RSRVD_COMP_12 = 12,
  XFEATURE_RSRVD_COMP_13 = 13,
  XFEATURE_RSRVD_COMP_14 = 14,
  XFEATURE_LBR = 15,
  XFEATURE_MAX = 16,
};

struct arch_lbr_state {
  u64 lbr_ctl;
  u64 lbr_depth;
  u64 ler_from;
  u64 ler_to;
  u64 ler_info;
  struct lbr_entry entries[0];
};

union cpuid28_eax {
  struct {
    unsigned int lbr_depth_mask : 8;
    unsigned int reserved : 22;
    unsigned int lbr_deep_c_reset : 1;
    unsigned int lbr_lip : 1;
  } split;
  unsigned int full;
};

union cpuid28_ebx {
  struct {
    unsigned int lbr_cpl : 1;
    unsigned int lbr_filter : 1;
    unsigned int lbr_call_stack : 1;
  } split;
  unsigned int full;
};

union cpuid28_ecx {
  struct {
    unsigned int lbr_mispred : 1;
    unsigned int lbr_timed_lbr : 1;
    unsigned int lbr_br_type : 1;
  } split;
  unsigned int full;
};

struct x86_pmu_lbr {
  unsigned int nr;
  unsigned int from;
  unsigned int to;
  unsigned int info;
};

struct x86_perf_task_context_opt {
  int lbr_callstack_users;
  int lbr_stack_state;
  int log_id;
};

struct x86_perf_task_context {
  u64 lbr_sel;
  int tos;
  int valid_lbrs;
  struct x86_perf_task_context_opt opt;
  struct lbr_entry lbr[32];
};

struct x86_perf_task_context_arch_lbr {
  struct x86_perf_task_context_opt opt;
  struct lbr_entry entries[0];
};

struct x86_perf_task_context_arch_lbr_xsave {
  struct x86_perf_task_context_opt opt;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  union {
    struct xregs_state xsave;
    struct {
      struct fxregs_state i387;
      struct xstate_header header;
      struct arch_lbr_state lbr;
      long : 64;
      long : 64;
      long : 64;
    };
  };
};

enum {
  X86_BR_NONE = 0,
  X86_BR_USER = 1,
  X86_BR_KERNEL = 2,
  X86_BR_CALL = 4,
  X86_BR_RET = 8,
  X86_BR_SYSCALL = 16,
  X86_BR_SYSRET = 32,
  X86_BR_INT = 64,
  X86_BR_IRET = 128,
  X86_BR_JCC = 256,
  X86_BR_JMP = 512,
  X86_BR_IRQ = 1024,
  X86_BR_IND_CALL = 2048,
  X86_BR_ABORT = 4096,
  X86_BR_IN_TX = 8192,
  X86_BR_NO_TX = 16384,
  X86_BR_ZERO_CALL = 32768,
  X86_BR_CALL_STACK = 65536,
  X86_BR_IND_JMP = 131072,
  X86_BR_TYPE_SAVE = 262144,
};

enum {
  LBR_NONE = 0,
  LBR_VALID = 1,
};

enum {
  ARCH_LBR_BR_TYPE_JCC = 0,
  ARCH_LBR_BR_TYPE_NEAR_IND_JMP = 1,
  ARCH_LBR_BR_TYPE_NEAR_REL_JMP = 2,
  ARCH_LBR_BR_TYPE_NEAR_IND_CALL = 3,
  ARCH_LBR_BR_TYPE_NEAR_REL_CALL = 4,
  ARCH_LBR_BR_TYPE_NEAR_RET = 5,
  ARCH_LBR_BR_TYPE_KNOWN_MAX = 5,
  ARCH_LBR_BR_TYPE_MAP_MAX = 16,
};

enum P4_EVENTS {
  P4_EVENT_TC_DELIVER_MODE = 0,
  P4_EVENT_BPU_FETCH_REQUEST = 1,
  P4_EVENT_ITLB_REFERENCE = 2,
  P4_EVENT_MEMORY_CANCEL = 3,
  P4_EVENT_MEMORY_COMPLETE = 4,
  P4_EVENT_LOAD_PORT_REPLAY = 5,
  P4_EVENT_STORE_PORT_REPLAY = 6,
  P4_EVENT_MOB_LOAD_REPLAY = 7,
  P4_EVENT_PAGE_WALK_TYPE = 8,
  P4_EVENT_BSQ_CACHE_REFERENCE = 9,
  P4_EVENT_IOQ_ALLOCATION = 10,
  P4_EVENT_IOQ_ACTIVE_ENTRIES = 11,
  P4_EVENT_FSB_DATA_ACTIVITY = 12,
  P4_EVENT_BSQ_ALLOCATION = 13,
  P4_EVENT_BSQ_ACTIVE_ENTRIES = 14,
  P4_EVENT_SSE_INPUT_ASSIST = 15,
  P4_EVENT_PACKED_SP_UOP = 16,
  P4_EVENT_PACKED_DP_UOP = 17,
  P4_EVENT_SCALAR_SP_UOP = 18,
  P4_EVENT_SCALAR_DP_UOP = 19,
  P4_EVENT_64BIT_MMX_UOP = 20,
  P4_EVENT_128BIT_MMX_UOP = 21,
  P4_EVENT_X87_FP_UOP = 22,
  P4_EVENT_TC_MISC = 23,
  P4_EVENT_GLOBAL_POWER_EVENTS = 24,
  P4_EVENT_TC_MS_XFER = 25,
  P4_EVENT_UOP_QUEUE_WRITES = 26,
  P4_EVENT_RETIRED_MISPRED_BRANCH_TYPE = 27,
  P4_EVENT_RETIRED_BRANCH_TYPE = 28,
  P4_EVENT_RESOURCE_STALL = 29,
  P4_EVENT_WC_BUFFER = 30,
  P4_EVENT_B2B_CYCLES = 31,
  P4_EVENT_BNR = 32,
  P4_EVENT_SNOOP = 33,
  P4_EVENT_RESPONSE = 34,
  P4_EVENT_FRONT_END_EVENT = 35,
  P4_EVENT_EXECUTION_EVENT = 36,
  P4_EVENT_REPLAY_EVENT = 37,
  P4_EVENT_INSTR_RETIRED = 38,
  P4_EVENT_UOPS_RETIRED = 39,
  P4_EVENT_UOP_TYPE = 40,
  P4_EVENT_BRANCH_RETIRED = 41,
  P4_EVENT_MISPRED_BRANCH_RETIRED = 42,
  P4_EVENT_X87_ASSIST = 43,
  P4_EVENT_MACHINE_CLEAR = 44,
  P4_EVENT_INSTR_COMPLETED = 45,
};

enum P4_EVENT_OPCODES {
  P4_EVENT_TC_DELIVER_MODE_OPCODE = 257,
  P4_EVENT_BPU_FETCH_REQUEST_OPCODE = 768,
  P4_EVENT_ITLB_REFERENCE_OPCODE = 6147,
  P4_EVENT_MEMORY_CANCEL_OPCODE = 517,
  P4_EVENT_MEMORY_COMPLETE_OPCODE = 2050,
  P4_EVENT_LOAD_PORT_REPLAY_OPCODE = 1026,
  P4_EVENT_STORE_PORT_REPLAY_OPCODE = 1282,
  P4_EVENT_MOB_LOAD_REPLAY_OPCODE = 770,
  P4_EVENT_PAGE_WALK_TYPE_OPCODE = 260,
  P4_EVENT_BSQ_CACHE_REFERENCE_OPCODE = 3079,
  P4_EVENT_IOQ_ALLOCATION_OPCODE = 774,
  P4_EVENT_IOQ_ACTIVE_ENTRIES_OPCODE = 6662,
  P4_EVENT_FSB_DATA_ACTIVITY_OPCODE = 5894,
  P4_EVENT_BSQ_ALLOCATION_OPCODE = 1287,
  P4_EVENT_BSQ_ACTIVE_ENTRIES_OPCODE = 1543,
  P4_EVENT_SSE_INPUT_ASSIST_OPCODE = 13313,
  P4_EVENT_PACKED_SP_UOP_OPCODE = 2049,
  P4_EVENT_PACKED_DP_UOP_OPCODE = 3073,
  P4_EVENT_SCALAR_SP_UOP_OPCODE = 2561,
  P4_EVENT_SCALAR_DP_UOP_OPCODE = 3585,
  P4_EVENT_64BIT_MMX_UOP_OPCODE = 513,
  P4_EVENT_128BIT_MMX_UOP_OPCODE = 6657,
  P4_EVENT_X87_FP_UOP_OPCODE = 1025,
  P4_EVENT_TC_MISC_OPCODE = 1537,
  P4_EVENT_GLOBAL_POWER_EVENTS_OPCODE = 4870,
  P4_EVENT_TC_MS_XFER_OPCODE = 1280,
  P4_EVENT_UOP_QUEUE_WRITES_OPCODE = 2304,
  P4_EVENT_RETIRED_MISPRED_BRANCH_TYPE_OPCODE = 1282,
  P4_EVENT_RETIRED_BRANCH_TYPE_OPCODE = 1026,
  P4_EVENT_RESOURCE_STALL_OPCODE = 257,
  P4_EVENT_WC_BUFFER_OPCODE = 1285,
  P4_EVENT_B2B_CYCLES_OPCODE = 5635,
  P4_EVENT_BNR_OPCODE = 2051,
  P4_EVENT_SNOOP_OPCODE = 1539,
  P4_EVENT_RESPONSE_OPCODE = 1027,
  P4_EVENT_FRONT_END_EVENT_OPCODE = 2053,
  P4_EVENT_EXECUTION_EVENT_OPCODE = 3077,
  P4_EVENT_REPLAY_EVENT_OPCODE = 2309,
  P4_EVENT_INSTR_RETIRED_OPCODE = 516,
  P4_EVENT_UOPS_RETIRED_OPCODE = 260,
  P4_EVENT_UOP_TYPE_OPCODE = 514,
  P4_EVENT_BRANCH_RETIRED_OPCODE = 1541,
  P4_EVENT_MISPRED_BRANCH_RETIRED_OPCODE = 772,
  P4_EVENT_X87_ASSIST_OPCODE = 773,
  P4_EVENT_MACHINE_CLEAR_OPCODE = 517,
  P4_EVENT_INSTR_COMPLETED_OPCODE = 1796,
};

enum P4_ESCR_EMASKS {
  P4_EVENT_TC_DELIVER_MODE__DD = 512,
  P4_EVENT_TC_DELIVER_MODE__DB = 1024,
  P4_EVENT_TC_DELIVER_MODE__DI = 2048,
  P4_EVENT_TC_DELIVER_MODE__BD = 4096,
  P4_EVENT_TC_DELIVER_MODE__BB = 8192,
  P4_EVENT_TC_DELIVER_MODE__BI = 16384,
  P4_EVENT_TC_DELIVER_MODE__ID = 32768,
  P4_EVENT_BPU_FETCH_REQUEST__TCMISS = 512,
  P4_EVENT_ITLB_REFERENCE__HIT = 512,
  P4_EVENT_ITLB_REFERENCE__MISS = 1024,
  P4_EVENT_ITLB_REFERENCE__HIT_UK = 2048,
  P4_EVENT_MEMORY_CANCEL__ST_RB_FULL = 2048,
  P4_EVENT_MEMORY_CANCEL__64K_CONF = 4096,
  P4_EVENT_MEMORY_COMPLETE__LSC = 512,
  P4_EVENT_MEMORY_COMPLETE__SSC = 1024,
  P4_EVENT_LOAD_PORT_REPLAY__SPLIT_LD = 1024,
  P4_EVENT_STORE_PORT_REPLAY__SPLIT_ST = 1024,
  P4_EVENT_MOB_LOAD_REPLAY__NO_STA = 1024,
  P4_EVENT_MOB_LOAD_REPLAY__NO_STD = 4096,
  P4_EVENT_MOB_LOAD_REPLAY__PARTIAL_DATA = 8192,
  P4_EVENT_MOB_LOAD_REPLAY__UNALGN_ADDR = 16384,
  P4_EVENT_PAGE_WALK_TYPE__DTMISS = 512,
  P4_EVENT_PAGE_WALK_TYPE__ITMISS = 1024,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_2ndL_HITS = 512,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_2ndL_HITE = 1024,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_2ndL_HITM = 2048,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_3rdL_HITS = 4096,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_3rdL_HITE = 8192,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_3rdL_HITM = 16384,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_2ndL_MISS = 131072,
  P4_EVENT_BSQ_CACHE_REFERENCE__RD_3rdL_MISS = 262144,
  P4_EVENT_BSQ_CACHE_REFERENCE__WR_2ndL_MISS = 524288,
  P4_EVENT_IOQ_ALLOCATION__DEFAULT = 512,
  P4_EVENT_IOQ_ALLOCATION__ALL_READ = 16384,
  P4_EVENT_IOQ_ALLOCATION__ALL_WRITE = 32768,
  P4_EVENT_IOQ_ALLOCATION__MEM_UC = 65536,
  P4_EVENT_IOQ_ALLOCATION__MEM_WC = 131072,
  P4_EVENT_IOQ_ALLOCATION__MEM_WT = 262144,
  P4_EVENT_IOQ_ALLOCATION__MEM_WP = 524288,
  P4_EVENT_IOQ_ALLOCATION__MEM_WB = 1048576,
  P4_EVENT_IOQ_ALLOCATION__OWN = 4194304,
  P4_EVENT_IOQ_ALLOCATION__OTHER = 8388608,
  P4_EVENT_IOQ_ALLOCATION__PREFETCH = 16777216,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__DEFAULT = 512,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__ALL_READ = 16384,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__ALL_WRITE = 32768,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__MEM_UC = 65536,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__MEM_WC = 131072,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__MEM_WT = 262144,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__MEM_WP = 524288,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__MEM_WB = 1048576,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__OWN = 4194304,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__OTHER = 8388608,
  P4_EVENT_IOQ_ACTIVE_ENTRIES__PREFETCH = 16777216,
  P4_EVENT_FSB_DATA_ACTIVITY__DRDY_DRV = 512,
  P4_EVENT_FSB_DATA_ACTIVITY__DRDY_OWN = 1024,
  P4_EVENT_FSB_DATA_ACTIVITY__DRDY_OTHER = 2048,
  P4_EVENT_FSB_DATA_ACTIVITY__DBSY_DRV = 4096,
  P4_EVENT_FSB_DATA_ACTIVITY__DBSY_OWN = 8192,
  P4_EVENT_FSB_DATA_ACTIVITY__DBSY_OTHER = 16384,
  P4_EVENT_BSQ_ALLOCATION__REQ_TYPE0 = 512,
  P4_EVENT_BSQ_ALLOCATION__REQ_TYPE1 = 1024,
  P4_EVENT_BSQ_ALLOCATION__REQ_LEN0 = 2048,
  P4_EVENT_BSQ_ALLOCATION__REQ_LEN1 = 4096,
  P4_EVENT_BSQ_ALLOCATION__REQ_IO_TYPE = 16384,
  P4_EVENT_BSQ_ALLOCATION__REQ_LOCK_TYPE = 32768,
  P4_EVENT_BSQ_ALLOCATION__REQ_CACHE_TYPE = 65536,
  P4_EVENT_BSQ_ALLOCATION__REQ_SPLIT_TYPE = 131072,
  P4_EVENT_BSQ_ALLOCATION__REQ_DEM_TYPE = 262144,
  P4_EVENT_BSQ_ALLOCATION__REQ_ORD_TYPE = 524288,
  P4_EVENT_BSQ_ALLOCATION__MEM_TYPE0 = 1048576,
  P4_EVENT_BSQ_ALLOCATION__MEM_TYPE1 = 2097152,
  P4_EVENT_BSQ_ALLOCATION__MEM_TYPE2 = 4194304,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_TYPE0 = 512,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_TYPE1 = 1024,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_LEN0 = 2048,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_LEN1 = 4096,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_IO_TYPE = 16384,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_LOCK_TYPE = 32768,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_CACHE_TYPE = 65536,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_SPLIT_TYPE = 131072,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_DEM_TYPE = 262144,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__REQ_ORD_TYPE = 524288,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__MEM_TYPE0 = 1048576,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__MEM_TYPE1 = 2097152,
  P4_EVENT_BSQ_ACTIVE_ENTRIES__MEM_TYPE2 = 4194304,
  P4_EVENT_SSE_INPUT_ASSIST__ALL = 16777216,
  P4_EVENT_PACKED_SP_UOP__ALL = 16777216,
  P4_EVENT_PACKED_DP_UOP__ALL = 16777216,
  P4_EVENT_SCALAR_SP_UOP__ALL = 16777216,
  P4_EVENT_SCALAR_DP_UOP__ALL = 16777216,
  P4_EVENT_64BIT_MMX_UOP__ALL = 16777216,
  P4_EVENT_128BIT_MMX_UOP__ALL = 16777216,
  P4_EVENT_X87_FP_UOP__ALL = 16777216,
  P4_EVENT_TC_MISC__FLUSH = 8192,
  P4_EVENT_GLOBAL_POWER_EVENTS__RUNNING = 512,
  P4_EVENT_TC_MS_XFER__CISC = 512,
  P4_EVENT_UOP_QUEUE_WRITES__FROM_TC_BUILD = 512,
  P4_EVENT_UOP_QUEUE_WRITES__FROM_TC_DELIVER = 1024,
  P4_EVENT_UOP_QUEUE_WRITES__FROM_ROM = 2048,
  P4_EVENT_RETIRED_MISPRED_BRANCH_TYPE__CONDITIONAL = 1024,
  P4_EVENT_RETIRED_MISPRED_BRANCH_TYPE__CALL = 2048,
  P4_EVENT_RETIRED_MISPRED_BRANCH_TYPE__RETURN = 4096,
  P4_EVENT_RETIRED_MISPRED_BRANCH_TYPE__INDIRECT = 8192,
  P4_EVENT_RETIRED_BRANCH_TYPE__CONDITIONAL = 1024,
  P4_EVENT_RETIRED_BRANCH_TYPE__CALL = 2048,
  P4_EVENT_RETIRED_BRANCH_TYPE__RETURN = 4096,
  P4_EVENT_RETIRED_BRANCH_TYPE__INDIRECT = 8192,
  P4_EVENT_RESOURCE_STALL__SBFULL = 16384,
  P4_EVENT_WC_BUFFER__WCB_EVICTS = 512,
  P4_EVENT_WC_BUFFER__WCB_FULL_EVICTS = 1024,
  P4_EVENT_FRONT_END_EVENT__NBOGUS = 512,
  P4_EVENT_FRONT_END_EVENT__BOGUS = 1024,
  P4_EVENT_EXECUTION_EVENT__NBOGUS0 = 512,
  P4_EVENT_EXECUTION_EVENT__NBOGUS1 = 1024,
  P4_EVENT_EXECUTION_EVENT__NBOGUS2 = 2048,
  P4_EVENT_EXECUTION_EVENT__NBOGUS3 = 4096,
  P4_EVENT_EXECUTION_EVENT__BOGUS0 = 8192,
  P4_EVENT_EXECUTION_EVENT__BOGUS1 = 16384,
  P4_EVENT_EXECUTION_EVENT__BOGUS2 = 32768,
  P4_EVENT_EXECUTION_EVENT__BOGUS3 = 65536,
  P4_EVENT_REPLAY_EVENT__NBOGUS = 512,
  P4_EVENT_REPLAY_EVENT__BOGUS = 1024,
  P4_EVENT_INSTR_RETIRED__NBOGUSNTAG = 512,
  P4_EVENT_INSTR_RETIRED__NBOGUSTAG = 1024,
  P4_EVENT_INSTR_RETIRED__BOGUSNTAG = 2048,
  P4_EVENT_INSTR_RETIRED__BOGUSTAG = 4096,
  P4_EVENT_UOPS_RETIRED__NBOGUS = 512,
  P4_EVENT_UOPS_RETIRED__BOGUS = 1024,
  P4_EVENT_UOP_TYPE__TAGLOADS = 1024,
  P4_EVENT_UOP_TYPE__TAGSTORES = 2048,
  P4_EVENT_BRANCH_RETIRED__MMNP = 512,
  P4_EVENT_BRANCH_RETIRED__MMNM = 1024,
  P4_EVENT_BRANCH_RETIRED__MMTP = 2048,
  P4_EVENT_BRANCH_RETIRED__MMTM = 4096,
  P4_EVENT_MISPRED_BRANCH_RETIRED__NBOGUS = 512,
  P4_EVENT_X87_ASSIST__FPSU = 512,
  P4_EVENT_X87_ASSIST__FPSO = 1024,
  P4_EVENT_X87_ASSIST__POAO = 2048,
  P4_EVENT_X87_ASSIST__POAU = 4096,
  P4_EVENT_X87_ASSIST__PREA = 8192,
  P4_EVENT_MACHINE_CLEAR__CLEAR = 512,
  P4_EVENT_MACHINE_CLEAR__MOCLEAR = 1024,
  P4_EVENT_MACHINE_CLEAR__SMCLEAR = 2048,
  P4_EVENT_INSTR_COMPLETED__NBOGUS = 512,
  P4_EVENT_INSTR_COMPLETED__BOGUS = 1024,
};

enum P4_PEBS_METRIC {
  P4_PEBS_METRIC__none = 0,
  P4_PEBS_METRIC__1stl_cache_load_miss_retired = 1,
  P4_PEBS_METRIC__2ndl_cache_load_miss_retired = 2,
  P4_PEBS_METRIC__dtlb_load_miss_retired = 3,
  P4_PEBS_METRIC__dtlb_store_miss_retired = 4,
  P4_PEBS_METRIC__dtlb_all_miss_retired = 5,
  P4_PEBS_METRIC__tagged_mispred_branch = 6,
  P4_PEBS_METRIC__mob_load_replay_retired = 7,
  P4_PEBS_METRIC__split_load_retired = 8,
  P4_PEBS_METRIC__split_store_retired = 9,
  P4_PEBS_METRIC__max = 10,
};

struct p4_event_bind {
  unsigned int opcode;
  unsigned int escr_msr[2];
  unsigned int escr_emask;
  unsigned int shared;
  char cntr[6];
};

struct p4_pebs_bind {
  unsigned int metric_pebs;
  unsigned int metric_vert;
};

struct p4_event_alias {
  u64 original;
  u64 alternative;
};

enum cpuid_regs_idx {
  CPUID_EAX = 0,
  CPUID_EBX = 1,
  CPUID_ECX = 2,
  CPUID_EDX = 3,
};

struct dev_ext_attribute {
  struct device_attribute attr;
  void* var;
};

enum pt_capabilities {
  PT_CAP_max_subleaf = 0,
  PT_CAP_cr3_filtering = 1,
  PT_CAP_psb_cyc = 2,
  PT_CAP_ip_filtering = 3,
  PT_CAP_mtc = 4,
  PT_CAP_ptwrite = 5,
  PT_CAP_power_event_trace = 6,
  PT_CAP_topa_output = 7,
  PT_CAP_topa_multiple_entries = 8,
  PT_CAP_single_range_output = 9,
  PT_CAP_output_subsys = 10,
  PT_CAP_payloads_lip = 11,
  PT_CAP_num_address_ranges = 12,
  PT_CAP_mtc_periods = 13,
  PT_CAP_cycle_thresholds = 14,
  PT_CAP_psb_periods = 15,
};

enum perf_addr_filter_action_t {
  PERF_ADDR_FILTER_ACTION_STOP = 0,
  PERF_ADDR_FILTER_ACTION_START = 1,
  PERF_ADDR_FILTER_ACTION_FILTER = 2,
};

struct perf_addr_filter {
  struct list_head entry;
  struct path path;
  long unsigned int offset;
  long unsigned int size;
  enum perf_addr_filter_action_t action;
};

struct topa_entry {
  u64 end : 1;
  u64 rsvd0 : 1;
  u64 intr : 1;
  u64 rsvd1 : 1;
  u64 stop : 1;
  u64 rsvd2 : 1;
  u64 size : 4;
  u64 rsvd3 : 2;
  u64 base : 36;
  u64 rsvd4 : 16;
};

struct pt_pmu {
  struct pmu pmu;
  u32 caps[8];
  bool vmx;
  bool branch_en_always_on;
  long unsigned int max_nonturbo_ratio;
  unsigned int tsc_art_num;
  unsigned int tsc_art_den;
};

struct topa;

struct pt_buffer {
  struct list_head tables;
  struct topa* first;
  struct topa* last;
  struct topa* cur;
  unsigned int cur_idx;
  size_t output_off;
  long unsigned int nr_pages;
  local_t data_size;
  local64_t head;
  bool snapshot;
  bool single;
  long int stop_pos;
  long int intr_pos;
  struct topa_entry* stop_te;
  struct topa_entry* intr_te;
  void** data_pages;
};

struct topa {
  struct list_head list;
  u64 offset;
  size_t size;
  int last;
  unsigned int z_count;
};

struct pt_filter {
  long unsigned int msr_a;
  long unsigned int msr_b;
  long unsigned int config;
};

struct pt_filters {
  struct pt_filter filter[4];
  unsigned int nr_filters;
};

struct pt {
  struct perf_output_handle handle;
  struct pt_filters filters;
  int handle_nmi;
  int vmx_on;
  u64 output_base;
  u64 output_mask;
};

struct pt_cap_desc {
  const char* name;
  u32 leaf;
  u8 reg;
  u32 mask;
};

struct pt_address_range {
  long unsigned int msr_a;
  long unsigned int msr_b;
  unsigned int reg_off;
};

struct topa_page {
  struct topa_entry table[507];
  struct topa topa;
};

struct acpi_device;

struct pci_sysdata {
  int domain;
  int node;
  struct acpi_device* companion;
  void* iommu;
  void* fwnode;
  struct pci_dev* vmd_dev;
};

struct pci_extra_dev {
  struct pci_dev* dev[4];
};

struct intel_uncore_pmu;

struct intel_uncore_ops;

struct uncore_event_desc;

struct freerunning_counters;

struct intel_uncore_type {
  const char* name;
  int num_counters;
  int num_boxes;
  int perf_ctr_bits;
  int fixed_ctr_bits;
  int num_freerunning_types;
  unsigned int perf_ctr;
  unsigned int event_ctl;
  unsigned int event_mask;
  unsigned int event_mask_ext;
  unsigned int fixed_ctr;
  unsigned int fixed_ctl;
  unsigned int box_ctl;
  union {
    unsigned int msr_offset;
    unsigned int mmio_offset;
  };
  unsigned int mmio_map_size;
  unsigned int num_shared_regs : 8;
  unsigned int single_fixed : 1;
  unsigned int pair_ctr_ctl : 1;
  unsigned int* msr_offsets;
  struct event_constraint unconstrainted;
  struct event_constraint* constraints;
  struct intel_uncore_pmu* pmus;
  struct intel_uncore_ops* ops;
  struct uncore_event_desc* event_descs;
  struct freerunning_counters* freerunning;
  const struct attribute_group* attr_groups[4];
  const struct attribute_group** attr_update;
  struct pmu* pmu;
  u64* topology;
  int (*set_mapping)(struct intel_uncore_type*);
  void (*cleanup_mapping)(struct intel_uncore_type*);
};

struct intel_uncore_box;

struct intel_uncore_pmu {
  struct pmu pmu;
  char name[32];
  int pmu_idx;
  int func_id;
  bool registered;
  atomic_t activeboxes;
  struct intel_uncore_type* type;
  struct intel_uncore_box** boxes;
};

struct intel_uncore_ops {
  void (*init_box)(struct intel_uncore_box*);
  void (*exit_box)(struct intel_uncore_box*);
  void (*disable_box)(struct intel_uncore_box*);
  void (*enable_box)(struct intel_uncore_box*);
  void (*disable_event)(struct intel_uncore_box*, struct perf_event*);
  void (*enable_event)(struct intel_uncore_box*, struct perf_event*);
  u64 (*read_counter)(struct intel_uncore_box*, struct perf_event*);
  int (*hw_config)(struct intel_uncore_box*, struct perf_event*);
  struct event_constraint* (
      *get_constraint)(struct intel_uncore_box*, struct perf_event*);
  void (*put_constraint)(struct intel_uncore_box*, struct perf_event*);
};

struct uncore_event_desc {
  struct device_attribute attr;
  const char* config;
};

struct freerunning_counters {
  unsigned int counter_base;
  unsigned int counter_offset;
  unsigned int box_offset;
  unsigned int num_counters;
  unsigned int bits;
  unsigned int* box_offsets;
};

struct intel_uncore_extra_reg {
  raw_spinlock_t lock;
  u64 config;
  u64 config1;
  u64 config2;
  atomic_t ref;
};

struct intel_uncore_box {
  int dieid;
  int n_active;
  int n_events;
  int cpu;
  long unsigned int flags;
  atomic_t refcnt;
  struct perf_event* events[10];
  struct perf_event* event_list[10];
  struct event_constraint* event_constraint[10];
  long unsigned int active_mask[1];
  u64 tags[10];
  struct pci_dev* pci_dev;
  struct intel_uncore_pmu* pmu;
  u64 hrtimer_duration;
  struct hrtimer hrtimer;
  struct list_head list;
  struct list_head active_list;
  void* io_addr;
  struct intel_uncore_extra_reg shared_regs[0];
};

struct pci2phy_map {
  struct list_head list;
  int segment;
  int pbus_to_dieid[256];
};

struct intel_uncore_init_fun {
  void (*cpu_init)();
  int (*pci_init)();
  void (*mmio_init)();
};

enum {
  EXTRA_REG_NHMEX_M_FILTER = 0,
  EXTRA_REG_NHMEX_M_DSP = 1,
  EXTRA_REG_NHMEX_M_ISS = 2,
  EXTRA_REG_NHMEX_M_MAP = 3,
  EXTRA_REG_NHMEX_M_MSC_THR = 4,
  EXTRA_REG_NHMEX_M_PGT = 5,
  EXTRA_REG_NHMEX_M_PLD = 6,
  EXTRA_REG_NHMEX_M_ZDP_CTL_FVC = 7,
};

enum {
  SNB_PCI_UNCORE_IMC = 0,
};

enum perf_snb_uncore_imc_freerunning_types {
  SNB_PCI_UNCORE_IMC_DATA_READS = 0,
  SNB_PCI_UNCORE_IMC_DATA_WRITES = 1,
  SNB_PCI_UNCORE_IMC_GT_REQUESTS = 2,
  SNB_PCI_UNCORE_IMC_IA_REQUESTS = 3,
  SNB_PCI_UNCORE_IMC_IO_REQUESTS = 4,
  SNB_PCI_UNCORE_IMC_FREERUNNING_TYPE_MAX = 5,
};

struct imc_uncore_pci_dev {
  __u32 pci_id;
  struct pci_driver* driver;
};

enum perf_tgl_uncore_imc_freerunning_types {
  TGL_MMIO_UNCORE_IMC_DATA_TOTAL = 0,
  TGL_MMIO_UNCORE_IMC_DATA_READ = 1,
  TGL_MMIO_UNCORE_IMC_DATA_WRITE = 2,
  TGL_MMIO_UNCORE_IMC_FREERUNNING_TYPE_MAX = 3,
};

enum {
  SNBEP_PCI_QPI_PORT0_FILTER = 0,
  SNBEP_PCI_QPI_PORT1_FILTER = 1,
  BDX_PCI_QPI_PORT2_FILTER = 2,
};

enum {
  SNBEP_PCI_UNCORE_HA = 0,
  SNBEP_PCI_UNCORE_IMC = 1,
  SNBEP_PCI_UNCORE_QPI = 2,
  SNBEP_PCI_UNCORE_R2PCIE = 3,
  SNBEP_PCI_UNCORE_R3QPI = 4,
};

enum {
  IVBEP_PCI_UNCORE_HA = 0,
  IVBEP_PCI_UNCORE_IMC = 1,
  IVBEP_PCI_UNCORE_IRP = 2,
  IVBEP_PCI_UNCORE_QPI = 3,
  IVBEP_PCI_UNCORE_R2PCIE = 4,
  IVBEP_PCI_UNCORE_R3QPI = 5,
};

enum {
  KNL_PCI_UNCORE_MC_UCLK = 0,
  KNL_PCI_UNCORE_MC_DCLK = 1,
  KNL_PCI_UNCORE_EDC_UCLK = 2,
  KNL_PCI_UNCORE_EDC_ECLK = 3,
  KNL_PCI_UNCORE_M2PCIE = 4,
  KNL_PCI_UNCORE_IRP = 5,
};

enum {
  HSWEP_PCI_UNCORE_HA = 0,
  HSWEP_PCI_UNCORE_IMC = 1,
  HSWEP_PCI_UNCORE_IRP = 2,
  HSWEP_PCI_UNCORE_QPI = 3,
  HSWEP_PCI_UNCORE_R2PCIE = 4,
  HSWEP_PCI_UNCORE_R3QPI = 5,
};

enum {
  BDX_PCI_UNCORE_HA = 0,
  BDX_PCI_UNCORE_IMC = 1,
  BDX_PCI_UNCORE_IRP = 2,
  BDX_PCI_UNCORE_QPI = 3,
  BDX_PCI_UNCORE_R2PCIE = 4,
  BDX_PCI_UNCORE_R3QPI = 5,
};

enum perf_uncore_iio_freerunning_type_id {
  SKX_IIO_MSR_IOCLK = 0,
  SKX_IIO_MSR_BW = 1,
  SKX_IIO_MSR_UTIL = 2,
  SKX_IIO_FREERUNNING_TYPE_MAX = 3,
};

enum {
  SKX_PCI_UNCORE_IMC = 0,
  SKX_PCI_UNCORE_M2M = 1,
  SKX_PCI_UNCORE_UPI = 2,
  SKX_PCI_UNCORE_M2PCIE = 3,
  SKX_PCI_UNCORE_M3UPI = 4,
};

enum perf_uncore_snr_iio_freerunning_type_id {
  SNR_IIO_MSR_IOCLK = 0,
  SNR_IIO_MSR_BW_IN = 1,
  SNR_IIO_FREERUNNING_TYPE_MAX = 2,
};

enum {
  SNR_PCI_UNCORE_M2M = 0,
  SNR_PCI_UNCORE_PCIE3 = 1,
};

enum perf_uncore_snr_imc_freerunning_type_id {
  SNR_IMC_DCLK = 0,
  SNR_IMC_DDR = 1,
  SNR_IMC_FREERUNNING_TYPE_MAX = 2,
};

enum perf_uncore_icx_iio_freerunning_type_id {
  ICX_IIO_MSR_IOCLK = 0,
  ICX_IIO_MSR_BW_IN = 1,
  ICX_IIO_FREERUNNING_TYPE_MAX = 2,
};

enum {
  ICX_PCI_UNCORE_M2M = 0,
  ICX_PCI_UNCORE_UPI = 1,
  ICX_PCI_UNCORE_M3UPI = 2,
};

enum perf_uncore_icx_imc_freerunning_type_id {
  ICX_IMC_DCLK = 0,
  ICX_IMC_DDR = 1,
  ICX_IMC_DDRT = 2,
  ICX_IMC_FREERUNNING_TYPE_MAX = 3,
};

struct cstate_model {
  long unsigned int core_events;
  long unsigned int pkg_events;
  long unsigned int quirks;
};

enum perf_cstate_core_events {
  PERF_CSTATE_CORE_C1_RES = 0,
  PERF_CSTATE_CORE_C3_RES = 1,
  PERF_CSTATE_CORE_C6_RES = 2,
  PERF_CSTATE_CORE_C7_RES = 3,
  PERF_CSTATE_CORE_EVENT_MAX = 4,
};

enum perf_cstate_pkg_events {
  PERF_CSTATE_PKG_C2_RES = 0,
  PERF_CSTATE_PKG_C3_RES = 1,
  PERF_CSTATE_PKG_C6_RES = 2,
  PERF_CSTATE_PKG_C7_RES = 3,
  PERF_CSTATE_PKG_C8_RES = 4,
  PERF_CSTATE_PKG_C9_RES = 5,
  PERF_CSTATE_PKG_C10_RES = 6,
  PERF_CSTATE_PKG_EVENT_MAX = 7,
};

struct trampoline_header {
  u64 start;
  u64 efer;
  u32 cr4;
  u32 flags;
};

struct pkru_state {
  u32 pkru;
  u32 pad;
};

enum show_regs_mode {
  SHOW_REGS_SHORT = 0,
  SHOW_REGS_USER = 1,
  SHOW_REGS_ALL = 2,
};

struct shared_info;

struct start_info;

enum which_selector {
  FS = 0,
  GS = 1,
};

struct sigcontext_64 {
  __u64 r8;
  __u64 r9;
  __u64 r10;
  __u64 r11;
  __u64 r12;
  __u64 r13;
  __u64 r14;
  __u64 r15;
  __u64 di;
  __u64 si;
  __u64 bp;
  __u64 bx;
  __u64 dx;
  __u64 ax;
  __u64 cx;
  __u64 sp;
  __u64 ip;
  __u64 flags;
  __u16 cs;
  __u16 gs;
  __u16 fs;
  __u16 ss;
  __u64 err;
  __u64 trapno;
  __u64 oldmask;
  __u64 cr2;
  __u64 fpstate;
  __u64 reserved1[8];
};

struct sigaltstack {
  void* ss_sp;
  int ss_flags;
  size_t ss_size;
};

typedef struct sigaltstack stack_t;

struct siginfo {
  union {
    struct {
      int si_signo;
      int si_errno;
      int si_code;
      union __sifields _sifields;
    };
    int _si_pad[32];
  };
};

struct ksignal {
  struct k_sigaction ka;
  kernel_siginfo_t info;
  int sig;
};

struct __large_struct {
  long unsigned int buf[100];
};

typedef u32 compat_sigset_word;

typedef struct {
  compat_sigset_word sig[2];
} compat_sigset_t;

struct ucontext {
  long unsigned int uc_flags;
  struct ucontext* uc_link;
  stack_t uc_stack;
  struct sigcontext_64 uc_mcontext;
  sigset_t uc_sigmask;
};

struct mce {
  __u64 status;
  __u64 misc;
  __u64 addr;
  __u64 mcgstatus;
  __u64 ip;
  __u64 tsc;
  __u64 time;
  __u8 cpuvendor;
  __u8 inject_flags;
  __u8 severity;
  __u8 pad;
  __u32 cpuid;
  __u8 cs;
  __u8 bank;
  __u8 cpu;
  __u8 finished;
  __u32 extcpu;
  __u32 socketid;
  __u32 apicid;
  __u64 mcgcap;
  __u64 synd;
  __u64 ipid;
  __u64 ppin;
  __u32 microcode;
  __u64 kflags;
};

typedef long unsigned int mce_banks_t[1];

struct smca_hwid {
  unsigned int bank_type;
  u32 hwid_mcatype;
  u8 count;
};

struct smca_bank {
  struct smca_hwid* hwid;
  u32 id;
  u8 sysfs_id;
};

struct kernel_vm86_regs {
  struct pt_regs pt;
  short unsigned int es;
  short unsigned int __esh;
  short unsigned int ds;
  short unsigned int __dsh;
  short unsigned int fs;
  short unsigned int __fsh;
  short unsigned int gs;
  short unsigned int __gsh;
};

struct rt_sigframe {
  char* pretcode;
  struct ucontext uc;
  struct siginfo info;
};

typedef struct siginfo siginfo_t;

typedef s32 compat_clock_t;

typedef s32 compat_pid_t;

typedef s32 compat_timer_t;

typedef s32 compat_int_t;

typedef u32 __compat_uid32_t;

union compat_sigval {
  compat_int_t sival_int;
  compat_uptr_t sival_ptr;
};

typedef union compat_sigval compat_sigval_t;

struct compat_siginfo {
  int si_signo;
  int si_errno;
  int si_code;
  union {
    int _pad[29];
    struct {
      compat_pid_t _pid;
      __compat_uid32_t _uid;
    } _kill;
    struct {
      compat_timer_t _tid;
      int _overrun;
      compat_sigval_t _sigval;
    } _timer;
    struct {
      compat_pid_t _pid;
      __compat_uid32_t _uid;
      compat_sigval_t _sigval;
    } _rt;
    struct {
      compat_pid_t _pid;
      __compat_uid32_t _uid;
      int _status;
      compat_clock_t _utime;
      compat_clock_t _stime;
    } _sigchld;
    struct {
      compat_uptr_t _addr;
      union {
        short int _addr_lsb;
        struct {
          char _dummy_bnd[4];
          compat_uptr_t _lower;
          compat_uptr_t _upper;
        } _addr_bnd;
        struct {
          char _dummy_pkey[4];
          u32 _pkey;
        } _addr_pkey;
      };
    } _sigfault;
    struct {
      compat_long_t _band;
      int _fd;
    } _sigpoll;
    struct {
      compat_uptr_t _call_addr;
      int _syscall;
      unsigned int _arch;
    } _sigsys;
  } _sifields;
};

typedef struct compat_siginfo compat_siginfo_t;

enum bug_trap_type {
  BUG_TRAP_TYPE_NONE = 0,
  BUG_TRAP_TYPE_WARN = 1,
  BUG_TRAP_TYPE_BUG = 2,
};

enum die_val {
  DIE_OOPS = 1,
  DIE_INT3 = 2,
  DIE_DEBUG = 3,
  DIE_PANIC = 4,
  DIE_NMI = 5,
  DIE_DIE = 6,
  DIE_KERNELDEBUG = 7,
  DIE_TRAP = 8,
  DIE_GPF = 9,
  DIE_CALL = 10,
  DIE_PAGE_FAULT = 11,
  DIE_NMIUNKNOWN = 12,
};

struct irqentry_state {
  union {
    bool exit_rcu;
    bool lockdep;
  };
};

typedef struct irqentry_state irqentry_state_t;

enum kernel_gp_hint {
  GP_NO_HINT = 0,
  GP_NON_CANONICAL = 1,
  GP_CANONICAL = 2,
};

struct bad_iret_stack {
  void* error_entry_ret;
  struct pt_regs regs;
};

struct mpc_intsrc {
  unsigned char type;
  unsigned char irqtype;
  short unsigned int irqflag;
  unsigned char srcbus;
  unsigned char srcbusirq;
  unsigned char dstapic;
  unsigned char dstirq;
};

enum irqreturn {
  IRQ_NONE = 0,
  IRQ_HANDLED = 1,
  IRQ_WAKE_THREAD = 2,
};

typedef enum irqreturn irqreturn_t;

typedef irqreturn_t (*irq_handler_t)(int, void*);

struct irqaction {
  irq_handler_t handler;
  void* dev_id;
  void* percpu_dev_id;
  struct irqaction* next;
  irq_handler_t thread_fn;
  struct task_struct* thread;
  struct irqaction* secondary;
  unsigned int irq;
  unsigned int flags;
  long unsigned int thread_flags;
  long unsigned int thread_mask;
  const char* name;
  struct proc_dir_entry* dir;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct irq_affinity_notify {
  unsigned int irq;
  struct kref kref;
  struct work_struct work;
  void (*notify)(struct irq_affinity_notify*, const cpumask_t*);
  void (*release)(struct kref*);
};

enum irqchip_irq_state {
  IRQCHIP_STATE_PENDING = 0,
  IRQCHIP_STATE_ACTIVE = 1,
  IRQCHIP_STATE_MASKED = 2,
  IRQCHIP_STATE_LINE_LEVEL = 3,
};

struct irq_desc___2;

typedef void (*irq_flow_handler_t)(struct irq_desc___2*);

struct msi_desc;

struct irq_common_data {
  unsigned int state_use_accessors;
  unsigned int node;
  void* handler_data;
  struct msi_desc* msi_desc;
  cpumask_var_t affinity;
  cpumask_var_t effective_affinity;
};

struct irq_chip;

struct irq_data {
  u32 mask;
  unsigned int irq;
  long unsigned int hwirq;
  struct irq_common_data* common;
  struct irq_chip* chip;
  struct irq_domain* domain;
  struct irq_data* parent_data;
  void* chip_data;
};

struct irq_desc___2 {
  struct irq_common_data irq_common_data;
  struct irq_data irq_data;
  unsigned int* kstat_irqs;
  irq_flow_handler_t handle_irq;
  struct irqaction* action;
  unsigned int status_use_accessors;
  unsigned int core_internal_state__do_not_mess_with_it;
  unsigned int depth;
  unsigned int wake_depth;
  unsigned int tot_count;
  unsigned int irq_count;
  long unsigned int last_unhandled;
  unsigned int irqs_unhandled;
  atomic_t threads_handled;
  int threads_handled_last;
  raw_spinlock_t lock;
  struct cpumask* percpu_enabled;
  const struct cpumask* percpu_affinity;
  const struct cpumask* affinity_hint;
  struct irq_affinity_notify* affinity_notify;
  cpumask_var_t pending_mask;
  long unsigned int threads_oneshot;
  atomic_t threads_active;
  wait_queue_head_t wait_for_threads;
  struct proc_dir_entry* dir;
  struct callback_head rcu;
  struct kobject kobj;
  struct mutex request_mutex;
  int parent_irq;
  struct module* owner;
  const char* name;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct msi_msg;

struct irq_chip {
  struct device* parent_device;
  const char* name;
  unsigned int (*irq_startup)(struct irq_data*);
  void (*irq_shutdown)(struct irq_data*);
  void (*irq_enable)(struct irq_data*);
  void (*irq_disable)(struct irq_data*);
  void (*irq_ack)(struct irq_data*);
  void (*irq_mask)(struct irq_data*);
  void (*irq_mask_ack)(struct irq_data*);
  void (*irq_unmask)(struct irq_data*);
  void (*irq_eoi)(struct irq_data*);
  int (*irq_set_affinity)(struct irq_data*, const struct cpumask*, bool);
  int (*irq_retrigger)(struct irq_data*);
  int (*irq_set_type)(struct irq_data*, unsigned int);
  int (*irq_set_wake)(struct irq_data*, unsigned int);
  void (*irq_bus_lock)(struct irq_data*);
  void (*irq_bus_sync_unlock)(struct irq_data*);
  void (*irq_cpu_online)(struct irq_data*);
  void (*irq_cpu_offline)(struct irq_data*);
  void (*irq_suspend)(struct irq_data*);
  void (*irq_resume)(struct irq_data*);
  void (*irq_pm_shutdown)(struct irq_data*);
  void (*irq_calc_mask)(struct irq_data*);
  void (*irq_print_chip)(struct irq_data*, struct seq_file*);
  int (*irq_request_resources)(struct irq_data*);
  void (*irq_release_resources)(struct irq_data*);
  void (*irq_compose_msi_msg)(struct irq_data*, struct msi_msg*);
  void (*irq_write_msi_msg)(struct irq_data*, struct msi_msg*);
  int (*irq_get_irqchip_state)(struct irq_data*, enum irqchip_irq_state, bool*);
  int (*irq_set_irqchip_state)(struct irq_data*, enum irqchip_irq_state, bool);
  int (*irq_set_vcpu_affinity)(struct irq_data*, void*);
  void (*ipi_send_single)(struct irq_data*, unsigned int);
  void (*ipi_send_mask)(struct irq_data*, const struct cpumask*);
  int (*irq_nmi_setup)(struct irq_data*);
  void (*irq_nmi_teardown)(struct irq_data*);
  long unsigned int flags;
};

typedef struct irq_desc___2* vector_irq_t___2[256];

struct trace_event_raw_x86_irq_vector {
  struct trace_entry ent;
  int vector;
  char __data[0];
};

struct trace_event_raw_vector_config {
  struct trace_entry ent;
  unsigned int irq;
  unsigned int vector;
  unsigned int cpu;
  unsigned int apicdest;
  char __data[0];
};

struct trace_event_raw_vector_mod {
  struct trace_entry ent;
  unsigned int irq;
  unsigned int vector;
  unsigned int cpu;
  unsigned int prev_vector;
  unsigned int prev_cpu;
  char __data[0];
};

struct trace_event_raw_vector_reserve {
  struct trace_entry ent;
  unsigned int irq;
  int ret;
  char __data[0];
};

struct trace_event_raw_vector_alloc {
  struct trace_entry ent;
  unsigned int irq;
  unsigned int vector;
  bool reserved;
  int ret;
  char __data[0];
};

struct trace_event_raw_vector_alloc_managed {
  struct trace_entry ent;
  unsigned int irq;
  unsigned int vector;
  int ret;
  char __data[0];
};

struct trace_event_raw_vector_activate {
  struct trace_entry ent;
  unsigned int irq;
  bool is_managed;
  bool can_reserve;
  bool reserve;
  char __data[0];
};

struct trace_event_raw_vector_teardown {
  struct trace_entry ent;
  unsigned int irq;
  bool is_managed;
  bool has_reserved;
  char __data[0];
};

struct trace_event_raw_vector_setup {
  struct trace_entry ent;
  unsigned int irq;
  bool is_legacy;
  int ret;
  char __data[0];
};

struct trace_event_raw_vector_free_moved {
  struct trace_entry ent;
  unsigned int irq;
  unsigned int cpu;
  unsigned int vector;
  bool is_managed;
  char __data[0];
};

struct trace_event_data_offsets_x86_irq_vector {};

struct trace_event_data_offsets_vector_config {};

struct trace_event_data_offsets_vector_mod {};

struct trace_event_data_offsets_vector_reserve {};

struct trace_event_data_offsets_vector_alloc {};

struct trace_event_data_offsets_vector_alloc_managed {};

struct trace_event_data_offsets_vector_activate {};

struct trace_event_data_offsets_vector_teardown {};

struct trace_event_data_offsets_vector_setup {};

struct trace_event_data_offsets_vector_free_moved {};

typedef void (*btf_trace_local_timer_entry)(void*, int);

typedef void (*btf_trace_local_timer_exit)(void*, int);

typedef void (*btf_trace_spurious_apic_entry)(void*, int);

typedef void (*btf_trace_spurious_apic_exit)(void*, int);

typedef void (*btf_trace_error_apic_entry)(void*, int);

typedef void (*btf_trace_error_apic_exit)(void*, int);

typedef void (*btf_trace_x86_platform_ipi_entry)(void*, int);

typedef void (*btf_trace_x86_platform_ipi_exit)(void*, int);

typedef void (*btf_trace_irq_work_entry)(void*, int);

typedef void (*btf_trace_irq_work_exit)(void*, int);

typedef void (*btf_trace_reschedule_entry)(void*, int);

typedef void (*btf_trace_reschedule_exit)(void*, int);

typedef void (*btf_trace_call_function_entry)(void*, int);

typedef void (*btf_trace_call_function_exit)(void*, int);

typedef void (*btf_trace_call_function_single_entry)(void*, int);

typedef void (*btf_trace_call_function_single_exit)(void*, int);

typedef void (*btf_trace_threshold_apic_entry)(void*, int);

typedef void (*btf_trace_threshold_apic_exit)(void*, int);

typedef void (*btf_trace_deferred_error_apic_entry)(void*, int);

typedef void (*btf_trace_deferred_error_apic_exit)(void*, int);

typedef void (*btf_trace_thermal_apic_entry)(void*, int);

typedef void (*btf_trace_thermal_apic_exit)(void*, int);

typedef void (*btf_trace_vector_config)(
    void*,
    unsigned int,
    unsigned int,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_vector_update)(
    void*,
    unsigned int,
    unsigned int,
    unsigned int,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_vector_clear)(
    void*,
    unsigned int,
    unsigned int,
    unsigned int,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_vector_reserve_managed)(void*, unsigned int, int);

typedef void (*btf_trace_vector_reserve)(void*, unsigned int, int);

typedef void (
    *btf_trace_vector_alloc)(void*, unsigned int, unsigned int, bool, int);

typedef void (
    *btf_trace_vector_alloc_managed)(void*, unsigned int, unsigned int, int);

typedef void (
    *btf_trace_vector_activate)(void*, unsigned int, bool, bool, bool);

typedef void (
    *btf_trace_vector_deactivate)(void*, unsigned int, bool, bool, bool);

typedef void (*btf_trace_vector_teardown)(void*, unsigned int, bool, bool);

typedef void (*btf_trace_vector_setup)(void*, unsigned int, bool, int);

typedef void (*btf_trace_vector_free_moved)(
    void*,
    unsigned int,
    unsigned int,
    unsigned int,
    bool);

struct irq_stack {
  char stack[16384];
};

struct estack_pages {
  u32 offs;
  u16 size;
  u16 type;
};

struct clocksource {
  u64 (*read)(struct clocksource*);
  u64 mask;
  u32 mult;
  u32 shift;
  u64 max_idle_ns;
  u32 maxadj;
  u64 max_cycles;
  const char* name;
  struct list_head list;
  int rating;
  enum vdso_clock_mode vdso_clock_mode;
  long unsigned int flags;
  int (*enable)(struct clocksource*);
  void (*disable)(struct clocksource*);
  void (*suspend)(struct clocksource*);
  void (*resume)(struct clocksource*);
  void (*mark_unstable)(struct clocksource*);
  void (*tick_stable)(struct clocksource*);
  struct list_head wd_list;
  u64 cs_last;
  u64 wd_last;
  struct module* owner;
};

enum clock_event_state {
  CLOCK_EVT_STATE_DETACHED = 0,
  CLOCK_EVT_STATE_SHUTDOWN = 1,
  CLOCK_EVT_STATE_PERIODIC = 2,
  CLOCK_EVT_STATE_ONESHOT = 3,
  CLOCK_EVT_STATE_ONESHOT_STOPPED = 4,
};

struct clock_event_device {
  void (*event_handler)(struct clock_event_device*);
  int (*set_next_event)(long unsigned int, struct clock_event_device*);
  int (*set_next_ktime)(ktime_t, struct clock_event_device*);
  ktime_t next_event;
  u64 max_delta_ns;
  u64 min_delta_ns;
  u32 mult;
  u32 shift;
  enum clock_event_state state_use_accessors;
  unsigned int features;
  long unsigned int retries;
  int (*set_state_periodic)(struct clock_event_device*);
  int (*set_state_oneshot)(struct clock_event_device*);
  int (*set_state_oneshot_stopped)(struct clock_event_device*);
  int (*set_state_shutdown)(struct clock_event_device*);
  int (*tick_resume)(struct clock_event_device*);
  void (*broadcast)(const struct cpumask*);
  void (*suspend)(struct clock_event_device*);
  void (*resume)(struct clock_event_device*);
  long unsigned int min_delta_ticks;
  long unsigned int max_delta_ticks;
  const char* name;
  int rating;
  int irq;
  int bound_on;
  const struct cpumask* cpumask;
  struct list_head list;
  struct module* owner;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct irq_affinity_desc {
  struct cpumask mask;
  unsigned int is_managed : 1;
};

struct x86_msi_addr_lo {
  union {
    struct {
      u32 reserved_0 : 2;
      u32 dest_mode_logical : 1;
      u32 redirect_hint : 1;
      u32 reserved_1 : 1;
      u32 virt_destid_8_14 : 7;
      u32 destid_0_7 : 8;
      u32 base_address : 12;
    };
    struct {
      u32 dmar_reserved_0 : 2;
      u32 dmar_index_15 : 1;
      u32 dmar_subhandle_valid : 1;
      u32 dmar_format : 1;
      u32 dmar_index_0_14 : 15;
      u32 dmar_base_address : 12;
    };
  };
};

typedef struct x86_msi_addr_lo arch_msi_msg_addr_lo_t;

struct x86_msi_addr_hi {
  u32 reserved : 8;
  u32 destid_8_31 : 24;
};

typedef struct x86_msi_addr_hi arch_msi_msg_addr_hi_t;

struct x86_msi_data {
  u32 vector : 8;
  u32 delivery_mode : 3;
  u32 dest_mode_logical : 1;
  u32 reserved : 2;
  u32 active_low : 1;
  u32 is_level : 1;
  u32 dmar_subhandle;
} __attribute__((packed));

typedef struct x86_msi_data arch_msi_msg_data_t;

struct msi_msg {
  union {
    u32 address_lo;
    arch_msi_msg_addr_lo_t arch_addr_lo;
  };
  union {
    u32 address_hi;
    arch_msi_msg_addr_hi_t arch_addr_hi;
  };
  union {
    u32 data;
    arch_msi_msg_data_t arch_data;
  };
};

struct platform_msi_priv_data;

struct platform_msi_desc {
  struct platform_msi_priv_data* msi_priv_data;
  u16 msi_index;
};

struct fsl_mc_msi_desc {
  u16 msi_index;
};

struct ti_sci_inta_msi_desc {
  u16 dev_index;
};

struct msi_desc {
  struct list_head list;
  unsigned int irq;
  unsigned int nvec_used;
  struct device* dev;
  struct msi_msg msg;
  struct irq_affinity_desc* affinity;
  const void* iommu_cookie;
  void (*write_msi_msg)(struct msi_desc*, void*);
  void* write_msi_msg_data;
  union {
    struct {
      u32 masked;
      struct {
        u8 is_msix : 1;
        u8 multiple : 3;
        u8 multi_cap : 3;
        u8 maskbit : 1;
        u8 is_64 : 1;
        u8 is_virtual : 1;
        u16 entry_nr;
        unsigned int default_irq;
      } msi_attrib;
      union {
        u8 mask_pos;
        void* mask_base;
      };
    };
    struct platform_msi_desc platform;
    struct fsl_mc_msi_desc fsl_mc;
    struct ti_sci_inta_msi_desc inta;
  };
};

struct irq_chip_regs {
  long unsigned int enable;
  long unsigned int disable;
  long unsigned int mask;
  long unsigned int ack;
  long unsigned int eoi;
  long unsigned int type;
  long unsigned int polarity;
};

struct irq_chip_type {
  struct irq_chip chip;
  struct irq_chip_regs regs;
  irq_flow_handler_t handler;
  u32 type;
  u32 mask_cache_priv;
  u32* mask_cache;
};

struct irq_chip_generic {
  raw_spinlock_t lock;
  void* reg_base;
  u32 (*reg_readl)(void*);
  void (*reg_writel)(u32, void*);
  void (*suspend)(struct irq_chip_generic*);
  void (*resume)(struct irq_chip_generic*);
  unsigned int irq_base;
  unsigned int irq_cnt;
  u32 mask_cache;
  u32 type_cache;
  u32 polarity_cache;
  u32 wake_enabled;
  u32 wake_active;
  unsigned int num_ct;
  void* private;
  long unsigned int installed;
  long unsigned int unused;
  struct irq_domain* domain;
  struct list_head list;
  struct irq_chip_type chip_types[0];
};

enum irq_gc_flags {
  IRQ_GC_INIT_MASK_CACHE = 1,
  IRQ_GC_INIT_NESTED_LOCK = 2,
  IRQ_GC_MASK_CACHE_PER_TYPE = 4,
  IRQ_GC_NO_MASK = 8,
  IRQ_GC_BE_IO = 16,
};

struct irq_domain_chip_generic {
  unsigned int irqs_per_chip;
  unsigned int num_chips;
  unsigned int irq_flags_to_clear;
  unsigned int irq_flags_to_set;
  enum irq_gc_flags gc_flags;
  struct irq_chip_generic* gc[0];
};

struct legacy_pic {
  int nr_legacy_irqs;
  struct irq_chip* chip;
  void (*mask)(unsigned int);
  void (*unmask)(unsigned int);
  void (*mask_all)();
  void (*restore_mask)();
  void (*init)(int);
  int (*probe)();
  int (*irq_pending)(unsigned int);
  void (*make_irq)(unsigned int);
};

enum lockdown_reason {
  LOCKDOWN_NONE = 0,
  LOCKDOWN_MODULE_SIGNATURE = 1,
  LOCKDOWN_DEV_MEM = 2,
  LOCKDOWN_EFI_TEST = 3,
  LOCKDOWN_KEXEC = 4,
  LOCKDOWN_HIBERNATION = 5,
  LOCKDOWN_PCI_ACCESS = 6,
  LOCKDOWN_IOPORT = 7,
  LOCKDOWN_MSR = 8,
  LOCKDOWN_ACPI_TABLES = 9,
  LOCKDOWN_PCMCIA_CIS = 10,
  LOCKDOWN_TIOCSSERIAL = 11,
  LOCKDOWN_MODULE_PARAMETERS = 12,
  LOCKDOWN_MMIOTRACE = 13,
  LOCKDOWN_DEBUGFS = 14,
  LOCKDOWN_XMON_WR = 15,
  LOCKDOWN_BPF_WRITE_USER = 16,
  LOCKDOWN_INTEGRITY_MAX = 17,
  LOCKDOWN_KCORE = 18,
  LOCKDOWN_KPROBES = 19,
  LOCKDOWN_BPF_READ_KERNEL = 20,
  LOCKDOWN_PERF = 21,
  LOCKDOWN_TRACEFS = 22,
  LOCKDOWN_XMON_RW = 23,
  LOCKDOWN_XFRM_SECRET = 24,
  LOCKDOWN_CONFIDENTIALITY_MAX = 25,
};

enum lockdep_ok {
  LOCKDEP_STILL_OK = 0,
  LOCKDEP_NOW_UNRELIABLE = 1,
};

typedef long unsigned int uintptr_t;

struct machine_ops {
  void (*restart)(char*);
  void (*halt)();
  void (*power_off)();
  void (*shutdown)();
  void (*crash_shutdown)(struct pt_regs*);
  void (*emergency_restart)();
};

struct trace_event_raw_nmi_handler {
  struct trace_entry ent;
  void* handler;
  s64 delta_ns;
  int handled;
  char __data[0];
};

struct trace_event_data_offsets_nmi_handler {};

typedef void (*btf_trace_nmi_handler)(void*, void*, s64, int);

struct nmi_desc {
  raw_spinlock_t lock;
  struct list_head head;
};

struct nmi_stats {
  unsigned int normal;
  unsigned int unknown;
  unsigned int external;
  unsigned int swallow;
};

enum nmi_states {
  NMI_NOT_RUNNING = 0,
  NMI_EXECUTING = 1,
  NMI_LATCHED = 2,
};

enum {
  DESC_TSS = 9,
  DESC_LDT = 2,
  DESCTYPE_S = 16,
};

struct ldttss_desc {
  u16 limit0;
  u16 base0;
  u16 base1 : 8;
  u16 type : 5;
  u16 dpl : 2;
  u16 p : 1;
  u16 limit1 : 4;
  u16 zero0 : 3;
  u16 g : 1;
  u16 base2 : 8;
  u32 base3;
  u32 zero1;
};

typedef struct ldttss_desc ldt_desc;

struct user_desc {
  unsigned int entry_number;
  unsigned int base_addr;
  unsigned int limit;
  unsigned int seg_32bit : 1;
  unsigned int contents : 2;
  unsigned int read_exec_only : 1;
  unsigned int limit_in_pages : 1;
  unsigned int seg_not_present : 1;
  unsigned int useable : 1;
  unsigned int lm : 1;
};

struct hvm_start_info {
  uint32_t magic;
  uint32_t version;
  uint32_t flags;
  uint32_t nr_modules;
  uint64_t modlist_paddr;
  uint64_t cmdline_paddr;
  uint64_t rsdp_paddr;
  uint64_t memmap_paddr;
  uint32_t memmap_entries;
  uint32_t reserved;
};

struct balloon_stats {
  long unsigned int current_pages;
  long unsigned int target_pages;
  long unsigned int target_unpopulated;
  long unsigned int balloon_low;
  long unsigned int balloon_high;
  long unsigned int total_pages;
  long unsigned int schedule_delay;
  long unsigned int max_schedule_delay;
  long unsigned int retry_count;
  long unsigned int max_retry_count;
};

struct setup_data {
  __u64 next;
  __u32 type;
  __u32 len;
  __u8 data[0];
};

struct setup_indirect {
  __u32 type;
  __u32 reserved;
  __u64 len;
  __u64 addr;
};

struct scatterlist {
  long unsigned int page_link;
  unsigned int offset;
  unsigned int length;
  dma_addr_t dma_address;
  unsigned int dma_length;
};

struct sg_table {
  struct scatterlist* sgl;
  unsigned int nents;
  unsigned int orig_nents;
};

enum swiotlb_force {
  SWIOTLB_NORMAL = 0,
  SWIOTLB_FORCE = 1,
  SWIOTLB_NO_FORCE = 2,
};

enum efi_secureboot_mode {
  efi_secureboot_mode_unset = 0,
  efi_secureboot_mode_unknown = 1,
  efi_secureboot_mode_disabled = 2,
  efi_secureboot_mode_enabled = 3,
};

struct acpi_table_ibft {
  struct acpi_table_header header;
  u8 reserved[12];
};

struct hstate {
  int next_nid_to_alloc;
  int next_nid_to_free;
  unsigned int order;
  long unsigned int mask;
  long unsigned int max_huge_pages;
  long unsigned int nr_huge_pages;
  long unsigned int free_huge_pages;
  long unsigned int resv_huge_pages;
  long unsigned int surplus_huge_pages;
  long unsigned int nr_overcommit_huge_pages;
  struct list_head hugepage_activelist;
  struct list_head hugepage_freelists[8];
  unsigned int nr_huge_pages_node[8];
  unsigned int free_huge_pages_node[8];
  unsigned int surplus_huge_pages_node[8];
  struct cftype cgroup_files_dfl[7];
  struct cftype cgroup_files_legacy[9];
  char name[32];
};

enum xen_domain_type {
  XEN_NATIVE = 0,
  XEN_PV_DOMAIN = 1,
  XEN_HVM_DOMAIN = 2,
};

enum x86_hypervisor_type {
  X86_HYPER_NATIVE = 0,
  X86_HYPER_VMWARE = 1,
  X86_HYPER_MS_HYPERV = 2,
  X86_HYPER_XEN_PV = 3,
  X86_HYPER_XEN_HVM = 4,
  X86_HYPER_KVM = 5,
  X86_HYPER_JAILHOUSE = 6,
  X86_HYPER_ACRN = 7,
};

struct hypervisor_x86 {
  const char* name;
  uint32_t (*detect)();
  enum x86_hypervisor_type type;
  struct x86_hyper_init init;
  struct x86_hyper_runtime runtime;
  bool ignore_nopv;
};

struct msi_controller {
  struct module* owner;
  struct device* dev;
  struct device_node* of_node;
  struct list_head list;
  int (*setup_irq)(struct msi_controller*, struct pci_dev*, struct msi_desc*);
  int (*setup_irqs)(struct msi_controller*, struct pci_dev*, int, int);
  void (*teardown_irq)(struct msi_controller*, unsigned int);
};

struct pci_raw_ops {
  int (*read)(unsigned int, unsigned int, unsigned int, int, int, u32*);
  int (*write)(unsigned int, unsigned int, unsigned int, int, int, u32);
};

struct clock_event_device___2;

struct syscore_ops {
  struct list_head node;
  int (*suspend)();
  void (*resume)();
  void (*shutdown)();
};

enum jump_label_type {
  JUMP_LABEL_NOP = 0,
  JUMP_LABEL_JMP = 1,
};

union text_poke_insn {
  u8 text[5];
  struct {
    u8 opcode;
    s32 disp;
  } __attribute__((packed));
};

enum {
  JL_STATE_START = 0,
  JL_STATE_NO_UPDATE = 1,
  JL_STATE_UPDATE = 2,
};

typedef short unsigned int __kernel_old_uid_t;

typedef short unsigned int __kernel_old_gid_t;

typedef struct {
  int val[2];
} __kernel_fsid_t;

typedef __kernel_old_uid_t old_uid_t;

typedef __kernel_old_gid_t old_gid_t;

struct kernel_clone_args {
  u64 flags;
  int* pidfd;
  int* child_tid;
  int* parent_tid;
  int exit_signal;
  long unsigned int stack;
  long unsigned int stack_size;
  long unsigned int tls;
  pid_t* set_tid;
  size_t set_tid_size;
  int cgroup;
  int io_thread;
  struct cgroup* cgrp;
  struct css_set* cset;
};

struct kstatfs {
  long int f_type;
  long int f_bsize;
  u64 f_blocks;
  u64 f_bfree;
  u64 f_bavail;
  u64 f_files;
  u64 f_ffree;
  __kernel_fsid_t f_fsid;
  long int f_namelen;
  long int f_frsize;
  long int f_flags;
  long int f_spare[4];
};

struct stat64 {
  long long unsigned int st_dev;
  unsigned char __pad0[4];
  unsigned int __st_ino;
  unsigned int st_mode;
  unsigned int st_nlink;
  unsigned int st_uid;
  unsigned int st_gid;
  long long unsigned int st_rdev;
  unsigned char __pad3[4];
  long long int st_size;
  unsigned int st_blksize;
  long long int st_blocks;
  unsigned int st_atime;
  unsigned int st_atime_nsec;
  unsigned int st_mtime;
  unsigned int st_mtime_nsec;
  unsigned int st_ctime;
  unsigned int st_ctime_nsec;
  long long unsigned int st_ino;
} __attribute__((packed));

struct mmap_arg_struct32 {
  unsigned int addr;
  unsigned int len;
  unsigned int prot;
  unsigned int flags;
  unsigned int fd;
  unsigned int offset;
};

struct vm_unmapped_area_info {
  long unsigned int flags;
  long unsigned int length;
  long unsigned int low_limit;
  long unsigned int high_limit;
  long unsigned int align_mask;
  long unsigned int align_offset;
};

enum align_flags {
  ALIGN_VA_32 = 1,
  ALIGN_VA_64 = 2,
};

enum {
  MEMREMAP_WB = 1,
  MEMREMAP_WT = 2,
  MEMREMAP_WC = 4,
  MEMREMAP_ENC = 8,
  MEMREMAP_DEC = 16,
};

enum {
  IORES_DESC_NONE = 0,
  IORES_DESC_CRASH_KERNEL = 1,
  IORES_DESC_ACPI_TABLES = 2,
  IORES_DESC_ACPI_NV_STORAGE = 3,
  IORES_DESC_PERSISTENT_MEMORY = 4,
  IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
  IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
  IORES_DESC_RESERVED = 7,
  IORES_DESC_SOFT_RESERVED = 8,
};

struct change_member {
  struct e820_entry* entry;
  long long unsigned int addr;
};

struct iommu_fault_param;

struct iommu_fwspec;

struct dev_iommu {
  struct mutex lock;
  struct iommu_fault_param* fault_param;
  struct iommu_fwspec* fwspec;
  struct iommu_device* iommu_dev;
  void* priv;
};

struct of_phandle_args {
  struct device_node* np;
  int args_count;
  uint32_t args[16];
};

struct iommu_fault_unrecoverable {
  __u32 reason;
  __u32 flags;
  __u32 pasid;
  __u32 perm;
  __u64 addr;
  __u64 fetch_addr;
};

struct iommu_fault_page_request {
  __u32 flags;
  __u32 pasid;
  __u32 grpid;
  __u32 perm;
  __u64 addr;
  __u64 private_data[2];
};

struct iommu_fault {
  __u32 type;
  __u32 padding;
  union {
    struct iommu_fault_unrecoverable event;
    struct iommu_fault_page_request prm;
    __u8 padding2[56];
  };
};

struct iommu_page_response {
  __u32 argsz;
  __u32 version;
  __u32 flags;
  __u32 pasid;
  __u32 grpid;
  __u32 code;
};

struct iommu_inv_addr_info {
  __u32 flags;
  __u32 archid;
  __u64 pasid;
  __u64 addr;
  __u64 granule_size;
  __u64 nb_granules;
};

struct iommu_inv_pasid_info {
  __u32 flags;
  __u32 archid;
  __u64 pasid;
};

struct iommu_cache_invalidate_info {
  __u32 argsz;
  __u32 version;
  __u8 cache;
  __u8 granularity;
  __u8 padding[6];
  union {
    struct iommu_inv_pasid_info pasid_info;
    struct iommu_inv_addr_info addr_info;
  } granu;
};

struct iommu_gpasid_bind_data_vtd {
  __u64 flags;
  __u32 pat;
  __u32 emt;
};

struct iommu_gpasid_bind_data {
  __u32 argsz;
  __u32 version;
  __u32 format;
  __u32 addr_width;
  __u64 flags;
  __u64 gpgd;
  __u64 hpasid;
  __u64 gpasid;
  __u8 padding[8];
  union {
    struct iommu_gpasid_bind_data_vtd vtd;
  } vendor;
};

typedef int (*iommu_fault_handler_t)(
    struct iommu_domain*,
    struct device*,
    long unsigned int,
    int,
    void*);

struct iommu_domain_geometry {
  dma_addr_t aperture_start;
  dma_addr_t aperture_end;
  bool force_aperture;
};

struct iommu_domain {
  unsigned int type;
  const struct iommu_ops* ops;
  long unsigned int pgsize_bitmap;
  iommu_fault_handler_t handler;
  void* handler_token;
  struct iommu_domain_geometry geometry;
  void* iova_cookie;
};

typedef int (*iommu_dev_fault_handler_t)(struct iommu_fault*, void*);

enum iommu_resv_type {
  IOMMU_RESV_DIRECT = 0,
  IOMMU_RESV_DIRECT_RELAXABLE = 1,
  IOMMU_RESV_RESERVED = 2,
  IOMMU_RESV_MSI = 3,
  IOMMU_RESV_SW_MSI = 4,
};

struct iommu_resv_region {
  struct list_head list;
  phys_addr_t start;
  size_t length;
  int prot;
  enum iommu_resv_type type;
};

struct iommu_iotlb_gather {
  long unsigned int start;
  long unsigned int end;
  size_t pgsize;
  struct page* freelist;
};

struct iommu_device {
  struct list_head list;
  const struct iommu_ops* ops;
  struct fwnode_handle* fwnode;
  struct device* dev;
};

struct iommu_sva {
  struct device* dev;
};

struct iommu_fault_event {
  struct iommu_fault fault;
  struct list_head list;
};

struct iommu_fault_param {
  iommu_dev_fault_handler_t handler;
  void* data;
  struct list_head faults;
  struct mutex lock;
};

struct iommu_fwspec {
  const struct iommu_ops* ops;
  struct fwnode_handle* iommu_fwnode;
  u32 flags;
  u32 num_pasid_bits;
  unsigned int num_ids;
  u32 ids[0];
};

struct iommu_table_entry {
  initcall_t detect;
  initcall_t depend;
  void (*early_init)();
  void (*late_init)();
  int flags;
};

enum dmi_field {
  DMI_NONE = 0,
  DMI_BIOS_VENDOR = 1,
  DMI_BIOS_VERSION = 2,
  DMI_BIOS_DATE = 3,
  DMI_BIOS_RELEASE = 4,
  DMI_EC_FIRMWARE_RELEASE = 5,
  DMI_SYS_VENDOR = 6,
  DMI_PRODUCT_NAME = 7,
  DMI_PRODUCT_VERSION = 8,
  DMI_PRODUCT_SERIAL = 9,
  DMI_PRODUCT_UUID = 10,
  DMI_PRODUCT_SKU = 11,
  DMI_PRODUCT_FAMILY = 12,
  DMI_BOARD_VENDOR = 13,
  DMI_BOARD_NAME = 14,
  DMI_BOARD_VERSION = 15,
  DMI_BOARD_SERIAL = 16,
  DMI_BOARD_ASSET_TAG = 17,
  DMI_CHASSIS_VENDOR = 18,
  DMI_CHASSIS_TYPE = 19,
  DMI_CHASSIS_VERSION = 20,
  DMI_CHASSIS_SERIAL = 21,
  DMI_CHASSIS_ASSET_TAG = 22,
  DMI_STRING_MAX = 23,
  DMI_OEM_STRING = 24,
};

enum {
  NONE_FORCE_HPET_RESUME = 0,
  OLD_ICH_FORCE_HPET_RESUME = 1,
  ICH_FORCE_HPET_RESUME = 2,
  VT8237_FORCE_HPET_RESUME = 3,
  NVIDIA_FORCE_HPET_RESUME = 4,
  ATI_FORCE_HPET_RESUME = 5,
};

enum meminit_context {
  MEMINIT_EARLY = 0,
  MEMINIT_HOTPLUG = 1,
};

struct cpu {
  int node_id;
  int hotpluggable;
  struct device dev;
};

struct x86_cpu {
  struct cpu cpu;
};

typedef int (*cmp_func_t)(const void*, const void*);

struct die_args {
  struct pt_regs* regs;
  const char* str;
  long int err;
  int trapnr;
  int signr;
};

struct smp_alt_module {
  struct module* mod;
  char* name;
  const s32* locks;
  const s32* locks_end;
  u8* text;
  u8* text_end;
  struct list_head next;
};

typedef struct {
  struct mm_struct* mm;
} temp_mm_state_t;

struct text_poke_loc {
  s32 rel_addr;
  s32 rel32;
  u8 opcode;
  const u8 text[5];
  u8 old;
};

struct bp_patching_desc {
  struct text_poke_loc* vec;
  int nr_entries;
  atomic_t refs;
};

enum {
  HW_BREAKPOINT_LEN_1 = 1,
  HW_BREAKPOINT_LEN_2 = 2,
  HW_BREAKPOINT_LEN_3 = 3,
  HW_BREAKPOINT_LEN_4 = 4,
  HW_BREAKPOINT_LEN_5 = 5,
  HW_BREAKPOINT_LEN_6 = 6,
  HW_BREAKPOINT_LEN_7 = 7,
  HW_BREAKPOINT_LEN_8 = 8,
};

enum {
  HW_BREAKPOINT_EMPTY = 0,
  HW_BREAKPOINT_R = 1,
  HW_BREAKPOINT_W = 2,
  HW_BREAKPOINT_RW = 3,
  HW_BREAKPOINT_X = 4,
  HW_BREAKPOINT_INVALID = 7,
};

typedef unsigned int u_int;

typedef long long unsigned int cycles_t;

struct system_counterval_t {
  u64 cycles;
  struct clocksource* cs;
};

enum {
  WORK_STRUCT_PENDING_BIT = 0,
  WORK_STRUCT_DELAYED_BIT = 1,
  WORK_STRUCT_PWQ_BIT = 2,
  WORK_STRUCT_LINKED_BIT = 3,
  WORK_STRUCT_COLOR_SHIFT = 4,
  WORK_STRUCT_COLOR_BITS = 4,
  WORK_STRUCT_PENDING = 1,
  WORK_STRUCT_DELAYED = 2,
  WORK_STRUCT_PWQ = 4,
  WORK_STRUCT_LINKED = 8,
  WORK_STRUCT_STATIC = 0,
  WORK_NR_COLORS = 15,
  WORK_NO_COLOR = 15,
  WORK_CPU_UNBOUND = 128,
  WORK_STRUCT_FLAG_BITS = 8,
  WORK_OFFQ_FLAG_BASE = 4,
  __WORK_OFFQ_CANCELING = 4,
  WORK_OFFQ_CANCELING = 16,
  WORK_OFFQ_FLAG_BITS = 1,
  WORK_OFFQ_POOL_SHIFT = 5,
  WORK_OFFQ_LEFT = 59,
  WORK_OFFQ_POOL_BITS = 31,
  WORK_OFFQ_POOL_NONE = 2147483647,
  WORK_STRUCT_FLAG_MASK = 255,
  WORK_STRUCT_WQ_DATA_MASK = 4294967040,
  WORK_STRUCT_NO_POOL = 4294967264,
  WORK_BUSY_PENDING = 1,
  WORK_BUSY_RUNNING = 2,
  WORKER_DESC_LEN = 24,
};

struct plist_head {
  struct list_head node_list;
};

typedef struct {
  seqcount_t seqcount;
} seqcount_latch_t;

enum pm_qos_type {
  PM_QOS_UNITIALIZED = 0,
  PM_QOS_MAX = 1,
  PM_QOS_MIN = 2,
};

struct pm_qos_constraints {
  struct plist_head list;
  s32 target_value;
  s32 default_value;
  s32 no_constraint_value;
  enum pm_qos_type type;
  struct blocking_notifier_head* notifiers;
};

struct freq_constraints {
  struct pm_qos_constraints min_freq;
  struct blocking_notifier_head min_freq_notifiers;
  struct pm_qos_constraints max_freq;
  struct blocking_notifier_head max_freq_notifiers;
};

struct pm_qos_flags {
  struct list_head list;
  s32 effective_flags;
};

struct dev_pm_qos_request;

struct dev_pm_qos {
  struct pm_qos_constraints resume_latency;
  struct pm_qos_constraints latency_tolerance;
  struct freq_constraints freq;
  struct pm_qos_flags flags;
  struct dev_pm_qos_request* resume_latency_req;
  struct dev_pm_qos_request* latency_tolerance_req;
  struct dev_pm_qos_request* flags_req;
};

struct pm_qos_flags_request {
  struct list_head node;
  s32 flags;
};

enum freq_qos_req_type {
  FREQ_QOS_MIN = 1,
  FREQ_QOS_MAX = 2,
};

struct freq_qos_request {
  enum freq_qos_req_type type;
  struct plist_node pnode;
  struct freq_constraints* qos;
};

enum dev_pm_qos_req_type {
  DEV_PM_QOS_RESUME_LATENCY = 1,
  DEV_PM_QOS_LATENCY_TOLERANCE = 2,
  DEV_PM_QOS_MIN_FREQUENCY = 3,
  DEV_PM_QOS_MAX_FREQUENCY = 4,
  DEV_PM_QOS_FLAGS = 5,
};

struct dev_pm_qos_request {
  enum dev_pm_qos_req_type type;
  union {
    struct plist_node pnode;
    struct pm_qos_flags_request flr;
    struct freq_qos_request freq;
  } data;
  struct device* dev;
};

enum cpufreq_table_sorting {
  CPUFREQ_TABLE_UNSORTED = 0,
  CPUFREQ_TABLE_SORTED_ASCENDING = 1,
  CPUFREQ_TABLE_SORTED_DESCENDING = 2,
};

struct cpufreq_cpuinfo {
  unsigned int max_freq;
  unsigned int min_freq;
  unsigned int transition_latency;
};

struct clk;

struct cpufreq_governor;

struct cpufreq_frequency_table;

struct cpufreq_stats;

struct thermal_cooling_device;

struct cpufreq_policy {
  cpumask_var_t cpus;
  cpumask_var_t related_cpus;
  cpumask_var_t real_cpus;
  unsigned int shared_type;
  unsigned int cpu;
  struct clk* clk;
  struct cpufreq_cpuinfo cpuinfo;
  unsigned int min;
  unsigned int max;
  unsigned int cur;
  unsigned int suspend_freq;
  unsigned int policy;
  unsigned int last_policy;
  struct cpufreq_governor* governor;
  void* governor_data;
  char last_governor[16];
  struct work_struct update;
  struct freq_constraints constraints;
  struct freq_qos_request* min_freq_req;
  struct freq_qos_request* max_freq_req;
  struct cpufreq_frequency_table* freq_table;
  enum cpufreq_table_sorting freq_table_sorted;
  struct list_head policy_list;
  struct kobject kobj;
  struct completion kobj_unregister;
  struct rw_semaphore rwsem;
  bool fast_switch_possible;
  bool fast_switch_enabled;
  bool strict_target;
  unsigned int transition_delay_us;
  bool dvfs_possible_from_any_cpu;
  unsigned int cached_target_freq;
  unsigned int cached_resolved_idx;
  bool transition_ongoing;
  spinlock_t transition_lock;
  wait_queue_head_t transition_wait;
  struct task_struct* transition_task;
  struct cpufreq_stats* stats;
  void* driver_data;
  struct thermal_cooling_device* cdev;
  struct notifier_block nb_min;
  struct notifier_block nb_max;
};

struct cpufreq_governor {
  char name[16];
  int (*init)(struct cpufreq_policy*);
  void (*exit)(struct cpufreq_policy*);
  int (*start)(struct cpufreq_policy*);
  void (*stop)(struct cpufreq_policy*);
  void (*limits)(struct cpufreq_policy*);
  ssize_t (*show_setspeed)(struct cpufreq_policy*, char*);
  int (*store_setspeed)(struct cpufreq_policy*, unsigned int);
  struct list_head governor_list;
  struct module* owner;
  u8 flags;
};

struct cpufreq_frequency_table {
  unsigned int flags;
  unsigned int driver_data;
  unsigned int frequency;
};

struct cpufreq_freqs {
  struct cpufreq_policy* policy;
  unsigned int old;
  unsigned int new;
  u8 flags;
};

struct freq_attr {
  struct attribute attr;
  ssize_t (*show)(struct cpufreq_policy*, char*);
  ssize_t (*store)(struct cpufreq_policy*, const char*, size_t);
};

struct cyc2ns {
  struct cyc2ns_data data[2];
  seqcount_latch_t seq;
};

struct muldiv {
  u32 multiplier;
  u32 divider;
};

struct freq_desc {
  bool use_msr_plat;
  struct muldiv muldiv[16];
  u32 freqs[16];
  u32 mask;
};

struct dmi_strmatch {
  unsigned char slot : 7;
  unsigned char exact_match : 1;
  char substr[79];
};

struct dmi_system_id {
  int (*callback)(const struct dmi_system_id*);
  const char* ident;
  struct dmi_strmatch matches[4];
  void* driver_data;
};

struct pdev_archdata {};

struct mfd_cell;

struct platform_device_id;

struct platform_device {
  const char* name;
  int id;
  bool id_auto;
  struct device dev;
  u64 platform_dma_mask;
  struct device_dma_parameters dma_parms;
  u32 num_resources;
  struct resource* resource;
  const struct platform_device_id* id_entry;
  char* driver_override;
  struct mfd_cell* mfd_cell;
  struct pdev_archdata archdata;
};

struct platform_device_id {
  char name[20];
  kernel_ulong_t driver_data;
};

struct rtc_time {
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

struct pnp_device_id {
  __u8 id[8];
  kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
  __u8 id[8];
  kernel_ulong_t driver_data;
  struct {
    __u8 id[8];
  } devs[8];
};

struct pnp_protocol;

struct pnp_id;

struct pnp_card {
  struct device dev;
  unsigned char number;
  struct list_head global_list;
  struct list_head protocol_list;
  struct list_head devices;
  struct pnp_protocol* protocol;
  struct pnp_id* id;
  char name[50];
  unsigned char pnpver;
  unsigned char productver;
  unsigned int serial;
  unsigned char checksum;
  struct proc_dir_entry* procdir;
};

struct pnp_dev;

struct pnp_protocol {
  struct list_head protocol_list;
  char* name;
  int (*get)(struct pnp_dev*);
  int (*set)(struct pnp_dev*);
  int (*disable)(struct pnp_dev*);
  bool (*can_wakeup)(struct pnp_dev*);
  int (*suspend)(struct pnp_dev*, pm_message_t);
  int (*resume)(struct pnp_dev*);
  unsigned char number;
  struct device dev;
  struct list_head cards;
  struct list_head devices;
};

struct pnp_id {
  char id[8];
  struct pnp_id* next;
};

struct pnp_card_driver;

struct pnp_card_link {
  struct pnp_card* card;
  struct pnp_card_driver* driver;
  void* driver_data;
  pm_message_t pm_state;
};

struct pnp_driver {
  const char* name;
  const struct pnp_device_id* id_table;
  unsigned int flags;
  int (*probe)(struct pnp_dev*, const struct pnp_device_id*);
  void (*remove)(struct pnp_dev*);
  void (*shutdown)(struct pnp_dev*);
  int (*suspend)(struct pnp_dev*, pm_message_t);
  int (*resume)(struct pnp_dev*);
  struct device_driver driver;
};

struct pnp_card_driver {
  struct list_head global_list;
  char* name;
  const struct pnp_card_device_id* id_table;
  unsigned int flags;
  int (*probe)(struct pnp_card_link*, const struct pnp_card_device_id*);
  void (*remove)(struct pnp_card_link*);
  int (*suspend)(struct pnp_card_link*, pm_message_t);
  int (*resume)(struct pnp_card_link*);
  struct pnp_driver link;
};

struct pnp_dev {
  struct device dev;
  u64 dma_mask;
  unsigned int number;
  int status;
  struct list_head global_list;
  struct list_head protocol_list;
  struct list_head card_list;
  struct list_head rdev_list;
  struct pnp_protocol* protocol;
  struct pnp_card* card;
  struct pnp_driver* driver;
  struct pnp_card_link* card_link;
  struct pnp_id* id;
  int active;
  int capabilities;
  unsigned int num_dependent_sets;
  struct list_head resources;
  struct list_head options;
  char name[50];
  int flags;
  struct proc_dir_entry* procent;
  void* data;
};

enum insn_type {
  CALL = 0,
  NOP = 1,
  JMP = 2,
  RET = 3,
};

typedef struct ldttss_desc tss_desc;

enum idle_boot_override {
  IDLE_NO_OVERRIDE = 0,
  IDLE_HALT = 1,
  IDLE_NOMWAIT = 2,
  IDLE_POLL = 3,
};

enum tick_broadcast_mode {
  TICK_BROADCAST_OFF = 0,
  TICK_BROADCAST_ON = 1,
  TICK_BROADCAST_FORCE = 2,
};

enum tick_broadcast_state {
  TICK_BROADCAST_EXIT = 0,
  TICK_BROADCAST_ENTER = 1,
};

struct cpuidle_state_usage {
  long long unsigned int disable;
  long long unsigned int usage;
  u64 time_ns;
  long long unsigned int above;
  long long unsigned int below;
  long long unsigned int rejected;
};

struct cpuidle_driver_kobj;

struct cpuidle_state_kobj;

struct cpuidle_device_kobj;

struct cpuidle_device {
  unsigned int registered : 1;
  unsigned int enabled : 1;
  unsigned int poll_time_limit : 1;
  unsigned int cpu;
  ktime_t next_hrtimer;
  int last_state_idx;
  u64 last_residency_ns;
  u64 poll_limit_ns;
  u64 forced_idle_latency_limit_ns;
  struct cpuidle_state_usage states_usage[10];
  struct cpuidle_state_kobj* kobjs[10];
  struct cpuidle_driver_kobj* kobj_driver;
  struct cpuidle_device_kobj* kobj_dev;
  struct list_head device_list;
};

struct inactive_task_frame {
  long unsigned int r15;
  long unsigned int r14;
  long unsigned int r13;
  long unsigned int r12;
  long unsigned int bx;
  long unsigned int bp;
  long unsigned int ret_addr;
};

struct fork_frame {
  struct inactive_task_frame frame;
  struct pt_regs regs;
};

struct ssb_state {
  struct ssb_state* shared_state;
  raw_spinlock_t lock;
  unsigned int disable_state;
  long unsigned int local_state;
};

struct trace_event_raw_x86_fpu {
  struct trace_entry ent;
  struct fpu* fpu;
  bool load_fpu;
  u64 xfeatures;
  u64 xcomp_bv;
  char __data[0];
};

struct trace_event_data_offsets_x86_fpu {};

typedef void (*btf_trace_x86_fpu_before_save)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_after_save)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_before_restore)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_after_restore)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_regs_activated)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_regs_deactivated)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_init_state)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_dropped)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_copy_src)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_copy_dst)(void*, struct fpu*);

typedef void (*btf_trace_x86_fpu_xstate_check_failed)(void*, struct fpu*);

struct _fpreg {
  __u16 significand[4];
  __u16 exponent;
};

struct _fpxreg {
  __u16 significand[4];
  __u16 exponent;
  __u16 padding[3];
};

struct user_i387_ia32_struct {
  u32 cwd;
  u32 swd;
  u32 twd;
  u32 fip;
  u32 fcs;
  u32 foo;
  u32 fos;
  u32 st_space[20];
};

struct membuf {
  void* p;
  size_t left;
};

struct user_regset;

typedef int user_regset_active_fn(
    struct task_struct*,
    const struct user_regset*);

typedef int user_regset_get2_fn(
    struct task_struct*,
    const struct user_regset*,
    struct membuf);

typedef int user_regset_set_fn(
    struct task_struct*,
    const struct user_regset*,
    unsigned int,
    unsigned int,
    const void*,
    const void*);

typedef int
user_regset_writeback_fn(struct task_struct*, const struct user_regset*, int);

struct user_regset {
  user_regset_get2_fn* regset_get;
  user_regset_set_fn* set;
  user_regset_active_fn* active;
  user_regset_writeback_fn* writeback;
  unsigned int n;
  unsigned int size;
  unsigned int align;
  unsigned int bias;
  unsigned int core_note_type;
};

struct _fpx_sw_bytes {
  __u32 magic1;
  __u32 extended_size;
  __u64 xfeatures;
  __u32 xstate_size;
  __u32 padding[7];
};

struct _xmmreg {
  __u32 element[4];
};

struct _fpstate_32 {
  __u32 cw;
  __u32 sw;
  __u32 tag;
  __u32 ipoff;
  __u32 cssel;
  __u32 dataoff;
  __u32 datasel;
  struct _fpreg _st[8];
  __u16 status;
  __u16 magic;
  __u32 _fxsr_env[6];
  __u32 mxcsr;
  __u32 reserved;
  struct _fpxreg _fxsr_st[8];
  struct _xmmreg _xmm[8];
  union {
    __u32 padding1[44];
    __u32 padding[44];
  };
  union {
    __u32 padding2[12];
    struct _fpx_sw_bytes sw_reserved;
  };
};

typedef u32 compat_ulong_t;

struct user_regset_view {
  const char* name;
  const struct user_regset* regsets;
  unsigned int n;
  u32 e_flags;
  u16 e_machine;
  u8 ei_osabi;
};

enum x86_regset {
  REGSET_GENERAL = 0,
  REGSET_FP = 1,
  REGSET_XFP = 2,
  REGSET_IOPERM64 = 2,
  REGSET_XSTATE = 3,
  REGSET_TLS = 4,
  REGSET_IOPERM32 = 5,
};

struct pt_regs_offset {
  const char* name;
  int offset;
};

typedef u8 uint8_t;

enum {
  TB_SHUTDOWN_REBOOT = 0,
  TB_SHUTDOWN_S5 = 1,
  TB_SHUTDOWN_S4 = 2,
  TB_SHUTDOWN_S3 = 3,
  TB_SHUTDOWN_HALT = 4,
  TB_SHUTDOWN_WFS = 5,
};

struct tboot_mac_region {
  u64 start;
  u32 size;
} __attribute__((packed));

struct tboot_acpi_generic_address {
  u8 space_id;
  u8 bit_width;
  u8 bit_offset;
  u8 access_width;
  u64 address;
} __attribute__((packed));

struct tboot_acpi_sleep_info {
  struct tboot_acpi_generic_address pm1a_cnt_blk;
  struct tboot_acpi_generic_address pm1b_cnt_blk;
  struct tboot_acpi_generic_address pm1a_evt_blk;
  struct tboot_acpi_generic_address pm1b_evt_blk;
  u16 pm1a_cnt_val;
  u16 pm1b_cnt_val;
  u64 wakeup_vector;
  u32 vector_width;
  u64 kernel_s3_resume_vector;
} __attribute__((packed));

struct tboot {
  u8 uuid[16];
  u32 version;
  u32 log_addr;
  u32 shutdown_entry;
  u32 shutdown_type;
  struct tboot_acpi_sleep_info acpi_sinfo;
  u32 tboot_base;
  u32 tboot_size;
  u8 num_mac_regions;
  struct tboot_mac_region mac_regions[32];
  u8 s3_key[64];
  u8 reserved_align[3];
  u32 num_in_wfs;
} __attribute__((packed));

struct wakeup_header {
  u16 video_mode;
  u32 pmode_entry;
  u16 pmode_cs;
  u32 pmode_cr0;
  u32 pmode_cr3;
  u32 pmode_cr4;
  u32 pmode_efer_low;
  u32 pmode_efer_high;
  u64 pmode_gdt;
  u32 pmode_misc_en_low;
  u32 pmode_misc_en_high;
  u32 pmode_behavior;
  u32 realmode_flags;
  u32 real_magic;
  u32 signature;
} __attribute__((packed));

struct sha1_hash {
  u8 hash[20];
};

struct sinit_mle_data {
  u32 version;
  struct sha1_hash bios_acm_id;
  u32 edx_senter_flags;
  u64 mseg_valid;
  struct sha1_hash sinit_hash;
  struct sha1_hash mle_hash;
  struct sha1_hash stm_hash;
  struct sha1_hash lcp_policy_hash;
  u32 lcp_policy_control;
  u32 rlp_wakeup_addr;
  u32 reserved;
  u32 num_mdrs;
  u32 mdrs_off;
  u32 num_vtd_dmars;
  u32 vtd_dmars_off;
} __attribute__((packed));

typedef bool (*stack_trace_consume_fn)(void*, long unsigned int);

struct stack_frame_user {
  const void* next_fp;
  long unsigned int ret_addr;
};

enum cache_type {
  CACHE_TYPE_NOCACHE = 0,
  CACHE_TYPE_INST = 1,
  CACHE_TYPE_DATA = 2,
  CACHE_TYPE_SEPARATE = 3,
  CACHE_TYPE_UNIFIED = 4,
};

struct cacheinfo {
  unsigned int id;
  enum cache_type type;
  unsigned int level;
  unsigned int coherency_line_size;
  unsigned int number_of_sets;
  unsigned int ways_of_associativity;
  unsigned int physical_line_partition;
  unsigned int size;
  cpumask_t shared_cpu_map;
  unsigned int attributes;
  void* fw_token;
  bool disable_sysfs;
  void* priv;
};

struct cpu_cacheinfo {
  struct cacheinfo* info_list;
  unsigned int num_levels;
  unsigned int num_leaves;
  bool cpu_map_populated;
};

struct amd_nb_bus_dev_range {
  u8 bus;
  u8 dev_base;
  u8 dev_limit;
};

struct amd_l3_cache {
  unsigned int indices;
  u8 subcaches[4];
};

struct threshold_block {
  unsigned int block;
  unsigned int bank;
  unsigned int cpu;
  u32 address;
  u16 interrupt_enable;
  bool interrupt_capable;
  u16 threshold_limit;
  struct kobject kobj;
  struct list_head miscj;
};

struct threshold_bank {
  struct kobject* kobj;
  struct threshold_block* blocks;
  refcount_t cpus;
  unsigned int shared;
};

struct amd_northbridge {
  struct pci_dev* root;
  struct pci_dev* misc;
  struct pci_dev* link;
  struct amd_l3_cache l3_cache;
  struct threshold_bank* bank4;
};

struct cpu_dev {
  const char* c_vendor;
  const char* c_ident[2];
  void (*c_early_init)(struct cpuinfo_x86*);
  void (*c_bsp_init)(struct cpuinfo_x86*);
  void (*c_init)(struct cpuinfo_x86*);
  void (*c_identify)(struct cpuinfo_x86*);
  void (*c_detect_tlb)(struct cpuinfo_x86*);
  int c_x86_vendor;
};

enum tsx_ctrl_states {
  TSX_CTRL_ENABLE = 0,
  TSX_CTRL_DISABLE = 1,
  TSX_CTRL_NOT_SUPPORTED = 2,
};

struct _cache_table {
  unsigned char descriptor;
  char cache_type;
  short int size;
};

enum _cache_type {
  CTYPE_NULL = 0,
  CTYPE_DATA = 1,
  CTYPE_INST = 2,
  CTYPE_UNIFIED = 3,
};

union _cpuid4_leaf_eax {
  struct {
    enum _cache_type type : 5;
    unsigned int level : 3;
    unsigned int is_self_initializing : 1;
    unsigned int is_fully_associative : 1;
    unsigned int reserved : 4;
    unsigned int num_threads_sharing : 12;
    unsigned int num_cores_on_die : 6;
  } split;
  u32 full;
};

union _cpuid4_leaf_ebx {
  struct {
    unsigned int coherency_line_size : 12;
    unsigned int physical_line_partition : 10;
    unsigned int ways_of_associativity : 10;
  } split;
  u32 full;
};

union _cpuid4_leaf_ecx {
  struct {
    unsigned int number_of_sets : 32;
  } split;
  u32 full;
};

struct _cpuid4_info_regs {
  union _cpuid4_leaf_eax eax;
  union _cpuid4_leaf_ebx ebx;
  union _cpuid4_leaf_ecx ecx;
  unsigned int id;
  long unsigned int size;
  struct amd_northbridge* nb;
};

union l1_cache {
  struct {
    unsigned int line_size : 8;
    unsigned int lines_per_tag : 8;
    unsigned int assoc : 8;
    unsigned int size_in_kb : 8;
  };
  unsigned int val;
};

union l2_cache {
  struct {
    unsigned int line_size : 8;
    unsigned int lines_per_tag : 4;
    unsigned int assoc : 4;
    unsigned int size_in_kb : 16;
  };
  unsigned int val;
};

union l3_cache {
  struct {
    unsigned int line_size : 8;
    unsigned int lines_per_tag : 4;
    unsigned int assoc : 4;
    unsigned int res : 2;
    unsigned int size_encoded : 14;
  };
  unsigned int val;
};

struct cpuid_bit {
  u16 feature;
  u8 reg;
  u8 bit;
  u32 level;
  u32 sub_leaf;
};

enum cpuid_leafs {
  CPUID_1_EDX = 0,
  CPUID_8000_0001_EDX = 1,
  CPUID_8086_0001_EDX = 2,
  CPUID_LNX_1 = 3,
  CPUID_1_ECX = 4,
  CPUID_C000_0001_EDX = 5,
  CPUID_8000_0001_ECX = 6,
  CPUID_LNX_2 = 7,
  CPUID_LNX_3 = 8,
  CPUID_7_0_EBX = 9,
  CPUID_D_1_EAX = 10,
  CPUID_LNX_4 = 11,
  CPUID_7_1_EAX = 12,
  CPUID_8000_0008_EBX = 13,
  CPUID_6_EAX = 14,
  CPUID_8000_000A_EDX = 15,
  CPUID_7_ECX = 16,
  CPUID_8000_0007_EBX = 17,
  CPUID_7_EDX = 18,
  CPUID_8000_001F_EAX = 19,
};

struct cpuid_dependent_feature {
  u32 feature;
  u32 level;
};

enum spectre_v2_mitigation {
  SPECTRE_V2_NONE = 0,
  SPECTRE_V2_RETPOLINE_GENERIC = 1,
  SPECTRE_V2_RETPOLINE_AMD = 2,
  SPECTRE_V2_IBRS_ENHANCED = 3,
};

enum spectre_v2_user_mitigation {
  SPECTRE_V2_USER_NONE = 0,
  SPECTRE_V2_USER_STRICT = 1,
  SPECTRE_V2_USER_STRICT_PREFERRED = 2,
  SPECTRE_V2_USER_PRCTL = 3,
  SPECTRE_V2_USER_SECCOMP = 4,
};

enum ssb_mitigation {
  SPEC_STORE_BYPASS_NONE = 0,
  SPEC_STORE_BYPASS_DISABLE = 1,
  SPEC_STORE_BYPASS_PRCTL = 2,
  SPEC_STORE_BYPASS_SECCOMP = 3,
};

enum mds_mitigations {
  MDS_MITIGATION_OFF = 0,
  MDS_MITIGATION_FULL = 1,
  MDS_MITIGATION_VMWERV = 2,
};

enum vmx_l1d_flush_state {
  VMENTER_L1D_FLUSH_AUTO = 0,
  VMENTER_L1D_FLUSH_NEVER = 1,
  VMENTER_L1D_FLUSH_COND = 2,
  VMENTER_L1D_FLUSH_ALWAYS = 3,
  VMENTER_L1D_FLUSH_EPT_DISABLED = 4,
  VMENTER_L1D_FLUSH_NOT_REQUIRED = 5,
};

enum taa_mitigations {
  TAA_MITIGATION_OFF = 0,
  TAA_MITIGATION_UCODE_NEEDED = 1,
  TAA_MITIGATION_VERW = 2,
  TAA_MITIGATION_TSX_DISABLED = 3,
};

enum srbds_mitigations {
  SRBDS_MITIGATION_OFF = 0,
  SRBDS_MITIGATION_UCODE_NEEDED = 1,
  SRBDS_MITIGATION_FULL = 2,
  SRBDS_MITIGATION_TSX_OFF = 3,
  SRBDS_MITIGATION_HYPERVISOR = 4,
};

enum spectre_v1_mitigation {
  SPECTRE_V1_MITIGATION_NONE = 0,
  SPECTRE_V1_MITIGATION_AUTO = 1,
};

enum spectre_v2_mitigation_cmd {
  SPECTRE_V2_CMD_NONE = 0,
  SPECTRE_V2_CMD_AUTO = 1,
  SPECTRE_V2_CMD_FORCE = 2,
  SPECTRE_V2_CMD_RETPOLINE = 3,
  SPECTRE_V2_CMD_RETPOLINE_GENERIC = 4,
  SPECTRE_V2_CMD_RETPOLINE_AMD = 5,
};

enum spectre_v2_user_cmd {
  SPECTRE_V2_USER_CMD_NONE = 0,
  SPECTRE_V2_USER_CMD_AUTO = 1,
  SPECTRE_V2_USER_CMD_FORCE = 2,
  SPECTRE_V2_USER_CMD_PRCTL = 3,
  SPECTRE_V2_USER_CMD_PRCTL_IBPB = 4,
  SPECTRE_V2_USER_CMD_SECCOMP = 5,
  SPECTRE_V2_USER_CMD_SECCOMP_IBPB = 6,
};

enum ssb_mitigation_cmd {
  SPEC_STORE_BYPASS_CMD_NONE = 0,
  SPEC_STORE_BYPASS_CMD_AUTO = 1,
  SPEC_STORE_BYPASS_CMD_ON = 2,
  SPEC_STORE_BYPASS_CMD_PRCTL = 3,
  SPEC_STORE_BYPASS_CMD_SECCOMP = 4,
};

enum hk_flags {
  HK_FLAG_TIMER = 1,
  HK_FLAG_RCU = 2,
  HK_FLAG_MISC = 4,
  HK_FLAG_SCHED = 8,
  HK_FLAG_TICK = 16,
  HK_FLAG_DOMAIN = 32,
  HK_FLAG_WQ = 64,
  HK_FLAG_MANAGED_IRQ = 128,
  HK_FLAG_KTHREAD = 256,
};

struct aperfmperf_sample {
  unsigned int khz;
  atomic_t scfpending;
  ktime_t time;
  u64 aperf;
  u64 mperf;
};

struct cpuid_dep {
  unsigned int feature;
  unsigned int depends;
};

enum vmx_feature_leafs {
  MISC_FEATURES = 0,
  PRIMARY_CTLS = 1,
  SECONDARY_CTLS = 2,
  NR_VMX_FEATURE_WORDS = 3,
};

struct _tlb_table {
  unsigned char descriptor;
  char tlb_type;
  unsigned int entries;
  char info[128];
};

enum split_lock_detect_state {
  sld_off = 0,
  sld_warn = 1,
  sld_fatal = 2,
};

struct sku_microcode {
  u8 model;
  u8 stepping;
  u32 microcode;
};

struct cpuid_regs {
  u32 eax;
  u32 ebx;
  u32 ecx;
  u32 edx;
};

enum pconfig_target {
  INVALID_TARGET = 0,
  MKTME_TARGET = 1,
  PCONFIG_TARGET_NR = 2,
};

enum {
  PCONFIG_CPUID_SUBLEAF_INVALID = 0,
  PCONFIG_CPUID_SUBLEAF_TARGETID = 1,
};

enum task_work_notify_mode {
  TWA_NONE = 0,
  TWA_RESUME = 1,
  TWA_SIGNAL = 2,
};

enum mf_flags {
  MF_COUNT_INCREASED = 1,
  MF_ACTION_REQUIRED = 2,
  MF_MUST_KILL = 4,
  MF_SOFT_OFFLINE = 8,
};

enum mce_notifier_prios {
  MCE_PRIO_LOWEST = 0,
  MCE_PRIO_MCELOG = 1,
  MCE_PRIO_EDAC = 2,
  MCE_PRIO_NFIT = 3,
  MCE_PRIO_EXTLOG = 4,
  MCE_PRIO_UC = 5,
  MCE_PRIO_EARLY = 6,
  MCE_PRIO_CEC = 7,
  MCE_PRIO_HIGHEST = 7,
};

enum mcp_flags {
  MCP_TIMESTAMP = 1,
  MCP_UC = 2,
  MCP_DONTLOG = 4,
};

enum severity_level {
  MCE_NO_SEVERITY = 0,
  MCE_DEFERRED_SEVERITY = 1,
  MCE_UCNA_SEVERITY = 1,
  MCE_KEEP_SEVERITY = 2,
  MCE_SOME_SEVERITY = 3,
  MCE_AO_SEVERITY = 4,
  MCE_UC_SEVERITY = 5,
  MCE_AR_SEVERITY = 6,
  MCE_PANIC_SEVERITY = 7,
};

struct mce_evt_llist {
  struct llist_node llnode;
  struct mce mce;
};

struct mca_config {
  bool dont_log_ce;
  bool cmci_disabled;
  bool ignore_ce;
  bool print_all;
  __u64 lmce_disabled : 1;
  __u64 disabled : 1;
  __u64 ser : 1;
  __u64 recovery : 1;
  __u64 bios_cmci_threshold : 1;
  int : 27;
  __u64 __reserved : 59;
  s8 bootlog;
  int tolerant;
  int monarch_timeout;
  int panic_timeout;
  u32 rip_msr;
};

struct mce_vendor_flags {
  __u64 overflow_recov : 1;
  __u64 succor : 1;
  __u64 smca : 1;
  __u64 amd_threshold : 1;
  __u64 __reserved_0 : 60;
};

struct mca_msr_regs {
  u32 (*ctl)(int);
  u32 (*status)(int);
  u32 (*addr)(int);
  u32 (*misc)(int);
};

struct trace_event_raw_mce_record {
  struct trace_entry ent;
  u64 mcgcap;
  u64 mcgstatus;
  u64 status;
  u64 addr;
  u64 misc;
  u64 synd;
  u64 ipid;
  u64 ip;
  u64 tsc;
  u64 walltime;
  u32 cpu;
  u32 cpuid;
  u32 apicid;
  u32 socketid;
  u8 cs;
  u8 bank;
  u8 cpuvendor;
  char __data[0];
};

struct trace_event_data_offsets_mce_record {};

typedef void (*btf_trace_mce_record)(void*, struct mce*);

struct mce_bank {
  u64 ctl;
  bool init;
};

struct mce_bank_dev {
  struct device_attribute attr;
  char attrname[16];
  u8 bank;
};

enum handler_type {
  EX_HANDLER_NONE = 0,
  EX_HANDLER_FAULT = 1,
  EX_HANDLER_UACCESS = 2,
  EX_HANDLER_OTHER = 3,
};

enum context {
  IN_KERNEL = 1,
  IN_USER = 2,
  IN_KERNEL_RECOV = 3,
};

enum ser {
  SER_REQUIRED = 1,
  NO_SER = 2,
};

enum exception {
  EXCP_CONTEXT = 1,
  NO_EXCP = 2,
};

struct severity {
  u64 mask;
  u64 result;
  unsigned char sev;
  unsigned char mcgmask;
  unsigned char mcgres;
  unsigned char ser;
  unsigned char context;
  unsigned char excp;
  unsigned char covered;
  unsigned char cpu_model;
  unsigned char cpu_minstepping;
  unsigned char bank_lo;
  unsigned char bank_hi;
  char* msg;
};

struct gen_pool;

typedef long unsigned int (*genpool_algo_t)(
    long unsigned int*,
    long unsigned int,
    long unsigned int,
    unsigned int,
    void*,
    struct gen_pool*,
    long unsigned int);

struct gen_pool {
  spinlock_t lock;
  struct list_head chunks;
  int min_alloc_order;
  genpool_algo_t algo;
  void* data;
  const char* name;
};

enum {
  CMCI_STORM_NONE = 0,
  CMCI_STORM_ACTIVE = 1,
  CMCI_STORM_SUBSIDED = 2,
};

enum kobject_action {
  KOBJ_ADD = 0,
  KOBJ_REMOVE = 1,
  KOBJ_CHANGE = 2,
  KOBJ_MOVE = 3,
  KOBJ_ONLINE = 4,
  KOBJ_OFFLINE = 5,
  KOBJ_BIND = 6,
  KOBJ_UNBIND = 7,
};

enum smca_bank_types {
  SMCA_LS = 0,
  SMCA_LS_V2 = 1,
  SMCA_IF = 2,
  SMCA_L2_CACHE = 3,
  SMCA_DE = 4,
  SMCA_RESERVED = 5,
  SMCA_EX = 6,
  SMCA_FP = 7,
  SMCA_L3_CACHE = 8,
  SMCA_CS = 9,
  SMCA_CS_V2 = 10,
  SMCA_PIE = 11,
  SMCA_UMC = 12,
  SMCA_PB = 13,
  SMCA_PSP = 14,
  SMCA_PSP_V2 = 15,
  SMCA_SMU = 16,
  SMCA_SMU_V2 = 17,
  SMCA_MP5 = 18,
  SMCA_NBIO = 19,
  SMCA_PCIE = 20,
  N_SMCA_BANK_TYPES = 21,
};

struct smca_bank_name {
  const char* name;
  const char* long_name;
};

struct thresh_restart {
  struct threshold_block* b;
  int reset;
  int set_lvt_off;
  int lvt_off;
  u16 old_limit;
};

struct threshold_attr {
  struct attribute attr;
  ssize_t (*show)(struct threshold_block*, char*);
  ssize_t (*store)(struct threshold_block*, const char*, size_t);
};

enum {
  CPER_SEV_RECOVERABLE = 0,
  CPER_SEV_FATAL = 1,
  CPER_SEV_CORRECTED = 2,
  CPER_SEV_INFORMATIONAL = 3,
};

struct cper_record_header {
  char signature[4];
  u16 revision;
  u32 signature_end;
  u16 section_count;
  u32 error_severity;
  u32 validation_bits;
  u32 record_length;
  u64 timestamp;
  guid_t platform_id;
  guid_t partition_id;
  guid_t creator_id;
  guid_t notification_type;
  u64 record_id;
  u32 flags;
  u64 persistence_information;
  u8 reserved[12];
} __attribute__((packed));

struct cper_section_descriptor {
  u32 section_offset;
  u32 section_length;
  u16 revision;
  u8 validation_bits;
  u8 reserved;
  u32 flags;
  guid_t section_type;
  guid_t fru_id;
  u32 section_severity;
  u8 fru_text[20];
};

struct cper_ia_proc_ctx {
  u16 reg_ctx_type;
  u16 reg_arr_size;
  u32 msr_addr;
  u64 mm_reg_addr;
};

struct cper_sec_mem_err {
  u64 validation_bits;
  u64 error_status;
  u64 physical_addr;
  u64 physical_addr_mask;
  u16 node;
  u16 card;
  u16 module;
  u16 bank;
  u16 device;
  u16 row;
  u16 column;
  u16 bit_pos;
  u64 requestor_id;
  u64 responder_id;
  u64 target_id;
  u8 error_type;
  u8 extended;
  u16 rank;
  u16 mem_array_handle;
  u16 mem_dev_handle;
};

enum {
  GHES_SEV_NO = 0,
  GHES_SEV_CORRECTED = 1,
  GHES_SEV_RECOVERABLE = 2,
  GHES_SEV_PANIC = 3,
};

struct cper_mce_record {
  struct cper_record_header hdr;
  struct cper_section_descriptor sec_hdr;
  struct mce mce;
};

struct miscdevice {
  int minor;
  const char* name;
  const struct file_operations* fops;
  struct list_head list;
  struct device* parent;
  struct device* this_device;
  const struct attribute_group** groups;
  const char* nodename;
  umode_t mode;
};

typedef struct poll_table_struct poll_table;

struct mce_log_buffer {
  char signature[12];
  unsigned int len;
  unsigned int next;
  unsigned int flags;
  unsigned int recordlen;
  struct mce entry[0];
};

struct mtrr_var_range {
  __u32 base_lo;
  __u32 base_hi;
  __u32 mask_lo;
  __u32 mask_hi;
};

typedef __u8 mtrr_type;

struct mtrr_state_type {
  struct mtrr_var_range var_ranges[256];
  mtrr_type fixed_ranges[88];
  unsigned char enabled;
  unsigned char have_fixed;
  mtrr_type def_type;
};

struct mtrr_ops {
  u32 vendor;
  u32 use_intel_if;
  void (*set)(unsigned int, long unsigned int, long unsigned int, mtrr_type);
  void (*set_all)();
  void (*get)(unsigned int, long unsigned int*, long unsigned int*, mtrr_type*);
  int (*get_free_region)(long unsigned int, long unsigned int, int);
  int (*validate_add_page)(long unsigned int, long unsigned int, unsigned int);
  int (*have_wrcomb)();
};

struct set_mtrr_data {
  long unsigned int smp_base;
  long unsigned int smp_size;
  unsigned int smp_reg;
  mtrr_type smp_type;
};

struct mtrr_value {
  mtrr_type ltype;
  long unsigned int lbase;
  long unsigned int lsize;
};

struct proc_ops {
  unsigned int proc_flags;
  int (*proc_open)(struct inode*, struct file*);
  ssize_t (*proc_read)(struct file*, char*, size_t, loff_t*);
  ssize_t (*proc_read_iter)(struct kiocb*, struct iov_iter*);
  ssize_t (*proc_write)(struct file*, const char*, size_t, loff_t*);
  loff_t (*proc_lseek)(struct file*, loff_t, int);
  int (*proc_release)(struct inode*, struct file*);
  __poll_t (*proc_poll)(struct file*, struct poll_table_struct*);
  long int (*proc_ioctl)(struct file*, unsigned int, long unsigned int);
  long int (*proc_compat_ioctl)(struct file*, unsigned int, long unsigned int);
  int (*proc_mmap)(struct file*, struct vm_area_struct*);
  long unsigned int (*proc_get_unmapped_area)(
      struct file*,
      long unsigned int,
      long unsigned int,
      long unsigned int,
      long unsigned int);
};

struct mtrr_sentry {
  __u64 base;
  __u32 size;
  __u32 type;
};

struct mtrr_gentry {
  __u64 base;
  __u32 size;
  __u32 regnum;
  __u32 type;
  __u32 _pad;
};

typedef u32 compat_uint_t;

struct mtrr_sentry32 {
  compat_ulong_t base;
  compat_uint_t size;
  compat_uint_t type;
};

struct mtrr_gentry32 {
  compat_ulong_t regnum;
  compat_uint_t base;
  compat_uint_t size;
  compat_uint_t type;
};

struct fixed_range_block {
  int base_msr;
  int ranges;
};

struct var_mtrr_range_state {
  long unsigned int base_pfn;
  long unsigned int size_pfn;
  mtrr_type type;
};

struct subsys_interface {
  const char* name;
  struct bus_type* subsys;
  struct list_head node;
  int (*add_dev)(struct device*, struct subsys_interface*);
  void (*remove_dev)(struct device*, struct subsys_interface*);
};

struct property_entry;

struct platform_device_info {
  struct device* parent;
  struct fwnode_handle* fwnode;
  bool of_node_reused;
  const char* name;
  int id;
  const struct resource* res;
  unsigned int num_res;
  const void* data;
  size_t size_data;
  u64 dma_mask;
  const struct property_entry* properties;
};

enum dev_prop_type {
  DEV_PROP_U8 = 0,
  DEV_PROP_U16 = 1,
  DEV_PROP_U32 = 2,
  DEV_PROP_U64 = 3,
  DEV_PROP_STRING = 4,
  DEV_PROP_REF = 5,
};

struct property_entry {
  const char* name;
  size_t length;
  bool is_inline;
  enum dev_prop_type type;
  union {
    const void* pointer;
    union {
      u8 u8_data[8];
      u16 u16_data[4];
      u32 u32_data[2];
      u64 u64_data[1];
      const char* str[1];
    } value;
  };
};

struct builtin_fw {
  char* name;
  void* data;
  long unsigned int size;
};

struct cpio_data {
  void* data;
  size_t size;
  char name[18];
};

enum ucode_state {
  UCODE_OK = 0,
  UCODE_NEW = 1,
  UCODE_UPDATED = 2,
  UCODE_NFOUND = 3,
  UCODE_ERROR = 4,
};

struct microcode_ops {
  enum ucode_state (*request_microcode_user)(int, const void*, size_t);
  enum ucode_state (*request_microcode_fw)(int, struct device*, bool);
  void (*microcode_fini_cpu)(int);
  enum ucode_state (*apply_microcode)(int);
  int (*collect_cpu_info)(int, struct cpu_signature*);
};

struct cpu_info_ctx {
  struct cpu_signature* cpu_sig;
  int err;
};

struct firmware {
  size_t size;
  const u8* data;
  void* priv;
};

struct ucode_patch {
  struct list_head plist;
  void* data;
  u32 patch_id;
  u16 equiv_cpu;
};

struct microcode_header_intel {
  unsigned int hdrver;
  unsigned int rev;
  unsigned int date;
  unsigned int sig;
  unsigned int cksum;
  unsigned int ldrver;
  unsigned int pf;
  unsigned int datasize;
  unsigned int totalsize;
  unsigned int reserved[3];
};

struct microcode_intel {
  struct microcode_header_intel hdr;
  unsigned int bits[0];
};

struct extended_signature {
  unsigned int sig;
  unsigned int pf;
  unsigned int cksum;
};

struct extended_sigtable {
  unsigned int count;
  unsigned int cksum;
  unsigned int reserved[3];
  struct extended_signature sigs[0];
};

struct equiv_cpu_entry {
  u32 installed_cpu;
  u32 fixed_errata_mask;
  u32 fixed_errata_compare;
  u16 equiv_cpu;
  u16 res;
};

struct microcode_header_amd {
  u32 data_code;
  u32 patch_id;
  u16 mc_patch_data_id;
  u8 mc_patch_data_len;
  u8 init_flag;
  u32 mc_patch_data_checksum;
  u32 nb_dev_id;
  u32 sb_dev_id;
  u16 processor_rev_id;
  u8 nb_rev_id;
  u8 sb_rev_id;
  u8 bios_api_rev;
  u8 reserved1[3];
  u32 match_reg[8];
};

struct microcode_amd {
  struct microcode_header_amd hdr;
  unsigned int mpb[0];
};

struct equiv_cpu_table {
  unsigned int num_entries;
  struct equiv_cpu_entry* entry;
};

struct cont_desc {
  struct microcode_amd* mc;
  u32 cpuid_1_eax;
  u32 psize;
  u8* data;
  size_t size;
};

struct vmcb_seg {
  u16 selector;
  u16 attrib;
  u32 limit;
  u64 base;
};

struct vmcb_save_area {
  struct vmcb_seg es;
  struct vmcb_seg cs;
  struct vmcb_seg ss;
  struct vmcb_seg ds;
  struct vmcb_seg fs;
  struct vmcb_seg gs;
  struct vmcb_seg gdtr;
  struct vmcb_seg ldtr;
  struct vmcb_seg idtr;
  struct vmcb_seg tr;
  u8 reserved_1[43];
  u8 cpl;
  u8 reserved_2[4];
  u64 efer;
  u8 reserved_3[104];
  u64 xss;
  u64 cr4;
  u64 cr3;
  u64 cr0;
  u64 dr7;
  u64 dr6;
  u64 rflags;
  u64 rip;
  u8 reserved_4[88];
  u64 rsp;
  u8 reserved_5[24];
  u64 rax;
  u64 star;
  u64 lstar;
  u64 cstar;
  u64 sfmask;
  u64 kernel_gs_base;
  u64 sysenter_cs;
  u64 sysenter_esp;
  u64 sysenter_eip;
  u64 cr2;
  u8 reserved_6[32];
  u64 g_pat;
  u64 dbgctl;
  u64 br_from;
  u64 br_to;
  u64 last_excp_from;
  u64 last_excp_to;
  u8 reserved_7[80];
  u32 pkru;
  u8 reserved_7a[20];
  u64 reserved_8;
  u64 rcx;
  u64 rdx;
  u64 rbx;
  u64 reserved_9;
  u64 rbp;
  u64 rsi;
  u64 rdi;
  u64 r8;
  u64 r9;
  u64 r10;
  u64 r11;
  u64 r12;
  u64 r13;
  u64 r14;
  u64 r15;
  u8 reserved_10[16];
  u64 sw_exit_code;
  u64 sw_exit_info_1;
  u64 sw_exit_info_2;
  u64 sw_scratch;
  u8 reserved_11[56];
  u64 xcr0;
  u8 valid_bitmap[16];
  u64 x87_state_gpa;
};

struct ghcb {
  struct vmcb_save_area save;
  u8 reserved_save[1016];
  u8 shared_buffer[2032];
  u8 reserved_1[10];
  u16 protocol_version;
  u32 ghcb_usage;
};

enum intercept_words {
  INTERCEPT_CR = 0,
  INTERCEPT_DR = 1,
  INTERCEPT_EXCEPTION = 2,
  INTERCEPT_WORD3 = 3,
  INTERCEPT_WORD4 = 4,
  INTERCEPT_WORD5 = 5,
  MAX_INTERCEPT = 6,
};

struct vmware_steal_time {
  union {
    uint64_t clock;
    struct {
      uint32_t clock_low;
      uint32_t clock_high;
    };
  };
  uint64_t reserved[7];
};

enum mp_irq_source_types {
  mp_INT = 0,
  mp_NMI = 1,
  mp_SMI = 2,
  mp_ExtINT = 3,
};

typedef u64 acpi_physical_address;

typedef u32 acpi_status;

typedef void* acpi_handle;

typedef u8 acpi_adr_space_type;

struct acpi_subtable_header {
  u8 type;
  u8 length;
};

struct acpi_table_boot {
  struct acpi_table_header header;
  u8 cmos_index;
  u8 reserved[3];
};

struct acpi_hmat_structure {
  u16 type;
  u16 reserved;
  u32 length;
};

struct acpi_table_hpet {
  struct acpi_table_header header;
  u32 id;
  struct acpi_generic_address address;
  u8 sequence;
  u16 minimum_tick;
  u8 flags;
} __attribute__((packed));

struct acpi_table_madt {
  struct acpi_table_header header;
  u32 address;
  u32 flags;
};

enum acpi_madt_type {
  ACPI_MADT_TYPE_LOCAL_APIC = 0,
  ACPI_MADT_TYPE_IO_APIC = 1,
  ACPI_MADT_TYPE_INTERRUPT_OVERRIDE = 2,
  ACPI_MADT_TYPE_NMI_SOURCE = 3,
  ACPI_MADT_TYPE_LOCAL_APIC_NMI = 4,
  ACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE = 5,
  ACPI_MADT_TYPE_IO_SAPIC = 6,
  ACPI_MADT_TYPE_LOCAL_SAPIC = 7,
  ACPI_MADT_TYPE_INTERRUPT_SOURCE = 8,
  ACPI_MADT_TYPE_LOCAL_X2APIC = 9,
  ACPI_MADT_TYPE_LOCAL_X2APIC_NMI = 10,
  ACPI_MADT_TYPE_GENERIC_INTERRUPT = 11,
  ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR = 12,
  ACPI_MADT_TYPE_GENERIC_MSI_FRAME = 13,
  ACPI_MADT_TYPE_GENERIC_REDISTRIBUTOR = 14,
  ACPI_MADT_TYPE_GENERIC_TRANSLATOR = 15,
  ACPI_MADT_TYPE_RESERVED = 16,
};

struct acpi_madt_local_apic {
  struct acpi_subtable_header header;
  u8 processor_id;
  u8 id;
  u32 lapic_flags;
};

struct acpi_madt_io_apic {
  struct acpi_subtable_header header;
  u8 id;
  u8 reserved;
  u32 address;
  u32 global_irq_base;
};

struct acpi_madt_interrupt_override {
  struct acpi_subtable_header header;
  u8 bus;
  u8 source_irq;
  u32 global_irq;
  u16 inti_flags;
} __attribute__((packed));

struct acpi_madt_nmi_source {
  struct acpi_subtable_header header;
  u16 inti_flags;
  u32 global_irq;
};

struct acpi_madt_local_apic_nmi {
  struct acpi_subtable_header header;
  u8 processor_id;
  u16 inti_flags;
  u8 lint;
} __attribute__((packed));

struct acpi_madt_local_apic_override {
  struct acpi_subtable_header header;
  u16 reserved;
  u64 address;
} __attribute__((packed));

struct acpi_madt_local_sapic {
  struct acpi_subtable_header header;
  u8 processor_id;
  u8 id;
  u8 eid;
  u8 reserved[3];
  u32 lapic_flags;
  u32 uid;
  char uid_string[1];
} __attribute__((packed));

struct acpi_madt_local_x2apic {
  struct acpi_subtable_header header;
  u16 reserved;
  u32 local_apic_id;
  u32 lapic_flags;
  u32 uid;
};

struct acpi_madt_local_x2apic_nmi {
  struct acpi_subtable_header header;
  u16 inti_flags;
  u32 uid;
  u8 lint;
  u8 reserved[3];
};

union acpi_subtable_headers {
  struct acpi_subtable_header common;
  struct acpi_hmat_structure hmat;
};

typedef int (*acpi_tbl_entry_handler)(
    union acpi_subtable_headers*,
    const long unsigned int);

struct acpi_subtable_proc {
  int id;
  acpi_tbl_entry_handler handler;
  int count;
};

typedef u32 phys_cpuid_t;

struct gpio_desc;

enum irq_alloc_type {
  X86_IRQ_ALLOC_TYPE_IOAPIC = 1,
  X86_IRQ_ALLOC_TYPE_HPET = 2,
  X86_IRQ_ALLOC_TYPE_PCI_MSI = 3,
  X86_IRQ_ALLOC_TYPE_PCI_MSIX = 4,
  X86_IRQ_ALLOC_TYPE_DMAR = 5,
  X86_IRQ_ALLOC_TYPE_AMDVI = 6,
  X86_IRQ_ALLOC_TYPE_UV = 7,
};

struct ioapic_alloc_info {
  int pin;
  int node;
  u32 is_level : 1;
  u32 active_low : 1;
  u32 valid : 1;
};

struct uv_alloc_info {
  int limit;
  int blade;
  long unsigned int offset;
  char* name;
};

struct irq_alloc_info {
  enum irq_alloc_type type;
  u32 flags;
  u32 devid;
  irq_hw_number_t hwirq;
  const struct cpumask* mask;
  struct msi_desc* desc;
  void* data;
  union {
    struct ioapic_alloc_info ioapic;
    struct uv_alloc_info uv;
  };
};

struct circ_buf {
  char* buf;
  int head;
  int tail;
};

struct serial_icounter_struct {
  int cts;
  int dsr;
  int rng;
  int dcd;
  int rx;
  int tx;
  int frame;
  int overrun;
  int parity;
  int brk;
  int buf_overrun;
  int reserved[9];
};

struct serial_struct {
  int type;
  int line;
  unsigned int port;
  int irq;
  int flags;
  int xmit_fifo_size;
  int custom_divisor;
  int baud_base;
  short unsigned int close_delay;
  char io_type;
  char reserved_char[1];
  int hub6;
  short unsigned int closing_wait;
  short unsigned int closing_wait2;
  unsigned char* iomem_base;
  short unsigned int iomem_reg_shift;
  unsigned int port_high;
  long unsigned int iomap_base;
};

struct sysrq_key_op {
  void (*const handler)(int);
  const char* const help_msg;
  const char* const action_msg;
  const int enable_mask;
};

struct serial_rs485 {
  __u32 flags;
  __u32 delay_rts_before_send;
  __u32 delay_rts_after_send;
  __u32 padding[5];
};

struct serial_iso7816 {
  __u32 flags;
  __u32 tg;
  __u32 sc_fi;
  __u32 sc_di;
  __u32 clk;
  __u32 reserved[5];
};

struct uart_port;

struct uart_ops {
  unsigned int (*tx_empty)(struct uart_port*);
  void (*set_mctrl)(struct uart_port*, unsigned int);
  unsigned int (*get_mctrl)(struct uart_port*);
  void (*stop_tx)(struct uart_port*);
  void (*start_tx)(struct uart_port*);
  void (*throttle)(struct uart_port*);
  void (*unthrottle)(struct uart_port*);
  void (*send_xchar)(struct uart_port*, char);
  void (*stop_rx)(struct uart_port*);
  void (*enable_ms)(struct uart_port*);
  void (*break_ctl)(struct uart_port*, int);
  int (*startup)(struct uart_port*);
  void (*shutdown)(struct uart_port*);
  void (*flush_buffer)(struct uart_port*);
  void (*set_termios)(struct uart_port*, struct ktermios*, struct ktermios*);
  void (*set_ldisc)(struct uart_port*, struct ktermios*);
  void (*pm)(struct uart_port*, unsigned int, unsigned int);
  const char* (*type)(struct uart_port*);
  void (*release_port)(struct uart_port*);
  int (*request_port)(struct uart_port*);
  void (*config_port)(struct uart_port*, int);
  int (*verify_port)(struct uart_port*, struct serial_struct*);
  int (*ioctl)(struct uart_port*, unsigned int, long unsigned int);
};

struct uart_icount {
  __u32 cts;
  __u32 dsr;
  __u32 rng;
  __u32 dcd;
  __u32 rx;
  __u32 tx;
  __u32 frame;
  __u32 overrun;
  __u32 parity;
  __u32 brk;
  __u32 buf_overrun;
};

typedef unsigned int upf_t;

typedef unsigned int upstat_t;

struct uart_state;

struct uart_port {
  spinlock_t lock;
  long unsigned int iobase;
  unsigned char* membase;
  unsigned int (*serial_in)(struct uart_port*, int);
  void (*serial_out)(struct uart_port*, int, int);
  void (*set_termios)(struct uart_port*, struct ktermios*, struct ktermios*);
  void (*set_ldisc)(struct uart_port*, struct ktermios*);
  unsigned int (*get_mctrl)(struct uart_port*);
  void (*set_mctrl)(struct uart_port*, unsigned int);
  unsigned int (*get_divisor)(struct uart_port*, unsigned int, unsigned int*);
  void (*set_divisor)(
      struct uart_port*,
      unsigned int,
      unsigned int,
      unsigned int);
  int (*startup)(struct uart_port*);
  void (*shutdown)(struct uart_port*);
  void (*throttle)(struct uart_port*);
  void (*unthrottle)(struct uart_port*);
  int (*handle_irq)(struct uart_port*);
  void (*pm)(struct uart_port*, unsigned int, unsigned int);
  void (*handle_break)(struct uart_port*);
  int (*rs485_config)(struct uart_port*, struct serial_rs485*);
  int (*iso7816_config)(struct uart_port*, struct serial_iso7816*);
  unsigned int irq;
  long unsigned int irqflags;
  unsigned int uartclk;
  unsigned int fifosize;
  unsigned char x_char;
  unsigned char regshift;
  unsigned char iotype;
  unsigned char quirks;
  unsigned int read_status_mask;
  unsigned int ignore_status_mask;
  struct uart_state* state;
  struct uart_icount icount;
  struct console* cons;
  upf_t flags;
  upstat_t status;
  int hw_stopped;
  unsigned int mctrl;
  unsigned int timeout;
  unsigned int type;
  const struct uart_ops* ops;
  unsigned int custom_divisor;
  unsigned int line;
  unsigned int minor;
  resource_size_t mapbase;
  resource_size_t mapsize;
  struct device* dev;
  long unsigned int sysrq;
  unsigned int sysrq_ch;
  unsigned char has_sysrq;
  unsigned char sysrq_seq;
  unsigned char hub6;
  unsigned char suspended;
  unsigned char console_reinit;
  const char* name;
  struct attribute_group* attr_group;
  const struct attribute_group** tty_groups;
  struct serial_rs485 rs485;
  struct gpio_desc* rs485_term_gpio;
  struct serial_iso7816 iso7816;
  void* private_data;
};

enum uart_pm_state {
  UART_PM_STATE_ON = 0,
  UART_PM_STATE_OFF = 3,
  UART_PM_STATE_UNDEFINED = 4,
};

struct uart_state {
  struct tty_port port;
  enum uart_pm_state pm_state;
  struct circ_buf xmit;
  atomic_t refcount;
  wait_queue_head_t remove_wait;
  struct uart_port* uart_port;
};

struct earlycon_device {
  struct console* con;
  struct uart_port port;
  char options[16];
  unsigned int baud;
};

struct earlycon_id {
  char name[15];
  char name_term;
  char compatible[128];
  int (*setup)(struct earlycon_device*, const char*);
};

enum ioapic_domain_type {
  IOAPIC_DOMAIN_INVALID = 0,
  IOAPIC_DOMAIN_LEGACY = 1,
  IOAPIC_DOMAIN_STRICT = 2,
  IOAPIC_DOMAIN_DYNAMIC = 3,
};

struct ioapic_domain_cfg {
  enum ioapic_domain_type type;
  const struct irq_domain_ops* ops;
  struct device_node* dev;
};

struct thermal_cooling_device_ops;

struct thermal_cooling_device {
  int id;
  char type[20];
  struct device device;
  struct device_node* np;
  void* devdata;
  void* stats;
  const struct thermal_cooling_device_ops* ops;
  bool updated;
  struct mutex lock;
  struct list_head thermal_instances;
  struct list_head node;
};

struct thermal_cooling_device_ops {
  int (*get_max_state)(struct thermal_cooling_device*, long unsigned int*);
  int (*get_cur_state)(struct thermal_cooling_device*, long unsigned int*);
  int (*set_cur_state)(struct thermal_cooling_device*, long unsigned int);
  int (*get_requested_power)(struct thermal_cooling_device*, u32*);
  int (*state2power)(struct thermal_cooling_device*, long unsigned int, u32*);
  int (*power2state)(struct thermal_cooling_device*, u32, long unsigned int*);
};

struct acpi_processor_cx {
  u8 valid;
  u8 type;
  u32 address;
  u8 entry_method;
  u8 index;
  u32 latency;
  u8 bm_sts_skip;
  char desc[32];
};

struct acpi_lpi_state {
  u32 min_residency;
  u32 wake_latency;
  u32 flags;
  u32 arch_flags;
  u32 res_cnt_freq;
  u32 enable_parent_state;
  u64 address;
  u8 index;
  u8 entry_method;
  char desc[32];
};

struct acpi_processor_power {
  int count;
  union {
    struct acpi_processor_cx states[8];
    struct acpi_lpi_state lpi_states[8];
  };
  int timer_broadcast_on_state;
};

struct acpi_psd_package {
  u64 num_entries;
  u64 revision;
  u64 domain;
  u64 coord_type;
  u64 num_processors;
};

struct acpi_pct_register {
  u8 descriptor;
  u16 length;
  u8 space_id;
  u8 bit_width;
  u8 bit_offset;
  u8 reserved;
  u64 address;
} __attribute__((packed));

struct acpi_processor_px {
  u64 core_frequency;
  u64 power;
  u64 transition_latency;
  u64 bus_master_latency;
  u64 control;
  u64 status;
};

struct acpi_processor_performance {
  unsigned int state;
  unsigned int platform_limit;
  struct acpi_pct_register control_register;
  struct acpi_pct_register status_register;
  short : 16;
  unsigned int state_count;
  int : 32;
  struct acpi_processor_px* states;
  struct acpi_psd_package domain_info;
  cpumask_var_t shared_cpu_map;
  unsigned int shared_type;
  int : 32;
} __attribute__((packed));

struct acpi_tsd_package {
  u64 num_entries;
  u64 revision;
  u64 domain;
  u64 coord_type;
  u64 num_processors;
};

struct acpi_processor_tx_tss {
  u64 freqpercentage;
  u64 power;
  u64 transition_latency;
  u64 control;
  u64 status;
};

struct acpi_processor_tx {
  u16 power;
  u16 performance;
};

struct acpi_processor;

struct acpi_processor_throttling {
  unsigned int state;
  unsigned int platform_limit;
  struct acpi_pct_register control_register;
  struct acpi_pct_register status_register;
  short : 16;
  unsigned int state_count;
  int : 32;
  struct acpi_processor_tx_tss* states_tss;
  struct acpi_tsd_package domain_info;
  cpumask_var_t shared_cpu_map;
  int (*acpi_processor_get_throttling)(struct acpi_processor*);
  int (*acpi_processor_set_throttling)(struct acpi_processor*, int, bool);
  u32 address;
  u8 duty_offset;
  u8 duty_width;
  u8 tsd_valid_flag;
  char : 8;
  unsigned int shared_type;
  struct acpi_processor_tx states[16];
  int : 32;
} __attribute__((packed));

struct acpi_processor_flags {
  u8 power : 1;
  u8 performance : 1;
  u8 throttling : 1;
  u8 limit : 1;
  u8 bm_control : 1;
  u8 bm_check : 1;
  u8 has_cst : 1;
  u8 has_lpi : 1;
  u8 power_setup_done : 1;
  u8 bm_rld_set : 1;
  u8 need_hotplug_init : 1;
};

struct acpi_processor_lx {
  int px;
  int tx;
};

struct acpi_processor_limit {
  struct acpi_processor_lx state;
  struct acpi_processor_lx thermal;
  struct acpi_processor_lx user;
};

struct acpi_processor {
  acpi_handle handle;
  u32 acpi_id;
  phys_cpuid_t phys_id;
  u32 id;
  u32 pblk;
  int performance_platform_limit;
  int throttling_platform_limit;
  struct acpi_processor_flags flags;
  struct acpi_processor_power power;
  struct acpi_processor_performance* performance;
  struct acpi_processor_throttling throttling;
  struct acpi_processor_limit limit;
  struct thermal_cooling_device* cdev;
  struct device* dev;
  struct freq_qos_request perflib_req;
  struct freq_qos_request thermal_req;
};

struct acpi_processor_errata {
  u8 smp;
  struct {
    u8 throttle : 1;
    u8 fdma : 1;
    u8 reserved : 6;
    u32 bmisx;
  } piix4;
};

struct cpuidle_driver;

struct acpi_hest_header {
  u16 type;
  u16 source_id;
};

struct acpi_hest_ia_error_bank {
  u8 bank_number;
  u8 clear_status_on_init;
  u8 status_format;
  u8 reserved;
  u32 control_register;
  u64 control_data;
  u32 status_register;
  u32 address_register;
  u32 misc_register;
} __attribute__((packed));

struct acpi_hest_notify {
  u8 type;
  u8 length;
  u16 config_write_enable;
  u32 poll_interval;
  u32 vector;
  u32 polling_threshold_value;
  u32 polling_threshold_window;
  u32 error_threshold_value;
  u32 error_threshold_window;
};

struct acpi_hest_ia_corrected {
  struct acpi_hest_header header;
  u16 reserved1;
  u8 flags;
  u8 enabled;
  u32 records_to_preallocate;
  u32 max_sections_per_record;
  struct acpi_hest_notify notify;
  u8 num_hardware_banks;
  u8 reserved2[3];
};

struct acpi_power_register {
  u8 descriptor;
  u16 length;
  u8 space_id;
  u8 bit_width;
  u8 bit_offset;
  u8 access_size;
  u64 address;
} __attribute__((packed));

struct cstate_entry {
  struct {
    unsigned int eax;
    unsigned int ecx;
  } states[8];
};

typedef void (*nmi_shootdown_cb)(int, struct pt_regs*);

struct pci_ops___2;

enum allow_write_msrs {
  MSR_WRITES_ON = 0,
  MSR_WRITES_OFF = 1,
  MSR_WRITES_DEFAULT = 2,
};

struct cpuid_regs_done {
  struct cpuid_regs regs;
  struct completion done;
};

struct intel_early_ops {
  resource_size_t (*stolen_size)(int, int, int);
  resource_size_t (*stolen_base)(int, int, int, resource_size_t);
};

struct chipset {
  u32 vendor;
  u32 device;
  u32 class;
  u32 class_mask;
  u32 flags;
  void (*f)(int, int, int);
};

enum {
  SD_BALANCE_NEWIDLE = 1,
  SD_BALANCE_EXEC = 2,
  SD_BALANCE_FORK = 4,
  SD_BALANCE_WAKE = 8,
  SD_WAKE_AFFINE = 16,
  SD_ASYM_CPUCAPACITY = 32,
  SD_SHARE_CPUCAPACITY = 64,
  SD_SHARE_PKG_RESOURCES = 128,
  SD_SERIALIZE = 256,
  SD_ASYM_PACKING = 512,
  SD_PREFER_SIBLING = 1024,
  SD_OVERLAP = 2048,
  SD_NUMA = 4096,
};

struct sched_domain_shared {
  atomic_t ref;
  atomic_t nr_busy_cpus;
  int has_idle_cores;
};

struct sched_group;

struct sched_domain {
  struct sched_domain* parent;
  struct sched_domain* child;
  struct sched_group* groups;
  long unsigned int min_interval;
  long unsigned int max_interval;
  unsigned int busy_factor;
  unsigned int imbalance_pct;
  unsigned int cache_nice_tries;
  int nohz_idle;
  int flags;
  int level;
  long unsigned int last_balance;
  unsigned int balance_interval;
  unsigned int nr_balance_failed;
  u64 max_newidle_lb_cost;
  long unsigned int next_decay_max_lb_cost;
  u64 avg_scan_cost;
  unsigned int lb_count[3];
  unsigned int lb_failed[3];
  unsigned int lb_balanced[3];
  unsigned int lb_imbalance[3];
  unsigned int lb_gained[3];
  unsigned int lb_hot_gained[3];
  unsigned int lb_nobusyg[3];
  unsigned int lb_nobusyq[3];
  unsigned int alb_count;
  unsigned int alb_failed;
  unsigned int alb_pushed;
  unsigned int sbe_count;
  unsigned int sbe_balanced;
  unsigned int sbe_pushed;
  unsigned int sbf_count;
  unsigned int sbf_balanced;
  unsigned int sbf_pushed;
  unsigned int ttwu_wake_remote;
  unsigned int ttwu_move_affine;
  unsigned int ttwu_move_balance;
  char* name;
  union {
    void* private;
    struct callback_head rcu;
  };
  struct sched_domain_shared* shared;
  unsigned int span_weight;
  long unsigned int span[0];
};

typedef const struct cpumask* (*sched_domain_mask_f)(int);

typedef int (*sched_domain_flags_f)();

struct sched_group_capacity;

struct sd_data {
  struct sched_domain** sd;
  struct sched_domain_shared** sds;
  struct sched_group** sg;
  struct sched_group_capacity** sgc;
};

struct sched_domain_topology_level {
  sched_domain_mask_f mask;
  sched_domain_flags_f sd_flags;
  int flags;
  int numa_level;
  struct sd_data data;
  char* name;
};

struct tsc_adjust {
  s64 bootval;
  s64 adjusted;
  long unsigned int nextcheck;
  bool warned;
};

enum page_cache_mode {
  _PAGE_CACHE_MODE_WB = 0,
  _PAGE_CACHE_MODE_WC = 1,
  _PAGE_CACHE_MODE_UC_MINUS = 2,
  _PAGE_CACHE_MODE_UC = 3,
  _PAGE_CACHE_MODE_WT = 4,
  _PAGE_CACHE_MODE_WP = 5,
  _PAGE_CACHE_MODE_NUM = 8,
};

struct irq_cfg {
  unsigned int dest_apicid;
  unsigned int vector;
};

enum {
  IRQ_REMAP_XAPIC_MODE = 0,
  IRQ_REMAP_X2APIC_MODE = 1,
};

union apic_ir {
  long unsigned int map[4];
  u32 regs[8];
};

enum {
  X2APIC_OFF = 0,
  X2APIC_ON = 1,
  X2APIC_DISABLED = 2,
};

enum {
  IRQ_SET_MASK_OK = 0,
  IRQ_SET_MASK_OK_NOCOPY = 1,
  IRQ_SET_MASK_OK_DONE = 2,
};

enum {
  IRQD_TRIGGER_MASK = 15,
  IRQD_SETAFFINITY_PENDING = 256,
  IRQD_ACTIVATED = 512,
  IRQD_NO_BALANCING = 1024,
  IRQD_PER_CPU = 2048,
  IRQD_AFFINITY_SET = 4096,
  IRQD_LEVEL = 8192,
  IRQD_WAKEUP_STATE = 16384,
  IRQD_MOVE_PCNTXT = 32768,
  IRQD_IRQ_DISABLED = 65536,
  IRQD_IRQ_MASKED = 131072,
  IRQD_IRQ_INPROGRESS = 262144,
  IRQD_WAKEUP_ARMED = 524288,
  IRQD_FORWARDED_TO_VCPU = 1048576,
  IRQD_AFFINITY_MANAGED = 2097152,
  IRQD_IRQ_STARTED = 4194304,
  IRQD_MANAGED_SHUTDOWN = 8388608,
  IRQD_SINGLE_TARGET = 16777216,
  IRQD_DEFAULT_TRIGGER_SET = 33554432,
  IRQD_CAN_RESERVE = 67108864,
  IRQD_MSI_NOMASK_QUIRK = 134217728,
  IRQD_HANDLE_ENFORCE_IRQCTX = 268435456,
  IRQD_AFFINITY_ON_ACTIVATE = 536870912,
  IRQD_IRQ_ENABLED_ON_SUSPEND = 1073741824,
};

enum {
  IRQCHIP_FWNODE_REAL = 0,
  IRQCHIP_FWNODE_NAMED = 1,
  IRQCHIP_FWNODE_NAMED_ID = 2,
};

enum {
  X86_IRQ_ALLOC_CONTIGUOUS_VECTORS = 1,
  X86_IRQ_ALLOC_LEGACY = 2,
};

struct apic_chip_data {
  struct irq_cfg hw_irq_cfg;
  unsigned int vector;
  unsigned int prev_vector;
  unsigned int cpu;
  unsigned int prev_cpu;
  unsigned int irq;
  struct hlist_node clist;
  unsigned int move_in_progress : 1;
  unsigned int is_managed : 1;
  unsigned int can_reserve : 1;
  unsigned int has_reserved : 1;
};

struct irq_matrix;

struct mpc_ioapic {
  unsigned char type;
  unsigned char apicid;
  unsigned char apicver;
  unsigned char flags;
  unsigned int apicaddr;
};

enum {
  IRQ_TYPE_NONE = 0,
  IRQ_TYPE_EDGE_RISING = 1,
  IRQ_TYPE_EDGE_FALLING = 2,
  IRQ_TYPE_EDGE_BOTH = 3,
  IRQ_TYPE_LEVEL_HIGH = 4,
  IRQ_TYPE_LEVEL_LOW = 8,
  IRQ_TYPE_LEVEL_MASK = 12,
  IRQ_TYPE_SENSE_MASK = 15,
  IRQ_TYPE_DEFAULT = 15,
  IRQ_TYPE_PROBE = 16,
  IRQ_LEVEL = 256,
  IRQ_PER_CPU = 512,
  IRQ_NOPROBE = 1024,
  IRQ_NOREQUEST = 2048,
  IRQ_NOAUTOEN = 4096,
  IRQ_NO_BALANCING = 8192,
  IRQ_MOVE_PCNTXT = 16384,
  IRQ_NESTED_THREAD = 32768,
  IRQ_NOTHREAD = 65536,
  IRQ_PER_CPU_DEVID = 131072,
  IRQ_IS_POLLED = 262144,
  IRQ_DISABLE_UNLAZY = 524288,
  IRQ_HIDDEN = 1048576,
};

enum {
  IRQCHIP_SET_TYPE_MASKED = 1,
  IRQCHIP_EOI_IF_HANDLED = 2,
  IRQCHIP_MASK_ON_SUSPEND = 4,
  IRQCHIP_ONOFFLINE_ENABLED = 8,
  IRQCHIP_SKIP_SET_WAKE = 16,
  IRQCHIP_ONESHOT_SAFE = 32,
  IRQCHIP_EOI_THREADED = 64,
  IRQCHIP_SUPPORTS_LEVEL_MSI = 128,
  IRQCHIP_SUPPORTS_NMI = 256,
  IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND = 512,
};

union IO_APIC_reg_00 {
  u32 raw;
  struct {
    u32 __reserved_2 : 14;
    u32 LTS : 1;
    u32 delivery_type : 1;
    u32 __reserved_1 : 8;
    u32 ID : 8;
  } bits;
};

union IO_APIC_reg_01 {
  u32 raw;
  struct {
    u32 version : 8;
    u32 __reserved_2 : 7;
    u32 PRQ : 1;
    u32 entries : 8;
    u32 __reserved_1 : 8;
  } bits;
};

union IO_APIC_reg_02 {
  u32 raw;
  struct {
    u32 __reserved_2 : 24;
    u32 arbitration : 4;
    u32 __reserved_1 : 4;
  } bits;
};

union IO_APIC_reg_03 {
  u32 raw;
  struct {
    u32 boot_DT : 1;
    u32 __reserved_1 : 31;
  } bits;
};

struct IO_APIC_route_entry {
  union {
    struct {
      u64 vector : 8;
      u64 delivery_mode : 3;
      u64 dest_mode_logical : 1;
      u64 delivery_status : 1;
      u64 active_low : 1;
      u64 irr : 1;
      u64 is_level : 1;
      u64 masked : 1;
      u64 reserved_0 : 15;
      u64 reserved_1 : 17;
      u64 virt_destid_8_14 : 7;
      u64 destid_0_7 : 8;
    };
    struct {
      u64 ir_shared_0 : 8;
      u64 ir_zero : 3;
      u64 ir_index_15 : 1;
      u64 ir_shared_1 : 5;
      u64 ir_reserved_0 : 31;
      u64 ir_format : 1;
      u64 ir_index_0_14 : 15;
    };
    struct {
      u64 w1 : 32;
      u64 w2 : 32;
    };
  };
};

struct irq_pin_list {
  struct list_head list;
  int apic;
  int pin;
};

struct mp_chip_data {
  struct list_head irq_2_pin;
  struct IO_APIC_route_entry entry;
  bool is_level;
  bool active_low;
  bool isa_irq;
  u32 count;
};

struct mp_ioapic_gsi {
  u32 gsi_base;
  u32 gsi_end;
};

struct ioapic {
  int nr_registers;
  struct IO_APIC_route_entry* saved_registers;
  struct mpc_ioapic mp_config;
  struct mp_ioapic_gsi gsi_config;
  struct ioapic_domain_cfg irqdomain_cfg;
  struct irq_domain* irqdomain;
  struct resource* iomem_res;
};

struct io_apic {
  unsigned int index;
  unsigned int unused[3];
  unsigned int data;
  unsigned int unused2[11];
  unsigned int eoi;
};

enum {
  IRQ_DOMAIN_FLAG_HIERARCHY = 1,
  IRQ_DOMAIN_NAME_ALLOCATED = 2,
  IRQ_DOMAIN_FLAG_IPI_PER_CPU = 4,
  IRQ_DOMAIN_FLAG_IPI_SINGLE = 8,
  IRQ_DOMAIN_FLAG_MSI = 16,
  IRQ_DOMAIN_FLAG_MSI_REMAP = 32,
  IRQ_DOMAIN_MSI_NOMASK_QUIRK = 64,
  IRQ_DOMAIN_FLAG_NONCORE = 65536,
};

typedef struct irq_alloc_info msi_alloc_info_t;

struct msi_domain_info;

struct msi_domain_ops {
  irq_hw_number_t (*get_hwirq)(struct msi_domain_info*, msi_alloc_info_t*);
  int (*msi_init)(
      struct irq_domain*,
      struct msi_domain_info*,
      unsigned int,
      irq_hw_number_t,
      msi_alloc_info_t*);
  void (*msi_free)(struct irq_domain*, struct msi_domain_info*, unsigned int);
  int (*msi_check)(struct irq_domain*, struct msi_domain_info*, struct device*);
  int (
      *msi_prepare)(struct irq_domain*, struct device*, int, msi_alloc_info_t*);
  void (*msi_finish)(msi_alloc_info_t*, int);
  void (*set_desc)(msi_alloc_info_t*, struct msi_desc*);
  int (*handle_error)(struct irq_domain*, struct msi_desc*, int);
  int (*domain_alloc_irqs)(struct irq_domain*, struct device*, int);
  void (*domain_free_irqs)(struct irq_domain*, struct device*);
};

struct msi_domain_info {
  u32 flags;
  struct msi_domain_ops* ops;
  struct irq_chip* chip;
  void* chip_data;
  irq_flow_handler_t handler;
  void* handler_data;
  const char* handler_name;
  void* data;
};

enum {
  MSI_FLAG_USE_DEF_DOM_OPS = 1,
  MSI_FLAG_USE_DEF_CHIP_OPS = 2,
  MSI_FLAG_MULTI_PCI_MSI = 4,
  MSI_FLAG_PCI_MSIX = 8,
  MSI_FLAG_ACTIVATE_EARLY = 16,
  MSI_FLAG_MUST_REACTIVATE = 32,
  MSI_FLAG_LEVEL_CAPABLE = 64,
};

struct cluster_mask {
  unsigned int clusterid;
  int node;
  struct cpumask mask;
};

struct dyn_arch_ftrace {};

enum {
  FTRACE_OPS_FL_ENABLED = 1,
  FTRACE_OPS_FL_DYNAMIC = 2,
  FTRACE_OPS_FL_SAVE_REGS = 4,
  FTRACE_OPS_FL_SAVE_REGS_IF_SUPPORTED = 8,
  FTRACE_OPS_FL_RECURSION = 16,
  FTRACE_OPS_FL_STUB = 32,
  FTRACE_OPS_FL_INITIALIZED = 64,
  FTRACE_OPS_FL_DELETED = 128,
  FTRACE_OPS_FL_ADDING = 256,
  FTRACE_OPS_FL_REMOVING = 512,
  FTRACE_OPS_FL_MODIFYING = 1024,
  FTRACE_OPS_FL_ALLOC_TRAMP = 2048,
  FTRACE_OPS_FL_IPMODIFY = 4096,
  FTRACE_OPS_FL_PID = 8192,
  FTRACE_OPS_FL_RCU = 16384,
  FTRACE_OPS_FL_TRACE_ARRAY = 32768,
  FTRACE_OPS_FL_PERMANENT = 65536,
  FTRACE_OPS_FL_DIRECT = 131072,
};

enum {
  FTRACE_FL_ENABLED = 2147483648,
  FTRACE_FL_REGS = 1073741824,
  FTRACE_FL_REGS_EN = 536870912,
  FTRACE_FL_TRAMP = 268435456,
  FTRACE_FL_TRAMP_EN = 134217728,
  FTRACE_FL_IPMODIFY = 67108864,
  FTRACE_FL_DISABLED = 33554432,
  FTRACE_FL_DIRECT = 16777216,
  FTRACE_FL_DIRECT_EN = 8388608,
};

struct dyn_ftrace {
  long unsigned int ip;
  long unsigned int flags;
  struct dyn_arch_ftrace arch;
};

enum {
  FTRACE_UPDATE_IGNORE = 0,
  FTRACE_UPDATE_MAKE_CALL = 1,
  FTRACE_UPDATE_MODIFY_CALL = 2,
  FTRACE_UPDATE_MAKE_NOP = 3,
};

union ftrace_op_code_union {
  char code[7];
  struct {
    char op[3];
    int offset;
  } __attribute__((packed));
};

struct ftrace_rec_iter;

struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
};

typedef struct elf64_rela Elf64_Rela;

struct x86_mapping_info {
  void* (*alloc_pgt_page)(void*);
  void* context;
  long unsigned int page_flag;
  long unsigned int offset;
  bool direct_gbpages;
  long unsigned int kernpg_flag;
};

struct init_pgtable_data {
  struct x86_mapping_info* info;
  pgd_t* level4p;
};

struct kexec_buf {
  struct kimage* image;
  void* buffer;
  long unsigned int bufsz;
  long unsigned int mem;
  long unsigned int memsz;
  long unsigned int buf_align;
  long unsigned int buf_min;
  long unsigned int buf_max;
  bool top_down;
};

struct crash_mem_range {
  u64 start;
  u64 end;
};

struct crash_mem {
  unsigned int max_nr_ranges;
  unsigned int nr_ranges;
  struct crash_mem_range ranges[0];
};

struct crash_memmap_data {
  struct boot_params* params;
  unsigned int type;
};

struct kexec_entry64_regs {
  uint64_t rax;
  uint64_t rcx;
  uint64_t rdx;
  uint64_t rbx;
  uint64_t rsp;
  uint64_t rbp;
  uint64_t rsi;
  uint64_t rdi;
  uint64_t r8;
  uint64_t r9;
  uint64_t r10;
  uint64_t r11;
  uint64_t r12;
  uint64_t r13;
  uint64_t r14;
  uint64_t r15;
  uint64_t rip;
};

enum key_being_used_for {
  VERIFYING_MODULE_SIGNATURE = 0,
  VERIFYING_FIRMWARE_SIGNATURE = 1,
  VERIFYING_KEXEC_PE_SIGNATURE = 2,
  VERIFYING_KEY_SIGNATURE = 3,
  VERIFYING_KEY_SELF_SIGNATURE = 4,
  VERIFYING_UNSPECIFIED_SIGNATURE = 5,
  NR__KEY_BEING_USED_FOR = 6,
};

struct efi_setup_data {
  u64 fw_vendor;
  u64 __unused;
  u64 tables;
  u64 smbios;
  u64 reserved[8];
};

struct bzimage64_data {
  void* bootparams_buf;
};

struct freelist_node {
  atomic_t refs;
  struct freelist_node* next;
};

struct freelist_head {
  struct freelist_node* head;
};

struct kretprobe_instance;

typedef int (*kretprobe_handler_t)(struct kretprobe_instance*, struct pt_regs*);

struct kretprobe_holder;

struct kretprobe_instance {
  union {
    struct freelist_node freelist;
    struct callback_head rcu;
  };
  struct llist_node llist;
  struct kretprobe_holder* rph;
  kprobe_opcode_t* ret_addr;
  void* fp;
  char data[0];
};

struct kretprobe;

struct kretprobe_holder {
  struct kretprobe* rp;
  refcount_t ref;
};

struct kretprobe {
  struct kprobe kp;
  kretprobe_handler_t handler;
  kretprobe_handler_t entry_handler;
  int maxactive;
  int nmissed;
  size_t data_size;
  struct freelist_head freelist;
  struct kretprobe_holder* rph;
};

struct __arch_relative_insn {
  u8 op;
  s32 raddr;
} __attribute__((packed));

struct arch_optimized_insn {
  kprobe_opcode_t copied_insn[4];
  kprobe_opcode_t* insn;
  size_t size;
};

struct optimized_kprobe {
  struct kprobe kp;
  struct list_head list;
  struct arch_optimized_insn optinsn;
};

enum {
  TRACE_FTRACE_BIT = 0,
  TRACE_FTRACE_NMI_BIT = 1,
  TRACE_FTRACE_IRQ_BIT = 2,
  TRACE_FTRACE_SIRQ_BIT = 3,
  TRACE_INTERNAL_BIT = 4,
  TRACE_INTERNAL_NMI_BIT = 5,
  TRACE_INTERNAL_IRQ_BIT = 6,
  TRACE_INTERNAL_SIRQ_BIT = 7,
  TRACE_BRANCH_BIT = 8,
  TRACE_IRQ_BIT = 9,
  TRACE_GRAPH_BIT = 10,
  TRACE_GRAPH_DEPTH_START_BIT = 11,
  TRACE_GRAPH_DEPTH_END_BIT = 12,
  TRACE_GRAPH_NOTRACE_BIT = 13,
  TRACE_TRANSITION_BIT = 14,
  TRACE_RECORD_RECURSION_BIT = 15,
};

enum {
  TRACE_CTX_NMI = 0,
  TRACE_CTX_IRQ = 1,
  TRACE_CTX_SOFTIRQ = 2,
  TRACE_CTX_NORMAL = 3,
};

struct hpet_data {
  long unsigned int hd_phys_address;
  void* hd_address;
  short unsigned int hd_nirqs;
  unsigned int hd_state;
  unsigned int hd_irq[32];
};

typedef irqreturn_t (*rtc_irq_handler)(int, void*);

enum hpet_mode {
  HPET_MODE_UNUSED = 0,
  HPET_MODE_LEGACY = 1,
  HPET_MODE_CLOCKEVT = 2,
  HPET_MODE_DEVICE = 3,
};

struct hpet_channel {
  struct clock_event_device evt;
  unsigned int num;
  unsigned int cpu;
  unsigned int irq;
  unsigned int in_use;
  enum hpet_mode mode;
  unsigned int boot_cfg;
  char name[10];
  long : 48;
  long : 64;
  long : 64;
  long : 64;
};

struct hpet_base {
  unsigned int nr_channels;
  unsigned int nr_clockevents;
  unsigned int boot_cfg;
  struct hpet_channel* channels;
};

union hpet_lock {
  struct {
    arch_spinlock_t lock;
    u32 value;
  };
  u64 lockval;
};

struct amd_northbridge_info {
  u16 num;
  u64 flags;
  struct amd_northbridge* nb;
};

struct swait_queue {
  struct task_struct* task;
  struct list_head task_list;
};

struct kvm_steal_time {
  __u64 steal;
  __u32 version;
  __u32 flags;
  __u8 preempted;
  __u8 u8_pad[3];
  __u32 pad[11];
};

struct kvm_vcpu_pv_apf_data {
  __u32 flags;
  __u32 token;
  __u8 pad[56];
  __u32 enabled;
};

struct kvm_task_sleep_node {
  struct hlist_node link;
  struct swait_queue_head wq;
  u32 token;
  int cpu;
};

struct kvm_task_sleep_head {
  raw_spinlock_t lock;
  struct hlist_head list;
};

struct pvclock_wall_clock {
  u32 version;
  u32 sec;
  u32 nsec;
};

enum paravirt_lazy_mode {
  PARAVIRT_LAZY_NONE = 0,
  PARAVIRT_LAZY_MMU = 1,
  PARAVIRT_LAZY_CPU = 2,
};

struct branch {
  unsigned char opcode;
  u32 delta;
} __attribute__((packed));

typedef long unsigned int ulong;

struct uprobe_xol_ops;

struct arch_uprobe {
  union {
    u8 insn[16];
    u8 ixol[16];
  };
  const struct uprobe_xol_ops* ops;
  union {
    struct {
      s32 offs;
      u8 ilen;
      u8 opc1;
    } branch;
    struct {
      u8 fixups;
      u8 ilen;
    } defparam;
    struct {
      u8 reg_offset;
      u8 ilen;
    } push;
  };
};

struct uprobe_xol_ops {
  bool (*emulate)(struct arch_uprobe*, struct pt_regs*);
  int (*pre_xol)(struct arch_uprobe*, struct pt_regs*);
  int (*post_xol)(struct arch_uprobe*, struct pt_regs*);
  void (*abort)(struct arch_uprobe*, struct pt_regs*);
};

enum rp_check {
  RP_CHECK_CALL = 0,
  RP_CHECK_CHAIN_CALL = 1,
  RP_CHECK_RET = 2,
};

struct fb_fix_screeninfo {
  char id[16];
  long unsigned int smem_start;
  __u32 smem_len;
  __u32 type;
  __u32 type_aux;
  __u32 visual;
  __u16 xpanstep;
  __u16 ypanstep;
  __u16 ywrapstep;
  __u32 line_length;
  long unsigned int mmio_start;
  __u32 mmio_len;
  __u32 accel;
  __u16 capabilities;
  __u16 reserved[2];
};

struct fb_bitfield {
  __u32 offset;
  __u32 length;
  __u32 msb_right;
};

struct fb_var_screeninfo {
  __u32 xres;
  __u32 yres;
  __u32 xres_virtual;
  __u32 yres_virtual;
  __u32 xoffset;
  __u32 yoffset;
  __u32 bits_per_pixel;
  __u32 grayscale;
  struct fb_bitfield red;
  struct fb_bitfield green;
  struct fb_bitfield blue;
  struct fb_bitfield transp;
  __u32 nonstd;
  __u32 activate;
  __u32 height;
  __u32 width;
  __u32 accel_flags;
  __u32 pixclock;
  __u32 left_margin;
  __u32 right_margin;
  __u32 upper_margin;
  __u32 lower_margin;
  __u32 hsync_len;
  __u32 vsync_len;
  __u32 sync;
  __u32 vmode;
  __u32 rotate;
  __u32 colorspace;
  __u32 reserved[4];
};

struct fb_cmap {
  __u32 start;
  __u32 len;
  __u16* red;
  __u16* green;
  __u16* blue;
  __u16* transp;
};

struct fb_copyarea {
  __u32 dx;
  __u32 dy;
  __u32 width;
  __u32 height;
  __u32 sx;
  __u32 sy;
};

struct fb_fillrect {
  __u32 dx;
  __u32 dy;
  __u32 width;
  __u32 height;
  __u32 color;
  __u32 rop;
};

struct fb_image {
  __u32 dx;
  __u32 dy;
  __u32 width;
  __u32 height;
  __u32 fg_color;
  __u32 bg_color;
  __u8 depth;
  const char* data;
  struct fb_cmap cmap;
};

struct fbcurpos {
  __u16 x;
  __u16 y;
};

struct fb_cursor {
  __u16 set;
  __u16 enable;
  __u16 rop;
  const char* mask;
  struct fbcurpos hot;
  struct fb_image image;
};

struct fb_chroma {
  __u32 redx;
  __u32 greenx;
  __u32 bluex;
  __u32 whitex;
  __u32 redy;
  __u32 greeny;
  __u32 bluey;
  __u32 whitey;
};

struct fb_videomode;

struct fb_monspecs {
  struct fb_chroma chroma;
  struct fb_videomode* modedb;
  __u8 manufacturer[4];
  __u8 monitor[14];
  __u8 serial_no[14];
  __u8 ascii[14];
  __u32 modedb_len;
  __u32 model;
  __u32 serial;
  __u32 year;
  __u32 week;
  __u32 hfmin;
  __u32 hfmax;
  __u32 dclkmin;
  __u32 dclkmax;
  __u16 input;
  __u16 dpms;
  __u16 signal;
  __u16 vfmin;
  __u16 vfmax;
  __u16 gamma;
  __u16 gtf : 1;
  __u16 misc;
  __u8 version;
  __u8 revision;
  __u8 max_x;
  __u8 max_y;
};

struct fb_info;

struct fb_pixmap {
  u8* addr;
  u32 size;
  u32 offset;
  u32 buf_align;
  u32 scan_align;
  u32 access_align;
  u32 flags;
  u32 blit_x;
  u32 blit_y;
  void (*writeio)(struct fb_info*, void*, void*, unsigned int);
  void (*readio)(struct fb_info*, void*, void*, unsigned int);
};

struct fb_ops;

struct apertures_struct;

struct fb_info {
  atomic_t count;
  int node;
  int flags;
  int fbcon_rotate_hint;
  struct mutex lock;
  struct mutex mm_lock;
  struct fb_var_screeninfo var;
  struct fb_fix_screeninfo fix;
  struct fb_monspecs monspecs;
  struct work_struct queue;
  struct fb_pixmap pixmap;
  struct fb_pixmap sprite;
  struct fb_cmap cmap;
  struct list_head modelist;
  struct fb_videomode* mode;
  const struct fb_ops* fbops;
  struct device* device;
  struct device* dev;
  int class_flag;
  union {
    char* screen_base;
    char* screen_buffer;
  };
  long unsigned int screen_size;
  void* pseudo_palette;
  u32 state;
  void* fbcon_par;
  void* par;
  struct apertures_struct* apertures;
  bool skip_vt_switch;
};

struct fb_videomode {
  const char* name;
  u32 refresh;
  u32 xres;
  u32 yres;
  u32 pixclock;
  u32 left_margin;
  u32 right_margin;
  u32 upper_margin;
  u32 lower_margin;
  u32 hsync_len;
  u32 vsync_len;
  u32 sync;
  u32 vmode;
  u32 flag;
};

struct fb_blit_caps {
  u32 x;
  u32 y;
  u32 len;
  u32 flags;
};

struct fb_ops {
  struct module* owner;
  int (*fb_open)(struct fb_info*, int);
  int (*fb_release)(struct fb_info*, int);
  ssize_t (*fb_read)(struct fb_info*, char*, size_t, loff_t*);
  ssize_t (*fb_write)(struct fb_info*, const char*, size_t, loff_t*);
  int (*fb_check_var)(struct fb_var_screeninfo*, struct fb_info*);
  int (*fb_set_par)(struct fb_info*);
  int (*fb_setcolreg)(
      unsigned int,
      unsigned int,
      unsigned int,
      unsigned int,
      unsigned int,
      struct fb_info*);
  int (*fb_setcmap)(struct fb_cmap*, struct fb_info*);
  int (*fb_blank)(int, struct fb_info*);
  int (*fb_pan_display)(struct fb_var_screeninfo*, struct fb_info*);
  void (*fb_fillrect)(struct fb_info*, const struct fb_fillrect*);
  void (*fb_copyarea)(struct fb_info*, const struct fb_copyarea*);
  void (*fb_imageblit)(struct fb_info*, const struct fb_image*);
  int (*fb_cursor)(struct fb_info*, struct fb_cursor*);
  int (*fb_sync)(struct fb_info*);
  int (*fb_ioctl)(struct fb_info*, unsigned int, long unsigned int);
  int (*fb_compat_ioctl)(struct fb_info*, unsigned int, long unsigned int);
  int (*fb_mmap)(struct fb_info*, struct vm_area_struct*);
  void (*fb_get_caps)(
      struct fb_info*,
      struct fb_blit_caps*,
      struct fb_var_screeninfo*);
  void (*fb_destroy)(struct fb_info*);
  int (*fb_debug_enter)(struct fb_info*);
  int (*fb_debug_leave)(struct fb_info*);
};

struct aperture {
  resource_size_t base;
  resource_size_t size;
};

struct apertures_struct {
  unsigned int count;
  struct aperture ranges[0];
};

struct dmt_videomode {
  u32 dmt_id;
  u32 std_2byte_code;
  u32 cvt_3byte_code;
  const struct fb_videomode* mode;
};

struct simplefb_platform_data {
  u32 width;
  u32 height;
  u32 stride;
  const char* format;
};

struct efifb_dmi_info {
  char* optname;
  long unsigned int base;
  int stride;
  int width;
  int height;
  int flags;
};

enum {
  M_I17 = 0,
  M_I20 = 1,
  M_I20_SR = 2,
  M_I24 = 3,
  M_I24_8_1 = 4,
  M_I24_10_1 = 5,
  M_I27_11_1 = 6,
  M_MINI = 7,
  M_MINI_3_1 = 8,
  M_MINI_4_1 = 9,
  M_MB = 10,
  M_MB_2 = 11,
  M_MB_3 = 12,
  M_MB_5_1 = 13,
  M_MB_6_1 = 14,
  M_MB_7_1 = 15,
  M_MB_SR = 16,
  M_MBA = 17,
  M_MBA_3 = 18,
  M_MBP = 19,
  M_MBP_2 = 20,
  M_MBP_2_2 = 21,
  M_MBP_SR = 22,
  M_MBP_4 = 23,
  M_MBP_5_1 = 24,
  M_MBP_5_2 = 25,
  M_MBP_5_3 = 26,
  M_MBP_6_1 = 27,
  M_MBP_6_2 = 28,
  M_MBP_7_1 = 29,
  M_MBP_8_2 = 30,
  M_UNKNOWN = 31,
};

enum {
  OVERRIDE_NONE = 0,
  OVERRIDE_BASE = 1,
  OVERRIDE_STRIDE = 2,
  OVERRIDE_HEIGHT = 4,
  OVERRIDE_WIDTH = 8,
};

enum perf_sample_regs_abi {
  PERF_SAMPLE_REGS_ABI_NONE = 0,
  PERF_SAMPLE_REGS_ABI_32 = 1,
  PERF_SAMPLE_REGS_ABI_64 = 2,
};

struct va_format {
  const char* fmt;
  va_list* va;
};

enum pg_level {
  PG_LEVEL_NONE = 0,
  PG_LEVEL_4K = 1,
  PG_LEVEL_2M = 2,
  PG_LEVEL_1G = 3,
  PG_LEVEL_512G = 4,
  PG_LEVEL_NUM = 5,
};

enum es_result {
  ES_OK = 0,
  ES_UNSUPPORTED = 1,
  ES_VMM_ERROR = 2,
  ES_DECODE_FAILED = 3,
  ES_EXCEPTION = 4,
  ES_RETRY = 5,
};

struct es_fault_info {
  long unsigned int vector;
  long unsigned int error_code;
  long unsigned int cr2;
};

struct es_em_ctxt {
  struct pt_regs* regs;
  struct insn insn;
  struct es_fault_info fi;
};

struct sev_es_runtime_data {
  struct ghcb ghcb_page;
  char ist_stack[4096];
  char fallback_stack[4096];
  struct ghcb backup_ghcb;
  bool ghcb_active;
  bool backup_ghcb_active;
  long unsigned int dr7;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct ghcb_state {
  struct ghcb* ghcb;
};

struct pci_hostbridge_probe {
  u32 bus;
  u32 slot;
  u32 vendor;
  u32 device;
};

typedef u16 uint16_t;

struct trace_print_flags {
  long unsigned int mask;
  const char* name;
};

enum tlb_flush_reason {
  TLB_FLUSH_ON_TASK_SWITCH = 0,
  TLB_REMOTE_SHOOTDOWN = 1,
  TLB_LOCAL_SHOOTDOWN = 2,
  TLB_LOCAL_MM_SHOOTDOWN = 3,
  TLB_REMOTE_SEND_IPI = 4,
  NR_TLB_FLUSH_REASONS = 5,
};

enum {
  REGION_INTERSECTS = 0,
  REGION_DISJOINT = 1,
  REGION_MIXED = 2,
};

struct trace_event_raw_tlb_flush {
  struct trace_entry ent;
  int reason;
  long unsigned int pages;
  char __data[0];
};

struct trace_event_data_offsets_tlb_flush {};

typedef void (*btf_trace_tlb_flush)(void*, int, long unsigned int);

struct map_range {
  long unsigned int start;
  long unsigned int end;
  unsigned int page_size_mask;
};

enum {
  MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE = 12,
  SECTION_INFO = 12,
  MIX_SECTION_INFO = 13,
  NODE_INFO = 14,
  MEMORY_HOTPLUG_MAX_BOOTMEM_TYPE = 14,
};

struct mhp_params {
  struct vmem_altmap* altmap;
  pgprot_t pgprot;
};

enum kcore_type {
  KCORE_TEXT = 0,
  KCORE_VMALLOC = 1,
  KCORE_RAM = 2,
  KCORE_VMEMMAP = 3,
  KCORE_USER = 4,
  KCORE_OTHER = 5,
  KCORE_REMAP = 6,
};

struct kcore_list {
  struct list_head list;
  long unsigned int addr;
  long unsigned int vaddr;
  size_t size;
  int type;
};

struct trace_event_raw_x86_exceptions {
  struct trace_entry ent;
  long unsigned int address;
  long unsigned int ip;
  long unsigned int error_code;
  char __data[0];
};

struct trace_event_data_offsets_x86_exceptions {};

typedef void (*btf_trace_page_fault_user)(
    void*,
    long unsigned int,
    struct pt_regs*,
    long unsigned int);

typedef void (*btf_trace_page_fault_kernel)(
    void*,
    long unsigned int,
    struct pt_regs*,
    long unsigned int);

enum {
  IORES_MAP_SYSTEM_RAM = 1,
  IORES_MAP_ENCRYPTED = 2,
};

struct ioremap_desc {
  unsigned int flags;
};

typedef bool (*ex_handler_t)(
    const struct exception_table_entry*,
    struct pt_regs*,
    int,
    long unsigned int,
    long unsigned int);

struct hugepage_subpool {
  spinlock_t lock;
  long int count;
  long int max_hpages;
  long int used_hpages;
  struct hstate* hstate;
  long int min_hpages;
  long int rsv_hpages;
};

struct hugetlbfs_sb_info {
  long int max_inodes;
  long int free_inodes;
  spinlock_t stat_lock;
  struct hstate* hstate;
  struct hugepage_subpool* spool;
  kuid_t uid;
  kgid_t gid;
  umode_t mode;
};

struct exception_stacks {
  char DF_stack_guard[0];
  char DF_stack[4096];
  char NMI_stack_guard[0];
  char NMI_stack[4096];
  char DB_stack_guard[0];
  char DB_stack[4096];
  char MCE_stack_guard[0];
  char MCE_stack[4096];
  char VC_stack_guard[0];
  char VC_stack[0];
  char VC2_stack_guard[0];
  char VC2_stack[0];
  char IST_top_guard[0];
};

struct cpa_data {
  long unsigned int* vaddr;
  pgd_t* pgd;
  pgprot_t mask_set;
  pgprot_t mask_clr;
  long unsigned int numpages;
  long unsigned int curpage;
  long unsigned int pfn;
  unsigned int flags;
  unsigned int force_split : 1;
  unsigned int force_static_prot : 1;
  unsigned int force_flush_all : 1;
  struct page** pages;
};

enum cpa_warn {
  CPA_CONFLICT = 0,
  CPA_PROTECT = 1,
  CPA_DETECT = 2,
};

typedef struct {
  u64 val;
} pfn_t;

struct memtype {
  u64 start;
  u64 end;
  u64 subtree_max_end;
  enum page_cache_mode type;
  struct rb_node rb;
};

enum {
  PAT_UC = 0,
  PAT_WC = 1,
  PAT_WT = 4,
  PAT_WP = 5,
  PAT_WB = 6,
  PAT_UC_MINUS = 7,
};

struct pagerange_state {
  long unsigned int cur_pfn;
  int ram;
  int not_ram;
};

struct rb_augment_callbacks {
  void (*propagate)(struct rb_node*, struct rb_node*);
  void (*copy)(struct rb_node*, struct rb_node*);
  void (*rotate)(struct rb_node*, struct rb_node*);
};

enum {
  MEMTYPE_EXACT_MATCH = 0,
  MEMTYPE_END_MATCH = 1,
};

struct numa_memblk {
  u64 start;
  u64 end;
  int nid;
};

struct numa_meminfo {
  int nr_blks;
  struct numa_memblk blk[16];
};

struct acpi_srat_cpu_affinity {
  struct acpi_subtable_header header;
  u8 proximity_domain_lo;
  u8 apic_id;
  u32 flags;
  u8 local_sapic_eid;
  u8 proximity_domain_hi[3];
  u32 clock_domain;
};

struct acpi_srat_x2apic_cpu_affinity {
  struct acpi_subtable_header header;
  u16 reserved;
  u32 proximity_domain;
  u32 apic_id;
  u32 flags;
  u32 clock_domain;
  u32 reserved2;
};

enum uv_system_type {
  UV_NONE = 0,
  UV_LEGACY_APIC = 1,
  UV_X2APIC = 2,
};

enum pti_mode {
  PTI_AUTO = 0,
  PTI_FORCE_OFF = 1,
  PTI_FORCE_ON = 2,
};

enum pti_clone_level {
  PTI_CLONE_PMD = 0,
  PTI_CLONE_PTE = 1,
};

struct sme_populate_pgd_data {
  void* pgtable_area;
  pgd_t* pgd;
  pmdval_t pmd_flags;
  pteval_t pte_flags;
  long unsigned int paddr;
  long unsigned int vaddr;
  long unsigned int vaddr_end;
};

struct crypto_async_request;

typedef void (*crypto_completion_t)(struct crypto_async_request*, int);

struct crypto_tfm;

struct crypto_async_request {
  struct list_head list;
  crypto_completion_t complete;
  void* data;
  struct crypto_tfm* tfm;
  u32 flags;
};

struct crypto_alg;

struct crypto_tfm {
  u32 crt_flags;
  int node;
  void (*exit)(struct crypto_tfm*);
  struct crypto_alg* __crt_alg;
  void* __crt_ctx[0];
};

struct cipher_alg {
  unsigned int cia_min_keysize;
  unsigned int cia_max_keysize;
  int (*cia_setkey)(struct crypto_tfm*, const u8*, unsigned int);
  void (*cia_encrypt)(struct crypto_tfm*, u8*, const u8*);
  void (*cia_decrypt)(struct crypto_tfm*, u8*, const u8*);
};

struct compress_alg {
  int (*coa_compress)(
      struct crypto_tfm*,
      const u8*,
      unsigned int,
      u8*,
      unsigned int*);
  int (*coa_decompress)(
      struct crypto_tfm*,
      const u8*,
      unsigned int,
      u8*,
      unsigned int*);
};

struct crypto_type;

struct crypto_alg {
  struct list_head cra_list;
  struct list_head cra_users;
  u32 cra_flags;
  unsigned int cra_blocksize;
  unsigned int cra_ctxsize;
  unsigned int cra_alignmask;
  int cra_priority;
  refcount_t cra_refcnt;
  char cra_name[128];
  char cra_driver_name[128];
  const struct crypto_type* cra_type;
  union {
    struct cipher_alg cipher;
    struct compress_alg compress;
  } cra_u;
  int (*cra_init)(struct crypto_tfm*);
  void (*cra_exit)(struct crypto_tfm*);
  void (*cra_destroy)(struct crypto_alg*);
  struct module* cra_module;
};

struct crypto_instance;

struct crypto_type {
  unsigned int (*ctxsize)(struct crypto_alg*, u32, u32);
  unsigned int (*extsize)(struct crypto_alg*);
  int (*init)(struct crypto_tfm*, u32, u32);
  int (*init_tfm)(struct crypto_tfm*);
  void (*show)(struct seq_file*, struct crypto_alg*);
  int (*report)(struct sk_buff*, struct crypto_alg*);
  void (*free)(struct crypto_instance*);
  unsigned int type;
  unsigned int maskclear;
  unsigned int maskset;
  unsigned int tfmsize;
};

struct crypto_template;

struct crypto_spawn;

struct crypto_instance {
  struct crypto_alg alg;
  struct crypto_template* tmpl;
  union {
    struct hlist_node list;
    struct crypto_spawn* spawns;
  };
  void* __ctx[0];
};

struct crypto_spawn {
  struct list_head list;
  struct crypto_alg* alg;
  union {
    struct crypto_instance* inst;
    struct crypto_spawn* next;
  };
  const struct crypto_type* frontend;
  u32 mask;
  bool dead;
  bool registered;
};

struct rtattr;

struct crypto_template {
  struct list_head list;
  struct hlist_head instances;
  struct module* module;
  int (*create)(struct crypto_template*, struct rtattr**);
  char name[128];
};

struct scatter_walk {
  struct scatterlist* sg;
  unsigned int offset;
};

struct crypto_aes_ctx {
  u32 key_enc[60];
  u32 key_dec[60];
  u32 key_length;
};

struct skcipher_request {
  unsigned int cryptlen;
  u8* iv;
  struct scatterlist* src;
  struct scatterlist* dst;
  struct crypto_async_request base;
  void* __ctx[0];
};

struct crypto_skcipher {
  unsigned int reqsize;
  struct crypto_tfm base;
};

struct skcipher_alg {
  int (*setkey)(struct crypto_skcipher*, const u8*, unsigned int);
  int (*encrypt)(struct skcipher_request*);
  int (*decrypt)(struct skcipher_request*);
  int (*init)(struct crypto_skcipher*);
  void (*exit)(struct crypto_skcipher*);
  unsigned int min_keysize;
  unsigned int max_keysize;
  unsigned int ivsize;
  unsigned int chunksize;
  unsigned int walksize;
  struct crypto_alg base;
};

struct skcipher_walk {
  union {
    struct {
      struct page* page;
      long unsigned int offset;
    } phys;
    struct {
      u8* page;
      void* addr;
    } virt;
  } src;
  union {
    struct {
      struct page* page;
      long unsigned int offset;
    } phys;
    struct {
      u8* page;
      void* addr;
    } virt;
  } dst;
  struct scatter_walk in;
  unsigned int nbytes;
  struct scatter_walk out;
  unsigned int total;
  struct list_head buffers;
  u8* page;
  u8* buffer;
  u8* oiv;
  void* iv;
  unsigned int ivsize;
  int flags;
  unsigned int blocksize;
  unsigned int stride;
  unsigned int alignmask;
};

struct aead_request {
  struct crypto_async_request base;
  unsigned int assoclen;
  unsigned int cryptlen;
  u8* iv;
  struct scatterlist* src;
  struct scatterlist* dst;
  void* __ctx[0];
};

struct crypto_aead;

struct aead_alg {
  int (*setkey)(struct crypto_aead*, const u8*, unsigned int);
  int (*setauthsize)(struct crypto_aead*, unsigned int);
  int (*encrypt)(struct aead_request*);
  int (*decrypt)(struct aead_request*);
  int (*init)(struct crypto_aead*);
  void (*exit)(struct crypto_aead*);
  unsigned int ivsize;
  unsigned int maxauthsize;
  unsigned int chunksize;
  struct crypto_alg base;
};

struct crypto_aead {
  unsigned int authsize;
  unsigned int reqsize;
  struct crypto_tfm base;
};

struct aesni_rfc4106_gcm_ctx {
  u8 hash_subkey[16];
  struct crypto_aes_ctx aes_key_expanded;
  u8 nonce[4];
  long : 64;
};

struct generic_gcmaes_ctx {
  u8 hash_subkey[16];
  struct crypto_aes_ctx aes_key_expanded;
  long : 32;
  long : 64;
};

struct aesni_xts_ctx {
  u8 raw_tweak_ctx[484];
  long : 32;
  long : 64;
  u8 raw_crypt_ctx[484];
  long : 32;
  long : 64;
};

struct gcm_context_data {
  u8 aad_hash[16];
  u64 aad_length;
  u64 in_length;
  u8 partial_block_enc_key[16];
  u8 orig_IV[16];
  u8 current_counter[16];
  u64 partial_block_len;
  u64 unused;
  u8 hash_keys[256];
};

struct simd_skcipher_alg;

struct simd_aead_alg;

struct crypto_shash;

struct shash_desc {
  struct crypto_shash* tfm;
  void* __ctx[0];
};

struct crypto_shash {
  unsigned int descsize;
  struct crypto_tfm base;
};

struct shash_alg {
  int (*init)(struct shash_desc*);
  int (*update)(struct shash_desc*, const u8*, unsigned int);
  int (*final)(struct shash_desc*, u8*);
  int (*finup)(struct shash_desc*, const u8*, unsigned int, u8*);
  int (*digest)(struct shash_desc*, const u8*, unsigned int, u8*);
  int (*export)(struct shash_desc*, void*);
  int (*import)(struct shash_desc*, const void*);
  int (*setkey)(struct crypto_shash*, const u8*, unsigned int);
  int (*init_tfm)(struct crypto_shash*);
  void (*exit_tfm)(struct crypto_shash*);
  unsigned int descsize;
  int : 32;
  unsigned int digestsize;
  unsigned int statesize;
  struct crypto_alg base;
};

struct sha1_state {
  u32 state[5];
  u64 count;
  u8 buffer[64];
};

typedef void sha1_block_fn(struct sha1_state*, const u8*, int);

struct sigcontext_32 {
  __u16 gs;
  __u16 __gsh;
  __u16 fs;
  __u16 __fsh;
  __u16 es;
  __u16 __esh;
  __u16 ds;
  __u16 __dsh;
  __u32 di;
  __u32 si;
  __u32 bp;
  __u32 sp;
  __u32 bx;
  __u32 dx;
  __u32 cx;
  __u32 ax;
  __u32 trapno;
  __u32 err;
  __u32 ip;
  __u16 cs;
  __u16 __csh;
  __u32 flags;
  __u32 sp_at_signal;
  __u16 ss;
  __u16 __ssh;
  __u32 fpstate;
  __u32 oldmask;
  __u32 cr2;
};

typedef u32 compat_size_t;

struct compat_sigaltstack {
  compat_uptr_t ss_sp;
  int ss_flags;
  compat_size_t ss_size;
};

typedef struct compat_sigaltstack compat_stack_t;

struct ucontext_ia32 {
  unsigned int uc_flags;
  unsigned int uc_link;
  compat_stack_t uc_stack;
  struct sigcontext_32 uc_mcontext;
  compat_sigset_t uc_sigmask;
};

struct sigframe_ia32 {
  u32 pretcode;
  int sig;
  struct sigcontext_32 sc;
  struct _fpstate_32 fpstate_unused;
  unsigned int extramask[1];
  char retcode[8];
};

struct rt_sigframe_ia32 {
  u32 pretcode;
  int sig;
  u32 pinfo;
  u32 puc;
  compat_siginfo_t info;
  struct ucontext_ia32 uc;
  char retcode[8];
};

typedef struct {
  efi_guid_t guid;
  u64 table;
} efi_config_table_64_t;

struct efi_memory_map_data {
  phys_addr_t phys_map;
  long unsigned int size;
  long unsigned int desc_version;
  long unsigned int desc_size;
  long unsigned int flags;
};

struct efi_mem_range {
  struct range range;
  u64 attribute;
};

typedef struct {
  efi_guid_t guid;
  long unsigned int* ptr;
  const char name[16];
} efi_config_table_type_t;

typedef struct {
  efi_table_hdr_t hdr;
  u64 fw_vendor;
  u32 fw_revision;
  u32 __pad1;
  u64 con_in_handle;
  u64 con_in;
  u64 con_out_handle;
  u64 con_out;
  u64 stderr_handle;
  u64 stderr;
  u64 runtime;
  u64 boottime;
  u32 nr_tables;
  u32 __pad2;
  u64 tables;
} efi_system_table_64_t;

typedef struct {
  efi_table_hdr_t hdr;
  u32 fw_vendor;
  u32 fw_revision;
  u32 con_in_handle;
  u32 con_in;
  u32 con_out_handle;
  u32 con_out;
  u32 stderr_handle;
  u32 stderr;
  u32 runtime;
  u32 boottime;
  u32 nr_tables;
  u32 tables;
} efi_system_table_32_t;

typedef struct {
  u32 version;
  u32 length;
  u64 memory_protection_attribute;
} efi_properties_table_t;

union efi_boot_services;

typedef union efi_boot_services efi_boot_services_t;

union efi_simple_text_input_protocol;

typedef union efi_simple_text_input_protocol efi_simple_text_input_protocol_t;

union efi_simple_text_output_protocol;

typedef union efi_simple_text_output_protocol efi_simple_text_output_protocol_t;

typedef union {
  struct {
    efi_table_hdr_t hdr;
    long unsigned int fw_vendor;
    u32 fw_revision;
    long unsigned int con_in_handle;
    efi_simple_text_input_protocol_t* con_in;
    long unsigned int con_out_handle;
    efi_simple_text_output_protocol_t* con_out;
    long unsigned int stderr_handle;
    long unsigned int stderr;
    efi_runtime_services_t* runtime;
    efi_boot_services_t* boottime;
    long unsigned int nr_tables;
    long unsigned int tables;
  };
  efi_system_table_32_t mixed_mode;
} efi_system_table_t;

enum {
  DUMP_PREFIX_NONE = 0,
  DUMP_PREFIX_ADDRESS = 1,
  DUMP_PREFIX_OFFSET = 2,
};

enum {
  BPF_REG_0 = 0,
  BPF_REG_1 = 1,
  BPF_REG_2 = 2,
  BPF_REG_3 = 3,
  BPF_REG_4 = 4,
  BPF_REG_5 = 5,
  BPF_REG_6 = 6,
  BPF_REG_7 = 7,
  BPF_REG_8 = 8,
  BPF_REG_9 = 9,
  BPF_REG_10 = 10,
  __MAX_BPF_REG = 11,
};

struct bpf_tramp_progs {
  struct bpf_prog* progs[38];
  int nr_progs;
};

enum bpf_jit_poke_reason {
  BPF_POKE_REASON_TAIL_CALL = 0,
};

struct bpf_array_aux {
  enum bpf_prog_type type;
  bool jited;
  struct list_head poke_progs;
  struct bpf_map* map;
  struct mutex poke_mutex;
  struct work_struct work;
};

struct bpf_array {
  struct bpf_map map;
  u32 elem_size;
  u32 index_mask;
  struct bpf_array_aux* aux;
  union {
    char value[0];
    void* ptrs[0];
    void* pptrs[0];
  };
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum bpf_text_poke_type {
  BPF_MOD_CALL = 0,
  BPF_MOD_JUMP = 1,
};

struct bpf_binary_header {
  u32 pages;
  int : 32;
  u8 image[0];
};

struct jit_context {
  int cleanup_addr;
};

struct x64_jit_data {
  struct bpf_binary_header* header;
  int* addrs;
  u8* image;
  int proglen;
  struct jit_context ctx;
};

enum tk_offsets {
  TK_OFFS_REAL = 0,
  TK_OFFS_BOOT = 1,
  TK_OFFS_TAI = 2,
  TK_OFFS_MAX = 3,
};

struct clone_args {
  __u64 flags;
  __u64 pidfd;
  __u64 child_tid;
  __u64 parent_tid;
  __u64 exit_signal;
  __u64 stack;
  __u64 stack_size;
  __u64 tls;
  __u64 set_tid;
  __u64 set_tid_size;
  __u64 cgroup;
};

struct fdtable {
  unsigned int max_fds;
  struct file** fd;
  long unsigned int* close_on_exec;
  long unsigned int* open_fds;
  long unsigned int* full_fds_bits;
  struct callback_head rcu;
};

struct files_struct {
  atomic_t count;
  bool resize_in_progress;
  wait_queue_head_t resize_wait;
  struct fdtable* fdt;
  struct fdtable fdtab;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t file_lock;
  unsigned int next_fd;
  long unsigned int close_on_exec_init[1];
  long unsigned int open_fds_init[1];
  long unsigned int full_fds_bits_init[1];
  struct file* fd_array[64];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct robust_list {
  struct robust_list* next;
};

struct robust_list_head {
  struct robust_list list;
  long int futex_offset;
  struct robust_list* list_op_pending;
};

struct multiprocess_signals {
  sigset_t signal;
  struct hlist_node node;
};

typedef int (*proc_visitor)(struct task_struct*, void*);

enum {
  IOPRIO_CLASS_NONE = 0,
  IOPRIO_CLASS_RT = 1,
  IOPRIO_CLASS_BE = 2,
  IOPRIO_CLASS_IDLE = 3,
};

enum {
  FUTEX_STATE_OK = 0,
  FUTEX_STATE_EXITING = 1,
  FUTEX_STATE_DEAD = 2,
};

enum proc_hidepid {
  HIDEPID_OFF = 0,
  HIDEPID_NO_ACCESS = 1,
  HIDEPID_INVISIBLE = 2,
  HIDEPID_NOT_PTRACEABLE = 4,
};

enum proc_pidonly {
  PROC_PIDONLY_OFF = 0,
  PROC_PIDONLY_ON = 1,
};

struct proc_fs_info {
  struct pid_namespace* pid_ns;
  struct dentry* proc_self;
  struct dentry* proc_thread_self;
  kgid_t pid_gid;
  enum proc_hidepid hide_pid;
  enum proc_pidonly pidonly;
};

struct trace_event_raw_task_newtask {
  struct trace_entry ent;
  pid_t pid;
  char comm[16];
  long unsigned int clone_flags;
  short int oom_score_adj;
  char __data[0];
};

struct trace_event_raw_task_rename {
  struct trace_entry ent;
  pid_t pid;
  char oldcomm[16];
  char newcomm[16];
  short int oom_score_adj;
  char __data[0];
};

struct trace_event_data_offsets_task_newtask {};

struct trace_event_data_offsets_task_rename {};

typedef void (
    *btf_trace_task_newtask)(void*, struct task_struct*, long unsigned int);

typedef void (*btf_trace_task_rename)(void*, struct task_struct*, const char*);

enum kmsg_dump_reason {
  KMSG_DUMP_UNDEF = 0,
  KMSG_DUMP_PANIC = 1,
  KMSG_DUMP_OOPS = 2,
  KMSG_DUMP_EMERG = 3,
  KMSG_DUMP_SHUTDOWN = 4,
  KMSG_DUMP_MAX = 5,
};

struct vc {
  struct vc_data* d;
  struct work_struct SAK_work;
};

struct vt_spawn_console {
  spinlock_t lock;
  struct pid* pid;
  int sig;
};

enum con_flush_mode {
  CONSOLE_FLUSH_PENDING = 0,
  CONSOLE_REPLAY_ALL = 1,
};

struct warn_args {
  const char* fmt;
  va_list args;
};

struct smp_hotplug_thread {
  struct task_struct** store;
  struct list_head list;
  int (*thread_should_run)(unsigned int);
  void (*thread_fn)(unsigned int);
  void (*create)(unsigned int);
  void (*setup)(unsigned int);
  void (*cleanup)(unsigned int, bool);
  void (*park)(unsigned int);
  void (*unpark)(unsigned int);
  bool selfparking;
  const char* thread_comm;
};

struct trace_event_raw_cpuhp_enter {
  struct trace_entry ent;
  unsigned int cpu;
  int target;
  int idx;
  void* fun;
  char __data[0];
};

struct trace_event_raw_cpuhp_multi_enter {
  struct trace_entry ent;
  unsigned int cpu;
  int target;
  int idx;
  void* fun;
  char __data[0];
};

struct trace_event_raw_cpuhp_exit {
  struct trace_entry ent;
  unsigned int cpu;
  int state;
  int idx;
  int ret;
  char __data[0];
};

struct trace_event_data_offsets_cpuhp_enter {};

struct trace_event_data_offsets_cpuhp_multi_enter {};

struct trace_event_data_offsets_cpuhp_exit {};

typedef void (*btf_trace_cpuhp_enter)(
    void*,
    unsigned int,
    int,
    int,
    int (*)(unsigned int));

typedef void (*btf_trace_cpuhp_multi_enter)(
    void*,
    unsigned int,
    int,
    int,
    int (*)(unsigned int, struct hlist_node*),
    struct hlist_node*);

typedef void (*btf_trace_cpuhp_exit)(void*, unsigned int, int, int, int);

struct cpuhp_cpu_state {
  enum cpuhp_state state;
  enum cpuhp_state target;
  enum cpuhp_state fail;
  struct task_struct* thread;
  bool should_run;
  bool rollback;
  bool single;
  bool bringup;
  struct hlist_node* node;
  struct hlist_node* last;
  enum cpuhp_state cb_state;
  int result;
  struct completion done_up;
  struct completion done_down;
};

struct cpuhp_step {
  const char* name;
  union {
    int (*single)(unsigned int);
    int (*multi)(unsigned int, struct hlist_node*);
  } startup;
  union {
    int (*single)(unsigned int);
    int (*multi)(unsigned int, struct hlist_node*);
  } teardown;
  struct hlist_head list;
  bool cant_stop;
  bool multi_instance;
};

enum cpu_mitigations {
  CPU_MITIGATIONS_OFF = 0,
  CPU_MITIGATIONS_AUTO = 1,
  CPU_MITIGATIONS_AUTO_NOSMT = 2,
};

struct __kernel_old_timeval {
  __kernel_long_t tv_sec;
  __kernel_long_t tv_usec;
};

struct old_timeval32 {
  old_time32_t tv_sec;
  s32 tv_usec;
};

struct rusage {
  struct __kernel_old_timeval ru_utime;
  struct __kernel_old_timeval ru_stime;
  __kernel_long_t ru_maxrss;
  __kernel_long_t ru_ixrss;
  __kernel_long_t ru_idrss;
  __kernel_long_t ru_isrss;
  __kernel_long_t ru_minflt;
  __kernel_long_t ru_majflt;
  __kernel_long_t ru_nswap;
  __kernel_long_t ru_inblock;
  __kernel_long_t ru_oublock;
  __kernel_long_t ru_msgsnd;
  __kernel_long_t ru_msgrcv;
  __kernel_long_t ru_nsignals;
  __kernel_long_t ru_nvcsw;
  __kernel_long_t ru_nivcsw;
};

typedef struct {
} mm_segment_t;

struct compat_rusage {
  struct old_timeval32 ru_utime;
  struct old_timeval32 ru_stime;
  compat_long_t ru_maxrss;
  compat_long_t ru_ixrss;
  compat_long_t ru_idrss;
  compat_long_t ru_isrss;
  compat_long_t ru_minflt;
  compat_long_t ru_majflt;
  compat_long_t ru_nswap;
  compat_long_t ru_inblock;
  compat_long_t ru_oublock;
  compat_long_t ru_msgsnd;
  compat_long_t ru_msgrcv;
  compat_long_t ru_nsignals;
  compat_long_t ru_nvcsw;
  compat_long_t ru_nivcsw;
};

struct waitid_info {
  pid_t pid;
  uid_t uid;
  int status;
  int cause;
};

struct wait_opts {
  enum pid_type wo_type;
  int wo_flags;
  struct pid* wo_pid;
  struct waitid_info* wo_info;
  int wo_stat;
  struct rusage* wo_rusage;
  wait_queue_entry_t child_wait;
  int notask_error;
};

struct softirq_action {
  void (*action)(struct softirq_action*);
};

struct tasklet_struct {
  struct tasklet_struct* next;
  long unsigned int state;
  atomic_t count;
  bool use_callback;
  union {
    void (*func)(long unsigned int);
    void (*callback)(struct tasklet_struct*);
  };
  long unsigned int data;
};

enum {
  TASKLET_STATE_SCHED = 0,
  TASKLET_STATE_RUN = 1,
};

struct trace_event_raw_irq_handler_entry {
  struct trace_entry ent;
  int irq;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_irq_handler_exit {
  struct trace_entry ent;
  int irq;
  int ret;
  char __data[0];
};

struct trace_event_raw_softirq {
  struct trace_entry ent;
  unsigned int vec;
  char __data[0];
};

struct trace_event_data_offsets_irq_handler_entry {
  u32 name;
};

struct trace_event_data_offsets_irq_handler_exit {};

struct trace_event_data_offsets_softirq {};

typedef void (*btf_trace_irq_handler_entry)(void*, int, struct irqaction*);

typedef void (*btf_trace_irq_handler_exit)(void*, int, struct irqaction*, int);

typedef void (*btf_trace_softirq_entry)(void*, unsigned int);

typedef void (*btf_trace_softirq_exit)(void*, unsigned int);

typedef void (*btf_trace_softirq_raise)(void*, unsigned int);

struct tasklet_head {
  struct tasklet_struct* head;
  struct tasklet_struct** tail;
};

typedef void (*dr_release_t)(struct device*, void*);

struct resource_entry {
  struct list_head node;
  struct resource* res;
  resource_size_t offset;
  struct resource __res;
};

struct resource_constraint {
  resource_size_t min;
  resource_size_t max;
  resource_size_t align;
  resource_size_t (
      *alignf)(void*, const struct resource*, resource_size_t, resource_size_t);
  void* alignf_data;
};

enum {
  MAX_IORES_LEVEL = 5,
};

struct region_devres {
  struct resource* parent;
  resource_size_t start;
  resource_size_t n;
};

enum sysctl_writes_mode {
  SYSCTL_WRITES_LEGACY = 4294967295,
  SYSCTL_WRITES_WARN = 0,
  SYSCTL_WRITES_STRICT = 1,
};

struct do_proc_dointvec_minmax_conv_param {
  int* min;
  int* max;
};

struct do_proc_douintvec_minmax_conv_param {
  unsigned int* min;
  unsigned int* max;
};

struct __user_cap_header_struct {
  __u32 version;
  int pid;
};

typedef struct __user_cap_header_struct* cap_user_header_t;

struct __user_cap_data_struct {
  __u32 effective;
  __u32 permitted;
  __u32 inheritable;
};

typedef struct __user_cap_data_struct* cap_user_data_t;

struct sigqueue {
  struct list_head list;
  int flags;
  kernel_siginfo_t info;
  struct user_struct* user;
};

struct ptrace_peeksiginfo_args {
  __u64 off;
  __u32 flags;
  __s32 nr;
};

struct ptrace_syscall_info {
  __u8 op;
  __u8 pad[3];
  __u32 arch;
  __u64 instruction_pointer;
  __u64 stack_pointer;
  union {
    struct {
      __u64 nr;
      __u64 args[6];
    } entry;
    struct {
      __s64 rval;
      __u8 is_error;
    } exit;
    struct {
      __u64 nr;
      __u64 args[6];
      __u32 ret_data;
    } seccomp;
  };
};

struct compat_iovec {
  compat_uptr_t iov_base;
  compat_size_t iov_len;
};

typedef long unsigned int old_sigset_t;

enum siginfo_layout {
  SIL_KILL = 0,
  SIL_TIMER = 1,
  SIL_POLL = 2,
  SIL_FAULT = 3,
  SIL_FAULT_MCEERR = 4,
  SIL_FAULT_BNDERR = 5,
  SIL_FAULT_PKUERR = 6,
  SIL_CHLD = 7,
  SIL_RT = 8,
  SIL_SYS = 9,
};

struct fd {
  struct file* file;
  unsigned int flags;
};

typedef u32 compat_old_sigset_t;

struct compat_sigaction {
  compat_uptr_t sa_handler;
  compat_ulong_t sa_flags;
  compat_uptr_t sa_restorer;
  compat_sigset_t sa_mask;
};

struct compat_old_sigaction {
  compat_uptr_t sa_handler;
  compat_old_sigset_t sa_mask;
  compat_ulong_t sa_flags;
  compat_uptr_t sa_restorer;
};

enum {
  TRACE_SIGNAL_DELIVERED = 0,
  TRACE_SIGNAL_IGNORED = 1,
  TRACE_SIGNAL_ALREADY_PENDING = 2,
  TRACE_SIGNAL_OVERFLOW_FAIL = 3,
  TRACE_SIGNAL_LOSE_INFO = 4,
};

struct trace_event_raw_signal_generate {
  struct trace_entry ent;
  int sig;
  int errno;
  int code;
  char comm[16];
  pid_t pid;
  int group;
  int result;
  char __data[0];
};

struct trace_event_raw_signal_deliver {
  struct trace_entry ent;
  int sig;
  int errno;
  int code;
  long unsigned int sa_handler;
  long unsigned int sa_flags;
  char __data[0];
};

struct trace_event_data_offsets_signal_generate {};

struct trace_event_data_offsets_signal_deliver {};

typedef void (*btf_trace_signal_generate)(
    void*,
    int,
    struct kernel_siginfo*,
    struct task_struct*,
    int,
    int);

typedef void (*btf_trace_signal_deliver)(
    void*,
    int,
    struct kernel_siginfo*,
    struct k_sigaction*);

typedef __kernel_clock_t clock_t;

struct sysinfo {
  __kernel_long_t uptime;
  __kernel_ulong_t loads[3];
  __kernel_ulong_t totalram;
  __kernel_ulong_t freeram;
  __kernel_ulong_t sharedram;
  __kernel_ulong_t bufferram;
  __kernel_ulong_t totalswap;
  __kernel_ulong_t freeswap;
  __u16 procs;
  __u16 pad;
  __kernel_ulong_t totalhigh;
  __kernel_ulong_t freehigh;
  __u32 mem_unit;
  char _f[0];
};

enum {
  PER_LINUX = 0,
  PER_LINUX_32BIT = 8388608,
  PER_LINUX_FDPIC = 524288,
  PER_SVR4 = 68157441,
  PER_SVR3 = 83886082,
  PER_SCOSVR3 = 117440515,
  PER_OSR5 = 100663299,
  PER_WYSEV386 = 83886084,
  PER_ISCR4 = 67108869,
  PER_BSD = 6,
  PER_SUNOS = 67108870,
  PER_XENIX = 83886087,
  PER_LINUX32 = 8,
  PER_LINUX32_3GB = 134217736,
  PER_IRIX32 = 67108873,
  PER_IRIXN32 = 67108874,
  PER_IRIX64 = 67108875,
  PER_RISCOS = 12,
  PER_SOLARIS = 67108877,
  PER_UW7 = 68157454,
  PER_OSF4 = 15,
  PER_HPUX = 16,
  PER_MASK = 255,
};

struct rlimit64 {
  __u64 rlim_cur;
  __u64 rlim_max;
};

struct oldold_utsname {
  char sysname[9];
  char nodename[9];
  char release[9];
  char version[9];
  char machine[9];
};

struct old_utsname {
  char sysname[65];
  char nodename[65];
  char release[65];
  char version[65];
  char machine[65];
};

enum uts_proc {
  UTS_PROC_OSTYPE = 0,
  UTS_PROC_OSRELEASE = 1,
  UTS_PROC_VERSION = 2,
  UTS_PROC_HOSTNAME = 3,
  UTS_PROC_DOMAINNAME = 4,
};

struct prctl_mm_map {
  __u64 start_code;
  __u64 end_code;
  __u64 start_data;
  __u64 end_data;
  __u64 start_brk;
  __u64 brk;
  __u64 start_stack;
  __u64 arg_start;
  __u64 arg_end;
  __u64 env_start;
  __u64 env_end;
  __u64* auxv;
  __u32 auxv_size;
  __u32 exe_fd;
};

struct compat_tms {
  compat_clock_t tms_utime;
  compat_clock_t tms_stime;
  compat_clock_t tms_cutime;
  compat_clock_t tms_cstime;
};

struct compat_rlimit {
  compat_ulong_t rlim_cur;
  compat_ulong_t rlim_max;
};

struct tms {
  __kernel_clock_t tms_utime;
  __kernel_clock_t tms_stime;
  __kernel_clock_t tms_cutime;
  __kernel_clock_t tms_cstime;
};

struct getcpu_cache {
  long unsigned int blob[16];
};

struct compat_sysinfo {
  s32 uptime;
  u32 loads[3];
  u32 totalram;
  u32 freeram;
  u32 sharedram;
  u32 bufferram;
  u32 totalswap;
  u32 freeswap;
  u16 procs;
  u16 pad;
  u32 totalhigh;
  u32 freehigh;
  u32 mem_unit;
  char _f[8];
};

struct wq_flusher;

struct worker;

struct workqueue_attrs;

struct pool_workqueue;

struct wq_device;

struct workqueue_struct {
  struct list_head pwqs;
  struct list_head list;
  struct mutex mutex;
  int work_color;
  int flush_color;
  atomic_t nr_pwqs_to_flush;
  struct wq_flusher* first_flusher;
  struct list_head flusher_queue;
  struct list_head flusher_overflow;
  struct list_head maydays;
  struct worker* rescuer;
  int nr_drainers;
  int saved_max_active;
  struct workqueue_attrs* unbound_attrs;
  struct pool_workqueue* dfl_pwq;
  struct wq_device* wq_dev;
  char name[24];
  struct callback_head rcu;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  unsigned int flags;
  struct pool_workqueue* cpu_pwqs;
  struct pool_workqueue* numa_pwq_tbl[0];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct workqueue_attrs {
  int nice;
  cpumask_var_t cpumask;
  bool no_numa;
};

struct execute_work {
  struct work_struct work;
};

enum {
  WQ_UNBOUND = 2,
  WQ_FREEZABLE = 4,
  WQ_MEM_RECLAIM = 8,
  WQ_HIGHPRI = 16,
  WQ_CPU_INTENSIVE = 32,
  WQ_SYSFS = 64,
  WQ_POWER_EFFICIENT = 128,
  __WQ_DRAINING = 65536,
  __WQ_ORDERED = 131072,
  __WQ_LEGACY = 262144,
  __WQ_ORDERED_EXPLICIT = 524288,
  WQ_MAX_ACTIVE = 512,
  WQ_MAX_UNBOUND_PER_CPU = 4,
  WQ_DFL_ACTIVE = 256,
};

typedef unsigned int xa_mark_t;

enum xa_lock_type {
  XA_LOCK_IRQ = 1,
  XA_LOCK_BH = 2,
};

struct __una_u32 {
  u32 x;
};

struct worker_pool;

struct worker {
  union {
    struct list_head entry;
    struct hlist_node hentry;
  };
  struct work_struct* current_work;
  work_func_t current_func;
  struct pool_workqueue* current_pwq;
  struct list_head scheduled;
  struct task_struct* task;
  struct worker_pool* pool;
  struct list_head node;
  long unsigned int last_active;
  unsigned int flags;
  int id;
  int sleeping;
  char desc[24];
  struct workqueue_struct* rescue_wq;
  work_func_t last_func;
};

struct pool_workqueue {
  struct worker_pool* pool;
  struct workqueue_struct* wq;
  int work_color;
  int flush_color;
  int refcnt;
  int nr_in_flight[15];
  int nr_active;
  int max_active;
  struct list_head delayed_works;
  struct list_head pwqs_node;
  struct list_head mayday_node;
  struct work_struct unbound_release_work;
  struct callback_head rcu;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct worker_pool {
  raw_spinlock_t lock;
  int cpu;
  int node;
  int id;
  unsigned int flags;
  long unsigned int watchdog_ts;
  struct list_head worklist;
  int nr_workers;
  int nr_idle;
  struct list_head idle_list;
  struct timer_list idle_timer;
  struct timer_list mayday_timer;
  struct hlist_head busy_hash[64];
  struct worker* manager;
  struct list_head workers;
  struct completion* detach_completion;
  struct ida worker_ida;
  struct workqueue_attrs* attrs;
  struct hlist_node hash_node;
  int refcnt;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  atomic_t nr_running;
  struct callback_head rcu;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum {
  POOL_MANAGER_ACTIVE = 1,
  POOL_DISASSOCIATED = 4,
  WORKER_DIE = 2,
  WORKER_IDLE = 4,
  WORKER_PREP = 8,
  WORKER_CPU_INTENSIVE = 64,
  WORKER_UNBOUND = 128,
  WORKER_REBOUND = 256,
  WORKER_NOT_RUNNING = 456,
  NR_STD_WORKER_POOLS = 2,
  UNBOUND_POOL_HASH_ORDER = 6,
  BUSY_WORKER_HASH_ORDER = 6,
  MAX_IDLE_WORKERS_RATIO = 4,
  IDLE_WORKER_TIMEOUT = 300000,
  MAYDAY_INITIAL_TIMEOUT = 10,
  MAYDAY_INTERVAL = 100,
  CREATE_COOLDOWN = 1000,
  RESCUER_NICE_LEVEL = 4294967276,
  HIGHPRI_NICE_LEVEL = 4294967276,
  WQ_NAME_LEN = 24,
};

struct wq_flusher {
  struct list_head list;
  int flush_color;
  struct completion done;
};

struct wq_device {
  struct workqueue_struct* wq;
  struct device dev;
};

struct trace_event_raw_workqueue_queue_work {
  struct trace_entry ent;
  void* work;
  void* function;
  u32 __data_loc_workqueue;
  unsigned int req_cpu;
  unsigned int cpu;
  char __data[0];
};

struct trace_event_raw_workqueue_activate_work {
  struct trace_entry ent;
  void* work;
  char __data[0];
};

struct trace_event_raw_workqueue_execute_start {
  struct trace_entry ent;
  void* work;
  void* function;
  char __data[0];
};

struct trace_event_raw_workqueue_execute_end {
  struct trace_entry ent;
  void* work;
  void* function;
  char __data[0];
};

struct trace_event_data_offsets_workqueue_queue_work {
  u32 workqueue;
};

struct trace_event_data_offsets_workqueue_activate_work {};

struct trace_event_data_offsets_workqueue_execute_start {};

struct trace_event_data_offsets_workqueue_execute_end {};

typedef void (*btf_trace_workqueue_queue_work)(
    void*,
    unsigned int,
    struct pool_workqueue*,
    struct work_struct*);

typedef void (*btf_trace_workqueue_activate_work)(void*, struct work_struct*);

typedef void (*btf_trace_workqueue_execute_start)(void*, struct work_struct*);

typedef void (
    *btf_trace_workqueue_execute_end)(void*, struct work_struct*, work_func_t);

struct wq_barrier {
  struct work_struct work;
  struct completion done;
  struct task_struct* task;
};

struct cwt_wait {
  wait_queue_entry_t wait;
  struct work_struct* work;
};

struct apply_wqattrs_ctx {
  struct workqueue_struct* wq;
  struct workqueue_attrs* attrs;
  struct list_head list;
  struct pool_workqueue* dfl_pwq;
  struct pool_workqueue* pwq_tbl[0];
};

struct work_for_cpu {
  struct work_struct work;
  long int (*fn)(void*);
  void* arg;
  long int ret;
};

typedef void (*task_work_func_t)(struct callback_head*);

enum {
  KERNEL_PARAM_OPS_FL_NOARG = 1,
};

enum {
  KERNEL_PARAM_FL_UNSAFE = 1,
  KERNEL_PARAM_FL_HWPARAM = 2,
};

struct param_attribute {
  struct module_attribute mattr;
  const struct kernel_param* param;
};

struct module_param_attrs {
  unsigned int num;
  struct attribute_group grp;
  struct param_attribute attrs[0];
};

struct module_version_attribute {
  struct module_attribute mattr;
  const char* module_name;
  const char* version;
};

struct kmalloced_param {
  struct list_head list;
  char val[0];
};

struct sched_param {
  int sched_priority;
};

enum {
  __PERCPU_REF_ATOMIC = 1,
  __PERCPU_REF_DEAD = 2,
  __PERCPU_REF_ATOMIC_DEAD = 3,
  __PERCPU_REF_FLAG_BITS = 2,
};

struct kthread_work;

typedef void (*kthread_work_func_t)(struct kthread_work*);

struct kthread_worker;

struct kthread_work {
  struct list_head node;
  kthread_work_func_t func;
  struct kthread_worker* worker;
  int canceling;
};

enum {
  KTW_FREEZABLE = 1,
};

struct kthread_worker {
  unsigned int flags;
  raw_spinlock_t lock;
  struct list_head work_list;
  struct list_head delayed_work_list;
  struct task_struct* task;
  struct kthread_work* current_work;
};

struct kthread_delayed_work {
  struct kthread_work work;
  struct timer_list timer;
};

enum {
  CSS_NO_REF = 1,
  CSS_ONLINE = 2,
  CSS_RELEASED = 4,
  CSS_VISIBLE = 8,
  CSS_DYING = 16,
};

struct kthread_create_info {
  int (*threadfn)(void*);
  void* data;
  int node;
  struct task_struct* result;
  struct completion* done;
  struct list_head list;
};

struct kthread {
  long unsigned int flags;
  unsigned int cpu;
  int (*threadfn)(void*);
  void* data;
  mm_segment_t oldfs;
  struct completion parked;
  struct completion exited;
  struct cgroup_subsys_state* blkcg_css;
};

enum KTHREAD_BITS {
  KTHREAD_IS_PER_CPU = 0,
  KTHREAD_SHOULD_STOP = 1,
  KTHREAD_SHOULD_PARK = 2,
};

struct kthread_flush_work {
  struct kthread_work work;
  struct completion done;
};

struct ipc_ids {
  int in_use;
  short unsigned int seq;
  struct rw_semaphore rwsem;
  struct idr ipcs_idr;
  int max_idx;
  int last_idx;
  struct rhashtable key_ht;
};

struct ipc_namespace {
  struct ipc_ids ids[3];
  int sem_ctls[4];
  int used_sems;
  unsigned int msg_ctlmax;
  unsigned int msg_ctlmnb;
  unsigned int msg_ctlmni;
  atomic_t msg_bytes;
  atomic_t msg_hdrs;
  size_t shm_ctlmax;
  size_t shm_ctlall;
  long unsigned int shm_tot;
  int shm_ctlmni;
  int shm_rmid_forced;
  struct notifier_block ipcns_nb;
  struct vfsmount* mq_mnt;
  unsigned int mq_queues_count;
  unsigned int mq_queues_max;
  unsigned int mq_msg_max;
  unsigned int mq_msgsize_max;
  unsigned int mq_msg_default;
  unsigned int mq_msgsize_default;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  struct llist_node mnt_llist;
  struct ns_common ns;
};

struct srcu_notifier_head {
  struct mutex mutex;
  struct srcu_struct srcu;
  struct notifier_block* head;
};

enum what {
  PROC_EVENT_NONE = 0,
  PROC_EVENT_FORK = 1,
  PROC_EVENT_EXEC = 2,
  PROC_EVENT_UID = 4,
  PROC_EVENT_GID = 64,
  PROC_EVENT_SID = 128,
  PROC_EVENT_PTRACE = 256,
  PROC_EVENT_COMM = 512,
  PROC_EVENT_COREDUMP = 1073741824,
  PROC_EVENT_EXIT = 2147483648,
};

typedef u64 async_cookie_t;

typedef void (*async_func_t)(void*, async_cookie_t);

struct async_domain {
  struct list_head pending;
  unsigned int registered : 1;
};

struct async_entry {
  struct list_head domain_list;
  struct list_head global_list;
  struct work_struct work;
  async_cookie_t cookie;
  async_func_t func;
  void* data;
  struct async_domain* domain;
};

struct smpboot_thread_data {
  unsigned int cpu;
  unsigned int status;
  struct smp_hotplug_thread* ht;
};

enum {
  HP_THREAD_NONE = 0,
  HP_THREAD_ACTIVE = 1,
  HP_THREAD_PARKED = 2,
};

struct umd_info {
  const char* driver_name;
  struct file* pipe_to_umh;
  struct file* pipe_from_umh;
  struct path wd;
  struct pid* tgid;
};

struct pin_cookie {};

struct preempt_notifier;

struct preempt_ops {
  void (*sched_in)(struct preempt_notifier*, int);
  void (*sched_out)(struct preempt_notifier*, struct task_struct*);
};

struct preempt_notifier {
  struct hlist_node link;
  struct preempt_ops* ops;
};

enum {
  CSD_FLAG_LOCK = 1,
  IRQ_WORK_PENDING = 1,
  IRQ_WORK_BUSY = 2,
  IRQ_WORK_LAZY = 4,
  IRQ_WORK_HARD_IRQ = 8,
  IRQ_WORK_CLAIMED = 3,
  CSD_TYPE_ASYNC = 0,
  CSD_TYPE_SYNC = 16,
  CSD_TYPE_IRQ_WORK = 32,
  CSD_TYPE_TTWU = 48,
  CSD_FLAG_TYPE_MASK = 240,
};

struct dl_bw {
  raw_spinlock_t lock;
  u64 bw;
  u64 total_bw;
};

struct cpudl_item;

struct cpudl {
  raw_spinlock_t lock;
  int size;
  cpumask_var_t free_cpus;
  struct cpudl_item* elements;
};

struct cpupri_vec {
  atomic_t count;
  cpumask_var_t mask;
};

struct cpupri {
  struct cpupri_vec pri_to_cpu[101];
  int* cpu_to_pri;
};

struct perf_domain;

struct root_domain___2 {
  atomic_t refcount;
  atomic_t rto_count;
  struct callback_head rcu;
  cpumask_var_t span;
  cpumask_var_t online;
  int overload;
  int overutilized;
  cpumask_var_t dlo_mask;
  atomic_t dlo_count;
  struct dl_bw dl_bw;
  struct cpudl cpudl;
  u64 visit_gen;
  struct irq_work rto_push_work;
  raw_spinlock_t rto_lock;
  int rto_loop;
  int rto_cpu;
  atomic_t rto_loop_next;
  atomic_t rto_loop_start;
  cpumask_var_t rto_mask;
  struct cpupri cpupri;
  long unsigned int max_cpu_capacity;
  struct perf_domain* pd;
};

struct cfs_rq {
  struct load_weight load;
  unsigned int nr_running;
  unsigned int h_nr_running;
  unsigned int idle_h_nr_running;
  u64 exec_clock;
  u64 min_vruntime;
  struct rb_root_cached tasks_timeline;
  struct sched_entity* curr;
  struct sched_entity* next;
  struct sched_entity* last;
  struct sched_entity* skip;
  unsigned int nr_spread_over;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  struct sched_avg avg;
  struct {
    raw_spinlock_t lock;
    int nr;
    long unsigned int load_avg;
    long unsigned int util_avg;
    long unsigned int runnable_avg;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  } removed;
  long unsigned int tg_load_avg_contrib;
  long int propagate;
  long int prop_runnable_sum;
  long unsigned int h_load;
  u64 last_h_load_update;
  struct sched_entity* h_load_next;
  struct rq* rq;
  int on_list;
  struct list_head leaf_cfs_rq_list;
  struct task_group* tg;
  int runtime_enabled;
  s64 runtime_remaining;
  u64 throttled_clock;
  u64 throttled_clock_task;
  u64 throttled_clock_task_time;
  int throttled;
  int throttle_count;
  struct list_head throttled_list;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct cfs_bandwidth {
  raw_spinlock_t lock;
  ktime_t period;
  u64 quota;
  u64 runtime;
  s64 hierarchical_quota;
  u8 idle;
  u8 period_active;
  u8 slack_started;
  struct hrtimer period_timer;
  struct hrtimer slack_timer;
  struct list_head throttled_cfs_rq;
  int nr_periods;
  int nr_throttled;
  u64 throttled_time;
};

struct task_group {
  struct cgroup_subsys_state css;
  struct sched_entity** se;
  struct cfs_rq** cfs_rq;
  long unsigned int shares;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  atomic_long_t load_avg;
  struct callback_head rcu;
  struct list_head list;
  struct task_group* parent;
  struct list_head siblings;
  struct list_head children;
  struct cfs_bandwidth cfs_bandwidth;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct update_util_data {
  void (*func)(struct update_util_data*, u64, unsigned int);
};

struct sched_group {
  struct sched_group* next;
  atomic_t ref;
  unsigned int group_weight;
  struct sched_group_capacity* sgc;
  int asym_prefer_cpu;
  long unsigned int cpumask[0];
};

struct sched_group_capacity {
  atomic_t ref;
  long unsigned int capacity;
  long unsigned int min_capacity;
  long unsigned int max_capacity;
  long unsigned int next_update;
  int imbalance;
  int id;
  long unsigned int cpumask[0];
};

struct em_perf_state {
  long unsigned int frequency;
  long unsigned int power;
  long unsigned int cost;
};

struct em_perf_domain {
  struct em_perf_state* table;
  int nr_perf_states;
  int milliwatts;
  long unsigned int cpus[0];
};

struct wait_bit_key {
  void* flags;
  int bit_nr;
  long unsigned int timeout;
};

struct wait_bit_queue_entry {
  struct wait_bit_key key;
  struct wait_queue_entry wq_entry;
};

enum ctx_state {
  CONTEXT_DISABLED = 4294967295,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER = 1,
  CONTEXT_GUEST = 2,
};

enum {
  MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY = 1,
  MEMBARRIER_STATE_PRIVATE_EXPEDITED = 2,
  MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY = 4,
  MEMBARRIER_STATE_GLOBAL_EXPEDITED = 8,
  MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY = 16,
  MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE = 32,
  MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY = 64,
  MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ = 128,
};

enum {
  CFTYPE_ONLY_ON_ROOT = 1,
  CFTYPE_NOT_ON_ROOT = 2,
  CFTYPE_NS_DELEGATABLE = 4,
  CFTYPE_NO_PREFIX = 8,
  CFTYPE_WORLD_WRITABLE = 16,
  CFTYPE_DEBUG = 32,
  __CFTYPE_ONLY_ON_DFL = 65536,
  __CFTYPE_NOT_ON_DFL = 131072,
};

struct trace_event_raw_sched_kthread_stop {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  char __data[0];
};

struct trace_event_raw_sched_kthread_stop_ret {
  struct trace_entry ent;
  int ret;
  char __data[0];
};

struct trace_event_raw_sched_kthread_work_queue_work {
  struct trace_entry ent;
  void* work;
  void* function;
  void* worker;
  char __data[0];
};

struct trace_event_raw_sched_kthread_work_execute_start {
  struct trace_entry ent;
  void* work;
  void* function;
  char __data[0];
};

struct trace_event_raw_sched_kthread_work_execute_end {
  struct trace_entry ent;
  void* work;
  void* function;
  char __data[0];
};

struct trace_event_raw_sched_wakeup_template {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  int prio;
  int success;
  int target_cpu;
  char __data[0];
};

struct trace_event_raw_sched_switch {
  struct trace_entry ent;
  char prev_comm[16];
  pid_t prev_pid;
  int prev_prio;
  long int prev_state;
  char next_comm[16];
  pid_t next_pid;
  int next_prio;
  char __data[0];
};

struct trace_event_raw_sched_migrate_task {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  int prio;
  int orig_cpu;
  int dest_cpu;
  char __data[0];
};

struct trace_event_raw_sched_process_template {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  int prio;
  char __data[0];
};

struct trace_event_raw_sched_process_wait {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  int prio;
  char __data[0];
};

struct trace_event_raw_sched_process_fork {
  struct trace_entry ent;
  char parent_comm[16];
  pid_t parent_pid;
  char child_comm[16];
  pid_t child_pid;
  char __data[0];
};

struct trace_event_raw_sched_process_exec {
  struct trace_entry ent;
  u32 __data_loc_filename;
  pid_t pid;
  pid_t old_pid;
  char __data[0];
};

struct trace_event_raw_sched_stat_template {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  u64 delay;
  char __data[0];
};

struct trace_event_raw_sched_stat_runtime {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  u64 runtime;
  u64 vruntime;
  char __data[0];
};

struct trace_event_raw_sched_pi_setprio {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  int oldprio;
  int newprio;
  char __data[0];
};

struct trace_event_raw_sched_process_hang {
  struct trace_entry ent;
  char comm[16];
  pid_t pid;
  char __data[0];
};

struct trace_event_raw_sched_move_numa {
  struct trace_entry ent;
  pid_t pid;
  pid_t tgid;
  pid_t ngid;
  int src_cpu;
  int src_nid;
  int dst_cpu;
  int dst_nid;
  char __data[0];
};

struct trace_event_raw_sched_numa_pair_template {
  struct trace_entry ent;
  pid_t src_pid;
  pid_t src_tgid;
  pid_t src_ngid;
  int src_cpu;
  int src_nid;
  pid_t dst_pid;
  pid_t dst_tgid;
  pid_t dst_ngid;
  int dst_cpu;
  int dst_nid;
  char __data[0];
};

struct trace_event_raw_sched_wake_idle_without_ipi {
  struct trace_entry ent;
  int cpu;
  char __data[0];
};

struct trace_event_data_offsets_sched_kthread_stop {};

struct trace_event_data_offsets_sched_kthread_stop_ret {};

struct trace_event_data_offsets_sched_kthread_work_queue_work {};

struct trace_event_data_offsets_sched_kthread_work_execute_start {};

struct trace_event_data_offsets_sched_kthread_work_execute_end {};

struct trace_event_data_offsets_sched_wakeup_template {};

struct trace_event_data_offsets_sched_switch {};

struct trace_event_data_offsets_sched_migrate_task {};

struct trace_event_data_offsets_sched_process_template {};

struct trace_event_data_offsets_sched_process_wait {};

struct trace_event_data_offsets_sched_process_fork {};

struct trace_event_data_offsets_sched_process_exec {
  u32 filename;
};

struct trace_event_data_offsets_sched_stat_template {};

struct trace_event_data_offsets_sched_stat_runtime {};

struct trace_event_data_offsets_sched_pi_setprio {};

struct trace_event_data_offsets_sched_process_hang {};

struct trace_event_data_offsets_sched_move_numa {};

struct trace_event_data_offsets_sched_numa_pair_template {};

struct trace_event_data_offsets_sched_wake_idle_without_ipi {};

typedef void (*btf_trace_sched_kthread_stop)(void*, struct task_struct*);

typedef void (*btf_trace_sched_kthread_stop_ret)(void*, int);

typedef void (*btf_trace_sched_kthread_work_queue_work)(
    void*,
    struct kthread_worker*,
    struct kthread_work*);

typedef void (
    *btf_trace_sched_kthread_work_execute_start)(void*, struct kthread_work*);

typedef void (*btf_trace_sched_kthread_work_execute_end)(
    void*,
    struct kthread_work*,
    kthread_work_func_t);

typedef void (*btf_trace_sched_waking)(void*, struct task_struct*);

typedef void (*btf_trace_sched_wakeup)(void*, struct task_struct*);

typedef void (*btf_trace_sched_wakeup_new)(void*, struct task_struct*);

typedef void (*btf_trace_sched_switch)(
    void*,
    bool,
    struct task_struct*,
    struct task_struct*);

typedef void (*btf_trace_sched_migrate_task)(void*, struct task_struct*, int);

typedef void (*btf_trace_sched_process_free)(void*, struct task_struct*);

typedef void (*btf_trace_sched_process_exit)(void*, struct task_struct*);

typedef void (*btf_trace_sched_wait_task)(void*, struct task_struct*);

typedef void (*btf_trace_sched_process_wait)(void*, struct pid*);

typedef void (*btf_trace_sched_process_fork)(
    void*,
    struct task_struct*,
    struct task_struct*);

typedef void (*btf_trace_sched_process_exec)(
    void*,
    struct task_struct*,
    pid_t,
    struct linux_binprm*);

typedef void (*btf_trace_sched_stat_wait)(void*, struct task_struct*, u64);

typedef void (*btf_trace_sched_stat_sleep)(void*, struct task_struct*, u64);

typedef void (*btf_trace_sched_stat_iowait)(void*, struct task_struct*, u64);

typedef void (*btf_trace_sched_stat_blocked)(void*, struct task_struct*, u64);

typedef void (
    *btf_trace_sched_stat_runtime)(void*, struct task_struct*, u64, u64);

typedef void (*btf_trace_sched_pi_setprio)(
    void*,
    struct task_struct*,
    struct task_struct*);

typedef void (*btf_trace_sched_process_hang)(void*, struct task_struct*);

typedef void (*btf_trace_sched_move_numa)(void*, struct task_struct*, int, int);

typedef void (*btf_trace_sched_stick_numa)(
    void*,
    struct task_struct*,
    int,
    struct task_struct*,
    int);

typedef void (*btf_trace_sched_swap_numa)(
    void*,
    struct task_struct*,
    int,
    struct task_struct*,
    int);

typedef void (*btf_trace_sched_wake_idle_without_ipi)(void*, int);

typedef void (*btf_trace_pelt_cfs_tp)(void*, struct cfs_rq*);

typedef void (*btf_trace_pelt_rt_tp)(void*, struct rq*);

struct rt_prio_array {
  long unsigned int bitmap[2];
  struct list_head queue[100];
};

struct rt_rq {
  struct rt_prio_array active;
  unsigned int rt_nr_running;
  unsigned int rr_nr_running;
  struct {
    int curr;
    int next;
  } highest_prio;
  long unsigned int rt_nr_migratory;
  long unsigned int rt_nr_total;
  int overloaded;
  struct plist_head pushable_tasks;
  int rt_queued;
  int rt_throttled;
  u64 rt_time;
  u64 rt_runtime;
  raw_spinlock_t rt_runtime_lock;
};

struct dl_rq {
  struct rb_root_cached root;
  long unsigned int dl_nr_running;
  struct {
    u64 curr;
    u64 next;
  } earliest_dl;
  long unsigned int dl_nr_migratory;
  int overloaded;
  struct rb_root_cached pushable_dl_tasks_root;
  u64 running_bw;
  u64 this_bw;
  u64 extra_bw;
  u64 bw_ratio;
};

typedef int (*cpu_stop_fn_t)(void*);

struct cpu_stop_done;

struct cpu_stop_work {
  struct list_head list;
  cpu_stop_fn_t fn;
  long unsigned int caller;
  void* arg;
  struct cpu_stop_done* done;
};

struct cpuidle_state;

struct rq {
  raw_spinlock_t lock;
  unsigned int nr_running;
  unsigned int nr_numa_running;
  unsigned int nr_preferred_running;
  unsigned int numa_migrate_on;
  long unsigned int last_blocked_load_update_tick;
  unsigned int has_blocked_load;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  call_single_data_t nohz_csd;
  unsigned int nohz_tick_stopped;
  atomic_t nohz_flags;
  unsigned int ttwu_pending;
  u64 nr_switches;
  long : 64;
  struct cfs_rq cfs;
  struct rt_rq rt;
  struct dl_rq dl;
  struct list_head leaf_cfs_rq_list;
  struct list_head* tmp_alone_branch;
  long unsigned int nr_uninterruptible;
  struct task_struct* curr;
  struct task_struct* idle;
  struct task_struct* stop;
  long unsigned int next_balance;
  struct mm_struct* prev_mm;
  unsigned int clock_update_flags;
  u64 clock;
  long : 64;
  long : 64;
  long : 64;
  u64 clock_task;
  u64 clock_pelt;
  long unsigned int lost_idle_time;
  atomic_t nr_iowait;
  int membarrier_state;
  struct root_domain___2* rd;
  struct sched_domain* sd;
  long unsigned int cpu_capacity;
  long unsigned int cpu_capacity_orig;
  struct callback_head* balance_callback;
  unsigned char balance_push;
  unsigned char nohz_idle_balance;
  unsigned char idle_balance;
  long unsigned int misfit_task_load;
  int active_balance;
  int push_cpu;
  struct cpu_stop_work active_balance_work;
  int cpu;
  int online;
  struct list_head cfs_tasks;
  long : 64;
  long : 64;
  long : 64;
  struct sched_avg avg_rt;
  struct sched_avg avg_dl;
  struct sched_avg avg_irq;
  u64 idle_stamp;
  u64 avg_idle;
  u64 max_idle_balance_cost;
  struct rcuwait hotplug_wait;
  u64 prev_steal_time;
  u64 prev_steal_time_rq;
  long unsigned int calc_load_update;
  long int calc_load_active;
  call_single_data_t hrtick_csd;
  struct hrtimer hrtick_timer;
  ktime_t hrtick_time;
  struct sched_info rq_sched_info;
  long long unsigned int rq_cpu_time;
  unsigned int yld_count;
  unsigned int sched_count;
  unsigned int sched_goidle;
  unsigned int ttwu_count;
  unsigned int ttwu_local;
  struct cpuidle_state* idle_state;
  unsigned int nr_pinned;
  unsigned int push_busy;
  struct cpu_stop_work push_work;
  long : 64;
  long : 64;
  long : 64;
};

typedef void (*btf_trace_pelt_dl_tp)(void*, struct rq*);

typedef void (*btf_trace_pelt_thermal_tp)(void*, struct rq*);

typedef void (*btf_trace_pelt_irq_tp)(void*, struct rq*);

typedef void (*btf_trace_pelt_se_tp)(void*, struct sched_entity*);

typedef void (*btf_trace_sched_cpu_capacity_tp)(void*, struct rq*);

typedef void (
    *btf_trace_sched_overutilized_tp)(void*, struct root_domain___2*, bool);

typedef void (*btf_trace_sched_util_est_cfs_tp)(void*, struct cfs_rq*);

typedef void (*btf_trace_sched_util_est_se_tp)(void*, struct sched_entity*);

typedef void (*btf_trace_sched_update_nr_running_tp)(void*, struct rq*, int);

struct wake_q_head {
  struct wake_q_node* first;
  struct wake_q_node** lastp;
};

struct sched_attr {
  __u32 size;
  __u32 sched_policy;
  __u64 sched_flags;
  __s32 sched_nice;
  __u32 sched_priority;
  __u64 sched_runtime;
  __u64 sched_deadline;
  __u64 sched_period;
  __u32 sched_util_min;
  __u32 sched_util_max;
};

struct cpuidle_driver___2;

struct cpuidle_state {
  char name[16];
  char desc[32];
  u64 exit_latency_ns;
  u64 target_residency_ns;
  unsigned int flags;
  unsigned int exit_latency;
  int power_usage;
  unsigned int target_residency;
  int (*enter)(struct cpuidle_device*, struct cpuidle_driver___2*, int);
  int (*enter_dead)(struct cpuidle_device*, int);
  int (*enter_s2idle)(struct cpuidle_device*, struct cpuidle_driver___2*, int);
};

struct cpuidle_driver___2 {
  const char* name;
  struct module* owner;
  unsigned int bctimer : 1;
  struct cpuidle_state states[10];
  int state_count;
  int safe_state_index;
  struct cpumask* cpumask;
  const char* governor;
};

struct cpudl_item {
  u64 dl;
  int cpu;
  int idx;
};

struct rt_bandwidth {
  raw_spinlock_t rt_runtime_lock;
  ktime_t rt_period;
  u64 rt_runtime;
  struct hrtimer rt_period_timer;
  unsigned int rt_period_active;
};

struct dl_bandwidth {
  raw_spinlock_t dl_runtime_lock;
  u64 dl_runtime;
  u64 dl_period;
};

typedef int (*tg_visitor)(struct task_group*, void*);

struct perf_domain {
  struct em_perf_domain* em_pd;
  struct perf_domain* next;
  struct callback_head rcu;
};

struct rq_flags {
  long unsigned int flags;
  struct pin_cookie cookie;
  unsigned int clock_update_flags;
};

enum numa_topology_type {
  NUMA_DIRECT = 0,
  NUMA_GLUELESS_MESH = 1,
  NUMA_BACKPLANE = 2,
};

enum {
  __SCHED_FEAT_GENTLE_FAIR_SLEEPERS = 0,
  __SCHED_FEAT_START_DEBIT = 1,
  __SCHED_FEAT_NEXT_BUDDY = 2,
  __SCHED_FEAT_LAST_BUDDY = 3,
  __SCHED_FEAT_CACHE_HOT_BUDDY = 4,
  __SCHED_FEAT_WAKEUP_PREEMPTION = 5,
  __SCHED_FEAT_HRTICK = 6,
  __SCHED_FEAT_HRTICK_DL = 7,
  __SCHED_FEAT_DOUBLE_TICK = 8,
  __SCHED_FEAT_NONTASK_CAPACITY = 9,
  __SCHED_FEAT_TTWU_QUEUE = 10,
  __SCHED_FEAT_SIS_PROP = 11,
  __SCHED_FEAT_WARN_DOUBLE_CLOCK = 12,
  __SCHED_FEAT_RT_PUSH_IPI = 13,
  __SCHED_FEAT_RT_RUNTIME_SHARE = 14,
  __SCHED_FEAT_LB_MIN = 15,
  __SCHED_FEAT_ATTACH_AGE_LOAD = 16,
  __SCHED_FEAT_WA_IDLE = 17,
  __SCHED_FEAT_WA_WEIGHT = 18,
  __SCHED_FEAT_WA_BIAS = 19,
  __SCHED_FEAT_UTIL_EST = 20,
  __SCHED_FEAT_UTIL_EST_FASTUP = 21,
  __SCHED_FEAT_ALT_PERIOD = 22,
  __SCHED_FEAT_BASE_SLICE = 23,
  __SCHED_FEAT_NR = 24,
};

enum cpu_util_type {
  FREQUENCY_UTIL = 0,
  ENERGY_UTIL = 1,
};

struct set_affinity_pending;

struct migration_arg {
  struct task_struct* task;
  int dest_cpu;
  struct set_affinity_pending* pending;
};

struct set_affinity_pending {
  refcount_t refs;
  unsigned int stop_pending;
  struct completion done;
  struct cpu_stop_work stop_work;
  struct migration_arg arg;
};

struct migration_swap_arg {
  struct task_struct* src_task;
  struct task_struct* dst_task;
  int src_cpu;
  int dst_cpu;
};

struct cfs_schedulable_data {
  struct task_group* tg;
  u64 period;
  u64 quota;
};

enum {
  cpuset = 0,
  possible = 1,
  fail = 2,
};

enum tick_dep_bits {
  TICK_DEP_BIT_POSIX_TIMER = 0,
  TICK_DEP_BIT_PERF_EVENTS = 1,
  TICK_DEP_BIT_SCHED = 2,
  TICK_DEP_BIT_CLOCK_UNSTABLE = 3,
  TICK_DEP_BIT_RCU = 4,
  TICK_DEP_BIT_RCU_EXP = 5,
};

struct sched_clock_data {
  u64 tick_raw;
  u64 tick_gtod;
  u64 clock;
};

struct idle_timer {
  struct hrtimer timer;
  int done;
};

typedef void (*rcu_callback_t)(struct callback_head*);

struct numa_group {
  refcount_t refcount;
  spinlock_t lock;
  int nr_tasks;
  pid_t gid;
  int active_nodes;
  struct callback_head rcu;
  long unsigned int total_faults;
  long unsigned int max_faults_cpu;
  long unsigned int* faults_cpu;
  long unsigned int faults[0];
};

enum numa_faults_stats {
  NUMA_MEM = 0,
  NUMA_CPU = 1,
  NUMA_MEMBUF = 2,
  NUMA_CPUBUF = 3,
};

enum numa_type {
  node_has_spare = 0,
  node_fully_busy = 1,
  node_overloaded = 2,
};

struct numa_stats {
  long unsigned int load;
  long unsigned int runnable;
  long unsigned int util;
  long unsigned int compute_capacity;
  unsigned int nr_running;
  unsigned int weight;
  enum numa_type node_type;
  int idle_cpu;
};

struct task_numa_env {
  struct task_struct* p;
  int src_cpu;
  int src_nid;
  int dst_cpu;
  int dst_nid;
  struct numa_stats src_stats;
  struct numa_stats dst_stats;
  int imbalance_pct;
  int dist;
  struct task_struct* best_task;
  long int best_imp;
  int best_cpu;
};

enum fbq_type {
  regular = 0,
  remote = 1,
  all = 2,
};

enum group_type {
  group_has_spare = 0,
  group_fully_busy = 1,
  group_misfit_task = 2,
  group_asym_packing = 3,
  group_imbalanced = 4,
  group_overloaded = 5,
};

enum migration_type {
  migrate_load = 0,
  migrate_util = 1,
  migrate_task = 2,
  migrate_misfit = 3,
};

struct lb_env {
  struct sched_domain* sd;
  struct rq* src_rq;
  int src_cpu;
  int dst_cpu;
  struct rq* dst_rq;
  struct cpumask* dst_grpmask;
  int new_dst_cpu;
  enum cpu_idle_type idle;
  long int imbalance;
  struct cpumask* cpus;
  unsigned int flags;
  unsigned int loop;
  unsigned int loop_break;
  unsigned int loop_max;
  enum fbq_type fbq_type;
  enum migration_type migration_type;
  struct list_head tasks;
};

struct sg_lb_stats {
  long unsigned int avg_load;
  long unsigned int group_load;
  long unsigned int group_capacity;
  long unsigned int group_util;
  long unsigned int group_runnable;
  unsigned int sum_nr_running;
  unsigned int sum_h_nr_running;
  unsigned int idle_cpus;
  unsigned int group_weight;
  enum group_type group_type;
  unsigned int group_asym_packing;
  long unsigned int group_misfit_task_load;
  unsigned int nr_numa_running;
  unsigned int nr_preferred_running;
};

struct sd_lb_stats {
  struct sched_group* busiest;
  struct sched_group* local;
  long unsigned int total_load;
  long unsigned int total_capacity;
  long unsigned int avg_load;
  unsigned int prefer_sibling;
  struct sg_lb_stats busiest_stat;
  struct sg_lb_stats local_stat;
};

typedef struct rt_rq* rt_rq_iter_t;

typedef int wait_bit_action_f(struct wait_bit_key*, int);

struct sched_domain_attr {
  int relax_domain_level;
};

struct s_data {
  struct sched_domain** sd;
  struct root_domain___2* rd;
};

enum s_alloc {
  sa_rootdomain = 0,
  sa_sd = 1,
  sa_sd_storage = 2,
  sa_none = 3,
};

enum cpuacct_stat_index {
  CPUACCT_STAT_USER = 0,
  CPUACCT_STAT_SYSTEM = 1,
  CPUACCT_STAT_NSTATS = 2,
};

struct cpuacct_usage {
  u64 usages[2];
};

struct cpuacct {
  struct cgroup_subsys_state css;
  struct cpuacct_usage* cpuusage;
  struct kernel_cpustat* cpustat;
};

enum {
  MEMBARRIER_FLAG_SYNC_CORE = 1,
  MEMBARRIER_FLAG_RSEQ = 2,
};

enum membarrier_cmd {
  MEMBARRIER_CMD_QUERY = 0,
  MEMBARRIER_CMD_GLOBAL = 1,
  MEMBARRIER_CMD_GLOBAL_EXPEDITED = 2,
  MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED = 4,
  MEMBARRIER_CMD_PRIVATE_EXPEDITED = 8,
  MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED = 16,
  MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE = 32,
  MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE = 64,
  MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ = 128,
  MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ = 256,
  MEMBARRIER_CMD_SHARED = 1,
};

enum membarrier_cmd_flag {
  MEMBARRIER_CMD_FLAG_CPU = 1,
};

enum psi_res {
  PSI_IO = 0,
  PSI_MEM = 1,
  PSI_CPU = 2,
  NR_PSI_RESOURCES = 3,
};

struct psi_window {
  u64 size;
  u64 start_time;
  u64 start_value;
  u64 prev_growth;
};

struct psi_trigger {
  enum psi_states state;
  u64 threshold;
  struct list_head node;
  struct psi_group* group;
  wait_queue_head_t event_wait;
  int event;
  struct psi_window win;
  u64 last_event_time;
  struct kref refcount;
};

struct ww_acquire_ctx;

struct ww_mutex {
  struct mutex base;
  struct ww_acquire_ctx* ctx;
};

struct ww_acquire_ctx {
  struct task_struct* task;
  long unsigned int stamp;
  unsigned int acquired;
  short unsigned int wounded;
  short unsigned int is_wait_die;
};

struct mutex_waiter {
  struct list_head list;
  struct task_struct* task;
  struct ww_acquire_ctx* ww_ctx;
};

struct semaphore {
  raw_spinlock_t lock;
  unsigned int count;
  struct list_head wait_list;
};

struct semaphore_waiter {
  struct list_head list;
  struct task_struct* task;
  bool up;
};

enum rwsem_waiter_type {
  RWSEM_WAITING_FOR_WRITE = 0,
  RWSEM_WAITING_FOR_READ = 1,
};

struct rwsem_waiter {
  struct list_head list;
  struct task_struct* task;
  enum rwsem_waiter_type type;
  long unsigned int timeout;
};

enum rwsem_wake_type {
  RWSEM_WAKE_ANY = 0,
  RWSEM_WAKE_READERS = 1,
  RWSEM_WAKE_READ_OWNED = 2,
};

enum writer_wait_state {
  WRITER_NOT_FIRST = 0,
  WRITER_FIRST = 1,
  WRITER_HANDOFF = 2,
};

enum owner_state {
  OWNER_NULL = 1,
  OWNER_WRITER = 2,
  OWNER_READER = 4,
  OWNER_NONSPINNABLE = 8,
};

struct optimistic_spin_node {
  struct optimistic_spin_node* next;
  struct optimistic_spin_node* prev;
  int locked;
  int cpu;
};

struct mcs_spinlock {
  struct mcs_spinlock* next;
  int locked;
  int count;
};

struct qnode {
  struct mcs_spinlock mcs;
};

struct hrtimer_sleeper {
  struct hrtimer timer;
  struct task_struct* task;
};

struct rt_mutex;

struct rt_mutex_waiter {
  struct rb_node tree_entry;
  struct rb_node pi_tree_entry;
  struct task_struct* task;
  struct rt_mutex* lock;
  int prio;
  u64 deadline;
};

struct rt_mutex {
  raw_spinlock_t wait_lock;
  struct rb_root_cached waiters;
  struct task_struct* owner;
};

enum rtmutex_chainwalk {
  RT_MUTEX_MIN_CHAINWALK = 0,
  RT_MUTEX_FULL_CHAINWALK = 1,
};

struct pm_qos_request {
  struct plist_node node;
  struct pm_qos_constraints* qos;
};

enum pm_qos_req_action {
  PM_QOS_ADD_REQ = 0,
  PM_QOS_UPDATE_REQ = 1,
  PM_QOS_REMOVE_REQ = 2,
};

struct dev_printk_info {
  char subsystem[16];
  char device[48];
};

struct kmsg_dumper {
  struct list_head list;
  void (*dump)(struct kmsg_dumper*, enum kmsg_dump_reason);
  enum kmsg_dump_reason max_reason;
  bool active;
  bool registered;
  u32 cur_idx;
  u32 next_idx;
  u64 cur_seq;
  u64 next_seq;
};

struct trace_event_raw_console {
  struct trace_entry ent;
  u32 __data_loc_msg;
  char __data[0];
};

struct trace_event_data_offsets_console {
  u32 msg;
};

typedef void (*btf_trace_console)(void*, const char*, size_t);

struct printk_info {
  u64 seq;
  u64 ts_nsec;
  u16 text_len;
  u8 facility;
  u8 flags : 5;
  u8 level : 3;
  u32 caller_id;
  struct dev_printk_info dev_info;
};

struct printk_record {
  struct printk_info* info;
  char* text_buf;
  unsigned int text_buf_size;
};

struct prb_data_blk_lpos {
  long unsigned int begin;
  long unsigned int next;
};

struct prb_desc {
  atomic_long_t state_var;
  struct prb_data_blk_lpos text_blk_lpos;
};

struct prb_data_ring {
  unsigned int size_bits;
  char* data;
  atomic_long_t head_lpos;
  atomic_long_t tail_lpos;
};

struct prb_desc_ring {
  unsigned int count_bits;
  struct prb_desc* descs;
  struct printk_info* infos;
  atomic_long_t head_id;
  atomic_long_t tail_id;
};

struct printk_ringbuffer {
  struct prb_desc_ring desc_ring;
  struct prb_data_ring text_data_ring;
  atomic_long_t fail;
};

struct prb_reserved_entry {
  struct printk_ringbuffer* rb;
  long unsigned int irqflags;
  long unsigned int id;
  unsigned int text_space;
};

enum desc_state {
  desc_miss = 4294967295,
  desc_reserved = 0,
  desc_committed = 1,
  desc_finalized = 2,
  desc_reusable = 3,
};

struct console_cmdline {
  char name[16];
  int index;
  bool user_specified;
  char* options;
};

enum printk_info_flags {
  LOG_NEWLINE = 2,
  LOG_CONT = 8,
};

enum devkmsg_log_bits {
  __DEVKMSG_LOG_BIT_ON = 0,
  __DEVKMSG_LOG_BIT_OFF = 1,
  __DEVKMSG_LOG_BIT_LOCK = 2,
};

enum devkmsg_log_masks {
  DEVKMSG_LOG_MASK_ON = 1,
  DEVKMSG_LOG_MASK_OFF = 2,
  DEVKMSG_LOG_MASK_LOCK = 4,
};

enum con_msg_format_flags {
  MSG_FORMAT_DEFAULT = 0,
  MSG_FORMAT_SYSLOG = 1,
};

struct devkmsg_user {
  u64 seq;
  struct ratelimit_state rs;
  struct mutex lock;
  char buf[8192];
  struct printk_info info;
  char text_buf[8192];
  struct printk_record record;
};

struct printk_safe_seq_buf {
  atomic_t len;
  atomic_t message_lost;
  struct irq_work work;
  unsigned char buffer[8160];
};

struct prb_data_block {
  long unsigned int id;
  char data[0];
};

enum {
  IRQS_AUTODETECT = 1,
  IRQS_SPURIOUS_DISABLED = 2,
  IRQS_POLL_INPROGRESS = 8,
  IRQS_ONESHOT = 32,
  IRQS_REPLAY = 64,
  IRQS_WAITING = 128,
  IRQS_PENDING = 512,
  IRQS_SUSPENDED = 2048,
  IRQS_TIMINGS = 4096,
  IRQS_NMI = 8192,
};

enum {
  _IRQ_DEFAULT_INIT_FLAGS = 0,
  _IRQ_PER_CPU = 512,
  _IRQ_LEVEL = 256,
  _IRQ_NOPROBE = 1024,
  _IRQ_NOREQUEST = 2048,
  _IRQ_NOTHREAD = 65536,
  _IRQ_NOAUTOEN = 4096,
  _IRQ_MOVE_PCNTXT = 16384,
  _IRQ_NO_BALANCING = 8192,
  _IRQ_NESTED_THREAD = 32768,
  _IRQ_PER_CPU_DEVID = 131072,
  _IRQ_IS_POLLED = 262144,
  _IRQ_DISABLE_UNLAZY = 524288,
  _IRQ_HIDDEN = 1048576,
  _IRQF_MODIFY_MASK = 2096911,
};

enum {
  IRQTF_RUNTHREAD = 0,
  IRQTF_WARNED = 1,
  IRQTF_AFFINITY = 2,
  IRQTF_FORCED_THREAD = 3,
};

enum {
  IRQC_IS_HARDIRQ = 0,
  IRQC_IS_NESTED = 1,
};

enum {
  IRQ_STARTUP_NORMAL = 0,
  IRQ_STARTUP_MANAGED = 1,
  IRQ_STARTUP_ABORT = 2,
};

struct irq_devres {
  unsigned int irq;
  void* dev_id;
};

struct irq_desc_devres {
  unsigned int from;
  unsigned int cnt;
};

struct irqchip_fwid {
  struct fwnode_handle fwnode;
  unsigned int type;
  char* name;
  phys_addr_t* pa;
};

enum {
  AFFINITY = 0,
  AFFINITY_LIST = 1,
  EFFECTIVE = 2,
  EFFECTIVE_LIST = 3,
};

struct irq_affinity {
  unsigned int pre_vectors;
  unsigned int post_vectors;
  unsigned int nr_sets;
  unsigned int set_size[4];
  void (*calc_sets)(struct irq_affinity*, unsigned int);
  void* priv;
};

struct node_vectors {
  unsigned int id;
  union {
    unsigned int nvectors;
    unsigned int ncpus;
  };
};

struct cpumap {
  unsigned int available;
  unsigned int allocated;
  unsigned int managed;
  unsigned int managed_allocated;
  bool initialized;
  bool online;
  long unsigned int alloc_map[4];
  long unsigned int managed_map[4];
};

struct irq_matrix___2 {
  unsigned int matrix_bits;
  unsigned int alloc_start;
  unsigned int alloc_end;
  unsigned int alloc_size;
  unsigned int global_available;
  unsigned int global_reserved;
  unsigned int systembits_inalloc;
  unsigned int total_allocated;
  unsigned int online_maps;
  struct cpumap* maps;
  long unsigned int scratch_map[4];
  long unsigned int system_map[4];
};

struct trace_event_raw_irq_matrix_global {
  struct trace_entry ent;
  unsigned int online_maps;
  unsigned int global_available;
  unsigned int global_reserved;
  unsigned int total_allocated;
  char __data[0];
};

struct trace_event_raw_irq_matrix_global_update {
  struct trace_entry ent;
  int bit;
  unsigned int online_maps;
  unsigned int global_available;
  unsigned int global_reserved;
  unsigned int total_allocated;
  char __data[0];
};

struct trace_event_raw_irq_matrix_cpu {
  struct trace_entry ent;
  int bit;
  unsigned int cpu;
  bool online;
  unsigned int available;
  unsigned int allocated;
  unsigned int managed;
  unsigned int online_maps;
  unsigned int global_available;
  unsigned int global_reserved;
  unsigned int total_allocated;
  char __data[0];
};

struct trace_event_data_offsets_irq_matrix_global {};

struct trace_event_data_offsets_irq_matrix_global_update {};

struct trace_event_data_offsets_irq_matrix_cpu {};

typedef void (*btf_trace_irq_matrix_online)(void*, struct irq_matrix___2*);

typedef void (*btf_trace_irq_matrix_offline)(void*, struct irq_matrix___2*);

typedef void (*btf_trace_irq_matrix_reserve)(void*, struct irq_matrix___2*);

typedef void (
    *btf_trace_irq_matrix_remove_reserved)(void*, struct irq_matrix___2*);

typedef void (
    *btf_trace_irq_matrix_assign_system)(void*, int, struct irq_matrix___2*);

typedef void (*btf_trace_irq_matrix_alloc_reserved)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*btf_trace_irq_matrix_reserve_managed)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*btf_trace_irq_matrix_remove_managed)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*btf_trace_irq_matrix_alloc_managed)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*btf_trace_irq_matrix_assign)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*btf_trace_irq_matrix_alloc)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*btf_trace_irq_matrix_free)(
    void*,
    int,
    unsigned int,
    struct irq_matrix___2*,
    struct cpumap*);

typedef void (*call_rcu_func_t)(struct callback_head*, rcu_callback_t);

struct rcu_synchronize {
  struct callback_head head;
  struct completion completion;
};

struct trace_event_raw_rcu_utilization {
  struct trace_entry ent;
  const char* s;
  char __data[0];
};

struct trace_event_data_offsets_rcu_utilization {};

typedef void (*btf_trace_rcu_utilization)(void*, const char*);

struct rcu_tasks;

typedef void (*rcu_tasks_gp_func_t)(struct rcu_tasks*);

typedef void (*pregp_func_t)();

typedef void (*pertask_func_t)(struct task_struct*, struct list_head*);

typedef void (*postscan_func_t)(struct list_head*);

typedef void (*holdouts_func_t)(struct list_head*, bool, bool*);

typedef void (*postgp_func_t)(struct rcu_tasks*);

struct rcu_tasks {
  struct callback_head* cbs_head;
  struct callback_head** cbs_tail;
  struct wait_queue_head cbs_wq;
  raw_spinlock_t cbs_lock;
  int gp_state;
  int gp_sleep;
  int init_fract;
  long unsigned int gp_jiffies;
  long unsigned int gp_start;
  long unsigned int n_gps;
  long unsigned int n_ipis;
  long unsigned int n_ipis_fails;
  struct task_struct* kthread_ptr;
  rcu_tasks_gp_func_t gp_func;
  pregp_func_t pregp_func;
  pertask_func_t pertask_func;
  postscan_func_t postscan_func;
  holdouts_func_t holdouts_func;
  postgp_func_t postgp_func;
  call_rcu_func_t call_func;
  char* name;
  char* kname;
};

enum {
  GP_IDLE = 0,
  GP_ENTER = 1,
  GP_PASSED = 2,
  GP_EXIT = 3,
  GP_REPLAY = 4,
};

struct rcu_cblist {
  struct callback_head* head;
  struct callback_head** tail;
  long int len;
};

enum rcutorture_type {
  RCU_FLAVOR = 0,
  RCU_TASKS_FLAVOR = 1,
  RCU_TASKS_RUDE_FLAVOR = 2,
  RCU_TASKS_TRACING_FLAVOR = 3,
  RCU_TRIVIAL_FLAVOR = 4,
  SRCU_FLAVOR = 5,
  INVALID_RCU_FLAVOR = 6,
};

enum tick_device_mode {
  TICKDEV_MODE_PERIODIC = 0,
  TICKDEV_MODE_ONESHOT = 1,
};

struct tick_device___2 {
  struct clock_event_device* evtdev;
  enum tick_device_mode mode;
};

struct rcu_exp_work {
  long unsigned int rew_s;
  struct work_struct rew_work;
};

struct rcu_node {
  raw_spinlock_t lock;
  long unsigned int gp_seq;
  long unsigned int gp_seq_needed;
  long unsigned int completedqs;
  long unsigned int qsmask;
  long unsigned int rcu_gp_init_mask;
  long unsigned int qsmaskinit;
  long unsigned int qsmaskinitnext;
  long unsigned int ofl_seq;
  long unsigned int expmask;
  long unsigned int expmaskinit;
  long unsigned int expmaskinitnext;
  long unsigned int cbovldmask;
  long unsigned int ffmask;
  long unsigned int grpmask;
  int grplo;
  int grphi;
  u8 grpnum;
  u8 level;
  bool wait_blkd_tasks;
  struct rcu_node* parent;
  struct list_head blkd_tasks;
  struct list_head* gp_tasks;
  struct list_head* exp_tasks;
  struct list_head* boost_tasks;
  struct rt_mutex boost_mtx;
  long unsigned int boost_time;
  struct task_struct* boost_kthread_task;
  unsigned int boost_kthread_status;
  long : 32;
  long : 64;
  long : 64;
  raw_spinlock_t fqslock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t exp_lock;
  long unsigned int exp_seq_rq;
  wait_queue_head_t exp_wq[4];
  struct rcu_exp_work rew;
  bool exp_need_flush;
  long : 56;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

union rcu_noqs {
  struct {
    u8 norm;
    u8 exp;
  } b;
  u16 s;
};

struct rcu_data {
  long unsigned int gp_seq;
  long unsigned int gp_seq_needed;
  union rcu_noqs cpu_no_qs;
  bool core_needs_qs;
  bool beenonline;
  bool gpwrap;
  bool exp_deferred_qs;
  bool cpu_started;
  struct rcu_node* mynode;
  long unsigned int grpmask;
  long unsigned int ticks_this_gp;
  struct irq_work defer_qs_iw;
  bool defer_qs_iw_pending;
  struct work_struct strict_work;
  struct rcu_segcblist cblist;
  long int qlen_last_fqs_check;
  long unsigned int n_cbs_invoked;
  long unsigned int n_force_qs_snap;
  long int blimit;
  int dynticks_snap;
  long int dynticks_nesting;
  long int dynticks_nmi_nesting;
  atomic_t dynticks;
  bool rcu_need_heavy_qs;
  bool rcu_urgent_qs;
  bool rcu_forced_tick;
  bool rcu_forced_tick_exp;
  struct callback_head barrier_head;
  int exp_dynticks_snap;
  struct task_struct* rcu_cpu_kthread_task;
  unsigned int rcu_cpu_kthread_status;
  char rcu_cpu_has_work;
  unsigned int softirq_snap;
  struct irq_work rcu_iw;
  bool rcu_iw_pending;
  long unsigned int rcu_iw_gp_seq;
  long unsigned int rcu_ofl_gp_seq;
  short int rcu_ofl_gp_flags;
  long unsigned int rcu_onl_gp_seq;
  short int rcu_onl_gp_flags;
  long unsigned int last_fqs_resched;
  int cpu;
};

struct rcu_state {
  struct rcu_node node[9];
  struct rcu_node* level[3];
  int ncpus;
  int n_online_cpus;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u8 boost;
  long unsigned int gp_seq;
  long unsigned int gp_max;
  struct task_struct* gp_kthread;
  struct swait_queue_head gp_wq;
  short int gp_flags;
  short int gp_state;
  long unsigned int gp_wake_time;
  long unsigned int gp_wake_seq;
  struct mutex barrier_mutex;
  atomic_t barrier_cpu_count;
  struct completion barrier_completion;
  long unsigned int barrier_sequence;
  struct mutex exp_mutex;
  struct mutex exp_wake_mutex;
  long unsigned int expedited_sequence;
  atomic_t expedited_need_qs;
  struct swait_queue_head expedited_wq;
  int ncpus_snap;
  u8 cbovld;
  u8 cbovldnext;
  long unsigned int jiffies_force_qs;
  long unsigned int jiffies_kick_kthreads;
  long unsigned int n_force_qs;
  long unsigned int gp_start;
  long unsigned int gp_end;
  long unsigned int gp_activity;
  long unsigned int gp_req_activity;
  long unsigned int jiffies_stall;
  long unsigned int jiffies_resched;
  long unsigned int n_force_qs_gpstart;
  const char* name;
  char abbr;
  long : 56;
  long : 64;
  long : 64;
  raw_spinlock_t ofl_lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct kvfree_rcu_bulk_data {
  long unsigned int nr_records;
  struct kvfree_rcu_bulk_data* next;
  void* records[0];
};

struct kfree_rcu_cpu;

struct kfree_rcu_cpu_work {
  struct rcu_work rcu_work;
  struct callback_head* head_free;
  struct kvfree_rcu_bulk_data* bkvhead_free[2];
  struct kfree_rcu_cpu* krcp;
};

struct kfree_rcu_cpu {
  struct callback_head* head;
  struct kvfree_rcu_bulk_data* bkvhead[2];
  struct kfree_rcu_cpu_work krw_arr[2];
  raw_spinlock_t lock;
  struct delayed_work monitor_work;
  bool monitor_todo;
  bool initialized;
  int count;
  struct work_struct page_cache_work;
  atomic_t work_in_progress;
  struct hrtimer hrtimer;
  struct llist_head bkvcache;
  int nr_bkv_objs;
};

struct klp_func {
  const char* old_name;
  void* new_func;
  long unsigned int old_sympos;
  void* old_func;
  struct kobject kobj;
  struct list_head node;
  struct list_head stack_node;
  long unsigned int old_size;
  long unsigned int new_size;
  bool nop;
  bool patched;
  bool transition;
};

struct klp_object;

struct klp_callbacks {
  int (*pre_patch)(struct klp_object*);
  void (*post_patch)(struct klp_object*);
  void (*pre_unpatch)(struct klp_object*);
  void (*post_unpatch)(struct klp_object*);
  bool post_unpatch_enabled;
};

struct klp_object {
  const char* name;
  struct klp_func* funcs;
  struct klp_callbacks callbacks;
  struct kobject kobj;
  struct list_head func_list;
  struct list_head node;
  struct module* mod;
  bool dynamic;
  bool patched;
};

struct klp_state {
  long unsigned int id;
  unsigned int version;
  void* data;
};

struct klp_patch {
  struct module* mod;
  struct klp_object* objs;
  struct klp_state* states;
  bool replace;
  struct list_head list;
  struct kobject kobj;
  struct list_head obj_list;
  bool enabled;
  bool forced;
  struct work_struct free_work;
  struct completion finish;
};

struct klp_find_arg {
  const char* objname;
  const char* name;
  long unsigned int addr;
  long unsigned int count;
  long unsigned int pos;
};

struct klp_ops {
  struct list_head node;
  struct list_head func_stack;
  struct ftrace_ops fops;
};

typedef int (*klp_shadow_ctor_t)(void*, void*, void*);

typedef void (*klp_shadow_dtor_t)(void*, void*);

struct klp_shadow {
  struct hlist_node node;
  struct callback_head callback_head;
  void* obj;
  long unsigned int id;
  char data[0];
};

enum dma_sync_target {
  SYNC_FOR_CPU = 0,
  SYNC_FOR_DEVICE = 1,
};

struct dma_devres {
  size_t size;
  void* vaddr;
  dma_addr_t dma_handle;
  long unsigned int attrs;
};

struct trace_event_raw_swiotlb_bounced {
  struct trace_entry ent;
  u32 __data_loc_dev_name;
  u64 dma_mask;
  dma_addr_t dev_addr;
  size_t size;
  enum swiotlb_force swiotlb_force;
  char __data[0];
};

struct trace_event_data_offsets_swiotlb_bounced {
  u32 dev_name;
};

typedef void (*btf_trace_swiotlb_bounced)(
    void*,
    struct device*,
    dma_addr_t,
    size_t,
    enum swiotlb_force);

struct trace_event_raw_sys_enter {
  struct trace_entry ent;
  long int id;
  long unsigned int args[6];
  char __data[0];
};

struct trace_event_raw_sys_exit {
  struct trace_entry ent;
  long int id;
  long int ret;
  char __data[0];
};

struct trace_event_data_offsets_sys_enter {};

struct trace_event_data_offsets_sys_exit {};

typedef void (*btf_trace_sys_enter)(void*, struct pt_regs*, long int);

typedef void (*btf_trace_sys_exit)(void*, struct pt_regs*, long int);

enum mmu_notifier_event {
  MMU_NOTIFY_UNMAP = 0,
  MMU_NOTIFY_CLEAR = 1,
  MMU_NOTIFY_PROTECTION_VMA = 2,
  MMU_NOTIFY_PROTECTION_PAGE = 3,
  MMU_NOTIFY_SOFT_DIRTY = 4,
  MMU_NOTIFY_RELEASE = 5,
  MMU_NOTIFY_MIGRATE = 6,
};

struct mmu_notifier;

struct mmu_notifier_range;

struct mmu_notifier_ops {
  void (*release)(struct mmu_notifier*, struct mm_struct*);
  int (*clear_flush_young)(
      struct mmu_notifier*,
      struct mm_struct*,
      long unsigned int,
      long unsigned int);
  int (*clear_young)(
      struct mmu_notifier*,
      struct mm_struct*,
      long unsigned int,
      long unsigned int);
  int (*test_young)(struct mmu_notifier*, struct mm_struct*, long unsigned int);
  void (*change_pte)(
      struct mmu_notifier*,
      struct mm_struct*,
      long unsigned int,
      pte_t);
  int (*invalidate_range_start)(
      struct mmu_notifier*,
      const struct mmu_notifier_range*);
  void (*invalidate_range_end)(
      struct mmu_notifier*,
      const struct mmu_notifier_range*);
  void (*invalidate_range)(
      struct mmu_notifier*,
      struct mm_struct*,
      long unsigned int,
      long unsigned int);
  struct mmu_notifier* (*alloc_notifier)(struct mm_struct*);
  void (*free_notifier)(struct mmu_notifier*);
};

struct mmu_notifier {
  struct hlist_node hlist;
  const struct mmu_notifier_ops* ops;
  struct mm_struct* mm;
  struct callback_head rcu;
  unsigned int users;
};

struct mmu_notifier_range {
  struct vm_area_struct* vma;
  struct mm_struct* mm;
  long unsigned int start;
  long unsigned int end;
  unsigned int flags;
  enum mmu_notifier_event event;
  void* migrate_pgmap_owner;
};

struct kvm_regs {
  __u64 rax;
  __u64 rbx;
  __u64 rcx;
  __u64 rdx;
  __u64 rsi;
  __u64 rdi;
  __u64 rsp;
  __u64 rbp;
  __u64 r8;
  __u64 r9;
  __u64 r10;
  __u64 r11;
  __u64 r12;
  __u64 r13;
  __u64 r14;
  __u64 r15;
  __u64 rip;
  __u64 rflags;
};

struct kvm_segment {
  __u64 base;
  __u32 limit;
  __u16 selector;
  __u8 type;
  __u8 present;
  __u8 dpl;
  __u8 db;
  __u8 s;
  __u8 l;
  __u8 g;
  __u8 avl;
  __u8 unusable;
  __u8 padding;
};

struct kvm_dtable {
  __u64 base;
  __u16 limit;
  __u16 padding[3];
};

struct kvm_sregs {
  struct kvm_segment cs;
  struct kvm_segment ds;
  struct kvm_segment es;
  struct kvm_segment fs;
  struct kvm_segment gs;
  struct kvm_segment ss;
  struct kvm_segment tr;
  struct kvm_segment ldt;
  struct kvm_dtable gdt;
  struct kvm_dtable idt;
  __u64 cr0;
  __u64 cr2;
  __u64 cr3;
  __u64 cr4;
  __u64 cr8;
  __u64 efer;
  __u64 apic_base;
  __u64 interrupt_bitmap[4];
};

struct kvm_msr_entry {
  __u32 index;
  __u32 reserved;
  __u64 data;
};

struct kvm_cpuid_entry2 {
  __u32 function;
  __u32 index;
  __u32 flags;
  __u32 eax;
  __u32 ebx;
  __u32 ecx;
  __u32 edx;
  __u32 padding[3];
};

struct kvm_debug_exit_arch {
  __u32 exception;
  __u32 pad;
  __u64 pc;
  __u64 dr6;
  __u64 dr7;
};

struct kvm_vcpu_events {
  struct {
    __u8 injected;
    __u8 nr;
    __u8 has_error_code;
    __u8 pending;
    __u32 error_code;
  } exception;
  struct {
    __u8 injected;
    __u8 nr;
    __u8 soft;
    __u8 shadow;
  } interrupt;
  struct {
    __u8 injected;
    __u8 pending;
    __u8 masked;
    __u8 pad;
  } nmi;
  __u32 sipi_vector;
  __u32 flags;
  struct {
    __u8 smm;
    __u8 pending;
    __u8 smm_inside_nmi;
    __u8 latched_init;
  } smi;
  __u8 reserved[27];
  __u8 exception_has_payload;
  __u64 exception_payload;
};

struct kvm_sync_regs {
  struct kvm_regs regs;
  struct kvm_sregs sregs;
  struct kvm_vcpu_events events;
};

struct kvm_vmx_nested_state_data {
  __u8 vmcs12[4096];
  __u8 shadow_vmcs12[4096];
};

struct kvm_vmx_nested_state_hdr {
  __u64 vmxon_pa;
  __u64 vmcs12_pa;
  struct {
    __u16 flags;
  } smm;
  __u32 flags;
  __u64 preemption_timer_deadline;
};

struct kvm_svm_nested_state_data {
  __u8 vmcb12[4096];
};

struct kvm_svm_nested_state_hdr {
  __u64 vmcb_pa;
};

struct kvm_nested_state {
  __u16 flags;
  __u16 format;
  __u32 size;
  union {
    struct kvm_vmx_nested_state_hdr vmx;
    struct kvm_svm_nested_state_hdr svm;
    __u8 pad[120];
  } hdr;
  union {
    struct kvm_vmx_nested_state_data vmx[0];
    struct kvm_svm_nested_state_data svm[0];
  } data;
};

struct kvm_pmu_event_filter {
  __u32 action;
  __u32 nevents;
  __u32 fixed_counter_bitmap;
  __u32 flags;
  __u32 pad[4];
  __u64 events[0];
};

struct kvm_hyperv_exit {
  __u32 type;
  __u32 pad1;
  union {
    struct {
      __u32 msr;
      __u32 pad2;
      __u64 control;
      __u64 evt_page;
      __u64 msg_page;
    } synic;
    struct {
      __u64 input;
      __u64 result;
      __u64 params[2];
    } hcall;
    struct {
      __u32 msr;
      __u32 pad2;
      __u64 control;
      __u64 status;
      __u64 send_page;
      __u64 recv_page;
      __u64 pending_page;
    } syndbg;
  } u;
};

struct kvm_xen_exit {
  __u32 type;
  union {
    struct {
      __u32 longmode;
      __u32 cpl;
      __u64 input;
      __u64 result;
      __u64 params[6];
    } hcall;
  } u;
};

struct kvm_run {
  __u8 request_interrupt_window;
  __u8 immediate_exit;
  __u8 padding1[6];
  __u32 exit_reason;
  __u8 ready_for_interrupt_injection;
  __u8 if_flag;
  __u16 flags;
  __u64 cr8;
  __u64 apic_base;
  union {
    struct {
      __u64 hardware_exit_reason;
    } hw;
    struct {
      __u64 hardware_entry_failure_reason;
      __u32 cpu;
    } fail_entry;
    struct {
      __u32 exception;
      __u32 error_code;
    } ex;
    struct {
      __u8 direction;
      __u8 size;
      __u16 port;
      __u32 count;
      __u64 data_offset;
    } io;
    struct {
      struct kvm_debug_exit_arch arch;
    } debug;
    struct {
      __u64 phys_addr;
      __u8 data[8];
      __u32 len;
      __u8 is_write;
    } mmio;
    struct {
      __u64 nr;
      __u64 args[6];
      __u64 ret;
      __u32 longmode;
      __u32 pad;
    } hypercall;
    struct {
      __u64 rip;
      __u32 is_write;
      __u32 pad;
    } tpr_access;
    struct {
      __u8 icptcode;
      __u16 ipa;
      __u32 ipb;
    } s390_sieic;
    __u64 s390_reset_flags;
    struct {
      __u64 trans_exc_code;
      __u32 pgm_code;
    } s390_ucontrol;
    struct {
      __u32 dcrn;
      __u32 data;
      __u8 is_write;
    } dcr;
    struct {
      __u32 suberror;
      __u32 ndata;
      __u64 data[16];
    } internal;
    struct {
      __u64 gprs[32];
    } osi;
    struct {
      __u64 nr;
      __u64 ret;
      __u64 args[9];
    } papr_hcall;
    struct {
      __u16 subchannel_id;
      __u16 subchannel_nr;
      __u32 io_int_parm;
      __u32 io_int_word;
      __u32 ipb;
      __u8 dequeued;
    } s390_tsch;
    struct {
      __u32 epr;
    } epr;
    struct {
      __u32 type;
      __u64 flags;
    } system_event;
    struct {
      __u64 addr;
      __u8 ar;
      __u8 reserved;
      __u8 fc;
      __u8 sel1;
      __u16 sel2;
    } s390_stsi;
    struct {
      __u8 vector;
    } eoi;
    struct kvm_hyperv_exit hyperv;
    struct {
      __u64 esr_iss;
      __u64 fault_ipa;
    } arm_nisv;
    struct {
      __u8 error;
      __u8 pad[7];
      __u32 reason;
      __u32 index;
      __u64 data;
    } msr;
    struct kvm_xen_exit xen;
    char padding[256];
  };
  __u64 kvm_valid_regs;
  __u64 kvm_dirty_regs;
  union {
    struct kvm_sync_regs regs;
    char padding[2048];
  } s;
};

struct kvm_coalesced_mmio {
  __u64 phys_addr;
  __u32 len;
  union {
    __u32 pad;
    __u32 pio;
  };
  __u8 data[8];
};

struct kvm_coalesced_mmio_ring {
  __u32 first;
  __u32 last;
  struct kvm_coalesced_mmio coalesced_mmio[0];
};

struct kvm_xen_hvm_config {
  __u32 flags;
  __u32 msr;
  __u64 blob_addr_32;
  __u64 blob_addr_64;
  __u8 blob_size_32;
  __u8 blob_size_64;
  __u8 pad2[30];
};

struct kvm_device_attr {
  __u32 flags;
  __u32 group;
  __u64 attr;
  __u64 addr;
};

struct kvm_enc_region {
  __u64 addr;
  __u64 size;
};

struct kvm_dirty_gfn {
  __u32 flags;
  __u32 slot;
  __u64 offset;
};

typedef long unsigned int gva_t;

typedef u64 gpa_t;

typedef u64 gfn_t;

typedef u64 hpa_t;

typedef u64 hfn_t;

typedef hfn_t kvm_pfn_t;

struct kvm_memory_slot;

struct gfn_to_hva_cache {
  u64 generation;
  gpa_t gpa;
  long unsigned int hva;
  long unsigned int len;
  struct kvm_memory_slot* memslot;
};

struct kvm_rmap_head;

struct kvm_lpage_info;

struct kvm_arch_memory_slot {
  struct kvm_rmap_head* rmap[3];
  struct kvm_lpage_info* lpage_info[2];
  short unsigned int* gfn_track[1];
};

struct kvm_memory_slot {
  gfn_t base_gfn;
  long unsigned int npages;
  long unsigned int* dirty_bitmap;
  struct kvm_arch_memory_slot arch;
  long unsigned int userspace_addr;
  u32 flags;
  short int id;
  u16 as_id;
};

struct gfn_to_pfn_cache {
  u64 generation;
  gfn_t gfn;
  kvm_pfn_t pfn;
  bool dirty;
};

struct kvm_mmu_memory_cache {
  int nobjs;
  gfp_t gfp_zero;
  struct kmem_cache* kmem_cache;
  void* objects[40];
};

struct hv_partition_assist_pg {
  u32 tlb_lock_count;
};

union hv_message_flags {
  __u8 asu8;
  struct {
    __u8 msg_pending : 1;
    __u8 reserved : 7;
  };
};

union hv_port_id {
  __u32 asu32;
  struct {
    __u32 id : 24;
    __u32 reserved : 8;
  } u;
};

struct hv_message_header {
  __u32 message_type;
  __u8 payload_size;
  union hv_message_flags message_flags;
  __u8 reserved[2];
  union {
    __u64 sender;
    union hv_port_id port;
  };
};

struct hv_message {
  struct hv_message_header header;
  union {
    __u64 payload[30];
  } u;
};

union hv_stimer_config {
  u64 as_uint64;
  struct {
    u64 enable : 1;
    u64 periodic : 1;
    u64 lazy : 1;
    u64 auto_enable : 1;
    u64 apic_vector : 8;
    u64 direct_mode : 1;
    u64 reserved_z0 : 3;
    u64 sintx : 4;
    u64 reserved_z1 : 44;
  };
};

struct hyperv_pci_block_ops {
  int (*read_block)(
      struct pci_dev*,
      void*,
      unsigned int,
      unsigned int,
      unsigned int*);
  int (*write_block)(struct pci_dev*, void*, unsigned int, unsigned int);
  int (*reg_blk_invalidate)(struct pci_dev*, void*, void (*)(void*, u64));
};

enum kvm_page_track_mode {
  KVM_PAGE_TRACK_WRITE = 0,
  KVM_PAGE_TRACK_MAX = 1,
};

struct kvm_page_track_notifier_head {
  struct srcu_struct track_srcu;
  struct hlist_head track_notifier_list;
};

struct kvm_vcpu;

struct kvm;

struct kvm_page_track_notifier_node {
  struct hlist_node node;
  void (*track_write)(
      struct kvm_vcpu*,
      gpa_t,
      const u8*,
      int,
      struct kvm_page_track_notifier_node*);
  void (*track_flush_slot)(
      struct kvm*,
      struct kvm_memory_slot*,
      struct kvm_page_track_notifier_node*);
};

struct kvm_vcpu_stat {
  u64 pf_fixed;
  u64 pf_guest;
  u64 tlb_flush;
  u64 invlpg;
  u64 exits;
  u64 io_exits;
  u64 mmio_exits;
  u64 signal_exits;
  u64 irq_window_exits;
  u64 nmi_window_exits;
  u64 l1d_flush;
  u64 halt_exits;
  u64 halt_successful_poll;
  u64 halt_attempted_poll;
  u64 halt_poll_invalid;
  u64 halt_wakeup;
  u64 request_irq_exits;
  u64 irq_exits;
  u64 host_state_reload;
  u64 fpu_reload;
  u64 insn_emulation;
  u64 insn_emulation_fail;
  u64 hypercalls;
  u64 irq_injections;
  u64 nmi_injections;
  u64 req_event;
  u64 halt_poll_success_ns;
  u64 halt_poll_fail_ns;
};

struct kvm_mmio_fragment {
  gpa_t gpa;
  void* data;
  unsigned int len;
};

struct kvm_lapic;

struct x86_exception;

struct kvm_mmu_page;

union kvm_mmu_page_role {
  u32 word;
  struct {
    unsigned int level : 4;
    unsigned int gpte_is_8_bytes : 1;
    unsigned int quadrant : 2;
    unsigned int direct : 1;
    unsigned int access : 3;
    unsigned int invalid : 1;
    unsigned int nxe : 1;
    unsigned int cr0_wp : 1;
    unsigned int smep_andnot_wp : 1;
    unsigned int smap_andnot_wp : 1;
    unsigned int ad_disabled : 1;
    unsigned int guest_mode : 1;
    char : 6;
    unsigned int smm : 8;
  };
};

union kvm_mmu_extended_role {
  u32 word;
  struct {
    unsigned int valid : 1;
    unsigned int execonly : 1;
    unsigned int cr0_pg : 1;
    unsigned int cr4_pae : 1;
    unsigned int cr4_pse : 1;
    unsigned int cr4_pke : 1;
    unsigned int cr4_smap : 1;
    unsigned int cr4_smep : 1;
    unsigned int cr4_la57 : 1;
    unsigned int maxphyaddr : 6;
  };
};

union kvm_mmu_role {
  u64 as_u64;
  struct {
    union kvm_mmu_page_role base;
    union kvm_mmu_extended_role ext;
  };
};

struct kvm_mmu_root_info {
  gpa_t pgd;
  hpa_t hpa;
};

struct rsvd_bits_validate {
  u64 rsvd_bits_mask[10];
  u64 bad_mt_xwr;
};

struct kvm_mmu {
  long unsigned int (*get_guest_pgd)(struct kvm_vcpu*);
  u64 (*get_pdptr)(struct kvm_vcpu*, int);
  int (*page_fault)(struct kvm_vcpu*, gpa_t, u32, bool);
  void (*inject_page_fault)(struct kvm_vcpu*, struct x86_exception*);
  gpa_t (*gva_to_gpa)(struct kvm_vcpu*, gpa_t, u32, struct x86_exception*);
  gpa_t (*translate_gpa)(struct kvm_vcpu*, gpa_t, u32, struct x86_exception*);
  int (*sync_page)(struct kvm_vcpu*, struct kvm_mmu_page*);
  void (*invlpg)(struct kvm_vcpu*, gva_t, hpa_t);
  hpa_t root_hpa;
  gpa_t root_pgd;
  union kvm_mmu_role mmu_role;
  u8 root_level;
  u8 shadow_root_level;
  u8 ept_ad;
  bool direct_map;
  struct kvm_mmu_root_info prev_roots[3];
  u8 permissions[16];
  u32 pkru_mask;
  u64* pae_root;
  u64* lm_root;
  struct rsvd_bits_validate shadow_zero_check;
  struct rsvd_bits_validate guest_rsvd_check;
  u8 last_nonleaf_level;
  bool nx;
  u64 pdptrs[4];
};

struct kvm_pio_request {
  long unsigned int linear_rip;
  long unsigned int count;
  int in;
  int port;
  int size;
};

struct kvm_queued_exception {
  bool pending;
  bool injected;
  bool has_error_code;
  u8 nr;
  u32 error_code;
  long unsigned int payload;
  bool has_payload;
  u8 nested_apf;
};

struct kvm_queued_interrupt {
  bool injected;
  bool soft;
  u8 nr;
};

struct x86_emulate_ctxt;

struct kvm_mtrr_range {
  u64 base;
  u64 mask;
  struct list_head node;
};

struct kvm_mtrr {
  struct kvm_mtrr_range var_ranges[8];
  mtrr_type fixed_ranges[88];
  u64 deftype;
  struct list_head head;
};

enum pmc_type {
  KVM_PMC_GP = 0,
  KVM_PMC_FIXED = 1,
};

struct kvm_pmc {
  enum pmc_type type;
  u8 idx;
  u64 counter;
  u64 eventsel;
  struct perf_event* perf_event;
  struct kvm_vcpu* vcpu;
  u64 current_config;
};

struct kvm_pmu {
  unsigned int nr_arch_gp_counters;
  unsigned int nr_arch_fixed_counters;
  unsigned int available_event_types;
  u64 fixed_ctr_ctrl;
  u64 global_ctrl;
  u64 global_status;
  u64 global_ovf_ctrl;
  u64 counter_bitmask[2];
  u64 global_ctrl_mask;
  u64 global_ovf_ctrl_mask;
  u64 reserved_bits;
  u8 version;
  struct kvm_pmc gp_counters[32];
  struct kvm_pmc fixed_counters[4];
  struct irq_work irq_work;
  long unsigned int reprogram_pmi[1];
  long unsigned int all_valid_pmc_idx[1];
  long unsigned int pmc_in_use[1];
  bool need_cleanup;
  u8 event_count;
};

struct kvm_vcpu_xen {
  u64 hypercall_rip;
  u32 current_runstate;
  bool vcpu_info_set;
  bool vcpu_time_info_set;
  bool runstate_set;
  struct gfn_to_hva_cache vcpu_info_cache;
  struct gfn_to_hva_cache vcpu_time_info_cache;
  struct gfn_to_hva_cache runstate_cache;
  u64 last_steal;
  u64 runstate_entry_time;
  u64 runstate_times[4];
};

struct kvm_vcpu_hv;

struct kvm_vcpu_arch {
  long unsigned int regs[17];
  u32 regs_avail;
  u32 regs_dirty;
  long unsigned int cr0;
  long unsigned int cr0_guest_owned_bits;
  long unsigned int cr2;
  long unsigned int cr3;
  long unsigned int cr4;
  long unsigned int cr4_guest_owned_bits;
  long unsigned int cr4_guest_rsvd_bits;
  long unsigned int cr8;
  u32 host_pkru;
  u32 pkru;
  u32 hflags;
  u64 efer;
  u64 apic_base;
  struct kvm_lapic* apic;
  bool apicv_active;
  bool load_eoi_exitmap_pending;
  long unsigned int ioapic_handled_vectors[4];
  long unsigned int apic_attention;
  int32_t apic_arb_prio;
  int mp_state;
  u64 ia32_misc_enable_msr;
  u64 smbase;
  u64 smi_count;
  bool tpr_access_reporting;
  bool xsaves_enabled;
  u64 ia32_xss;
  u64 microcode_version;
  u64 arch_capabilities;
  u64 perf_capabilities;
  struct kvm_mmu* mmu;
  struct kvm_mmu root_mmu;
  struct kvm_mmu guest_mmu;
  struct kvm_mmu nested_mmu;
  struct kvm_mmu* walk_mmu;
  struct kvm_mmu_memory_cache mmu_pte_list_desc_cache;
  struct kvm_mmu_memory_cache mmu_shadow_page_cache;
  struct kvm_mmu_memory_cache mmu_gfn_array_cache;
  struct kvm_mmu_memory_cache mmu_page_header_cache;
  struct fpu* user_fpu;
  struct fpu* guest_fpu;
  u64 xcr0;
  u64 guest_supported_xcr0;
  struct kvm_pio_request pio;
  void* pio_data;
  void* guest_ins_data;
  u8 event_exit_inst_len;
  struct kvm_queued_exception exception;
  struct kvm_queued_interrupt interrupt;
  int halt_request;
  int cpuid_nent;
  struct kvm_cpuid_entry2* cpuid_entries;
  u64 reserved_gpa_bits;
  int maxphyaddr;
  int max_tdp_level;
  struct x86_emulate_ctxt* emulate_ctxt;
  bool emulate_regs_need_sync_to_vcpu;
  bool emulate_regs_need_sync_from_vcpu;
  int (*complete_userspace_io)(struct kvm_vcpu*);
  gpa_t time;
  struct pvclock_vcpu_time_info hv_clock;
  unsigned int hw_tsc_khz;
  struct gfn_to_hva_cache pv_time;
  bool pv_time_enabled;
  bool pvclock_set_guest_stopped_request;
  struct {
    u8 preempted;
    u64 msr_val;
    u64 last_steal;
    struct gfn_to_pfn_cache cache;
  } st;
  u64 l1_tsc_offset;
  u64 tsc_offset;
  u64 last_guest_tsc;
  u64 last_host_tsc;
  u64 tsc_offset_adjustment;
  u64 this_tsc_nsec;
  u64 this_tsc_write;
  u64 this_tsc_generation;
  bool tsc_catchup;
  bool tsc_always_catchup;
  s8 virtual_tsc_shift;
  u32 virtual_tsc_mult;
  u32 virtual_tsc_khz;
  s64 ia32_tsc_adjust_msr;
  u64 msr_ia32_power_ctl;
  u64 tsc_scaling_ratio;
  atomic_t nmi_queued;
  unsigned int nmi_pending;
  bool nmi_injected;
  bool smi_pending;
  struct kvm_mtrr mtrr_state;
  u64 pat;
  unsigned int switch_db_regs;
  long unsigned int db[4];
  long unsigned int dr6;
  long unsigned int dr7;
  long unsigned int eff_db[4];
  long unsigned int guest_debug_dr7;
  u64 msr_platform_info;
  u64 msr_misc_features_enables;
  u64 mcg_cap;
  u64 mcg_status;
  u64 mcg_ctl;
  u64 mcg_ext_ctl;
  u64* mce_banks;
  u64 mmio_gva;
  unsigned int mmio_access;
  gfn_t mmio_gfn;
  u64 mmio_gen;
  struct kvm_pmu pmu;
  long unsigned int singlestep_rip;
  bool hyperv_enabled;
  struct kvm_vcpu_hv* hyperv;
  struct kvm_vcpu_xen xen;
  cpumask_var_t wbinvd_dirty_mask;
  long unsigned int last_retry_eip;
  long unsigned int last_retry_addr;
  struct {
    bool halted;
    gfn_t gfns[64];
    struct gfn_to_hva_cache data;
    u64 msr_en_val;
    u64 msr_int_val;
    u16 vec;
    u32 id;
    bool send_user_only;
    u32 host_apf_flags;
    long unsigned int nested_apf_token;
    bool delivery_as_pf_vmexit;
    bool pageready_pending;
  } apf;
  struct {
    u64 length;
    u64 status;
  } osvw;
  struct {
    u64 msr_val;
    struct gfn_to_hva_cache data;
  } pv_eoi;
  u64 msr_kvm_poll_control;
  bool write_fault_to_shadow_pgtable;
  long unsigned int exit_qualification;
  struct {
    bool pv_unhalted;
  } pv;
  int pending_ioapic_eoi;
  int pending_external_vector;
  bool preempted_in_kernel;
  bool l1tf_flush_l1d;
  unsigned int last_vmentry_cpu;
  u64 msr_hwcr;
  struct {
    u32 features;
    bool enforce;
  } pv_cpuid;
  bool guest_state_protected;
};

struct kvm_dirty_ring {
  u32 dirty_index;
  u32 reset_index;
  u32 size;
  u32 soft_limit;
  struct kvm_dirty_gfn* dirty_gfns;
  int index;
};

struct kvm_vcpu {
  struct kvm* kvm;
  struct preempt_notifier preempt_notifier;
  int cpu;
  int vcpu_id;
  int vcpu_idx;
  int srcu_idx;
  int mode;
  u64 requests;
  long unsigned int guest_debug;
  int pre_pcpu;
  struct list_head blocked_vcpu_list;
  struct mutex mutex;
  struct kvm_run* run;
  struct rcuwait wait;
  struct pid* pid;
  int sigset_active;
  sigset_t sigset;
  struct kvm_vcpu_stat stat;
  unsigned int halt_poll_ns;
  bool valid_wakeup;
  int mmio_needed;
  int mmio_read_completed;
  int mmio_is_write;
  int mmio_cur_fragment;
  int mmio_nr_fragments;
  struct kvm_mmio_fragment mmio_fragments[2];
  struct {
    u32 queued;
    struct list_head queue;
    struct list_head done;
    spinlock_t lock;
  } async_pf;
  struct {
    bool in_spin_loop;
    bool dy_eligible;
  } spin_loop;
  bool preempted;
  bool ready;
  struct kvm_vcpu_arch arch;
  struct kvm_dirty_ring dirty_ring;
};

struct kvm_vm_stat {
  ulong mmu_shadow_zapped;
  ulong mmu_pte_write;
  ulong mmu_pde_zapped;
  ulong mmu_flooded;
  ulong mmu_recycled;
  ulong mmu_cache_miss;
  ulong mmu_unsync;
  ulong remote_tlb_flush;
  ulong lpages;
  ulong nx_lpage_splits;
  ulong max_mmu_page_hash_collisions;
};

struct iommu_domain___2;

struct kvm_pic;

struct kvm_ioapic;

struct kvm_pit;

enum hv_tsc_page_status {
  HV_TSC_PAGE_UNSET = 0,
  HV_TSC_PAGE_GUEST_CHANGED = 1,
  HV_TSC_PAGE_HOST_CHANGED = 2,
  HV_TSC_PAGE_SET = 3,
  HV_TSC_PAGE_UPDATING = 4,
  HV_TSC_PAGE_BROKEN = 5,
};

struct kvm_hv_syndbg {
  struct {
    u64 control;
    u64 status;
    u64 send_page;
    u64 recv_page;
    u64 pending_page;
  } control;
  u64 options;
};

struct kvm_hv {
  struct mutex hv_lock;
  u64 hv_guest_os_id;
  u64 hv_hypercall;
  u64 hv_tsc_page;
  enum hv_tsc_page_status hv_tsc_page_status;
  u64 hv_crash_param[5];
  u64 hv_crash_ctl;
  struct ms_hyperv_tsc_page tsc_ref;
  struct idr conn_to_evt;
  u64 hv_reenlightenment_control;
  u64 hv_tsc_emulation_control;
  u64 hv_tsc_emulation_status;
  atomic_t num_mismatched_vp_indexes;
  struct hv_partition_assist_pg* hv_pa_pg;
  struct kvm_hv_syndbg hv_syndbg;
};

struct kvm_xen {
  bool long_mode;
  bool shinfo_set;
  u8 upcall_vector;
  struct gfn_to_hva_cache shinfo_cache;
};

enum kvm_irqchip_mode {
  KVM_IRQCHIP_NONE = 0,
  KVM_IRQCHIP_KERNEL = 1,
  KVM_IRQCHIP_SPLIT = 2,
};

struct kvm_apic_map;

struct kvm_x86_msr_filter;

struct kvm_arch {
  long unsigned int n_used_mmu_pages;
  long unsigned int n_requested_mmu_pages;
  long unsigned int n_max_mmu_pages;
  unsigned int indirect_shadow_pages;
  u8 mmu_valid_gen;
  struct hlist_head mmu_page_hash[4096];
  struct list_head active_mmu_pages;
  struct list_head zapped_obsolete_pages;
  struct list_head lpage_disallowed_mmu_pages;
  struct kvm_page_track_notifier_node mmu_sp_tracker;
  struct kvm_page_track_notifier_head track_notifier_head;
  struct list_head assigned_dev_head;
  struct iommu_domain___2* iommu_domain;
  bool iommu_noncoherent;
  atomic_t noncoherent_dma_count;
  atomic_t assigned_device_count;
  struct kvm_pic* vpic;
  struct kvm_ioapic* vioapic;
  struct kvm_pit* vpit;
  atomic_t vapics_in_nmi_mode;
  struct mutex apic_map_lock;
  struct kvm_apic_map* apic_map;
  atomic_t apic_map_dirty;
  bool apic_access_page_done;
  long unsigned int apicv_inhibit_reasons;
  gpa_t wall_clock;
  bool mwait_in_guest;
  bool hlt_in_guest;
  bool pause_in_guest;
  bool cstate_in_guest;
  long unsigned int irq_sources_bitmap;
  s64 kvmclock_offset;
  raw_spinlock_t tsc_write_lock;
  u64 last_tsc_nsec;
  u64 last_tsc_write;
  u32 last_tsc_khz;
  u64 cur_tsc_nsec;
  u64 cur_tsc_write;
  u64 cur_tsc_offset;
  u64 cur_tsc_generation;
  int nr_vcpus_matched_tsc;
  spinlock_t pvclock_gtod_sync_lock;
  bool use_master_clock;
  u64 master_kernel_ns;
  u64 master_cycle_now;
  struct delayed_work kvmclock_update_work;
  struct delayed_work kvmclock_sync_work;
  struct kvm_xen_hvm_config xen_hvm_config;
  struct hlist_head mask_notifier_list;
  struct kvm_hv hyperv;
  struct kvm_xen xen;
  bool backwards_tsc_observed;
  bool boot_vcpu_runs_old_kvmclock;
  u32 bsp_vcpu_id;
  u64 disabled_quirks;
  int cpu_dirty_logging_count;
  enum kvm_irqchip_mode irqchip_mode;
  u8 nr_reserved_ioapic_pins;
  bool disabled_lapic_found;
  bool x2apic_format;
  bool x2apic_broadcast_quirk_disabled;
  bool guest_can_read_msr_platform_info;
  bool exception_payload_enabled;
  bool bus_lock_detection_enabled;
  u32 user_space_msr_mask;
  struct kvm_x86_msr_filter* msr_filter;
  struct kvm_pmu_event_filter* pmu_event_filter;
  struct task_struct* nx_lpage_recovery_thread;
  bool tdp_mmu_enabled;
  struct list_head tdp_mmu_roots;
  struct list_head tdp_mmu_pages;
  spinlock_t tdp_mmu_pages_lock;
};

struct kvm_memslots;

struct kvm_io_bus;

struct kvm_irq_routing_table;

struct kvm_stat_data;

struct kvm {
  rwlock_t mmu_lock;
  struct mutex slots_lock;
  struct mm_struct* mm;
  struct kvm_memslots* memslots[2];
  struct kvm_vcpu* vcpus[288];
  atomic_t online_vcpus;
  int created_vcpus;
  int last_boosted_vcpu;
  struct list_head vm_list;
  struct mutex lock;
  struct kvm_io_bus* buses[4];
  struct {
    spinlock_t lock;
    struct list_head items;
    struct list_head resampler_list;
    struct mutex resampler_lock;
  } irqfds;
  struct list_head ioeventfds;
  struct kvm_vm_stat stat;
  struct kvm_arch arch;
  refcount_t users_count;
  struct kvm_coalesced_mmio_ring* coalesced_mmio_ring;
  spinlock_t ring_lock;
  struct list_head coalesced_zones;
  struct mutex irq_lock;
  struct kvm_irq_routing_table* irq_routing;
  struct hlist_head irq_ack_notifier_list;
  struct mmu_notifier mmu_notifier;
  long unsigned int mmu_notifier_seq;
  long int mmu_notifier_count;
  long unsigned int mmu_notifier_range_start;
  long unsigned int mmu_notifier_range_end;
  long int tlbs_dirty;
  struct list_head devices;
  u64 manual_dirty_log_protect;
  struct dentry* debugfs_dentry;
  struct kvm_stat_data** debugfs_stat_data;
  struct srcu_struct srcu;
  struct srcu_struct irq_srcu;
  pid_t userspace_pid;
  unsigned int max_halt_poll_ns;
  u32 dirty_ring_size;
};

enum kvm_reg {
  VCPU_REGS_RAX = 0,
  VCPU_REGS_RCX = 1,
  VCPU_REGS_RDX = 2,
  VCPU_REGS_RBX = 3,
  VCPU_REGS_RSP = 4,
  VCPU_REGS_RBP = 5,
  VCPU_REGS_RSI = 6,
  VCPU_REGS_RDI = 7,
  VCPU_REGS_R8 = 8,
  VCPU_REGS_R9 = 9,
  VCPU_REGS_R10 = 10,
  VCPU_REGS_R11 = 11,
  VCPU_REGS_R12 = 12,
  VCPU_REGS_R13 = 13,
  VCPU_REGS_R14 = 14,
  VCPU_REGS_R15 = 15,
  VCPU_REGS_RIP = 16,
  NR_VCPU_REGS = 17,
  VCPU_EXREG_PDPTR = 17,
  VCPU_EXREG_CR0 = 18,
  VCPU_EXREG_CR3 = 19,
  VCPU_EXREG_CR4 = 20,
  VCPU_EXREG_RFLAGS = 21,
  VCPU_EXREG_SEGMENTS = 22,
  VCPU_EXREG_EXIT_INFO_1 = 23,
  VCPU_EXREG_EXIT_INFO_2 = 24,
};

enum exit_fastpath_completion {
  EXIT_FASTPATH_NONE = 0,
  EXIT_FASTPATH_REENTER_GUEST = 1,
  EXIT_FASTPATH_EXIT_HANDLED = 2,
};

struct kvm_rmap_head {
  long unsigned int val;
};

struct kvm_tlb_range {
  u64 start_gfn;
  u64 pages;
};

struct kvm_vcpu_hv_stimer {
  struct hrtimer timer;
  int index;
  union hv_stimer_config config;
  u64 count;
  u64 exp_time;
  struct hv_message msg;
  bool msg_pending;
};

struct kvm_vcpu_hv_synic {
  u64 version;
  u64 control;
  u64 msg_page;
  u64 evt_page;
  atomic64_t sint[16];
  atomic_t sint_to_gsi[16];
  long unsigned int auto_eoi_bitmap[4];
  long unsigned int vec_bitmap[4];
  bool active;
  bool dont_zero_synic_pages;
};

struct kvm_vcpu_hv {
  struct kvm_vcpu* vcpu;
  u32 vp_index;
  u64 hv_vapic;
  s64 runtime_offset;
  struct kvm_vcpu_hv_synic synic;
  struct kvm_hyperv_exit exit;
  struct kvm_vcpu_hv_stimer stimer[4];
  long unsigned int stimer_pending_bitmap[1];
  cpumask_t tlb_flush;
};

struct kvm_lpage_info {
  int disallow_lpage;
};

struct kvm_apic_map {
  struct callback_head rcu;
  u8 mode;
  u32 max_apic_id;
  union {
    struct kvm_lapic* xapic_flat_map[8];
    struct kvm_lapic* xapic_cluster_map[64];
  };
  struct kvm_lapic* phys_map[0];
};

struct msr_bitmap_range {
  u32 flags;
  u32 nmsrs;
  u32 base;
  long unsigned int* bitmap;
};

struct kvm_x86_msr_filter {
  u8 count;
  bool default_allow : 1;
  struct msr_bitmap_range ranges[16];
};

struct msr_data {
  bool host_initiated;
  u32 index;
  u64 data;
};

struct x86_instruction_info;

enum x86_intercept_stage;

struct kvm_pmu_ops;

struct kvm_x86_nested_ops;

struct kvm_x86_ops {
  int (*hardware_enable)();
  void (*hardware_disable)();
  void (*hardware_unsetup)();
  bool (*cpu_has_accelerated_tpr)();
  bool (*has_emulated_msr)(struct kvm*, u32);
  void (*vcpu_after_set_cpuid)(struct kvm_vcpu*);
  unsigned int vm_size;
  int (*vm_init)(struct kvm*);
  void (*vm_destroy)(struct kvm*);
  int (*vcpu_create)(struct kvm_vcpu*);
  void (*vcpu_free)(struct kvm_vcpu*);
  void (*vcpu_reset)(struct kvm_vcpu*, bool);
  void (*prepare_guest_switch)(struct kvm_vcpu*);
  void (*vcpu_load)(struct kvm_vcpu*, int);
  void (*vcpu_put)(struct kvm_vcpu*);
  void (*update_exception_bitmap)(struct kvm_vcpu*);
  int (*get_msr)(struct kvm_vcpu*, struct msr_data*);
  int (*set_msr)(struct kvm_vcpu*, struct msr_data*);
  u64 (*get_segment_base)(struct kvm_vcpu*, int);
  void (*get_segment)(struct kvm_vcpu*, struct kvm_segment*, int);
  int (*get_cpl)(struct kvm_vcpu*);
  void (*set_segment)(struct kvm_vcpu*, struct kvm_segment*, int);
  void (*get_cs_db_l_bits)(struct kvm_vcpu*, int*, int*);
  void (*set_cr0)(struct kvm_vcpu*, long unsigned int);
  bool (*is_valid_cr4)(struct kvm_vcpu*, long unsigned int);
  void (*set_cr4)(struct kvm_vcpu*, long unsigned int);
  int (*set_efer)(struct kvm_vcpu*, u64);
  void (*get_idt)(struct kvm_vcpu*, struct desc_ptr*);
  void (*set_idt)(struct kvm_vcpu*, struct desc_ptr*);
  void (*get_gdt)(struct kvm_vcpu*, struct desc_ptr*);
  void (*set_gdt)(struct kvm_vcpu*, struct desc_ptr*);
  void (*sync_dirty_debug_regs)(struct kvm_vcpu*);
  void (*set_dr7)(struct kvm_vcpu*, long unsigned int);
  void (*cache_reg)(struct kvm_vcpu*, enum kvm_reg);
  long unsigned int (*get_rflags)(struct kvm_vcpu*);
  void (*set_rflags)(struct kvm_vcpu*, long unsigned int);
  void (*tlb_flush_all)(struct kvm_vcpu*);
  void (*tlb_flush_current)(struct kvm_vcpu*);
  int (*tlb_remote_flush)(struct kvm*);
  int (*tlb_remote_flush_with_range)(struct kvm*, struct kvm_tlb_range*);
  void (*tlb_flush_gva)(struct kvm_vcpu*, gva_t);
  void (*tlb_flush_guest)(struct kvm_vcpu*);
  enum exit_fastpath_completion (*run)(struct kvm_vcpu*);
  int (*handle_exit)(struct kvm_vcpu*, enum exit_fastpath_completion);
  int (*skip_emulated_instruction)(struct kvm_vcpu*);
  void (*update_emulated_instruction)(struct kvm_vcpu*);
  void (*set_interrupt_shadow)(struct kvm_vcpu*, int);
  u32 (*get_interrupt_shadow)(struct kvm_vcpu*);
  void (*patch_hypercall)(struct kvm_vcpu*, unsigned char*);
  void (*set_irq)(struct kvm_vcpu*);
  void (*set_nmi)(struct kvm_vcpu*);
  void (*queue_exception)(struct kvm_vcpu*);
  void (*cancel_injection)(struct kvm_vcpu*);
  int (*interrupt_allowed)(struct kvm_vcpu*, bool);
  int (*nmi_allowed)(struct kvm_vcpu*, bool);
  bool (*get_nmi_mask)(struct kvm_vcpu*);
  void (*set_nmi_mask)(struct kvm_vcpu*, bool);
  void (*enable_nmi_window)(struct kvm_vcpu*);
  void (*enable_irq_window)(struct kvm_vcpu*);
  void (*update_cr8_intercept)(struct kvm_vcpu*, int, int);
  bool (*check_apicv_inhibit_reasons)(ulong);
  void (*pre_update_apicv_exec_ctrl)(struct kvm*, bool);
  void (*refresh_apicv_exec_ctrl)(struct kvm_vcpu*);
  void (*hwapic_irr_update)(struct kvm_vcpu*, int);
  void (*hwapic_isr_update)(struct kvm_vcpu*, int);
  bool (*guest_apic_has_interrupt)(struct kvm_vcpu*);
  void (*load_eoi_exitmap)(struct kvm_vcpu*, u64*);
  void (*set_virtual_apic_mode)(struct kvm_vcpu*);
  void (*set_apic_access_page_addr)(struct kvm_vcpu*);
  int (*deliver_posted_interrupt)(struct kvm_vcpu*, int);
  int (*sync_pir_to_irr)(struct kvm_vcpu*);
  int (*set_tss_addr)(struct kvm*, unsigned int);
  int (*set_identity_map_addr)(struct kvm*, u64);
  u64 (*get_mt_mask)(struct kvm_vcpu*, gfn_t, bool);
  void (*load_mmu_pgd)(struct kvm_vcpu*, long unsigned int, int);
  bool (*has_wbinvd_exit)();
  u64 (*write_l1_tsc_offset)(struct kvm_vcpu*, u64);
  void (*get_exit_info)(struct kvm_vcpu*, u64*, u64*, u32*, u32*);
  int (*check_intercept)(
      struct kvm_vcpu*,
      struct x86_instruction_info*,
      enum x86_intercept_stage,
      struct x86_exception*);
  void (*handle_exit_irqoff)(struct kvm_vcpu*);
  void (*request_immediate_exit)(struct kvm_vcpu*);
  void (*sched_in)(struct kvm_vcpu*, int);
  int cpu_dirty_log_size;
  void (*update_cpu_dirty_logging)(struct kvm_vcpu*);
  const struct kvm_pmu_ops* pmu_ops;
  const struct kvm_x86_nested_ops* nested_ops;
  int (*pre_block)(struct kvm_vcpu*);
  void (*post_block)(struct kvm_vcpu*);
  void (*vcpu_blocking)(struct kvm_vcpu*);
  void (*vcpu_unblocking)(struct kvm_vcpu*);
  int (*update_pi_irte)(struct kvm*, unsigned int, uint32_t, bool);
  void (*apicv_post_state_restore)(struct kvm_vcpu*);
  bool (*dy_apicv_has_pending_interrupt)(struct kvm_vcpu*);
  int (*set_hv_timer)(struct kvm_vcpu*, u64, bool*);
  void (*cancel_hv_timer)(struct kvm_vcpu*);
  void (*setup_mce)(struct kvm_vcpu*);
  int (*smi_allowed)(struct kvm_vcpu*, bool);
  int (*pre_enter_smm)(struct kvm_vcpu*, char*);
  int (*pre_leave_smm)(struct kvm_vcpu*, const char*);
  void (*enable_smi_window)(struct kvm_vcpu*);
  int (*mem_enc_op)(struct kvm*, void*);
  int (*mem_enc_reg_region)(struct kvm*, struct kvm_enc_region*);
  int (*mem_enc_unreg_region)(struct kvm*, struct kvm_enc_region*);
  int (*get_msr_feature)(struct kvm_msr_entry*);
  bool (*can_emulate_instruction)(struct kvm_vcpu*, void*, int);
  bool (*apic_init_signal_blocked)(struct kvm_vcpu*);
  int (*enable_direct_tlbflush)(struct kvm_vcpu*);
  void (*migrate_timers)(struct kvm_vcpu*);
  void (*msr_filter_changed)(struct kvm_vcpu*);
  int (*complete_emulated_msr)(struct kvm_vcpu*, int);
  void (*vcpu_deliver_sipi_vector)(struct kvm_vcpu*, u8);
};

struct kvm_x86_nested_ops {
  int (*check_events)(struct kvm_vcpu*);
  bool (*hv_timer_pending)(struct kvm_vcpu*);
  int (*get_state)(struct kvm_vcpu*, struct kvm_nested_state*, unsigned int);
  int (*set_state)(
      struct kvm_vcpu*,
      struct kvm_nested_state*,
      struct kvm_nested_state*);
  bool (*get_nested_state_pages)(struct kvm_vcpu*);
  int (*write_log_dirty)(struct kvm_vcpu*, gpa_t);
  int (*enable_evmcs)(struct kvm_vcpu*, uint16_t*);
  uint16_t (*get_evmcs_version)(struct kvm_vcpu*);
};

struct kvm_io_device;

struct kvm_io_range {
  gpa_t addr;
  int len;
  struct kvm_io_device* dev;
};

struct kvm_io_bus {
  int dev_count;
  int ioeventfd_count;
  struct kvm_io_range range[0];
};

enum kvm_bus {
  KVM_MMIO_BUS = 0,
  KVM_PIO_BUS = 1,
  KVM_VIRTIO_CCW_NOTIFY_BUS = 2,
  KVM_FAST_MMIO_BUS = 3,
  KVM_NR_BUSES = 4,
};

struct kvm_irq_routing_table {
  int chip[72];
  u32 nr_rt_entries;
  struct hlist_head map[0];
};

struct kvm_memslots {
  u64 generation;
  short int id_to_index[32767];
  atomic_t lru_slot;
  int used_slots;
  struct kvm_memory_slot memslots[0];
};

struct kvm_stats_debugfs_item;

struct kvm_stat_data {
  struct kvm* kvm;
  struct kvm_stats_debugfs_item* dbgfs_item;
};

enum kvm_stat_kind {
  KVM_STAT_VM = 0,
  KVM_STAT_VCPU = 1,
};

struct kvm_stats_debugfs_item {
  const char* name;
  int offset;
  enum kvm_stat_kind kind;
  int mode;
};

struct kvm_device_ops;

struct kvm_device {
  const struct kvm_device_ops* ops;
  struct kvm* kvm;
  void* private;
  struct list_head vm_node;
};

struct kvm_device_ops {
  const char* name;
  int (*create)(struct kvm_device*, u32);
  void (*init)(struct kvm_device*);
  void (*destroy)(struct kvm_device*);
  void (*release)(struct kvm_device*);
  int (*set_attr)(struct kvm_device*, struct kvm_device_attr*);
  int (*get_attr)(struct kvm_device*, struct kvm_device_attr*);
  int (*has_attr)(struct kvm_device*, struct kvm_device_attr*);
  long int (*ioctl)(struct kvm_device*, unsigned int, long unsigned int);
  int (*mmap)(struct kvm_device*, struct vm_area_struct*);
};

struct stacktrace_cookie {
  long unsigned int* store;
  unsigned int size;
  unsigned int skip;
  unsigned int len;
};

typedef __kernel_long_t __kernel_suseconds_t;

typedef __kernel_long_t __kernel_old_time_t;

typedef __kernel_suseconds_t suseconds_t;

typedef __u64 timeu64_t;

struct __kernel_itimerspec {
  struct __kernel_timespec it_interval;
  struct __kernel_timespec it_value;
};

struct itimerspec64 {
  struct timespec64 it_interval;
  struct timespec64 it_value;
};

struct old_itimerspec32 {
  struct old_timespec32 it_interval;
  struct old_timespec32 it_value;
};

struct old_timex32 {
  u32 modes;
  s32 offset;
  s32 freq;
  s32 maxerror;
  s32 esterror;
  s32 status;
  s32 constant;
  s32 precision;
  s32 tolerance;
  struct old_timeval32 time;
  s32 tick;
  s32 ppsfreq;
  s32 jitter;
  s32 shift;
  s32 stabil;
  s32 jitcnt;
  s32 calcnt;
  s32 errcnt;
  s32 stbcnt;
  s32 tai;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct __kernel_timex_timeval {
  __kernel_time64_t tv_sec;
  long long int tv_usec;
};

struct __kernel_timex {
  unsigned int modes;
  long long int offset;
  long long int freq;
  long long int maxerror;
  long long int esterror;
  int status;
  long long int constant;
  long long int precision;
  long long int tolerance;
  struct __kernel_timex_timeval time;
  long long int tick;
  long long int ppsfreq;
  long long int jitter;
  int shift;
  long long int stabil;
  long long int jitcnt;
  long long int calcnt;
  long long int errcnt;
  long long int stbcnt;
  int tai;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct trace_event_raw_timer_class {
  struct trace_entry ent;
  void* timer;
  char __data[0];
};

struct trace_event_raw_timer_start {
  struct trace_entry ent;
  void* timer;
  void* function;
  long unsigned int expires;
  long unsigned int now;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_timer_expire_entry {
  struct trace_entry ent;
  void* timer;
  long unsigned int now;
  void* function;
  long unsigned int baseclk;
  char __data[0];
};

struct trace_event_raw_hrtimer_init {
  struct trace_entry ent;
  void* hrtimer;
  clockid_t clockid;
  enum hrtimer_mode mode;
  char __data[0];
};

struct trace_event_raw_hrtimer_start {
  struct trace_entry ent;
  void* hrtimer;
  void* function;
  s64 expires;
  s64 softexpires;
  enum hrtimer_mode mode;
  char __data[0];
};

struct trace_event_raw_hrtimer_expire_entry {
  struct trace_entry ent;
  void* hrtimer;
  s64 now;
  void* function;
  char __data[0];
};

struct trace_event_raw_hrtimer_class {
  struct trace_entry ent;
  void* hrtimer;
  char __data[0];
};

struct trace_event_raw_itimer_state {
  struct trace_entry ent;
  int which;
  long long unsigned int expires;
  long int value_sec;
  long int value_nsec;
  long int interval_sec;
  long int interval_nsec;
  char __data[0];
};

struct trace_event_raw_itimer_expire {
  struct trace_entry ent;
  int which;
  pid_t pid;
  long long unsigned int now;
  char __data[0];
};

struct trace_event_raw_tick_stop {
  struct trace_entry ent;
  int success;
  int dependency;
  char __data[0];
};

struct trace_event_data_offsets_timer_class {};

struct trace_event_data_offsets_timer_start {};

struct trace_event_data_offsets_timer_expire_entry {};

struct trace_event_data_offsets_hrtimer_init {};

struct trace_event_data_offsets_hrtimer_start {};

struct trace_event_data_offsets_hrtimer_expire_entry {};

struct trace_event_data_offsets_hrtimer_class {};

struct trace_event_data_offsets_itimer_state {};

struct trace_event_data_offsets_itimer_expire {};

struct trace_event_data_offsets_tick_stop {};

typedef void (*btf_trace_timer_init)(void*, struct timer_list*);

typedef void (*btf_trace_timer_start)(
    void*,
    struct timer_list*,
    long unsigned int,
    unsigned int);

typedef void (*btf_trace_timer_expire_entry)(
    void*,
    struct timer_list*,
    long unsigned int);

typedef void (*btf_trace_timer_expire_exit)(void*, struct timer_list*);

typedef void (*btf_trace_timer_cancel)(void*, struct timer_list*);

typedef void (*btf_trace_hrtimer_init)(
    void*,
    struct hrtimer*,
    clockid_t,
    enum hrtimer_mode);

typedef void (
    *btf_trace_hrtimer_start)(void*, struct hrtimer*, enum hrtimer_mode);

typedef void (
    *btf_trace_hrtimer_expire_entry)(void*, struct hrtimer*, ktime_t*);

typedef void (*btf_trace_hrtimer_expire_exit)(void*, struct hrtimer*);

typedef void (*btf_trace_hrtimer_cancel)(void*, struct hrtimer*);

typedef void (*btf_trace_itimer_state)(
    void*,
    int,
    const struct itimerspec64* const,
    long long unsigned int);

typedef void (
    *btf_trace_itimer_expire)(void*, int, struct pid*, long long unsigned int);

typedef void (*btf_trace_tick_stop)(void*, int, int);

struct timer_base {
  raw_spinlock_t lock;
  struct timer_list* running_timer;
  long unsigned int clk;
  long unsigned int next_expiry;
  unsigned int cpu;
  bool next_expiry_recalc;
  bool is_idle;
  long unsigned int pending_map[9];
  struct hlist_head vectors[576];
  long : 64;
  long : 64;
};

struct process_timer {
  struct timer_list timer;
  struct task_struct* task;
};

struct ktime_timestamps {
  u64 mono;
  u64 boot;
  u64 real;
};

struct system_time_snapshot {
  u64 cycles;
  ktime_t real;
  ktime_t raw;
  unsigned int clock_was_set_seq;
  u8 cs_was_changed_seq;
};

struct system_device_crosststamp {
  ktime_t device;
  ktime_t sys_realtime;
  ktime_t sys_monoraw;
};

struct tk_read_base {
  struct clocksource* clock;
  u64 mask;
  u64 cycle_last;
  u32 mult;
  u32 shift;
  u64 xtime_nsec;
  ktime_t base;
  u64 base_real;
};

struct timekeeper {
  struct tk_read_base tkr_mono;
  struct tk_read_base tkr_raw;
  u64 xtime_sec;
  long unsigned int ktime_sec;
  struct timespec64 wall_to_monotonic;
  ktime_t offs_real;
  ktime_t offs_boot;
  ktime_t offs_tai;
  s32 tai_offset;
  unsigned int clock_was_set_seq;
  u8 cs_was_changed_seq;
  ktime_t next_leap_ktime;
  u64 raw_sec;
  struct timespec64 monotonic_to_boot;
  u64 cycle_interval;
  u64 xtime_interval;
  s64 xtime_remainder;
  u64 raw_interval;
  u64 ntp_tick;
  s64 ntp_error;
  u32 ntp_error_shift;
  u32 ntp_err_mult;
  u32 skip_second_overflow;
};

struct audit_ntp_val {
  long long int oldval;
  long long int newval;
};

struct audit_ntp_data {
  struct audit_ntp_val vals[6];
};

enum timekeeping_adv_mode {
  TK_ADV_TICK = 0,
  TK_ADV_FREQ = 1,
};

struct tk_fast {
  seqcount_latch_t seq;
  struct tk_read_base base[2];
};

struct rtc_wkalrm {
  unsigned char enabled;
  unsigned char pending;
  struct rtc_time time;
};

struct rtc_class_ops {
  int (*ioctl)(struct device*, unsigned int, long unsigned int);
  int (*read_time)(struct device*, struct rtc_time*);
  int (*set_time)(struct device*, struct rtc_time*);
  int (*read_alarm)(struct device*, struct rtc_wkalrm*);
  int (*set_alarm)(struct device*, struct rtc_wkalrm*);
  int (*proc)(struct device*, struct seq_file*);
  int (*alarm_irq_enable)(struct device*, unsigned int);
  int (*read_offset)(struct device*, long int*);
  int (*set_offset)(struct device*, long int);
};

struct rtc_device;

struct rtc_timer {
  struct timerqueue_node node;
  ktime_t period;
  void (*func)(struct rtc_device*);
  struct rtc_device* rtc;
  int enabled;
};

struct rtc_device {
  struct device dev;
  struct module* owner;
  int id;
  const struct rtc_class_ops* ops;
  struct mutex ops_lock;
  struct cdev char_dev;
  long unsigned int flags;
  long unsigned int irq_data;
  spinlock_t irq_lock;
  wait_queue_head_t irq_queue;
  struct fasync_struct* async_queue;
  int irq_freq;
  int max_user_freq;
  struct timerqueue_head timerqueue;
  struct rtc_timer aie_timer;
  struct rtc_timer uie_rtctimer;
  struct hrtimer pie_timer;
  int pie_enabled;
  struct work_struct irqwork;
  int uie_unsupported;
  long unsigned int set_offset_nsec;
  long unsigned int features[1];
  time64_t range_min;
  timeu64_t range_max;
  time64_t start_secs;
  time64_t offset_secs;
  bool set_start_time;
};

typedef s64 int64_t;

enum tick_nohz_mode {
  NOHZ_MODE_INACTIVE = 0,
  NOHZ_MODE_LOWRES = 1,
  NOHZ_MODE_HIGHRES = 2,
};

struct tick_sched {
  struct hrtimer sched_timer;
  long unsigned int check_clocks;
  enum tick_nohz_mode nohz_mode;
  unsigned int inidle : 1;
  unsigned int tick_stopped : 1;
  unsigned int idle_active : 1;
  unsigned int do_timer_last : 1;
  unsigned int got_idle_tick : 1;
  ktime_t last_tick;
  ktime_t next_tick;
  long unsigned int idle_jiffies;
  long unsigned int idle_calls;
  long unsigned int idle_sleeps;
  ktime_t idle_entrytime;
  ktime_t idle_waketime;
  ktime_t idle_exittime;
  ktime_t idle_sleeptime;
  ktime_t iowait_sleeptime;
  long unsigned int last_jiffies;
  u64 timer_expires;
  u64 timer_expires_base;
  u64 next_timer;
  ktime_t idle_expires;
  atomic_t tick_dep_mask;
};

struct timer_list_iter {
  int cpu;
  bool second_pass;
  u64 now;
};

struct tm {
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  long int tm_year;
  int tm_wday;
  int tm_yday;
};

struct cyclecounter {
  u64 (*read)(const struct cyclecounter*);
  u64 mask;
  u32 mult;
  u32 shift;
};

struct timecounter {
  const struct cyclecounter* cc;
  u64 cycle_last;
  u64 nsec;
  u64 mask;
  u64 frac;
};

typedef __kernel_timer_t timer_t;

enum alarmtimer_type {
  ALARM_REALTIME = 0,
  ALARM_BOOTTIME = 1,
  ALARM_NUMTYPE = 2,
  ALARM_REALTIME_FREEZER = 3,
  ALARM_BOOTTIME_FREEZER = 4,
};

enum alarmtimer_restart {
  ALARMTIMER_NORESTART = 0,
  ALARMTIMER_RESTART = 1,
};

struct alarm {
  struct timerqueue_node node;
  struct hrtimer timer;
  enum alarmtimer_restart (*function)(struct alarm*, ktime_t);
  enum alarmtimer_type type;
  int state;
  void* data;
};

struct cpu_timer {
  struct timerqueue_node node;
  struct timerqueue_head* head;
  struct pid* pid;
  struct list_head elist;
  int firing;
};

struct k_clock;

struct k_itimer {
  struct list_head list;
  struct hlist_node t_hash;
  spinlock_t it_lock;
  const struct k_clock* kclock;
  clockid_t it_clock;
  timer_t it_id;
  int it_active;
  s64 it_overrun;
  s64 it_overrun_last;
  int it_requeue_pending;
  int it_sigev_notify;
  ktime_t it_interval;
  struct signal_struct* it_signal;
  union {
    struct pid* it_pid;
    struct task_struct* it_process;
  };
  struct sigqueue* sigq;
  union {
    struct {
      struct hrtimer timer;
    } real;
    struct cpu_timer cpu;
    struct {
      struct alarm alarmtimer;
    } alarm;
  } it;
  struct callback_head rcu;
};

struct k_clock {
  int (*clock_getres)(const clockid_t, struct timespec64*);
  int (*clock_set)(const clockid_t, const struct timespec64*);
  int (*clock_get_timespec)(const clockid_t, struct timespec64*);
  ktime_t (*clock_get_ktime)(const clockid_t);
  int (*clock_adj)(const clockid_t, struct __kernel_timex*);
  int (*timer_create)(struct k_itimer*);
  int (*nsleep)(const clockid_t, int, const struct timespec64*);
  int (*timer_set)(
      struct k_itimer*,
      int,
      struct itimerspec64*,
      struct itimerspec64*);
  int (*timer_del)(struct k_itimer*);
  void (*timer_get)(struct k_itimer*, struct itimerspec64*);
  void (*timer_rearm)(struct k_itimer*);
  s64 (*timer_forward)(struct k_itimer*, ktime_t);
  ktime_t (*timer_remaining)(struct k_itimer*, ktime_t);
  int (*timer_try_to_cancel)(struct k_itimer*);
  void (*timer_arm)(struct k_itimer*, ktime_t, bool, bool);
  void (*timer_wait_running)(struct k_itimer*);
};

struct class_interface {
  struct list_head node;
  struct class* class;
  int (*add_dev)(struct device*, struct class_interface*);
  void (*remove_dev)(struct device*, struct class_interface*);
};

struct platform_driver {
  int (*probe)(struct platform_device*);
  int (*remove)(struct platform_device*);
  void (*shutdown)(struct platform_device*);
  int (*suspend)(struct platform_device*, pm_message_t);
  int (*resume)(struct platform_device*);
  struct device_driver driver;
  const struct platform_device_id* id_table;
  bool prevent_deferred_probe;
};

struct trace_event_raw_alarmtimer_suspend {
  struct trace_entry ent;
  s64 expires;
  unsigned char alarm_type;
  char __data[0];
};

struct trace_event_raw_alarm_class {
  struct trace_entry ent;
  void* alarm;
  unsigned char alarm_type;
  s64 expires;
  s64 now;
  char __data[0];
};

struct trace_event_data_offsets_alarmtimer_suspend {};

struct trace_event_data_offsets_alarm_class {};

typedef void (*btf_trace_alarmtimer_suspend)(void*, ktime_t, int);

typedef void (*btf_trace_alarmtimer_fired)(void*, struct alarm*, ktime_t);

typedef void (*btf_trace_alarmtimer_start)(void*, struct alarm*, ktime_t);

typedef void (*btf_trace_alarmtimer_cancel)(void*, struct alarm*, ktime_t);

struct alarm_base {
  spinlock_t lock;
  struct timerqueue_head timerqueue;
  ktime_t (*get_ktime)();
  void (*get_timespec)(struct timespec64*);
  clockid_t base_clockid;
};

struct sigevent {
  sigval_t sigev_value;
  int sigev_signo;
  int sigev_notify;
  union {
    int _pad[12];
    int _tid;
    struct {
      void (*_function)(sigval_t);
      void* _attribute;
    } _sigev_thread;
  } _sigev_un;
};

typedef struct sigevent sigevent_t;

struct compat_sigevent {
  compat_sigval_t sigev_value;
  compat_int_t sigev_signo;
  compat_int_t sigev_notify;
  union {
    compat_int_t _pad[13];
    compat_int_t _tid;
    struct {
      compat_uptr_t _function;
      compat_uptr_t _attribute;
    } _sigev_thread;
  } _sigev_un;
};

typedef unsigned int uint;

struct posix_clock;

struct posix_clock_operations {
  struct module* owner;
  int (*clock_adjtime)(struct posix_clock*, struct __kernel_timex*);
  int (*clock_gettime)(struct posix_clock*, struct timespec64*);
  int (*clock_getres)(struct posix_clock*, struct timespec64*);
  int (*clock_settime)(struct posix_clock*, const struct timespec64*);
  long int (*ioctl)(struct posix_clock*, unsigned int, long unsigned int);
  int (*open)(struct posix_clock*, fmode_t);
  __poll_t (*poll)(struct posix_clock*, struct file*, poll_table*);
  int (*release)(struct posix_clock*);
  ssize_t (*read)(struct posix_clock*, uint, char*, size_t);
};

struct posix_clock {
  struct posix_clock_operations ops;
  struct cdev cdev;
  struct device* dev;
  struct rw_semaphore rwsem;
  bool zombie;
};

struct posix_clock_desc {
  struct file* fp;
  struct posix_clock* clk;
};

struct __kernel_old_itimerval {
  struct __kernel_old_timeval it_interval;
  struct __kernel_old_timeval it_value;
};

struct old_itimerval32 {
  struct old_timeval32 it_interval;
  struct old_timeval32 it_value;
};

struct ce_unbind {
  struct clock_event_device* ce;
  int res;
};

struct proc_timens_offset {
  int clockid;
  struct timespec64 val;
};

union futex_key {
  struct {
    u64 i_seq;
    long unsigned int pgoff;
    unsigned int offset;
  } shared;
  struct {
    union {
      struct mm_struct* mm;
      u64 __tmp;
    };
    long unsigned int address;
    unsigned int offset;
  } private;
  struct {
    u64 ptr;
    long unsigned int word;
    unsigned int offset;
  } both;
};

struct futex_pi_state {
  struct list_head list;
  struct rt_mutex pi_mutex;
  struct task_struct* owner;
  refcount_t refcount;
  union futex_key key;
};

struct futex_q {
  struct plist_node list;
  struct task_struct* task;
  spinlock_t* lock_ptr;
  union futex_key key;
  struct futex_pi_state* pi_state;
  struct rt_mutex_waiter* rt_waiter;
  union futex_key* requeue_pi_key;
  u32 bitset;
};

struct futex_hash_bucket {
  atomic_t waiters;
  spinlock_t lock;
  struct plist_head chain;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum futex_access {
  FUTEX_READ = 0,
  FUTEX_WRITE = 1,
};

typedef bool (*smp_cond_func_t)(int, void*);

struct call_function_data {
  call_single_data_t* csd;
  cpumask_var_t cpumask;
  cpumask_var_t cpumask_ipi;
};

struct smp_call_on_cpu_struct {
  struct work_struct work;
  struct completion done;
  int (*func)(void*);
  void* data;
  int ret;
  int cpu;
};

struct latch_tree_root {
  seqcount_latch_t seq;
  struct rb_root tree[2];
};

struct latch_tree_ops {
  bool (*less)(struct latch_tree_node*, struct latch_tree_node*);
  int (*comp)(void*, struct latch_tree_node*);
};

struct modversion_info {
  long unsigned int crc;
  char name[56];
};

struct module_use {
  struct list_head source_list;
  struct list_head target_list;
  struct module* source;
  struct module* target;
};

struct module_sect_attr {
  struct bin_attribute battr;
  long unsigned int address;
};

struct module_sect_attrs {
  struct attribute_group grp;
  unsigned int nsections;
  struct module_sect_attr attrs[0];
};

struct module_notes_attrs {
  struct kobject* dir;
  unsigned int notes;
  struct bin_attribute attrs[0];
};

enum kernel_read_file_id {
  READING_UNKNOWN = 0,
  READING_FIRMWARE = 1,
  READING_MODULE = 2,
  READING_KEXEC_IMAGE = 3,
  READING_KEXEC_INITRAMFS = 4,
  READING_POLICY = 5,
  READING_X509_CERTIFICATE = 6,
  READING_MAX_ID = 7,
};

enum kernel_load_data_id {
  LOADING_UNKNOWN = 0,
  LOADING_FIRMWARE = 1,
  LOADING_MODULE = 2,
  LOADING_KEXEC_IMAGE = 3,
  LOADING_KEXEC_INITRAMFS = 4,
  LOADING_POLICY = 5,
  LOADING_X509_CERTIFICATE = 6,
  LOADING_MAX_ID = 7,
};

enum {
  PROC_ENTRY_PERMANENT = 1,
};

struct load_info {
  const char* name;
  struct module* mod;
  Elf64_Ehdr* hdr;
  long unsigned int len;
  Elf64_Shdr* sechdrs;
  char* secstrings;
  char* strtab;
  long unsigned int symoffs;
  long unsigned int stroffs;
  long unsigned int init_typeoffs;
  long unsigned int core_typeoffs;
  struct _ddebug* debug;
  unsigned int num_debug;
  bool sig_ok;
  long unsigned int mod_kallsyms_init_off;
  struct {
    unsigned int sym;
    unsigned int str;
    unsigned int mod;
    unsigned int vers;
    unsigned int info;
    unsigned int pcpu;
  } index;
};

struct trace_event_raw_module_load {
  struct trace_entry ent;
  unsigned int taints;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_module_free {
  struct trace_entry ent;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_module_refcnt {
  struct trace_entry ent;
  long unsigned int ip;
  int refcnt;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_module_request {
  struct trace_entry ent;
  long unsigned int ip;
  bool wait;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_data_offsets_module_load {
  u32 name;
};

struct trace_event_data_offsets_module_free {
  u32 name;
};

struct trace_event_data_offsets_module_refcnt {
  u32 name;
};

struct trace_event_data_offsets_module_request {
  u32 name;
};

typedef void (*btf_trace_module_load)(void*, struct module*);

typedef void (*btf_trace_module_free)(void*, struct module*);

typedef void (*btf_trace_module_get)(void*, struct module*, long unsigned int);

typedef void (*btf_trace_module_put)(void*, struct module*, long unsigned int);

typedef void (*btf_trace_module_request)(void*, char*, bool, long unsigned int);

struct mod_tree_root {
  struct latch_tree_root root;
  long unsigned int addr_min;
  long unsigned int addr_max;
};

enum mod_license {
  NOT_GPL_ONLY = 0,
  GPL_ONLY = 1,
};

struct symsearch {
  const struct kernel_symbol* start;
  const struct kernel_symbol* stop;
  const s32* crcs;
  enum mod_license license;
};

struct find_symbol_arg {
  const char* name;
  bool gplok;
  bool warn;
  struct module* owner;
  const s32* crc;
  const struct kernel_symbol* sym;
  enum mod_license license;
};

struct mod_initfree {
  struct llist_node node;
  void* module_init;
};

struct kallsym_iter {
  loff_t pos;
  loff_t pos_arch_end;
  loff_t pos_mod_end;
  loff_t pos_ftrace_mod_end;
  loff_t pos_bpf_end;
  long unsigned int value;
  unsigned int nameoff;
  char type;
  char name[128];
  char module_name[56];
  int exported;
  int show_value;
};

struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
};

struct elf_note_section {
  struct elf64_note n_hdr;
  u8 n_data[0];
};

typedef long unsigned int elf_greg_t;

typedef elf_greg_t elf_gregset_t[27];

struct elf_siginfo {
  int si_signo;
  int si_code;
  int si_errno;
};

struct elf_prstatus_common {
  struct elf_siginfo pr_info;
  short int pr_cursig;
  long unsigned int pr_sigpend;
  long unsigned int pr_sighold;
  pid_t pr_pid;
  pid_t pr_ppid;
  pid_t pr_pgrp;
  pid_t pr_sid;
  struct __kernel_old_timeval pr_utime;
  struct __kernel_old_timeval pr_stime;
  struct __kernel_old_timeval pr_cutime;
  struct __kernel_old_timeval pr_cstime;
};

struct elf_prstatus {
  struct elf_prstatus_common common;
  elf_gregset_t pr_reg;
  int pr_fpvalid;
};

struct kexec_sha_region {
  long unsigned int start;
  long unsigned int len;
};

struct compat_kexec_segment {
  compat_uptr_t buf;
  compat_size_t bufsz;
  compat_ulong_t mem;
  compat_size_t memsz;
};

struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
};

typedef struct elf64_phdr Elf64_Phdr;

enum migrate_reason {
  MR_COMPACTION = 0,
  MR_MEMORY_FAILURE = 1,
  MR_MEMORY_HOTPLUG = 2,
  MR_SYSCALL = 3,
  MR_MEMPOLICY_MBIND = 4,
  MR_NUMA_MISPLACED = 5,
  MR_CONTIG_RANGE = 6,
  MR_TYPES = 7,
};

typedef __kernel_ulong_t ino_t;

enum kernfs_node_type {
  KERNFS_DIR = 1,
  KERNFS_FILE = 2,
  KERNFS_LINK = 4,
};

enum kernfs_root_flag {
  KERNFS_ROOT_CREATE_DEACTIVATED = 1,
  KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 2,
  KERNFS_ROOT_SUPPORT_EXPORTOP = 4,
  KERNFS_ROOT_SUPPORT_USER_XATTR = 8,
};

struct kernfs_fs_context {
  struct kernfs_root* root;
  void* ns_tag;
  long unsigned int magic;
  bool new_sb_created;
};

enum bpf_link_type {
  BPF_LINK_TYPE_UNSPEC = 0,
  BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
  BPF_LINK_TYPE_TRACING = 2,
  BPF_LINK_TYPE_CGROUP = 3,
  BPF_LINK_TYPE_ITER = 4,
  BPF_LINK_TYPE_NETNS = 5,
  BPF_LINK_TYPE_XDP = 6,
  BPF_LINK_TYPE_PERF_EVENT = 7,
  MAX_BPF_LINK_TYPE = 8,
};

struct bpf_link_info {
  __u32 type;
  __u32 id;
  __u32 prog_id;
  union {
    struct {
      __u64 tp_name;
      __u32 tp_name_len;
    } raw_tracepoint;
    struct {
      __u32 attach_type;
      __u32 target_obj_id;
      __u32 target_btf_id;
    } tracing;
    struct {
      __u64 cgroup_id;
      __u32 attach_type;
    } cgroup;
    struct {
      __u64 target_name;
      __u32 target_name_len;
      union {
        struct {
          __u32 map_id;
        } map;
      };
    } iter;
    struct {
      __u32 netns_ino;
      __u32 attach_type;
    } netns;
    struct {
      __u32 ifindex;
    } xdp;
  };
};

struct bpf_link_ops;

struct bpf_link {
  atomic64_t refcnt;
  u32 id;
  enum bpf_link_type type;
  const struct bpf_link_ops* ops;
  struct bpf_prog* prog;
  struct work_struct work;
};

struct bpf_link_ops {
  void (*release)(struct bpf_link*);
  void (*dealloc)(struct bpf_link*);
  int (*detach)(struct bpf_link*);
  int (*update_prog)(struct bpf_link*, struct bpf_prog*, struct bpf_prog*);
  void (*show_fdinfo)(const struct bpf_link*, struct seq_file*);
  int (*fill_link_info)(const struct bpf_link*, struct bpf_link_info*);
};

struct bpf_cgroup_link {
  struct bpf_link link;
  struct cgroup* cgroup;
  enum bpf_attach_type type;
};

enum {
  CGRP_NOTIFY_ON_RELEASE = 0,
  CGRP_CPUSET_CLONE_CHILDREN = 1,
  CGRP_FREEZE = 2,
  CGRP_FROZEN = 3,
};

enum {
  CGRP_ROOT_NOPREFIX = 2,
  CGRP_ROOT_XATTR = 4,
  CGRP_ROOT_NS_DELEGATE = 8,
  CGRP_ROOT_CPUSET_V2_MODE = 16,
  CGRP_ROOT_MEMORY_LOCAL_EVENTS = 32,
  CGRP_ROOT_MEMORY_RECURSIVE_PROT = 64,
};

struct cgroup_taskset {
  struct list_head src_csets;
  struct list_head dst_csets;
  int nr_tasks;
  int ssid;
  struct list_head* csets;
  struct css_set* cur_cset;
  struct task_struct* cur_task;
};

struct css_task_iter {
  struct cgroup_subsys* ss;
  unsigned int flags;
  struct list_head* cset_pos;
  struct list_head* cset_head;
  struct list_head* tcset_pos;
  struct list_head* tcset_head;
  struct list_head* task_pos;
  struct list_head* cur_tasks_head;
  struct css_set* cur_cset;
  struct css_set* cur_dcset;
  struct task_struct* cur_task;
  struct list_head iters_node;
};

struct cgroup_fs_context {
  struct kernfs_fs_context kfc;
  struct cgroup_root* root;
  struct cgroup_namespace* ns;
  unsigned int flags;
  bool cpuset_clone_children;
  bool none;
  bool all_ss;
  u16 subsys_mask;
  char* name;
  char* release_agent;
};

struct cgrp_cset_link {
  struct cgroup* cgrp;
  struct css_set* cset;
  struct list_head cset_link;
  struct list_head cgrp_link;
};

struct cgroup_mgctx {
  struct list_head preloaded_src_csets;
  struct list_head preloaded_dst_csets;
  struct cgroup_taskset tset;
  u16 ss_mask;
};

struct trace_event_raw_cgroup_root {
  struct trace_entry ent;
  int root;
  u16 ss_mask;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_cgroup {
  struct trace_entry ent;
  int root;
  int id;
  int level;
  u32 __data_loc_path;
  char __data[0];
};

struct trace_event_raw_cgroup_migrate {
  struct trace_entry ent;
  int dst_root;
  int dst_id;
  int dst_level;
  int pid;
  u32 __data_loc_dst_path;
  u32 __data_loc_comm;
  char __data[0];
};

struct trace_event_raw_cgroup_event {
  struct trace_entry ent;
  int root;
  int id;
  int level;
  u32 __data_loc_path;
  int val;
  char __data[0];
};

struct trace_event_data_offsets_cgroup_root {
  u32 name;
};

struct trace_event_data_offsets_cgroup {
  u32 path;
};

struct trace_event_data_offsets_cgroup_migrate {
  u32 dst_path;
  u32 comm;
};

struct trace_event_data_offsets_cgroup_event {
  u32 path;
};

typedef void (*btf_trace_cgroup_setup_root)(void*, struct cgroup_root*);

typedef void (*btf_trace_cgroup_destroy_root)(void*, struct cgroup_root*);

typedef void (*btf_trace_cgroup_remount)(void*, struct cgroup_root*);

typedef void (*btf_trace_cgroup_mkdir)(void*, struct cgroup*, const char*);

typedef void (*btf_trace_cgroup_rmdir)(void*, struct cgroup*, const char*);

typedef void (*btf_trace_cgroup_release)(void*, struct cgroup*, const char*);

typedef void (*btf_trace_cgroup_rename)(void*, struct cgroup*, const char*);

typedef void (*btf_trace_cgroup_freeze)(void*, struct cgroup*, const char*);

typedef void (*btf_trace_cgroup_unfreeze)(void*, struct cgroup*, const char*);

typedef void (*btf_trace_cgroup_attach_task)(
    void*,
    struct cgroup*,
    const char*,
    struct task_struct*,
    bool);

typedef void (*btf_trace_cgroup_transfer_tasks)(
    void*,
    struct cgroup*,
    const char*,
    struct task_struct*,
    bool);

typedef void (*btf_trace_cgroup_notify_populated)(
    void*,
    struct cgroup*,
    const char*,
    int);

typedef void (
    *btf_trace_cgroup_notify_frozen)(void*, struct cgroup*, const char*, int);

enum cgroup2_param {
  Opt_nsdelegate = 0,
  Opt_memory_localevents = 1,
  Opt_memory_recursiveprot = 2,
  nr__cgroup2_params = 3,
};

struct cgroupstats {
  __u64 nr_sleeping;
  __u64 nr_running;
  __u64 nr_stopped;
  __u64 nr_uninterruptible;
  __u64 nr_io_wait;
};

enum cgroup_filetype {
  CGROUP_FILE_PROCS = 0,
  CGROUP_FILE_TASKS = 1,
};

struct cgroup_pidlist {
  struct {
    enum cgroup_filetype type;
    struct pid_namespace* ns;
  } key;
  pid_t* list;
  int length;
  struct list_head links;
  struct cgroup* owner;
  struct delayed_work destroy_dwork;
};

enum cgroup1_param {
  Opt_all = 0,
  Opt_clone_children = 1,
  Opt_cpuset_v2_mode = 2,
  Opt_name = 3,
  Opt_none = 4,
  Opt_noprefix = 5,
  Opt_release_agent = 6,
  Opt_xattr = 7,
};

enum freezer_state_flags {
  CGROUP_FREEZER_ONLINE = 1,
  CGROUP_FREEZING_SELF = 2,
  CGROUP_FREEZING_PARENT = 4,
  CGROUP_FROZEN = 8,
  CGROUP_FREEZING = 6,
};

struct freezer {
  struct cgroup_subsys_state css;
  unsigned int state;
};

struct pids_cgroup {
  struct cgroup_subsys_state css;
  atomic64_t counter;
  atomic64_t limit;
  struct cgroup_file events_file;
  atomic64_t events_limit;
};

struct fmeter {
  int cnt;
  int val;
  time64_t time;
  spinlock_t lock;
};

struct cpuset {
  struct cgroup_subsys_state css;
  long unsigned int flags;
  cpumask_var_t cpus_allowed;
  nodemask_t mems_allowed;
  cpumask_var_t effective_cpus;
  nodemask_t effective_mems;
  cpumask_var_t subparts_cpus;
  nodemask_t old_mems_allowed;
  struct fmeter fmeter;
  int attach_in_progress;
  int pn;
  int relax_domain_level;
  int nr_subparts_cpus;
  int partition_root_state;
  int use_parent_ecpus;
  int child_ecpus_count;
};

struct tmpmasks {
  cpumask_var_t addmask;
  cpumask_var_t delmask;
  cpumask_var_t new_cpus;
};

typedef enum {
  CS_ONLINE = 0,
  CS_CPU_EXCLUSIVE = 1,
  CS_MEM_EXCLUSIVE = 2,
  CS_MEM_HARDWALL = 3,
  CS_MEMORY_MIGRATE = 4,
  CS_SCHED_LOAD_BALANCE = 5,
  CS_SPREAD_PAGE = 6,
  CS_SPREAD_SLAB = 7,
} cpuset_flagbits_t;

enum subparts_cmd {
  partcmd_enable = 0,
  partcmd_disable = 1,
  partcmd_update = 2,
};

struct cpuset_migrate_mm_work {
  struct work_struct work;
  struct mm_struct* mm;
  nodemask_t from;
  nodemask_t to;
};

typedef enum {
  FILE_MEMORY_MIGRATE = 0,
  FILE_CPULIST = 1,
  FILE_MEMLIST = 2,
  FILE_EFFECTIVE_CPULIST = 3,
  FILE_EFFECTIVE_MEMLIST = 4,
  FILE_SUBPARTS_CPULIST = 5,
  FILE_CPU_EXCLUSIVE = 6,
  FILE_MEM_EXCLUSIVE = 7,
  FILE_MEM_HARDWALL = 8,
  FILE_SCHED_LOAD_BALANCE = 9,
  FILE_PARTITION_ROOT = 10,
  FILE_SCHED_RELAX_DOMAIN_LEVEL = 11,
  FILE_MEMORY_PRESSURE_ENABLED = 12,
  FILE_MEMORY_PRESSURE = 13,
  FILE_SPREAD_PAGE = 14,
  FILE_SPREAD_SLAB = 15,
} cpuset_filetype_t;

struct kernel_pkey_query {
  __u32 supported_ops;
  __u32 key_size;
  __u16 max_data_size;
  __u16 max_sig_size;
  __u16 max_enc_size;
  __u16 max_dec_size;
};

enum kernel_pkey_operation {
  kernel_pkey_encrypt = 0,
  kernel_pkey_decrypt = 1,
  kernel_pkey_sign = 2,
  kernel_pkey_verify = 3,
};

struct kernel_pkey_params {
  struct key* key;
  const char* encoding;
  const char* hash_algo;
  char* info;
  __u32 in_len;
  union {
    __u32 out_len;
    __u32 in2_len;
  };
  enum kernel_pkey_operation op : 8;
};

struct key_preparsed_payload {
  const char* orig_description;
  char* description;
  union key_payload payload;
  const void* data;
  size_t datalen;
  size_t quotalen;
  time64_t expiry;
};

struct key_match_data {
  bool (*cmp)(const struct key*, const struct key_match_data*);
  const void* raw_data;
  void* preparsed;
  unsigned int lookup_type;
};

struct idmap_key {
  bool map_up;
  u32 id;
  u32 count;
};

struct cpu_stop_done {
  atomic_t nr_todo;
  int ret;
  struct completion completion;
};

struct cpu_stopper {
  struct task_struct* thread;
  raw_spinlock_t lock;
  bool enabled;
  struct list_head works;
  struct cpu_stop_work stop_work;
  long unsigned int caller;
  cpu_stop_fn_t fn;
};

enum multi_stop_state {
  MULTI_STOP_NONE = 0,
  MULTI_STOP_PREPARE = 1,
  MULTI_STOP_DISABLE_IRQ = 2,
  MULTI_STOP_RUN = 3,
  MULTI_STOP_EXIT = 4,
};

struct multi_stop_data {
  cpu_stop_fn_t fn;
  void* data;
  unsigned int num_threads;
  const struct cpumask* active_cpus;
  enum multi_stop_state state;
  atomic_t thread_ack;
};

typedef int __kernel_mqd_t;

typedef __kernel_mqd_t mqd_t;

enum audit_state {
  AUDIT_DISABLED = 0,
  AUDIT_BUILD_CONTEXT = 1,
  AUDIT_RECORD_CONTEXT = 2,
};

struct audit_cap_data {
  kernel_cap_t permitted;
  kernel_cap_t inheritable;
  union {
    unsigned int fE;
    kernel_cap_t effective;
  };
  kernel_cap_t ambient;
  kuid_t rootid;
};

struct audit_names {
  struct list_head list;
  struct filename* name;
  int name_len;
  bool hidden;
  long unsigned int ino;
  dev_t dev;
  umode_t mode;
  kuid_t uid;
  kgid_t gid;
  dev_t rdev;
  u32 osid;
  struct audit_cap_data fcap;
  unsigned int fcap_ver;
  unsigned char type;
  bool should_free;
};

struct mq_attr {
  __kernel_long_t mq_flags;
  __kernel_long_t mq_maxmsg;
  __kernel_long_t mq_msgsize;
  __kernel_long_t mq_curmsgs;
  __kernel_long_t __reserved[4];
};

struct audit_proctitle {
  int len;
  char* value;
};

struct audit_aux_data;

struct audit_tree_refs;

struct audit_context {
  int dummy;
  int in_syscall;
  enum audit_state state;
  enum audit_state current_state;
  unsigned int serial;
  int major;
  struct timespec64 ctime;
  long unsigned int argv[4];
  long int return_code;
  u64 prio;
  int return_valid;
  struct audit_names preallocated_names[5];
  int name_count;
  struct list_head names_list;
  char* filterkey;
  struct path pwd;
  struct audit_aux_data* aux;
  struct audit_aux_data* aux_pids;
  struct __kernel_sockaddr_storage* sockaddr;
  size_t sockaddr_len;
  pid_t pid;
  pid_t ppid;
  kuid_t uid;
  kuid_t euid;
  kuid_t suid;
  kuid_t fsuid;
  kgid_t gid;
  kgid_t egid;
  kgid_t sgid;
  kgid_t fsgid;
  long unsigned int personality;
  int arch;
  pid_t target_pid;
  kuid_t target_auid;
  kuid_t target_uid;
  unsigned int target_sessionid;
  u32 target_sid;
  char target_comm[16];
  struct audit_tree_refs* trees;
  struct audit_tree_refs* first_trees;
  struct list_head killed_trees;
  int tree_count;
  int type;
  union {
    struct {
      int nargs;
      long int args[6];
    } socketcall;
    struct {
      kuid_t uid;
      kgid_t gid;
      umode_t mode;
      u32 osid;
      int has_perm;
      uid_t perm_uid;
      gid_t perm_gid;
      umode_t perm_mode;
      long unsigned int qbytes;
    } ipc;
    struct {
      mqd_t mqdes;
      struct mq_attr mqstat;
    } mq_getsetattr;
    struct {
      mqd_t mqdes;
      int sigev_signo;
    } mq_notify;
    struct {
      mqd_t mqdes;
      size_t msg_len;
      unsigned int msg_prio;
      struct timespec64 abs_timeout;
    } mq_sendrecv;
    struct {
      int oflag;
      umode_t mode;
      struct mq_attr attr;
    } mq_open;
    struct {
      pid_t pid;
      struct audit_cap_data cap;
    } capset;
    struct {
      int fd;
      int flags;
    } mmap;
    struct {
      int argc;
    } execve;
    struct {
      char* name;
    } module;
  };
  int fds[2];
  struct audit_proctitle proctitle;
};

enum audit_nlgrps {
  AUDIT_NLGRP_NONE = 0,
  AUDIT_NLGRP_READLOG = 1,
  __AUDIT_NLGRP_MAX = 2,
};

struct audit_status {
  __u32 mask;
  __u32 enabled;
  __u32 failure;
  __u32 pid;
  __u32 rate_limit;
  __u32 backlog_limit;
  __u32 lost;
  __u32 backlog;
  union {
    __u32 version;
    __u32 feature_bitmap;
  };
  __u32 backlog_wait_time;
  __u32 backlog_wait_time_actual;
};

struct audit_features {
  __u32 vers;
  __u32 mask;
  __u32 features;
  __u32 lock;
};

struct audit_tty_status {
  __u32 enabled;
  __u32 log_passwd;
};

struct audit_sig_info {
  uid_t uid;
  pid_t pid;
  char ctx[0];
};

struct net_generic {
  union {
    struct {
      unsigned int len;
      struct callback_head rcu;
    } s;
    void* ptr[0];
  };
};

struct scm_creds {
  u32 pid;
  kuid_t uid;
  kgid_t gid;
};

struct netlink_skb_parms {
  struct scm_creds creds;
  __u32 portid;
  __u32 dst_group;
  __u32 flags;
  struct sock* sk;
  bool nsid_is_set;
  int nsid;
};

struct netlink_kernel_cfg {
  unsigned int groups;
  unsigned int flags;
  void (*input)(struct sk_buff*);
  struct mutex* cb_mutex;
  int (*bind)(struct net*, int);
  void (*unbind)(struct net*, int);
  bool (*compare)(struct net*, struct sock*);
};

struct audit_netlink_list {
  __u32 portid;
  struct net* net;
  struct sk_buff_head q;
};

struct audit_net {
  struct sock* sk;
};

struct auditd_connection {
  struct pid* pid;
  u32 portid;
  struct net* net;
  struct callback_head rcu;
};

struct audit_ctl_mutex {
  struct mutex lock;
  void* owner;
};

struct audit_buffer {
  struct sk_buff* skb;
  struct audit_context* ctx;
  gfp_t gfp_mask;
};

struct audit_reply {
  __u32 portid;
  struct net* net;
  struct sk_buff* skb;
};

enum {
  Audit_equal = 0,
  Audit_not_equal = 1,
  Audit_bitmask = 2,
  Audit_bittest = 3,
  Audit_lt = 4,
  Audit_gt = 5,
  Audit_le = 6,
  Audit_ge = 7,
  Audit_bad = 8,
};

struct audit_rule_data {
  __u32 flags;
  __u32 action;
  __u32 field_count;
  __u32 mask[64];
  __u32 fields[64];
  __u32 values[64];
  __u32 fieldflags[64];
  __u32 buflen;
  char buf[0];
};

struct audit_field;

struct audit_watch;

struct audit_tree;

struct audit_fsnotify_mark;

struct audit_krule {
  u32 pflags;
  u32 flags;
  u32 listnr;
  u32 action;
  u32 mask[64];
  u32 buflen;
  u32 field_count;
  char* filterkey;
  struct audit_field* fields;
  struct audit_field* arch_f;
  struct audit_field* inode_f;
  struct audit_watch* watch;
  struct audit_tree* tree;
  struct audit_fsnotify_mark* exe;
  struct list_head rlist;
  struct list_head list;
  u64 prio;
};

struct audit_field {
  u32 type;
  union {
    u32 val;
    kuid_t uid;
    kgid_t gid;
    struct {
      char* lsm_str;
      void* lsm_rule;
    };
  };
  u32 op;
};

struct audit_entry {
  struct list_head list;
  struct callback_head rcu;
  struct audit_krule rule;
};

struct audit_buffer___2;

typedef int __kernel_key_t;

typedef __kernel_key_t key_t;

struct cpu_vfs_cap_data {
  __u32 magic_etc;
  kernel_cap_t permitted;
  kernel_cap_t inheritable;
  kuid_t rootid;
};

struct kern_ipc_perm {
  spinlock_t lock;
  bool deleted;
  int id;
  key_t key;
  kuid_t uid;
  kgid_t gid;
  kuid_t cuid;
  kgid_t cgid;
  umode_t mode;
  long unsigned int seq;
  void* security;
  struct rhash_head khtnode;
  struct callback_head rcu;
  refcount_t refcount;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

typedef struct fsnotify_mark_connector* fsnotify_connp_t;

struct fsnotify_mark_connector {
  spinlock_t lock;
  short unsigned int type;
  short unsigned int flags;
  __kernel_fsid_t fsid;
  union {
    fsnotify_connp_t* obj;
    struct fsnotify_mark_connector* destroy_next;
  };
  struct hlist_head list;
};

enum audit_nfcfgop {
  AUDIT_XT_OP_REGISTER = 0,
  AUDIT_XT_OP_REPLACE = 1,
  AUDIT_XT_OP_UNREGISTER = 2,
  AUDIT_NFT_OP_TABLE_REGISTER = 3,
  AUDIT_NFT_OP_TABLE_UNREGISTER = 4,
  AUDIT_NFT_OP_CHAIN_REGISTER = 5,
  AUDIT_NFT_OP_CHAIN_UNREGISTER = 6,
  AUDIT_NFT_OP_RULE_REGISTER = 7,
  AUDIT_NFT_OP_RULE_UNREGISTER = 8,
  AUDIT_NFT_OP_SET_REGISTER = 9,
  AUDIT_NFT_OP_SET_UNREGISTER = 10,
  AUDIT_NFT_OP_SETELEM_REGISTER = 11,
  AUDIT_NFT_OP_SETELEM_UNREGISTER = 12,
  AUDIT_NFT_OP_GEN_REGISTER = 13,
  AUDIT_NFT_OP_OBJ_REGISTER = 14,
  AUDIT_NFT_OP_OBJ_UNREGISTER = 15,
  AUDIT_NFT_OP_OBJ_RESET = 16,
  AUDIT_NFT_OP_FLOWTABLE_REGISTER = 17,
  AUDIT_NFT_OP_FLOWTABLE_UNREGISTER = 18,
  AUDIT_NFT_OP_INVALID = 19,
};

enum fsnotify_obj_type {
  FSNOTIFY_OBJ_TYPE_INODE = 0,
  FSNOTIFY_OBJ_TYPE_PARENT = 1,
  FSNOTIFY_OBJ_TYPE_VFSMOUNT = 2,
  FSNOTIFY_OBJ_TYPE_SB = 3,
  FSNOTIFY_OBJ_TYPE_COUNT = 4,
  FSNOTIFY_OBJ_TYPE_DETACHED = 4,
};

struct audit_aux_data {
  struct audit_aux_data* next;
  int type;
};

struct audit_chunk;

struct audit_tree_refs {
  struct audit_tree_refs* next;
  struct audit_chunk* c[31];
};

struct audit_aux_data_pids {
  struct audit_aux_data d;
  pid_t target_pid[16];
  kuid_t target_auid[16];
  kuid_t target_uid[16];
  unsigned int target_sessionid[16];
  u32 target_sid[16];
  char target_comm[256];
  int pid_count;
};

struct audit_aux_data_bprm_fcaps {
  struct audit_aux_data d;
  struct audit_cap_data fcap;
  unsigned int fcap_ver;
  struct audit_cap_data old_pcap;
  struct audit_cap_data new_pcap;
};

struct audit_nfcfgop_tab {
  enum audit_nfcfgop op;
  const char* s;
};

struct audit_parent;

struct audit_watch {
  refcount_t count;
  dev_t dev;
  char* path;
  long unsigned int ino;
  struct audit_parent* parent;
  struct list_head wlist;
  struct list_head rules;
};

struct fsnotify_group;

struct fsnotify_iter_info;

struct fsnotify_mark;

struct fsnotify_event;

struct fsnotify_ops {
  int (*handle_event)(
      struct fsnotify_group*,
      u32,
      const void*,
      int,
      struct inode*,
      const struct qstr*,
      u32,
      struct fsnotify_iter_info*);
  int (*handle_inode_event)(
      struct fsnotify_mark*,
      u32,
      struct inode*,
      struct inode*,
      const struct qstr*,
      u32);
  void (*free_group_priv)(struct fsnotify_group*);
  void (*freeing_mark)(struct fsnotify_mark*, struct fsnotify_group*);
  void (*free_event)(struct fsnotify_event*);
  void (*free_mark)(struct fsnotify_mark*);
};

struct inotify_group_private_data {
  spinlock_t idr_lock;
  struct idr idr;
  struct ucounts* ucounts;
};

struct fanotify_group_private_data {
  struct list_head access_list;
  wait_queue_head_t access_waitq;
  int flags;
  int f_flags;
  unsigned int max_marks;
  struct user_struct* user;
};

struct fsnotify_group {
  const struct fsnotify_ops* ops;
  refcount_t refcnt;
  spinlock_t notification_lock;
  struct list_head notification_list;
  wait_queue_head_t notification_waitq;
  unsigned int q_len;
  unsigned int max_events;
  unsigned int priority;
  bool shutdown;
  struct mutex mark_mutex;
  atomic_t num_marks;
  atomic_t user_waits;
  struct list_head marks_list;
  struct fasync_struct* fsn_fa;
  struct fsnotify_event* overflow_event;
  struct mem_cgroup* memcg;
  union {
    void* private;
    struct inotify_group_private_data inotify_data;
    struct fanotify_group_private_data fanotify_data;
  };
};

struct fsnotify_iter_info {
  struct fsnotify_mark* marks[4];
  unsigned int report_mask;
  int srcu_idx;
};

struct fsnotify_mark {
  __u32 mask;
  refcount_t refcnt;
  struct fsnotify_group* group;
  struct list_head g_list;
  spinlock_t lock;
  struct hlist_node obj_list;
  struct fsnotify_mark_connector* connector;
  __u32 ignored_mask;
  unsigned int flags;
};

struct fsnotify_event {
  struct list_head list;
  long unsigned int objectid;
};

struct audit_parent {
  struct list_head watches;
  struct fsnotify_mark mark;
};

struct audit_fsnotify_mark {
  dev_t dev;
  long unsigned int ino;
  char* path;
  struct fsnotify_mark mark;
  struct audit_krule* rule;
};

struct audit_chunk___2;

struct audit_tree {
  refcount_t count;
  int goner;
  struct audit_chunk___2* root;
  struct list_head chunks;
  struct list_head rules;
  struct list_head list;
  struct list_head same_root;
  struct callback_head head;
  char pathname[0];
};

struct node___2 {
  struct list_head list;
  struct audit_tree* owner;
  unsigned int index;
};

struct audit_chunk___2 {
  struct list_head hash;
  long unsigned int key;
  struct fsnotify_mark* mark;
  struct list_head trees;
  int count;
  atomic_long_t refs;
  struct callback_head head;
  struct node___2 owners[0];
};

struct audit_tree_mark {
  struct fsnotify_mark mark;
  struct audit_chunk___2* chunk;
};

enum {
  HASH_SIZE = 128,
};

struct kprobe_blacklist_entry {
  struct list_head list;
  long unsigned int start_addr;
  long unsigned int end_addr;
};

enum perf_record_ksymbol_type {
  PERF_RECORD_KSYMBOL_TYPE_UNKNOWN = 0,
  PERF_RECORD_KSYMBOL_TYPE_BPF = 1,
  PERF_RECORD_KSYMBOL_TYPE_OOL = 2,
  PERF_RECORD_KSYMBOL_TYPE_MAX = 3,
};

struct kprobe_insn_page {
  struct list_head list;
  kprobe_opcode_t* insns;
  struct kprobe_insn_cache* cache;
  int nused;
  int ngarbage;
  char slot_used[0];
};

enum kprobe_slot_state {
  SLOT_CLEAN = 0,
  SLOT_DIRTY = 1,
  SLOT_USED = 2,
};

struct seccomp_data {
  int nr;
  __u32 arch;
  __u64 instruction_pointer;
  __u64 args[6];
};

struct seccomp_notif_sizes {
  __u16 seccomp_notif;
  __u16 seccomp_notif_resp;
  __u16 seccomp_data;
};

struct seccomp_notif {
  __u64 id;
  __u32 pid;
  __u32 flags;
  struct seccomp_data data;
};

struct seccomp_notif_resp {
  __u64 id;
  __s64 val;
  __s32 error;
  __u32 flags;
};

struct seccomp_notif_addfd {
  __u64 id;
  __u32 flags;
  __u32 srcfd;
  __u32 newfd;
  __u32 newfd_flags;
};

struct action_cache {
  long unsigned int allow_native[7];
  long unsigned int allow_compat[7];
};

struct notification;

struct seccomp_filter {
  refcount_t refs;
  refcount_t users;
  bool log;
  struct action_cache cache;
  struct seccomp_filter* prev;
  struct bpf_prog* prog;
  struct notification* notif;
  struct mutex notify_lock;
  wait_queue_head_t wqh;
};

struct ctl_path {
  const char* procname;
};

struct sock_fprog {
  short unsigned int len;
  struct sock_filter* filter;
};

struct compat_sock_fprog {
  u16 len;
  compat_uptr_t filter;
};

typedef unsigned int (*bpf_dispatcher_fn)(
    const void*,
    const struct bpf_insn*,
    unsigned int (*)(const void*, const struct bpf_insn*));

enum notify_state {
  SECCOMP_NOTIFY_INIT = 0,
  SECCOMP_NOTIFY_SENT = 1,
  SECCOMP_NOTIFY_REPLIED = 2,
};

struct seccomp_knotif {
  struct task_struct* task;
  u64 id;
  const struct seccomp_data* data;
  enum notify_state state;
  int error;
  long int val;
  u32 flags;
  struct completion ready;
  struct list_head list;
  struct list_head addfd;
};

struct seccomp_kaddfd {
  struct file* file;
  int fd;
  unsigned int flags;
  int ret;
  struct completion completion;
  struct list_head list;
};

struct notification {
  struct semaphore request;
  u64 next_id;
  struct list_head notifications;
};

struct seccomp_log_name {
  u32 log;
  const char* name;
};

struct rchan;

struct rchan_buf {
  void* start;
  void* data;
  size_t offset;
  size_t subbufs_produced;
  size_t subbufs_consumed;
  struct rchan* chan;
  wait_queue_head_t read_wait;
  struct irq_work wakeup_work;
  struct dentry* dentry;
  struct kref kref;
  struct page** page_array;
  unsigned int page_count;
  unsigned int finalized;
  size_t* padding;
  size_t prev_padding;
  size_t bytes_consumed;
  size_t early_bytes;
  unsigned int cpu;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
};

struct rchan_callbacks;

struct rchan {
  u32 version;
  size_t subbuf_size;
  size_t n_subbufs;
  size_t alloc_size;
  const struct rchan_callbacks* cb;
  struct kref kref;
  void* private_data;
  size_t last_toobig;
  struct rchan_buf** buf;
  int is_global;
  struct list_head list;
  struct dentry* parent;
  int has_base_filename;
  char base_filename[255];
};

struct rchan_callbacks {
  int (*subbuf_start)(struct rchan_buf*, void*, void*, size_t);
  struct dentry* (*create_buf_file)(
      const char*,
      struct dentry*,
      umode_t,
      struct rchan_buf*,
      int*);
  int (*remove_buf_file)(struct dentry*);
};

struct partial_page {
  unsigned int offset;
  unsigned int len;
  long unsigned int private;
};

struct splice_pipe_desc {
  struct page** pages;
  struct partial_page* partial;
  int nr_pages;
  unsigned int nr_pages_max;
  const struct pipe_buf_operations* ops;
  void (*spd_release)(struct splice_pipe_desc*, unsigned int);
};

struct rchan_percpu_buf_dispatcher {
  struct rchan_buf* buf;
  struct dentry* dentry;
};

enum {
  TASKSTATS_TYPE_UNSPEC = 0,
  TASKSTATS_TYPE_PID = 1,
  TASKSTATS_TYPE_TGID = 2,
  TASKSTATS_TYPE_STATS = 3,
  TASKSTATS_TYPE_AGGR_PID = 4,
  TASKSTATS_TYPE_AGGR_TGID = 5,
  TASKSTATS_TYPE_NULL = 6,
  __TASKSTATS_TYPE_MAX = 7,
};

enum {
  TASKSTATS_CMD_ATTR_UNSPEC = 0,
  TASKSTATS_CMD_ATTR_PID = 1,
  TASKSTATS_CMD_ATTR_TGID = 2,
  TASKSTATS_CMD_ATTR_REGISTER_CPUMASK = 3,
  TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK = 4,
  __TASKSTATS_CMD_ATTR_MAX = 5,
};

enum {
  CGROUPSTATS_CMD_UNSPEC = 3,
  CGROUPSTATS_CMD_GET = 4,
  CGROUPSTATS_CMD_NEW = 5,
  __CGROUPSTATS_CMD_MAX = 6,
};

enum {
  CGROUPSTATS_TYPE_UNSPEC = 0,
  CGROUPSTATS_TYPE_CGROUP_STATS = 1,
  __CGROUPSTATS_TYPE_MAX = 2,
};

enum {
  CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
  CGROUPSTATS_CMD_ATTR_FD = 1,
  __CGROUPSTATS_CMD_ATTR_MAX = 2,
};

struct genlmsghdr {
  __u8 cmd;
  __u8 version;
  __u16 reserved;
};

enum {
  NLA_UNSPEC = 0,
  NLA_U8 = 1,
  NLA_U16 = 2,
  NLA_U32 = 3,
  NLA_U64 = 4,
  NLA_STRING = 5,
  NLA_FLAG = 6,
  NLA_MSECS = 7,
  NLA_NESTED = 8,
  NLA_NESTED_ARRAY = 9,
  NLA_NUL_STRING = 10,
  NLA_BINARY = 11,
  NLA_S8 = 12,
  NLA_S16 = 13,
  NLA_S32 = 14,
  NLA_S64 = 15,
  NLA_BITFIELD32 = 16,
  NLA_REJECT = 17,
  __NLA_TYPE_MAX = 18,
};

struct genl_multicast_group {
  char name[16];
  u8 flags;
};

struct genl_ops;

struct genl_info;

struct genl_small_ops;

struct genl_family {
  int id;
  unsigned int hdrsize;
  char name[16];
  unsigned int version;
  unsigned int maxattr;
  unsigned int mcgrp_offset;
  u8 netnsok : 1;
  u8 parallel_ops : 1;
  u8 n_ops;
  u8 n_small_ops;
  u8 n_mcgrps;
  const struct nla_policy* policy;
  int (*pre_doit)(const struct genl_ops*, struct sk_buff*, struct genl_info*);
  void (*post_doit)(const struct genl_ops*, struct sk_buff*, struct genl_info*);
  const struct genl_ops* ops;
  const struct genl_small_ops* small_ops;
  const struct genl_multicast_group* mcgrps;
  struct module* module;
};

struct genl_ops {
  int (*doit)(struct sk_buff*, struct genl_info*);
  int (*start)(struct netlink_callback*);
  int (*dumpit)(struct sk_buff*, struct netlink_callback*);
  int (*done)(struct netlink_callback*);
  const struct nla_policy* policy;
  unsigned int maxattr;
  u8 cmd;
  u8 internal_flags;
  u8 flags;
  u8 validate;
};

struct genl_info {
  u32 snd_seq;
  u32 snd_portid;
  struct nlmsghdr* nlhdr;
  struct genlmsghdr* genlhdr;
  void* userhdr;
  struct nlattr** attrs;
  possible_net_t _net;
  void* user_ptr[2];
  struct netlink_ext_ack* extack;
};

struct genl_small_ops {
  int (*doit)(struct sk_buff*, struct genl_info*);
  int (*dumpit)(struct sk_buff*, struct netlink_callback*);
  u8 cmd;
  u8 internal_flags;
  u8 flags;
  u8 validate;
};

enum genl_validate_flags {
  GENL_DONT_VALIDATE_STRICT = 1,
  GENL_DONT_VALIDATE_DUMP = 2,
  GENL_DONT_VALIDATE_DUMP_STRICT = 4,
};

struct listener {
  struct list_head list;
  pid_t pid;
  char valid;
};

struct listener_list {
  struct rw_semaphore sem;
  struct list_head list;
};

enum actions {
  REGISTER = 0,
  DEREGISTER = 1,
  CPU_DONT_CARE = 2,
};

struct tp_module {
  struct list_head list;
  struct module* mod;
};

struct tp_probes {
  struct callback_head rcu;
  struct tracepoint_func probes[0];
};

struct ftrace_hash {
  long unsigned int size_bits;
  struct hlist_head* buckets;
  long unsigned int count;
  long unsigned int flags;
  struct callback_head rcu;
};

struct ftrace_func_entry {
  struct hlist_node hlist;
  long unsigned int ip;
  long unsigned int direct;
};

enum {
  FTRACE_UPDATE_CALLS = 1,
  FTRACE_DISABLE_CALLS = 2,
  FTRACE_UPDATE_TRACE_FUNC = 4,
  FTRACE_START_FUNC_RET = 8,
  FTRACE_STOP_FUNC_RET = 16,
  FTRACE_MAY_SLEEP = 32,
};

enum {
  FTRACE_ITER_FILTER = 1,
  FTRACE_ITER_NOTRACE = 2,
  FTRACE_ITER_PRINTALL = 4,
  FTRACE_ITER_DO_PROBES = 8,
  FTRACE_ITER_PROBE = 16,
  FTRACE_ITER_MOD = 32,
  FTRACE_ITER_ENABLED = 64,
};

struct prog_entry;

struct event_filter {
  struct prog_entry* prog;
  char* filter_string;
};

struct trace_array_cpu;

struct array_buffer {
  struct trace_array* tr;
  struct trace_buffer* buffer;
  struct trace_array_cpu* data;
  u64 time_start;
  int cpu;
};

struct trace_pid_list;

struct trace_options;

struct trace_array {
  struct list_head list;
  char* name;
  struct array_buffer array_buffer;
  struct trace_pid_list* filtered_pids;
  struct trace_pid_list* filtered_no_pids;
  arch_spinlock_t max_lock;
  int buffer_disabled;
  int sys_refcount_enter;
  int sys_refcount_exit;
  struct trace_event_file* enter_syscall_files[443];
  struct trace_event_file* exit_syscall_files[443];
  int stop_count;
  int clock_id;
  int nr_topts;
  bool clear_trace;
  int buffer_percent;
  unsigned int n_err_log_entries;
  struct tracer* current_trace;
  unsigned int trace_flags;
  unsigned char trace_flags_index[32];
  unsigned int flags;
  raw_spinlock_t start_lock;
  struct list_head err_log;
  struct dentry* dir;
  struct dentry* options;
  struct dentry* percpu_dir;
  struct dentry* event_dir;
  struct trace_options* topts;
  struct list_head systems;
  struct list_head events;
  struct trace_event_file* trace_marker_file;
  cpumask_var_t tracing_cpumask;
  int ref;
  int trace_ref;
  struct ftrace_ops* ops;
  struct trace_pid_list* function_pids;
  struct trace_pid_list* function_no_pids;
  struct list_head func_probes;
  struct list_head mod_trace;
  struct list_head mod_notrace;
  int function_enabled;
  int time_stamp_abs_ref;
  struct list_head hist_vars;
};

struct tracer_flags;

struct tracer {
  const char* name;
  int (*init)(struct trace_array*);
  void (*reset)(struct trace_array*);
  void (*start)(struct trace_array*);
  void (*stop)(struct trace_array*);
  int (*update_thresh)(struct trace_array*);
  void (*open)(struct trace_iterator*);
  void (*pipe_open)(struct trace_iterator*);
  void (*close)(struct trace_iterator*);
  void (*pipe_close)(struct trace_iterator*);
  ssize_t (*read)(struct trace_iterator*, struct file*, char*, size_t, loff_t*);
  ssize_t (*splice_read)(
      struct trace_iterator*,
      struct file*,
      loff_t*,
      struct pipe_inode_info*,
      size_t,
      unsigned int);
  void (*print_header)(struct seq_file*);
  enum print_line_t (*print_line)(struct trace_iterator*);
  int (*set_flag)(struct trace_array*, u32, u32, int);
  int (*flag_changed)(struct trace_array*, u32, int);
  struct tracer* next;
  struct tracer_flags* flags;
  int enabled;
  bool print_max;
  bool allow_instances;
  bool noboot;
};

struct event_subsystem;

struct trace_subsystem_dir {
  struct list_head list;
  struct event_subsystem* subsystem;
  struct trace_array* tr;
  struct dentry* entry;
  int ref_count;
  int nr_events;
};

struct trace_array_cpu {
  atomic_t disabled;
  void* buffer_page;
  long unsigned int entries;
  long unsigned int saved_latency;
  long unsigned int critical_start;
  long unsigned int critical_end;
  long unsigned int critical_sequence;
  long unsigned int nice;
  long unsigned int policy;
  long unsigned int rt_priority;
  long unsigned int skipped_entries;
  u64 preempt_timestamp;
  pid_t pid;
  kuid_t uid;
  char comm[16];
  int ftrace_ignore_pid;
  bool ignore_pid;
};

struct trace_option_dentry;

struct trace_options {
  struct tracer* tracer;
  struct trace_option_dentry* topts;
};

struct tracer_opt;

struct trace_option_dentry {
  struct tracer_opt* opt;
  struct tracer_flags* flags;
  struct trace_array* tr;
  struct dentry* entry;
};

struct trace_pid_list {
  int pid_max;
  long unsigned int* pids;
};

enum {
  TRACE_PIDS = 1,
  TRACE_NO_PIDS = 2,
};

enum {
  TRACE_ARRAY_FL_GLOBAL = 1,
};

struct tracer_opt {
  const char* name;
  u32 bit;
};

struct tracer_flags {
  u32 val;
  struct tracer_opt* opts;
  struct tracer* trace;
};

struct ftrace_mod_load {
  struct list_head list;
  char* func;
  char* module;
  int enable;
};

enum {
  FTRACE_HASH_FL_MOD = 1,
};

struct ftrace_func_command {
  struct list_head list;
  char* name;
  int (*func)(
      struct trace_array*,
      struct ftrace_hash*,
      char*,
      char*,
      char*,
      int);
};

struct ftrace_probe_ops {
  void (*func)(
      long unsigned int,
      long unsigned int,
      struct trace_array*,
      struct ftrace_probe_ops*,
      void*);
  int (*init)(
      struct ftrace_probe_ops*,
      struct trace_array*,
      long unsigned int,
      void*,
      void**);
  void (*free)(
      struct ftrace_probe_ops*,
      struct trace_array*,
      long unsigned int,
      void*);
  int (*print)(
      struct seq_file*,
      long unsigned int,
      struct ftrace_probe_ops*,
      void*);
};

typedef int (*ftrace_mapper_func)(void*);

struct trace_parser {
  bool cont;
  char* buffer;
  unsigned int idx;
  unsigned int size;
};

enum trace_iterator_bits {
  TRACE_ITER_PRINT_PARENT_BIT = 0,
  TRACE_ITER_SYM_OFFSET_BIT = 1,
  TRACE_ITER_SYM_ADDR_BIT = 2,
  TRACE_ITER_VERBOSE_BIT = 3,
  TRACE_ITER_RAW_BIT = 4,
  TRACE_ITER_HEX_BIT = 5,
  TRACE_ITER_BIN_BIT = 6,
  TRACE_ITER_BLOCK_BIT = 7,
  TRACE_ITER_PRINTK_BIT = 8,
  TRACE_ITER_ANNOTATE_BIT = 9,
  TRACE_ITER_USERSTACKTRACE_BIT = 10,
  TRACE_ITER_SYM_USEROBJ_BIT = 11,
  TRACE_ITER_PRINTK_MSGONLY_BIT = 12,
  TRACE_ITER_CONTEXT_INFO_BIT = 13,
  TRACE_ITER_LATENCY_FMT_BIT = 14,
  TRACE_ITER_RECORD_CMD_BIT = 15,
  TRACE_ITER_RECORD_TGID_BIT = 16,
  TRACE_ITER_OVERWRITE_BIT = 17,
  TRACE_ITER_STOP_ON_FREE_BIT = 18,
  TRACE_ITER_IRQ_INFO_BIT = 19,
  TRACE_ITER_MARKERS_BIT = 20,
  TRACE_ITER_EVENT_FORK_BIT = 21,
  TRACE_ITER_PAUSE_ON_TRACE_BIT = 22,
  TRACE_ITER_HASH_PTR_BIT = 23,
  TRACE_ITER_FUNCTION_BIT = 24,
  TRACE_ITER_FUNC_FORK_BIT = 25,
  TRACE_ITER_DISPLAY_GRAPH_BIT = 26,
  TRACE_ITER_STACKTRACE_BIT = 27,
  TRACE_ITER_LAST_BIT = 28,
};

struct event_subsystem {
  struct list_head list;
  const char* name;
  struct event_filter* filter;
  int ref_count;
};

enum regex_type {
  MATCH_FULL = 0,
  MATCH_FRONT_ONLY = 1,
  MATCH_MIDDLE_ONLY = 2,
  MATCH_END_ONLY = 3,
  MATCH_GLOB = 4,
  MATCH_INDEX = 5,
};

enum {
  FTRACE_MODIFY_ENABLE_FL = 1,
  FTRACE_MODIFY_MAY_SLEEP_FL = 2,
};

struct ftrace_func_probe {
  struct ftrace_probe_ops* probe_ops;
  struct ftrace_ops ops;
  struct trace_array* tr;
  struct list_head list;
  void* data;
  int ref;
};

struct ftrace_page {
  struct ftrace_page* next;
  struct dyn_ftrace* records;
  int index;
  int size;
};

struct ftrace_rec_iter___2 {
  struct ftrace_page* pg;
  int index;
};

struct ftrace_iterator {
  loff_t pos;
  loff_t func_pos;
  loff_t mod_pos;
  struct ftrace_page* pg;
  struct dyn_ftrace* func;
  struct ftrace_func_probe* probe;
  struct ftrace_func_entry* probe_entry;
  struct trace_parser parser;
  struct ftrace_hash* hash;
  struct ftrace_ops* ops;
  struct trace_array* tr;
  struct list_head* mod_list;
  int pidx;
  int idx;
  unsigned int flags;
};

struct ftrace_glob {
  char* search;
  unsigned int len;
  int type;
};

struct ftrace_func_map {
  struct ftrace_func_entry entry;
  void* data;
};

struct ftrace_func_mapper {
  struct ftrace_hash hash;
};

struct ftrace_direct_func {
  struct list_head next;
  long unsigned int addr;
  int count;
};

enum graph_filter_type {
  GRAPH_FILTER_NOTRACE = 0,
  GRAPH_FILTER_FUNCTION = 1,
};

struct ftrace_graph_data {
  struct ftrace_hash* hash;
  struct ftrace_func_entry* entry;
  int idx;
  enum graph_filter_type type;
  struct ftrace_hash* new_hash;
  const struct seq_operations* seq_ops;
  struct trace_parser parser;
};

struct ftrace_mod_func {
  struct list_head list;
  char* name;
  long unsigned int ip;
  unsigned int size;
};

struct ftrace_mod_map {
  struct callback_head rcu;
  struct list_head list;
  struct module* mod;
  long unsigned int start_addr;
  long unsigned int end_addr;
  struct list_head funcs;
  unsigned int num_funcs;
};

struct ftrace_init_func {
  struct list_head list;
  long unsigned int ip;
};

enum ring_buffer_type {
  RINGBUF_TYPE_DATA_TYPE_LEN_MAX = 28,
  RINGBUF_TYPE_PADDING = 29,
  RINGBUF_TYPE_TIME_EXTEND = 30,
  RINGBUF_TYPE_TIME_STAMP = 31,
};

enum ring_buffer_flags {
  RB_FL_OVERWRITE = 1,
};

struct ring_buffer_per_cpu;

struct buffer_page;

struct ring_buffer_iter {
  struct ring_buffer_per_cpu* cpu_buffer;
  long unsigned int head;
  long unsigned int next_event;
  struct buffer_page* head_page;
  struct buffer_page* cache_reader_page;
  long unsigned int cache_read;
  u64 read_stamp;
  u64 page_stamp;
  struct ring_buffer_event* event;
  int missed_events;
};

struct rb_irq_work {
  struct irq_work work;
  wait_queue_head_t waiters;
  wait_queue_head_t full_waiters;
  bool waiters_pending;
  bool full_waiters_pending;
  bool wakeup_full;
};

struct trace_buffer___2 {
  unsigned int flags;
  int cpus;
  atomic_t record_disabled;
  cpumask_var_t cpumask;
  struct lock_class_key* reader_lock_key;
  struct mutex mutex;
  struct ring_buffer_per_cpu** buffers;
  struct hlist_node node;
  u64 (*clock)();
  struct rb_irq_work irq_work;
  bool time_stamp_abs;
};

enum {
  RB_LEN_TIME_EXTEND = 8,
  RB_LEN_TIME_STAMP = 8,
};

struct buffer_data_page {
  u64 time_stamp;
  local_t commit;
  unsigned char data[0];
};

struct buffer_page {
  struct list_head list;
  local_t write;
  unsigned int read;
  local_t entries;
  long unsigned int real_end;
  struct buffer_data_page* page;
};

struct rb_event_info {
  u64 ts;
  u64 delta;
  u64 before;
  u64 after;
  long unsigned int length;
  struct buffer_page* tail_page;
  int add_timestamp;
};

enum {
  RB_ADD_STAMP_NONE = 0,
  RB_ADD_STAMP_EXTEND = 2,
  RB_ADD_STAMP_ABSOLUTE = 4,
  RB_ADD_STAMP_FORCE = 8,
};

enum {
  RB_CTX_TRANSITION = 0,
  RB_CTX_NMI = 1,
  RB_CTX_IRQ = 2,
  RB_CTX_SOFTIRQ = 3,
  RB_CTX_NORMAL = 4,
  RB_CTX_MAX = 5,
};

struct rb_time_struct {
  local64_t time;
};

typedef struct rb_time_struct rb_time_t;

struct ring_buffer_per_cpu {
  int cpu;
  atomic_t record_disabled;
  atomic_t resize_disabled;
  struct trace_buffer___2* buffer;
  raw_spinlock_t reader_lock;
  arch_spinlock_t lock;
  struct lock_class_key lock_key;
  struct buffer_data_page* free_page;
  long unsigned int nr_pages;
  unsigned int current_context;
  struct list_head* pages;
  struct buffer_page* head_page;
  struct buffer_page* tail_page;
  struct buffer_page* commit_page;
  struct buffer_page* reader_page;
  long unsigned int lost_events;
  long unsigned int last_overrun;
  long unsigned int nest;
  local_t entries_bytes;
  local_t entries;
  local_t overrun;
  local_t commit_overrun;
  local_t dropped_events;
  local_t committing;
  local_t commits;
  local_t pages_touched;
  local_t pages_read;
  long int last_pages_touch;
  size_t shortest_full;
  long unsigned int read;
  long unsigned int read_bytes;
  rb_time_t write_stamp;
  rb_time_t before_stamp;
  u64 read_stamp;
  long int nr_pages_to_update;
  struct list_head new_pages;
  struct work_struct update_pages_work;
  struct completion update_done;
  struct rb_irq_work irq_work;
};

struct trace_export {
  struct trace_export* next;
  void (*write)(struct trace_export*, const void*, unsigned int);
  int flags;
};

enum trace_iter_flags {
  TRACE_FILE_LAT_FMT = 1,
  TRACE_FILE_ANNOTATE = 2,
  TRACE_FILE_TIME_IN_NS = 4,
};

enum trace_flag_type {
  TRACE_FLAG_IRQS_OFF = 1,
  TRACE_FLAG_IRQS_NOSUPPORT = 2,
  TRACE_FLAG_NEED_RESCHED = 4,
  TRACE_FLAG_HARDIRQ = 8,
  TRACE_FLAG_SOFTIRQ = 16,
  TRACE_FLAG_PREEMPT_RESCHED = 32,
  TRACE_FLAG_NMI = 64,
};

enum event_trigger_type {
  ETT_NONE = 0,
  ETT_TRACE_ONOFF = 1,
  ETT_SNAPSHOT = 2,
  ETT_STACKTRACE = 4,
  ETT_EVENT_ENABLE = 8,
  ETT_EVENT_HIST = 16,
  ETT_HIST_ENABLE = 32,
};

enum trace_type {
  __TRACE_FIRST_TYPE = 0,
  TRACE_FN = 1,
  TRACE_CTX = 2,
  TRACE_WAKE = 3,
  TRACE_STACK = 4,
  TRACE_PRINT = 5,
  TRACE_BPRINT = 6,
  TRACE_MMIO_RW = 7,
  TRACE_MMIO_MAP = 8,
  TRACE_BRANCH = 9,
  TRACE_GRAPH_RET = 10,
  TRACE_GRAPH_ENT = 11,
  TRACE_USER_STACK = 12,
  TRACE_BLK = 13,
  TRACE_BPUTS = 14,
  TRACE_HWLAT = 15,
  TRACE_RAW_DATA = 16,
  __TRACE_LAST_TYPE = 17,
};

struct ftrace_entry {
  struct trace_entry ent;
  long unsigned int ip;
  long unsigned int parent_ip;
};

struct stack_entry {
  struct trace_entry ent;
  int size;
  long unsigned int caller[8];
};

struct userstack_entry {
  struct trace_entry ent;
  unsigned int tgid;
  long unsigned int caller[8];
};

struct bprint_entry {
  struct trace_entry ent;
  long unsigned int ip;
  const char* fmt;
  u32 buf[0];
};

struct print_entry {
  struct trace_entry ent;
  long unsigned int ip;
  char buf[0];
};

struct raw_data_entry {
  struct trace_entry ent;
  unsigned int id;
  char buf[0];
};

struct bputs_entry {
  struct trace_entry ent;
  long unsigned int ip;
  const char* str;
};

typedef bool (*cond_update_fn_t)(struct trace_array*, void*);

enum trace_iterator_flags {
  TRACE_ITER_PRINT_PARENT = 1,
  TRACE_ITER_SYM_OFFSET = 2,
  TRACE_ITER_SYM_ADDR = 4,
  TRACE_ITER_VERBOSE = 8,
  TRACE_ITER_RAW = 16,
  TRACE_ITER_HEX = 32,
  TRACE_ITER_BIN = 64,
  TRACE_ITER_BLOCK = 128,
  TRACE_ITER_PRINTK = 256,
  TRACE_ITER_ANNOTATE = 512,
  TRACE_ITER_USERSTACKTRACE = 1024,
  TRACE_ITER_SYM_USEROBJ = 2048,
  TRACE_ITER_PRINTK_MSGONLY = 4096,
  TRACE_ITER_CONTEXT_INFO = 8192,
  TRACE_ITER_LATENCY_FMT = 16384,
  TRACE_ITER_RECORD_CMD = 32768,
  TRACE_ITER_RECORD_TGID = 65536,
  TRACE_ITER_OVERWRITE = 131072,
  TRACE_ITER_STOP_ON_FREE = 262144,
  TRACE_ITER_IRQ_INFO = 524288,
  TRACE_ITER_MARKERS = 1048576,
  TRACE_ITER_EVENT_FORK = 2097152,
  TRACE_ITER_PAUSE_ON_TRACE = 4194304,
  TRACE_ITER_HASH_PTR = 8388608,
  TRACE_ITER_FUNCTION = 16777216,
  TRACE_ITER_FUNC_FORK = 33554432,
  TRACE_ITER_DISPLAY_GRAPH = 67108864,
  TRACE_ITER_STACKTRACE = 134217728,
};

struct saved_cmdlines_buffer {
  unsigned int map_pid_to_cmdline[32769];
  unsigned int* map_cmdline_to_pid;
  unsigned int cmdline_num;
  int cmdline_idx;
  char* saved_cmdlines;
};

struct ftrace_stack {
  long unsigned int calls[1024];
};

struct ftrace_stacks {
  struct ftrace_stack stacks[4];
};

struct trace_buffer_struct {
  int nesting;
  char buffer[4096];
};

struct ftrace_buffer_info {
  struct trace_iterator iter;
  void* spare;
  unsigned int spare_cpu;
  unsigned int read;
};

struct err_info {
  const char** errs;
  u8 type;
  u8 pos;
  u64 ts;
};

struct tracing_log_err {
  struct list_head list;
  struct err_info info;
  char loc[128];
  char cmd[256];
};

struct buffer_ref {
  struct trace_buffer* buffer;
  void* page;
  int cpu;
  refcount_t refcount;
};

struct ctx_switch_entry {
  struct trace_entry ent;
  unsigned int prev_pid;
  unsigned int next_pid;
  unsigned int next_cpu;
  unsigned char prev_prio;
  unsigned char prev_state;
  unsigned char next_prio;
  unsigned char next_state;
};

struct hwlat_entry {
  struct trace_entry ent;
  u64 duration;
  u64 outer_duration;
  u64 nmi_total_ts;
  struct timespec64 timestamp;
  unsigned int nmi_count;
  unsigned int seqnum;
  unsigned int count;
};

struct trace_mark {
  long long unsigned int val;
  char sym;
};

struct tracer_stat {
  const char* name;
  void* (*stat_start)(struct tracer_stat*);
  void* (*stat_next)(void*, int);
  cmp_func_t stat_cmp;
  int (*stat_show)(struct seq_file*, void*);
  void (*stat_release)(void*);
  int (*stat_headers)(struct seq_file*);
};

struct stat_node {
  struct rb_node node;
  void* stat;
};

struct stat_session {
  struct list_head session_list;
  struct tracer_stat* ts;
  struct rb_root stat_root;
  struct mutex stat_mutex;
  struct dentry* file;
};

struct trace_bprintk_fmt {
  struct list_head list;
  const char* fmt;
};

enum {
  TRACE_FUNC_OPT_STACK = 1,
};

struct ftrace_func_mapper___2;

enum {
  TRACE_NOP_OPT_ACCEPT = 1,
  TRACE_NOP_OPT_REFUSE = 2,
};

struct fgraph_ops {
  trace_func_graph_ent_t entryfunc;
  trace_func_graph_ret_t retfunc;
};

struct ftrace_graph_ent_entry {
  struct trace_entry ent;
  struct ftrace_graph_ent graph_ent;
} __attribute__((packed));

struct ftrace_graph_ret_entry {
  struct trace_entry ent;
  struct ftrace_graph_ret ret;
};

struct fgraph_cpu_data {
  pid_t last_pid;
  int depth;
  int depth_irq;
  int ignore;
  long unsigned int enter_funcs[50];
};

struct fgraph_data {
  struct fgraph_cpu_data* cpu_data;
  struct ftrace_graph_ent_entry ent;
  struct ftrace_graph_ret_entry ret;
  int failed;
  int cpu;
  int : 32;
} __attribute__((packed));

enum {
  FLAGS_FILL_FULL = 268435456,
  FLAGS_FILL_START = 536870912,
  FLAGS_FILL_END = 805306368,
};

struct disk_stats {
  u64 nsecs[4];
  long unsigned int sectors[4];
  long unsigned int ios[4];
  long unsigned int merges[4];
  long unsigned int io_ticks;
  local_t in_flight[2];
};

typedef __u32 blk_mq_req_flags_t;

enum req_opf {
  REQ_OP_READ = 0,
  REQ_OP_WRITE = 1,
  REQ_OP_FLUSH = 2,
  REQ_OP_DISCARD = 3,
  REQ_OP_SECURE_ERASE = 5,
  REQ_OP_WRITE_SAME = 7,
  REQ_OP_WRITE_ZEROES = 9,
  REQ_OP_ZONE_OPEN = 10,
  REQ_OP_ZONE_CLOSE = 11,
  REQ_OP_ZONE_FINISH = 12,
  REQ_OP_ZONE_APPEND = 13,
  REQ_OP_ZONE_RESET = 15,
  REQ_OP_ZONE_RESET_ALL = 17,
  REQ_OP_SCSI_IN = 32,
  REQ_OP_SCSI_OUT = 33,
  REQ_OP_DRV_IN = 34,
  REQ_OP_DRV_OUT = 35,
  REQ_OP_LAST = 36,
};

enum req_flag_bits {
  __REQ_FAILFAST_DEV = 8,
  __REQ_FAILFAST_TRANSPORT = 9,
  __REQ_FAILFAST_DRIVER = 10,
  __REQ_SYNC = 11,
  __REQ_META = 12,
  __REQ_PRIO = 13,
  __REQ_NOMERGE = 14,
  __REQ_IDLE = 15,
  __REQ_INTEGRITY = 16,
  __REQ_FUA = 17,
  __REQ_PREFLUSH = 18,
  __REQ_RAHEAD = 19,
  __REQ_BACKGROUND = 20,
  __REQ_NOWAIT = 21,
  __REQ_CGROUP_PUNT = 22,
  __REQ_NOUNMAP = 23,
  __REQ_HIPRI = 24,
  __REQ_DRV = 25,
  __REQ_SWAP = 26,
  __REQ_NR_BITS = 27,
};

struct blk_mq_ctxs;

struct blk_mq_ctx {
  struct {
    spinlock_t lock;
    struct list_head rq_lists[3];
    long : 64;
  };
  unsigned int cpu;
  short unsigned int index_hw[3];
  struct blk_mq_hw_ctx* hctxs[3];
  long unsigned int rq_dispatched[2];
  long unsigned int rq_merged;
  long unsigned int rq_completed[2];
  struct request_queue* queue;
  struct blk_mq_ctxs* ctxs;
  struct kobject kobj;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct sbitmap_word;

struct sbitmap {
  unsigned int depth;
  unsigned int shift;
  unsigned int map_nr;
  struct sbitmap_word* map;
};

struct blk_mq_tags;

struct blk_mq_hw_ctx {
  struct {
    spinlock_t lock;
    struct list_head dispatch;
    long unsigned int state;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct delayed_work run_work;
  cpumask_var_t cpumask;
  int next_cpu;
  int next_cpu_batch;
  long unsigned int flags;
  void* sched_data;
  struct request_queue* queue;
  struct blk_flush_queue* fq;
  void* driver_data;
  struct sbitmap ctx_map;
  struct blk_mq_ctx* dispatch_from;
  unsigned int dispatch_busy;
  short unsigned int type;
  short unsigned int nr_ctx;
  struct blk_mq_ctx** ctxs;
  spinlock_t dispatch_wait_lock;
  wait_queue_entry_t dispatch_wait;
  atomic_t wait_index;
  struct blk_mq_tags* tags;
  struct blk_mq_tags* sched_tags;
  long unsigned int queued;
  long unsigned int run;
  long unsigned int dispatched[7];
  unsigned int numa_node;
  unsigned int queue_num;
  atomic_t nr_active;
  struct hlist_node cpuhp_online;
  struct hlist_node cpuhp_dead;
  struct kobject kobj;
  long unsigned int poll_considered;
  long unsigned int poll_invoked;
  long unsigned int poll_success;
  struct dentry* debugfs_dir;
  struct dentry* sched_debugfs_dir;
  struct list_head hctx_list;
  struct srcu_struct srcu[0];
};

struct blk_mq_alloc_data {
  struct request_queue* q;
  blk_mq_req_flags_t flags;
  unsigned int shallow_depth;
  unsigned int cmd_flags;
  struct blk_mq_ctx* ctx;
  struct blk_mq_hw_ctx* hctx;
};

struct blk_stat_callback {
  struct list_head list;
  struct timer_list timer;
  struct blk_rq_stat* cpu_stat;
  int (*bucket_fn)(const struct request*);
  unsigned int buckets;
  struct blk_rq_stat* stat;
  void (*timer_fn)(struct blk_stat_callback*);
  void* data;
  struct callback_head rcu;
};

struct blk_trace {
  int trace_state;
  struct rchan* rchan;
  long unsigned int* sequence;
  unsigned char* msg_data;
  u16 act_mask;
  u64 start_lba;
  u64 end_lba;
  u32 pid;
  u32 dev;
  struct dentry* dir;
  struct list_head running_list;
  atomic_t dropped;
};

struct blk_flush_queue {
  unsigned int flush_pending_idx : 1;
  unsigned int flush_running_idx : 1;
  blk_status_t rq_status;
  long unsigned int flush_pending_since;
  struct list_head flush_queue[2];
  struct list_head flush_data_in_flight;
  struct request* flush_rq;
  spinlock_t mq_flush_lock;
};

struct blk_mq_queue_map {
  unsigned int* mq_map;
  unsigned int nr_queues;
  unsigned int queue_offset;
};

struct sbq_wait_state;

struct sbitmap_queue {
  struct sbitmap sb;
  unsigned int* alloc_hint;
  unsigned int wake_batch;
  atomic_t wake_index;
  struct sbq_wait_state* ws;
  atomic_t ws_active;
  bool round_robin;
  unsigned int min_shallow_depth;
};

struct blk_mq_tag_set {
  struct blk_mq_queue_map map[3];
  unsigned int nr_maps;
  const struct blk_mq_ops* ops;
  unsigned int nr_hw_queues;
  unsigned int queue_depth;
  unsigned int reserved_tags;
  unsigned int cmd_size;
  int numa_node;
  unsigned int timeout;
  unsigned int flags;
  void* driver_data;
  atomic_t active_queues_shared_sbitmap;
  struct sbitmap_queue __bitmap_tags;
  struct sbitmap_queue __breserved_tags;
  struct blk_mq_tags** tags;
  struct mutex tag_list_lock;
  struct list_head tag_list;
};

typedef u64 compat_u64;

enum blktrace_cat {
  BLK_TC_READ = 1,
  BLK_TC_WRITE = 2,
  BLK_TC_FLUSH = 4,
  BLK_TC_SYNC = 8,
  BLK_TC_SYNCIO = 8,
  BLK_TC_QUEUE = 16,
  BLK_TC_REQUEUE = 32,
  BLK_TC_ISSUE = 64,
  BLK_TC_COMPLETE = 128,
  BLK_TC_FS = 256,
  BLK_TC_PC = 512,
  BLK_TC_NOTIFY = 1024,
  BLK_TC_AHEAD = 2048,
  BLK_TC_META = 4096,
  BLK_TC_DISCARD = 8192,
  BLK_TC_DRV_DATA = 16384,
  BLK_TC_FUA = 32768,
  BLK_TC_END = 32768,
};

enum blktrace_act {
  __BLK_TA_QUEUE = 1,
  __BLK_TA_BACKMERGE = 2,
  __BLK_TA_FRONTMERGE = 3,
  __BLK_TA_GETRQ = 4,
  __BLK_TA_SLEEPRQ = 5,
  __BLK_TA_REQUEUE = 6,
  __BLK_TA_ISSUE = 7,
  __BLK_TA_COMPLETE = 8,
  __BLK_TA_PLUG = 9,
  __BLK_TA_UNPLUG_IO = 10,
  __BLK_TA_UNPLUG_TIMER = 11,
  __BLK_TA_INSERT = 12,
  __BLK_TA_SPLIT = 13,
  __BLK_TA_BOUNCE = 14,
  __BLK_TA_REMAP = 15,
  __BLK_TA_ABORT = 16,
  __BLK_TA_DRV_DATA = 17,
  __BLK_TA_CGROUP = 256,
};

enum blktrace_notify {
  __BLK_TN_PROCESS = 0,
  __BLK_TN_TIMESTAMP = 1,
  __BLK_TN_MESSAGE = 2,
  __BLK_TN_CGROUP = 256,
};

struct blk_io_trace {
  __u32 magic;
  __u32 sequence;
  __u64 time;
  __u64 sector;
  __u32 bytes;
  __u32 action;
  __u32 pid;
  __u32 device;
  __u32 cpu;
  __u16 error;
  __u16 pdu_len;
};

struct blk_io_trace_remap {
  __be32 device_from;
  __be32 device_to;
  __be64 sector_from;
};

enum {
  Blktrace_setup = 1,
  Blktrace_running = 2,
  Blktrace_stopped = 3,
};

struct blk_user_trace_setup {
  char name[32];
  __u16 act_mask;
  __u32 buf_size;
  __u32 buf_nr;
  __u64 start_lba;
  __u64 end_lba;
  __u32 pid;
};

struct compat_blk_user_trace_setup {
  char name[32];
  u16 act_mask;
  short : 16;
  u32 buf_size;
  u32 buf_nr;
  compat_u64 start_lba;
  compat_u64 end_lba;
  u32 pid;
} __attribute__((packed));

struct sbitmap_word {
  long unsigned int depth;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long unsigned int word;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long unsigned int cleared;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct sbq_wait_state {
  atomic_t wait_cnt;
  wait_queue_head_t wait;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct blk_mq_tags {
  unsigned int nr_tags;
  unsigned int nr_reserved_tags;
  atomic_t active_queues;
  struct sbitmap_queue* bitmap_tags;
  struct sbitmap_queue* breserved_tags;
  struct sbitmap_queue __bitmap_tags;
  struct sbitmap_queue __breserved_tags;
  struct request** rqs;
  struct request** static_rqs;
  struct list_head page_list;
  spinlock_t lock;
};

struct blk_mq_queue_data {
  struct request* rq;
  bool last;
};

struct blk_crypto_mode {
  const char* cipher_str;
  unsigned int keysize;
  unsigned int ivsize;
};

struct blk_mq_ctxs {
  struct kobject kobj;
  struct blk_mq_ctx* queue_ctx;
};

typedef void blk_log_action_t(struct trace_iterator*, const char*, bool);

struct ftrace_event_field {
  struct list_head link;
  const char* name;
  const char* type;
  int filter_type;
  int offset;
  int size;
  int is_signed;
};

enum {
  FORMAT_HEADER = 1,
  FORMAT_FIELD_SEPERATOR = 2,
  FORMAT_PRINTFMT = 3,
};

struct event_probe_data {
  struct trace_event_file* file;
  long unsigned int count;
  int ref;
  bool enable;
};

struct syscall_trace_enter {
  struct trace_entry ent;
  int nr;
  long unsigned int args[0];
};

struct syscall_trace_exit {
  struct trace_entry ent;
  int nr;
  long int ret;
};

struct syscall_tp_t {
  long long unsigned int regs;
  long unsigned int syscall_nr;
  long unsigned int ret;
};

struct syscall_tp_t___2 {
  long long unsigned int regs;
  long unsigned int syscall_nr;
  long unsigned int args[6];
};

typedef long unsigned int perf_trace_t[256];

struct filter_pred;

struct prog_entry {
  int target;
  int when_to_branch;
  struct filter_pred* pred;
};

typedef int (*filter_pred_fn_t)(struct filter_pred*, void*);

struct regex;

typedef int (*regex_match_func)(char*, struct regex*, int);

struct regex {
  char pattern[256];
  int len;
  int field_len;
  regex_match_func match;
};

struct filter_pred {
  filter_pred_fn_t fn;
  u64 val;
  struct regex regex;
  short unsigned int* ops;
  struct ftrace_event_field* field;
  int offset;
  int not;
  int op;
};

enum filter_op_ids {
  OP_GLOB = 0,
  OP_NE = 1,
  OP_EQ = 2,
  OP_LE = 3,
  OP_LT = 4,
  OP_GE = 5,
  OP_GT = 6,
  OP_BAND = 7,
  OP_MAX = 8,
};

enum {
  FILT_ERR_NONE = 0,
  FILT_ERR_INVALID_OP = 1,
  FILT_ERR_TOO_MANY_OPEN = 2,
  FILT_ERR_TOO_MANY_CLOSE = 3,
  FILT_ERR_MISSING_QUOTE = 4,
  FILT_ERR_OPERAND_TOO_LONG = 5,
  FILT_ERR_EXPECT_STRING = 6,
  FILT_ERR_EXPECT_DIGIT = 7,
  FILT_ERR_ILLEGAL_FIELD_OP = 8,
  FILT_ERR_FIELD_NOT_FOUND = 9,
  FILT_ERR_ILLEGAL_INTVAL = 10,
  FILT_ERR_BAD_SUBSYS_FILTER = 11,
  FILT_ERR_TOO_MANY_PREDS = 12,
  FILT_ERR_INVALID_FILTER = 13,
  FILT_ERR_IP_FIELD_ONLY = 14,
  FILT_ERR_INVALID_VALUE = 15,
  FILT_ERR_ERRNO = 16,
  FILT_ERR_NO_FILTER = 17,
};

struct filter_parse_error {
  int lasterr;
  int lasterr_pos;
};

typedef int (*parse_pred_fn)(
    const char*,
    void*,
    int,
    struct filter_parse_error*,
    struct filter_pred**);

enum {
  INVERT = 1,
  PROCESS_AND = 2,
  PROCESS_OR = 4,
};

enum {
  TOO_MANY_CLOSE = 4294967295,
  TOO_MANY_OPEN = 4294967294,
  MISSING_QUOTE = 4294967293,
};

struct filter_list {
  struct list_head list;
  struct event_filter* filter;
};

struct function_filter_data {
  struct ftrace_ops* ops;
  int first_filter;
  int first_notrace;
};

struct event_trigger_ops;

struct event_command;

struct event_trigger_data {
  long unsigned int count;
  int ref;
  struct event_trigger_ops* ops;
  struct event_command* cmd_ops;
  struct event_filter* filter;
  char* filter_str;
  void* private_data;
  bool paused;
  bool paused_tmp;
  struct list_head list;
  char* name;
  struct list_head named_list;
  struct event_trigger_data* named_data;
};

struct event_trigger_ops {
  void (*func)(struct event_trigger_data*, void*, struct ring_buffer_event*);
  int (*init)(struct event_trigger_ops*, struct event_trigger_data*);
  void (*free)(struct event_trigger_ops*, struct event_trigger_data*);
  int (*print)(
      struct seq_file*,
      struct event_trigger_ops*,
      struct event_trigger_data*);
};

struct event_command {
  struct list_head list;
  char* name;
  enum event_trigger_type trigger_type;
  int flags;
  int (*func)(
      struct event_command*,
      struct trace_event_file*,
      char*,
      char*,
      char*);
  int (*reg)(
      char*,
      struct event_trigger_ops*,
      struct event_trigger_data*,
      struct trace_event_file*);
  void (*unreg)(
      char*,
      struct event_trigger_ops*,
      struct event_trigger_data*,
      struct trace_event_file*);
  void (*unreg_all)(struct trace_event_file*);
  int (
      *set_filter)(char*, struct event_trigger_data*, struct trace_event_file*);
  struct event_trigger_ops* (*get_trigger_ops)(char*, char*);
};

struct enable_trigger_data {
  struct trace_event_file* file;
  bool enable;
  bool hist;
};

enum event_command_flags {
  EVENT_CMD_FL_POST_TRIGGER = 1,
  EVENT_CMD_FL_NEEDS_REC = 2,
};

enum {
  BPF_F_INDEX_MASK = 4294967295,
  BPF_F_CURRENT_CPU = 4294967295,
  BPF_F_CTXLEN_MASK = 0,
};

enum {
  BPF_F_GET_BRANCH_RECORDS_SIZE = 1,
};

struct bpf_perf_event_value {
  __u64 counter;
  __u64 enabled;
  __u64 running;
};

struct bpf_raw_tracepoint_args {
  __u64 args[0];
};

enum bpf_task_fd_type {
  BPF_FD_TYPE_RAW_TRACEPOINT = 0,
  BPF_FD_TYPE_TRACEPOINT = 1,
  BPF_FD_TYPE_KPROBE = 2,
  BPF_FD_TYPE_KRETPROBE = 3,
  BPF_FD_TYPE_UPROBE = 4,
  BPF_FD_TYPE_URETPROBE = 5,
};

struct btf_ptr {
  void* ptr;
  __u32 type_id;
  __u32 flags;
};

enum {
  BTF_F_COMPACT = 1,
  BTF_F_NONAME = 2,
  BTF_F_PTR_RAW = 4,
  BTF_F_ZERO = 8,
};

struct bpf_local_storage_data;

struct bpf_local_storage {
  struct bpf_local_storage_data* cache[16];
  struct hlist_head list;
  void* owner;
  struct callback_head rcu;
  raw_spinlock_t lock;
};

struct bpf_local_storage_map_bucket;

struct bpf_local_storage_map {
  struct bpf_map map;
  struct bpf_local_storage_map_bucket* buckets;
  u32 bucket_log;
  u16 elem_size;
  u16 cache_idx;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_event_entry {
  struct perf_event* event;
  struct file* perf_file;
  struct file* map_file;
  struct callback_head rcu;
};

typedef long unsigned int (
    *bpf_ctx_copy_t)(void*, const void*, long unsigned int, long unsigned int);

struct bpf_trace_run_ctx {
  struct bpf_run_ctx run_ctx;
  u64 bpf_cookie;
};

typedef u32 (*bpf_prog_run_fn)(const struct bpf_prog*, const void*);

typedef struct pt_regs bpf_user_pt_regs_t;

struct bpf_perf_event_data {
  bpf_user_pt_regs_t regs;
  __u64 sample_period;
  __u64 addr;
};

struct btf_id_set {
  u32 cnt;
  u32 ids[0];
};

struct kfunc_btf_id_list;

struct perf_event_query_bpf {
  __u32 ids_len;
  __u32 prog_cnt;
  __u32 ids[0];
};

struct bpf_perf_event_data_kern {
  bpf_user_pt_regs_t* regs;
  struct perf_sample_data* data;
  struct perf_event* event;
};

struct security_hook_heads {
  struct hlist_head binder_set_context_mgr;
  struct hlist_head binder_transaction;
  struct hlist_head binder_transfer_binder;
  struct hlist_head binder_transfer_file;
  struct hlist_head ptrace_access_check;
  struct hlist_head ptrace_traceme;
  struct hlist_head capget;
  struct hlist_head capset;
  struct hlist_head capable;
  struct hlist_head quotactl;
  struct hlist_head quota_on;
  struct hlist_head syslog;
  struct hlist_head settime;
  struct hlist_head vm_enough_memory;
  struct hlist_head bprm_creds_for_exec;
  struct hlist_head bprm_creds_from_file;
  struct hlist_head bprm_check_security;
  struct hlist_head bprm_committing_creds;
  struct hlist_head bprm_committed_creds;
  struct hlist_head fs_context_dup;
  struct hlist_head fs_context_parse_param;
  struct hlist_head sb_alloc_security;
  struct hlist_head sb_free_security;
  struct hlist_head sb_free_mnt_opts;
  struct hlist_head sb_eat_lsm_opts;
  struct hlist_head sb_remount;
  struct hlist_head sb_kern_mount;
  struct hlist_head sb_show_options;
  struct hlist_head sb_statfs;
  struct hlist_head sb_mount;
  struct hlist_head sb_umount;
  struct hlist_head sb_pivotroot;
  struct hlist_head sb_set_mnt_opts;
  struct hlist_head sb_clone_mnt_opts;
  struct hlist_head sb_add_mnt_opt;
  struct hlist_head move_mount;
  struct hlist_head dentry_init_security;
  struct hlist_head dentry_create_files_as;
  struct hlist_head path_notify;
  struct hlist_head inode_alloc_security;
  struct hlist_head inode_free_security;
  struct hlist_head inode_init_security;
  struct hlist_head inode_init_security_anon;
  struct hlist_head inode_create;
  struct hlist_head inode_link;
  struct hlist_head inode_unlink;
  struct hlist_head inode_symlink;
  struct hlist_head inode_mkdir;
  struct hlist_head inode_rmdir;
  struct hlist_head inode_mknod;
  struct hlist_head inode_rename;
  struct hlist_head inode_readlink;
  struct hlist_head inode_follow_link;
  struct hlist_head inode_permission;
  struct hlist_head inode_setattr;
  struct hlist_head inode_getattr;
  struct hlist_head inode_setxattr;
  struct hlist_head inode_post_setxattr;
  struct hlist_head inode_getxattr;
  struct hlist_head inode_listxattr;
  struct hlist_head inode_removexattr;
  struct hlist_head inode_need_killpriv;
  struct hlist_head inode_killpriv;
  struct hlist_head inode_getsecurity;
  struct hlist_head inode_setsecurity;
  struct hlist_head inode_listsecurity;
  struct hlist_head inode_getsecid;
  struct hlist_head inode_copy_up;
  struct hlist_head inode_copy_up_xattr;
  struct hlist_head kernfs_init_security;
  struct hlist_head file_permission;
  struct hlist_head file_alloc_security;
  struct hlist_head file_free_security;
  struct hlist_head file_ioctl;
  struct hlist_head mmap_addr;
  struct hlist_head mmap_file;
  struct hlist_head file_mprotect;
  struct hlist_head file_lock;
  struct hlist_head file_fcntl;
  struct hlist_head file_set_fowner;
  struct hlist_head file_send_sigiotask;
  struct hlist_head file_receive;
  struct hlist_head file_open;
  struct hlist_head task_alloc;
  struct hlist_head task_free;
  struct hlist_head cred_alloc_blank;
  struct hlist_head cred_free;
  struct hlist_head cred_prepare;
  struct hlist_head cred_transfer;
  struct hlist_head cred_getsecid;
  struct hlist_head kernel_act_as;
  struct hlist_head kernel_create_files_as;
  struct hlist_head kernel_module_request;
  struct hlist_head kernel_load_data;
  struct hlist_head kernel_post_load_data;
  struct hlist_head kernel_read_file;
  struct hlist_head kernel_post_read_file;
  struct hlist_head task_fix_setuid;
  struct hlist_head task_fix_setgid;
  struct hlist_head task_setpgid;
  struct hlist_head task_getpgid;
  struct hlist_head task_getsid;
  struct hlist_head task_getsecid_subj;
  struct hlist_head task_getsecid_obj;
  struct hlist_head task_setnice;
  struct hlist_head task_setioprio;
  struct hlist_head task_getioprio;
  struct hlist_head task_prlimit;
  struct hlist_head task_setrlimit;
  struct hlist_head task_setscheduler;
  struct hlist_head task_getscheduler;
  struct hlist_head task_movememory;
  struct hlist_head task_kill;
  struct hlist_head task_prctl;
  struct hlist_head task_to_inode;
  struct hlist_head ipc_permission;
  struct hlist_head ipc_getsecid;
  struct hlist_head msg_msg_alloc_security;
  struct hlist_head msg_msg_free_security;
  struct hlist_head msg_queue_alloc_security;
  struct hlist_head msg_queue_free_security;
  struct hlist_head msg_queue_associate;
  struct hlist_head msg_queue_msgctl;
  struct hlist_head msg_queue_msgsnd;
  struct hlist_head msg_queue_msgrcv;
  struct hlist_head shm_alloc_security;
  struct hlist_head shm_free_security;
  struct hlist_head shm_associate;
  struct hlist_head shm_shmctl;
  struct hlist_head shm_shmat;
  struct hlist_head sem_alloc_security;
  struct hlist_head sem_free_security;
  struct hlist_head sem_associate;
  struct hlist_head sem_semctl;
  struct hlist_head sem_semop;
  struct hlist_head netlink_send;
  struct hlist_head d_instantiate;
  struct hlist_head getprocattr;
  struct hlist_head setprocattr;
  struct hlist_head ismaclabel;
  struct hlist_head secid_to_secctx;
  struct hlist_head secctx_to_secid;
  struct hlist_head release_secctx;
  struct hlist_head inode_invalidate_secctx;
  struct hlist_head inode_notifysecctx;
  struct hlist_head inode_setsecctx;
  struct hlist_head inode_getsecctx;
  struct hlist_head unix_stream_connect;
  struct hlist_head unix_may_send;
  struct hlist_head socket_create;
  struct hlist_head socket_post_create;
  struct hlist_head socket_socketpair;
  struct hlist_head socket_bind;
  struct hlist_head socket_connect;
  struct hlist_head socket_listen;
  struct hlist_head socket_accept;
  struct hlist_head socket_sendmsg;
  struct hlist_head socket_recvmsg;
  struct hlist_head socket_getsockname;
  struct hlist_head socket_getpeername;
  struct hlist_head socket_getsockopt;
  struct hlist_head socket_setsockopt;
  struct hlist_head socket_shutdown;
  struct hlist_head socket_sock_rcv_skb;
  struct hlist_head socket_getpeersec_stream;
  struct hlist_head socket_getpeersec_dgram;
  struct hlist_head sk_alloc_security;
  struct hlist_head sk_free_security;
  struct hlist_head sk_clone_security;
  struct hlist_head sk_getsecid;
  struct hlist_head sock_graft;
  struct hlist_head inet_conn_request;
  struct hlist_head inet_csk_clone;
  struct hlist_head inet_conn_established;
  struct hlist_head secmark_relabel_packet;
  struct hlist_head secmark_refcount_inc;
  struct hlist_head secmark_refcount_dec;
  struct hlist_head req_classify_flow;
  struct hlist_head tun_dev_alloc_security;
  struct hlist_head tun_dev_free_security;
  struct hlist_head tun_dev_create;
  struct hlist_head tun_dev_attach_queue;
  struct hlist_head tun_dev_attach;
  struct hlist_head tun_dev_open;
  struct hlist_head sctp_assoc_request;
  struct hlist_head sctp_bind_connect;
  struct hlist_head sctp_sk_clone;
  struct hlist_head key_alloc;
  struct hlist_head key_free;
  struct hlist_head key_permission;
  struct hlist_head key_getsecurity;
  struct hlist_head audit_rule_init;
  struct hlist_head audit_rule_known;
  struct hlist_head audit_rule_match;
  struct hlist_head audit_rule_free;
  struct hlist_head bpf;
  struct hlist_head bpf_map;
  struct hlist_head bpf_prog;
  struct hlist_head bpf_map_alloc_security;
  struct hlist_head bpf_map_free_security;
  struct hlist_head bpf_prog_alloc_security;
  struct hlist_head bpf_prog_free_security;
  struct hlist_head locked_down;
  struct hlist_head perf_event_open;
  struct hlist_head perf_event_alloc;
  struct hlist_head perf_event_free;
  struct hlist_head perf_event_read;
  struct hlist_head perf_event_write;
};

struct lsm_blob_sizes {
  int lbs_cred;
  int lbs_file;
  int lbs_inode;
  int lbs_ipc;
  int lbs_msg_msg;
  int lbs_task;
};

enum lsm_order {
  LSM_ORDER_FIRST = 4294967295,
  LSM_ORDER_MUTABLE = 0,
};

struct lsm_info {
  const char* name;
  enum lsm_order order;
  long unsigned int flags;
  int* enabled;
  int (*init)();
  struct lsm_blob_sizes* blobs;
};

struct bpf_local_storage_map_bucket {
  struct hlist_head list;
  raw_spinlock_t lock;
};

struct bpf_local_storage_data {
  struct bpf_local_storage_map* smap;
  u8 data[0];
};

struct trace_event_raw_bpf_trace_printk {
  struct trace_entry ent;
  u32 __data_loc_bpf_string;
  char __data[0];
};

struct trace_event_data_offsets_bpf_trace_printk {
  u32 bpf_string;
};

typedef void (*btf_trace_bpf_trace_printk)(void*, const char*);

struct bpf_trace_module {
  struct module* module;
  struct list_head list;
};

typedef u64 (*btf_bpf_override_return)(struct pt_regs*, long unsigned int);

typedef u64 (*btf_bpf_probe_read_user)(void*, u32, const void*);

typedef u64 (*btf_bpf_probe_read_user_str)(void*, u32, const void*);

typedef u64 (*btf_bpf_probe_read_kernel)(void*, u32, const void*);

typedef u64 (*btf_bpf_probe_read_kernel_str)(void*, u32, const void*);

typedef u64 (*btf_bpf_probe_read_compat)(void*, u32, const void*);

typedef u64 (*btf_bpf_probe_read_compat_str)(void*, u32, const void*);

typedef u64 (*btf_bpf_probe_write_user)(void*, const void*, u32);

typedef u64 (*btf_bpf_trace_printk)(char*, u32, u64, u64, u64);

typedef u64 (*btf_bpf_trace_vprintk)(char*, u32, const void*, u32);

typedef u64 (
    *btf_bpf_seq_printf)(struct seq_file*, char*, u32, const void*, u32);

typedef u64 (*btf_bpf_seq_write)(struct seq_file*, const void*, u32);

typedef u64 (
    *btf_bpf_seq_printf_btf)(struct seq_file*, struct btf_ptr*, u32, u64);

typedef u64 (*btf_bpf_perf_event_read)(struct bpf_map*, u64);

typedef u64 (*btf_bpf_perf_event_read_value)(
    struct bpf_map*,
    u64,
    struct bpf_perf_event_value*,
    u32);

struct bpf_trace_sample_data {
  struct perf_sample_data sds[3];
};

typedef u64 (*btf_bpf_perf_event_output)(
    struct pt_regs*,
    struct bpf_map*,
    u64,
    void*,
    u64);

struct bpf_nested_pt_regs {
  struct pt_regs regs[3];
};

typedef u64 (*btf_bpf_get_current_task)();

typedef u64 (*btf_bpf_get_current_task_btf)();

typedef u64 (*btf_bpf_task_pt_regs)(struct task_struct*);

typedef u64 (*btf_bpf_current_task_under_cgroup)(struct bpf_map*, u32);

struct send_signal_irq_work {
  struct irq_work irq_work;
  struct task_struct* task;
  u32 sig;
  enum pid_type type;
};

typedef u64 (*btf_bpf_send_signal)(u32);

typedef u64 (*btf_bpf_send_signal_thread)(u32);

typedef u64 (*btf_bpf_d_path)(struct path*, char*, u32);

typedef u64 (*btf_bpf_snprintf_btf)(char*, u32, struct btf_ptr*, u32, u64);

typedef u64 (*btf_bpf_get_func_ip_tracing)(void*);

typedef u64 (*btf_bpf_get_func_ip_kprobe)(struct pt_regs*);

typedef u64 (*btf_bpf_get_attach_cookie_trace)(void*);

typedef u64 (*btf_bpf_get_attach_cookie_pe)(struct bpf_perf_event_data_kern*);

typedef u64 (*btf_bpf_get_branch_snapshot)(void*, u32, u64);

typedef u64 (
    *btf_bpf_perf_event_output_tp)(void*, struct bpf_map*, u64, void*, u64);

typedef u64 (*btf_bpf_get_stackid_tp)(void*, struct bpf_map*, u64);

typedef u64 (*btf_bpf_get_stack_tp)(void*, void*, u32, u64);

typedef u64 (*btf_bpf_perf_prog_read_value)(
    struct bpf_perf_event_data_kern*,
    struct bpf_perf_event_value*,
    u32);

typedef u64 (*btf_bpf_read_branch_records)(
    struct bpf_perf_event_data_kern*,
    void*,
    u32,
    u64);

struct bpf_raw_tp_regs {
  struct pt_regs regs[3];
};

typedef u64 (*btf_bpf_perf_event_output_raw_tp)(
    struct bpf_raw_tracepoint_args*,
    struct bpf_map*,
    u64,
    void*,
    u64);

typedef u64 (*btf_bpf_get_stackid_raw_tp)(
    struct bpf_raw_tracepoint_args*,
    struct bpf_map*,
    u64);

typedef u64 (*btf_bpf_get_stack_raw_tp)(
    struct bpf_raw_tracepoint_args*,
    void*,
    u32,
    u64);

enum dynevent_type {
  DYNEVENT_TYPE_SYNTH = 1,
  DYNEVENT_TYPE_KPROBE = 2,
  DYNEVENT_TYPE_NONE = 3,
};

struct dynevent_cmd;

typedef int (*dynevent_create_fn_t)(struct dynevent_cmd*);

struct dynevent_cmd {
  struct seq_buf seq;
  const char* event_name;
  unsigned int n_fields;
  enum dynevent_type type;
  dynevent_create_fn_t run_command;
  void* private_data;
};

struct kprobe_trace_entry_head {
  struct trace_entry ent;
  long unsigned int ip;
};

struct kretprobe_trace_entry_head {
  struct trace_entry ent;
  long unsigned int func;
  long unsigned int ret_ip;
};

struct dyn_event;

struct dyn_event_operations {
  struct list_head list;
  int (*create)(const char*);
  int (*show)(struct seq_file*, struct dyn_event*);
  bool (*is_busy)(struct dyn_event*);
  int (*free)(struct dyn_event*);
  bool (*match)(const char*, const char*, int, const char**, struct dyn_event*);
};

struct dyn_event {
  struct list_head list;
  struct dyn_event_operations* ops;
};

struct dynevent_arg {
  const char* str;
  char separator;
};

typedef int (*print_type_func_t)(struct trace_seq*, void*, void*);

enum fetch_op {
  FETCH_OP_NOP = 0,
  FETCH_OP_REG = 1,
  FETCH_OP_STACK = 2,
  FETCH_OP_STACKP = 3,
  FETCH_OP_RETVAL = 4,
  FETCH_OP_IMM = 5,
  FETCH_OP_COMM = 6,
  FETCH_OP_ARG = 7,
  FETCH_OP_FOFFS = 8,
  FETCH_OP_DATA = 9,
  FETCH_OP_DEREF = 10,
  FETCH_OP_UDEREF = 11,
  FETCH_OP_ST_RAW = 12,
  FETCH_OP_ST_MEM = 13,
  FETCH_OP_ST_UMEM = 14,
  FETCH_OP_ST_STRING = 15,
  FETCH_OP_ST_USTRING = 16,
  FETCH_OP_MOD_BF = 17,
  FETCH_OP_LP_ARRAY = 18,
  FETCH_OP_END = 19,
  FETCH_NOP_SYMBOL = 20,
};

struct fetch_insn {
  enum fetch_op op;
  union {
    unsigned int param;
    struct {
      unsigned int size;
      int offset;
    };
    struct {
      unsigned char basesize;
      unsigned char lshift;
      unsigned char rshift;
    };
    long unsigned int immediate;
    void* data;
  };
};

struct fetch_type {
  const char* name;
  size_t size;
  int is_signed;
  print_type_func_t print;
  const char* fmt;
  const char* fmttype;
};

struct probe_arg {
  struct fetch_insn* code;
  bool dynamic;
  unsigned int offset;
  unsigned int count;
  const char* name;
  const char* comm;
  char* fmt;
  const struct fetch_type* type;
};

struct trace_uprobe_filter {
  rwlock_t rwlock;
  int nr_systemwide;
  struct list_head perf_events;
};

struct trace_probe_event {
  unsigned int flags;
  struct trace_event_class class;
  struct trace_event_call call;
  struct list_head files;
  struct list_head probes;
  struct trace_uprobe_filter filter[0];
};

struct trace_probe {
  struct list_head list;
  struct trace_probe_event* event;
  ssize_t size;
  unsigned int nr_args;
  struct probe_arg args[0];
};

struct event_file_link {
  struct trace_event_file* file;
  struct list_head list;
};

enum {
  TP_ERR_FILE_NOT_FOUND = 0,
  TP_ERR_NO_REGULAR_FILE = 1,
  TP_ERR_BAD_REFCNT = 2,
  TP_ERR_REFCNT_OPEN_BRACE = 3,
  TP_ERR_BAD_REFCNT_SUFFIX = 4,
  TP_ERR_BAD_UPROBE_OFFS = 5,
  TP_ERR_MAXACT_NO_KPROBE = 6,
  TP_ERR_BAD_MAXACT = 7,
  TP_ERR_MAXACT_TOO_BIG = 8,
  TP_ERR_BAD_PROBE_ADDR = 9,
  TP_ERR_BAD_RETPROBE = 10,
  TP_ERR_BAD_ADDR_SUFFIX = 11,
  TP_ERR_NO_GROUP_NAME = 12,
  TP_ERR_GROUP_TOO_LONG = 13,
  TP_ERR_BAD_GROUP_NAME = 14,
  TP_ERR_NO_EVENT_NAME = 15,
  TP_ERR_EVENT_TOO_LONG = 16,
  TP_ERR_BAD_EVENT_NAME = 17,
  TP_ERR_RETVAL_ON_PROBE = 18,
  TP_ERR_BAD_STACK_NUM = 19,
  TP_ERR_BAD_ARG_NUM = 20,
  TP_ERR_BAD_VAR = 21,
  TP_ERR_BAD_REG_NAME = 22,
  TP_ERR_BAD_MEM_ADDR = 23,
  TP_ERR_BAD_IMM = 24,
  TP_ERR_IMMSTR_NO_CLOSE = 25,
  TP_ERR_FILE_ON_KPROBE = 26,
  TP_ERR_BAD_FILE_OFFS = 27,
  TP_ERR_SYM_ON_UPROBE = 28,
  TP_ERR_TOO_MANY_OPS = 29,
  TP_ERR_DEREF_NEED_BRACE = 30,
  TP_ERR_BAD_DEREF_OFFS = 31,
  TP_ERR_DEREF_OPEN_BRACE = 32,
  TP_ERR_COMM_CANT_DEREF = 33,
  TP_ERR_BAD_FETCH_ARG = 34,
  TP_ERR_ARRAY_NO_CLOSE = 35,
  TP_ERR_BAD_ARRAY_SUFFIX = 36,
  TP_ERR_BAD_ARRAY_NUM = 37,
  TP_ERR_ARRAY_TOO_BIG = 38,
  TP_ERR_BAD_TYPE = 39,
  TP_ERR_BAD_STRING = 40,
  TP_ERR_BAD_BITFIELD = 41,
  TP_ERR_ARG_NAME_TOO_LONG = 42,
  TP_ERR_NO_ARG_NAME = 43,
  TP_ERR_BAD_ARG_NAME = 44,
  TP_ERR_USED_ARG_NAME = 45,
  TP_ERR_ARG_TOO_LONG = 46,
  TP_ERR_NO_ARG_BODY = 47,
  TP_ERR_BAD_INSN_BNDRY = 48,
  TP_ERR_FAIL_REG_PROBE = 49,
  TP_ERR_DIFF_PROBE_TYPE = 50,
  TP_ERR_DIFF_ARG_TYPE = 51,
  TP_ERR_SAME_PROBE = 52,
};

struct trace_kprobe {
  struct dyn_event devent;
  struct kretprobe rp;
  long unsigned int* nhit;
  const char* symbol;
  struct trace_probe tp;
};

enum error_detector {
  ERROR_DETECTOR_KFENCE = 0,
  ERROR_DETECTOR_KASAN = 1,
};

struct trace_event_raw_error_report_template {
  struct trace_entry ent;
  enum error_detector error_detector;
  long unsigned int id;
  char __data[0];
};

struct trace_event_data_offsets_error_report_template {};

typedef void (
    *btf_trace_error_report_end)(void*, enum error_detector, long unsigned int);

struct trace_event_raw_cpu {
  struct trace_entry ent;
  u32 state;
  u32 cpu_id;
  char __data[0];
};

struct trace_event_raw_powernv_throttle {
  struct trace_entry ent;
  int chip_id;
  u32 __data_loc_reason;
  int pmax;
  char __data[0];
};

struct trace_event_raw_pstate_sample {
  struct trace_entry ent;
  u32 core_busy;
  u32 scaled_busy;
  u32 from;
  u32 to;
  u64 mperf;
  u64 aperf;
  u64 tsc;
  u32 freq;
  u32 io_boost;
  char __data[0];
};

struct trace_event_raw_cpu_frequency_limits {
  struct trace_entry ent;
  u32 min_freq;
  u32 max_freq;
  u32 cpu_id;
  char __data[0];
};

struct trace_event_raw_device_pm_callback_start {
  struct trace_entry ent;
  u32 __data_loc_device;
  u32 __data_loc_driver;
  u32 __data_loc_parent;
  u32 __data_loc_pm_ops;
  int event;
  char __data[0];
};

struct trace_event_raw_device_pm_callback_end {
  struct trace_entry ent;
  u32 __data_loc_device;
  u32 __data_loc_driver;
  int error;
  char __data[0];
};

struct trace_event_raw_suspend_resume {
  struct trace_entry ent;
  const char* action;
  int val;
  bool start;
  char __data[0];
};

struct trace_event_raw_wakeup_source {
  struct trace_entry ent;
  u32 __data_loc_name;
  u64 state;
  char __data[0];
};

struct trace_event_raw_clock {
  struct trace_entry ent;
  u32 __data_loc_name;
  u64 state;
  u64 cpu_id;
  char __data[0];
};

struct trace_event_raw_power_domain {
  struct trace_entry ent;
  u32 __data_loc_name;
  u64 state;
  u64 cpu_id;
  char __data[0];
};

struct trace_event_raw_cpu_latency_qos_request {
  struct trace_entry ent;
  s32 value;
  char __data[0];
};

struct trace_event_raw_pm_qos_update {
  struct trace_entry ent;
  enum pm_qos_req_action action;
  int prev_value;
  int curr_value;
  char __data[0];
};

struct trace_event_raw_dev_pm_qos_request {
  struct trace_entry ent;
  u32 __data_loc_name;
  enum dev_pm_qos_req_type type;
  s32 new_value;
  char __data[0];
};

struct trace_event_data_offsets_cpu {};

struct trace_event_data_offsets_powernv_throttle {
  u32 reason;
};

struct trace_event_data_offsets_pstate_sample {};

struct trace_event_data_offsets_cpu_frequency_limits {};

struct trace_event_data_offsets_device_pm_callback_start {
  u32 device;
  u32 driver;
  u32 parent;
  u32 pm_ops;
};

struct trace_event_data_offsets_device_pm_callback_end {
  u32 device;
  u32 driver;
};

struct trace_event_data_offsets_suspend_resume {};

struct trace_event_data_offsets_wakeup_source {
  u32 name;
};

struct trace_event_data_offsets_clock {
  u32 name;
};

struct trace_event_data_offsets_power_domain {
  u32 name;
};

struct trace_event_data_offsets_cpu_latency_qos_request {};

struct trace_event_data_offsets_pm_qos_update {};

struct trace_event_data_offsets_dev_pm_qos_request {
  u32 name;
};

typedef void (*btf_trace_cpu_idle)(void*, unsigned int, unsigned int);

typedef void (*btf_trace_powernv_throttle)(void*, int, const char*, int);

typedef void (*btf_trace_pstate_sample)(
    void*,
    u32,
    u32,
    u32,
    u32,
    u64,
    u64,
    u64,
    u32,
    u32);

typedef void (*btf_trace_cpu_frequency)(void*, unsigned int, unsigned int);

typedef void (*btf_trace_cpu_frequency_limits)(void*, struct cpufreq_policy*);

typedef void (*btf_trace_device_pm_callback_start)(
    void*,
    struct device*,
    const char*,
    int);

typedef void (*btf_trace_device_pm_callback_end)(void*, struct device*, int);

typedef void (*btf_trace_suspend_resume)(void*, const char*, int, bool);

typedef void (
    *btf_trace_wakeup_source_activate)(void*, const char*, unsigned int);

typedef void (
    *btf_trace_wakeup_source_deactivate)(void*, const char*, unsigned int);

typedef void (
    *btf_trace_clock_enable)(void*, const char*, unsigned int, unsigned int);

typedef void (
    *btf_trace_clock_disable)(void*, const char*, unsigned int, unsigned int);

typedef void (
    *btf_trace_clock_set_rate)(void*, const char*, unsigned int, unsigned int);

typedef void (*btf_trace_power_domain_target)(
    void*,
    const char*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_pm_qos_add_request)(void*, s32);

typedef void (*btf_trace_pm_qos_update_request)(void*, s32);

typedef void (*btf_trace_pm_qos_remove_request)(void*, s32);

typedef void (
    *btf_trace_pm_qos_update_target)(void*, enum pm_qos_req_action, int, int);

typedef void (
    *btf_trace_pm_qos_update_flags)(void*, enum pm_qos_req_action, int, int);

typedef void (*btf_trace_dev_pm_qos_add_request)(
    void*,
    const char*,
    enum dev_pm_qos_req_type,
    s32);

typedef void (*btf_trace_dev_pm_qos_update_request)(
    void*,
    const char*,
    enum dev_pm_qos_req_type,
    s32);

typedef void (*btf_trace_dev_pm_qos_remove_request)(
    void*,
    const char*,
    enum dev_pm_qos_req_type,
    s32);

typedef int (*dynevent_check_arg_fn_t)(void*);

struct dynevent_arg_pair {
  const char* lhs;
  const char* rhs;
  char operator;
  char separator;
};

struct trace_probe_log {
  const char* subsystem;
  const char** argv;
  int argc;
  int index;
};

enum uprobe_filter_ctx {
  UPROBE_FILTER_REGISTER = 0,
  UPROBE_FILTER_UNREGISTER = 1,
  UPROBE_FILTER_MMAP = 2,
};

struct uprobe_consumer {
  int (*handler)(struct uprobe_consumer*, struct pt_regs*);
  int (*ret_handler)(
      struct uprobe_consumer*,
      long unsigned int,
      struct pt_regs*);
  bool (*filter)(
      struct uprobe_consumer*,
      enum uprobe_filter_ctx,
      struct mm_struct*);
  struct uprobe_consumer* next;
};

struct uprobe_trace_entry_head {
  struct trace_entry ent;
  long unsigned int vaddr[0];
};

struct trace_uprobe {
  struct dyn_event devent;
  struct uprobe_consumer consumer;
  struct path path;
  struct inode* inode;
  char* filename;
  long unsigned int offset;
  long unsigned int ref_ctr_offset;
  long unsigned int nhit;
  struct trace_probe tp;
};

struct uprobe_dispatch_data {
  struct trace_uprobe* tu;
  long unsigned int bp_addr;
};

struct uprobe_cpu_buffer {
  struct mutex mutex;
  void* buf;
};

typedef bool (*filter_func_t)(
    struct uprobe_consumer*,
    enum uprobe_filter_ctx,
    struct mm_struct*);

struct rhash_lock_head;

struct bucket_table {
  unsigned int size;
  unsigned int nest;
  u32 hash_rnd;
  struct list_head walkers;
  struct callback_head rcu;
  struct bucket_table* future_tbl;
  struct lockdep_map dep_map;
  long : 64;
  struct rhash_lock_head* buckets[0];
};

struct rnd_state {
  __u32 s1;
  __u32 s2;
  __u32 s3;
  __u32 s4;
};

enum xdp_action {
  XDP_ABORTED = 0,
  XDP_DROP = 1,
  XDP_PASS = 2,
  XDP_TX = 3,
  XDP_REDIRECT = 4,
};

typedef sockptr_t bpfptr_t;

struct bpf_verifier_log {
  u32 level;
  char kbuf[1024];
  char* ubuf;
  u32 len_used;
  u32 len_total;
};

struct bpf_subprog_info {
  u32 start;
  u32 linfo_idx;
  u16 stack_depth;
  bool has_tail_call;
  bool tail_call_reachable;
  bool has_ld_abs;
  bool is_async_cb;
};

struct bpf_id_pair {
  u32 old;
  u32 cur;
};

struct bpf_verifier_stack_elem;

struct bpf_verifier_state;

struct bpf_verifier_state_list;

struct bpf_insn_aux_data;

struct bpf_verifier_env {
  u32 insn_idx;
  u32 prev_insn_idx;
  struct bpf_prog* prog;
  const struct bpf_verifier_ops* ops;
  struct bpf_verifier_stack_elem* head;
  int stack_size;
  bool strict_alignment;
  bool test_state_freq;
  struct bpf_verifier_state* cur_state;
  struct bpf_verifier_state_list** explored_states;
  struct bpf_verifier_state_list* free_list;
  struct bpf_map* used_maps[64];
  struct btf_mod_pair used_btfs[64];
  u32 used_map_cnt;
  u32 used_btf_cnt;
  u32 id_gen;
  bool explore_alu_limits;
  bool allow_ptr_leaks;
  bool allow_uninit_stack;
  bool allow_ptr_to_map_access;
  bool bpf_capable;
  bool bypass_spec_v1;
  bool bypass_spec_v4;
  bool seen_direct_write;
  struct bpf_insn_aux_data* insn_aux_data;
  const struct bpf_line_info* prev_linfo;
  struct bpf_verifier_log log;
  struct bpf_subprog_info subprog_info[257];
  struct bpf_id_pair idmap_scratch[75];
  struct {
    int* insn_state;
    int* insn_stack;
    int cur_stack;
  } cfg;
  u32 pass_cnt;
  u32 subprog_cnt;
  u32 prev_insn_processed;
  u32 insn_processed;
  u32 prev_jmps_processed;
  u32 jmps_processed;
  u64 verification_time;
  u32 max_states_per_insn;
  u32 total_states;
  u32 peak_states;
  u32 longest_mark_read_walk;
  bpfptr_t fd_array;
};

struct tnum {
  u64 value;
  u64 mask;
};

enum bpf_reg_liveness {
  REG_LIVE_NONE = 0,
  REG_LIVE_READ32 = 1,
  REG_LIVE_READ64 = 2,
  REG_LIVE_READ = 3,
  REG_LIVE_WRITTEN = 4,
  REG_LIVE_DONE = 8,
};

struct bpf_reg_state {
  enum bpf_reg_type type;
  s32 off;
  union {
    int range;
    struct {
      struct bpf_map* map_ptr;
      u32 map_uid;
    };
    struct {
      struct btf* btf;
      u32 btf_id;
    };
    u32 mem_size;
    struct {
      long unsigned int raw1;
      long unsigned int raw2;
    } raw;
    u32 subprogno;
  };
  u32 id;
  u32 ref_obj_id;
  struct tnum var_off;
  s64 smin_value;
  s64 smax_value;
  u64 umin_value;
  u64 umax_value;
  s32 s32_min_value;
  s32 s32_max_value;
  u32 u32_min_value;
  u32 u32_max_value;
  struct bpf_reg_state* parent;
  u32 frameno;
  s32 subreg_def;
  enum bpf_reg_liveness live;
  bool precise;
};

struct bpf_reference_state;

struct bpf_stack_state;

struct bpf_func_state {
  struct bpf_reg_state regs[11];
  int callsite;
  u32 frameno;
  u32 subprogno;
  u32 async_entry_cnt;
  bool in_callback_fn;
  bool in_async_callback_fn;
  int acquired_refs;
  struct bpf_reference_state* refs;
  int allocated_stack;
  struct bpf_stack_state* stack;
};

enum xdp_mem_type {
  MEM_TYPE_PAGE_SHARED = 0,
  MEM_TYPE_PAGE_ORDER0 = 1,
  MEM_TYPE_PAGE_POOL = 2,
  MEM_TYPE_XSK_BUFF_POOL = 3,
  MEM_TYPE_MAX = 4,
};

struct xdp_cpumap_stats {
  unsigned int redirect;
  unsigned int pass;
  unsigned int drop;
};

typedef void (*bpf_jit_fill_hole_t)(void*, unsigned int);

struct bpf_stack_state {
  struct bpf_reg_state spilled_ptr;
  u8 slot_type[8];
};

struct bpf_reference_state {
  int id;
  int insn_idx;
};

struct bpf_idx_pair {
  u32 prev_idx;
  u32 idx;
};

struct bpf_verifier_state {
  struct bpf_func_state* frame[8];
  struct bpf_verifier_state* parent;
  u32 branches;
  u32 insn_idx;
  u32 curframe;
  u32 active_spin_lock;
  bool speculative;
  u32 first_insn_idx;
  u32 last_insn_idx;
  struct bpf_idx_pair* jmp_history;
  u32 jmp_history_cnt;
};

struct bpf_verifier_state_list {
  struct bpf_verifier_state state;
  struct bpf_verifier_state_list* next;
  int miss_cnt;
  int hit_cnt;
};

struct bpf_insn_aux_data {
  union {
    enum bpf_reg_type ptr_type;
    long unsigned int map_ptr_state;
    s32 call_imm;
    u32 alu_limit;
    struct {
      u32 map_index;
      u32 map_off;
    };
    struct {
      enum bpf_reg_type reg_type;
      union {
        struct {
          struct btf* btf;
          u32 btf_id;
        };
        u32 mem_size;
      };
    } btf_var;
  };
  u64 map_key_state;
  int ctx_field_size;
  u32 seen;
  bool sanitize_stack_spill;
  bool zext_dst;
  u8 alu_state;
  unsigned int orig_idx;
  bool prune_point;
};

struct bpf_prog_dummy {
  struct bpf_prog prog;
};

typedef u64 (*btf_bpf_user_rnd_u32)();

typedef u64 (*btf_bpf_get_raw_cpu_id)();

struct _bpf_dtab_netdev {
  struct net_device* dev;
};

struct rhash_lock_head {};

struct zero_copy_allocator;

struct page_pool;

struct xdp_mem_allocator {
  struct xdp_mem_info mem;
  union {
    void* allocator;
    struct page_pool* page_pool;
    struct zero_copy_allocator* zc_alloc;
  };
  struct rhash_head node;
  struct callback_head rcu;
};

struct trace_event_raw_xdp_exception {
  struct trace_entry ent;
  int prog_id;
  u32 act;
  int ifindex;
  char __data[0];
};

struct trace_event_raw_xdp_bulk_tx {
  struct trace_entry ent;
  int ifindex;
  u32 act;
  int drops;
  int sent;
  int err;
  char __data[0];
};

struct trace_event_raw_xdp_redirect_template {
  struct trace_entry ent;
  int prog_id;
  u32 act;
  int ifindex;
  int err;
  int to_ifindex;
  u32 map_id;
  int map_index;
  char __data[0];
};

struct trace_event_raw_xdp_cpumap_kthread {
  struct trace_entry ent;
  int map_id;
  u32 act;
  int cpu;
  unsigned int drops;
  unsigned int processed;
  int sched;
  unsigned int xdp_pass;
  unsigned int xdp_drop;
  unsigned int xdp_redirect;
  char __data[0];
};

struct trace_event_raw_xdp_cpumap_enqueue {
  struct trace_entry ent;
  int map_id;
  u32 act;
  int cpu;
  unsigned int drops;
  unsigned int processed;
  int to_cpu;
  char __data[0];
};

struct trace_event_raw_xdp_devmap_xmit {
  struct trace_entry ent;
  int from_ifindex;
  u32 act;
  int to_ifindex;
  int drops;
  int sent;
  int err;
  char __data[0];
};

struct trace_event_raw_mem_disconnect {
  struct trace_entry ent;
  const struct xdp_mem_allocator* xa;
  u32 mem_id;
  u32 mem_type;
  const void* allocator;
  char __data[0];
};

struct trace_event_raw_mem_connect {
  struct trace_entry ent;
  const struct xdp_mem_allocator* xa;
  u32 mem_id;
  u32 mem_type;
  const void* allocator;
  const struct xdp_rxq_info* rxq;
  int ifindex;
  char __data[0];
};

struct trace_event_raw_mem_return_failed {
  struct trace_entry ent;
  const struct page* page;
  u32 mem_id;
  u32 mem_type;
  char __data[0];
};

struct trace_event_data_offsets_xdp_exception {};

struct trace_event_data_offsets_xdp_bulk_tx {};

struct trace_event_data_offsets_xdp_redirect_template {};

struct trace_event_data_offsets_xdp_cpumap_kthread {};

struct trace_event_data_offsets_xdp_cpumap_enqueue {};

struct trace_event_data_offsets_xdp_devmap_xmit {};

struct trace_event_data_offsets_mem_disconnect {};

struct trace_event_data_offsets_mem_connect {};

struct trace_event_data_offsets_mem_return_failed {};

typedef void (*btf_trace_xdp_exception)(
    void*,
    const struct net_device*,
    const struct bpf_prog*,
    u32);

typedef void (
    *btf_trace_xdp_bulk_tx)(void*, const struct net_device*, int, int, int);

typedef void (*btf_trace_xdp_redirect)(
    void*,
    const struct net_device*,
    const struct bpf_prog*,
    const void*,
    int,
    enum bpf_map_type,
    u32,
    u32);

typedef void (*btf_trace_xdp_redirect_err)(
    void*,
    const struct net_device*,
    const struct bpf_prog*,
    const void*,
    int,
    enum bpf_map_type,
    u32,
    u32);

typedef void (*btf_trace_xdp_redirect_map)(
    void*,
    const struct net_device*,
    const struct bpf_prog*,
    const void*,
    int,
    enum bpf_map_type,
    u32,
    u32);

typedef void (*btf_trace_xdp_redirect_map_err)(
    void*,
    const struct net_device*,
    const struct bpf_prog*,
    const void*,
    int,
    enum bpf_map_type,
    u32,
    u32);

typedef void (*btf_trace_xdp_cpumap_kthread)(
    void*,
    int,
    unsigned int,
    unsigned int,
    int,
    struct xdp_cpumap_stats*);

typedef void (
    *btf_trace_xdp_cpumap_enqueue)(void*, int, unsigned int, unsigned int, int);

typedef void (*btf_trace_xdp_devmap_xmit)(
    void*,
    const struct net_device*,
    const struct net_device*,
    int,
    int,
    int);

typedef void (
    *btf_trace_mem_disconnect)(void*, const struct xdp_mem_allocator*);

typedef void (*btf_trace_mem_connect)(
    void*,
    const struct xdp_mem_allocator*,
    const struct xdp_rxq_info*);

typedef void (*btf_trace_mem_return_failed)(
    void*,
    const struct xdp_mem_info*,
    const struct page*);

enum bpf_cmd {
  BPF_MAP_CREATE = 0,
  BPF_MAP_LOOKUP_ELEM = 1,
  BPF_MAP_UPDATE_ELEM = 2,
  BPF_MAP_DELETE_ELEM = 3,
  BPF_MAP_GET_NEXT_KEY = 4,
  BPF_PROG_LOAD = 5,
  BPF_OBJ_PIN = 6,
  BPF_OBJ_GET = 7,
  BPF_PROG_ATTACH = 8,
  BPF_PROG_DETACH = 9,
  BPF_PROG_TEST_RUN = 10,
  BPF_PROG_RUN = 10,
  BPF_PROG_GET_NEXT_ID = 11,
  BPF_MAP_GET_NEXT_ID = 12,
  BPF_PROG_GET_FD_BY_ID = 13,
  BPF_MAP_GET_FD_BY_ID = 14,
  BPF_OBJ_GET_INFO_BY_FD = 15,
  BPF_PROG_QUERY = 16,
  BPF_RAW_TRACEPOINT_OPEN = 17,
  BPF_BTF_LOAD = 18,
  BPF_BTF_GET_FD_BY_ID = 19,
  BPF_TASK_FD_QUERY = 20,
  BPF_MAP_LOOKUP_AND_DELETE_ELEM = 21,
  BPF_MAP_FREEZE = 22,
  BPF_BTF_GET_NEXT_ID = 23,
  BPF_MAP_LOOKUP_BATCH = 24,
  BPF_MAP_LOOKUP_AND_DELETE_BATCH = 25,
  BPF_MAP_UPDATE_BATCH = 26,
  BPF_MAP_DELETE_BATCH = 27,
  BPF_LINK_CREATE = 28,
  BPF_LINK_UPDATE = 29,
  BPF_LINK_GET_FD_BY_ID = 30,
  BPF_LINK_GET_NEXT_ID = 31,
  BPF_ENABLE_STATS = 32,
  BPF_ITER_CREATE = 33,
  BPF_LINK_DETACH = 34,
  BPF_PROG_BIND_MAP = 35,
};

enum {
  BPF_ANY = 0,
  BPF_NOEXIST = 1,
  BPF_EXIST = 2,
  BPF_F_LOCK = 4,
};

enum {
  BPF_F_NO_PREALLOC = 1,
  BPF_F_NO_COMMON_LRU = 2,
  BPF_F_NUMA_NODE = 4,
  BPF_F_RDONLY = 8,
  BPF_F_WRONLY = 16,
  BPF_F_STACK_BUILD_ID = 32,
  BPF_F_ZERO_SEED = 64,
  BPF_F_RDONLY_PROG = 128,
  BPF_F_WRONLY_PROG = 256,
  BPF_F_CLONE = 512,
  BPF_F_MMAPABLE = 1024,
  BPF_F_PRESERVE_ELEMS = 2048,
  BPF_F_INNER_MAP = 4096,
};

enum bpf_stats_type {
  BPF_STATS_RUN_TIME = 0,
};

struct bpf_prog_info {
  __u32 type;
  __u32 id;
  __u8 tag[8];
  __u32 jited_prog_len;
  __u32 xlated_prog_len;
  __u64 jited_prog_insns;
  __u64 xlated_prog_insns;
  __u64 load_time;
  __u32 created_by_uid;
  __u32 nr_map_ids;
  __u64 map_ids;
  char name[16];
  __u32 ifindex;
  __u32 gpl_compatible : 1;
  __u64 netns_dev;
  __u64 netns_ino;
  __u32 nr_jited_ksyms;
  __u32 nr_jited_func_lens;
  __u64 jited_ksyms;
  __u64 jited_func_lens;
  __u32 btf_id;
  __u32 func_info_rec_size;
  __u64 func_info;
  __u32 nr_func_info;
  __u32 nr_line_info;
  __u64 line_info;
  __u64 jited_line_info;
  __u32 nr_jited_line_info;
  __u32 line_info_rec_size;
  __u32 jited_line_info_rec_size;
  __u32 nr_prog_tags;
  __u64 prog_tags;
  __u64 run_time_ns;
  __u64 run_cnt;
  __u64 recursion_misses;
};

struct bpf_map_info {
  __u32 type;
  __u32 id;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;
  char name[16];
  __u32 ifindex;
  __u32 btf_vmlinux_value_type_id;
  __u64 netns_dev;
  __u64 netns_ino;
  __u32 btf_id;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
};

struct bpf_btf_info {
  __u64 btf;
  __u32 btf_size;
  __u32 id;
  __u64 name;
  __u32 name_len;
  __u32 kernel_btf;
};

struct bpf_spin_lock {
  __u32 val;
};

struct bpf_timer {
  long : 64;
  long : 64;
};

struct bpf_attach_target_info {
  struct btf_func_model fmodel;
  long int tgt_addr;
  const char* tgt_name;
  const struct btf_type* tgt_type;
};

struct bpf_link_primer {
  struct bpf_link* link;
  struct file* file;
  int fd;
  u32 id;
};

enum perf_bpf_event_type {
  PERF_BPF_EVENT_UNKNOWN = 0,
  PERF_BPF_EVENT_PROG_LOAD = 1,
  PERF_BPF_EVENT_PROG_UNLOAD = 2,
  PERF_BPF_EVENT_MAX = 3,
};

enum bpf_audit {
  BPF_AUDIT_LOAD = 0,
  BPF_AUDIT_UNLOAD = 1,
  BPF_AUDIT_MAX = 2,
};

struct bpf_tracing_link {
  struct bpf_link link;
  enum bpf_attach_type attach_type;
  struct bpf_trampoline* trampoline;
  struct bpf_prog* tgt_prog;
};

struct bpf_raw_tp_link {
  struct bpf_link link;
  struct bpf_raw_event_map* btp;
};

struct bpf_perf_link {
  struct bpf_link link;
  struct file* perf_file;
};

typedef u64 (*btf_bpf_sys_bpf)(int, void*, u32);

typedef u64 (*btf_bpf_sys_close)(u32);

enum {
  BTF_KIND_UNKN = 0,
  BTF_KIND_INT = 1,
  BTF_KIND_PTR = 2,
  BTF_KIND_ARRAY = 3,
  BTF_KIND_STRUCT = 4,
  BTF_KIND_UNION = 5,
  BTF_KIND_ENUM = 6,
  BTF_KIND_FWD = 7,
  BTF_KIND_TYPEDEF = 8,
  BTF_KIND_VOLATILE = 9,
  BTF_KIND_CONST = 10,
  BTF_KIND_RESTRICT = 11,
  BTF_KIND_FUNC = 12,
  BTF_KIND_FUNC_PROTO = 13,
  BTF_KIND_VAR = 14,
  BTF_KIND_DATASEC = 15,
  BTF_KIND_FLOAT = 16,
  BTF_KIND_TAG = 17,
  NR_BTF_KINDS = 18,
  BTF_KIND_MAX = 17,
};

struct btf_member {
  __u32 name_off;
  __u32 type;
  __u32 offset;
};

struct btf_param {
  __u32 name_off;
  __u32 type;
};

enum btf_func_linkage {
  BTF_FUNC_STATIC = 0,
  BTF_FUNC_GLOBAL = 1,
  BTF_FUNC_EXTERN = 2,
};

struct btf_var_secinfo {
  __u32 type;
  __u32 offset;
  __u32 size;
};

enum sk_action {
  SK_DROP = 0,
  SK_PASS = 1,
};

struct bpf_kfunc_desc {
  struct btf_func_model func_model;
  u32 func_id;
  s32 imm;
  u16 offset;
};

struct bpf_kfunc_desc_tab {
  struct bpf_kfunc_desc descs[256];
  u32 nr_descs;
};

struct bpf_kfunc_btf {
  struct btf* btf;
  struct module* module;
  u16 offset;
};

struct bpf_kfunc_btf_tab {
  struct bpf_kfunc_btf descs[256];
  u32 nr_descs;
};

struct bpf_struct_ops {
  const struct bpf_verifier_ops* verifier_ops;
  int (*init)(struct btf*);
  int (*check_member)(const struct btf_type*, const struct btf_member*);
  int (*init_member)(
      const struct btf_type*,
      const struct btf_member*,
      void*,
      const void*);
  int (*reg)(void*);
  void (*unreg)(void*);
  const struct btf_type* type;
  const struct btf_type* value_type;
  const char* name;
  struct btf_func_model func_models[64];
  u32 type_id;
  u32 value_id;
};

typedef u32 (*bpf_convert_ctx_access_t)(
    enum bpf_access_type,
    const struct bpf_insn*,
    struct bpf_insn*,
    struct bpf_prog*,
    u32*);

enum bpf_stack_slot_type {
  STACK_INVALID = 0,
  STACK_SPILL = 1,
  STACK_MISC = 2,
  STACK_ZERO = 3,
};

struct bpf_verifier_stack_elem {
  struct bpf_verifier_state st;
  int insn_idx;
  int prev_insn_idx;
  struct bpf_verifier_stack_elem* next;
  u32 log_pos;
};

enum {
  BTF_SOCK_TYPE_INET = 0,
  BTF_SOCK_TYPE_INET_CONN = 1,
  BTF_SOCK_TYPE_INET_REQ = 2,
  BTF_SOCK_TYPE_INET_TW = 3,
  BTF_SOCK_TYPE_REQ = 4,
  BTF_SOCK_TYPE_SOCK = 5,
  BTF_SOCK_TYPE_SOCK_COMMON = 6,
  BTF_SOCK_TYPE_TCP = 7,
  BTF_SOCK_TYPE_TCP_REQ = 8,
  BTF_SOCK_TYPE_TCP_TW = 9,
  BTF_SOCK_TYPE_TCP6 = 10,
  BTF_SOCK_TYPE_UDP = 11,
  BTF_SOCK_TYPE_UDP6 = 12,
  BTF_SOCK_TYPE_UNIX = 13,
  MAX_BTF_SOCK_TYPE = 14,
};

typedef void (*bpf_insn_print_t)(void*, const char*, ...);

typedef const char* (*bpf_insn_revmap_call_t)(void*, const struct bpf_insn*);

typedef const char* (
    *bpf_insn_print_imm_t)(void*, const struct bpf_insn*, __u64);

struct bpf_insn_cbs {
  bpf_insn_print_t cb_print;
  bpf_insn_revmap_call_t cb_call;
  bpf_insn_print_imm_t cb_imm;
  void* private_data;
};

struct bpf_call_arg_meta {
  struct bpf_map* map_ptr;
  bool raw_mode;
  bool pkt_access;
  int regno;
  int access_size;
  int mem_size;
  u64 msize_max_value;
  int ref_obj_id;
  int map_uid;
  int func_id;
  struct btf* btf;
  u32 btf_id;
  struct btf* ret_btf;
  u32 ret_btf_id;
  u32 subprogno;
};

enum reg_arg_type {
  SRC_OP = 0,
  DST_OP = 1,
  DST_OP_NO_MARK = 2,
};

enum stack_access_src {
  ACCESS_DIRECT = 1,
  ACCESS_HELPER = 2,
};

struct bpf_reg_types {
  const enum bpf_reg_type types[10];
  u32* btf_id;
};

enum {
  AT_PKT_END = 4294967295,
  BEYOND_PKT_END = 4294967294,
};

typedef int (*set_callee_state_fn)(
    struct bpf_verifier_env*,
    struct bpf_func_state*,
    struct bpf_func_state*,
    int);

enum {
  REASON_BOUNDS = 4294967295,
  REASON_TYPE = 4294967294,
  REASON_PATHS = 4294967293,
  REASON_LIMIT = 4294967292,
  REASON_STACK = 4294967291,
};

struct bpf_sanitize_info {
  struct bpf_insn_aux_data aux;
  bool mask_to_left;
};

enum {
  DISCOVERED = 16,
  EXPLORED = 32,
  FALLTHROUGH = 1,
  BRANCH = 2,
};

enum {
  DONE_EXPLORING = 0,
  KEEP_EXPLORING = 1,
};

struct tree_descr {
  const char* name;
  const struct file_operations* ops;
  int mode;
};

struct bpf_preload_info {
  char link_name[16];
  int link_id;
};

struct bpf_preload_ops {
  struct umd_info info;
  int (*preload)(struct bpf_preload_info*);
  int (*finish)();
  struct module* owner;
};

enum bpf_type {
  BPF_TYPE_UNSPEC = 0,
  BPF_TYPE_PROG = 1,
  BPF_TYPE_MAP = 2,
  BPF_TYPE_LINK = 3,
};

struct map_iter {
  void* key;
  bool done;
};

enum {
  OPT_MODE = 0,
};

struct bpf_mount_opts {
  umode_t mode;
};

struct bpf_pidns_info {
  __u32 pid;
  __u32 tgid;
};

struct bpf_cg_run_ctx {
  struct bpf_run_ctx run_ctx;
  const struct bpf_prog_array_item* prog_item;
};

typedef u64 (*btf_bpf_map_lookup_elem)(struct bpf_map*, void*);

typedef u64 (*btf_bpf_map_update_elem)(struct bpf_map*, void*, void*, u64);

typedef u64 (*btf_bpf_map_delete_elem)(struct bpf_map*, void*);

typedef u64 (*btf_bpf_map_push_elem)(struct bpf_map*, void*, u64);

typedef u64 (*btf_bpf_map_pop_elem)(struct bpf_map*, void*);

typedef u64 (*btf_bpf_map_peek_elem)(struct bpf_map*, void*);

typedef u64 (*btf_bpf_get_smp_processor_id)();

typedef u64 (*btf_bpf_get_numa_node_id)();

typedef u64 (*btf_bpf_ktime_get_ns)();

typedef u64 (*btf_bpf_ktime_get_boot_ns)();

typedef u64 (*btf_bpf_ktime_get_coarse_ns)();

typedef u64 (*btf_bpf_get_current_pid_tgid)();

typedef u64 (*btf_bpf_get_current_uid_gid)();

typedef u64 (*btf_bpf_get_current_comm)(char*, u32);

typedef u64 (*btf_bpf_spin_lock)(struct bpf_spin_lock*);

typedef u64 (*btf_bpf_spin_unlock)(struct bpf_spin_lock*);

typedef u64 (*btf_bpf_jiffies64)();

typedef u64 (*btf_bpf_get_current_cgroup_id)();

typedef u64 (*btf_bpf_get_current_ancestor_cgroup_id)(int);

typedef u64 (*btf_bpf_get_local_storage)(struct bpf_map*, u64);

typedef u64 (*btf_bpf_strtol)(const char*, size_t, u64, long int*);

typedef u64 (*btf_bpf_strtoul)(const char*, size_t, u64, long unsigned int*);

typedef u64 (
    *btf_bpf_get_ns_current_pid_tgid)(u64, u64, struct bpf_pidns_info*, u32);

typedef u64 (
    *btf_bpf_event_output_data)(void*, struct bpf_map*, u64, void*, u64);

typedef u64 (*btf_bpf_copy_from_user)(void*, u32, const void*);

typedef u64 (*btf_bpf_per_cpu_ptr)(const void*, u32);

typedef u64 (*btf_bpf_this_cpu_ptr)(const void*);

struct bpf_bprintf_buffers {
  char tmp_bufs[1536];
};

typedef u64 (*btf_bpf_snprintf)(char*, u32, char*, const void*, u32);

struct bpf_hrtimer {
  struct hrtimer timer;
  struct bpf_map* map;
  struct bpf_prog* prog;
  void* callback_fn;
  void* value;
};

struct bpf_timer_kern {
  struct bpf_hrtimer* timer;
  struct bpf_spin_lock lock;
};

typedef u64 (*btf_bpf_timer_init)(struct bpf_timer_kern*, struct bpf_map*, u64);

typedef u64 (*btf_bpf_timer_set_callback)(
    struct bpf_timer_kern*,
    void*,
    struct bpf_prog_aux*);

typedef u64 (*btf_bpf_timer_start)(struct bpf_timer_kern*, u64, u64);

typedef u64 (*btf_bpf_timer_cancel)(struct bpf_timer_kern*);

union bpf_iter_link_info {
  struct {
    __u32 map_fd;
  } map;
};

typedef int (*bpf_iter_attach_target_t)(
    struct bpf_prog*,
    union bpf_iter_link_info*,
    struct bpf_iter_aux_info*);

typedef void (*bpf_iter_detach_target_t)(struct bpf_iter_aux_info*);

typedef void (
    *bpf_iter_show_fdinfo_t)(const struct bpf_iter_aux_info*, struct seq_file*);

typedef int (*bpf_iter_fill_link_info_t)(
    const struct bpf_iter_aux_info*,
    struct bpf_link_info*);

typedef const struct bpf_func_proto* (
    *bpf_iter_get_func_proto_t)(enum bpf_func_id, const struct bpf_prog*);

enum bpf_iter_feature {
  BPF_ITER_RESCHED = 1,
};

struct bpf_iter_reg {
  const char* target;
  bpf_iter_attach_target_t attach_target;
  bpf_iter_detach_target_t detach_target;
  bpf_iter_show_fdinfo_t show_fdinfo;
  bpf_iter_fill_link_info_t fill_link_info;
  bpf_iter_get_func_proto_t get_func_proto;
  u32 ctx_arg_info_size;
  u32 feature;
  struct bpf_ctx_arg_aux ctx_arg_info[2];
  const struct bpf_iter_seq_info* seq_info;
};

struct bpf_iter_meta {
  union {
    struct seq_file* seq;
  };
  u64 session_id;
  u64 seq_num;
};

struct bpf_iter_target_info {
  struct list_head list;
  const struct bpf_iter_reg* reg_info;
  u32 btf_id;
};

struct bpf_iter_link {
  struct bpf_link link;
  struct bpf_iter_aux_info aux;
  struct bpf_iter_target_info* tinfo;
};

struct bpf_iter_priv_data {
  struct bpf_iter_target_info* tinfo;
  const struct bpf_iter_seq_info* seq_info;
  struct bpf_prog* prog;
  u64 session_id;
  u64 seq_num;
  bool done_stop;
  long : 56;
  u8 target_private[0];
};

typedef u64 (*btf_bpf_for_each_map_elem)(struct bpf_map*, void*, void*, u64);

struct bpf_iter_seq_map_info {
  u32 map_id;
};

struct bpf_iter__bpf_map {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct bpf_map* map;
  };
};

struct bpf_iter_seq_task_common {
  struct pid_namespace* ns;
};

struct bpf_iter_seq_task_info {
  struct bpf_iter_seq_task_common common;
  u32 tid;
};

struct bpf_iter__task {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct task_struct* task;
  };
};

struct bpf_iter_seq_task_file_info {
  struct bpf_iter_seq_task_common common;
  struct task_struct* task;
  u32 tid;
  u32 fd;
};

struct bpf_iter__task_file {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct task_struct* task;
  };
  u32 fd;
  union {
    struct file* file;
  };
};

struct bpf_iter_seq_task_vma_info {
  struct bpf_iter_seq_task_common common;
  struct task_struct* task;
  struct vm_area_struct* vma;
  u32 tid;
  long unsigned int prev_vm_start;
  long unsigned int prev_vm_end;
};

enum bpf_task_vma_iter_find_op {
  task_vma_iter_first_vma = 0,
  task_vma_iter_next_vma = 1,
  task_vma_iter_find_vma = 2,
};

struct bpf_iter__task_vma {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct task_struct* task;
  };
  union {
    struct vm_area_struct* vma;
  };
};

struct bpf_iter_seq_prog_info {
  u32 prog_id;
};

struct bpf_iter__bpf_prog {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct bpf_prog* prog;
  };
};

struct bpf_iter__bpf_map_elem {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct bpf_map* map;
  };
  union {
    void* key;
  };
  union {
    void* value;
  };
};

struct pcpu_freelist_node;

struct pcpu_freelist_head {
  struct pcpu_freelist_node* first;
  raw_spinlock_t lock;
};

struct pcpu_freelist_node {
  struct pcpu_freelist_node* next;
};

struct pcpu_freelist {
  struct pcpu_freelist_head* freelist;
  struct pcpu_freelist_head extralist;
};

struct bpf_lru_node {
  struct list_head list;
  u16 cpu;
  u8 type;
  u8 ref;
};

struct bpf_lru_list {
  struct list_head lists[3];
  unsigned int counts[2];
  struct list_head* next_inactive_rotation;
  raw_spinlock_t lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_lru_locallist {
  struct list_head lists[2];
  u16 next_steal;
  raw_spinlock_t lock;
};

struct bpf_common_lru {
  struct bpf_lru_list lru_list;
  struct bpf_lru_locallist* local_list;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

typedef bool (*del_from_htab_func)(void*, struct bpf_lru_node*);

struct bpf_lru {
  union {
    struct bpf_common_lru common_lru;
    struct bpf_lru_list* percpu_lru;
  };
  del_from_htab_func del_from_htab;
  void* del_arg;
  unsigned int hash_offset;
  unsigned int nr_scans;
  bool percpu;
  long : 56;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bucket {
  struct hlist_nulls_head head;
  union {
    raw_spinlock_t raw_lock;
    spinlock_t lock;
  };
};

struct htab_elem;

struct bpf_htab {
  struct bpf_map map;
  struct bucket* buckets;
  void* elems;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  union {
    struct pcpu_freelist freelist;
    struct bpf_lru lru;
  };
  struct htab_elem** extra_elems;
  atomic_t count;
  u32 n_buckets;
  u32 elem_size;
  u32 hashrnd;
  struct lock_class_key lockdep_key;
  int* map_locked[8];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct htab_elem {
  union {
    struct hlist_nulls_node hash_node;
    struct {
      void* padding;
      union {
        struct bpf_htab* htab;
        struct pcpu_freelist_node fnode;
        struct htab_elem* batch_flink;
      };
    };
  };
  union {
    struct callback_head rcu;
    struct bpf_lru_node lru_node;
  };
  u32 hash;
  int : 32;
  char key[0];
};

struct bpf_iter_seq_hash_map_info {
  struct bpf_map* map;
  struct bpf_htab* htab;
  void* percpu_value_buf;
  u32 bucket_id;
  u32 skip_elems;
};

struct bpf_iter_seq_array_map_info {
  struct bpf_map* map;
  void* percpu_value_buf;
  u32 index;
};

struct prog_poke_elem {
  struct list_head list;
  struct bpf_prog_aux* aux;
};

enum bpf_lru_list_type {
  BPF_LRU_LIST_T_ACTIVE = 0,
  BPF_LRU_LIST_T_INACTIVE = 1,
  BPF_LRU_LIST_T_FREE = 2,
  BPF_LRU_LOCAL_LIST_T_FREE = 3,
  BPF_LRU_LOCAL_LIST_T_PENDING = 4,
};

struct bpf_lpm_trie_key {
  __u32 prefixlen;
  __u8 data[0];
};

struct lpm_trie_node {
  struct callback_head rcu;
  struct lpm_trie_node* child[2];
  u32 prefixlen;
  u32 flags;
  u8 data[0];
};

struct lpm_trie {
  struct bpf_map map;
  struct lpm_trie_node* root;
  size_t n_entries;
  size_t max_prefixlen;
  size_t data_size;
  spinlock_t lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_cgroup_storage_map {
  struct bpf_map map;
  spinlock_t lock;
  struct rb_root root;
  struct list_head list;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_queue_stack {
  struct bpf_map map;
  raw_spinlock_t lock;
  u32 head;
  u32 tail;
  u32 size;
  char elements[0];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum {
  BPF_RB_NO_WAKEUP = 1,
  BPF_RB_FORCE_WAKEUP = 2,
};

enum {
  BPF_RB_AVAIL_DATA = 0,
  BPF_RB_RING_SIZE = 1,
  BPF_RB_CONS_POS = 2,
  BPF_RB_PROD_POS = 3,
};

enum {
  BPF_RINGBUF_BUSY_BIT = 2147483648,
  BPF_RINGBUF_DISCARD_BIT = 1073741824,
  BPF_RINGBUF_HDR_SZ = 8,
};

struct bpf_ringbuf {
  wait_queue_head_t waitq;
  struct irq_work work;
  u64 mask;
  struct page** pages;
  int nr_pages;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t spinlock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long unsigned int consumer_pos;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long unsigned int producer_pos;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  char data[0];
};

struct bpf_ringbuf_map {
  struct bpf_map map;
  struct bpf_ringbuf* rb;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_ringbuf_hdr {
  u32 len;
  u32 pg_off;
};

typedef u64 (*btf_bpf_ringbuf_reserve)(struct bpf_map*, u64, u64);

typedef u64 (*btf_bpf_ringbuf_submit)(void*, u64);

typedef u64 (*btf_bpf_ringbuf_discard)(void*, u64);

typedef u64 (*btf_bpf_ringbuf_output)(struct bpf_map*, void*, u64, u64);

typedef u64 (*btf_bpf_ringbuf_query)(struct bpf_map*, u64);

struct bpf_local_storage_elem {
  struct hlist_node map_node;
  struct hlist_node snode;
  struct bpf_local_storage* local_storage;
  struct callback_head rcu;
  long : 64;
  struct bpf_local_storage_data sdata;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_local_storage_cache {
  spinlock_t idx_lock;
  u64 idx_usage_counts[16];
};

enum {
  BPF_LOCAL_STORAGE_GET_F_CREATE = 1,
  BPF_SK_STORAGE_GET_F_CREATE = 1,
};

typedef u64 (*btf_bpf_task_storage_get)(
    struct bpf_map*,
    struct task_struct*,
    void*,
    u64);

typedef u64 (
    *btf_bpf_task_storage_delete)(struct bpf_map*, struct task_struct*);

struct bpf_storage_blob {
  struct bpf_local_storage* storage;
};

typedef u64 (
    *btf_bpf_inode_storage_get)(struct bpf_map*, struct inode*, void*, u64);

typedef u64 (*btf_bpf_inode_storage_delete)(struct bpf_map*, struct inode*);

struct btf_enum {
  __u32 name_off;
  __s32 val;
};

struct btf_array {
  __u32 type;
  __u32 index_type;
  __u32 nelems;
};

enum {
  BTF_VAR_STATIC = 0,
  BTF_VAR_GLOBAL_ALLOCATED = 1,
  BTF_VAR_GLOBAL_EXTERN = 2,
};

struct btf_var {
  __u32 linkage;
};

struct btf_tag {
  __s32 component_idx;
};

struct bpf_flow_keys {
  __u16 nhoff;
  __u16 thoff;
  __u16 addr_proto;
  __u8 is_frag;
  __u8 is_first_frag;
  __u8 is_encap;
  __u8 ip_proto;
  __be16 n_proto;
  __be16 sport;
  __be16 dport;
  union {
    struct {
      __be32 ipv4_src;
      __be32 ipv4_dst;
    };
    struct {
      __u32 ipv6_src[4];
      __u32 ipv6_dst[4];
    };
  };
  __u32 flags;
  __be32 flow_label;
};

struct bpf_sock {
  __u32 bound_dev_if;
  __u32 family;
  __u32 type;
  __u32 protocol;
  __u32 mark;
  __u32 priority;
  __u32 src_ip4;
  __u32 src_ip6[4];
  __u32 src_port;
  __u32 dst_port;
  __u32 dst_ip4;
  __u32 dst_ip6[4];
  __u32 state;
  __s32 rx_queue_mapping;
};

struct __sk_buff {
  __u32 len;
  __u32 pkt_type;
  __u32 mark;
  __u32 queue_mapping;
  __u32 protocol;
  __u32 vlan_present;
  __u32 vlan_tci;
  __u32 vlan_proto;
  __u32 priority;
  __u32 ingress_ifindex;
  __u32 ifindex;
  __u32 tc_index;
  __u32 cb[5];
  __u32 hash;
  __u32 tc_classid;
  __u32 data;
  __u32 data_end;
  __u32 napi_id;
  __u32 family;
  __u32 remote_ip4;
  __u32 local_ip4;
  __u32 remote_ip6[4];
  __u32 local_ip6[4];
  __u32 remote_port;
  __u32 local_port;
  __u32 data_meta;
  union {
    struct bpf_flow_keys* flow_keys;
  };
  __u64 tstamp;
  __u32 wire_len;
  __u32 gso_segs;
  union {
    struct bpf_sock* sk;
  };
  __u32 gso_size;
  __u64 hwtstamp;
};

struct xdp_md {
  __u32 data;
  __u32 data_end;
  __u32 data_meta;
  __u32 ingress_ifindex;
  __u32 rx_queue_index;
  __u32 egress_ifindex;
};

struct sk_msg_md {
  union {
    void* data;
  };
  union {
    void* data_end;
  };
  __u32 family;
  __u32 remote_ip4;
  __u32 local_ip4;
  __u32 remote_ip6[4];
  __u32 local_ip6[4];
  __u32 remote_port;
  __u32 local_port;
  __u32 size;
  union {
    struct bpf_sock* sk;
  };
};

struct sk_reuseport_md {
  union {
    void* data;
  };
  union {
    void* data_end;
  };
  __u32 len;
  __u32 eth_protocol;
  __u32 ip_protocol;
  __u32 bind_inany;
  __u32 hash;
  union {
    struct bpf_sock* sk;
  };
  union {
    struct bpf_sock* migrating_sk;
  };
};

struct bpf_sock_addr {
  __u32 user_family;
  __u32 user_ip4;
  __u32 user_ip6[4];
  __u32 user_port;
  __u32 family;
  __u32 type;
  __u32 protocol;
  __u32 msg_src_ip4;
  __u32 msg_src_ip6[4];
  union {
    struct bpf_sock* sk;
  };
};

struct bpf_sock_ops {
  __u32 op;
  union {
    __u32 args[4];
    __u32 reply;
    __u32 replylong[4];
  };
  __u32 family;
  __u32 remote_ip4;
  __u32 local_ip4;
  __u32 remote_ip6[4];
  __u32 local_ip6[4];
  __u32 remote_port;
  __u32 local_port;
  __u32 is_fullsock;
  __u32 snd_cwnd;
  __u32 srtt_us;
  __u32 bpf_sock_ops_cb_flags;
  __u32 state;
  __u32 rtt_min;
  __u32 snd_ssthresh;
  __u32 rcv_nxt;
  __u32 snd_nxt;
  __u32 snd_una;
  __u32 mss_cache;
  __u32 ecn_flags;
  __u32 rate_delivered;
  __u32 rate_interval_us;
  __u32 packets_out;
  __u32 retrans_out;
  __u32 total_retrans;
  __u32 segs_in;
  __u32 data_segs_in;
  __u32 segs_out;
  __u32 data_segs_out;
  __u32 lost_out;
  __u32 sacked_out;
  __u32 sk_txhash;
  __u64 bytes_received;
  __u64 bytes_acked;
  union {
    struct bpf_sock* sk;
  };
  union {
    void* skb_data;
  };
  union {
    void* skb_data_end;
  };
  __u32 skb_len;
  __u32 skb_tcp_flags;
};

struct bpf_cgroup_dev_ctx {
  __u32 access_type;
  __u32 major;
  __u32 minor;
};

struct bpf_sysctl {
  __u32 write;
  __u32 file_pos;
};

struct bpf_sockopt {
  union {
    struct bpf_sock* sk;
  };
  union {
    void* optval;
  };
  union {
    void* optval_end;
  };
  __s32 level;
  __s32 optname;
  __s32 optlen;
  __s32 retval;
};

struct bpf_sk_lookup {
  union {
    union {
      struct bpf_sock* sk;
    };
    __u64 cookie;
  };
  __u32 family;
  __u32 protocol;
  __u32 remote_ip4;
  __u32 remote_ip6[4];
  __u32 remote_port;
  __u32 local_ip4;
  __u32 local_ip6[4];
  __u32 local_port;
};

struct sk_reuseport_kern {
  struct sk_buff* skb;
  struct sock* sk;
  struct sock* selected_sk;
  struct sock* migrating_sk;
  void* data_end;
  u32 hash;
  u32 reuseport_id;
  bool bind_inany;
};

struct kfunc_btf_id_set {
  struct list_head list;
  struct btf_id_set* set;
  struct module* owner;
};

struct kfunc_btf_id_list___2 {
  struct list_head list;
  struct mutex mutex;
};

struct bpf_flow_dissector {
  struct bpf_flow_keys* flow_keys;
  const struct sk_buff* skb;
  const void* data;
  const void* data_end;
};

struct inet_listen_hashbucket {
  spinlock_t lock;
  unsigned int count;
  union {
    struct hlist_head head;
    struct hlist_nulls_head nulls_head;
  };
};

struct inet_ehash_bucket;

struct inet_bind_hashbucket;

struct inet_hashinfo {
  struct inet_ehash_bucket* ehash;
  spinlock_t* ehash_locks;
  unsigned int ehash_mask;
  unsigned int ehash_locks_mask;
  struct kmem_cache* bind_bucket_cachep;
  struct inet_bind_hashbucket* bhash;
  unsigned int bhash_size;
  unsigned int lhash2_mask;
  struct inet_listen_hashbucket* lhash2;
  long : 64;
  struct inet_listen_hashbucket listening_hash[32];
};

struct ip_ra_chain {
  struct ip_ra_chain* next;
  struct sock* sk;
  union {
    void (*destructor)(struct sock*);
    struct sock* saved_sk;
  };
  struct callback_head rcu;
};

struct fib_table {
  struct hlist_node tb_hlist;
  u32 tb_id;
  int tb_num_default;
  struct callback_head rcu;
  long unsigned int* tb_data;
  long unsigned int __data[0];
};

struct inet_peer_base {
  struct rb_root rb_root;
  seqlock_t lock;
  int total;
};

struct tcp_fastopen_context {
  siphash_key_t key[2];
  int num;
  struct callback_head rcu;
};

struct in_addr {
  __be32 s_addr;
};

struct bpf_sock_addr_kern {
  struct sock* sk;
  struct sockaddr* uaddr;
  u64 tmp_reg;
  void* t_ctx;
};

struct bpf_sock_ops_kern {
  struct sock* sk;
  union {
    u32 args[4];
    u32 reply;
    u32 replylong[4];
  };
  struct sk_buff* syn_skb;
  struct sk_buff* skb;
  void* skb_data_end;
  u8 op;
  u8 is_fullsock;
  u8 remaining_opt_len;
  u64 temp;
};

struct bpf_sysctl_kern {
  struct ctl_table_header* head;
  struct ctl_table* table;
  void* cur_val;
  size_t cur_len;
  void* new_val;
  size_t new_len;
  int new_updated;
  int write;
  loff_t* ppos;
  u64 tmp_reg;
};

struct bpf_sockopt_kern {
  struct sock* sk;
  u8* optval;
  u8* optval_end;
  s32 level;
  s32 optname;
  s32 optlen;
  s32 retval;
};

struct bpf_sk_lookup_kern {
  u16 family;
  u16 protocol;
  __be16 sport;
  u16 dport;
  struct {
    __be32 saddr;
    __be32 daddr;
  } v4;
  struct {
    const struct in6_addr* saddr;
    const struct in6_addr* daddr;
  } v6;
  struct sock* selected_sk;
  bool no_reuseport;
};

struct lwtunnel_state {
  __u16 type;
  __u16 flags;
  __u16 headroom;
  atomic_t refcnt;
  int (*orig_output)(struct net*, struct sock*, struct sk_buff*);
  int (*orig_input)(struct sk_buff*);
  struct callback_head rcu;
  __u8 data[0];
};

struct sock_reuseport {
  struct callback_head rcu;
  u16 max_socks;
  u16 num_socks;
  u16 num_closed_socks;
  unsigned int synq_overflow_ts;
  unsigned int reuseport_id;
  unsigned int bind_inany : 1;
  unsigned int has_conns : 1;
  struct bpf_prog* prog;
  struct sock* socks[0];
};

struct sk_psock_progs {
  struct bpf_prog* msg_parser;
  struct bpf_prog* stream_parser;
  struct bpf_prog* stream_verdict;
  struct bpf_prog* skb_verdict;
};

struct strp_stats {
  long long unsigned int msgs;
  long long unsigned int bytes;
  unsigned int mem_fail;
  unsigned int need_more_hdr;
  unsigned int msg_too_big;
  unsigned int msg_timeouts;
  unsigned int bad_hdr_len;
};

struct strparser;

struct strp_callbacks {
  int (*parse_msg)(struct strparser*, struct sk_buff*);
  void (*rcv_msg)(struct strparser*, struct sk_buff*);
  int (*read_sock_done)(struct strparser*, int);
  void (*abort_parser)(struct strparser*, int);
  void (*lock)(struct strparser*);
  void (*unlock)(struct strparser*);
};

struct strparser {
  struct sock* sk;
  u32 stopped : 1;
  u32 paused : 1;
  u32 aborted : 1;
  u32 interrupted : 1;
  u32 unrecov_intr : 1;
  struct sk_buff** skb_nextp;
  struct sk_buff* skb_head;
  unsigned int need_bytes;
  struct delayed_work msg_timer_work;
  struct work_struct work;
  struct strp_stats stats;
  struct strp_callbacks cb;
};

struct sk_psock_work_state {
  struct sk_buff* skb;
  u32 len;
  u32 off;
};

struct sk_msg;

struct sk_psock {
  struct sock* sk;
  struct sock* sk_redir;
  u32 apply_bytes;
  u32 cork_bytes;
  u32 eval;
  struct sk_msg* cork;
  struct sk_psock_progs progs;
  struct strparser strp;
  struct sk_buff_head ingress_skb;
  struct list_head ingress_msg;
  spinlock_t ingress_lock;
  long unsigned int state;
  struct list_head link;
  spinlock_t link_lock;
  refcount_t refcnt;
  void (*saved_unhash)(struct sock*);
  void (*saved_close)(struct sock*, long int);
  void (*saved_write_space)(struct sock*);
  void (*saved_data_ready)(struct sock*);
  int (*psock_update_sk_prot)(struct sock*, struct sk_psock*, bool);
  struct proto* sk_proto;
  struct mutex work_mutex;
  struct sk_psock_work_state work_state;
  struct work_struct work;
  struct rcu_work rwork;
};

struct inet_connection_sock_af_ops {
  int (*queue_xmit)(struct sock*, struct sk_buff*, struct flowi*);
  void (*send_check)(struct sock*, struct sk_buff*);
  int (*rebuild_header)(struct sock*);
  void (*sk_rx_dst_set)(struct sock*, const struct sk_buff*);
  int (*conn_request)(struct sock*, struct sk_buff*);
  struct sock* (*syn_recv_sock)(
      const struct sock*,
      struct sk_buff*,
      struct request_sock*,
      struct dst_entry*,
      struct request_sock*,
      bool*);
  u16 net_header_len;
  u16 net_frag_header_len;
  u16 sockaddr_len;
  int (*setsockopt)(struct sock*, int, int, sockptr_t, unsigned int);
  int (*getsockopt)(struct sock*, int, int, char*, int*);
  void (*addr2sockaddr)(struct sock*, struct sockaddr*);
  void (*mtu_reduced)(struct sock*);
};

struct tcp_fastopen_cookie {
  __le64 val[2];
  s8 len;
  bool exp;
};

enum tcp_synack_type {
  TCP_SYNACK_NORMAL = 0,
  TCP_SYNACK_FASTOPEN = 1,
  TCP_SYNACK_COOKIE = 2,
};

struct tcp_md5sig_key;

struct tcp_request_sock_ops {
  u16 mss_clamp;
  struct tcp_md5sig_key* (
      *req_md5_lookup)(const struct sock*, const struct sock*);
  int (*calc_md5_hash)(
      char*,
      const struct tcp_md5sig_key*,
      const struct sock*,
      const struct sk_buff*);
  __u32 (*cookie_init_seq)(const struct sk_buff*, __u16*);
  struct dst_entry* (*route_req)(
      const struct sock*,
      struct sk_buff*,
      struct flowi*,
      struct request_sock*);
  u32 (*init_seq)(const struct sk_buff*);
  u32 (*init_ts_off)(const struct net*, const struct sk_buff*);
  int (*send_synack)(
      const struct sock*,
      struct dst_entry*,
      struct flowi*,
      struct request_sock*,
      struct tcp_fastopen_cookie*,
      enum tcp_synack_type,
      struct sk_buff*);
};

union tcp_md5_addr {
  struct in_addr a4;
  struct in6_addr a6;
};

struct tcp_md5sig_key {
  struct hlist_node node;
  u8 keylen;
  u8 family;
  u8 prefixlen;
  union tcp_md5_addr addr;
  int l3index;
  u8 key[80];
  struct callback_head rcu;
};

struct ip_rt_acct {
  __u32 o_bytes;
  __u32 o_packets;
  __u32 i_bytes;
  __u32 i_packets;
};

struct inet_ehash_bucket {
  struct hlist_nulls_head chain;
};

struct inet_bind_hashbucket {
  spinlock_t lock;
  struct hlist_head chain;
};

struct ack_sample {
  u32 pkts_acked;
  s32 rtt_us;
  u32 in_flight;
};

struct rate_sample {
  u64 prior_mstamp;
  u32 prior_delivered;
  s32 delivered;
  long int interval_us;
  u32 snd_interval_us;
  u32 rcv_interval_us;
  long int rtt_us;
  int losses;
  u32 acked_sacked;
  u32 prior_in_flight;
  bool is_app_limited;
  bool is_retrans;
  bool is_ack_delayed;
};

struct sk_msg_sg {
  u32 start;
  u32 curr;
  u32 end;
  u32 size;
  u32 copybreak;
  long unsigned int copy;
  struct scatterlist data[19];
};

struct sk_msg {
  struct sk_msg_sg sg;
  void* data;
  void* data_end;
  u32 apply_bytes;
  u32 cork_bytes;
  u32 flags;
  struct sk_buff* skb;
  struct sock* sk_redir;
  struct sock* sk;
  struct list_head list;
};

enum verifier_phase {
  CHECK_META = 0,
  CHECK_TYPE = 1,
};

struct resolve_vertex {
  const struct btf_type* t;
  u32 type_id;
  u16 next_member;
};

enum visit_state {
  NOT_VISITED = 0,
  VISITED = 1,
  RESOLVED = 2,
};

enum resolve_mode {
  RESOLVE_TBD = 0,
  RESOLVE_PTR = 1,
  RESOLVE_STRUCT_OR_ARRAY = 2,
};

struct btf_sec_info {
  u32 off;
  u32 len;
};

struct btf_verifier_env {
  struct btf* btf;
  u8* visit_states;
  struct resolve_vertex stack[32];
  struct bpf_verifier_log log;
  u32 log_type_id;
  u32 top_stack;
  enum verifier_phase phase;
  enum resolve_mode resolve_mode;
};

struct btf_show {
  u64 flags;
  void* target;
  void (*showfn)(struct btf_show*, const char*, struct __va_list_tag*);
  const struct btf* btf;
  struct {
    u8 depth;
    u8 depth_to_show;
    u8 depth_check;
    u8 array_member : 1;
    u8 array_terminated : 1;
    u16 array_encoding;
    u32 type_id;
    int status;
    const struct btf_type* type;
    const struct btf_member* member;
    char name[80];
  } state;
  struct {
    u32 size;
    void* head;
    void* data;
    u8 safe[32];
  } obj;
};

struct btf_kind_operations {
  s32 (*check_meta)(struct btf_verifier_env*, const struct btf_type*, u32);
  int (*resolve)(struct btf_verifier_env*, const struct resolve_vertex*);
  int (*check_member)(
      struct btf_verifier_env*,
      const struct btf_type*,
      const struct btf_member*,
      const struct btf_type*);
  int (*check_kflag_member)(
      struct btf_verifier_env*,
      const struct btf_type*,
      const struct btf_member*,
      const struct btf_type*);
  void (*log_details)(struct btf_verifier_env*, const struct btf_type*);
  void (*show)(
      const struct btf*,
      const struct btf_type*,
      u32,
      void*,
      u8,
      struct btf_show*);
};

struct bpf_ctx_convert {
  struct __sk_buff BPF_PROG_TYPE_SOCKET_FILTER_prog;
  struct sk_buff BPF_PROG_TYPE_SOCKET_FILTER_kern;
  struct __sk_buff BPF_PROG_TYPE_SCHED_CLS_prog;
  struct sk_buff BPF_PROG_TYPE_SCHED_CLS_kern;
  struct __sk_buff BPF_PROG_TYPE_SCHED_ACT_prog;
  struct sk_buff BPF_PROG_TYPE_SCHED_ACT_kern;
  struct xdp_md BPF_PROG_TYPE_XDP_prog;
  struct xdp_buff BPF_PROG_TYPE_XDP_kern;
  struct __sk_buff BPF_PROG_TYPE_CGROUP_SKB_prog;
  struct sk_buff BPF_PROG_TYPE_CGROUP_SKB_kern;
  struct bpf_sock BPF_PROG_TYPE_CGROUP_SOCK_prog;
  struct sock BPF_PROG_TYPE_CGROUP_SOCK_kern;
  struct bpf_sock_addr BPF_PROG_TYPE_CGROUP_SOCK_ADDR_prog;
  struct bpf_sock_addr_kern BPF_PROG_TYPE_CGROUP_SOCK_ADDR_kern;
  struct __sk_buff BPF_PROG_TYPE_LWT_IN_prog;
  struct sk_buff BPF_PROG_TYPE_LWT_IN_kern;
  struct __sk_buff BPF_PROG_TYPE_LWT_OUT_prog;
  struct sk_buff BPF_PROG_TYPE_LWT_OUT_kern;
  struct __sk_buff BPF_PROG_TYPE_LWT_XMIT_prog;
  struct sk_buff BPF_PROG_TYPE_LWT_XMIT_kern;
  struct __sk_buff BPF_PROG_TYPE_LWT_SEG6LOCAL_prog;
  struct sk_buff BPF_PROG_TYPE_LWT_SEG6LOCAL_kern;
  struct bpf_sock_ops BPF_PROG_TYPE_SOCK_OPS_prog;
  struct bpf_sock_ops_kern BPF_PROG_TYPE_SOCK_OPS_kern;
  struct __sk_buff BPF_PROG_TYPE_SK_SKB_prog;
  struct sk_buff BPF_PROG_TYPE_SK_SKB_kern;
  struct sk_msg_md BPF_PROG_TYPE_SK_MSG_prog;
  struct sk_msg BPF_PROG_TYPE_SK_MSG_kern;
  struct __sk_buff BPF_PROG_TYPE_FLOW_DISSECTOR_prog;
  struct bpf_flow_dissector BPF_PROG_TYPE_FLOW_DISSECTOR_kern;
  bpf_user_pt_regs_t BPF_PROG_TYPE_KPROBE_prog;
  struct pt_regs BPF_PROG_TYPE_KPROBE_kern;
  __u64 BPF_PROG_TYPE_TRACEPOINT_prog;
  u64 BPF_PROG_TYPE_TRACEPOINT_kern;
  struct bpf_perf_event_data BPF_PROG_TYPE_PERF_EVENT_prog;
  struct bpf_perf_event_data_kern BPF_PROG_TYPE_PERF_EVENT_kern;
  struct bpf_raw_tracepoint_args BPF_PROG_TYPE_RAW_TRACEPOINT_prog;
  u64 BPF_PROG_TYPE_RAW_TRACEPOINT_kern;
  struct bpf_raw_tracepoint_args BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE_prog;
  u64 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE_kern;
  void* BPF_PROG_TYPE_TRACING_prog;
  void* BPF_PROG_TYPE_TRACING_kern;
  struct bpf_cgroup_dev_ctx BPF_PROG_TYPE_CGROUP_DEVICE_prog;
  struct bpf_cgroup_dev_ctx BPF_PROG_TYPE_CGROUP_DEVICE_kern;
  struct bpf_sysctl BPF_PROG_TYPE_CGROUP_SYSCTL_prog;
  struct bpf_sysctl_kern BPF_PROG_TYPE_CGROUP_SYSCTL_kern;
  struct bpf_sockopt BPF_PROG_TYPE_CGROUP_SOCKOPT_prog;
  struct bpf_sockopt_kern BPF_PROG_TYPE_CGROUP_SOCKOPT_kern;
  struct sk_reuseport_md BPF_PROG_TYPE_SK_REUSEPORT_prog;
  struct sk_reuseport_kern BPF_PROG_TYPE_SK_REUSEPORT_kern;
  struct bpf_sk_lookup BPF_PROG_TYPE_SK_LOOKUP_prog;
  struct bpf_sk_lookup_kern BPF_PROG_TYPE_SK_LOOKUP_kern;
  void* BPF_PROG_TYPE_STRUCT_OPS_prog;
  void* BPF_PROG_TYPE_STRUCT_OPS_kern;
  void* BPF_PROG_TYPE_EXT_prog;
  void* BPF_PROG_TYPE_EXT_kern;
  void* BPF_PROG_TYPE_LSM_prog;
  void* BPF_PROG_TYPE_LSM_kern;
  void* BPF_PROG_TYPE_SYSCALL_prog;
  void* BPF_PROG_TYPE_SYSCALL_kern;
};

enum {
  __ctx_convertBPF_PROG_TYPE_SOCKET_FILTER = 0,
  __ctx_convertBPF_PROG_TYPE_SCHED_CLS = 1,
  __ctx_convertBPF_PROG_TYPE_SCHED_ACT = 2,
  __ctx_convertBPF_PROG_TYPE_XDP = 3,
  __ctx_convertBPF_PROG_TYPE_CGROUP_SKB = 4,
  __ctx_convertBPF_PROG_TYPE_CGROUP_SOCK = 5,
  __ctx_convertBPF_PROG_TYPE_CGROUP_SOCK_ADDR = 6,
  __ctx_convertBPF_PROG_TYPE_LWT_IN = 7,
  __ctx_convertBPF_PROG_TYPE_LWT_OUT = 8,
  __ctx_convertBPF_PROG_TYPE_LWT_XMIT = 9,
  __ctx_convertBPF_PROG_TYPE_LWT_SEG6LOCAL = 10,
  __ctx_convertBPF_PROG_TYPE_SOCK_OPS = 11,
  __ctx_convertBPF_PROG_TYPE_SK_SKB = 12,
  __ctx_convertBPF_PROG_TYPE_SK_MSG = 13,
  __ctx_convertBPF_PROG_TYPE_FLOW_DISSECTOR = 14,
  __ctx_convertBPF_PROG_TYPE_KPROBE = 15,
  __ctx_convertBPF_PROG_TYPE_TRACEPOINT = 16,
  __ctx_convertBPF_PROG_TYPE_PERF_EVENT = 17,
  __ctx_convertBPF_PROG_TYPE_RAW_TRACEPOINT = 18,
  __ctx_convertBPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 19,
  __ctx_convertBPF_PROG_TYPE_TRACING = 20,
  __ctx_convertBPF_PROG_TYPE_CGROUP_DEVICE = 21,
  __ctx_convertBPF_PROG_TYPE_CGROUP_SYSCTL = 22,
  __ctx_convertBPF_PROG_TYPE_CGROUP_SOCKOPT = 23,
  __ctx_convertBPF_PROG_TYPE_SK_REUSEPORT = 24,
  __ctx_convertBPF_PROG_TYPE_SK_LOOKUP = 25,
  __ctx_convertBPF_PROG_TYPE_STRUCT_OPS = 26,
  __ctx_convertBPF_PROG_TYPE_EXT = 27,
  __ctx_convertBPF_PROG_TYPE_LSM = 28,
  __ctx_convertBPF_PROG_TYPE_SYSCALL = 29,
  __ctx_convert_unused = 30,
};

enum bpf_struct_walk_result {
  WALK_SCALAR = 0,
  WALK_PTR = 1,
  WALK_STRUCT = 2,
};

struct btf_show_snprintf {
  struct btf_show show;
  int len_left;
  int len;
};

struct btf_module {
  struct list_head list;
  struct module* module;
  struct btf* btf;
  struct bin_attribute* sysfs_attr;
};

typedef u64 (*btf_bpf_btf_find_by_name_kind)(char*, int, u32, int);

enum {
  BPF_F_BROADCAST = 8,
  BPF_F_EXCLUDE_INGRESS = 16,
};

struct bpf_devmap_val {
  __u32 ifindex;
  union {
    int fd;
    __u32 id;
  } bpf_prog;
};

enum net_device_flags {
  IFF_UP = 1,
  IFF_BROADCAST = 2,
  IFF_DEBUG = 4,
  IFF_LOOPBACK = 8,
  IFF_POINTOPOINT = 16,
  IFF_NOTRAILERS = 32,
  IFF_RUNNING = 64,
  IFF_NOARP = 128,
  IFF_PROMISC = 256,
  IFF_ALLMULTI = 512,
  IFF_MASTER = 1024,
  IFF_SLAVE = 2048,
  IFF_MULTICAST = 4096,
  IFF_PORTSEL = 8192,
  IFF_AUTOMEDIA = 16384,
  IFF_DYNAMIC = 32768,
  IFF_LOWER_UP = 65536,
  IFF_DORMANT = 131072,
  IFF_ECHO = 262144,
};

enum netdev_priv_flags {
  IFF_802_1Q_VLAN = 1,
  IFF_EBRIDGE = 2,
  IFF_BONDING = 4,
  IFF_ISATAP = 8,
  IFF_WAN_HDLC = 16,
  IFF_XMIT_DST_RELEASE = 32,
  IFF_DONT_BRIDGE = 64,
  IFF_DISABLE_NETPOLL = 128,
  IFF_MACVLAN_PORT = 256,
  IFF_BRIDGE_PORT = 512,
  IFF_OVS_DATAPATH = 1024,
  IFF_TX_SKB_SHARING = 2048,
  IFF_UNICAST_FLT = 4096,
  IFF_TEAM_PORT = 8192,
  IFF_SUPP_NOFCS = 16384,
  IFF_LIVE_ADDR_CHANGE = 32768,
  IFF_MACVLAN = 65536,
  IFF_XMIT_DST_RELEASE_PERM = 131072,
  IFF_L3MDEV_MASTER = 262144,
  IFF_NO_QUEUE = 524288,
  IFF_OPENVSWITCH = 1048576,
  IFF_L3MDEV_SLAVE = 2097152,
  IFF_TEAM = 4194304,
  IFF_RXFH_CONFIGURED = 8388608,
  IFF_PHONY_HEADROOM = 16777216,
  IFF_MACSEC = 33554432,
  IFF_NO_RX_HANDLER = 67108864,
  IFF_FAILOVER = 134217728,
  IFF_FAILOVER_SLAVE = 268435456,
  IFF_L3MDEV_RX_HANDLER = 536870912,
  IFF_LIVE_RENAME_OK = 1073741824,
};

struct xdp_dev_bulk_queue {
  struct xdp_frame* q[16];
  struct list_head flush_node;
  struct net_device* dev;
  struct net_device* dev_rx;
  struct bpf_prog* xdp_prog;
  unsigned int count;
};

enum netdev_cmd {
  NETDEV_UP = 1,
  NETDEV_DOWN = 2,
  NETDEV_REBOOT = 3,
  NETDEV_CHANGE = 4,
  NETDEV_REGISTER = 5,
  NETDEV_UNREGISTER = 6,
  NETDEV_CHANGEMTU = 7,
  NETDEV_CHANGEADDR = 8,
  NETDEV_PRE_CHANGEADDR = 9,
  NETDEV_GOING_DOWN = 10,
  NETDEV_CHANGENAME = 11,
  NETDEV_FEAT_CHANGE = 12,
  NETDEV_BONDING_FAILOVER = 13,
  NETDEV_PRE_UP = 14,
  NETDEV_PRE_TYPE_CHANGE = 15,
  NETDEV_POST_TYPE_CHANGE = 16,
  NETDEV_POST_INIT = 17,
  NETDEV_RELEASE = 18,
  NETDEV_NOTIFY_PEERS = 19,
  NETDEV_JOIN = 20,
  NETDEV_CHANGEUPPER = 21,
  NETDEV_RESEND_IGMP = 22,
  NETDEV_PRECHANGEMTU = 23,
  NETDEV_CHANGEINFODATA = 24,
  NETDEV_BONDING_INFO = 25,
  NETDEV_PRECHANGEUPPER = 26,
  NETDEV_CHANGELOWERSTATE = 27,
  NETDEV_UDP_TUNNEL_PUSH_INFO = 28,
  NETDEV_UDP_TUNNEL_DROP_INFO = 29,
  NETDEV_CHANGE_TX_QUEUE_LEN = 30,
  NETDEV_CVLAN_FILTER_PUSH_INFO = 31,
  NETDEV_CVLAN_FILTER_DROP_INFO = 32,
  NETDEV_SVLAN_FILTER_PUSH_INFO = 33,
  NETDEV_SVLAN_FILTER_DROP_INFO = 34,
};

struct netdev_notifier_info {
  struct net_device* dev;
  struct netlink_ext_ack* extack;
};

struct bpf_dtab;

struct bpf_dtab_netdev {
  struct net_device* dev;
  struct hlist_node index_hlist;
  struct bpf_dtab* dtab;
  struct bpf_prog* xdp_prog;
  struct callback_head rcu;
  unsigned int idx;
  struct bpf_devmap_val val;
};

struct bpf_dtab {
  struct bpf_map map;
  struct bpf_dtab_netdev** netdev_map;
  struct list_head list;
  struct hlist_head* dev_index_head;
  spinlock_t index_lock;
  unsigned int items;
  u32 n_buckets;
  long : 32;
  long : 64;
  long : 64;
};

struct bpf_cpumap_val {
  __u32 qsize;
  union {
    int fd;
    __u32 id;
  } bpf_prog;
};

struct ptr_ring {
  int producer;
  spinlock_t producer_lock;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  int consumer_head;
  int consumer_tail;
  spinlock_t consumer_lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  int size;
  int batch;
  void** queue;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bpf_cpu_map_entry;

struct xdp_bulk_queue {
  void* q[8];
  struct list_head flush_node;
  struct bpf_cpu_map_entry* obj;
  unsigned int count;
};

struct bpf_cpu_map;

struct bpf_cpu_map_entry {
  u32 cpu;
  int map_id;
  struct xdp_bulk_queue* bulkq;
  struct bpf_cpu_map* cmap;
  struct ptr_ring* queue;
  struct task_struct* kthread;
  struct bpf_cpumap_val value;
  struct bpf_prog* prog;
  atomic_t refcnt;
  struct callback_head rcu;
  struct work_struct kthread_stop_wq;
};

struct bpf_cpu_map {
  struct bpf_map map;
  struct bpf_cpu_map_entry** cpu_map;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct rhlist_head {
  struct rhash_head rhead;
  struct rhlist_head* next;
};

struct bpf_prog_offload_ops {
  int (*insn_hook)(struct bpf_verifier_env*, int, int);
  int (*finalize)(struct bpf_verifier_env*);
  int (*replace_insn)(struct bpf_verifier_env*, u32, struct bpf_insn*);
  int (*remove_insns)(struct bpf_verifier_env*, u32, u32);
  int (*prepare)(struct bpf_prog*);
  int (*translate)(struct bpf_prog*);
  void (*destroy)(struct bpf_prog*);
};

struct bpf_offload_dev {
  const struct bpf_prog_offload_ops* ops;
  struct list_head netdevs;
  void* priv;
};

struct bpf_offload_netdev {
  struct rhash_head l;
  struct net_device* netdev;
  struct bpf_offload_dev* offdev;
  struct list_head progs;
  struct list_head maps;
  struct list_head offdev_netdevs;
};

struct ns_get_path_bpf_prog_args {
  struct bpf_prog* prog;
  struct bpf_prog_info* info;
};

struct ns_get_path_bpf_map_args {
  struct bpf_offloaded_map* offmap;
  struct bpf_map_info* info;
};

struct bpf_netns_link {
  struct bpf_link link;
  enum bpf_attach_type type;
  enum netns_bpf_attach_type netns_type;
  struct net* net;
  struct list_head node;
};

enum bpf_stack_build_id_status {
  BPF_STACK_BUILD_ID_EMPTY = 0,
  BPF_STACK_BUILD_ID_VALID = 1,
  BPF_STACK_BUILD_ID_IP = 2,
};

struct bpf_stack_build_id {
  __s32 status;
  unsigned char build_id[20];
  union {
    __u64 offset;
    __u64 ip;
  };
};

enum {
  BPF_F_SKIP_FIELD_MASK = 255,
  BPF_F_USER_STACK = 256,
  BPF_F_FAST_STACK_CMP = 512,
  BPF_F_REUSE_STACKID = 1024,
  BPF_F_USER_BUILD_ID = 2048,
};

enum perf_callchain_context {
  PERF_CONTEXT_HV = 4294967264,
  PERF_CONTEXT_KERNEL = 4294967168,
  PERF_CONTEXT_USER = 4294966784,
  PERF_CONTEXT_GUEST = 4294965248,
  PERF_CONTEXT_GUEST_KERNEL = 4294965120,
  PERF_CONTEXT_GUEST_USER = 4294964736,
  PERF_CONTEXT_MAX = 4294963201,
};

struct stack_map_bucket {
  struct pcpu_freelist_node fnode;
  u32 hash;
  u32 nr;
  u64 data[0];
};

struct bpf_stack_map {
  struct bpf_map map;
  void* elems;
  struct pcpu_freelist freelist;
  u32 n_buckets;
  struct stack_map_bucket* buckets[0];
  long : 64;
  long : 64;
  long : 64;
};

struct stack_map_irq_work {
  struct irq_work irq_work;
  struct mm_struct* mm;
};

typedef u64 (*btf_bpf_get_stackid)(struct pt_regs*, struct bpf_map*, u64);

typedef u64 (*btf_bpf_get_stackid_pe)(
    struct bpf_perf_event_data_kern*,
    struct bpf_map*,
    u64);

typedef u64 (*btf_bpf_get_stack)(struct pt_regs*, void*, u32, u64);

typedef u64 (*btf_bpf_get_task_stack)(struct task_struct*, void*, u32, u64);

typedef u64 (
    *btf_bpf_get_stack_pe)(struct bpf_perf_event_data_kern*, void*, u32, u64);

enum {
  BPF_F_SYSCTL_BASE_NAME = 1,
};

struct bpf_prog_list {
  struct list_head node;
  struct bpf_prog* prog;
  struct bpf_cgroup_link* link;
  struct bpf_cgroup_storage* storage[2];
};

struct qdisc_skb_cb {
  struct {
    unsigned int pkt_len;
    u16 slave_dev_queue_mapping;
    u16 tc_classid;
  };
  unsigned char data[20];
  u16 mru;
  bool post_ct;
};

struct bpf_skb_data_end {
  struct qdisc_skb_cb qdisc_cb;
  void* data_meta;
  void* data_end;
};

struct bpf_sockopt_buf {
  u8 data[32];
};

enum {
  TCPF_ESTABLISHED = 2,
  TCPF_SYN_SENT = 4,
  TCPF_SYN_RECV = 8,
  TCPF_FIN_WAIT1 = 16,
  TCPF_FIN_WAIT2 = 32,
  TCPF_TIME_WAIT = 64,
  TCPF_CLOSE = 128,
  TCPF_CLOSE_WAIT = 256,
  TCPF_LAST_ACK = 512,
  TCPF_LISTEN = 1024,
  TCPF_CLOSING = 2048,
  TCPF_NEW_SYN_RECV = 4096,
};

typedef u64 (
    *btf_bpf_sysctl_get_name)(struct bpf_sysctl_kern*, char*, size_t, u64);

typedef u64 (
    *btf_bpf_sysctl_get_current_value)(struct bpf_sysctl_kern*, char*, size_t);

typedef u64 (
    *btf_bpf_sysctl_get_new_value)(struct bpf_sysctl_kern*, char*, size_t);

typedef u64 (*btf_bpf_sysctl_set_new_value)(
    struct bpf_sysctl_kern*,
    const char*,
    size_t);

typedef u64 (*btf_bpf_get_netns_cookie_sockopt)(struct bpf_sockopt_kern*);

enum sock_type {
  SOCK_STREAM = 1,
  SOCK_DGRAM = 2,
  SOCK_RAW = 3,
  SOCK_RDM = 4,
  SOCK_SEQPACKET = 5,
  SOCK_DCCP = 6,
  SOCK_PACKET = 10,
};

enum {
  IPPROTO_IP = 0,
  IPPROTO_ICMP = 1,
  IPPROTO_IGMP = 2,
  IPPROTO_IPIP = 4,
  IPPROTO_TCP = 6,
  IPPROTO_EGP = 8,
  IPPROTO_PUP = 12,
  IPPROTO_UDP = 17,
  IPPROTO_IDP = 22,
  IPPROTO_TP = 29,
  IPPROTO_DCCP = 33,
  IPPROTO_IPV6 = 41,
  IPPROTO_RSVP = 46,
  IPPROTO_GRE = 47,
  IPPROTO_ESP = 50,
  IPPROTO_AH = 51,
  IPPROTO_MTP = 92,
  IPPROTO_BEETPH = 94,
  IPPROTO_ENCAP = 98,
  IPPROTO_PIM = 103,
  IPPROTO_COMP = 108,
  IPPROTO_SCTP = 132,
  IPPROTO_UDPLITE = 136,
  IPPROTO_MPLS = 137,
  IPPROTO_ETHERNET = 143,
  IPPROTO_RAW = 255,
  IPPROTO_MPTCP = 262,
  IPPROTO_MAX = 263,
};

enum sock_flags {
  SOCK_DEAD = 0,
  SOCK_DONE = 1,
  SOCK_URGINLINE = 2,
  SOCK_KEEPOPEN = 3,
  SOCK_LINGER = 4,
  SOCK_DESTROY = 5,
  SOCK_BROADCAST = 6,
  SOCK_TIMESTAMP = 7,
  SOCK_ZAPPED = 8,
  SOCK_USE_WRITE_QUEUE = 9,
  SOCK_DBG = 10,
  SOCK_RCVTSTAMP = 11,
  SOCK_RCVTSTAMPNS = 12,
  SOCK_LOCALROUTE = 13,
  SOCK_MEMALLOC = 14,
  SOCK_TIMESTAMPING_RX_SOFTWARE = 15,
  SOCK_FASYNC = 16,
  SOCK_RXQ_OVFL = 17,
  SOCK_ZEROCOPY = 18,
  SOCK_WIFI_STATUS = 19,
  SOCK_NOFCS = 20,
  SOCK_FILTER_LOCKED = 21,
  SOCK_SELECT_ERR_QUEUE = 22,
  SOCK_RCU_FREE = 23,
  SOCK_TXTIME = 24,
  SOCK_XDP = 25,
  SOCK_TSTAMP_NEW = 26,
};

struct reuseport_array {
  struct bpf_map map;
  struct sock* ptrs[0];
};

enum bpf_struct_ops_state {
  BPF_STRUCT_OPS_STATE_INIT = 0,
  BPF_STRUCT_OPS_STATE_INUSE = 1,
  BPF_STRUCT_OPS_STATE_TOBEFREE = 2,
};

struct bpf_struct_ops_value {
  refcount_t refcnt;
  enum bpf_struct_ops_state state;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  char data[0];
};

struct bpf_struct_ops_map {
  struct bpf_map map;
  struct callback_head rcu;
  const struct bpf_struct_ops* st_ops;
  struct mutex lock;
  struct bpf_prog** progs;
  void* image;
  struct bpf_struct_ops_value* uvalue;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct bpf_struct_ops_value kvalue;
};

struct bpf_struct_ops_tcp_congestion_ops {
  refcount_t refcnt;
  enum bpf_struct_ops_state state;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct tcp_congestion_ops data;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct sembuf {
  short unsigned int sem_num;
  short int sem_op;
  short int sem_flg;
};

enum key_need_perm {
  KEY_NEED_UNSPECIFIED = 0,
  KEY_NEED_VIEW = 1,
  KEY_NEED_READ = 2,
  KEY_NEED_WRITE = 3,
  KEY_NEED_SEARCH = 4,
  KEY_NEED_LINK = 5,
  KEY_NEED_SETATTR = 6,
  KEY_NEED_UNLINK = 7,
  KEY_SYSADMIN_OVERRIDE = 8,
  KEY_AUTHTOKEN_OVERRIDE = 9,
  KEY_DEFER_PERM_CHECK = 10,
};

struct __key_reference_with_attributes;

typedef struct __key_reference_with_attributes* key_ref_t;

enum {
  BPF_F_BPRM_SECUREEXEC = 1,
};

typedef u64 (*btf_bpf_bprm_opts_set)(struct linux_binprm*, u64);

typedef u64 (*btf_bpf_ima_inode_hash)(struct inode*, void*, u32);

struct static_call_tramp_key {
  s32 tramp;
  s32 key;
};

enum perf_event_read_format {
  PERF_FORMAT_TOTAL_TIME_ENABLED = 1,
  PERF_FORMAT_TOTAL_TIME_RUNNING = 2,
  PERF_FORMAT_ID = 4,
  PERF_FORMAT_GROUP = 8,
  PERF_FORMAT_MAX = 16,
};

enum perf_event_ioc_flags {
  PERF_IOC_FLAG_GROUP = 1,
};

struct perf_ns_link_info {
  __u64 dev;
  __u64 ino;
};

enum {
  NET_NS_INDEX = 0,
  UTS_NS_INDEX = 1,
  IPC_NS_INDEX = 2,
  PID_NS_INDEX = 3,
  USER_NS_INDEX = 4,
  MNT_NS_INDEX = 5,
  CGROUP_NS_INDEX = 6,
  NR_NAMESPACES = 7,
};

enum perf_event_type {
  PERF_RECORD_MMAP = 1,
  PERF_RECORD_LOST = 2,
  PERF_RECORD_COMM = 3,
  PERF_RECORD_EXIT = 4,
  PERF_RECORD_THROTTLE = 5,
  PERF_RECORD_UNTHROTTLE = 6,
  PERF_RECORD_FORK = 7,
  PERF_RECORD_READ = 8,
  PERF_RECORD_SAMPLE = 9,
  PERF_RECORD_MMAP2 = 10,
  PERF_RECORD_AUX = 11,
  PERF_RECORD_ITRACE_START = 12,
  PERF_RECORD_LOST_SAMPLES = 13,
  PERF_RECORD_SWITCH = 14,
  PERF_RECORD_SWITCH_CPU_WIDE = 15,
  PERF_RECORD_NAMESPACES = 16,
  PERF_RECORD_KSYMBOL = 17,
  PERF_RECORD_BPF_EVENT = 18,
  PERF_RECORD_CGROUP = 19,
  PERF_RECORD_TEXT_POKE = 20,
  PERF_RECORD_MAX = 21,
};

struct swevent_hlist {
  struct hlist_head heads[256];
  struct callback_head callback_head;
};

struct pmu_event_list {
  raw_spinlock_t lock;
  struct list_head list;
};

struct perf_buffer {
  refcount_t refcount;
  struct callback_head callback_head;
  int nr_pages;
  int overwrite;
  int paused;
  atomic_t poll;
  local_t head;
  unsigned int nest;
  local_t events;
  local_t wakeup;
  local_t lost;
  long int watermark;
  long int aux_watermark;
  spinlock_t event_lock;
  struct list_head event_list;
  atomic_t mmap_count;
  long unsigned int mmap_locked;
  struct user_struct* mmap_user;
  long int aux_head;
  unsigned int aux_nest;
  long int aux_wakeup;
  long unsigned int aux_pgoff;
  int aux_nr_pages;
  int aux_overwrite;
  atomic_t aux_mmap_count;
  long unsigned int aux_mmap_locked;
  void (*free_aux)(void*);
  refcount_t aux_refcount;
  int aux_in_sampling;
  void** aux_pages;
  void* aux_priv;
  struct perf_event_mmap_page* user_page;
  void* data_pages[0];
};

struct match_token {
  int token;
  const char* pattern;
};

enum {
  MAX_OPT_ARGS = 3,
};

typedef struct {
  char* from;
  char* to;
} substring_t;

struct min_heap {
  void* data;
  int nr;
  int size;
};

struct min_heap_callbacks {
  int elem_size;
  bool (*less)(const void*, const void*);
  void (*swp)(void*, void*);
};

typedef int (*remote_function_f)(void*);

struct remote_function_call {
  struct task_struct* p;
  remote_function_f func;
  void* info;
  int ret;
};

typedef void (*event_f)(
    struct perf_event*,
    struct perf_cpu_context*,
    struct perf_event_context*,
    void*);

struct event_function_struct {
  struct perf_event* event;
  event_f func;
  void* data;
};

enum event_type_t {
  EVENT_FLEXIBLE = 1,
  EVENT_PINNED = 2,
  EVENT_TIME = 4,
  EVENT_CPU = 8,
  EVENT_ALL = 3,
};

struct __group_key {
  int cpu;
  struct cgroup* cgroup;
};

struct stop_event_data {
  struct perf_event* event;
  unsigned int restart;
};

struct perf_read_data {
  struct perf_event* event;
  bool group;
  int ret;
};

struct perf_read_event {
  struct perf_event_header header;
  u32 pid;
  u32 tid;
};

typedef void perf_iterate_f(struct perf_event*, void*);

struct remote_output {
  struct perf_buffer* rb;
  int err;
};

struct perf_task_event {
  struct task_struct* task;
  struct perf_event_context* task_ctx;
  struct {
    struct perf_event_header header;
    u32 pid;
    u32 ppid;
    u32 tid;
    u32 ptid;
    u64 time;
  } event_id;
};

struct perf_comm_event {
  struct task_struct* task;
  char* comm;
  int comm_size;
  struct {
    struct perf_event_header header;
    u32 pid;
    u32 tid;
  } event_id;
};

struct perf_namespaces_event {
  struct task_struct* task;
  struct {
    struct perf_event_header header;
    u32 pid;
    u32 tid;
    u64 nr_namespaces;
    struct perf_ns_link_info link_info[7];
  } event_id;
};

struct perf_cgroup_event {
  char* path;
  int path_size;
  struct {
    struct perf_event_header header;
    u64 id;
    char path[0];
  } event_id;
};

struct perf_mmap_event {
  struct vm_area_struct* vma;
  const char* file_name;
  int file_size;
  int maj;
  int min;
  u64 ino;
  u64 ino_generation;
  u32 prot;
  u32 flags;
  u8 build_id[20];
  u32 build_id_size;
  struct {
    struct perf_event_header header;
    u32 pid;
    u32 tid;
    u64 start;
    u64 len;
    u64 pgoff;
  } event_id;
};

struct perf_switch_event {
  struct task_struct* task;
  struct task_struct* next_prev;
  struct {
    struct perf_event_header header;
    u32 next_prev_pid;
    u32 next_prev_tid;
  } event_id;
};

struct perf_ksymbol_event {
  const char* name;
  int name_len;
  struct {
    struct perf_event_header header;
    u64 addr;
    u32 len;
    u16 ksym_type;
    u16 flags;
  } event_id;
};

struct perf_bpf_event {
  struct bpf_prog* prog;
  struct {
    struct perf_event_header header;
    u16 type;
    u16 flags;
    u32 id;
    u8 tag[8];
  } event_id;
};

struct perf_text_poke_event {
  const void* old_bytes;
  const void* new_bytes;
  size_t pad;
  u16 old_len;
  u16 new_len;
  struct {
    struct perf_event_header header;
    u64 addr;
  } event_id;
};

struct swevent_htable {
  struct swevent_hlist* swevent_hlist;
  struct mutex hlist_mutex;
  int hlist_refcount;
  int recursion[4];
};

enum perf_probe_config {
  PERF_PROBE_CONFIG_IS_RETPROBE = 1,
  PERF_UPROBE_REF_CTR_OFFSET_BITS = 32,
  PERF_UPROBE_REF_CTR_OFFSET_SHIFT = 32,
};

enum {
  IF_ACT_NONE = 4294967295,
  IF_ACT_FILTER = 0,
  IF_ACT_START = 1,
  IF_ACT_STOP = 2,
  IF_SRC_FILE = 3,
  IF_SRC_KERNEL = 4,
  IF_SRC_FILEADDR = 5,
  IF_SRC_KERNELADDR = 6,
};

enum {
  IF_STATE_ACTION = 0,
  IF_STATE_SOURCE = 1,
  IF_STATE_END = 2,
};

struct perf_aux_event {
  struct perf_event_header header;
  u32 pid;
  u32 tid;
};

struct perf_aux_event___2 {
  struct perf_event_header header;
  u64 offset;
  u64 size;
  u64 flags;
};

struct callchain_cpus_entries {
  struct callback_head callback_head;
  struct perf_callchain_entry* cpu_entries[0];
};

enum bp_type_idx {
  TYPE_INST = 0,
  TYPE_DATA = 0,
  TYPE_MAX = 1,
};

struct bp_cpuinfo {
  unsigned int cpu_pinned;
  unsigned int* tsk_pinned;
  unsigned int flexible;
};

struct bp_busy_slots {
  unsigned int pinned;
  unsigned int flexible;
};

typedef u8 uprobe_opcode_t;

struct uprobe {
  struct rb_node rb_node;
  refcount_t ref;
  struct rw_semaphore register_rwsem;
  struct rw_semaphore consumer_rwsem;
  struct list_head pending_list;
  struct uprobe_consumer* consumers;
  struct inode* inode;
  loff_t offset;
  loff_t ref_ctr_offset;
  long unsigned int flags;
  struct arch_uprobe arch;
};

struct xol_area {
  wait_queue_head_t wq;
  atomic_t slot_count;
  long unsigned int* bitmap;
  struct vm_special_mapping xol_mapping;
  struct page* pages[2];
  long unsigned int vaddr;
};

typedef long unsigned int vm_flags_t;

struct compact_control;

struct capture_control {
  struct compact_control* cc;
  struct page* page;
};

struct page_vma_mapped_walk {
  struct page* page;
  struct vm_area_struct* vma;
  long unsigned int address;
  pmd_t* pmd;
  pte_t* pte;
  spinlock_t* ptl;
  unsigned int flags;
};

struct compact_control {
  struct list_head freepages;
  struct list_head migratepages;
  unsigned int nr_freepages;
  unsigned int nr_migratepages;
  long unsigned int free_pfn;
  long unsigned int migrate_pfn;
  long unsigned int fast_start_pfn;
  struct zone* zone;
  long unsigned int total_migrate_scanned;
  long unsigned int total_free_scanned;
  short unsigned int fast_search_fail;
  short int search_order;
  const gfp_t gfp_mask;
  int order;
  int migratetype;
  const unsigned int alloc_flags;
  const int highest_zoneidx;
  enum migrate_mode mode;
  bool ignore_skip_hint;
  bool no_set_skip_hint;
  bool ignore_block_suitable;
  bool direct_compaction;
  bool proactive_compaction;
  bool whole_zone;
  bool contended;
  bool rescan;
  bool alloc_contig;
};

struct delayed_uprobe {
  struct list_head list;
  struct uprobe* uprobe;
  struct mm_struct* mm;
};

struct __uprobe_key {
  struct inode* inode;
  loff_t offset;
};

struct map_info {
  struct map_info* next;
  struct mm_struct* mm;
  long unsigned int vaddr;
};

struct user_return_notifier {
  void (*on_user_return)(struct user_return_notifier*);
  struct hlist_node link;
};

struct static_key_mod {
  struct static_key_mod* next;
  struct jump_entry* entries;
  struct module* mod;
};

struct static_key_deferred {
  struct static_key key;
  long unsigned int timeout;
  struct delayed_work work;
};

enum rseq_cpu_id_state {
  RSEQ_CPU_ID_UNINITIALIZED = 4294967295,
  RSEQ_CPU_ID_REGISTRATION_FAILED = 4294967294,
};

enum rseq_flags {
  RSEQ_FLAG_UNREGISTER = 1,
};

enum rseq_cs_flags {
  RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT = 1,
  RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL = 2,
  RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE = 4,
};

struct rseq_cs {
  __u32 version;
  __u32 flags;
  __u64 start_ip;
  __u64 post_commit_offset;
  __u64 abort_ip;
};

struct trace_event_raw_rseq_update {
  struct trace_entry ent;
  s32 cpu_id;
  char __data[0];
};

struct trace_event_raw_rseq_ip_fixup {
  struct trace_entry ent;
  long unsigned int regs_ip;
  long unsigned int start_ip;
  long unsigned int post_commit_offset;
  long unsigned int abort_ip;
  char __data[0];
};

struct trace_event_data_offsets_rseq_update {};

struct trace_event_data_offsets_rseq_ip_fixup {};

typedef void (*btf_trace_rseq_update)(void*, struct task_struct*);

typedef void (*btf_trace_rseq_ip_fixup)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int);

struct pkcs7_message;

struct asymmetric_key_subtype;

typedef void (*xa_update_node_t)(struct xa_node*);

struct xa_state {
  struct xarray* xa;
  long unsigned int xa_index;
  unsigned char xa_shift;
  unsigned char xa_sibs;
  unsigned char xa_offset;
  unsigned char xa_pad;
  struct xa_node* xa_node;
  struct xa_node* xa_alloc;
  xa_update_node_t xa_update;
};

typedef int __kernel_rwf_t;

enum positive_aop_returns {
  AOP_WRITEPAGE_ACTIVATE = 524288,
  AOP_TRUNCATED_PAGE = 524289,
};

enum mapping_flags {
  AS_EIO = 0,
  AS_ENOSPC = 1,
  AS_MM_ALL_LOCKS = 2,
  AS_UNEVICTABLE = 3,
  AS_EXITING = 4,
  AS_NO_WRITEBACK_TAGS = 5,
  AS_THP_SUPPORT = 6,
};

struct wait_page_key {
  struct page* page;
  int bit_nr;
  int page_match;
};

enum iter_type {
  ITER_IOVEC = 4,
  ITER_KVEC = 8,
  ITER_BVEC = 16,
  ITER_PIPE = 32,
  ITER_DISCARD = 64,
};

struct pagevec {
  unsigned char nr;
  bool percpu_pvec_drained;
  struct page* pages[15];
};

struct fid {
  union {
    struct {
      u32 ino;
      u32 gen;
      u32 parent_ino;
      u32 parent_gen;
    } i32;
    struct {
      u32 block;
      u16 partref;
      u16 parent_partref;
      u32 generation;
      u32 parent_block;
      u32 parent_generation;
    } udf;
    __u32 raw[0];
  };
};

struct trace_event_raw_mm_filemap_op_page_cache {
  struct trace_entry ent;
  long unsigned int pfn;
  long unsigned int i_ino;
  long unsigned int index;
  dev_t s_dev;
  char __data[0];
};

struct trace_event_raw_filemap_set_wb_err {
  struct trace_entry ent;
  long unsigned int i_ino;
  dev_t s_dev;
  errseq_t errseq;
  char __data[0];
};

struct trace_event_raw_file_check_and_advance_wb_err {
  struct trace_entry ent;
  struct file* file;
  long unsigned int i_ino;
  dev_t s_dev;
  errseq_t old;
  errseq_t new;
  char __data[0];
};

struct trace_event_data_offsets_mm_filemap_op_page_cache {};

struct trace_event_data_offsets_filemap_set_wb_err {};

struct trace_event_data_offsets_file_check_and_advance_wb_err {};

typedef void (
    *btf_trace_mm_filemap_delete_from_page_cache)(void*, struct page*);

typedef void (*btf_trace_mm_filemap_add_to_page_cache)(void*, struct page*);

typedef void (
    *btf_trace_filemap_set_wb_err)(void*, struct address_space*, errseq_t);

typedef void (
    *btf_trace_file_check_and_advance_wb_err)(void*, struct file*, errseq_t);

enum behavior {
  EXCLUSIVE = 0,
  SHARED = 1,
  DROP = 2,
};

struct reciprocal_value {
  u32 m;
  u8 sh1;
  u8 sh2;
};

struct kmem_cache_order_objects {
  unsigned int x;
};

struct kmem_cache_cpu;

struct kmem_cache_node;

struct kmem_cache {
  struct kmem_cache_cpu* cpu_slab;
  slab_flags_t flags;
  long unsigned int min_partial;
  unsigned int size;
  unsigned int object_size;
  struct reciprocal_value reciprocal_size;
  unsigned int offset;
  unsigned int cpu_partial;
  struct kmem_cache_order_objects oo;
  struct kmem_cache_order_objects max;
  struct kmem_cache_order_objects min;
  gfp_t allocflags;
  int refcount;
  void (*ctor)(void*);
  unsigned int inuse;
  unsigned int align;
  unsigned int red_left_pad;
  const char* name;
  struct list_head list;
  struct kobject kobj;
  unsigned int remote_node_defrag_ratio;
  unsigned int useroffset;
  unsigned int usersize;
  struct kmem_cache_node* node[8];
};

struct kmem_cache_cpu {
  void** freelist;
  long unsigned int tid;
  struct page* page;
  struct page* partial;
};

struct kmem_cache_node {
  spinlock_t list_lock;
  long unsigned int nr_partial;
  struct list_head partial;
  atomic_long_t nr_slabs;
  atomic_long_t total_objects;
  struct list_head full;
};

enum slab_state {
  DOWN = 0,
  PARTIAL = 1,
  PARTIAL_NODE = 2,
  UP = 3,
  FULL = 4,
};

struct kmalloc_info_struct {
  const char* name[3];
  unsigned int size;
};

enum oom_constraint {
  CONSTRAINT_NONE = 0,
  CONSTRAINT_CPUSET = 1,
  CONSTRAINT_MEMORY_POLICY = 2,
  CONSTRAINT_MEMCG = 3,
};

struct oom_control {
  struct zonelist* zonelist;
  nodemask_t* nodemask;
  struct mem_cgroup* memcg;
  const gfp_t gfp_mask;
  const int order;
  long unsigned int totalpages;
  struct task_struct* chosen;
  long int chosen_points;
  enum oom_constraint constraint;
};

enum compact_priority {
  COMPACT_PRIO_SYNC_FULL = 0,
  MIN_COMPACT_PRIORITY = 0,
  COMPACT_PRIO_SYNC_LIGHT = 1,
  MIN_COMPACT_COSTLY_PRIORITY = 1,
  DEF_COMPACT_PRIORITY = 1,
  COMPACT_PRIO_ASYNC = 2,
  INIT_COMPACT_PRIORITY = 2,
};

enum compact_result {
  COMPACT_NOT_SUITABLE_ZONE = 0,
  COMPACT_SKIPPED = 1,
  COMPACT_DEFERRED = 2,
  COMPACT_NO_SUITABLE_PAGE = 3,
  COMPACT_CONTINUE = 4,
  COMPACT_COMPLETE = 5,
  COMPACT_PARTIAL_SKIPPED = 6,
  COMPACT_CONTENDED = 7,
  COMPACT_SUCCESS = 8,
};

struct trace_event_raw_oom_score_adj_update {
  struct trace_entry ent;
  pid_t pid;
  char comm[16];
  short int oom_score_adj;
  char __data[0];
};

struct trace_event_raw_reclaim_retry_zone {
  struct trace_entry ent;
  int node;
  int zone_idx;
  int order;
  long unsigned int reclaimable;
  long unsigned int available;
  long unsigned int min_wmark;
  int no_progress_loops;
  bool wmark_check;
  char __data[0];
};

struct trace_event_raw_mark_victim {
  struct trace_entry ent;
  int pid;
  char __data[0];
};

struct trace_event_raw_wake_reaper {
  struct trace_entry ent;
  int pid;
  char __data[0];
};

struct trace_event_raw_start_task_reaping {
  struct trace_entry ent;
  int pid;
  char __data[0];
};

struct trace_event_raw_finish_task_reaping {
  struct trace_entry ent;
  int pid;
  char __data[0];
};

struct trace_event_raw_skip_task_reaping {
  struct trace_entry ent;
  int pid;
  char __data[0];
};

struct trace_event_raw_compact_retry {
  struct trace_entry ent;
  int order;
  int priority;
  int result;
  int retries;
  int max_retries;
  bool ret;
  char __data[0];
};

struct trace_event_data_offsets_oom_score_adj_update {};

struct trace_event_data_offsets_reclaim_retry_zone {};

struct trace_event_data_offsets_mark_victim {};

struct trace_event_data_offsets_wake_reaper {};

struct trace_event_data_offsets_start_task_reaping {};

struct trace_event_data_offsets_finish_task_reaping {};

struct trace_event_data_offsets_skip_task_reaping {};

struct trace_event_data_offsets_compact_retry {};

typedef void (*btf_trace_oom_score_adj_update)(void*, struct task_struct*);

typedef void (*btf_trace_reclaim_retry_zone)(
    void*,
    struct zoneref*,
    int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    int,
    bool);

typedef void (*btf_trace_mark_victim)(void*, int);

typedef void (*btf_trace_wake_reaper)(void*, int);

typedef void (*btf_trace_start_task_reaping)(void*, int);

typedef void (*btf_trace_finish_task_reaping)(void*, int);

typedef void (*btf_trace_skip_task_reaping)(void*, int);

typedef void (*btf_trace_compact_retry)(
    void*,
    int,
    enum compact_priority,
    enum compact_result,
    int,
    int,
    bool);

enum wb_congested_state {
  WB_async_congested = 0,
  WB_sync_congested = 1,
};

enum {
  XA_CHECK_SCHED = 4096,
};

enum wb_state {
  WB_registered = 0,
  WB_writeback_running = 1,
  WB_has_dirty_io = 2,
  WB_start_all = 3,
};

enum {
  BLK_RW_ASYNC = 0,
  BLK_RW_SYNC = 1,
};

struct wb_lock_cookie {
  bool locked;
  long unsigned int flags;
};

typedef int (*writepage_t)(struct page*, struct writeback_control*, void*);

enum page_memcg_data_flags {
  MEMCG_DATA_OBJCGS = 1,
  MEMCG_DATA_KMEM = 2,
  __NR_MEMCG_DATA_FLAGS = 4,
};

struct dirty_throttle_control {
  struct wb_domain* dom;
  struct dirty_throttle_control* gdtc;
  struct bdi_writeback* wb;
  struct fprop_local_percpu* wb_completions;
  long unsigned int avail;
  long unsigned int dirty;
  long unsigned int thresh;
  long unsigned int bg_thresh;
  long unsigned int wb_dirty;
  long unsigned int wb_thresh;
  long unsigned int wb_bg_thresh;
  long unsigned int pos_ratio;
};

struct trace_event_raw_mm_lru_insertion {
  struct trace_entry ent;
  struct page* page;
  long unsigned int pfn;
  enum lru_list lru;
  long unsigned int flags;
  char __data[0];
};

struct trace_event_raw_mm_lru_activate {
  struct trace_entry ent;
  struct page* page;
  long unsigned int pfn;
  char __data[0];
};

struct trace_event_data_offsets_mm_lru_insertion {};

struct trace_event_data_offsets_mm_lru_activate {};

typedef void (*btf_trace_mm_lru_insertion)(void*, struct page*);

typedef void (*btf_trace_mm_lru_activate)(void*, struct page*);

struct lru_rotate {
  local_lock_t lock;
  struct pagevec pvec;
};

struct lru_pvecs {
  local_lock_t lock;
  struct pagevec lru_add;
  struct pagevec lru_deactivate_file;
  struct pagevec lru_deactivate;
  struct pagevec lru_lazyfree;
  struct pagevec activate_page;
};

typedef struct {
  long unsigned int val;
} swp_entry_t;

enum lruvec_flags {
  LRUVEC_CONGESTED = 0,
};

enum pgdat_flags {
  PGDAT_DIRTY = 0,
  PGDAT_WRITEBACK = 1,
  PGDAT_RECLAIM_LOCKED = 2,
};

struct reclaim_stat {
  unsigned int nr_dirty;
  unsigned int nr_unqueued_dirty;
  unsigned int nr_congested;
  unsigned int nr_writeback;
  unsigned int nr_immediate;
  unsigned int nr_pageout;
  unsigned int nr_activate[2];
  unsigned int nr_ref_keep;
  unsigned int nr_unmap_fail;
  unsigned int nr_lazyfree_fail;
};

enum ttu_flags {
  TTU_MIGRATION = 1,
  TTU_MUNLOCK = 2,
  TTU_SPLIT_HUGE_PMD = 4,
  TTU_IGNORE_MLOCK = 8,
  TTU_SYNC = 16,
  TTU_IGNORE_HWPOISON = 32,
  TTU_BATCH_FLUSH = 64,
  TTU_RMAP_LOCKED = 128,
  TTU_SPLIT_FREEZE = 256,
};

struct trace_event_raw_mm_vmscan_kswapd_sleep {
  struct trace_entry ent;
  int nid;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_kswapd_wake {
  struct trace_entry ent;
  int nid;
  int zid;
  int order;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_wakeup_kswapd {
  struct trace_entry ent;
  int nid;
  int zid;
  int order;
  gfp_t gfp_flags;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_direct_reclaim_begin_template {
  struct trace_entry ent;
  int order;
  gfp_t gfp_flags;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_direct_reclaim_end_template {
  struct trace_entry ent;
  long unsigned int nr_reclaimed;
  char __data[0];
};

struct trace_event_raw_mm_shrink_slab_start {
  struct trace_entry ent;
  struct shrinker* shr;
  void* shrink;
  int nid;
  long int nr_objects_to_shrink;
  gfp_t gfp_flags;
  long unsigned int cache_items;
  long long unsigned int delta;
  long unsigned int total_scan;
  int priority;
  char __data[0];
};

struct trace_event_raw_mm_shrink_slab_end {
  struct trace_entry ent;
  struct shrinker* shr;
  int nid;
  void* shrink;
  long int unused_scan;
  long int new_scan;
  int retval;
  long int total_scan;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_lru_isolate {
  struct trace_entry ent;
  int highest_zoneidx;
  int order;
  long unsigned int nr_requested;
  long unsigned int nr_scanned;
  long unsigned int nr_skipped;
  long unsigned int nr_taken;
  isolate_mode_t isolate_mode;
  int lru;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_writepage {
  struct trace_entry ent;
  long unsigned int pfn;
  int reclaim_flags;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_lru_shrink_inactive {
  struct trace_entry ent;
  int nid;
  long unsigned int nr_scanned;
  long unsigned int nr_reclaimed;
  long unsigned int nr_dirty;
  long unsigned int nr_writeback;
  long unsigned int nr_congested;
  long unsigned int nr_immediate;
  unsigned int nr_activate0;
  unsigned int nr_activate1;
  long unsigned int nr_ref_keep;
  long unsigned int nr_unmap_fail;
  int priority;
  int reclaim_flags;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_lru_shrink_active {
  struct trace_entry ent;
  int nid;
  long unsigned int nr_taken;
  long unsigned int nr_active;
  long unsigned int nr_deactivated;
  long unsigned int nr_referenced;
  int priority;
  int reclaim_flags;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_inactive_list_is_low {
  struct trace_entry ent;
  int nid;
  int reclaim_idx;
  long unsigned int total_inactive;
  long unsigned int inactive;
  long unsigned int total_active;
  long unsigned int active;
  long unsigned int ratio;
  int reclaim_flags;
  char __data[0];
};

struct trace_event_raw_mm_vmscan_node_reclaim_begin {
  struct trace_entry ent;
  int nid;
  int order;
  gfp_t gfp_flags;
  char __data[0];
};

struct trace_event_data_offsets_mm_vmscan_kswapd_sleep {};

struct trace_event_data_offsets_mm_vmscan_kswapd_wake {};

struct trace_event_data_offsets_mm_vmscan_wakeup_kswapd {};

struct trace_event_data_offsets_mm_vmscan_direct_reclaim_begin_template {};

struct trace_event_data_offsets_mm_vmscan_direct_reclaim_end_template {};

struct trace_event_data_offsets_mm_shrink_slab_start {};

struct trace_event_data_offsets_mm_shrink_slab_end {};

struct trace_event_data_offsets_mm_vmscan_lru_isolate {};

struct trace_event_data_offsets_mm_vmscan_writepage {};

struct trace_event_data_offsets_mm_vmscan_lru_shrink_inactive {};

struct trace_event_data_offsets_mm_vmscan_lru_shrink_active {};

struct trace_event_data_offsets_mm_vmscan_inactive_list_is_low {};

struct trace_event_data_offsets_mm_vmscan_node_reclaim_begin {};

typedef void (*btf_trace_mm_vmscan_kswapd_sleep)(void*, int);

typedef void (*btf_trace_mm_vmscan_kswapd_wake)(void*, int, int, int);

typedef void (*btf_trace_mm_vmscan_wakeup_kswapd)(void*, int, int, int, gfp_t);

typedef void (*btf_trace_mm_vmscan_direct_reclaim_begin)(void*, int, gfp_t);

typedef void (*btf_trace_mm_vmscan_memcg_reclaim_begin)(void*, int, gfp_t);

typedef void (
    *btf_trace_mm_vmscan_memcg_softlimit_reclaim_begin)(void*, int, gfp_t);

typedef void (
    *btf_trace_mm_vmscan_direct_reclaim_end)(void*, long unsigned int);

typedef void (*btf_trace_mm_vmscan_memcg_reclaim_end)(void*, long unsigned int);

typedef void (
    *btf_trace_mm_vmscan_memcg_softlimit_reclaim_end)(void*, long unsigned int);

typedef void (*btf_trace_mm_shrink_slab_start)(
    void*,
    struct shrinker*,
    struct shrink_control*,
    long int,
    long unsigned int,
    long long unsigned int,
    long unsigned int,
    int);

typedef void (*btf_trace_mm_shrink_slab_end)(
    void*,
    struct shrinker*,
    int,
    int,
    long int,
    long int,
    long int);

typedef void (*btf_trace_mm_vmscan_lru_isolate)(
    void*,
    int,
    int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    isolate_mode_t,
    int);

typedef void (*btf_trace_mm_vmscan_writepage)(void*, struct page*);

typedef void (*btf_trace_mm_vmscan_lru_shrink_inactive)(
    void*,
    int,
    long unsigned int,
    long unsigned int,
    struct reclaim_stat*,
    int,
    int);

typedef void (*btf_trace_mm_vmscan_lru_shrink_active)(
    void*,
    int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    int,
    int);

typedef void (*btf_trace_mm_vmscan_inactive_list_is_low)(
    void*,
    int,
    int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    int);

typedef void (*btf_trace_mm_vmscan_node_reclaim_begin)(void*, int, int, gfp_t);

typedef void (*btf_trace_mm_vmscan_node_reclaim_end)(void*, long unsigned int);

struct scan_control {
  long unsigned int nr_to_reclaim;
  nodemask_t* nodemask;
  struct mem_cgroup* target_mem_cgroup;
  long unsigned int anon_cost;
  long unsigned int file_cost;
  unsigned int may_deactivate : 2;
  unsigned int force_deactivate : 1;
  unsigned int skipped_deactivate : 1;
  unsigned int may_writepage : 1;
  unsigned int may_unmap : 1;
  unsigned int may_swap : 1;
  unsigned int memcg_low_reclaim : 1;
  unsigned int memcg_low_skipped : 1;
  unsigned int hibernation_mode : 1;
  unsigned int compaction_ready : 1;
  unsigned int cache_trim_mode : 1;
  unsigned int file_is_tiny : 1;
  s8 order;
  s8 priority;
  s8 reclaim_idx;
  gfp_t gfp_mask;
  long unsigned int nr_scanned;
  long unsigned int nr_reclaimed;
  struct {
    unsigned int dirty;
    unsigned int unqueued_dirty;
    unsigned int congested;
    unsigned int writeback;
    unsigned int immediate;
    unsigned int file_taken;
    unsigned int taken;
  } nr;
  struct reclaim_state reclaim_state;
};

typedef enum {
  PAGE_KEEP = 0,
  PAGE_ACTIVATE = 1,
  PAGE_SUCCESS = 2,
  PAGE_CLEAN = 3,
} pageout_t;

enum page_references {
  PAGEREF_RECLAIM = 0,
  PAGEREF_RECLAIM_CLEAN = 1,
  PAGEREF_KEEP = 2,
  PAGEREF_ACTIVATE = 3,
};

enum scan_balance {
  SCAN_EQUAL = 0,
  SCAN_FRACT = 1,
  SCAN_ANON = 2,
  SCAN_FILE = 3,
};

enum transparent_hugepage_flag {
  TRANSPARENT_HUGEPAGE_NEVER_DAX = 0,
  TRANSPARENT_HUGEPAGE_FLAG = 1,
  TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG = 2,
  TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG = 3,
  TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG = 4,
  TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG = 5,
  TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG = 6,
  TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG = 7,
  TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG = 8,
};

struct xattr {
  const char* name;
  void* value;
  size_t value_len;
};

struct constant_table {
  const char* name;
  int value;
};

enum {
  MPOL_DEFAULT = 0,
  MPOL_PREFERRED = 1,
  MPOL_BIND = 2,
  MPOL_INTERLEAVE = 3,
  MPOL_LOCAL = 4,
  MPOL_MAX = 5,
};

struct shared_policy {
  struct rb_root root;
  rwlock_t lock;
};

struct simple_xattrs {
  struct list_head head;
  spinlock_t lock;
};

struct simple_xattr {
  struct list_head list;
  char* name;
  size_t size;
  char value[0];
};

struct shmem_inode_info {
  spinlock_t lock;
  unsigned int seals;
  long unsigned int flags;
  long unsigned int alloced;
  long unsigned int swapped;
  struct list_head shrinklist;
  struct list_head swaplist;
  struct shared_policy policy;
  struct simple_xattrs xattrs;
  atomic_t stop_eviction;
  struct inode vfs_inode;
};

struct shmem_sb_info {
  long unsigned int max_blocks;
  struct percpu_counter used_blocks;
  long unsigned int max_inodes;
  long unsigned int free_inodes;
  spinlock_t stat_lock;
  umode_t mode;
  unsigned char huge;
  kuid_t uid;
  kgid_t gid;
  bool full_inums;
  ino_t next_ino;
  ino_t* ino_batch;
  struct mempolicy* mpol;
  spinlock_t shrinklist_lock;
  struct list_head shrinklist;
  long unsigned int shrinklist_len;
};

enum sgp_type {
  SGP_READ = 0,
  SGP_CACHE = 1,
  SGP_NOHUGE = 2,
  SGP_HUGE = 3,
  SGP_WRITE = 4,
  SGP_FALLOC = 5,
};

enum fid_type {
  FILEID_ROOT = 0,
  FILEID_INO32_GEN = 1,
  FILEID_INO32_GEN_PARENT = 2,
  FILEID_BTRFS_WITHOUT_PARENT = 77,
  FILEID_BTRFS_WITH_PARENT = 78,
  FILEID_BTRFS_WITH_PARENT_ROOT = 79,
  FILEID_UDF_WITHOUT_PARENT = 81,
  FILEID_UDF_WITH_PARENT = 82,
  FILEID_NILFS_WITHOUT_PARENT = 97,
  FILEID_NILFS_WITH_PARENT = 98,
  FILEID_FAT_WITHOUT_PARENT = 113,
  FILEID_FAT_WITH_PARENT = 114,
  FILEID_LUSTRE = 151,
  FILEID_KERNFS = 254,
  FILEID_INVALID = 255,
};

struct shmem_falloc {
  wait_queue_head_t* waitq;
  long unsigned int start;
  long unsigned int next;
  long unsigned int nr_falloced;
  long unsigned int nr_unswapped;
};

struct shmem_options {
  long long unsigned int blocks;
  long long unsigned int inodes;
  struct mempolicy* mpol;
  kuid_t uid;
  kgid_t gid;
  umode_t mode;
  bool full_inums;
  int huge;
  int seen;
};

enum shmem_param {
  Opt_gid = 0,
  Opt_huge = 1,
  Opt_mode = 2,
  Opt_mpol = 3,
  Opt_nr_blocks = 4,
  Opt_nr_inodes = 5,
  Opt_size = 6,
  Opt_uid = 7,
  Opt_inode32 = 8,
  Opt_inode64 = 9,
};

enum writeback_stat_item {
  NR_DIRTY_THRESHOLD = 0,
  NR_DIRTY_BG_THRESHOLD = 1,
  NR_VM_WRITEBACK_STAT_ITEMS = 2,
};

struct contig_page_info {
  long unsigned int free_pages;
  long unsigned int free_blocks_total;
  long unsigned int free_blocks_suitable;
};

struct radix_tree_iter {
  long unsigned int index;
  long unsigned int next_index;
  long unsigned int tags;
  struct xa_node* node;
};

enum {
  RADIX_TREE_ITER_TAG_MASK = 15,
  RADIX_TREE_ITER_TAGGED = 16,
  RADIX_TREE_ITER_CONTIG = 32,
};

enum mminit_level {
  MMINIT_WARNING = 0,
  MMINIT_VERIFY = 1,
  MMINIT_TRACE = 2,
};

struct pcpu_group_info {
  int nr_units;
  long unsigned int base_offset;
  unsigned int* cpu_map;
};

struct pcpu_alloc_info {
  size_t static_size;
  size_t reserved_size;
  size_t dyn_size;
  size_t unit_size;
  size_t atom_size;
  size_t alloc_size;
  size_t __ai_size;
  int nr_groups;
  struct pcpu_group_info groups[0];
};

typedef void* (*pcpu_fc_alloc_fn_t)(unsigned int, size_t, size_t);

typedef void (*pcpu_fc_free_fn_t)(void*, size_t);

typedef void (*pcpu_fc_populate_pte_fn_t)(long unsigned int);

typedef int pcpu_fc_cpu_distance_fn_t(unsigned int, unsigned int);

struct trace_event_raw_percpu_alloc_percpu {
  struct trace_entry ent;
  bool reserved;
  bool is_atomic;
  size_t size;
  size_t align;
  void* base_addr;
  int off;
  void* ptr;
  char __data[0];
};

struct trace_event_raw_percpu_free_percpu {
  struct trace_entry ent;
  void* base_addr;
  int off;
  void* ptr;
  char __data[0];
};

struct trace_event_raw_percpu_alloc_percpu_fail {
  struct trace_entry ent;
  bool reserved;
  bool is_atomic;
  size_t size;
  size_t align;
  char __data[0];
};

struct trace_event_raw_percpu_create_chunk {
  struct trace_entry ent;
  void* base_addr;
  char __data[0];
};

struct trace_event_raw_percpu_destroy_chunk {
  struct trace_entry ent;
  void* base_addr;
  char __data[0];
};

struct trace_event_data_offsets_percpu_alloc_percpu {};

struct trace_event_data_offsets_percpu_free_percpu {};

struct trace_event_data_offsets_percpu_alloc_percpu_fail {};

struct trace_event_data_offsets_percpu_create_chunk {};

struct trace_event_data_offsets_percpu_destroy_chunk {};

typedef void (*btf_trace_percpu_alloc_percpu)(
    void*,
    bool,
    bool,
    size_t,
    size_t,
    void*,
    int,
    void*);

typedef void (*btf_trace_percpu_free_percpu)(void*, void*, int, void*);

typedef void (
    *btf_trace_percpu_alloc_percpu_fail)(void*, bool, bool, size_t, size_t);

typedef void (*btf_trace_percpu_create_chunk)(void*, void*);

typedef void (*btf_trace_percpu_destroy_chunk)(void*, void*);

struct pcpu_block_md {
  int scan_hint;
  int scan_hint_start;
  int contig_hint;
  int contig_hint_start;
  int left_free;
  int right_free;
  int first_free;
  int nr_bits;
};

struct pcpu_chunk {
  int nr_alloc;
  size_t max_alloc_size;
  struct list_head list;
  int free_bytes;
  struct pcpu_block_md chunk_md;
  void* base_addr;
  long unsigned int* alloc_map;
  long unsigned int* bound_map;
  struct pcpu_block_md* md_blocks;
  void* data;
  bool immutable;
  bool isolated;
  int start_offset;
  int end_offset;
  struct obj_cgroup** obj_cgroups;
  int nr_pages;
  int nr_populated;
  int nr_empty_pop_pages;
  long unsigned int populated[0];
};

struct percpu_stats {
  u64 nr_alloc;
  u64 nr_dealloc;
  u64 nr_cur_alloc;
  u64 nr_max_alloc;
  u32 nr_chunks;
  u32 nr_max_chunks;
  size_t min_alloc_size;
  size_t max_alloc_size;
};

struct trace_event_raw_kmem_alloc {
  struct trace_entry ent;
  long unsigned int call_site;
  const void* ptr;
  size_t bytes_req;
  size_t bytes_alloc;
  gfp_t gfp_flags;
  char __data[0];
};

struct trace_event_raw_kmem_alloc_node {
  struct trace_entry ent;
  long unsigned int call_site;
  const void* ptr;
  size_t bytes_req;
  size_t bytes_alloc;
  gfp_t gfp_flags;
  int node;
  char __data[0];
};

struct trace_event_raw_kfree {
  struct trace_entry ent;
  long unsigned int call_site;
  const void* ptr;
  char __data[0];
};

struct trace_event_raw_kmem_cache_free {
  struct trace_entry ent;
  long unsigned int call_site;
  const void* ptr;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_mm_page_free {
  struct trace_entry ent;
  long unsigned int pfn;
  unsigned int order;
  char __data[0];
};

struct trace_event_raw_mm_page_free_batched {
  struct trace_entry ent;
  long unsigned int pfn;
  char __data[0];
};

struct trace_event_raw_mm_page_alloc {
  struct trace_entry ent;
  long unsigned int pfn;
  unsigned int order;
  gfp_t gfp_flags;
  int migratetype;
  char __data[0];
};

struct trace_event_raw_mm_page {
  struct trace_entry ent;
  long unsigned int pfn;
  unsigned int order;
  int migratetype;
  char __data[0];
};

struct trace_event_raw_mm_page_pcpu_drain {
  struct trace_entry ent;
  long unsigned int pfn;
  unsigned int order;
  int migratetype;
  char __data[0];
};

struct trace_event_raw_mm_page_alloc_extfrag {
  struct trace_entry ent;
  long unsigned int pfn;
  int alloc_order;
  int fallback_order;
  int alloc_migratetype;
  int fallback_migratetype;
  int change_ownership;
  char __data[0];
};

struct trace_event_raw_rss_stat {
  struct trace_entry ent;
  unsigned int mm_id;
  unsigned int curr;
  int member;
  long int size;
  char __data[0];
};

struct trace_event_data_offsets_kmem_alloc {};

struct trace_event_data_offsets_kmem_alloc_node {};

struct trace_event_data_offsets_kfree {};

struct trace_event_data_offsets_kmem_cache_free {
  u32 name;
};

struct trace_event_data_offsets_mm_page_free {};

struct trace_event_data_offsets_mm_page_free_batched {};

struct trace_event_data_offsets_mm_page_alloc {};

struct trace_event_data_offsets_mm_page {};

struct trace_event_data_offsets_mm_page_pcpu_drain {};

struct trace_event_data_offsets_mm_page_alloc_extfrag {};

struct trace_event_data_offsets_rss_stat {};

typedef void (*btf_trace_kmalloc)(
    void*,
    long unsigned int,
    const void*,
    size_t,
    size_t,
    gfp_t);

typedef void (*btf_trace_kmem_cache_alloc)(
    void*,
    long unsigned int,
    const void*,
    size_t,
    size_t,
    gfp_t);

typedef void (*btf_trace_kmalloc_node)(
    void*,
    long unsigned int,
    const void*,
    size_t,
    size_t,
    gfp_t,
    int);

typedef void (*btf_trace_kmem_cache_alloc_node)(
    void*,
    long unsigned int,
    const void*,
    size_t,
    size_t,
    gfp_t,
    int);

typedef void (*btf_trace_kfree)(void*, long unsigned int, const void*);

typedef void (*btf_trace_kmem_cache_free)(
    void*,
    long unsigned int,
    const void*,
    const char*);

typedef void (*btf_trace_mm_page_free)(void*, struct page*, unsigned int);

typedef void (*btf_trace_mm_page_free_batched)(void*, struct page*);

typedef void (
    *btf_trace_mm_page_alloc)(void*, struct page*, unsigned int, gfp_t, int);

typedef void (*btf_trace_mm_page_alloc_zone_locked)(
    void*,
    struct page*,
    unsigned int,
    int);

typedef void (
    *btf_trace_mm_page_pcpu_drain)(void*, struct page*, unsigned int, int);

typedef void (
    *btf_trace_mm_page_alloc_extfrag)(void*, struct page*, int, int, int, int);

typedef void (*btf_trace_rss_stat)(void*, struct mm_struct*, int, long int);

struct slabinfo {
  long unsigned int active_objs;
  long unsigned int num_objs;
  long unsigned int active_slabs;
  long unsigned int num_slabs;
  long unsigned int shared_avail;
  unsigned int limit;
  unsigned int batchcount;
  unsigned int shared;
  unsigned int objects_per_slab;
  unsigned int cache_order;
};

struct kmem_obj_info {
  void* kp_ptr;
  struct page* kp_page;
  void* kp_objp;
  long unsigned int kp_data_offset;
  struct kmem_cache* kp_slab_cache;
  void* kp_ret;
  void* kp_stack[16];
};

enum pageblock_bits {
  PB_migrate = 0,
  PB_migrate_end = 2,
  PB_migrate_skip = 3,
  NR_PAGEBLOCK_BITS = 4,
};

struct alloc_context {
  struct zonelist* zonelist;
  nodemask_t* nodemask;
  struct zoneref* preferred_zoneref;
  int migratetype;
  enum zone_type highest_zoneidx;
  bool spread_dirty_pages;
};

struct trace_event_raw_mm_compaction_isolate_template {
  struct trace_entry ent;
  long unsigned int start_pfn;
  long unsigned int end_pfn;
  long unsigned int nr_scanned;
  long unsigned int nr_taken;
  char __data[0];
};

struct trace_event_raw_mm_compaction_migratepages {
  struct trace_entry ent;
  long unsigned int nr_migrated;
  long unsigned int nr_failed;
  char __data[0];
};

struct trace_event_raw_mm_compaction_begin {
  struct trace_entry ent;
  long unsigned int zone_start;
  long unsigned int migrate_pfn;
  long unsigned int free_pfn;
  long unsigned int zone_end;
  bool sync;
  char __data[0];
};

struct trace_event_raw_mm_compaction_end {
  struct trace_entry ent;
  long unsigned int zone_start;
  long unsigned int migrate_pfn;
  long unsigned int free_pfn;
  long unsigned int zone_end;
  bool sync;
  int status;
  char __data[0];
};

struct trace_event_raw_mm_compaction_try_to_compact_pages {
  struct trace_entry ent;
  int order;
  gfp_t gfp_mask;
  int prio;
  char __data[0];
};

struct trace_event_raw_mm_compaction_suitable_template {
  struct trace_entry ent;
  int nid;
  enum zone_type idx;
  int order;
  int ret;
  char __data[0];
};

struct trace_event_raw_mm_compaction_defer_template {
  struct trace_entry ent;
  int nid;
  enum zone_type idx;
  int order;
  unsigned int considered;
  unsigned int defer_shift;
  int order_failed;
  char __data[0];
};

struct trace_event_raw_mm_compaction_kcompactd_sleep {
  struct trace_entry ent;
  int nid;
  char __data[0];
};

struct trace_event_raw_kcompactd_wake_template {
  struct trace_entry ent;
  int nid;
  int order;
  enum zone_type highest_zoneidx;
  char __data[0];
};

struct trace_event_data_offsets_mm_compaction_isolate_template {};

struct trace_event_data_offsets_mm_compaction_migratepages {};

struct trace_event_data_offsets_mm_compaction_begin {};

struct trace_event_data_offsets_mm_compaction_end {};

struct trace_event_data_offsets_mm_compaction_try_to_compact_pages {};

struct trace_event_data_offsets_mm_compaction_suitable_template {};

struct trace_event_data_offsets_mm_compaction_defer_template {};

struct trace_event_data_offsets_mm_compaction_kcompactd_sleep {};

struct trace_event_data_offsets_kcompactd_wake_template {};

typedef void (*btf_trace_mm_compaction_isolate_migratepages)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int);

typedef void (*btf_trace_mm_compaction_isolate_freepages)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int);

typedef void (*btf_trace_mm_compaction_migratepages)(
    void*,
    long unsigned int,
    int,
    struct list_head*);

typedef void (*btf_trace_mm_compaction_begin)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    bool);

typedef void (*btf_trace_mm_compaction_end)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    bool,
    int);

typedef void (
    *btf_trace_mm_compaction_try_to_compact_pages)(void*, int, gfp_t, int);

typedef void (*btf_trace_mm_compaction_finished)(void*, struct zone*, int, int);

typedef void (*btf_trace_mm_compaction_suitable)(void*, struct zone*, int, int);

typedef void (*btf_trace_mm_compaction_deferred)(void*, struct zone*, int);

typedef void (
    *btf_trace_mm_compaction_defer_compaction)(void*, struct zone*, int);

typedef void (*btf_trace_mm_compaction_defer_reset)(void*, struct zone*, int);

typedef void (*btf_trace_mm_compaction_kcompactd_sleep)(void*, int);

typedef void (
    *btf_trace_mm_compaction_wakeup_kcompactd)(void*, int, int, enum zone_type);

typedef void (
    *btf_trace_mm_compaction_kcompactd_wake)(void*, int, int, enum zone_type);

typedef enum {
  ISOLATE_ABORT = 0,
  ISOLATE_NONE = 1,
  ISOLATE_SUCCESS = 2,
} isolate_migrate_t;

struct anon_vma_chain {
  struct vm_area_struct* vma;
  struct anon_vma* anon_vma;
  struct list_head same_vma;
  struct rb_node rb;
  long unsigned int rb_subtree_last;
};

enum lru_status {
  LRU_REMOVED = 0,
  LRU_REMOVED_RETRY = 1,
  LRU_ROTATE = 2,
  LRU_SKIP = 3,
  LRU_RETRY = 4,
};

typedef enum lru_status (*list_lru_walk_cb)(
    struct list_head*,
    struct list_lru_one*,
    spinlock_t*,
    void*);

typedef struct {
  long unsigned int pd;
} hugepd_t;

struct migration_target_control {
  int nid;
  nodemask_t* nmask;
  gfp_t gfp_mask;
};

struct follow_page_context {
  struct dev_pagemap* pgmap;
  unsigned int page_mask;
};

struct trace_event_raw_mmap_lock_start_locking {
  struct trace_entry ent;
  struct mm_struct* mm;
  u32 __data_loc_memcg_path;
  bool write;
  char __data[0];
};

struct trace_event_raw_mmap_lock_acquire_returned {
  struct trace_entry ent;
  struct mm_struct* mm;
  u32 __data_loc_memcg_path;
  bool write;
  bool success;
  char __data[0];
};

struct trace_event_raw_mmap_lock_released {
  struct trace_entry ent;
  struct mm_struct* mm;
  u32 __data_loc_memcg_path;
  bool write;
  char __data[0];
};

struct trace_event_data_offsets_mmap_lock_start_locking {
  u32 memcg_path;
};

struct trace_event_data_offsets_mmap_lock_acquire_returned {
  u32 memcg_path;
};

struct trace_event_data_offsets_mmap_lock_released {
  u32 memcg_path;
};

typedef void (*btf_trace_mmap_lock_start_locking)(
    void*,
    struct mm_struct*,
    const char*,
    bool);

typedef void (*btf_trace_mmap_lock_acquire_returned)(
    void*,
    struct mm_struct*,
    const char*,
    bool,
    bool);

typedef void (
    *btf_trace_mmap_lock_released)(void*, struct mm_struct*, const char*, bool);

struct memcg_path {
  local_lock_t lock;
  char* buf;
  local_t buf_idx;
};

typedef unsigned int pgtbl_mod_mask;

struct zap_details {
  struct address_space* check_mapping;
  long unsigned int first_index;
  long unsigned int last_index;
  struct page* single_page;
};

typedef int (*pte_fn_t)(pte_t*, long unsigned int, void*);

enum {
  SWP_USED = 1,
  SWP_WRITEOK = 2,
  SWP_DISCARDABLE = 4,
  SWP_DISCARDING = 8,
  SWP_SOLIDSTATE = 16,
  SWP_CONTINUED = 32,
  SWP_BLKDEV = 64,
  SWP_ACTIVATED = 128,
  SWP_FS_OPS = 256,
  SWP_AREA_DISCARD = 512,
  SWP_PAGE_DISCARD = 1024,
  SWP_STABLE_WRITES = 2048,
  SWP_SYNCHRONOUS_IO = 4096,
  SWP_VALID = 8192,
  SWP_SCANNING = 16384,
};

struct copy_subpage_arg {
  struct page* dst;
  struct page* src;
  struct vm_area_struct* vma;
};

struct mm_walk;

struct mm_walk_ops {
  int (*pgd_entry)(
      pgd_t*,
      long unsigned int,
      long unsigned int,
      struct mm_walk*);
  int (*p4d_entry)(
      p4d_t*,
      long unsigned int,
      long unsigned int,
      struct mm_walk*);
  int (*pud_entry)(
      pud_t*,
      long unsigned int,
      long unsigned int,
      struct mm_walk*);
  int (*pmd_entry)(
      pmd_t*,
      long unsigned int,
      long unsigned int,
      struct mm_walk*);
  int (*pte_entry)(
      pte_t*,
      long unsigned int,
      long unsigned int,
      struct mm_walk*);
  int (*pte_hole)(long unsigned int, long unsigned int, int, struct mm_walk*);
  int (*hugetlb_entry)(
      pte_t*,
      long unsigned int,
      long unsigned int,
      long unsigned int,
      struct mm_walk*);
  int (*test_walk)(long unsigned int, long unsigned int, struct mm_walk*);
  int (*pre_vma)(long unsigned int, long unsigned int, struct mm_walk*);
  void (*post_vma)(struct mm_walk*);
};

enum page_walk_action {
  ACTION_SUBTREE = 0,
  ACTION_CONTINUE = 1,
  ACTION_AGAIN = 2,
};

struct mm_walk {
  const struct mm_walk_ops* ops;
  struct mm_struct* mm;
  pgd_t* pgd;
  struct vm_area_struct* vma;
  enum page_walk_action action;
  bool no_vma;
  void* private;
};

enum {
  HUGETLB_SHMFS_INODE = 1,
  HUGETLB_ANONHUGE_INODE = 2,
};

struct trace_event_raw_vm_unmapped_area {
  struct trace_entry ent;
  long unsigned int addr;
  long unsigned int total_vm;
  long unsigned int flags;
  long unsigned int length;
  long unsigned int low_limit;
  long unsigned int high_limit;
  long unsigned int align_mask;
  long unsigned int align_offset;
  char __data[0];
};

struct trace_event_data_offsets_vm_unmapped_area {};

typedef void (*btf_trace_vm_unmapped_area)(
    void*,
    long unsigned int,
    struct vm_unmapped_area_info*);

enum pgt_entry {
  NORMAL_PMD = 0,
  HPAGE_PMD = 1,
  NORMAL_PUD = 2,
};

struct rmap_walk_control {
  void* arg;
  bool (*rmap_one)(
      struct page*,
      struct vm_area_struct*,
      long unsigned int,
      void*);
  int (*done)(struct page*);
  struct anon_vma* (*anon_lock)(struct page*);
  bool (*invalid_vma)(struct vm_area_struct*, void*);
};

struct page_referenced_arg {
  int mapcount;
  int referenced;
  long unsigned int vm_flags;
  struct mem_cgroup* memcg;
};

struct vmap_area {
  long unsigned int va_start;
  long unsigned int va_end;
  struct rb_node rb_node;
  struct list_head list;
  union {
    long unsigned int subtree_max_size;
    struct vm_struct* vm;
  };
};

struct vfree_deferred {
  struct llist_head list;
  struct work_struct wq;
};

enum fit_type {
  NOTHING_FIT = 0,
  FL_FIT_TYPE = 1,
  LE_FIT_TYPE = 2,
  RE_FIT_TYPE = 3,
  NE_FIT_TYPE = 4,
};

struct vmap_block_queue {
  spinlock_t lock;
  struct list_head free;
};

struct vmap_block {
  spinlock_t lock;
  struct vmap_area* va;
  long unsigned int free;
  long unsigned int dirty;
  long unsigned int dirty_min;
  long unsigned int dirty_max;
  struct list_head free_list;
  struct callback_head callback_head;
  struct list_head purge;
};

struct page_frag_cache {
  void* va;
  __u16 offset;
  __u16 size;
  unsigned int pagecnt_bias;
  bool pfmemalloc;
};

enum zone_flags {
  ZONE_BOOSTED_WATERMARK = 0,
};

typedef int fpi_t;

struct pcpu_drain {
  struct zone* zone;
  struct work_struct work;
};

struct page_alloc_stat {
  long unsigned int requests[11];
  long unsigned int failures[11];
};

struct mminit_pfnnid_cache {
  long unsigned int last_start;
  long unsigned int last_end;
  int last_nid;
};

struct madvise_walk_private {
  struct mmu_gather* tlb;
  bool pageout;
};

enum {
  BIO_NO_PAGE_REF = 0,
  BIO_CLONED = 1,
  BIO_BOUNCED = 2,
  BIO_WORKINGSET = 3,
  BIO_QUIET = 4,
  BIO_CHAIN = 5,
  BIO_REFFED = 6,
  BIO_THROTTLED = 7,
  BIO_TRACE_COMPLETION = 8,
  BIO_CGROUP_ACCT = 9,
  BIO_TRACKED = 10,
  BIO_REMAPPED = 11,
  BIO_ZONE_WRITE_LOCKED = 12,
  BIO_PERCPU_CACHE = 13,
  BIO_FLAG_LAST = 14,
};

struct vma_swap_readahead {
  short unsigned int win;
  short unsigned int offset;
  short unsigned int nr_pte;
  pte_t* ptes;
};

union swap_header {
  struct {
    char reserved[4086];
    char magic[10];
  } magic;
  struct {
    char bootbits[1024];
    __u32 version;
    __u32 last_page;
    __u32 nr_badpages;
    unsigned char sws_uuid[16];
    unsigned char sws_volume[16];
    __u32 padding[117];
    __u32 badpages[1];
  } info;
};

struct swap_extent {
  struct rb_node rb_node;
  long unsigned int start_page;
  long unsigned int nr_pages;
  sector_t start_block;
};

struct swap_slots_cache {
  bool lock_initialized;
  struct mutex alloc_lock;
  swp_entry_t* slots;
  int nr;
  int cur;
  spinlock_t free_lock;
  swp_entry_t* slots_ret;
  int n_ret;
};

struct frontswap_ops {
  void (*init)(unsigned int);
  int (*store)(unsigned int, long unsigned int, struct page*);
  int (*load)(unsigned int, long unsigned int, struct page*);
  void (*invalidate_page)(unsigned int, long unsigned int);
  void (*invalidate_area)(unsigned int);
  struct frontswap_ops* next;
};

struct crypto_wait {
  struct completion completion;
  int err;
};

struct zpool;

struct zpool_ops {
  int (*evict)(struct zpool*, long unsigned int);
};

enum zpool_mapmode {
  ZPOOL_MM_RW = 0,
  ZPOOL_MM_RO = 1,
  ZPOOL_MM_WO = 2,
  ZPOOL_MM_DEFAULT = 0,
};

struct acomp_req {
  struct crypto_async_request base;
  struct scatterlist* src;
  struct scatterlist* dst;
  unsigned int slen;
  unsigned int dlen;
  u32 flags;
  void* __ctx[0];
};

struct crypto_acomp {
  int (*compress)(struct acomp_req*);
  int (*decompress)(struct acomp_req*);
  void (*dst_free)(struct scatterlist*);
  unsigned int reqsize;
  struct crypto_tfm base;
};

struct crypto_acomp_ctx {
  struct crypto_acomp* acomp;
  struct acomp_req* req;
  struct crypto_wait wait;
  u8* dstmem;
  struct mutex* mutex;
};

struct zswap_pool {
  struct zpool* zpool;
  struct crypto_acomp_ctx* acomp_ctx;
  struct kref kref;
  struct list_head list;
  struct work_struct release_work;
  struct work_struct shrink_work;
  struct hlist_node node;
  char tfm_name[128];
};

struct zswap_entry {
  struct rb_node rbnode;
  long unsigned int offset;
  int refcount;
  unsigned int length;
  struct zswap_pool* pool;
  union {
    long unsigned int handle;
    long unsigned int value;
  };
  struct obj_cgroup* objcg;
};

struct zswap_header {
  swp_entry_t swpentry;
};

struct zswap_tree {
  struct rb_root rbroot;
  spinlock_t lock;
};

enum zswap_get_swap_ret {
  ZSWAP_SWAPCACHE_NEW = 0,
  ZSWAP_SWAPCACHE_EXIST = 1,
  ZSWAP_SWAPCACHE_FAIL = 2,
};

struct dma_pool {
  struct list_head page_list;
  spinlock_t lock;
  size_t size;
  struct device* dev;
  size_t allocation;
  size_t boundary;
  char name[32];
  struct list_head pools;
};

struct dma_page {
  struct list_head page_list;
  void* vaddr;
  dma_addr_t dma;
  unsigned int in_use;
  unsigned int offset;
};

enum string_size_units {
  STRING_UNITS_10 = 0,
  STRING_UNITS_2 = 1,
};

struct resv_map {
  struct kref refs;
  spinlock_t lock;
  struct list_head regions;
  long int adds_in_progress;
  struct list_head region_cache;
  long int region_cache_count;
  struct page_counter* reservation_counter;
  long unsigned int pages_per_hpage;
  struct cgroup_subsys_state* css;
};

struct file_region {
  struct list_head link;
  long int from;
  long int to;
  struct page_counter* reservation_counter;
  struct cgroup_subsys_state* css;
};

enum hugetlb_page_flags {
  HPG_restore_reserve = 0,
  HPG_migratable = 1,
  HPG_temporary = 2,
  HPG_freed = 3,
  __NR_HPAGEFLAGS = 4,
};

struct huge_bootmem_page {
  struct list_head list;
  struct hstate* hstate;
};

enum hugetlb_memory_event {
  HUGETLB_MAX = 0,
  HUGETLB_NR_MEMORY_EVENTS = 1,
};

struct hugetlb_cgroup {
  struct cgroup_subsys_state css;
  struct page_counter hugepage[2];
  struct page_counter rsvd_hugepage[2];
  atomic_long_t events[2];
  atomic_long_t events_local[2];
  struct cgroup_file events_file[2];
  struct cgroup_file events_local_file[2];
};

enum vma_resv_mode {
  VMA_NEEDS_RESV = 0,
  VMA_COMMIT_RESV = 1,
  VMA_END_RESV = 2,
  VMA_ADD_RESV = 3,
  VMA_DEL_RESV = 4,
};

struct node_hstate {
  struct kobject* hugepages_kobj;
  struct kobject* hstate_kobjs[2];
};

struct nodemask_scratch {
  nodemask_t mask1;
  nodemask_t mask2;
};

struct sp_node {
  struct rb_node nd;
  long unsigned int start;
  long unsigned int end;
  struct mempolicy* policy;
};

struct mempolicy_operations {
  int (*create)(struct mempolicy*, const nodemask_t*);
  void (*rebind)(struct mempolicy*, const nodemask_t*);
};

struct queue_pages {
  struct list_head* pagelist;
  long unsigned int flags;
  nodemask_t* nmask;
  long unsigned int start;
  long unsigned int end;
  struct vm_area_struct* first;
};

struct mmu_notifier_subscriptions {
  struct hlist_head list;
  bool has_itree;
  spinlock_t lock;
  long unsigned int invalidate_seq;
  long unsigned int active_invalidate_ranges;
  struct rb_root_cached itree;
  wait_queue_head_t wq;
  struct hlist_head deferred_list;
};

struct interval_tree_node {
  struct rb_node rb;
  long unsigned int start;
  long unsigned int last;
  long unsigned int __subtree_last;
};

struct mmu_interval_notifier;

struct mmu_interval_notifier_ops {
  bool (*invalidate)(
      struct mmu_interval_notifier*,
      const struct mmu_notifier_range*,
      long unsigned int);
};

struct mmu_interval_notifier {
  struct interval_tree_node interval_tree;
  const struct mmu_interval_notifier_ops* ops;
  struct mm_struct* mm;
  struct hlist_node deferred_item;
  long unsigned int invalidate_seq;
};

struct memory_notify {
  long unsigned int start_pfn;
  long unsigned int nr_pages;
  int status_change_nid_normal;
  int status_change_nid_high;
  int status_change_nid;
};

struct rmap_item;

struct mm_slot {
  struct hlist_node link;
  struct list_head mm_list;
  struct rmap_item* rmap_list;
  struct mm_struct* mm;
};

struct stable_node;

struct rmap_item {
  struct rmap_item* rmap_list;
  union {
    struct anon_vma* anon_vma;
    int nid;
  };
  struct mm_struct* mm;
  long unsigned int address;
  unsigned int oldchecksum;
  union {
    struct rb_node node;
    struct {
      struct stable_node* head;
      struct hlist_node hlist;
    };
  };
};

struct ksm_scan {
  struct mm_slot* mm_slot;
  long unsigned int address;
  struct rmap_item** rmap_list;
  long unsigned int seqnr;
};

struct stable_node {
  union {
    struct rb_node node;
    struct {
      struct list_head* head;
      struct {
        struct hlist_node hlist_dup;
        struct list_head list;
      };
    };
  };
  struct hlist_head hlist;
  union {
    long unsigned int kpfn;
    long unsigned int chain_prune_time;
  };
  int rmap_hlist_len;
  int nid;
};

enum get_ksm_page_flags {
  GET_KSM_PAGE_NOLOCK = 0,
  GET_KSM_PAGE_LOCK = 1,
  GET_KSM_PAGE_TRYLOCK = 2,
};

enum stat_item {
  ALLOC_FASTPATH = 0,
  ALLOC_SLOWPATH = 1,
  FREE_FASTPATH = 2,
  FREE_SLOWPATH = 3,
  FREE_FROZEN = 4,
  FREE_ADD_PARTIAL = 5,
  FREE_REMOVE_PARTIAL = 6,
  ALLOC_FROM_PARTIAL = 7,
  ALLOC_SLAB = 8,
  ALLOC_REFILL = 9,
  ALLOC_NODE_MISMATCH = 10,
  FREE_SLAB = 11,
  CPUSLAB_FLUSH = 12,
  DEACTIVATE_FULL = 13,
  DEACTIVATE_EMPTY = 14,
  DEACTIVATE_TO_HEAD = 15,
  DEACTIVATE_TO_TAIL = 16,
  DEACTIVATE_REMOTE_FREES = 17,
  DEACTIVATE_BYPASS = 18,
  ORDER_FALLBACK = 19,
  CMPXCHG_DOUBLE_CPU_FAIL = 20,
  CMPXCHG_DOUBLE_FAIL = 21,
  CPU_PARTIAL_ALLOC = 22,
  CPU_PARTIAL_FREE = 23,
  CPU_PARTIAL_NODE = 24,
  CPU_PARTIAL_DRAIN = 25,
  NR_SLUB_STAT_ITEMS = 26,
};

struct track {
  long unsigned int addr;
  long unsigned int addrs[16];
  int cpu;
  int pid;
  long unsigned int when;
};

enum track_item {
  TRACK_ALLOC = 0,
  TRACK_FREE = 1,
};

struct detached_freelist {
  struct page* page;
  void* tail;
  void* freelist;
  int cnt;
  struct kmem_cache* s;
};

struct location {
  long unsigned int count;
  long unsigned int addr;
  long long int sum_time;
  long int min_time;
  long int max_time;
  long int min_pid;
  long int max_pid;
  long unsigned int cpus[2];
  nodemask_t nodes;
};

struct loc_track {
  long unsigned int max;
  long unsigned int count;
  struct location* loc;
};

enum slab_stat_type {
  SL_ALL = 0,
  SL_PARTIAL = 1,
  SL_CPU = 2,
  SL_OBJECTS = 3,
  SL_TOTAL = 4,
};

struct slab_attribute {
  struct attribute attr;
  ssize_t (*show)(struct kmem_cache*, char*);
  ssize_t (*store)(struct kmem_cache*, const char*, size_t);
};

struct saved_alias {
  struct kmem_cache* s;
  const char* name;
  struct saved_alias* next;
};

enum slab_modes {
  M_NONE = 0,
  M_PARTIAL = 1,
  M_FULL = 2,
  M_FREE = 3,
};

enum {
  MMOP_OFFLINE = 0,
  MMOP_ONLINE = 1,
  MMOP_ONLINE_KERNEL = 2,
  MMOP_ONLINE_MOVABLE = 3,
};

typedef int mhp_t;

typedef void (*online_page_callback_t)(struct page*, unsigned int);

struct memory_block {
  long unsigned int start_section_nr;
  long unsigned int state;
  int online_type;
  int nid;
  struct device dev;
};

struct buffer_head;

typedef void bh_end_io_t(struct buffer_head*, int);

struct buffer_head {
  long unsigned int b_state;
  struct buffer_head* b_this_page;
  struct page* b_page;
  sector_t b_blocknr;
  size_t b_size;
  char* b_data;
  struct block_device* b_bdev;
  bh_end_io_t* b_end_io;
  void* b_private;
  struct list_head b_assoc_buffers;
  struct address_space* b_assoc_map;
  atomic_t b_count;
  spinlock_t b_uptodate_lock;
};

typedef struct page* new_page_t(struct page*, long unsigned int);

typedef void free_page_t(struct page*, long unsigned int);

enum bh_state_bits {
  BH_Uptodate = 0,
  BH_Dirty = 1,
  BH_Lock = 2,
  BH_Req = 3,
  BH_Mapped = 4,
  BH_New = 5,
  BH_Async_Read = 6,
  BH_Async_Write = 7,
  BH_Delay = 8,
  BH_Boundary = 9,
  BH_Write_EIO = 10,
  BH_Unwritten = 11,
  BH_Quiet = 12,
  BH_Meta = 13,
  BH_Prio = 14,
  BH_Defer_Completion = 15,
  BH_PrivateStart = 16,
};

struct trace_event_raw_mm_migrate_pages {
  struct trace_entry ent;
  long unsigned int succeeded;
  long unsigned int failed;
  long unsigned int thp_succeeded;
  long unsigned int thp_failed;
  long unsigned int thp_split;
  enum migrate_mode mode;
  int reason;
  char __data[0];
};

struct trace_event_data_offsets_mm_migrate_pages {};

typedef void (*btf_trace_mm_migrate_pages)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    enum migrate_mode,
    int);

enum scan_result {
  SCAN_FAIL = 0,
  SCAN_SUCCEED = 1,
  SCAN_PMD_NULL = 2,
  SCAN_EXCEED_NONE_PTE = 3,
  SCAN_EXCEED_SWAP_PTE = 4,
  SCAN_EXCEED_SHARED_PTE = 5,
  SCAN_PTE_NON_PRESENT = 6,
  SCAN_PTE_UFFD_WP = 7,
  SCAN_PAGE_RO = 8,
  SCAN_LACK_REFERENCED_PAGE = 9,
  SCAN_PAGE_NULL = 10,
  SCAN_SCAN_ABORT = 11,
  SCAN_PAGE_COUNT = 12,
  SCAN_PAGE_LRU = 13,
  SCAN_PAGE_LOCK = 14,
  SCAN_PAGE_ANON = 15,
  SCAN_PAGE_COMPOUND = 16,
  SCAN_ANY_PROCESS = 17,
  SCAN_VMA_NULL = 18,
  SCAN_VMA_CHECK = 19,
  SCAN_ADDRESS_RANGE = 20,
  SCAN_SWAP_CACHE_PAGE = 21,
  SCAN_DEL_PAGE_LRU = 22,
  SCAN_ALLOC_HUGE_PAGE_FAIL = 23,
  SCAN_CGROUP_CHARGE_FAIL = 24,
  SCAN_TRUNCATED = 25,
  SCAN_PAGE_HAS_PRIVATE = 26,
};

struct trace_event_raw_mm_khugepaged_scan_pmd {
  struct trace_entry ent;
  struct mm_struct* mm;
  long unsigned int pfn;
  bool writable;
  int referenced;
  int none_or_zero;
  int status;
  int unmapped;
  char __data[0];
};

struct trace_event_raw_mm_collapse_huge_page {
  struct trace_entry ent;
  struct mm_struct* mm;
  int isolated;
  int status;
  char __data[0];
};

struct trace_event_raw_mm_collapse_huge_page_isolate {
  struct trace_entry ent;
  long unsigned int pfn;
  int none_or_zero;
  int referenced;
  bool writable;
  int status;
  char __data[0];
};

struct trace_event_raw_mm_collapse_huge_page_swapin {
  struct trace_entry ent;
  struct mm_struct* mm;
  int swapped_in;
  int referenced;
  int ret;
  char __data[0];
};

struct trace_event_data_offsets_mm_khugepaged_scan_pmd {};

struct trace_event_data_offsets_mm_collapse_huge_page {};

struct trace_event_data_offsets_mm_collapse_huge_page_isolate {};

struct trace_event_data_offsets_mm_collapse_huge_page_swapin {};

typedef void (*btf_trace_mm_khugepaged_scan_pmd)(
    void*,
    struct mm_struct*,
    struct page*,
    bool,
    int,
    int,
    int,
    int);

typedef void (
    *btf_trace_mm_collapse_huge_page)(void*, struct mm_struct*, int, int);

typedef void (*btf_trace_mm_collapse_huge_page_isolate)(
    void*,
    struct page*,
    int,
    int,
    bool,
    int);

typedef void (*btf_trace_mm_collapse_huge_page_swapin)(
    void*,
    struct mm_struct*,
    int,
    int,
    int);

struct mm_slot___2 {
  struct hlist_node hash;
  struct list_head mm_node;
  struct mm_struct* mm;
  int nr_pte_mapped_thp;
  long unsigned int pte_mapped_thp[8];
};

struct khugepaged_scan {
  struct list_head mm_head;
  struct mm_slot___2* mm_slot;
  long unsigned int address;
};

struct mem_cgroup_reclaim_cookie {
  pg_data_t* pgdat;
  unsigned int generation;
};

struct mem_cgroup_tree_per_node {
  struct rb_root rb_root;
  struct rb_node* rb_rightmost;
  spinlock_t lock;
};

struct mem_cgroup_tree {
  struct mem_cgroup_tree_per_node* rb_tree_per_node[8];
};

struct mem_cgroup_eventfd_list {
  struct list_head list;
  struct eventfd_ctx* eventfd;
};

struct mem_cgroup_event {
  struct mem_cgroup* memcg;
  struct eventfd_ctx* eventfd;
  struct list_head list;
  int (*register_event)(struct mem_cgroup*, struct eventfd_ctx*, const char*);
  void (*unregister_event)(struct mem_cgroup*, struct eventfd_ctx*);
  poll_table pt;
  wait_queue_head_t* wqh;
  wait_queue_entry_t wait;
  struct work_struct remove;
};

struct move_charge_struct {
  spinlock_t lock;
  struct mm_struct* mm;
  struct mem_cgroup* from;
  struct mem_cgroup* to;
  long unsigned int flags;
  long unsigned int precharge;
  long unsigned int moved_charge;
  long unsigned int moved_swap;
  struct task_struct* moving_task;
  wait_queue_head_t waitq;
};

enum res_type {
  _MEM = 0,
  _MEMSWAP = 1,
  _OOM_TYPE = 2,
  _KMEM = 3,
  _TCP = 4,
};

struct memory_stat {
  const char* name;
  unsigned int idx;
};

struct oom_wait_info {
  struct mem_cgroup* memcg;
  wait_queue_entry_t wait;
};

enum oom_status {
  OOM_SUCCESS = 0,
  OOM_FAILED = 1,
  OOM_ASYNC = 2,
  OOM_SKIPPED = 3,
};

struct memcg_stock_pcp {
  struct mem_cgroup* cached;
  unsigned int nr_pages;
  struct obj_cgroup* cached_objcg;
  unsigned int nr_bytes;
  struct work_struct work;
  long unsigned int flags;
};

enum {
  RES_USAGE = 0,
  RES_LIMIT = 1,
  RES_MAX_USAGE = 2,
  RES_FAILCNT = 3,
  RES_SOFT_LIMIT = 4,
};

union mc_target {
  struct page* page;
  swp_entry_t ent;
};

enum mc_target_type {
  MC_TARGET_NONE = 0,
  MC_TARGET_PAGE = 1,
  MC_TARGET_SWAP = 2,
  MC_TARGET_DEVICE = 3,
};

struct uncharge_gather {
  struct mem_cgroup* memcg;
  long unsigned int nr_memory;
  long unsigned int pgpgout;
  long unsigned int nr_kmem;
  struct page* dummy_page;
};

struct numa_stat {
  const char* name;
  unsigned int lru_mask;
};

enum vmpressure_levels {
  VMPRESSURE_LOW = 0,
  VMPRESSURE_MEDIUM = 1,
  VMPRESSURE_CRITICAL = 2,
  VMPRESSURE_NUM_LEVELS = 3,
};

enum vmpressure_modes {
  VMPRESSURE_NO_PASSTHROUGH = 0,
  VMPRESSURE_HIERARCHY = 1,
  VMPRESSURE_LOCAL = 2,
  VMPRESSURE_NUM_MODES = 3,
};

struct vmpressure_event {
  struct eventfd_ctx* efd;
  enum vmpressure_levels level;
  enum vmpressure_modes mode;
  struct list_head node;
};

struct swap_cgroup_ctrl {
  struct page** map;
  long unsigned int length;
  spinlock_t lock;
};

struct swap_cgroup {
  short unsigned int id;
};

enum {
  RES_USAGE___2 = 0,
  RES_RSVD_USAGE = 1,
  RES_LIMIT___2 = 2,
  RES_RSVD_LIMIT = 3,
  RES_MAX_USAGE___2 = 4,
  RES_RSVD_MAX_USAGE = 5,
  RES_FAILCNT___2 = 6,
  RES_RSVD_FAILCNT = 7,
};

enum mf_result {
  MF_IGNORED = 0,
  MF_FAILED = 1,
  MF_DELAYED = 2,
  MF_RECOVERED = 3,
};

enum mf_action_page_type {
  MF_MSG_KERNEL = 0,
  MF_MSG_KERNEL_HIGH_ORDER = 1,
  MF_MSG_SLAB = 2,
  MF_MSG_DIFFERENT_COMPOUND = 3,
  MF_MSG_POISONED_HUGE = 4,
  MF_MSG_HUGE = 5,
  MF_MSG_FREE_HUGE = 6,
  MF_MSG_NON_PMD_HUGE = 7,
  MF_MSG_UNMAP_FAILED = 8,
  MF_MSG_DIRTY_SWAPCACHE = 9,
  MF_MSG_CLEAN_SWAPCACHE = 10,
  MF_MSG_DIRTY_MLOCKED_LRU = 11,
  MF_MSG_CLEAN_MLOCKED_LRU = 12,
  MF_MSG_DIRTY_UNEVICTABLE_LRU = 13,
  MF_MSG_CLEAN_UNEVICTABLE_LRU = 14,
  MF_MSG_DIRTY_LRU = 15,
  MF_MSG_CLEAN_LRU = 16,
  MF_MSG_TRUNCATED_LRU = 17,
  MF_MSG_BUDDY = 18,
  MF_MSG_BUDDY_2ND = 19,
  MF_MSG_DAX = 20,
  MF_MSG_UNSPLIT_THP = 21,
  MF_MSG_UNKNOWN = 22,
};

typedef long unsigned int dax_entry_t;

struct __kfifo {
  unsigned int in;
  unsigned int out;
  unsigned int mask;
  unsigned int esize;
  void* data;
};

struct to_kill {
  struct list_head nd;
  struct task_struct* tsk;
  long unsigned int addr;
  short int size_shift;
};

struct page_state {
  long unsigned int mask;
  long unsigned int res;
  enum mf_action_page_type type;
  int (*action)(struct page*, long unsigned int);
};

struct memory_failure_entry {
  long unsigned int pfn;
  int flags;
};

struct memory_failure_cpu {
  struct {
    union {
      struct __kfifo kfifo;
      struct memory_failure_entry* type;
      const struct memory_failure_entry* const_type;
      char (*rectype)[0];
      struct memory_failure_entry* ptr;
      const struct memory_failure_entry* ptr_const;
    };
    struct memory_failure_entry buf[16];
  } fifo;
  spinlock_t lock;
  struct work_struct work;
};

struct trace_event_raw_test_pages_isolated {
  struct trace_entry ent;
  long unsigned int start_pfn;
  long unsigned int end_pfn;
  long unsigned int fin_pfn;
  char __data[0];
};

struct trace_event_data_offsets_test_pages_isolated {};

typedef void (*btf_trace_test_pages_isolated)(
    void*,
    long unsigned int,
    long unsigned int,
    long unsigned int);

struct zpool_driver;

struct zpool {
  struct zpool_driver* driver;
  void* pool;
  const struct zpool_ops* ops;
  bool evictable;
  bool can_sleep_mapped;
  struct list_head list;
};

struct zpool_driver {
  char* type;
  struct module* owner;
  atomic_t refcount;
  struct list_head list;
  void* (*create)(const char*, gfp_t, const struct zpool_ops*, struct zpool*);
  void (*destroy)(void*);
  bool malloc_support_movable;
  int (*malloc)(void*, size_t, gfp_t, long unsigned int*);
  void (*free)(void*, long unsigned int);
  int (*shrink)(void*, unsigned int, unsigned int*);
  bool sleep_mapped;
  void* (*map)(void*, long unsigned int, enum zpool_mapmode);
  void (*unmap)(void*, long unsigned int);
  u64 (*total_size)(void*);
};

struct zbud_pool;

struct zbud_ops {
  int (*evict)(struct zbud_pool*, long unsigned int);
};

struct zbud_pool {
  spinlock_t lock;
  struct list_head unbuddied[63];
  struct list_head buddied;
  struct list_head lru;
  u64 pages_nr;
  const struct zbud_ops* ops;
  struct zpool* zpool;
  const struct zpool_ops* zpool_ops;
};

struct zbud_header {
  struct list_head buddy;
  struct list_head lru;
  unsigned int first_chunks;
  unsigned int last_chunks;
  bool under_reclaim;
};

enum buddy {
  FIRST = 0,
  LAST = 1,
};

struct debugfs_u32_array {
  u32* array;
  u32 n_elements;
};

struct cma {
  long unsigned int base_pfn;
  long unsigned int count;
  long unsigned int* bitmap;
  unsigned int order_per_bit;
  struct mutex lock;
  struct hlist_head mem_head;
  spinlock_t mem_head_lock;
  struct debugfs_u32_array dfs_bitmap;
  char name[64];
};

struct trace_event_raw_cma_alloc {
  struct trace_entry ent;
  long unsigned int pfn;
  const struct page* page;
  unsigned int count;
  unsigned int align;
  char __data[0];
};

struct trace_event_raw_cma_release {
  struct trace_entry ent;
  long unsigned int pfn;
  const struct page* page;
  unsigned int count;
  char __data[0];
};

struct trace_event_data_offsets_cma_alloc {};

struct trace_event_data_offsets_cma_release {};

typedef void (*btf_trace_cma_alloc)(
    void*,
    long unsigned int,
    const struct page*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_cma_release)(
    void*,
    long unsigned int,
    const struct page*,
    unsigned int);

struct balloon_dev_info {
  long unsigned int isolated_pages;
  spinlock_t pages_lock;
  struct list_head pages;
  int (*migratepage)(
      struct balloon_dev_info*,
      struct page*,
      struct page*,
      enum migrate_mode);
  struct inode* inode;
};

struct cma_mem {
  struct hlist_node node;
  struct page* p;
  long unsigned int n;
};

struct hugetlbfs_inode_info {
  struct shared_policy policy;
  struct inode vfs_inode;
  unsigned int seals;
};

struct page_reporting_dev_info {
  int (*report)(
      struct page_reporting_dev_info*,
      struct scatterlist*,
      unsigned int);
  struct delayed_work work;
  atomic_t state;
};

enum {
  PAGE_REPORTING_IDLE = 0,
  PAGE_REPORTING_REQUESTED = 1,
  PAGE_REPORTING_ACTIVE = 2,
};

struct open_how {
  __u64 flags;
  __u64 mode;
  __u64 resolve;
};

enum fsnotify_data_type {
  FSNOTIFY_EVENT_NONE = 0,
  FSNOTIFY_EVENT_PATH = 1,
  FSNOTIFY_EVENT_INODE = 2,
};

typedef s32 compat_off_t;

struct fs_context_operations___2;

struct open_flags {
  int open_flag;
  umode_t mode;
  int acc_mode;
  int intent;
  int lookup_flags;
};

typedef __kernel_long_t __kernel_off_t;

typedef __kernel_off_t off_t;

typedef __kernel_rwf_t rwf_t;

typedef s64 compat_loff_t;

enum vfs_get_super_keying {
  vfs_get_single_super = 0,
  vfs_get_single_reconf_super = 1,
  vfs_get_keyed_super = 2,
  vfs_get_independent_super = 3,
};

struct kobj_map;

struct char_device_struct {
  struct char_device_struct* next;
  unsigned int major;
  unsigned int baseminor;
  int minorct;
  char name[64];
  struct cdev* cdev;
};

struct stat {
  __kernel_ulong_t st_dev;
  __kernel_ulong_t st_ino;
  __kernel_ulong_t st_nlink;
  unsigned int st_mode;
  unsigned int st_uid;
  unsigned int st_gid;
  unsigned int __pad0;
  __kernel_ulong_t st_rdev;
  __kernel_long_t st_size;
  __kernel_long_t st_blksize;
  __kernel_long_t st_blocks;
  __kernel_ulong_t st_atime;
  __kernel_ulong_t st_atime_nsec;
  __kernel_ulong_t st_mtime;
  __kernel_ulong_t st_mtime_nsec;
  __kernel_ulong_t st_ctime;
  __kernel_ulong_t st_ctime_nsec;
  __kernel_long_t __unused[3];
};

struct __old_kernel_stat {
  short unsigned int st_dev;
  short unsigned int st_ino;
  short unsigned int st_mode;
  short unsigned int st_nlink;
  short unsigned int st_uid;
  short unsigned int st_gid;
  short unsigned int st_rdev;
  unsigned int st_size;
  unsigned int st_atime;
  unsigned int st_mtime;
  unsigned int st_ctime;
};

struct statx_timestamp {
  __s64 tv_sec;
  __u32 tv_nsec;
  __s32 __reserved;
};

struct statx {
  __u32 stx_mask;
  __u32 stx_blksize;
  __u64 stx_attributes;
  __u32 stx_nlink;
  __u32 stx_uid;
  __u32 stx_gid;
  __u16 stx_mode;
  __u16 __spare0[1];
  __u64 stx_ino;
  __u64 stx_size;
  __u64 stx_blocks;
  __u64 stx_attributes_mask;
  struct statx_timestamp stx_atime;
  struct statx_timestamp stx_btime;
  struct statx_timestamp stx_ctime;
  struct statx_timestamp stx_mtime;
  __u32 stx_rdev_major;
  __u32 stx_rdev_minor;
  __u32 stx_dev_major;
  __u32 stx_dev_minor;
  __u64 stx_mnt_id;
  __u64 __spare2;
  __u64 __spare3[12];
};

struct mount;

struct mnt_namespace {
  struct ns_common ns;
  struct mount* root;
  struct list_head list;
  spinlock_t ns_lock;
  struct user_namespace* user_ns;
  struct ucounts* ucounts;
  u64 seq;
  wait_queue_head_t poll;
  u64 event;
  unsigned int mounts;
  unsigned int pending_mounts;
};

typedef u32 compat_ino_t;

typedef u16 __compat_uid_t;

typedef u16 __compat_gid_t;

typedef u16 compat_mode_t;

typedef u16 compat_dev_t;

typedef u16 compat_nlink_t;

struct compat_stat {
  compat_dev_t st_dev;
  u16 __pad1;
  compat_ino_t st_ino;
  compat_mode_t st_mode;
  compat_nlink_t st_nlink;
  __compat_uid_t st_uid;
  __compat_gid_t st_gid;
  compat_dev_t st_rdev;
  u16 __pad2;
  u32 st_size;
  u32 st_blksize;
  u32 st_blocks;
  u32 st_atime;
  u32 st_atime_nsec;
  u32 st_mtime;
  u32 st_mtime_nsec;
  u32 st_ctime;
  u32 st_ctime_nsec;
  u32 __unused4;
  u32 __unused5;
};

struct mnt_pcp;

struct mountpoint;

struct mount {
  struct hlist_node mnt_hash;
  struct mount* mnt_parent;
  struct dentry* mnt_mountpoint;
  struct vfsmount mnt;
  union {
    struct callback_head mnt_rcu;
    struct llist_node mnt_llist;
  };
  struct mnt_pcp* mnt_pcp;
  struct list_head mnt_mounts;
  struct list_head mnt_child;
  struct list_head mnt_instance;
  const char* mnt_devname;
  struct list_head mnt_list;
  struct list_head mnt_expire;
  struct list_head mnt_share;
  struct list_head mnt_slave_list;
  struct list_head mnt_slave;
  struct mount* mnt_master;
  struct mnt_namespace* mnt_ns;
  struct mountpoint* mnt_mp;
  union {
    struct hlist_node mnt_mp_list;
    struct hlist_node mnt_umount;
  };
  struct list_head mnt_umounting;
  struct fsnotify_mark_connector* mnt_fsnotify_marks;
  __u32 mnt_fsnotify_mask;
  int mnt_id;
  int mnt_group_id;
  int mnt_expiry_mark;
  struct hlist_head mnt_pins;
  struct hlist_head mnt_stuck_children;
};

struct mnt_pcp {
  int mnt_count;
  int mnt_writers;
};

struct mountpoint {
  struct hlist_node m_hash;
  struct dentry* m_dentry;
  struct hlist_head m_list;
  int m_count;
};

typedef short unsigned int ushort;

struct user_arg_ptr {
  bool is_compat;
  union {
    const char* const* native;
    const compat_uptr_t* compat;
  } ptr;
};

enum inode_i_mutex_lock_class {
  I_MUTEX_NORMAL = 0,
  I_MUTEX_PARENT = 1,
  I_MUTEX_CHILD = 2,
  I_MUTEX_XATTR = 3,
  I_MUTEX_NONDIR2 = 4,
  I_MUTEX_PARENT2 = 5,
};

struct pseudo_fs_context {
  const struct super_operations* ops;
  const struct xattr_handler** xattr;
  const struct dentry_operations* dops;
  long unsigned int magic;
};

struct name_snapshot {
  struct qstr name;
  unsigned char inline_name[32];
};

struct saved {
  struct path link;
  struct delayed_call done;
  const char* name;
  unsigned int seq;
};

struct nameidata {
  struct path path;
  struct qstr last;
  struct path root;
  struct inode* inode;
  unsigned int flags;
  unsigned int seq;
  unsigned int m_seq;
  unsigned int r_seq;
  int last_type;
  unsigned int depth;
  int total_link_count;
  struct saved* stack;
  struct saved internal[2];
  struct filename* name;
  struct nameidata* saved;
  unsigned int root_seq;
  int dfd;
  kuid_t dir_uid;
  umode_t dir_mode;
};

struct renamedata {
  struct user_namespace* old_mnt_userns;
  struct inode* old_dir;
  struct dentry* old_dentry;
  struct user_namespace* new_mnt_userns;
  struct inode* new_dir;
  struct dentry* new_dentry;
  struct inode** delegated_inode;
  unsigned int flags;
};

enum {
  LAST_NORM = 0,
  LAST_ROOT = 1,
  LAST_DOT = 2,
  LAST_DOTDOT = 3,
};

enum {
  WALK_TRAILING = 1,
  WALK_MORE = 2,
  WALK_NOFOLLOW = 4,
};

struct word_at_a_time {
  const long unsigned int one_bits;
  const long unsigned int high_bits;
};

struct f_owner_ex {
  int type;
  __kernel_pid_t pid;
};

struct flock {
  short int l_type;
  short int l_whence;
  __kernel_off_t l_start;
  __kernel_off_t l_len;
  __kernel_pid_t l_pid;
};

struct compat_flock {
  short int l_type;
  short int l_whence;
  compat_off_t l_start;
  compat_off_t l_len;
  compat_pid_t l_pid;
};

struct compat_flock64 {
  short int l_type;
  short int l_whence;
  compat_loff_t l_start;
  compat_loff_t l_len;
  compat_pid_t l_pid;
} __attribute__((packed));

struct file_clone_range {
  __s64 src_fd;
  __u64 src_offset;
  __u64 src_length;
  __u64 dest_offset;
};

struct file_dedupe_range_info {
  __s64 dest_fd;
  __u64 dest_offset;
  __u64 bytes_deduped;
  __s32 status;
  __u32 reserved;
};

struct file_dedupe_range {
  __u64 src_offset;
  __u64 src_length;
  __u16 dest_count;
  __u16 reserved1;
  __u32 reserved2;
  struct file_dedupe_range_info info[0];
};

typedef int get_block_t(struct inode*, sector_t, struct buffer_head*, int);

struct fiemap_extent;

struct fiemap_extent_info {
  unsigned int fi_flags;
  unsigned int fi_extents_mapped;
  unsigned int fi_extents_max;
  struct fiemap_extent* fi_extents_start;
};

struct space_resv {
  __s16 l_type;
  __s16 l_whence;
  __s64 l_start;
  __s64 l_len;
  __s32 l_sysid;
  __u32 l_pid;
  __s32 l_pad[4];
};

struct space_resv_32 {
  __s16 l_type;
  __s16 l_whence;
  __s64 l_start;
  __s64 l_len;
  __s32 l_sysid;
  __u32 l_pid;
  __s32 l_pad[4];
} __attribute__((packed));

struct fiemap_extent {
  __u64 fe_logical;
  __u64 fe_physical;
  __u64 fe_length;
  __u64 fe_reserved64[2];
  __u32 fe_flags;
  __u32 fe_reserved[3];
};

struct fiemap {
  __u64 fm_start;
  __u64 fm_length;
  __u32 fm_flags;
  __u32 fm_mapped_extents;
  __u32 fm_extent_count;
  __u32 fm_reserved;
  struct fiemap_extent fm_extents[0];
};

struct linux_dirent64 {
  u64 d_ino;
  s64 d_off;
  short unsigned int d_reclen;
  unsigned char d_type;
  char d_name[0];
};

struct old_linux_dirent {
  long unsigned int d_ino;
  long unsigned int d_offset;
  short unsigned int d_namlen;
  char d_name[1];
};

struct readdir_callback {
  struct dir_context ctx;
  struct old_linux_dirent* dirent;
  int result;
};

struct linux_dirent {
  long unsigned int d_ino;
  long unsigned int d_off;
  short unsigned int d_reclen;
  char d_name[1];
};

struct getdents_callback {
  struct dir_context ctx;
  struct linux_dirent* current_dir;
  int prev_reclen;
  int count;
  int error;
};

struct getdents_callback64 {
  struct dir_context ctx;
  struct linux_dirent64* current_dir;
  int prev_reclen;
  int count;
  int error;
};

struct compat_old_linux_dirent {
  compat_ulong_t d_ino;
  compat_ulong_t d_offset;
  short unsigned int d_namlen;
  char d_name[1];
};

struct compat_readdir_callback {
  struct dir_context ctx;
  struct compat_old_linux_dirent* dirent;
  int result;
};

struct compat_linux_dirent {
  compat_ulong_t d_ino;
  compat_ulong_t d_off;
  short unsigned int d_reclen;
  char d_name[1];
};

struct compat_getdents_callback {
  struct dir_context ctx;
  struct compat_linux_dirent* current_dir;
  int prev_reclen;
  int count;
  int error;
};

typedef struct {
  long unsigned int fds_bits[16];
} __kernel_fd_set;

typedef __kernel_fd_set fd_set;

struct poll_table_entry {
  struct file* filp;
  __poll_t key;
  wait_queue_entry_t wait;
  wait_queue_head_t* wait_address;
};

struct poll_table_page;

struct poll_wqueues {
  poll_table pt;
  struct poll_table_page* table;
  struct task_struct* polling_task;
  int triggered;
  int error;
  int inline_index;
  struct poll_table_entry inline_entries[9];
};

struct poll_table_page {
  struct poll_table_page* next;
  struct poll_table_entry* entry;
  struct poll_table_entry entries[0];
};

enum poll_time_type {
  PT_TIMEVAL = 0,
  PT_OLD_TIMEVAL = 1,
  PT_TIMESPEC = 2,
  PT_OLD_TIMESPEC = 3,
};

typedef struct {
  long unsigned int* in;
  long unsigned int* out;
  long unsigned int* ex;
  long unsigned int* res_in;
  long unsigned int* res_out;
  long unsigned int* res_ex;
} fd_set_bits;

struct sigset_argpack {
  sigset_t* p;
  size_t size;
};

struct poll_list {
  struct poll_list* next;
  int len;
  struct pollfd entries[0];
};

struct compat_sel_arg_struct {
  compat_ulong_t n;
  compat_uptr_t inp;
  compat_uptr_t outp;
  compat_uptr_t exp;
  compat_uptr_t tvp;
};

struct compat_sigset_argpack {
  compat_uptr_t p;
  compat_size_t size;
};

enum dentry_d_lock_class {
  DENTRY_D_LOCK_NORMAL = 0,
  DENTRY_D_LOCK_NESTED = 1,
};

struct external_name {
  union {
    atomic_t count;
    struct callback_head head;
  } u;
  unsigned char name[0];
};

enum d_walk_ret {
  D_WALK_CONTINUE = 0,
  D_WALK_QUIT = 1,
  D_WALK_NORETRY = 2,
  D_WALK_SKIP = 3,
};

struct check_mount {
  struct vfsmount* mnt;
  unsigned int mounted;
};

struct select_data {
  struct dentry* start;
  union {
    long int found;
    struct dentry* victim;
  };
  struct list_head dispose;
};

struct fsxattr {
  __u32 fsx_xflags;
  __u32 fsx_extsize;
  __u32 fsx_nextents;
  __u32 fsx_projid;
  __u32 fsx_cowextsize;
  unsigned char fsx_pad[8];
};

enum file_time_flags {
  S_ATIME = 1,
  S_MTIME = 2,
  S_CTIME = 4,
  S_VERSION = 8,
};

struct mount_attr {
  __u64 attr_set;
  __u64 attr_clr;
  __u64 propagation;
  __u64 userns_fd;
};

struct proc_mounts {
  struct mnt_namespace* ns;
  struct path root;
  int (*show)(struct seq_file*, struct vfsmount*);
  struct mount cursor;
};

struct mount_kattr {
  unsigned int attr_set;
  unsigned int attr_clr;
  unsigned int propagation;
  unsigned int lookup_flags;
  bool recurse;
  struct user_namespace* mnt_userns;
};

enum umount_tree_flags {
  UMOUNT_SYNC = 1,
  UMOUNT_PROPAGATE = 2,
  UMOUNT_CONNECTED = 4,
};

struct simple_transaction_argresp {
  ssize_t size;
  char data[0];
};

struct simple_attr {
  int (*get)(void*, u64*);
  int (*set)(void*, u64);
  char get_buf[24];
  char set_buf[24];
  void* data;
  const char* fmt;
  struct mutex mutex;
};

struct wb_writeback_work {
  long int nr_pages;
  struct super_block* sb;
  enum writeback_sync_modes sync_mode;
  unsigned int tagged_writepages : 1;
  unsigned int for_kupdate : 1;
  unsigned int range_cyclic : 1;
  unsigned int for_background : 1;
  unsigned int for_sync : 1;
  unsigned int auto_free : 1;
  enum wb_reason reason;
  struct list_head list;
  struct wb_completion* done;
};

struct trace_event_raw_writeback_page_template {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  long unsigned int index;
  char __data[0];
};

struct trace_event_raw_writeback_dirty_inode_template {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  long unsigned int state;
  long unsigned int flags;
  char __data[0];
};

struct trace_event_raw_inode_foreign_history {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  ino_t cgroup_ino;
  unsigned int history;
  char __data[0];
};

struct trace_event_raw_inode_switch_wbs {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  ino_t old_cgroup_ino;
  ino_t new_cgroup_ino;
  char __data[0];
};

struct trace_event_raw_track_foreign_dirty {
  struct trace_entry ent;
  char name[32];
  u64 bdi_id;
  ino_t ino;
  unsigned int memcg_id;
  ino_t cgroup_ino;
  ino_t page_cgroup_ino;
  char __data[0];
};

struct trace_event_raw_flush_foreign {
  struct trace_entry ent;
  char name[32];
  ino_t cgroup_ino;
  unsigned int frn_bdi_id;
  unsigned int frn_memcg_id;
  char __data[0];
};

struct trace_event_raw_writeback_write_inode_template {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  int sync_mode;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_work_class {
  struct trace_entry ent;
  char name[32];
  long int nr_pages;
  dev_t sb_dev;
  int sync_mode;
  int for_kupdate;
  int range_cyclic;
  int for_background;
  int reason;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_pages_written {
  struct trace_entry ent;
  long int pages;
  char __data[0];
};

struct trace_event_raw_writeback_class {
  struct trace_entry ent;
  char name[32];
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_bdi_register {
  struct trace_entry ent;
  char name[32];
  char __data[0];
};

struct trace_event_raw_wbc_class {
  struct trace_entry ent;
  char name[32];
  long int nr_to_write;
  long int pages_skipped;
  int sync_mode;
  int for_kupdate;
  int for_background;
  int for_reclaim;
  int range_cyclic;
  long int range_start;
  long int range_end;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_queue_io {
  struct trace_entry ent;
  char name[32];
  long unsigned int older;
  long int age;
  int moved;
  int reason;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_global_dirty_state {
  struct trace_entry ent;
  long unsigned int nr_dirty;
  long unsigned int nr_writeback;
  long unsigned int background_thresh;
  long unsigned int dirty_thresh;
  long unsigned int dirty_limit;
  long unsigned int nr_dirtied;
  long unsigned int nr_written;
  char __data[0];
};

struct trace_event_raw_bdi_dirty_ratelimit {
  struct trace_entry ent;
  char bdi[32];
  long unsigned int write_bw;
  long unsigned int avg_write_bw;
  long unsigned int dirty_rate;
  long unsigned int dirty_ratelimit;
  long unsigned int task_ratelimit;
  long unsigned int balanced_dirty_ratelimit;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_balance_dirty_pages {
  struct trace_entry ent;
  char bdi[32];
  long unsigned int limit;
  long unsigned int setpoint;
  long unsigned int dirty;
  long unsigned int bdi_setpoint;
  long unsigned int bdi_dirty;
  long unsigned int dirty_ratelimit;
  long unsigned int task_ratelimit;
  unsigned int dirtied;
  unsigned int dirtied_pause;
  long unsigned int paused;
  long int pause;
  long unsigned int period;
  long int think;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_sb_inodes_requeue {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  long unsigned int state;
  long unsigned int dirtied_when;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_congest_waited_template {
  struct trace_entry ent;
  unsigned int usec_timeout;
  unsigned int usec_delayed;
  char __data[0];
};

struct trace_event_raw_writeback_single_inode_template {
  struct trace_entry ent;
  char name[32];
  ino_t ino;
  long unsigned int state;
  long unsigned int dirtied_when;
  long unsigned int writeback_index;
  long int nr_to_write;
  long unsigned int wrote;
  ino_t cgroup_ino;
  char __data[0];
};

struct trace_event_raw_writeback_inode_template {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  long unsigned int state;
  __u16 mode;
  long unsigned int dirtied_when;
  char __data[0];
};

struct trace_event_data_offsets_writeback_page_template {};

struct trace_event_data_offsets_writeback_dirty_inode_template {};

struct trace_event_data_offsets_inode_foreign_history {};

struct trace_event_data_offsets_inode_switch_wbs {};

struct trace_event_data_offsets_track_foreign_dirty {};

struct trace_event_data_offsets_flush_foreign {};

struct trace_event_data_offsets_writeback_write_inode_template {};

struct trace_event_data_offsets_writeback_work_class {};

struct trace_event_data_offsets_writeback_pages_written {};

struct trace_event_data_offsets_writeback_class {};

struct trace_event_data_offsets_writeback_bdi_register {};

struct trace_event_data_offsets_wbc_class {};

struct trace_event_data_offsets_writeback_queue_io {};

struct trace_event_data_offsets_global_dirty_state {};

struct trace_event_data_offsets_bdi_dirty_ratelimit {};

struct trace_event_data_offsets_balance_dirty_pages {};

struct trace_event_data_offsets_writeback_sb_inodes_requeue {};

struct trace_event_data_offsets_writeback_congest_waited_template {};

struct trace_event_data_offsets_writeback_single_inode_template {};

struct trace_event_data_offsets_writeback_inode_template {};

typedef void (*btf_trace_writeback_dirty_page)(
    void*,
    struct page*,
    struct address_space*);

typedef void (*btf_trace_wait_on_page_writeback)(
    void*,
    struct page*,
    struct address_space*);

typedef void (*btf_trace_writeback_mark_inode_dirty)(void*, struct inode*, int);

typedef void (
    *btf_trace_writeback_dirty_inode_start)(void*, struct inode*, int);

typedef void (*btf_trace_writeback_dirty_inode)(void*, struct inode*, int);

typedef void (*btf_trace_inode_foreign_history)(
    void*,
    struct inode*,
    struct writeback_control*,
    unsigned int);

typedef void (*btf_trace_inode_switch_wbs)(
    void*,
    struct inode*,
    struct bdi_writeback*,
    struct bdi_writeback*);

typedef void (
    *btf_trace_track_foreign_dirty)(void*, struct page*, struct bdi_writeback*);

typedef void (*btf_trace_flush_foreign)(
    void*,
    struct bdi_writeback*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_writeback_write_inode_start)(
    void*,
    struct inode*,
    struct writeback_control*);

typedef void (*btf_trace_writeback_write_inode)(
    void*,
    struct inode*,
    struct writeback_control*);

typedef void (*btf_trace_writeback_queue)(
    void*,
    struct bdi_writeback*,
    struct wb_writeback_work*);

typedef void (*btf_trace_writeback_exec)(
    void*,
    struct bdi_writeback*,
    struct wb_writeback_work*);

typedef void (*btf_trace_writeback_start)(
    void*,
    struct bdi_writeback*,
    struct wb_writeback_work*);

typedef void (*btf_trace_writeback_written)(
    void*,
    struct bdi_writeback*,
    struct wb_writeback_work*);

typedef void (*btf_trace_writeback_wait)(
    void*,
    struct bdi_writeback*,
    struct wb_writeback_work*);

typedef void (*btf_trace_writeback_pages_written)(void*, long int);

typedef void (
    *btf_trace_writeback_wake_background)(void*, struct bdi_writeback*);

typedef void (
    *btf_trace_writeback_bdi_register)(void*, struct backing_dev_info*);

typedef void (*btf_trace_wbc_writepage)(
    void*,
    struct writeback_control*,
    struct backing_dev_info*);

typedef void (*btf_trace_writeback_queue_io)(
    void*,
    struct bdi_writeback*,
    struct wb_writeback_work*,
    long unsigned int,
    int);

typedef void (
    *btf_trace_global_dirty_state)(void*, long unsigned int, long unsigned int);

typedef void (*btf_trace_bdi_dirty_ratelimit)(
    void*,
    struct bdi_writeback*,
    long unsigned int,
    long unsigned int);

typedef void (*btf_trace_balance_dirty_pages)(
    void*,
    struct bdi_writeback*,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long unsigned int,
    long int,
    long unsigned int);

typedef void (*btf_trace_writeback_sb_inodes_requeue)(void*, struct inode*);

typedef void (
    *btf_trace_writeback_congestion_wait)(void*, unsigned int, unsigned int);

typedef void (
    *btf_trace_writeback_wait_iff_congested)(void*, unsigned int, unsigned int);

typedef void (*btf_trace_writeback_single_inode_start)(
    void*,
    struct inode*,
    struct writeback_control*,
    long unsigned int);

typedef void (*btf_trace_writeback_single_inode)(
    void*,
    struct inode*,
    struct writeback_control*,
    long unsigned int);

typedef void (*btf_trace_writeback_lazytime)(void*, struct inode*);

typedef void (*btf_trace_writeback_lazytime_iput)(void*, struct inode*);

typedef void (*btf_trace_writeback_dirty_inode_enqueue)(void*, struct inode*);

typedef void (*btf_trace_sb_mark_inode_writeback)(void*, struct inode*);

typedef void (*btf_trace_sb_clear_inode_writeback)(void*, struct inode*);

struct inode_switch_wbs_context {
  struct rcu_work work;
  struct bdi_writeback* new_wb;
  struct inode* inodes[0];
};

struct splice_desc {
  size_t total_len;
  unsigned int len;
  unsigned int flags;
  union {
    void* userptr;
    struct file* file;
    void* data;
  } u;
  loff_t pos;
  loff_t* opos;
  size_t num_spliced;
  bool need_wakeup;
};

typedef int
splice_actor(struct pipe_inode_info*, struct pipe_buffer*, struct splice_desc*);

typedef int splice_direct_actor(struct pipe_inode_info*, struct splice_desc*);

struct old_utimbuf32 {
  old_time32_t actime;
  old_time32_t modtime;
};

struct utimbuf {
  __kernel_old_time_t actime;
  __kernel_old_time_t modtime;
};

typedef int __kernel_daddr_t;

struct ustat {
  __kernel_daddr_t f_tfree;
  long unsigned int f_tinode;
  char f_fname[6];
  char f_fpack[6];
};

typedef s32 compat_daddr_t;

typedef __kernel_fsid_t compat_fsid_t;

struct compat_statfs {
  int f_type;
  int f_bsize;
  int f_blocks;
  int f_bfree;
  int f_bavail;
  int f_files;
  int f_ffree;
  compat_fsid_t f_fsid;
  int f_namelen;
  int f_frsize;
  int f_flags;
  int f_spare[4];
};

struct compat_ustat {
  compat_daddr_t f_tfree;
  compat_ino_t f_tinode;
  char f_fname[6];
  char f_fpack[6];
};

struct statfs {
  __kernel_long_t f_type;
  __kernel_long_t f_bsize;
  __kernel_long_t f_blocks;
  __kernel_long_t f_bfree;
  __kernel_long_t f_bavail;
  __kernel_long_t f_files;
  __kernel_long_t f_ffree;
  __kernel_fsid_t f_fsid;
  __kernel_long_t f_namelen;
  __kernel_long_t f_frsize;
  __kernel_long_t f_flags;
  __kernel_long_t f_spare[4];
};

struct statfs64 {
  __kernel_long_t f_type;
  __kernel_long_t f_bsize;
  __u64 f_blocks;
  __u64 f_bfree;
  __u64 f_bavail;
  __u64 f_files;
  __u64 f_ffree;
  __kernel_fsid_t f_fsid;
  __kernel_long_t f_namelen;
  __kernel_long_t f_frsize;
  __kernel_long_t f_flags;
  __kernel_long_t f_spare[4];
};

struct compat_statfs64 {
  __u32 f_type;
  __u32 f_bsize;
  __u64 f_blocks;
  __u64 f_bfree;
  __u64 f_bavail;
  __u64 f_files;
  __u64 f_ffree;
  __kernel_fsid_t f_fsid;
  __u32 f_namelen;
  __u32 f_frsize;
  __u32 f_flags;
  __u32 f_spare[4];
} __attribute__((packed));

struct fs_pin {
  wait_queue_head_t wait;
  int done;
  struct hlist_node s_list;
  struct hlist_node m_list;
  void (*kill)(struct fs_pin*);
};

typedef struct ns_common* ns_get_path_helper_t(void*);

struct ns_get_path_task_args {
  const struct proc_ns_operations* ns_ops;
  struct task_struct* task;
};

enum legacy_fs_param {
  LEGACY_FS_UNSET_PARAMS = 0,
  LEGACY_FS_MONOLITHIC_PARAMS = 1,
  LEGACY_FS_INDIVIDUAL_PARAMS = 2,
};

struct legacy_fs_context {
  char* legacy_data;
  size_t data_size;
  enum legacy_fs_param param_type;
};

enum fsconfig_command {
  FSCONFIG_SET_FLAG = 0,
  FSCONFIG_SET_STRING = 1,
  FSCONFIG_SET_BINARY = 2,
  FSCONFIG_SET_PATH = 3,
  FSCONFIG_SET_PATH_EMPTY = 4,
  FSCONFIG_SET_FD = 5,
  FSCONFIG_CMD_CREATE = 6,
  FSCONFIG_CMD_RECONFIGURE = 7,
};

struct dax_device;

struct iomap_page_ops;

struct iomap {
  u64 addr;
  loff_t offset;
  u64 length;
  u16 type;
  u16 flags;
  struct block_device* bdev;
  struct dax_device* dax_dev;
  void* inline_data;
  void* private;
  const struct iomap_page_ops* page_ops;
};

struct iomap_page_ops {
  int (*page_prepare)(struct inode*, loff_t, unsigned int, struct iomap*);
  void (*page_done)(
      struct inode*,
      loff_t,
      unsigned int,
      struct page*,
      struct iomap*);
};

struct decrypt_bh_ctx {
  struct work_struct work;
  struct buffer_head* bh;
};

struct bh_lru {
  struct buffer_head* bhs[16];
};

struct bh_accounting {
  int nr;
  int ratelimit;
};

enum stat_group {
  STAT_READ = 0,
  STAT_WRITE = 1,
  STAT_DISCARD = 2,
  STAT_FLUSH = 3,
  NR_STAT_GROUPS = 4,
};

enum {
  DISK_EVENT_MEDIA_CHANGE = 1,
  DISK_EVENT_EJECT_REQUEST = 2,
};

struct blk_integrity_profile;

struct blk_integrity {
  const struct blk_integrity_profile* profile;
  unsigned char flags;
  unsigned char tuple_size;
  unsigned char interval_exp;
  unsigned char tag_size;
};

enum {
  BIOSET_NEED_BVECS = 1,
  BIOSET_NEED_RESCUER = 2,
  BIOSET_PERCPU_CACHE = 4,
};

struct bdev_inode {
  struct block_device bdev;
  struct inode vfs_inode;
};

struct blkdev_dio {
  union {
    struct kiocb* iocb;
    struct task_struct* waiter;
  };
  size_t size;
  atomic_t ref;
  bool multi_bio : 1;
  bool should_dirty : 1;
  bool is_sync : 1;
  struct bio bio;
};

struct bd_holder_disk {
  struct list_head list;
  struct gendisk* disk;
  int refcnt;
};

typedef int dio_iodone_t(struct kiocb*, loff_t, ssize_t, void*);

typedef void dio_submit_t(struct bio*, struct inode*, loff_t);

enum {
  DIO_LOCKING = 1,
  DIO_SKIP_HOLES = 2,
};

struct dio_submit {
  struct bio* bio;
  unsigned int blkbits;
  unsigned int blkfactor;
  unsigned int start_zero_done;
  int pages_in_io;
  sector_t block_in_file;
  unsigned int blocks_available;
  int reap_counter;
  sector_t final_block_in_request;
  int boundary;
  get_block_t* get_block;
  dio_submit_t* submit_io;
  loff_t logical_offset_in_bio;
  sector_t final_block_in_bio;
  sector_t next_block_for_io;
  struct page* cur_page;
  unsigned int cur_page_offset;
  unsigned int cur_page_len;
  sector_t cur_page_block;
  loff_t cur_page_fs_offset;
  struct iov_iter* iter;
  unsigned int head;
  unsigned int tail;
  size_t from;
  size_t to;
};

struct dio {
  int flags;
  int op;
  int op_flags;
  blk_qc_t bio_cookie;
  struct gendisk* bio_disk;
  struct inode* inode;
  loff_t i_size;
  dio_iodone_t* end_io;
  void* private;
  spinlock_t bio_lock;
  int page_errors;
  int is_async;
  bool defer_completion;
  bool should_dirty;
  int io_error;
  long unsigned int refcount;
  struct bio* bio_list;
  struct task_struct* waiter;
  struct kiocb* iocb;
  ssize_t result;
  union {
    struct page* pages[64];
    struct work_struct complete_work;
  };
  long : 64;
};

struct bvec_iter_all {
  struct bio_vec bv;
  int idx;
  unsigned int done;
};

struct mpage_readpage_args {
  struct bio* bio;
  struct page* page;
  unsigned int nr_pages;
  bool is_readahead;
  sector_t last_block_in_bio;
  struct buffer_head map_bh;
  long unsigned int first_logical_block;
  get_block_t* get_block;
};

struct mpage_data {
  struct bio* bio;
  sector_t last_block_in_bio;
  get_block_t* get_block;
  unsigned int use_writepage;
};

typedef u32 nlink_t;

typedef int (*proc_write_t)(struct file*, char*, size_t);

struct proc_dir_entry {
  atomic_t in_use;
  refcount_t refcnt;
  struct list_head pde_openers;
  spinlock_t pde_unload_lock;
  struct completion* pde_unload_completion;
  const struct inode_operations* proc_iops;
  union {
    const struct proc_ops* proc_ops;
    const struct file_operations* proc_dir_ops;
  };
  const struct dentry_operations* proc_dops;
  union {
    const struct seq_operations* seq_ops;
    int (*single_show)(struct seq_file*, void*);
  };
  proc_write_t write;
  void* data;
  unsigned int state_size;
  unsigned int low_ino;
  nlink_t nlink;
  kuid_t uid;
  kgid_t gid;
  loff_t size;
  struct proc_dir_entry* parent;
  struct rb_root subdir;
  struct rb_node subdir_node;
  char* name;
  umode_t mode;
  u8 flags;
  u8 namelen;
  char inline_name[0];
};

union proc_op {
  int (*proc_get_link)(struct dentry*, struct path*);
  int (*proc_show)(
      struct seq_file*,
      struct pid_namespace*,
      struct pid*,
      struct task_struct*);
  const char* lsm;
};

struct proc_inode {
  struct pid* pid;
  unsigned int fd;
  union proc_op op;
  struct proc_dir_entry* pde;
  struct ctl_table_header* sysctl;
  struct ctl_table* sysctl_entry;
  struct hlist_node sibling_inodes;
  const struct proc_ns_operations* ns_ops;
  struct inode vfs_inode;
};

struct proc_fs_opts {
  int flag;
  const char* str;
};

struct file_handle {
  __u32 handle_bytes;
  int handle_type;
  unsigned char f_handle[0];
};

struct inotify_inode_mark {
  struct fsnotify_mark fsn_mark;
  int wd;
};

struct dnotify_struct {
  struct dnotify_struct* dn_next;
  __u32 dn_mask;
  int dn_fd;
  struct file* dn_filp;
  fl_owner_t dn_owner;
};

struct dnotify_mark {
  struct fsnotify_mark fsn_mark;
  struct dnotify_struct* dn;
};

struct inotify_event_info {
  struct fsnotify_event fse;
  u32 mask;
  int wd;
  u32 sync_cookie;
  int name_len;
  char name[0];
};

struct inotify_event {
  __s32 wd;
  __u32 mask;
  __u32 cookie;
  __u32 len;
  char name[0];
};

enum {
  FAN_EVENT_INIT = 0,
  FAN_EVENT_REPORTED = 1,
  FAN_EVENT_ANSWERED = 2,
  FAN_EVENT_CANCELED = 3,
};

struct fanotify_fh {
  u8 type;
  u8 len;
  u8 flags;
  u8 pad;
  unsigned char buf[0];
};

struct fanotify_info {
  u8 dir_fh_totlen;
  u8 file_fh_totlen;
  u8 name_len;
  u8 pad;
  unsigned char buf[0];
};

enum fanotify_event_type {
  FANOTIFY_EVENT_TYPE_FID = 0,
  FANOTIFY_EVENT_TYPE_FID_NAME = 1,
  FANOTIFY_EVENT_TYPE_PATH = 2,
  FANOTIFY_EVENT_TYPE_PATH_PERM = 3,
  FANOTIFY_EVENT_TYPE_OVERFLOW = 4,
};

struct fanotify_event {
  struct fsnotify_event fse;
  u32 mask;
  enum fanotify_event_type type;
  struct pid* pid;
};

struct fanotify_fid_event {
  struct fanotify_event fae;
  __kernel_fsid_t fsid;
  struct fanotify_fh object_fh;
  unsigned char _inline_fh_buf[12];
};

struct fanotify_name_event {
  struct fanotify_event fae;
  __kernel_fsid_t fsid;
  struct fanotify_info info;
};

struct fanotify_path_event {
  struct fanotify_event fae;
  struct path path;
};

struct fanotify_perm_event {
  struct fanotify_event fae;
  struct path path;
  short unsigned int response;
  short unsigned int state;
  int fd;
};

struct fanotify_event_metadata {
  __u32 event_len;
  __u8 vers;
  __u8 reserved;
  __u16 metadata_len;
  __u64 mask;
  __s32 fd;
  __s32 pid;
};

struct fanotify_event_info_header {
  __u8 info_type;
  __u8 pad;
  __u16 len;
};

struct fanotify_event_info_fid {
  struct fanotify_event_info_header hdr;
  __kernel_fsid_t fsid;
  unsigned char handle[0];
};

struct fanotify_response {
  __s32 fd;
  __u32 response;
};

struct epoll_event {
  __poll_t events;
  __u64 data;
} __attribute__((packed));

struct wake_irq;

struct wakeup_source {
  const char* name;
  int id;
  struct list_head entry;
  spinlock_t lock;
  struct wake_irq* wakeirq;
  struct timer_list timer;
  long unsigned int timer_expires;
  ktime_t total_time;
  ktime_t max_time;
  ktime_t last_time;
  ktime_t start_prevent_time;
  ktime_t prevent_sleep_time;
  long unsigned int event_count;
  long unsigned int active_count;
  long unsigned int relax_count;
  long unsigned int expire_count;
  long unsigned int wakeup_count;
  struct device* dev;
  bool active : 1;
  bool autosleep_enabled : 1;
};

struct epoll_filefd {
  struct file* file;
  int fd;
} __attribute__((packed));

struct epitem;

struct eppoll_entry {
  struct eppoll_entry* next;
  struct epitem* base;
  wait_queue_entry_t wait;
  wait_queue_head_t* whead;
};

struct eventpoll;

struct epitem {
  union {
    struct rb_node rbn;
    struct callback_head rcu;
  };
  struct list_head rdllink;
  struct epitem* next;
  struct epoll_filefd ffd;
  struct eppoll_entry* pwqlist;
  struct eventpoll* ep;
  struct hlist_node fllink;
  struct wakeup_source* ws;
  struct epoll_event event;
};

struct eventpoll {
  struct mutex mtx;
  wait_queue_head_t wq;
  wait_queue_head_t poll_wait;
  struct list_head rdllist;
  rwlock_t lock;
  struct rb_root_cached rbr;
  struct epitem* ovflist;
  struct wakeup_source* ws;
  struct user_struct* user;
  struct file* file;
  u64 gen;
  struct hlist_head refs;
  unsigned int napi_id;
};

struct ep_pqueue {
  poll_table pt;
  struct epitem* epi;
};

struct epitems_head {
  struct hlist_head epitems;
  struct epitems_head* next;
};

struct signalfd_siginfo {
  __u32 ssi_signo;
  __s32 ssi_errno;
  __s32 ssi_code;
  __u32 ssi_pid;
  __u32 ssi_uid;
  __s32 ssi_fd;
  __u32 ssi_tid;
  __u32 ssi_band;
  __u32 ssi_overrun;
  __u32 ssi_trapno;
  __s32 ssi_status;
  __s32 ssi_int;
  __u64 ssi_ptr;
  __u64 ssi_utime;
  __u64 ssi_stime;
  __u64 ssi_addr;
  __u16 ssi_addr_lsb;
  __u16 __pad2;
  __s32 ssi_syscall;
  __u64 ssi_call_addr;
  __u32 ssi_arch;
  __u8 __pad[28];
};

struct signalfd_ctx {
  sigset_t sigmask;
};

struct timerfd_ctx {
  union {
    struct hrtimer tmr;
    struct alarm alarm;
  } t;
  ktime_t tintv;
  ktime_t moffs;
  wait_queue_head_t wqh;
  u64 ticks;
  int clockid;
  short unsigned int expired;
  short unsigned int settime_flags;
  struct callback_head rcu;
  struct list_head clist;
  spinlock_t cancel_lock;
  bool might_cancel;
};

struct eventfd_ctx___2 {
  struct kref kref;
  wait_queue_head_t wqh;
  __u64 count;
  unsigned int flags;
  int id;
};

enum userfaultfd_state {
  UFFD_STATE_WAIT_API = 0,
  UFFD_STATE_RUNNING = 1,
};

struct userfaultfd_ctx {
  wait_queue_head_t fault_pending_wqh;
  wait_queue_head_t fault_wqh;
  wait_queue_head_t fd_wqh;
  wait_queue_head_t event_wqh;
  seqcount_spinlock_t refile_seq;
  refcount_t refcount;
  unsigned int flags;
  unsigned int features;
  enum userfaultfd_state state;
  bool released;
  bool mmap_changing;
  struct mm_struct* mm;
};

struct uffd_msg {
  __u8 event;
  __u8 reserved1;
  __u16 reserved2;
  __u32 reserved3;
  union {
    struct {
      __u64 flags;
      __u64 address;
      union {
        __u32 ptid;
      } feat;
    } pagefault;
    struct {
      __u32 ufd;
    } fork;
    struct {
      __u64 from;
      __u64 to;
      __u64 len;
    } remap;
    struct {
      __u64 start;
      __u64 end;
    } remove;
    struct {
      __u64 reserved1;
      __u64 reserved2;
      __u64 reserved3;
    } reserved;
  } arg;
};

struct uffdio_api {
  __u64 api;
  __u64 features;
  __u64 ioctls;
};

struct uffdio_range {
  __u64 start;
  __u64 len;
};

struct uffdio_register {
  struct uffdio_range range;
  __u64 mode;
  __u64 ioctls;
};

struct uffdio_copy {
  __u64 dst;
  __u64 src;
  __u64 len;
  __u64 mode;
  __s64 copy;
};

struct uffdio_zeropage {
  struct uffdio_range range;
  __u64 mode;
  __s64 zeropage;
};

struct uffdio_writeprotect {
  struct uffdio_range range;
  __u64 mode;
};

struct userfaultfd_fork_ctx {
  struct userfaultfd_ctx* orig;
  struct userfaultfd_ctx* new;
  struct list_head list;
};

struct userfaultfd_unmap_ctx {
  struct userfaultfd_ctx* ctx;
  long unsigned int start;
  long unsigned int end;
  struct list_head list;
};

struct userfaultfd_wait_queue {
  struct uffd_msg msg;
  wait_queue_entry_t wq;
  struct userfaultfd_ctx* ctx;
  bool waken;
};

struct userfaultfd_wake_range {
  long unsigned int start;
  long unsigned int len;
};

struct kioctx;

struct kioctx_table {
  struct callback_head rcu;
  unsigned int nr;
  struct kioctx* table[0];
};

typedef __kernel_ulong_t aio_context_t;

enum {
  IOCB_CMD_PREAD = 0,
  IOCB_CMD_PWRITE = 1,
  IOCB_CMD_FSYNC = 2,
  IOCB_CMD_FDSYNC = 3,
  IOCB_CMD_POLL = 5,
  IOCB_CMD_NOOP = 6,
  IOCB_CMD_PREADV = 7,
  IOCB_CMD_PWRITEV = 8,
};

struct io_event {
  __u64 data;
  __u64 obj;
  __s64 res;
  __s64 res2;
};

struct iocb {
  __u64 aio_data;
  __u32 aio_key;
  __kernel_rwf_t aio_rw_flags;
  __u16 aio_lio_opcode;
  __s16 aio_reqprio;
  __u32 aio_fildes;
  __u64 aio_buf;
  __u64 aio_nbytes;
  __s64 aio_offset;
  __u64 aio_reserved2;
  __u32 aio_flags;
  __u32 aio_resfd;
};

typedef u32 compat_aio_context_t;

typedef int kiocb_cancel_fn(struct kiocb*);

struct aio_ring {
  unsigned int id;
  unsigned int nr;
  unsigned int head;
  unsigned int tail;
  unsigned int magic;
  unsigned int compat_features;
  unsigned int incompat_features;
  unsigned int header_length;
  struct io_event io_events[0];
};

struct kioctx_cpu;

struct ctx_rq_wait;

struct kioctx {
  struct percpu_ref users;
  atomic_t dead;
  struct percpu_ref reqs;
  long unsigned int user_id;
  struct kioctx_cpu* cpu;
  unsigned int req_batch;
  unsigned int max_reqs;
  unsigned int nr_events;
  long unsigned int mmap_base;
  long unsigned int mmap_size;
  struct page** ring_pages;
  long int nr_pages;
  struct rcu_work free_rwork;
  struct ctx_rq_wait* rq_wait;
  long : 64;
  long : 64;
  long : 64;
  struct {
    atomic_t reqs_available;
    long : 32;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct {
    spinlock_t ctx_lock;
    struct list_head active_reqs;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct {
    struct mutex ring_lock;
    wait_queue_head_t wait;
    long : 64;
  };
  struct {
    unsigned int tail;
    unsigned int completed_events;
    spinlock_t completion_lock;
    long : 32;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct page* internal_pages[8];
  struct file* aio_ring_file;
  unsigned int id;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct kioctx_cpu {
  unsigned int reqs_available;
};

struct ctx_rq_wait {
  struct completion comp;
  atomic_t count;
};

struct fsync_iocb {
  struct file* file;
  struct work_struct work;
  bool datasync;
  struct cred* creds;
};

struct poll_iocb {
  struct file* file;
  struct wait_queue_head* head;
  __poll_t events;
  bool done;
  bool cancelled;
  struct wait_queue_entry wait;
  struct work_struct work;
};

struct aio_kiocb {
  union {
    struct file* ki_filp;
    struct kiocb rw;
    struct fsync_iocb fsync;
    struct poll_iocb poll;
  };
  struct kioctx* ki_ctx;
  kiocb_cancel_fn* ki_cancel;
  struct io_event ki_res;
  struct list_head ki_list;
  refcount_t ki_refcnt;
  struct eventfd_ctx* ki_eventfd;
};

struct aio_poll_table {
  struct poll_table_struct pt;
  struct aio_kiocb* iocb;
  int error;
};

struct __aio_sigset {
  const sigset_t* sigmask;
  size_t sigsetsize;
};

struct __compat_aio_sigset {
  compat_uptr_t sigmask;
  compat_size_t sigsetsize;
};

struct xa_limit {
  u32 max;
  u32 min;
};

struct io_wq;

struct io_wq_work_node;

struct io_wq_work_list {
  struct io_wq_work_node* first;
  struct io_wq_work_node* last;
};

struct io_ring_ctx;

struct io_uring_task {
  int cached_refs;
  struct xarray xa;
  struct wait_queue_head wait;
  const struct io_ring_ctx* last;
  struct io_wq* io_wq;
  struct percpu_counter inflight;
  atomic_t inflight_tracked;
  atomic_t in_idle;
  spinlock_t task_lock;
  struct io_wq_work_list task_list;
  struct callback_head task_work;
  bool task_running;
};

enum {
  PERCPU_REF_INIT_ATOMIC = 1,
  PERCPU_REF_INIT_DEAD = 2,
  PERCPU_REF_ALLOW_REINIT = 4,
};

struct iov_iter_state {
  size_t iov_offset;
  size_t count;
  long unsigned int nr_segs;
};

struct user_msghdr {
  void* msg_name;
  int msg_namelen;
  struct iovec* msg_iov;
  __kernel_size_t msg_iovlen;
  void* msg_control;
  __kernel_size_t msg_controllen;
  unsigned int msg_flags;
};

typedef s32 compat_ssize_t;

struct compat_msghdr {
  compat_uptr_t msg_name;
  compat_int_t msg_namelen;
  compat_uptr_t msg_iov;
  compat_size_t msg_iovlen;
  compat_uptr_t msg_control;
  compat_size_t msg_controllen;
  compat_uint_t msg_flags;
};

struct scm_fp_list {
  short int count;
  short int max;
  struct user_struct* user;
  struct file* fp[253];
};

struct unix_skb_parms {
  struct pid* pid;
  kuid_t uid;
  kgid_t gid;
  struct scm_fp_list* fp;
  u32 secid;
  u32 consumed;
};

struct trace_event_raw_io_uring_create {
  struct trace_entry ent;
  int fd;
  void* ctx;
  u32 sq_entries;
  u32 cq_entries;
  u32 flags;
  char __data[0];
};

struct trace_event_raw_io_uring_register {
  struct trace_entry ent;
  void* ctx;
  unsigned int opcode;
  unsigned int nr_files;
  unsigned int nr_bufs;
  bool eventfd;
  long int ret;
  char __data[0];
};

struct trace_event_raw_io_uring_file_get {
  struct trace_entry ent;
  void* ctx;
  int fd;
  char __data[0];
};

struct io_wq_work;

struct trace_event_raw_io_uring_queue_async_work {
  struct trace_entry ent;
  void* ctx;
  int rw;
  void* req;
  struct io_wq_work* work;
  unsigned int flags;
  char __data[0];
};

struct io_wq_work_node {
  struct io_wq_work_node* next;
};

struct io_wq_work {
  struct io_wq_work_node list;
  unsigned int flags;
};

struct trace_event_raw_io_uring_defer {
  struct trace_entry ent;
  void* ctx;
  void* req;
  long long unsigned int data;
  char __data[0];
};

struct trace_event_raw_io_uring_link {
  struct trace_entry ent;
  void* ctx;
  void* req;
  void* target_req;
  char __data[0];
};

struct trace_event_raw_io_uring_cqring_wait {
  struct trace_entry ent;
  void* ctx;
  int min_events;
  char __data[0];
};

struct trace_event_raw_io_uring_fail_link {
  struct trace_entry ent;
  void* req;
  void* link;
  char __data[0];
};

struct trace_event_raw_io_uring_complete {
  struct trace_entry ent;
  void* ctx;
  u64 user_data;
  int res;
  unsigned int cflags;
  char __data[0];
};

struct trace_event_raw_io_uring_submit_sqe {
  struct trace_entry ent;
  void* ctx;
  void* req;
  u8 opcode;
  u64 user_data;
  u32 flags;
  bool force_nonblock;
  bool sq_thread;
  char __data[0];
};

struct trace_event_raw_io_uring_poll_arm {
  struct trace_entry ent;
  void* ctx;
  void* req;
  u8 opcode;
  u64 user_data;
  int mask;
  int events;
  char __data[0];
};

struct trace_event_raw_io_uring_poll_wake {
  struct trace_entry ent;
  void* ctx;
  u8 opcode;
  u64 user_data;
  int mask;
  char __data[0];
};

struct trace_event_raw_io_uring_task_add {
  struct trace_entry ent;
  void* ctx;
  u8 opcode;
  u64 user_data;
  int mask;
  char __data[0];
};

struct trace_event_raw_io_uring_task_run {
  struct trace_entry ent;
  void* ctx;
  void* req;
  u8 opcode;
  u64 user_data;
  char __data[0];
};

struct trace_event_data_offsets_io_uring_create {};

struct trace_event_data_offsets_io_uring_register {};

struct trace_event_data_offsets_io_uring_file_get {};

struct trace_event_data_offsets_io_uring_queue_async_work {};

struct trace_event_data_offsets_io_uring_defer {};

struct trace_event_data_offsets_io_uring_link {};

struct trace_event_data_offsets_io_uring_cqring_wait {};

struct trace_event_data_offsets_io_uring_fail_link {};

struct trace_event_data_offsets_io_uring_complete {};

struct trace_event_data_offsets_io_uring_submit_sqe {};

struct trace_event_data_offsets_io_uring_poll_arm {};

struct trace_event_data_offsets_io_uring_poll_wake {};

struct trace_event_data_offsets_io_uring_task_add {};

struct trace_event_data_offsets_io_uring_task_run {};

typedef void (*btf_trace_io_uring_create)(void*, int, void*, u32, u32, u32);

typedef void (*btf_trace_io_uring_register)(
    void*,
    void*,
    unsigned int,
    unsigned int,
    unsigned int,
    bool,
    long int);

typedef void (*btf_trace_io_uring_file_get)(void*, void*, int);

typedef void (*btf_trace_io_uring_queue_async_work)(
    void*,
    void*,
    int,
    void*,
    struct io_wq_work*,
    unsigned int);

typedef void (
    *btf_trace_io_uring_defer)(void*, void*, void*, long long unsigned int);

typedef void (*btf_trace_io_uring_link)(void*, void*, void*, void*);

typedef void (*btf_trace_io_uring_cqring_wait)(void*, void*, int);

typedef void (*btf_trace_io_uring_fail_link)(void*, void*, void*);

typedef void (
    *btf_trace_io_uring_complete)(void*, void*, u64, int, unsigned int);

typedef void (*btf_trace_io_uring_submit_sqe)(
    void*,
    void*,
    void*,
    u8,
    u64,
    u32,
    bool,
    bool);

typedef void (
    *btf_trace_io_uring_poll_arm)(void*, void*, void*, u8, u64, int, int);

typedef void (*btf_trace_io_uring_poll_wake)(void*, void*, u8, u64, int);

typedef void (*btf_trace_io_uring_task_add)(void*, void*, u8, u64, int);

typedef void (*btf_trace_io_uring_task_run)(void*, void*, void*, u8, u64);

struct io_uring_sqe {
  __u8 opcode;
  __u8 flags;
  __u16 ioprio;
  __s32 fd;
  union {
    __u64 off;
    __u64 addr2;
  };
  union {
    __u64 addr;
    __u64 splice_off_in;
  };
  __u32 len;
  union {
    __kernel_rwf_t rw_flags;
    __u32 fsync_flags;
    __u16 poll_events;
    __u32 poll32_events;
    __u32 sync_range_flags;
    __u32 msg_flags;
    __u32 timeout_flags;
    __u32 accept_flags;
    __u32 cancel_flags;
    __u32 open_flags;
    __u32 statx_flags;
    __u32 fadvise_advice;
    __u32 splice_flags;
    __u32 rename_flags;
    __u32 unlink_flags;
    __u32 hardlink_flags;
  };
  __u64 user_data;
  union {
    __u16 buf_index;
    __u16 buf_group;
  };
  __u16 personality;
  union {
    __s32 splice_fd_in;
    __u32 file_index;
  };
  __u64 __pad2[2];
};

enum {
  IOSQE_FIXED_FILE_BIT = 0,
  IOSQE_IO_DRAIN_BIT = 1,
  IOSQE_IO_LINK_BIT = 2,
  IOSQE_IO_HARDLINK_BIT = 3,
  IOSQE_ASYNC_BIT = 4,
  IOSQE_BUFFER_SELECT_BIT = 5,
};

enum {
  IORING_OP_NOP = 0,
  IORING_OP_READV = 1,
  IORING_OP_WRITEV = 2,
  IORING_OP_FSYNC = 3,
  IORING_OP_READ_FIXED = 4,
  IORING_OP_WRITE_FIXED = 5,
  IORING_OP_POLL_ADD = 6,
  IORING_OP_POLL_REMOVE = 7,
  IORING_OP_SYNC_FILE_RANGE = 8,
  IORING_OP_SENDMSG = 9,
  IORING_OP_RECVMSG = 10,
  IORING_OP_TIMEOUT = 11,
  IORING_OP_TIMEOUT_REMOVE = 12,
  IORING_OP_ACCEPT = 13,
  IORING_OP_ASYNC_CANCEL = 14,
  IORING_OP_LINK_TIMEOUT = 15,
  IORING_OP_CONNECT = 16,
  IORING_OP_FALLOCATE = 17,
  IORING_OP_OPENAT = 18,
  IORING_OP_CLOSE = 19,
  IORING_OP_FILES_UPDATE = 20,
  IORING_OP_STATX = 21,
  IORING_OP_READ = 22,
  IORING_OP_WRITE = 23,
  IORING_OP_FADVISE = 24,
  IORING_OP_MADVISE = 25,
  IORING_OP_SEND = 26,
  IORING_OP_RECV = 27,
  IORING_OP_OPENAT2 = 28,
  IORING_OP_EPOLL_CTL = 29,
  IORING_OP_SPLICE = 30,
  IORING_OP_PROVIDE_BUFFERS = 31,
  IORING_OP_REMOVE_BUFFERS = 32,
  IORING_OP_TEE = 33,
  IORING_OP_SHUTDOWN = 34,
  IORING_OP_RENAMEAT = 35,
  IORING_OP_UNLINKAT = 36,
  IORING_OP_MKDIRAT = 37,
  IORING_OP_SYMLINKAT = 38,
  IORING_OP_LINKAT = 39,
  IORING_OP_LAST = 40,
};

struct io_uring_cqe {
  __u64 user_data;
  __s32 res;
  __u32 flags;
};

enum {
  IORING_CQE_BUFFER_SHIFT = 16,
};

struct io_sqring_offsets {
  __u32 head;
  __u32 tail;
  __u32 ring_mask;
  __u32 ring_entries;
  __u32 flags;
  __u32 dropped;
  __u32 array;
  __u32 resv1;
  __u64 resv2;
};

struct io_cqring_offsets {
  __u32 head;
  __u32 tail;
  __u32 ring_mask;
  __u32 ring_entries;
  __u32 overflow;
  __u32 cqes;
  __u32 flags;
  __u32 resv1;
  __u64 resv2;
};

struct io_uring_params {
  __u32 sq_entries;
  __u32 cq_entries;
  __u32 flags;
  __u32 sq_thread_cpu;
  __u32 sq_thread_idle;
  __u32 features;
  __u32 wq_fd;
  __u32 resv[3];
  struct io_sqring_offsets sq_off;
  struct io_cqring_offsets cq_off;
};

enum {
  IORING_REGISTER_BUFFERS = 0,
  IORING_UNREGISTER_BUFFERS = 1,
  IORING_REGISTER_FILES = 2,
  IORING_UNREGISTER_FILES = 3,
  IORING_REGISTER_EVENTFD = 4,
  IORING_UNREGISTER_EVENTFD = 5,
  IORING_REGISTER_FILES_UPDATE = 6,
  IORING_REGISTER_EVENTFD_ASYNC = 7,
  IORING_REGISTER_PROBE = 8,
  IORING_REGISTER_PERSONALITY = 9,
  IORING_UNREGISTER_PERSONALITY = 10,
  IORING_REGISTER_RESTRICTIONS = 11,
  IORING_REGISTER_ENABLE_RINGS = 12,
  IORING_REGISTER_FILES2 = 13,
  IORING_REGISTER_FILES_UPDATE2 = 14,
  IORING_REGISTER_BUFFERS2 = 15,
  IORING_REGISTER_BUFFERS_UPDATE = 16,
  IORING_REGISTER_IOWQ_AFF = 17,
  IORING_UNREGISTER_IOWQ_AFF = 18,
  IORING_REGISTER_IOWQ_MAX_WORKERS = 19,
  IORING_REGISTER_LAST = 20,
};

struct io_uring_rsrc_register {
  __u32 nr;
  __u32 resv;
  __u64 resv2;
  __u64 data;
  __u64 tags;
};

struct io_uring_rsrc_update2 {
  __u32 offset;
  __u32 resv;
  __u64 data;
  __u64 tags;
  __u32 nr;
  __u32 resv2;
};

struct io_uring_probe_op {
  __u8 op;
  __u8 resv;
  __u16 flags;
  __u32 resv2;
};

struct io_uring_probe {
  __u8 last_op;
  __u8 ops_len;
  __u16 resv;
  __u32 resv2[3];
  struct io_uring_probe_op ops[0];
};

struct io_uring_restriction {
  __u16 opcode;
  union {
    __u8 register_op;
    __u8 sqe_op;
    __u8 sqe_flags;
  };
  __u8 resv;
  __u32 resv2[3];
};

enum {
  IORING_RESTRICTION_REGISTER_OP = 0,
  IORING_RESTRICTION_SQE_OP = 1,
  IORING_RESTRICTION_SQE_FLAGS_ALLOWED = 2,
  IORING_RESTRICTION_SQE_FLAGS_REQUIRED = 3,
  IORING_RESTRICTION_LAST = 4,
};

struct io_uring_getevents_arg {
  __u64 sigmask;
  __u32 sigmask_sz;
  __u32 pad;
  __u64 ts;
};

enum {
  IO_WQ_WORK_CANCEL = 1,
  IO_WQ_WORK_HASHED = 2,
  IO_WQ_WORK_UNBOUND = 4,
  IO_WQ_WORK_CONCURRENT = 16,
  IO_WQ_HASH_SHIFT = 24,
};

enum io_wq_cancel {
  IO_WQ_CANCEL_OK = 0,
  IO_WQ_CANCEL_RUNNING = 1,
  IO_WQ_CANCEL_NOTFOUND = 2,
};

typedef struct io_wq_work* free_work_fn(struct io_wq_work*);

typedef void io_wq_work_fn(struct io_wq_work*);

struct io_wq_hash {
  refcount_t refs;
  long unsigned int map;
  struct wait_queue_head wait;
};

struct io_wq_data {
  struct io_wq_hash* hash;
  struct task_struct* task;
  io_wq_work_fn* do_work;
  free_work_fn* free_work;
};

struct io_uring {
  u32 head;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 tail;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct io_rings {
  struct io_uring sq;
  struct io_uring cq;
  u32 sq_ring_mask;
  u32 cq_ring_mask;
  u32 sq_ring_entries;
  u32 cq_ring_entries;
  u32 sq_dropped;
  u32 sq_flags;
  u32 cq_flags;
  u32 cq_overflow;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct io_uring_cqe cqes[0];
};

enum io_uring_cmd_flags {
  IO_URING_F_NONBLOCK = 1,
  IO_URING_F_COMPLETE_DEFER = 2,
};

struct io_mapped_ubuf {
  u64 ubuf;
  u64 ubuf_end;
  unsigned int nr_bvecs;
  long unsigned int acct_pages;
  struct bio_vec bvec[0];
};

struct io_overflow_cqe {
  struct io_uring_cqe cqe;
  struct list_head list;
};

struct io_fixed_file {
  long unsigned int file_ptr;
};

struct io_rsrc_put {
  struct list_head list;
  u64 tag;
  union {
    void* rsrc;
    struct file* file;
    struct io_mapped_ubuf* buf;
  };
};

struct io_file_table {
  struct io_fixed_file* files;
};

struct io_rsrc_data;

struct io_rsrc_node {
  struct percpu_ref refs;
  struct list_head node;
  struct list_head rsrc_list;
  struct io_rsrc_data* rsrc_data;
  struct llist_node llist;
  bool done;
};

typedef void rsrc_put_fn(struct io_ring_ctx*, struct io_rsrc_put*);

struct io_rsrc_data {
  struct io_ring_ctx* ctx;
  u64** tags;
  unsigned int nr;
  rsrc_put_fn* do_put;
  atomic_t refs;
  struct completion done;
  bool quiesce;
};

struct io_kiocb;

struct io_submit_link {
  struct io_kiocb* head;
  struct io_kiocb* last;
};

struct io_submit_state {
  struct blk_plug plug;
  struct io_submit_link link;
  void* reqs[32];
  unsigned int free_reqs;
  bool plug_started;
  struct io_kiocb* compl_reqs[32];
  unsigned int compl_nr;
  struct list_head free_list;
  unsigned int ios_left;
};

struct io_restriction {
  long unsigned int register_op[1];
  long unsigned int sqe_op[1];
  u8 sqe_flags_allowed;
  u8 sqe_flags_required;
  bool registered;
};

struct io_sq_data;

struct io_ring_ctx {
  struct {
    struct percpu_ref refs;
    struct io_rings* rings;
    unsigned int flags;
    unsigned int compat : 1;
    unsigned int drain_next : 1;
    unsigned int eventfd_async : 1;
    unsigned int restricted : 1;
    unsigned int off_timeout_used : 1;
    unsigned int drain_active : 1;
    long : 26;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct {
    struct mutex uring_lock;
    u32* sq_array;
    struct io_uring_sqe* sq_sqes;
    unsigned int cached_sq_head;
    unsigned int sq_entries;
    struct list_head defer_list;
    struct io_rsrc_node* rsrc_node;
    struct io_file_table file_table;
    unsigned int nr_user_files;
    unsigned int nr_user_bufs;
    struct io_mapped_ubuf** user_bufs;
    struct io_submit_state submit_state;
    struct list_head timeout_list;
    struct list_head ltimeout_list;
    struct list_head cq_overflow_list;
    struct xarray io_buffers;
    struct xarray personalities;
    u32 pers_next;
    unsigned int sq_thread_idle;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct list_head locked_free_list;
  unsigned int locked_free_nr;
  const struct cred* sq_creds;
  struct io_sq_data* sq_data;
  struct wait_queue_head sqo_sq_wait;
  struct list_head sqd_list;
  long unsigned int check_cq_overflow;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct {
    unsigned int cached_cq_tail;
    unsigned int cq_entries;
    struct eventfd_ctx* cq_ev_fd;
    struct wait_queue_head poll_wait;
    struct wait_queue_head cq_wait;
    unsigned int cq_extra;
    atomic_t cq_timeouts;
    unsigned int cq_last_tm_flush;
    long : 32;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
    long : 64;
  };
  struct {
    spinlock_t completion_lock;
    spinlock_t timeout_lock;
    struct list_head iopoll_list;
    struct hlist_head* cancel_hash;
    unsigned int cancel_hash_bits;
    bool poll_multi_queue;
    long : 24;
    long : 64;
    long : 64;
    long : 64;
  };
  struct io_restriction restrictions;
  struct {
    struct io_rsrc_node* rsrc_backup_node;
    struct io_mapped_ubuf* dummy_ubuf;
    struct io_rsrc_data* file_data;
    struct io_rsrc_data* buf_data;
    struct delayed_work rsrc_put_work;
    struct llist_head rsrc_put_llist;
    struct list_head rsrc_ref_list;
    spinlock_t rsrc_ref_lock;
  };
  struct {
    struct socket* ring_sock;
    struct io_wq_hash* hash_map;
    struct user_struct* user;
    struct mm_struct* mm_account;
    struct llist_head fallback_llist;
    struct delayed_work fallback_work;
    struct work_struct exit_work;
    struct list_head tctx_list;
    struct completion ref_comp;
  };
};

struct io_buffer {
  struct list_head list;
  __u64 addr;
  __u32 len;
  __u16 bid;
};

enum {
  IO_SQ_THREAD_SHOULD_STOP = 0,
  IO_SQ_THREAD_SHOULD_PARK = 1,
};

struct io_sq_data {
  refcount_t refs;
  atomic_t park_pending;
  struct mutex lock;
  struct list_head ctx_list;
  struct task_struct* thread;
  struct wait_queue_head wait;
  unsigned int sq_thread_idle;
  int sq_cpu;
  pid_t task_pid;
  pid_t task_tgid;
  long unsigned int state;
  struct completion exited;
};

struct io_rw {
  struct kiocb kiocb;
  u64 addr;
  u64 len;
};

struct io_poll_iocb {
  struct file* file;
  struct wait_queue_head* head;
  __poll_t events;
  bool done;
  bool canceled;
  struct wait_queue_entry wait;
};

struct io_poll_update {
  struct file* file;
  u64 old_user_data;
  u64 new_user_data;
  __poll_t events;
  bool update_events;
  bool update_user_data;
};

struct io_accept {
  struct file* file;
  struct sockaddr* addr;
  int* addr_len;
  int flags;
  u32 file_slot;
  long unsigned int nofile;
};

struct io_sync {
  struct file* file;
  loff_t len;
  loff_t off;
  int flags;
  int mode;
};

struct io_cancel {
  struct file* file;
  u64 addr;
};

struct io_timeout {
  struct file* file;
  u32 off;
  u32 target_seq;
  struct list_head list;
  struct io_kiocb* head;
  struct io_kiocb* prev;
};

struct io_timeout_rem {
  struct file* file;
  u64 addr;
  struct timespec64 ts;
  u32 flags;
  bool ltimeout;
};

struct io_connect {
  struct file* file;
  struct sockaddr* addr;
  int addr_len;
};

struct io_sr_msg {
  struct file* file;
  union {
    struct compat_msghdr* umsg_compat;
    struct user_msghdr* umsg;
    void* buf;
  };
  int msg_flags;
  int bgid;
  size_t len;
  struct io_buffer* kbuf;
};

struct io_open {
  struct file* file;
  int dfd;
  u32 file_slot;
  struct filename* filename;
  struct open_how how;
  long unsigned int nofile;
};

struct io_close {
  struct file* file;
  int fd;
  u32 file_slot;
};

struct io_rsrc_update {
  struct file* file;
  u64 arg;
  u32 nr_args;
  u32 offset;
};

struct io_fadvise {
  struct file* file;
  u64 offset;
  u32 len;
  u32 advice;
};

struct io_madvise {
  struct file* file;
  u64 addr;
  u32 len;
  u32 advice;
};

struct io_epoll {
  struct file* file;
  int epfd;
  int op;
  int fd;
  struct epoll_event event;
} __attribute__((packed));

struct io_splice {
  struct file* file_out;
  struct file* file_in;
  loff_t off_out;
  loff_t off_in;
  u64 len;
  unsigned int flags;
};

struct io_provide_buf {
  struct file* file;
  __u64 addr;
  __u32 len;
  __u32 bgid;
  __u16 nbufs;
  __u16 bid;
};

struct io_statx {
  struct file* file;
  int dfd;
  unsigned int mask;
  unsigned int flags;
  const char* filename;
  struct statx* buffer;
};

struct io_shutdown {
  struct file* file;
  int how;
};

struct io_rename {
  struct file* file;
  int old_dfd;
  int new_dfd;
  struct filename* oldpath;
  struct filename* newpath;
  int flags;
};

struct io_unlink {
  struct file* file;
  int dfd;
  int flags;
  struct filename* filename;
};

struct io_mkdir {
  struct file* file;
  int dfd;
  umode_t mode;
  struct filename* filename;
};

struct io_symlink {
  struct file* file;
  int new_dfd;
  struct filename* oldpath;
  struct filename* newpath;
};

struct io_hardlink {
  struct file* file;
  int old_dfd;
  int new_dfd;
  struct filename* oldpath;
  struct filename* newpath;
  int flags;
};

struct io_completion {
  struct file* file;
  u32 cflags;
};

typedef void (*io_req_tw_func_t)(struct io_kiocb*, bool*);

struct io_task_work {
  union {
    struct io_wq_work_node node;
    struct llist_node fallback_node;
  };
  io_req_tw_func_t func;
};

struct async_poll;

struct io_kiocb {
  union {
    struct file* file;
    struct io_rw rw;
    struct io_poll_iocb poll;
    struct io_poll_update poll_update;
    struct io_accept accept;
    struct io_sync sync;
    struct io_cancel cancel;
    struct io_timeout timeout;
    struct io_timeout_rem timeout_rem;
    struct io_connect connect;
    struct io_sr_msg sr_msg;
    struct io_open open;
    struct io_close close;
    struct io_rsrc_update rsrc_update;
    struct io_fadvise fadvise;
    struct io_madvise madvise;
    struct io_epoll epoll;
    struct io_splice splice;
    struct io_provide_buf pbuf;
    struct io_statx statx;
    struct io_shutdown shutdown;
    struct io_rename rename;
    struct io_unlink unlink;
    struct io_mkdir mkdir;
    struct io_symlink symlink;
    struct io_hardlink hardlink;
    struct io_completion compl;
  };
  void* async_data;
  u8 opcode;
  u8 iopoll_completed;
  u16 buf_index;
  u32 result;
  struct io_ring_ctx* ctx;
  unsigned int flags;
  atomic_t refs;
  struct task_struct* task;
  u64 user_data;
  struct io_kiocb* link;
  struct percpu_ref* fixed_rsrc_refs;
  struct list_head inflight_entry;
  struct io_task_work io_task_work;
  struct hlist_node hash_node;
  struct async_poll* apoll;
  struct io_wq_work work;
  const struct cred* creds;
  struct io_mapped_ubuf* imu;
};

struct io_timeout_data {
  struct io_kiocb* req;
  struct hrtimer timer;
  struct timespec64 ts;
  enum hrtimer_mode mode;
  u32 flags;
};

struct io_async_connect {
  struct __kernel_sockaddr_storage address;
};

struct io_async_msghdr {
  struct iovec fast_iov[8];
  struct iovec* free_iov;
  struct sockaddr* uaddr;
  struct msghdr msg;
  struct __kernel_sockaddr_storage addr;
};

struct io_async_rw {
  struct iovec fast_iov[8];
  const struct iovec* free_iovec;
  struct iov_iter iter;
  struct iov_iter_state iter_state;
  size_t bytes_done;
  struct wait_page_queue wpq;
};

enum {
  REQ_F_FIXED_FILE_BIT = 0,
  REQ_F_IO_DRAIN_BIT = 1,
  REQ_F_LINK_BIT = 2,
  REQ_F_HARDLINK_BIT = 3,
  REQ_F_FORCE_ASYNC_BIT = 4,
  REQ_F_BUFFER_SELECT_BIT = 5,
  REQ_F_FAIL_BIT = 8,
  REQ_F_INFLIGHT_BIT = 9,
  REQ_F_CUR_POS_BIT = 10,
  REQ_F_NOWAIT_BIT = 11,
  REQ_F_LINK_TIMEOUT_BIT = 12,
  REQ_F_NEED_CLEANUP_BIT = 13,
  REQ_F_POLLED_BIT = 14,
  REQ_F_BUFFER_SELECTED_BIT = 15,
  REQ_F_COMPLETE_INLINE_BIT = 16,
  REQ_F_REISSUE_BIT = 17,
  REQ_F_CREDS_BIT = 18,
  REQ_F_REFCOUNT_BIT = 19,
  REQ_F_ARM_LTIMEOUT_BIT = 20,
  REQ_F_NOWAIT_READ_BIT = 21,
  REQ_F_NOWAIT_WRITE_BIT = 22,
  REQ_F_ISREG_BIT = 23,
  __REQ_F_LAST_BIT = 24,
};

enum {
  REQ_F_FIXED_FILE = 1,
  REQ_F_IO_DRAIN = 2,
  REQ_F_LINK = 4,
  REQ_F_HARDLINK = 8,
  REQ_F_FORCE_ASYNC = 16,
  REQ_F_BUFFER_SELECT = 32,
  REQ_F_FAIL = 256,
  REQ_F_INFLIGHT = 512,
  REQ_F_CUR_POS = 1024,
  REQ_F_NOWAIT = 2048,
  REQ_F_LINK_TIMEOUT = 4096,
  REQ_F_NEED_CLEANUP = 8192,
  REQ_F_POLLED = 16384,
  REQ_F_BUFFER_SELECTED = 32768,
  REQ_F_COMPLETE_INLINE = 65536,
  REQ_F_REISSUE = 131072,
  REQ_F_NOWAIT_READ = 2097152,
  REQ_F_NOWAIT_WRITE = 4194304,
  REQ_F_ISREG = 8388608,
  REQ_F_CREDS = 262144,
  REQ_F_REFCOUNT = 524288,
  REQ_F_ARM_LTIMEOUT = 1048576,
};

struct async_poll {
  struct io_poll_iocb poll;
  struct io_poll_iocb* double_poll;
};

enum {
  IORING_RSRC_FILE = 0,
  IORING_RSRC_BUFFER = 1,
};

struct io_tctx_node {
  struct list_head ctx_node;
  struct task_struct* task;
  struct io_ring_ctx* ctx;
};

struct io_defer_entry {
  struct list_head list;
  struct io_kiocb* req;
  u32 seq;
};

struct io_op_def {
  unsigned int needs_file : 1;
  unsigned int hash_reg_file : 1;
  unsigned int unbound_nonreg_file : 1;
  unsigned int not_supported : 1;
  unsigned int pollin : 1;
  unsigned int pollout : 1;
  unsigned int buffer_select : 1;
  unsigned int needs_async_setup : 1;
  unsigned int plug : 1;
  short unsigned int async_size;
};

struct req_batch {
  struct task_struct* task;
  int task_refs;
  int ctx_refs;
};

struct io_poll_table {
  struct poll_table_struct pt;
  struct io_kiocb* req;
  int nr_entries;
  int error;
};

enum {
  IO_APOLL_OK = 0,
  IO_APOLL_ABORTED = 1,
  IO_APOLL_READY = 2,
};

struct io_cancel_data {
  struct io_ring_ctx* ctx;
  u64 user_data;
};

struct io_wait_queue {
  struct wait_queue_entry wq;
  struct io_ring_ctx* ctx;
  unsigned int cq_tail;
  unsigned int nr_timeouts;
};

struct io_tctx_exit {
  struct callback_head task_work;
  struct completion completion;
  struct io_ring_ctx* ctx;
};

struct io_task_cancel {
  struct task_struct* task;
  bool all;
};

struct creds;

enum {
  IO_WQ_BOUND = 0,
  IO_WQ_UNBOUND = 1,
};

typedef bool work_cancel_fn(struct io_wq_work*, void*);

enum {
  IO_WORKER_F_UP = 1,
  IO_WORKER_F_RUNNING = 2,
  IO_WORKER_F_FREE = 4,
  IO_WORKER_F_BOUND = 8,
};

enum {
  IO_WQ_BIT_EXIT = 0,
};

enum {
  IO_ACCT_STALLED_BIT = 0,
};

struct io_wqe;

struct io_worker {
  refcount_t ref;
  unsigned int flags;
  struct hlist_nulls_node nulls_node;
  struct list_head all_list;
  struct task_struct* task;
  struct io_wqe* wqe;
  struct io_wq_work* cur_work;
  spinlock_t lock;
  struct completion ref_done;
  long unsigned int create_state;
  struct callback_head create_work;
  int create_index;
  union {
    struct callback_head rcu;
    struct work_struct work;
  };
};

struct io_wqe_acct {
  unsigned int nr_workers;
  unsigned int max_workers;
  int index;
  atomic_t nr_running;
  struct io_wq_work_list work_list;
  long unsigned int flags;
};

struct io_wq___2;

struct io_wqe {
  raw_spinlock_t lock;
  struct io_wqe_acct acct[2];
  int node;
  struct hlist_nulls_head free_list;
  struct list_head all_list;
  struct wait_queue_entry wait;
  struct io_wq___2* wq;
  struct io_wq_work* hash_tail[64];
  cpumask_var_t cpu_mask;
};

enum {
  IO_WQ_ACCT_BOUND = 0,
  IO_WQ_ACCT_UNBOUND = 1,
  IO_WQ_ACCT_NR = 2,
};

struct io_wq___2 {
  long unsigned int state;
  free_work_fn* free_work;
  io_wq_work_fn* do_work;
  struct io_wq_hash* hash;
  atomic_t worker_refs;
  struct completion worker_done;
  struct hlist_node cpuhp_node;
  struct task_struct* task;
  struct io_wqe* wqes[0];
};

struct io_cb_cancel_data {
  work_cancel_fn* fn;
  void* data;
  int nr_running;
  int nr_pending;
  bool cancel_all;
};

struct online_data {
  unsigned int cpu;
  bool online;
};

struct iomap_ops {
  int (*iomap_begin)(
      struct inode*,
      loff_t,
      loff_t,
      unsigned int,
      struct iomap*,
      struct iomap*);
  int (*iomap_end)(
      struct inode*,
      loff_t,
      loff_t,
      ssize_t,
      unsigned int,
      struct iomap*);
};

struct trace_event_raw_dax_pmd_fault_class {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int vm_start;
  long unsigned int vm_end;
  long unsigned int vm_flags;
  long unsigned int address;
  long unsigned int pgoff;
  long unsigned int max_pgoff;
  dev_t dev;
  unsigned int flags;
  int result;
  char __data[0];
};

struct trace_event_raw_dax_pmd_load_hole_class {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int vm_flags;
  long unsigned int address;
  struct page* zero_page;
  void* radix_entry;
  dev_t dev;
  char __data[0];
};

struct trace_event_raw_dax_pmd_insert_mapping_class {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int vm_flags;
  long unsigned int address;
  long int length;
  u64 pfn_val;
  void* radix_entry;
  dev_t dev;
  int write;
  char __data[0];
};

struct trace_event_raw_dax_pte_fault_class {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int vm_flags;
  long unsigned int address;
  long unsigned int pgoff;
  dev_t dev;
  unsigned int flags;
  int result;
  char __data[0];
};

struct trace_event_raw_dax_insert_mapping {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int vm_flags;
  long unsigned int address;
  void* radix_entry;
  dev_t dev;
  int write;
  char __data[0];
};

struct trace_event_raw_dax_writeback_range_class {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int start_index;
  long unsigned int end_index;
  dev_t dev;
  char __data[0];
};

struct trace_event_raw_dax_writeback_one {
  struct trace_entry ent;
  long unsigned int ino;
  long unsigned int pgoff;
  long unsigned int pglen;
  dev_t dev;
  char __data[0];
};

struct trace_event_data_offsets_dax_pmd_fault_class {};

struct trace_event_data_offsets_dax_pmd_load_hole_class {};

struct trace_event_data_offsets_dax_pmd_insert_mapping_class {};

struct trace_event_data_offsets_dax_pte_fault_class {};

struct trace_event_data_offsets_dax_insert_mapping {};

struct trace_event_data_offsets_dax_writeback_range_class {};

struct trace_event_data_offsets_dax_writeback_one {};

typedef void (*btf_trace_dax_pmd_fault)(
    void*,
    struct inode*,
    struct vm_fault*,
    long unsigned int,
    int);

typedef void (*btf_trace_dax_pmd_fault_done)(
    void*,
    struct inode*,
    struct vm_fault*,
    long unsigned int,
    int);

typedef void (*btf_trace_dax_pmd_load_hole)(
    void*,
    struct inode*,
    struct vm_fault*,
    struct page*,
    void*);

typedef void (*btf_trace_dax_pmd_load_hole_fallback)(
    void*,
    struct inode*,
    struct vm_fault*,
    struct page*,
    void*);

typedef void (*btf_trace_dax_pmd_insert_mapping)(
    void*,
    struct inode*,
    struct vm_fault*,
    long int,
    pfn_t,
    void*);

typedef void (
    *btf_trace_dax_pte_fault)(void*, struct inode*, struct vm_fault*, int);

typedef void (
    *btf_trace_dax_pte_fault_done)(void*, struct inode*, struct vm_fault*, int);

typedef void (
    *btf_trace_dax_load_hole)(void*, struct inode*, struct vm_fault*, int);

typedef void (*btf_trace_dax_insert_pfn_mkwrite_no_entry)(
    void*,
    struct inode*,
    struct vm_fault*,
    int);

typedef void (*btf_trace_dax_insert_pfn_mkwrite)(
    void*,
    struct inode*,
    struct vm_fault*,
    int);

typedef void (*btf_trace_dax_insert_mapping)(
    void*,
    struct inode*,
    struct vm_fault*,
    void*);

typedef void (*btf_trace_dax_writeback_range)(
    void*,
    struct inode*,
    long unsigned int,
    long unsigned int);

typedef void (*btf_trace_dax_writeback_range_done)(
    void*,
    struct inode*,
    long unsigned int,
    long unsigned int);

typedef void (*btf_trace_dax_writeback_one)(
    void*,
    struct inode*,
    long unsigned int,
    long unsigned int);

struct exceptional_entry_key {
  struct xarray* xa;
  long unsigned int entry_start;
};

struct wait_exceptional_entry_queue {
  wait_queue_entry_t wait;
  struct exceptional_entry_key key;
};

enum dax_wake_mode {
  WAKE_ALL = 0,
  WAKE_NEXT = 1,
};

struct fsverity_hash_alg;

struct merkle_tree_params {
  struct fsverity_hash_alg* hash_alg;
  const u8* hashstate;
  unsigned int digest_size;
  unsigned int block_size;
  unsigned int hashes_per_block;
  unsigned int log_blocksize;
  unsigned int log_arity;
  unsigned int num_levels;
  u64 tree_size;
  long unsigned int level0_blocks;
  u64 level_start[8];
};

struct fsverity_info {
  struct merkle_tree_params tree_params;
  u8 root_hash[64];
  u8 file_digest[64];
  const struct inode* inode;
};

struct fsverity_enable_arg {
  __u32 version;
  __u32 hash_algorithm;
  __u32 block_size;
  __u32 salt_size;
  __u64 salt_ptr;
  __u32 sig_size;
  __u32 __reserved1;
  __u64 sig_ptr;
  __u64 __reserved2[11];
};

struct fsverity_descriptor {
  __u8 version;
  __u8 hash_algorithm;
  __u8 log_blocksize;
  __u8 salt_size;
  __le32 sig_size;
  __le64 data_size;
  __u8 root_hash[64];
  __u8 salt[32];
  __u8 __reserved[144];
  __u8 signature[0];
};

struct crypto_ahash;

struct fsverity_hash_alg {
  struct crypto_ahash* tfm;
  const char* name;
  unsigned int digest_size;
  unsigned int block_size;
  mempool_t req_pool;
};

struct ahash_request;

struct crypto_ahash {
  int (*init)(struct ahash_request*);
  int (*update)(struct ahash_request*);
  int (*final)(struct ahash_request*);
  int (*finup)(struct ahash_request*);
  int (*digest)(struct ahash_request*);
  int (*export)(struct ahash_request*, void*);
  int (*import)(struct ahash_request*, const void*);
  int (*setkey)(struct crypto_ahash*, const u8*, unsigned int);
  unsigned int reqsize;
  struct crypto_tfm base;
};

struct ahash_request {
  struct crypto_async_request base;
  unsigned int nbytes;
  struct scatterlist* src;
  u8* result;
  void* priv;
  void* __ctx[0];
};

struct hash_alg_common {
  unsigned int digestsize;
  unsigned int statesize;
  struct crypto_alg base;
};

struct fsverity_digest {
  __u16 digest_algorithm;
  __u16 digest_size;
  __u8 digest[0];
};

struct fsverity_read_metadata_arg {
  __u64 metadata_type;
  __u64 offset;
  __u64 length;
  __u64 buf_ptr;
  __u64 __reserved;
};

struct fsverity_formatted_digest {
  char magic[8];
  __le16 digest_algorithm;
  __le16 digest_size;
  __u8 digest[0];
};

struct flock64 {
  short int l_type;
  short int l_whence;
  __kernel_loff_t l_start;
  __kernel_loff_t l_len;
  __kernel_pid_t l_pid;
};

struct trace_event_raw_locks_get_lock_context {
  struct trace_entry ent;
  long unsigned int i_ino;
  dev_t s_dev;
  unsigned char type;
  struct file_lock_context* ctx;
  char __data[0];
};

struct trace_event_raw_filelock_lock {
  struct trace_entry ent;
  struct file_lock* fl;
  long unsigned int i_ino;
  dev_t s_dev;
  struct file_lock* fl_blocker;
  fl_owner_t fl_owner;
  unsigned int fl_pid;
  unsigned int fl_flags;
  unsigned char fl_type;
  loff_t fl_start;
  loff_t fl_end;
  int ret;
  char __data[0];
};

struct trace_event_raw_filelock_lease {
  struct trace_entry ent;
  struct file_lock* fl;
  long unsigned int i_ino;
  dev_t s_dev;
  struct file_lock* fl_blocker;
  fl_owner_t fl_owner;
  unsigned int fl_flags;
  unsigned char fl_type;
  long unsigned int fl_break_time;
  long unsigned int fl_downgrade_time;
  char __data[0];
};

struct trace_event_raw_generic_add_lease {
  struct trace_entry ent;
  long unsigned int i_ino;
  int wcount;
  int rcount;
  int icount;
  dev_t s_dev;
  fl_owner_t fl_owner;
  unsigned int fl_flags;
  unsigned char fl_type;
  char __data[0];
};

struct trace_event_raw_leases_conflict {
  struct trace_entry ent;
  void* lease;
  void* breaker;
  unsigned int l_fl_flags;
  unsigned int b_fl_flags;
  unsigned char l_fl_type;
  unsigned char b_fl_type;
  bool conflict;
  char __data[0];
};

struct trace_event_data_offsets_locks_get_lock_context {};

struct trace_event_data_offsets_filelock_lock {};

struct trace_event_data_offsets_filelock_lease {};

struct trace_event_data_offsets_generic_add_lease {};

struct trace_event_data_offsets_leases_conflict {};

typedef void (*btf_trace_locks_get_lock_context)(
    void*,
    struct inode*,
    int,
    struct file_lock_context*);

typedef void (
    *btf_trace_posix_lock_inode)(void*, struct inode*, struct file_lock*, int);

typedef void (
    *btf_trace_fcntl_setlk)(void*, struct inode*, struct file_lock*, int);

typedef void (*btf_trace_locks_remove_posix)(
    void*,
    struct inode*,
    struct file_lock*,
    int);

typedef void (
    *btf_trace_flock_lock_inode)(void*, struct inode*, struct file_lock*, int);

typedef void (
    *btf_trace_break_lease_noblock)(void*, struct inode*, struct file_lock*);

typedef void (
    *btf_trace_break_lease_block)(void*, struct inode*, struct file_lock*);

typedef void (
    *btf_trace_break_lease_unblock)(void*, struct inode*, struct file_lock*);

typedef void (
    *btf_trace_generic_delete_lease)(void*, struct inode*, struct file_lock*);

typedef void (
    *btf_trace_time_out_leases)(void*, struct inode*, struct file_lock*);

typedef void (
    *btf_trace_generic_add_lease)(void*, struct inode*, struct file_lock*);

typedef void (*btf_trace_leases_conflict)(
    void*,
    bool,
    struct file_lock*,
    struct file_lock*);

struct file_lock_list_struct {
  spinlock_t lock;
  struct hlist_head hlist;
};

struct locks_iterator {
  int li_cpu;
  loff_t li_pos;
};

enum {
  VERBOSE_STATUS = 1,
};

enum {
  Enabled = 0,
  Magic = 1,
};

typedef struct {
  struct list_head list;
  long unsigned int flags;
  int offset;
  int size;
  char* magic;
  char* mask;
  const char* interpreter;
  char* name;
  struct dentry* dentry;
  struct file* interp_file;
} Node;

typedef unsigned int __kernel_uid_t;

typedef unsigned int __kernel_gid_t;

struct elf_prpsinfo {
  char pr_state;
  char pr_sname;
  char pr_zomb;
  char pr_nice;
  long unsigned int pr_flag;
  __kernel_uid_t pr_uid;
  __kernel_gid_t pr_gid;
  pid_t pr_pid;
  pid_t pr_ppid;
  pid_t pr_pgrp;
  pid_t pr_sid;
  char pr_fname[16];
  char pr_psargs[80];
};

struct core_vma_metadata {
  long unsigned int start;
  long unsigned int end;
  long unsigned int flags;
  long unsigned int dump_size;
};

struct arch_elf_state {};

struct memelfnote {
  const char* name;
  int type;
  unsigned int datasz;
  void* data;
};

struct elf_thread_core_info {
  struct elf_thread_core_info* next;
  struct task_struct* task;
  struct elf_prstatus prstatus;
  struct memelfnote notes[0];
};

struct elf_note_info {
  struct elf_thread_core_info* thread;
  struct memelfnote psinfo;
  struct memelfnote signote;
  struct memelfnote auxv;
  struct memelfnote files;
  siginfo_t csigdata;
  size_t size;
  int thread_notes;
};

struct user_regs_struct {
  long unsigned int r15;
  long unsigned int r14;
  long unsigned int r13;
  long unsigned int r12;
  long unsigned int bp;
  long unsigned int bx;
  long unsigned int r11;
  long unsigned int r10;
  long unsigned int r9;
  long unsigned int r8;
  long unsigned int ax;
  long unsigned int cx;
  long unsigned int dx;
  long unsigned int si;
  long unsigned int di;
  long unsigned int orig_ax;
  long unsigned int ip;
  long unsigned int cs;
  long unsigned int flags;
  long unsigned int sp;
  long unsigned int ss;
  long unsigned int fs_base;
  long unsigned int gs_base;
  long unsigned int ds;
  long unsigned int es;
  long unsigned int fs;
  long unsigned int gs;
};

typedef __u32 Elf32_Addr;

typedef __u16 Elf32_Half;

typedef __u32 Elf32_Off;

struct elf32_hdr {
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
};

struct elf32_phdr {
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
};

struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
};

struct user_regs_struct32 {
  __u32 ebx;
  __u32 ecx;
  __u32 edx;
  __u32 esi;
  __u32 edi;
  __u32 ebp;
  __u32 eax;
  short unsigned int ds;
  short unsigned int __ds;
  short unsigned int es;
  short unsigned int __es;
  short unsigned int fs;
  short unsigned int __fs;
  short unsigned int gs;
  short unsigned int __gs;
  __u32 orig_eax;
  __u32 eip;
  short unsigned int cs;
  short unsigned int __cs;
  __u32 eflags;
  __u32 esp;
  short unsigned int ss;
  short unsigned int __ss;
};

struct compat_elf_siginfo {
  compat_int_t si_signo;
  compat_int_t si_code;
  compat_int_t si_errno;
};

struct compat_elf_prstatus_common {
  struct compat_elf_siginfo pr_info;
  short int pr_cursig;
  compat_ulong_t pr_sigpend;
  compat_ulong_t pr_sighold;
  compat_pid_t pr_pid;
  compat_pid_t pr_ppid;
  compat_pid_t pr_pgrp;
  compat_pid_t pr_sid;
  struct old_timeval32 pr_utime;
  struct old_timeval32 pr_stime;
  struct old_timeval32 pr_cutime;
  struct old_timeval32 pr_cstime;
};

struct compat_elf_prpsinfo {
  char pr_state;
  char pr_sname;
  char pr_zomb;
  char pr_nice;
  compat_ulong_t pr_flag;
  __compat_uid_t pr_uid;
  __compat_gid_t pr_gid;
  compat_pid_t pr_pid;
  compat_pid_t pr_ppid;
  compat_pid_t pr_pgrp;
  compat_pid_t pr_sid;
  char pr_fname[16];
  char pr_psargs[80];
};

typedef struct user_regs_struct compat_elf_gregset_t;

struct i386_elf_prstatus {
  struct compat_elf_prstatus_common common;
  struct user_regs_struct32 pr_reg;
  compat_int_t pr_fpvalid;
};

struct compat_elf_prstatus {
  struct compat_elf_prstatus_common common;
  compat_elf_gregset_t pr_reg;
  compat_int_t pr_fpvalid;
};

struct elf_thread_core_info___2 {
  struct elf_thread_core_info___2* next;
  struct task_struct* task;
  struct compat_elf_prstatus prstatus;
  struct memelfnote notes[0];
};

struct elf_note_info___2 {
  struct elf_thread_core_info___2* thread;
  struct memelfnote psinfo;
  struct memelfnote signote;
  struct memelfnote auxv;
  struct memelfnote files;
  compat_siginfo_t csigdata;
  size_t size;
  int thread_notes;
};

struct mb_cache_entry {
  struct list_head e_list;
  struct hlist_bl_node e_hash_list;
  atomic_t e_refcnt;
  u32 e_key;
  u32 e_referenced : 1;
  u32 e_reusable : 1;
  u64 e_value;
};

struct mb_cache {
  struct hlist_bl_head* c_hash;
  int c_bucket_bits;
  long unsigned int c_max_entries;
  spinlock_t c_list_lock;
  struct list_head c_list;
  long unsigned int c_entry_count;
  struct shrinker c_shrink;
  struct work_struct c_shrink_work;
};

struct posix_acl_xattr_entry {
  __le16 e_tag;
  __le16 e_perm;
  __le32 e_id;
};

struct posix_acl_xattr_header {
  __le32 a_version;
};

struct core_name {
  char* corename;
  int used;
  int size;
};

struct trace_event_raw_iomap_readpage_class {
  struct trace_entry ent;
  dev_t dev;
  u64 ino;
  int nr_pages;
  char __data[0];
};

struct trace_event_raw_iomap_range_class {
  struct trace_entry ent;
  dev_t dev;
  u64 ino;
  loff_t size;
  long unsigned int offset;
  unsigned int length;
  char __data[0];
};

struct trace_event_raw_iomap_class {
  struct trace_entry ent;
  dev_t dev;
  u64 ino;
  u64 addr;
  loff_t offset;
  u64 length;
  u16 type;
  u16 flags;
  dev_t bdev;
  char __data[0];
};

struct trace_event_raw_iomap_apply {
  struct trace_entry ent;
  dev_t dev;
  u64 ino;
  loff_t pos;
  loff_t length;
  unsigned int flags;
  const void* ops;
  void* actor;
  long unsigned int caller;
  char __data[0];
};

struct trace_event_data_offsets_iomap_readpage_class {};

struct trace_event_data_offsets_iomap_range_class {};

struct trace_event_data_offsets_iomap_class {};

struct trace_event_data_offsets_iomap_apply {};

typedef void (*btf_trace_iomap_readpage)(void*, struct inode*, int);

typedef void (*btf_trace_iomap_readahead)(void*, struct inode*, int);

typedef void (*btf_trace_iomap_writepage)(
    void*,
    struct inode*,
    long unsigned int,
    unsigned int);

typedef void (*btf_trace_iomap_releasepage)(
    void*,
    struct inode*,
    long unsigned int,
    unsigned int);

typedef void (*btf_trace_iomap_invalidatepage)(
    void*,
    struct inode*,
    long unsigned int,
    unsigned int);

typedef void (*btf_trace_iomap_dio_invalidate_fail)(
    void*,
    struct inode*,
    long unsigned int,
    unsigned int);

typedef void (
    *btf_trace_iomap_apply_dstmap)(void*, struct inode*, struct iomap*);

typedef void (
    *btf_trace_iomap_apply_srcmap)(void*, struct inode*, struct iomap*);

typedef void (*btf_trace_iomap_apply)(
    void*,
    struct inode*,
    loff_t,
    loff_t,
    unsigned int,
    const void*,
    void*,
    long unsigned int);

typedef loff_t (*iomap_actor_t)(
    struct inode*,
    loff_t,
    loff_t,
    void*,
    struct iomap*,
    struct iomap*);

struct iomap_ioend {
  struct list_head io_list;
  u16 io_type;
  u16 io_flags;
  struct inode* io_inode;
  size_t io_size;
  loff_t io_offset;
  void* io_private;
  struct bio* io_bio;
  struct bio io_inline_bio;
};

struct iomap_writepage_ctx;

struct iomap_writeback_ops {
  int (*map_blocks)(struct iomap_writepage_ctx*, struct inode*, loff_t);
  int (*prepare_ioend)(struct iomap_ioend*, int);
  void (*discard_page)(struct page*, loff_t);
};

struct iomap_writepage_ctx {
  struct iomap iomap;
  struct iomap_ioend* ioend;
  const struct iomap_writeback_ops* ops;
};

struct iomap_page {
  atomic_t read_bytes_pending;
  atomic_t write_bytes_pending;
  spinlock_t uptodate_lock;
  long unsigned int uptodate[0];
};

struct iomap_readpage_ctx {
  struct page* cur_page;
  bool cur_page_in_bio;
  struct bio* bio;
  struct readahead_control* rac;
};

enum {
  IOMAP_WRITE_F_UNSHARE = 1,
};

struct iomap_dio_ops {
  int (*end_io)(struct kiocb*, ssize_t, int, unsigned int);
  blk_qc_t (*submit_io)(struct inode*, struct iomap*, struct bio*, loff_t);
};

struct iomap_dio {
  struct kiocb* iocb;
  const struct iomap_dio_ops* dops;
  loff_t i_size;
  loff_t size;
  atomic_t ref;
  unsigned int flags;
  int error;
  bool wait_for_completion;
  union {
    struct {
      struct iov_iter* iter;
      struct task_struct* waiter;
      struct request_queue* last_queue;
      blk_qc_t cookie;
    } submit;
    struct {
      struct work_struct work;
    } aio;
  };
};

struct fiemap_ctx {
  struct fiemap_extent_info* fi;
  struct iomap prev;
};

struct iomap_swapfile_info {
  struct iomap iomap;
  struct swap_info_struct* sis;
  uint64_t lowest_ppage;
  uint64_t highest_ppage;
  long unsigned int nr_pages;
  int nr_extents;
};

enum {
  QIF_BLIMITS_B = 0,
  QIF_SPACE_B = 1,
  QIF_ILIMITS_B = 2,
  QIF_INODES_B = 3,
  QIF_BTIME_B = 4,
  QIF_ITIME_B = 5,
};

typedef __kernel_uid32_t qid_t;

enum {
  DQF_INFO_DIRTY_B = 17,
};

enum {
  _DQUOT_USAGE_ENABLED = 0,
  _DQUOT_LIMITS_ENABLED = 1,
  _DQUOT_SUSPENDED = 2,
  _DQUOT_STATE_FLAGS = 3,
};

struct quota_module_name {
  int qm_fmt_id;
  char* qm_mod_name;
};

struct dquot_warn {
  struct super_block* w_sb;
  struct kqid w_dq_id;
  short int w_type;
};

struct fs_disk_quota {
  __s8 d_version;
  __s8 d_flags;
  __u16 d_fieldmask;
  __u32 d_id;
  __u64 d_blk_hardlimit;
  __u64 d_blk_softlimit;
  __u64 d_ino_hardlimit;
  __u64 d_ino_softlimit;
  __u64 d_bcount;
  __u64 d_icount;
  __s32 d_itimer;
  __s32 d_btimer;
  __u16 d_iwarns;
  __u16 d_bwarns;
  __s8 d_itimer_hi;
  __s8 d_btimer_hi;
  __s8 d_rtbtimer_hi;
  __s8 d_padding2;
  __u64 d_rtb_hardlimit;
  __u64 d_rtb_softlimit;
  __u64 d_rtbcount;
  __s32 d_rtbtimer;
  __u16 d_rtbwarns;
  __s16 d_padding3;
  char d_padding4[8];
};

struct fs_qfilestat {
  __u64 qfs_ino;
  __u64 qfs_nblks;
  __u32 qfs_nextents;
};

typedef struct fs_qfilestat fs_qfilestat_t;

struct fs_quota_stat {
  __s8 qs_version;
  __u16 qs_flags;
  __s8 qs_pad;
  fs_qfilestat_t qs_uquota;
  fs_qfilestat_t qs_gquota;
  __u32 qs_incoredqs;
  __s32 qs_btimelimit;
  __s32 qs_itimelimit;
  __s32 qs_rtbtimelimit;
  __u16 qs_bwarnlimit;
  __u16 qs_iwarnlimit;
};

struct fs_qfilestatv {
  __u64 qfs_ino;
  __u64 qfs_nblks;
  __u32 qfs_nextents;
  __u32 qfs_pad;
};

struct fs_quota_statv {
  __s8 qs_version;
  __u8 qs_pad1;
  __u16 qs_flags;
  __u32 qs_incoredqs;
  struct fs_qfilestatv qs_uquota;
  struct fs_qfilestatv qs_gquota;
  struct fs_qfilestatv qs_pquota;
  __s32 qs_btimelimit;
  __s32 qs_itimelimit;
  __s32 qs_rtbtimelimit;
  __u16 qs_bwarnlimit;
  __u16 qs_iwarnlimit;
  __u64 qs_pad2[8];
};

struct if_dqblk {
  __u64 dqb_bhardlimit;
  __u64 dqb_bsoftlimit;
  __u64 dqb_curspace;
  __u64 dqb_ihardlimit;
  __u64 dqb_isoftlimit;
  __u64 dqb_curinodes;
  __u64 dqb_btime;
  __u64 dqb_itime;
  __u32 dqb_valid;
};

struct if_nextdqblk {
  __u64 dqb_bhardlimit;
  __u64 dqb_bsoftlimit;
  __u64 dqb_curspace;
  __u64 dqb_ihardlimit;
  __u64 dqb_isoftlimit;
  __u64 dqb_curinodes;
  __u64 dqb_btime;
  __u64 dqb_itime;
  __u32 dqb_valid;
  __u32 dqb_id;
};

struct if_dqinfo {
  __u64 dqi_bgrace;
  __u64 dqi_igrace;
  __u32 dqi_flags;
  __u32 dqi_valid;
};

struct compat_if_dqblk {
  compat_u64 dqb_bhardlimit;
  compat_u64 dqb_bsoftlimit;
  compat_u64 dqb_curspace;
  compat_u64 dqb_ihardlimit;
  compat_u64 dqb_isoftlimit;
  compat_u64 dqb_curinodes;
  compat_u64 dqb_btime;
  compat_u64 dqb_itime;
  compat_uint_t dqb_valid;
} __attribute__((packed));

struct compat_fs_qfilestat {
  compat_u64 dqb_bhardlimit;
  compat_u64 qfs_nblks;
  compat_uint_t qfs_nextents;
} __attribute__((packed));

struct compat_fs_quota_stat {
  __s8 qs_version;
  char : 8;
  __u16 qs_flags;
  __s8 qs_pad;
  int : 24;
  struct compat_fs_qfilestat qs_uquota;
  struct compat_fs_qfilestat qs_gquota;
  compat_uint_t qs_incoredqs;
  compat_int_t qs_btimelimit;
  compat_int_t qs_itimelimit;
  compat_int_t qs_rtbtimelimit;
  __u16 qs_bwarnlimit;
  __u16 qs_iwarnlimit;
} __attribute__((packed));

enum {
  QUOTA_NL_C_UNSPEC = 0,
  QUOTA_NL_C_WARNING = 1,
  __QUOTA_NL_C_MAX = 2,
};

enum {
  QUOTA_NL_A_UNSPEC = 0,
  QUOTA_NL_A_QTYPE = 1,
  QUOTA_NL_A_EXCESS_ID = 2,
  QUOTA_NL_A_WARNING = 3,
  QUOTA_NL_A_DEV_MAJOR = 4,
  QUOTA_NL_A_DEV_MINOR = 5,
  QUOTA_NL_A_CAUSED_ID = 6,
  QUOTA_NL_A_PAD = 7,
  __QUOTA_NL_A_MAX = 8,
};

struct proc_maps_private {
  struct inode* inode;
  struct task_struct* task;
  struct mm_struct* mm;
  struct vm_area_struct* tail_vma;
  struct mempolicy* task_mempolicy;
};

struct mem_size_stats {
  long unsigned int resident;
  long unsigned int shared_clean;
  long unsigned int shared_dirty;
  long unsigned int private_clean;
  long unsigned int private_dirty;
  long unsigned int referenced;
  long unsigned int anonymous;
  long unsigned int lazyfree;
  long unsigned int anonymous_thp;
  long unsigned int shmem_thp;
  long unsigned int file_thp;
  long unsigned int swap;
  long unsigned int shared_hugetlb;
  long unsigned int private_hugetlb;
  u64 pss;
  u64 pss_anon;
  u64 pss_file;
  u64 pss_shmem;
  u64 pss_locked;
  u64 swap_pss;
  bool check_shmem_swap;
};

enum clear_refs_types {
  CLEAR_REFS_ALL = 1,
  CLEAR_REFS_ANON = 2,
  CLEAR_REFS_MAPPED = 3,
  CLEAR_REFS_SOFT_DIRTY = 4,
  CLEAR_REFS_MM_HIWATER_RSS = 5,
  CLEAR_REFS_LAST = 6,
};

struct clear_refs_private {
  enum clear_refs_types type;
};

typedef struct {
  u64 pme;
} pagemap_entry_t;

struct pagemapread {
  int pos;
  int len;
  pagemap_entry_t* buffer;
  bool show_pfn;
};

struct numa_maps {
  long unsigned int pages;
  long unsigned int anon;
  long unsigned int active;
  long unsigned int writeback;
  long unsigned int mapcount_max;
  long unsigned int dirty;
  long unsigned int swapcache;
  long unsigned int node[8];
};

struct numa_maps_private {
  struct proc_maps_private proc_maps;
  struct numa_maps md;
};

struct pde_opener {
  struct list_head lh;
  struct file* file;
  bool closing;
  struct completion* c;
};

enum {
  BIAS = 2147483648,
};

struct proc_fs_context {
  struct pid_namespace* pid_ns;
  unsigned int mask;
  enum proc_hidepid hidepid;
  int gid;
  enum proc_pidonly pidonly;
};

enum proc_param {
  Opt_gid___2 = 0,
  Opt_hidepid = 1,
  Opt_subset = 2,
};

struct genradix_root;

struct __genradix {
  struct genradix_root* root;
};

struct syscall_info {
  __u64 sp;
  struct seccomp_data data;
};

typedef struct dentry*
instantiate_t(struct dentry*, struct task_struct*, const void*);

struct pid_entry {
  const char* name;
  unsigned int len;
  umode_t mode;
  const struct inode_operations* iop;
  const struct file_operations* fop;
  union proc_op op;
};

struct limit_names {
  const char* name;
  const char* unit;
};

struct map_files_info {
  long unsigned int start;
  long unsigned int end;
  fmode_t mode;
};

struct tgid_iter {
  unsigned int tgid;
  struct task_struct* task;
};

struct fd_data {
  fmode_t mode;
  unsigned int fd;
};

struct sysctl_alias {
  const char* kernel_param;
  const char* sysctl_param;
};

struct seq_net_private {
  struct net* net;
};

struct bpf_iter_aux_info___2;

struct vmcore {
  struct list_head list;
  long long unsigned int paddr;
  long long unsigned int size;
  loff_t offset;
};

typedef struct elf32_hdr Elf32_Ehdr;

typedef struct elf32_phdr Elf32_Phdr;

typedef struct elf32_note Elf32_Nhdr;

typedef struct elf64_note Elf64_Nhdr;

struct kernfs_iattrs {
  kuid_t ia_uid;
  kgid_t ia_gid;
  struct timespec64 ia_atime;
  struct timespec64 ia_mtime;
  struct timespec64 ia_ctime;
  struct simple_xattrs xattrs;
  atomic_t nr_user_xattrs;
  atomic_t user_xattr_size;
};

struct kernfs_super_info {
  struct super_block* sb;
  struct kernfs_root* root;
  const void* ns;
  struct list_head node;
};

enum kernfs_node_flag {
  KERNFS_ACTIVATED = 16,
  KERNFS_NS = 32,
  KERNFS_HAS_SEQ_SHOW = 64,
  KERNFS_HAS_MMAP = 128,
  KERNFS_LOCKDEP = 256,
  KERNFS_SUICIDAL = 1024,
  KERNFS_SUICIDED = 2048,
  KERNFS_EMPTY_DIR = 4096,
  KERNFS_HAS_RELEASE = 8192,
};

struct kernfs_open_node {
  atomic_t refcnt;
  atomic_t event;
  wait_queue_head_t poll;
  struct list_head files;
};

struct config_group;

struct config_item_type;

struct config_item {
  char* ci_name;
  char ci_namebuf[20];
  struct kref ci_kref;
  struct list_head ci_entry;
  struct config_item* ci_parent;
  struct config_group* ci_group;
  const struct config_item_type* ci_type;
  struct dentry* ci_dentry;
};

struct configfs_subsystem;

struct config_group {
  struct config_item cg_item;
  struct list_head cg_children;
  struct configfs_subsystem* cg_subsys;
  struct list_head default_groups;
  struct list_head group_entry;
};

struct configfs_item_operations;

struct configfs_group_operations;

struct configfs_attribute;

struct configfs_bin_attribute;

struct config_item_type {
  struct module* ct_owner;
  struct configfs_item_operations* ct_item_ops;
  struct configfs_group_operations* ct_group_ops;
  struct configfs_attribute** ct_attrs;
  struct configfs_bin_attribute** ct_bin_attrs;
};

struct configfs_item_operations {
  void (*release)(struct config_item*);
  int (*allow_link)(struct config_item*, struct config_item*);
  void (*drop_link)(struct config_item*, struct config_item*);
};

struct configfs_group_operations {
  struct config_item* (*make_item)(struct config_group*, const char*);
  struct config_group* (*make_group)(struct config_group*, const char*);
  int (*commit_item)(struct config_item*);
  void (*disconnect_notify)(struct config_group*, struct config_item*);
  void (*drop_item)(struct config_group*, struct config_item*);
};

struct configfs_attribute {
  const char* ca_name;
  struct module* ca_owner;
  umode_t ca_mode;
  ssize_t (*show)(struct config_item*, char*);
  ssize_t (*store)(struct config_item*, const char*, size_t);
};

struct configfs_bin_attribute {
  struct configfs_attribute cb_attr;
  void* cb_private;
  size_t cb_max_size;
  ssize_t (*read)(struct config_item*, void*, size_t);
  ssize_t (*write)(struct config_item*, const void*, size_t);
};

struct configfs_subsystem {
  struct config_group su_group;
  struct mutex su_mutex;
};

struct configfs_fragment {
  atomic_t frag_count;
  struct rw_semaphore frag_sem;
  bool frag_dead;
};

struct configfs_dirent {
  atomic_t s_count;
  int s_dependent_count;
  struct list_head s_sibling;
  struct list_head s_children;
  int s_links;
  void* s_element;
  int s_type;
  umode_t s_mode;
  struct dentry* s_dentry;
  struct iattr* s_iattr;
  struct configfs_fragment* s_frag;
};

struct configfs_buffer {
  size_t count;
  loff_t pos;
  char* page;
  struct configfs_item_operations* ops;
  struct mutex mutex;
  int needs_read_fill;
  bool read_in_progress;
  bool write_in_progress;
  char* bin_buffer;
  int bin_buffer_size;
  int cb_max_size;
  struct config_item* item;
  struct module* owner;
  union {
    struct configfs_attribute* attr;
    struct configfs_bin_attribute* bin_attr;
  };
};

struct pts_mount_opts {
  int setuid;
  int setgid;
  kuid_t uid;
  kgid_t gid;
  umode_t mode;
  umode_t ptmxmode;
  int reserve;
  int max;
};

enum {
  Opt_uid___2 = 0,
  Opt_gid___3 = 1,
  Opt_mode___2 = 2,
  Opt_ptmxmode = 3,
  Opt_newinstance = 4,
  Opt_max = 5,
  Opt_err = 6,
};

struct pts_fs_info {
  struct ida allocated_ptys;
  struct pts_mount_opts mount_opts;
  struct super_block* sb;
  struct dentry* ptmx_dentry;
};

typedef unsigned int tid_t;

struct transaction_chp_stats_s {
  long unsigned int cs_chp_time;
  __u32 cs_forced_to_close;
  __u32 cs_written;
  __u32 cs_dropped;
};

struct journal_s;

typedef struct journal_s journal_t;

struct journal_head;

struct transaction_s;

typedef struct transaction_s transaction_t;

struct transaction_s {
  journal_t* t_journal;
  tid_t t_tid;
  enum {
    T_RUNNING = 0,
    T_LOCKED = 1,
    T_SWITCH = 2,
    T_FLUSH = 3,
    T_COMMIT = 4,
    T_COMMIT_DFLUSH = 5,
    T_COMMIT_JFLUSH = 6,
    T_COMMIT_CALLBACK = 7,
    T_FINISHED = 8,
  } t_state;
  long unsigned int t_log_start;
  int t_nr_buffers;
  struct journal_head* t_reserved_list;
  struct journal_head* t_buffers;
  struct journal_head* t_forget;
  struct journal_head* t_checkpoint_list;
  struct journal_head* t_checkpoint_io_list;
  struct journal_head* t_shadow_list;
  struct list_head t_inode_list;
  spinlock_t t_handle_lock;
  long unsigned int t_max_wait;
  long unsigned int t_start;
  long unsigned int t_requested;
  struct transaction_chp_stats_s t_chp_stats;
  atomic_t t_updates;
  atomic_t t_outstanding_credits;
  atomic_t t_outstanding_revokes;
  atomic_t t_handle_count;
  transaction_t* t_cpnext;
  transaction_t* t_cpprev;
  long unsigned int t_expires;
  ktime_t t_start_time;
  unsigned int t_synchronous_commit : 1;
  int t_need_data_flush;
  struct list_head t_private_list;
};

struct jbd2_buffer_trigger_type;

struct journal_head {
  struct buffer_head* b_bh;
  spinlock_t b_state_lock;
  int b_jcount;
  unsigned int b_jlist;
  unsigned int b_modified;
  char* b_frozen_data;
  char* b_committed_data;
  transaction_t* b_transaction;
  transaction_t* b_next_transaction;
  struct journal_head* b_tnext;
  struct journal_head* b_tprev;
  transaction_t* b_cp_transaction;
  struct journal_head* b_cpnext;
  struct journal_head* b_cpprev;
  struct jbd2_buffer_trigger_type* b_triggers;
  struct jbd2_buffer_trigger_type* b_frozen_triggers;
};

struct jbd2_buffer_trigger_type {
  void (*t_frozen)(
      struct jbd2_buffer_trigger_type*,
      struct buffer_head*,
      void*,
      size_t);
  void (*t_abort)(struct jbd2_buffer_trigger_type*, struct buffer_head*);
};

struct jbd2_journal_handle;

typedef struct jbd2_journal_handle handle_t;

struct jbd2_journal_handle {
  union {
    transaction_t* h_transaction;
    journal_t* h_journal;
  };
  handle_t* h_rsv_handle;
  int h_total_credits;
  int h_revoke_credits;
  int h_revoke_credits_requested;
  int h_ref;
  int h_err;
  unsigned int h_sync : 1;
  unsigned int h_jdata : 1;
  unsigned int h_reserved : 1;
  unsigned int h_aborted : 1;
  unsigned int h_type : 8;
  unsigned int h_line_no : 16;
  long unsigned int h_start_jiffies;
  unsigned int h_requested_credits;
  unsigned int saved_alloc_context;
};

struct transaction_run_stats_s {
  long unsigned int rs_wait;
  long unsigned int rs_request_delay;
  long unsigned int rs_running;
  long unsigned int rs_locked;
  long unsigned int rs_flushing;
  long unsigned int rs_logging;
  __u32 rs_handle_count;
  __u32 rs_blocks;
  __u32 rs_blocks_logged;
};

struct transaction_stats_s {
  long unsigned int ts_tid;
  long unsigned int ts_requested;
  struct transaction_run_stats_s run;
};

enum passtype {
  PASS_SCAN = 0,
  PASS_REVOKE = 1,
  PASS_REPLAY = 2,
};

struct journal_superblock_s;

typedef struct journal_superblock_s journal_superblock_t;

struct jbd2_revoke_table_s;

struct jbd2_inode;

struct journal_s {
  long unsigned int j_flags;
  int j_errno;
  struct mutex j_abort_mutex;
  struct buffer_head* j_sb_buffer;
  journal_superblock_t* j_superblock;
  int j_format_version;
  rwlock_t j_state_lock;
  int j_barrier_count;
  struct mutex j_barrier;
  transaction_t* j_running_transaction;
  transaction_t* j_committing_transaction;
  transaction_t* j_checkpoint_transactions;
  wait_queue_head_t j_wait_transaction_locked;
  wait_queue_head_t j_wait_done_commit;
  wait_queue_head_t j_wait_commit;
  wait_queue_head_t j_wait_updates;
  wait_queue_head_t j_wait_reserved;
  wait_queue_head_t j_fc_wait;
  struct mutex j_checkpoint_mutex;
  struct buffer_head* j_chkpt_bhs[64];
  long unsigned int j_head;
  long unsigned int j_tail;
  long unsigned int j_free;
  long unsigned int j_first;
  long unsigned int j_last;
  long unsigned int j_fc_first;
  long unsigned int j_fc_off;
  long unsigned int j_fc_last;
  struct block_device* j_dev;
  int j_blocksize;
  long long unsigned int j_blk_offset;
  char j_devname[56];
  struct block_device* j_fs_dev;
  unsigned int j_total_len;
  atomic_t j_reserved_credits;
  spinlock_t j_list_lock;
  struct inode* j_inode;
  tid_t j_tail_sequence;
  tid_t j_transaction_sequence;
  tid_t j_commit_sequence;
  tid_t j_commit_request;
  __u8 j_uuid[16];
  struct task_struct* j_task;
  int j_max_transaction_buffers;
  int j_revoke_records_per_block;
  long unsigned int j_commit_interval;
  struct timer_list j_commit_timer;
  spinlock_t j_revoke_lock;
  struct jbd2_revoke_table_s* j_revoke;
  struct jbd2_revoke_table_s* j_revoke_table[2];
  struct buffer_head** j_wbuf;
  struct buffer_head** j_fc_wbuf;
  int j_wbufsize;
  int j_fc_wbufsize;
  pid_t j_last_sync_writer;
  u64 j_average_commit_time;
  u32 j_min_batch_time;
  u32 j_max_batch_time;
  void (*j_commit_callback)(journal_t*, transaction_t*);
  int (*j_submit_inode_data_buffers)(struct jbd2_inode*);
  int (*j_finish_inode_data_buffers)(struct jbd2_inode*);
  spinlock_t j_history_lock;
  struct proc_dir_entry* j_proc_entry;
  struct transaction_stats_s j_stats;
  unsigned int j_failed_commit;
  void* j_private;
  struct crypto_shash* j_chksum_driver;
  __u32 j_csum_seed;
  void (*j_fc_cleanup_callback)(struct journal_s*, int);
  int (*j_fc_replay_callback)(
      struct journal_s*,
      struct buffer_head*,
      enum passtype,
      int,
      tid_t);
};

struct journal_header_s {
  __be32 h_magic;
  __be32 h_blocktype;
  __be32 h_sequence;
};

typedef struct journal_header_s journal_header_t;

struct journal_superblock_s {
  journal_header_t s_header;
  __be32 s_blocksize;
  __be32 s_maxlen;
  __be32 s_first;
  __be32 s_sequence;
  __be32 s_start;
  __be32 s_errno;
  __be32 s_feature_compat;
  __be32 s_feature_incompat;
  __be32 s_feature_ro_compat;
  __u8 s_uuid[16];
  __be32 s_nr_users;
  __be32 s_dynsuper;
  __be32 s_max_transaction;
  __be32 s_max_trans_data;
  __u8 s_checksum_type;
  __u8 s_padding2[3];
  __be32 s_num_fc_blks;
  __u32 s_padding[41];
  __be32 s_checksum;
  __u8 s_users[768];
};

enum jbd_state_bits {
  BH_JBD = 16,
  BH_JWrite = 17,
  BH_Freed = 18,
  BH_Revoked = 19,
  BH_RevokeValid = 20,
  BH_JBDDirty = 21,
  BH_JournalHead = 22,
  BH_Shadow = 23,
  BH_Verified = 24,
  BH_JBDPrivateStart = 25,
};

struct jbd2_inode {
  transaction_t* i_transaction;
  transaction_t* i_next_transaction;
  struct list_head i_list;
  struct inode* i_vfs_inode;
  long unsigned int i_flags;
  loff_t i_dirty_start;
  loff_t i_dirty_end;
};

struct bgl_lock {
  spinlock_t lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct blockgroup_lock {
  struct bgl_lock locks[128];
};

struct fscrypt_dummy_policy {};

typedef int ext4_grpblk_t;

typedef long long unsigned int ext4_fsblk_t;

typedef __u32 ext4_lblk_t;

typedef unsigned int ext4_group_t;

struct ext4_allocation_request {
  struct inode* inode;
  unsigned int len;
  ext4_lblk_t logical;
  ext4_lblk_t lleft;
  ext4_lblk_t lright;
  ext4_fsblk_t goal;
  ext4_fsblk_t pleft;
  ext4_fsblk_t pright;
  unsigned int flags;
};

struct ext4_system_blocks {
  struct rb_root root;
  struct callback_head rcu;
};

struct ext4_group_desc {
  __le32 bg_block_bitmap_lo;
  __le32 bg_inode_bitmap_lo;
  __le32 bg_inode_table_lo;
  __le16 bg_free_blocks_count_lo;
  __le16 bg_free_inodes_count_lo;
  __le16 bg_used_dirs_count_lo;
  __le16 bg_flags;
  __le32 bg_exclude_bitmap_lo;
  __le16 bg_block_bitmap_csum_lo;
  __le16 bg_inode_bitmap_csum_lo;
  __le16 bg_itable_unused_lo;
  __le16 bg_checksum;
  __le32 bg_block_bitmap_hi;
  __le32 bg_inode_bitmap_hi;
  __le32 bg_inode_table_hi;
  __le16 bg_free_blocks_count_hi;
  __le16 bg_free_inodes_count_hi;
  __le16 bg_used_dirs_count_hi;
  __le16 bg_itable_unused_hi;
  __le32 bg_exclude_bitmap_hi;
  __le16 bg_block_bitmap_csum_hi;
  __le16 bg_inode_bitmap_csum_hi;
  __u32 bg_reserved;
};

struct flex_groups {
  atomic64_t free_clusters;
  atomic_t free_inodes;
  atomic_t used_dirs;
};

struct extent_status {
  struct rb_node rb_node;
  ext4_lblk_t es_lblk;
  ext4_lblk_t es_len;
  ext4_fsblk_t es_pblk;
};

struct ext4_es_tree {
  struct rb_root root;
  struct extent_status* cache_es;
};

struct ext4_es_stats {
  long unsigned int es_stats_shrunk;
  struct percpu_counter es_stats_cache_hits;
  struct percpu_counter es_stats_cache_misses;
  u64 es_stats_scan_time;
  u64 es_stats_max_scan_time;
  struct percpu_counter es_stats_all_cnt;
  struct percpu_counter es_stats_shk_cnt;
};

struct ext4_pending_tree {
  struct rb_root root;
};

struct ext4_fc_stats {
  unsigned int fc_ineligible_reason_count[10];
  long unsigned int fc_num_commits;
  long unsigned int fc_ineligible_commits;
  long unsigned int fc_numblks;
};

struct ext4_fc_alloc_region {
  ext4_lblk_t lblk;
  ext4_fsblk_t pblk;
  int ino;
  int len;
};

struct ext4_fc_replay_state {
  int fc_replay_num_tags;
  int fc_replay_expected_off;
  int fc_current_pass;
  int fc_cur_tag;
  int fc_crc;
  struct ext4_fc_alloc_region* fc_regions;
  int fc_regions_size;
  int fc_regions_used;
  int fc_regions_valid;
  int* fc_modified_inodes;
  int fc_modified_inodes_used;
  int fc_modified_inodes_size;
};

struct ext4_inode_info {
  __le32 i_data[15];
  __u32 i_dtime;
  ext4_fsblk_t i_file_acl;
  ext4_group_t i_block_group;
  ext4_lblk_t i_dir_start_lookup;
  long unsigned int i_flags;
  struct rw_semaphore xattr_sem;
  struct list_head i_orphan;
  struct list_head i_fc_list;
  ext4_lblk_t i_fc_lblk_start;
  ext4_lblk_t i_fc_lblk_len;
  atomic_t i_fc_updates;
  wait_queue_head_t i_fc_wait;
  struct mutex i_fc_lock;
  loff_t i_disksize;
  struct rw_semaphore i_data_sem;
  struct rw_semaphore i_mmap_sem;
  struct inode vfs_inode;
  struct jbd2_inode* jinode;
  spinlock_t i_raw_lock;
  struct timespec64 i_crtime;
  atomic_t i_prealloc_active;
  struct list_head i_prealloc_list;
  spinlock_t i_prealloc_lock;
  struct ext4_es_tree i_es_tree;
  rwlock_t i_es_lock;
  struct list_head i_es_list;
  unsigned int i_es_all_nr;
  unsigned int i_es_shk_nr;
  ext4_lblk_t i_es_shrink_lblk;
  ext4_group_t i_last_alloc_group;
  unsigned int i_reserved_data_blocks;
  struct ext4_pending_tree i_pending_tree;
  __u16 i_extra_isize;
  u16 i_inline_off;
  u16 i_inline_size;
  qsize_t i_reserved_quota;
  spinlock_t i_completed_io_lock;
  struct list_head i_rsv_conversion_list;
  struct work_struct i_rsv_conversion_work;
  atomic_t i_unwritten;
  spinlock_t i_block_reservation_lock;
  tid_t i_sync_tid;
  tid_t i_datasync_tid;
  struct dquot* i_dquot[3];
  __u32 i_csum_seed;
  kprojid_t i_projid;
};

struct ext4_super_block {
  __le32 s_inodes_count;
  __le32 s_blocks_count_lo;
  __le32 s_r_blocks_count_lo;
  __le32 s_free_blocks_count_lo;
  __le32 s_free_inodes_count;
  __le32 s_first_data_block;
  __le32 s_log_block_size;
  __le32 s_log_cluster_size;
  __le32 s_blocks_per_group;
  __le32 s_clusters_per_group;
  __le32 s_inodes_per_group;
  __le32 s_mtime;
  __le32 s_wtime;
  __le16 s_mnt_count;
  __le16 s_max_mnt_count;
  __le16 s_magic;
  __le16 s_state;
  __le16 s_errors;
  __le16 s_minor_rev_level;
  __le32 s_lastcheck;
  __le32 s_checkinterval;
  __le32 s_creator_os;
  __le32 s_rev_level;
  __le16 s_def_resuid;
  __le16 s_def_resgid;
  __le32 s_first_ino;
  __le16 s_inode_size;
  __le16 s_block_group_nr;
  __le32 s_feature_compat;
  __le32 s_feature_incompat;
  __le32 s_feature_ro_compat;
  __u8 s_uuid[16];
  char s_volume_name[16];
  char s_last_mounted[64];
  __le32 s_algorithm_usage_bitmap;
  __u8 s_prealloc_blocks;
  __u8 s_prealloc_dir_blocks;
  __le16 s_reserved_gdt_blocks;
  __u8 s_journal_uuid[16];
  __le32 s_journal_inum;
  __le32 s_journal_dev;
  __le32 s_last_orphan;
  __le32 s_hash_seed[4];
  __u8 s_def_hash_version;
  __u8 s_jnl_backup_type;
  __le16 s_desc_size;
  __le32 s_default_mount_opts;
  __le32 s_first_meta_bg;
  __le32 s_mkfs_time;
  __le32 s_jnl_blocks[17];
  __le32 s_blocks_count_hi;
  __le32 s_r_blocks_count_hi;
  __le32 s_free_blocks_count_hi;
  __le16 s_min_extra_isize;
  __le16 s_want_extra_isize;
  __le32 s_flags;
  __le16 s_raid_stride;
  __le16 s_mmp_update_interval;
  __le64 s_mmp_block;
  __le32 s_raid_stripe_width;
  __u8 s_log_groups_per_flex;
  __u8 s_checksum_type;
  __u8 s_encryption_level;
  __u8 s_reserved_pad;
  __le64 s_kbytes_written;
  __le32 s_snapshot_inum;
  __le32 s_snapshot_id;
  __le64 s_snapshot_r_blocks_count;
  __le32 s_snapshot_list;
  __le32 s_error_count;
  __le32 s_first_error_time;
  __le32 s_first_error_ino;
  __le64 s_first_error_block;
  __u8 s_first_error_func[32];
  __le32 s_first_error_line;
  __le32 s_last_error_time;
  __le32 s_last_error_ino;
  __le32 s_last_error_line;
  __le64 s_last_error_block;
  __u8 s_last_error_func[32];
  __u8 s_mount_opts[64];
  __le32 s_usr_quota_inum;
  __le32 s_grp_quota_inum;
  __le32 s_overhead_clusters;
  __le32 s_backup_bgs[2];
  __u8 s_encrypt_algos[4];
  __u8 s_encrypt_pw_salt[16];
  __le32 s_lpf_ino;
  __le32 s_prj_quota_inum;
  __le32 s_checksum_seed;
  __u8 s_wtime_hi;
  __u8 s_mtime_hi;
  __u8 s_mkfs_time_hi;
  __u8 s_lastcheck_hi;
  __u8 s_first_error_time_hi;
  __u8 s_last_error_time_hi;
  __u8 s_first_error_errcode;
  __u8 s_last_error_errcode;
  __le16 s_encoding;
  __le16 s_encoding_flags;
  __le32 s_reserved[95];
  __le32 s_checksum;
};

struct mb_cache___2;

struct ext4_group_info;

struct ext4_locality_group;

struct ext4_li_request;

struct ext4_sb_info {
  long unsigned int s_desc_size;
  long unsigned int s_inodes_per_block;
  long unsigned int s_blocks_per_group;
  long unsigned int s_clusters_per_group;
  long unsigned int s_inodes_per_group;
  long unsigned int s_itb_per_group;
  long unsigned int s_gdb_count;
  long unsigned int s_desc_per_block;
  ext4_group_t s_groups_count;
  ext4_group_t s_blockfile_groups;
  long unsigned int s_overhead;
  unsigned int s_cluster_ratio;
  unsigned int s_cluster_bits;
  loff_t s_bitmap_maxbytes;
  struct buffer_head* s_sbh;
  struct ext4_super_block* s_es;
  struct buffer_head** s_group_desc;
  unsigned int s_mount_opt;
  unsigned int s_mount_opt2;
  long unsigned int s_mount_flags;
  unsigned int s_def_mount_opt;
  ext4_fsblk_t s_sb_block;
  atomic64_t s_resv_clusters;
  kuid_t s_resuid;
  kgid_t s_resgid;
  short unsigned int s_mount_state;
  short unsigned int s_pad;
  int s_addr_per_block_bits;
  int s_desc_per_block_bits;
  int s_inode_size;
  int s_first_ino;
  unsigned int s_inode_readahead_blks;
  unsigned int s_inode_goal;
  u32 s_hash_seed[4];
  int s_def_hash_version;
  int s_hash_unsigned;
  struct percpu_counter s_freeclusters_counter;
  struct percpu_counter s_freeinodes_counter;
  struct percpu_counter s_dirs_counter;
  struct percpu_counter s_dirtyclusters_counter;
  struct percpu_counter s_sra_exceeded_retry_limit;
  struct blockgroup_lock* s_blockgroup_lock;
  struct proc_dir_entry* s_proc;
  struct kobject s_kobj;
  struct completion s_kobj_unregister;
  struct super_block* s_sb;
  struct buffer_head* s_mmp_bh;
  struct journal_s* s_journal;
  struct list_head s_orphan;
  struct mutex s_orphan_lock;
  long unsigned int s_ext4_flags;
  long unsigned int s_commit_interval;
  u32 s_max_batch_time;
  u32 s_min_batch_time;
  struct block_device* s_journal_bdev;
  char* s_qf_names[3];
  int s_jquota_fmt;
  unsigned int s_want_extra_isize;
  struct ext4_system_blocks* s_system_blks;
  struct ext4_group_info*** s_group_info;
  struct inode* s_buddy_cache;
  spinlock_t s_md_lock;
  short unsigned int* s_mb_offsets;
  unsigned int* s_mb_maxs;
  unsigned int s_group_info_size;
  unsigned int s_mb_free_pending;
  struct list_head s_freed_data_list;
  long unsigned int s_stripe;
  unsigned int s_mb_stream_request;
  unsigned int s_mb_max_to_scan;
  unsigned int s_mb_min_to_scan;
  unsigned int s_mb_stats;
  unsigned int s_mb_order2_reqs;
  unsigned int s_mb_group_prealloc;
  unsigned int s_mb_max_inode_prealloc;
  unsigned int s_max_dir_size_kb;
  long unsigned int s_mb_last_group;
  long unsigned int s_mb_last_start;
  unsigned int s_mb_prefetch;
  unsigned int s_mb_prefetch_limit;
  atomic_t s_bal_reqs;
  atomic_t s_bal_success;
  atomic_t s_bal_allocated;
  atomic_t s_bal_ex_scanned;
  atomic_t s_bal_goals;
  atomic_t s_bal_breaks;
  atomic_t s_bal_2orders;
  spinlock_t s_bal_lock;
  long unsigned int s_mb_buddies_generated;
  long long unsigned int s_mb_generation_time;
  atomic_t s_mb_lost_chunks;
  atomic_t s_mb_preallocated;
  atomic_t s_mb_discarded;
  atomic_t s_lock_busy;
  struct ext4_locality_group* s_locality_groups;
  long unsigned int s_sectors_written_start;
  u64 s_kbytes_written;
  unsigned int s_extent_max_zeroout_kb;
  unsigned int s_log_groups_per_flex;
  struct flex_groups** s_flex_groups;
  ext4_group_t s_flex_groups_allocated;
  struct workqueue_struct* rsv_conversion_wq;
  struct timer_list s_err_report;
  struct ext4_li_request* s_li_request;
  unsigned int s_li_wait_mult;
  struct task_struct* s_mmp_tsk;
  atomic_t s_last_trim_minblks;
  struct crypto_shash* s_chksum_driver;
  __u32 s_csum_seed;
  struct shrinker s_es_shrinker;
  struct list_head s_es_list;
  long int s_es_nr_inode;
  struct ext4_es_stats s_es_stats;
  struct mb_cache___2* s_ea_block_cache;
  struct mb_cache___2* s_ea_inode_cache;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t s_es_lock;
  struct ratelimit_state s_err_ratelimit_state;
  struct ratelimit_state s_warning_ratelimit_state;
  struct ratelimit_state s_msg_ratelimit_state;
  atomic_t s_warning_count;
  atomic_t s_msg_count;
  struct fscrypt_dummy_policy s_dummy_enc_policy;
  struct percpu_rw_semaphore s_writepages_rwsem;
  struct dax_device* s_daxdev;
  errseq_t s_bdev_wb_err;
  spinlock_t s_bdev_wb_lock;
  spinlock_t s_error_lock;
  int s_add_error_count;
  int s_first_error_code;
  __u32 s_first_error_line;
  __u32 s_first_error_ino;
  __u64 s_first_error_block;
  const char* s_first_error_func;
  time64_t s_first_error_time;
  int s_last_error_code;
  __u32 s_last_error_line;
  __u32 s_last_error_ino;
  __u64 s_last_error_block;
  const char* s_last_error_func;
  time64_t s_last_error_time;
  struct work_struct s_error_work;
  atomic_t s_fc_subtid;
  atomic_t s_fc_ineligible_updates;
  struct list_head s_fc_q[2];
  struct list_head s_fc_dentry_q[2];
  unsigned int s_fc_bytes;
  spinlock_t s_fc_lock;
  struct buffer_head* s_fc_bh;
  struct ext4_fc_stats s_fc_stats;
  u64 s_fc_avg_commit_time;
  struct ext4_fc_replay_state s_fc_replay_state;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct ext4_group_info {
  long unsigned int bb_state;
  struct rb_root bb_free_root;
  ext4_grpblk_t bb_first_free;
  ext4_grpblk_t bb_free;
  ext4_grpblk_t bb_fragments;
  ext4_grpblk_t bb_largest_free_order;
  struct list_head bb_prealloc_list;
  struct rw_semaphore alloc_sem;
  ext4_grpblk_t bb_counters[0];
};

struct ext4_locality_group {
  struct mutex lg_mutex;
  struct list_head lg_prealloc_list[10];
  spinlock_t lg_prealloc_lock;
};

enum ext4_li_mode {
  EXT4_LI_MODE_PREFETCH_BBITMAP = 0,
  EXT4_LI_MODE_ITABLE = 1,
};

struct ext4_li_request {
  struct super_block* lr_super;
  enum ext4_li_mode lr_mode;
  ext4_group_t lr_first_not_zeroed;
  ext4_group_t lr_next_group;
  struct list_head lr_request;
  long unsigned int lr_next_sched;
  long unsigned int lr_timeout;
};

struct iomap_ops___2;

struct ext4_map_blocks {
  ext4_fsblk_t m_pblk;
  ext4_lblk_t m_lblk;
  unsigned int m_len;
  unsigned int m_flags;
};

struct ext4_system_zone {
  struct rb_node node;
  ext4_fsblk_t start_blk;
  unsigned int count;
  u32 ino;
};

struct fscrypt_str {
  unsigned char* name;
  u32 len;
};

enum {
  EXT4_INODE_SECRM = 0,
  EXT4_INODE_UNRM = 1,
  EXT4_INODE_COMPR = 2,
  EXT4_INODE_SYNC = 3,
  EXT4_INODE_IMMUTABLE = 4,
  EXT4_INODE_APPEND = 5,
  EXT4_INODE_NODUMP = 6,
  EXT4_INODE_NOATIME = 7,
  EXT4_INODE_DIRTY = 8,
  EXT4_INODE_COMPRBLK = 9,
  EXT4_INODE_NOCOMPR = 10,
  EXT4_INODE_ENCRYPT = 11,
  EXT4_INODE_INDEX = 12,
  EXT4_INODE_IMAGIC = 13,
  EXT4_INODE_JOURNAL_DATA = 14,
  EXT4_INODE_NOTAIL = 15,
  EXT4_INODE_DIRSYNC = 16,
  EXT4_INODE_TOPDIR = 17,
  EXT4_INODE_HUGE_FILE = 18,
  EXT4_INODE_EXTENTS = 19,
  EXT4_INODE_VERITY = 20,
  EXT4_INODE_EA_INODE = 21,
  EXT4_INODE_DAX = 25,
  EXT4_INODE_INLINE_DATA = 28,
  EXT4_INODE_PROJINHERIT = 29,
  EXT4_INODE_CASEFOLD = 30,
  EXT4_INODE_RESERVED = 31,
};

enum {
  EXT4_FC_REASON_OK = 0,
  EXT4_FC_REASON_INELIGIBLE = 1,
  EXT4_FC_REASON_ALREADY_COMMITTED = 2,
  EXT4_FC_REASON_FC_START_FAILED = 3,
  EXT4_FC_REASON_FC_FAILED = 4,
  EXT4_FC_REASON_XATTR = 0,
  EXT4_FC_REASON_CROSS_RENAME = 1,
  EXT4_FC_REASON_JOURNAL_FLAG_CHANGE = 2,
  EXT4_FC_REASON_NOMEM = 3,
  EXT4_FC_REASON_SWAP_BOOT = 4,
  EXT4_FC_REASON_RESIZE = 5,
  EXT4_FC_REASON_RENAME_DIR = 6,
  EXT4_FC_REASON_FALLOC_RANGE = 7,
  EXT4_FC_REASON_INODE_JOURNAL_DATA = 8,
  EXT4_FC_COMMIT_FAILED = 9,
  EXT4_FC_REASON_MAX = 10,
};

struct ext4_dir_entry_2 {
  __le32 inode;
  __le16 rec_len;
  __u8 name_len;
  __u8 file_type;
  char name[255];
};

struct fname;

struct dir_private_info {
  struct rb_root root;
  struct rb_node* curr_node;
  struct fname* extra_fname;
  loff_t last_pos;
  __u32 curr_hash;
  __u32 curr_minor_hash;
  __u32 next_hash;
};

struct fname {
  __u32 hash;
  __u32 minor_hash;
  struct rb_node rb_hash;
  struct fname* next;
  __u32 inode;
  __u8 name_len;
  __u8 file_type;
  char name[0];
};

enum SHIFT_DIRECTION {
  SHIFT_LEFT = 0,
  SHIFT_RIGHT = 1,
};

struct ext4_io_end_vec {
  struct list_head list;
  loff_t offset;
  ssize_t size;
};

struct ext4_io_end {
  struct list_head list;
  handle_t* handle;
  struct inode* inode;
  struct bio* bio;
  unsigned int flag;
  atomic_t count;
  struct list_head list_vec;
};

typedef struct ext4_io_end ext4_io_end_t;

enum {
  ES_WRITTEN_B = 0,
  ES_UNWRITTEN_B = 1,
  ES_DELAYED_B = 2,
  ES_HOLE_B = 3,
  ES_REFERENCED_B = 4,
  ES_FLAGS = 5,
};

enum {
  EXT4_STATE_JDATA = 0,
  EXT4_STATE_NEW = 1,
  EXT4_STATE_XATTR = 2,
  EXT4_STATE_NO_EXPAND = 3,
  EXT4_STATE_DA_ALLOC_CLOSE = 4,
  EXT4_STATE_EXT_MIGRATE = 5,
  EXT4_STATE_NEWENTRY = 6,
  EXT4_STATE_MAY_INLINE_DATA = 7,
  EXT4_STATE_EXT_PRECACHED = 8,
  EXT4_STATE_LUSTRE_EA_INODE = 9,
  EXT4_STATE_VERITY_IN_PROGRESS = 10,
  EXT4_STATE_FC_COMMITTING = 11,
};

struct ext4_iloc {
  struct buffer_head* bh;
  long unsigned int offset;
  ext4_group_t block_group;
};

struct ext4_extent_tail {
  __le32 et_checksum;
};

struct ext4_extent {
  __le32 ee_block;
  __le16 ee_len;
  __le16 ee_start_hi;
  __le32 ee_start_lo;
};

struct ext4_extent_idx {
  __le32 ei_block;
  __le32 ei_leaf_lo;
  __le16 ei_leaf_hi;
  __u16 ei_unused;
};

struct ext4_extent_header {
  __le16 eh_magic;
  __le16 eh_entries;
  __le16 eh_max;
  __le16 eh_depth;
  __le32 eh_generation;
};

struct ext4_ext_path {
  ext4_fsblk_t p_block;
  __u16 p_depth;
  __u16 p_maxdepth;
  struct ext4_extent* p_ext;
  struct ext4_extent_idx* p_idx;
  struct ext4_extent_header* p_hdr;
  struct buffer_head* p_bh;
};

struct partial_cluster {
  ext4_fsblk_t pclu;
  ext4_lblk_t lblk;
  enum {
    initial = 0,
    tofree = 1,
    nofree = 2,
  } state;
};

struct pending_reservation {
  struct rb_node rb_node;
  ext4_lblk_t lclu;
};

struct rsvd_count {
  int ndelonly;
  bool first_do_lblk_found;
  ext4_lblk_t first_do_lblk;
  ext4_lblk_t last_do_lblk;
  struct extent_status* left_es;
  bool partial;
  ext4_lblk_t lclu;
};

enum {
  EXT4_MF_MNTDIR_SAMPLED = 0,
  EXT4_MF_FS_ABORTED = 1,
  EXT4_MF_FC_INELIGIBLE = 2,
  EXT4_MF_FC_COMMITTING = 3,
};

struct fsmap {
  __u32 fmr_device;
  __u32 fmr_flags;
  __u64 fmr_physical;
  __u64 fmr_owner;
  __u64 fmr_offset;
  __u64 fmr_length;
  __u64 fmr_reserved[3];
};

struct ext4_fsmap {
  struct list_head fmr_list;
  dev_t fmr_device;
  uint32_t fmr_flags;
  uint64_t fmr_physical;
  uint64_t fmr_owner;
  uint64_t fmr_length;
};

struct ext4_fsmap_head {
  uint32_t fmh_iflags;
  uint32_t fmh_oflags;
  unsigned int fmh_count;
  unsigned int fmh_entries;
  struct ext4_fsmap fmh_keys[2];
};

typedef int (*ext4_fsmap_format_t)(struct ext4_fsmap*, void*);

struct ext4_getfsmap_info {
  struct ext4_fsmap_head* gfi_head;
  ext4_fsmap_format_t gfi_formatter;
  void* gfi_format_arg;
  ext4_fsblk_t gfi_next_fsblk;
  u32 gfi_dev;
  ext4_group_t gfi_agno;
  struct ext4_fsmap gfi_low;
  struct ext4_fsmap gfi_high;
  struct ext4_fsmap gfi_lastfree;
  struct list_head gfi_meta_list;
  bool gfi_last;
};

struct ext4_getfsmap_dev {
  int (*gfd_fn)(
      struct super_block*,
      struct ext4_fsmap*,
      struct ext4_getfsmap_info*);
  u32 gfd_dev;
};

struct dx_hash_info {
  u32 hash;
  u32 minor_hash;
  int hash_version;
  u32* seed;
};

typedef unsigned int __kernel_mode_t;

typedef __kernel_mode_t mode_t;

struct ext4_inode {
  __le16 i_mode;
  __le16 i_uid;
  __le32 i_size_lo;
  __le32 i_atime;
  __le32 i_ctime;
  __le32 i_mtime;
  __le32 i_dtime;
  __le16 i_gid;
  __le16 i_links_count;
  __le32 i_blocks_lo;
  __le32 i_flags;
  union {
    struct {
      __le32 l_i_version;
    } linux1;
    struct {
      __u32 h_i_translator;
    } hurd1;
    struct {
      __u32 m_i_reserved1;
    } masix1;
  } osd1;
  __le32 i_block[15];
  __le32 i_generation;
  __le32 i_file_acl_lo;
  __le32 i_size_high;
  __le32 i_obso_faddr;
  union {
    struct {
      __le16 l_i_blocks_high;
      __le16 l_i_file_acl_high;
      __le16 l_i_uid_high;
      __le16 l_i_gid_high;
      __le16 l_i_checksum_lo;
      __le16 l_i_reserved;
    } linux2;
    struct {
      __le16 h_i_reserved1;
      __u16 h_i_mode_high;
      __u16 h_i_uid_high;
      __u16 h_i_gid_high;
      __u32 h_i_author;
    } hurd2;
    struct {
      __le16 h_i_reserved1;
      __le16 m_i_file_acl_high;
      __u32 m_i_reserved2[2];
    } masix2;
  } osd2;
  __le16 i_extra_isize;
  __le16 i_checksum_hi;
  __le32 i_ctime_extra;
  __le32 i_mtime_extra;
  __le32 i_atime_extra;
  __le32 i_crtime;
  __le32 i_crtime_extra;
  __le32 i_version_hi;
  __le32 i_projid;
};

struct orlov_stats {
  __u64 free_clusters;
  __u32 free_inodes;
  __u32 used_dirs;
};

typedef struct {
  __le32* p;
  __le32 key;
  struct buffer_head* bh;
} Indirect;

struct ext4_filename {
  const struct qstr* usr_fname;
  struct fscrypt_str disk_name;
  struct dx_hash_info hinfo;
};

struct ext4_xattr_ibody_header {
  __le32 h_magic;
};

struct ext4_xattr_entry {
  __u8 e_name_len;
  __u8 e_name_index;
  __le16 e_value_offs;
  __le32 e_value_inum;
  __le32 e_value_size;
  __le32 e_hash;
  char e_name[0];
};

struct ext4_xattr_info {
  const char* name;
  const void* value;
  size_t value_len;
  int name_index;
  int in_inode;
};

struct ext4_xattr_search {
  struct ext4_xattr_entry* first;
  void* base;
  void* end;
  struct ext4_xattr_entry* here;
  int not_found;
};

struct ext4_xattr_ibody_find {
  struct ext4_xattr_search s;
  struct ext4_iloc iloc;
};

typedef short unsigned int __kernel_uid16_t;

typedef short unsigned int __kernel_gid16_t;

typedef __kernel_uid16_t uid16_t;

typedef __kernel_gid16_t gid16_t;

struct ext4_io_submit {
  struct writeback_control* io_wbc;
  struct bio* io_bio;
  ext4_io_end_t* io_end;
  sector_t io_next_block;
};

typedef enum {
  EXT4_IGET_NORMAL = 0,
  EXT4_IGET_SPECIAL = 1,
  EXT4_IGET_HANDLE = 2,
} ext4_iget_flags;

struct ext4_xattr_inode_array {
  unsigned int count;
  struct inode* inodes[0];
};

struct mpage_da_data {
  struct inode* inode;
  struct writeback_control* wbc;
  long unsigned int first_page;
  long unsigned int next_page;
  long unsigned int last_page;
  struct ext4_map_blocks map;
  struct ext4_io_submit io_submit;
  unsigned int do_map : 1;
  unsigned int scanned_until_end : 1;
};

struct fscrypt_info;

struct fstrim_range {
  __u64 start;
  __u64 len;
  __u64 minlen;
};

struct ext4_new_group_input {
  __u32 group;
  __u64 block_bitmap;
  __u64 inode_bitmap;
  __u64 inode_table;
  __u32 blocks_count;
  __u16 reserved_blocks;
  __u16 unused;
};

struct compat_ext4_new_group_input {
  u32 group;
  compat_u64 block_bitmap;
  compat_u64 inode_bitmap;
  compat_u64 inode_table;
  u32 blocks_count;
  u16 reserved_blocks;
  u16 unused;
} __attribute__((packed));

struct ext4_new_group_data {
  __u32 group;
  __u64 block_bitmap;
  __u64 inode_bitmap;
  __u64 inode_table;
  __u32 blocks_count;
  __u16 reserved_blocks;
  __u16 mdata_blocks;
  __u32 free_clusters_count;
};

struct move_extent {
  __u32 reserved;
  __u32 donor_fd;
  __u64 orig_start;
  __u64 donor_start;
  __u64 len;
  __u64 moved_len;
};

struct fsmap_head {
  __u32 fmh_iflags;
  __u32 fmh_oflags;
  __u32 fmh_count;
  __u32 fmh_entries;
  __u64 fmh_reserved[6];
  struct fsmap fmh_keys[2];
  struct fsmap fmh_recs[0];
};

struct getfsmap_info {
  struct super_block* gi_sb;
  struct fsmap_head* gi_data;
  unsigned int gi_idx;
  __u32 gi_last_flags;
};

enum blk_default_limits {
  BLK_MAX_SEGMENTS = 128,
  BLK_SAFE_MAX_SECTORS = 255,
  BLK_DEF_MAX_SECTORS = 2560,
  BLK_MAX_SEGMENT_SIZE = 65536,
  BLK_SEG_BOUNDARY_MASK = 4294967295,
};

struct ext4_free_data {
  struct list_head efd_list;
  struct rb_node efd_node;
  ext4_group_t efd_group;
  ext4_grpblk_t efd_start_cluster;
  ext4_grpblk_t efd_count;
  tid_t efd_tid;
};

struct ext4_prealloc_space {
  struct list_head pa_inode_list;
  struct list_head pa_group_list;
  union {
    struct list_head pa_tmp_list;
    struct callback_head pa_rcu;
  } u;
  spinlock_t pa_lock;
  atomic_t pa_count;
  unsigned int pa_deleted;
  ext4_fsblk_t pa_pstart;
  ext4_lblk_t pa_lstart;
  ext4_grpblk_t pa_len;
  ext4_grpblk_t pa_free;
  short unsigned int pa_type;
  spinlock_t* pa_obj_lock;
  struct inode* pa_inode;
};

enum {
  MB_INODE_PA = 0,
  MB_GROUP_PA = 1,
};

struct ext4_free_extent {
  ext4_lblk_t fe_logical;
  ext4_grpblk_t fe_start;
  ext4_group_t fe_group;
  ext4_grpblk_t fe_len;
};

struct ext4_allocation_context {
  struct inode* ac_inode;
  struct super_block* ac_sb;
  struct ext4_free_extent ac_o_ex;
  struct ext4_free_extent ac_g_ex;
  struct ext4_free_extent ac_b_ex;
  struct ext4_free_extent ac_f_ex;
  __u16 ac_groups_scanned;
  __u16 ac_found;
  __u16 ac_tail;
  __u16 ac_buddy;
  __u16 ac_flags;
  __u8 ac_status;
  __u8 ac_criteria;
  __u8 ac_2order;
  __u8 ac_op;
  struct page* ac_bitmap_page;
  struct page* ac_buddy_page;
  struct ext4_prealloc_space* ac_pa;
  struct ext4_locality_group* ac_lg;
};

struct ext4_buddy {
  struct page* bd_buddy_page;
  void* bd_buddy;
  struct page* bd_bitmap_page;
  void* bd_bitmap;
  struct ext4_group_info* bd_info;
  struct super_block* bd_sb;
  __u16 bd_blkbits;
  ext4_group_t bd_group;
};

typedef int (*ext4_mballoc_query_range_fn)(
    struct super_block*,
    ext4_group_t,
    ext4_grpblk_t,
    ext4_grpblk_t,
    void*);

struct sg {
  struct ext4_group_info info;
  ext4_grpblk_t counters[18];
};

struct migrate_struct {
  ext4_lblk_t first_block;
  ext4_lblk_t last_block;
  ext4_lblk_t curr_block;
  ext4_fsblk_t first_pblock;
  ext4_fsblk_t last_pblock;
};

struct mmp_struct {
  __le32 mmp_magic;
  __le32 mmp_seq;
  __le64 mmp_time;
  char mmp_nodename[64];
  char mmp_bdevname[32];
  __le16 mmp_check_interval;
  __le16 mmp_pad1;
  __le32 mmp_pad2[226];
  __le32 mmp_checksum;
};

struct fscrypt_name {
  const struct qstr* usr_fname;
  struct fscrypt_str disk_name;
  u32 hash;
  u32 minor_hash;
  struct fscrypt_str crypto_buf;
  bool is_nokey_name;
};

struct ext4_dir_entry {
  __le32 inode;
  __le16 rec_len;
  __le16 name_len;
  char name[255];
};

struct ext4_dir_entry_tail {
  __le32 det_reserved_zero1;
  __le16 det_rec_len;
  __u8 det_reserved_zero2;
  __u8 det_reserved_ft;
  __le32 det_checksum;
};

typedef enum {
  EITHER = 0,
  INDEX = 1,
  DIRENT = 2,
  DIRENT_HTREE = 3,
} dirblock_type_t;

struct fake_dirent {
  __le32 inode;
  __le16 rec_len;
  u8 name_len;
  u8 file_type;
};

struct dx_countlimit {
  __le16 limit;
  __le16 count;
};

struct dx_entry {
  __le32 hash;
  __le32 block;
};

struct dx_root_info {
  __le32 reserved_zero;
  u8 hash_version;
  u8 info_length;
  u8 indirect_levels;
  u8 unused_flags;
};

struct dx_root {
  struct fake_dirent dot;
  char dot_name[4];
  struct fake_dirent dotdot;
  char dotdot_name[4];
  struct dx_root_info info;
  struct dx_entry entries[0];
};

struct dx_node {
  struct fake_dirent fake;
  struct dx_entry entries[0];
};

struct dx_frame {
  struct buffer_head* bh;
  struct dx_entry* entries;
  struct dx_entry* at;
};

struct dx_map_entry {
  u32 hash;
  u16 offs;
  u16 size;
};

struct dx_tail {
  u32 dt_reserved;
  __le32 dt_checksum;
};

struct ext4_renament {
  struct inode* dir;
  struct dentry* dentry;
  struct inode* inode;
  bool is_dir;
  int dir_nlink_delta;
  struct buffer_head* bh;
  struct ext4_dir_entry_2* de;
  int inlined;
  struct buffer_head* dir_bh;
  struct ext4_dir_entry_2* parent_de;
  int dir_inlined;
};

enum bio_post_read_step {
  STEP_INITIAL = 0,
  STEP_DECRYPT = 1,
  STEP_VERITY = 2,
  STEP_MAX = 3,
};

struct bio_post_read_ctx {
  struct bio* bio;
  struct work_struct work;
  unsigned int cur_step;
  unsigned int enabled_steps;
};

enum {
  BLOCK_BITMAP = 0,
  INODE_BITMAP = 1,
  INODE_TABLE = 2,
  GROUP_TABLE_COUNT = 3,
};

struct ext4_rcu_ptr {
  struct callback_head rcu;
  void* ptr;
};

struct ext4_new_flex_group_data {
  struct ext4_new_group_data* groups;
  __u16* bg_flags;
  ext4_group_t count;
};

enum {
  I_DATA_SEM_NORMAL = 0,
  I_DATA_SEM_OTHER = 1,
  I_DATA_SEM_QUOTA = 2,
};

struct ext4_lazy_init {
  long unsigned int li_state;
  struct list_head li_request_list;
  struct mutex li_list_mtx;
};

struct ext4_journal_cb_entry {
  struct list_head jce_list;
  void (*jce_func)(struct super_block*, struct ext4_journal_cb_entry*, int);
};

struct trace_event_raw_ext4_other_inode_update_time {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ino_t orig_ino;
  uid_t uid;
  gid_t gid;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_free_inode {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  uid_t uid;
  gid_t gid;
  __u64 blocks;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_request_inode {
  struct trace_entry ent;
  dev_t dev;
  ino_t dir;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_allocate_inode {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ino_t dir;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_evict_inode {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int nlink;
  char __data[0];
};

struct trace_event_raw_ext4_drop_inode {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int drop;
  char __data[0];
};

struct trace_event_raw_ext4_nfs_commit_metadata {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  char __data[0];
};

struct trace_event_raw_ext4_mark_inode_dirty {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  long unsigned int ip;
  char __data[0];
};

struct trace_event_raw_ext4_begin_ordered_truncate {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t new_size;
  char __data[0];
};

struct trace_event_raw_ext4__write_begin {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t pos;
  unsigned int len;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ext4__write_end {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t pos;
  unsigned int len;
  unsigned int copied;
  char __data[0];
};

struct trace_event_raw_ext4_writepages {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  long int nr_to_write;
  long int pages_skipped;
  loff_t range_start;
  loff_t range_end;
  long unsigned int writeback_index;
  int sync_mode;
  char for_kupdate;
  char range_cyclic;
  char __data[0];
};

struct trace_event_raw_ext4_da_write_pages {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  long unsigned int first_page;
  long int nr_to_write;
  int sync_mode;
  char __data[0];
};

struct trace_event_raw_ext4_da_write_pages_extent {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 lblk;
  __u32 len;
  __u32 flags;
  char __data[0];
};

struct trace_event_raw_ext4_writepages_result {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int ret;
  int pages_written;
  long int pages_skipped;
  long unsigned int writeback_index;
  int sync_mode;
  char __data[0];
};

struct trace_event_raw_ext4__page_op {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  long unsigned int index;
  char __data[0];
};

struct trace_event_raw_ext4_invalidatepage_op {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  long unsigned int index;
  unsigned int offset;
  unsigned int length;
  char __data[0];
};

struct trace_event_raw_ext4_discard_blocks {
  struct trace_entry ent;
  dev_t dev;
  __u64 blk;
  __u64 count;
  char __data[0];
};

struct trace_event_raw_ext4__mb_new_pa {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 pa_pstart;
  __u64 pa_lstart;
  __u32 pa_len;
  char __data[0];
};

struct trace_event_raw_ext4_mb_release_inode_pa {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 block;
  __u32 count;
  char __data[0];
};

struct trace_event_raw_ext4_mb_release_group_pa {
  struct trace_entry ent;
  dev_t dev;
  __u64 pa_pstart;
  __u32 pa_len;
  char __data[0];
};

struct trace_event_raw_ext4_discard_preallocations {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  unsigned int len;
  unsigned int needed;
  char __data[0];
};

struct trace_event_raw_ext4_mb_discard_preallocations {
  struct trace_entry ent;
  dev_t dev;
  int needed;
  char __data[0];
};

struct trace_event_raw_ext4_request_blocks {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  unsigned int len;
  __u32 logical;
  __u32 lleft;
  __u32 lright;
  __u64 goal;
  __u64 pleft;
  __u64 pright;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ext4_allocate_blocks {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 block;
  unsigned int len;
  __u32 logical;
  __u32 lleft;
  __u32 lright;
  __u64 goal;
  __u64 pleft;
  __u64 pright;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ext4_free_blocks {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 block;
  long unsigned int count;
  int flags;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_sync_file_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ino_t parent;
  int datasync;
  char __data[0];
};

struct trace_event_raw_ext4_sync_file_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4_sync_fs {
  struct trace_entry ent;
  dev_t dev;
  int wait;
  char __data[0];
};

struct trace_event_raw_ext4_alloc_da_blocks {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  unsigned int data_blocks;
  char __data[0];
};

struct trace_event_raw_ext4_mballoc_alloc {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u32 orig_logical;
  int orig_start;
  __u32 orig_group;
  int orig_len;
  __u32 goal_logical;
  int goal_start;
  __u32 goal_group;
  int goal_len;
  __u32 result_logical;
  int result_start;
  __u32 result_group;
  int result_len;
  __u16 found;
  __u16 groups;
  __u16 buddy;
  __u16 flags;
  __u16 tail;
  __u8 cr;
  char __data[0];
};

struct trace_event_raw_ext4_mballoc_prealloc {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u32 orig_logical;
  int orig_start;
  __u32 orig_group;
  int orig_len;
  __u32 result_logical;
  int result_start;
  __u32 result_group;
  int result_len;
  char __data[0];
};

struct trace_event_raw_ext4__mballoc {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int result_start;
  __u32 result_group;
  int result_len;
  char __data[0];
};

struct trace_event_raw_ext4_forget {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 block;
  int is_metadata;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_da_update_reserve_space {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 i_blocks;
  int used_blocks;
  int reserved_data_blocks;
  int quota_claim;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_da_reserve_space {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 i_blocks;
  int reserved_data_blocks;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4_da_release_space {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 i_blocks;
  int freed_blocks;
  int reserved_data_blocks;
  __u16 mode;
  char __data[0];
};

struct trace_event_raw_ext4__bitmap_load {
  struct trace_entry ent;
  dev_t dev;
  __u32 group;
  char __data[0];
};

struct trace_event_raw_ext4_read_block_bitmap_load {
  struct trace_entry ent;
  dev_t dev;
  __u32 group;
  bool prefetch;
  char __data[0];
};

struct trace_event_raw_ext4_direct_IO_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t pos;
  long unsigned int len;
  int rw;
  char __data[0];
};

struct trace_event_raw_ext4_direct_IO_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t pos;
  long unsigned int len;
  int rw;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4__fallocate_mode {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t offset;
  loff_t len;
  int mode;
  char __data[0];
};

struct trace_event_raw_ext4_fallocate_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t pos;
  unsigned int blocks;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4_unlink_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ino_t parent;
  loff_t size;
  char __data[0];
};

struct trace_event_raw_ext4_unlink_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4__truncate {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  __u64 blocks;
  char __data[0];
};

struct trace_event_raw_ext4_ext_convert_to_initialized_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t m_lblk;
  unsigned int m_len;
  ext4_lblk_t u_lblk;
  unsigned int u_len;
  ext4_fsblk_t u_pblk;
  char __data[0];
};

struct trace_event_raw_ext4_ext_convert_to_initialized_fastpath {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t m_lblk;
  unsigned int m_len;
  ext4_lblk_t u_lblk;
  unsigned int u_len;
  ext4_fsblk_t u_pblk;
  ext4_lblk_t i_lblk;
  unsigned int i_len;
  ext4_fsblk_t i_pblk;
  char __data[0];
};

struct trace_event_raw_ext4__map_blocks_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  unsigned int len;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ext4__map_blocks_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  unsigned int flags;
  ext4_fsblk_t pblk;
  ext4_lblk_t lblk;
  unsigned int len;
  unsigned int mflags;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4_ext_load_extent {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_fsblk_t pblk;
  ext4_lblk_t lblk;
  char __data[0];
};

struct trace_event_raw_ext4_load_inode {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  char __data[0];
};

struct trace_event_raw_ext4_journal_start {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int ip;
  int blocks;
  int rsv_blocks;
  int revoke_creds;
  char __data[0];
};

struct trace_event_raw_ext4_journal_start_reserved {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int ip;
  int blocks;
  char __data[0];
};

struct trace_event_raw_ext4__trim {
  struct trace_entry ent;
  int dev_major;
  int dev_minor;
  __u32 group;
  int start;
  int len;
  char __data[0];
};

struct trace_event_raw_ext4_ext_handle_unwritten_extents {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  int flags;
  ext4_lblk_t lblk;
  ext4_fsblk_t pblk;
  unsigned int len;
  unsigned int allocated;
  ext4_fsblk_t newblk;
  char __data[0];
};

struct trace_event_raw_ext4_get_implied_cluster_alloc_exit {
  struct trace_entry ent;
  dev_t dev;
  unsigned int flags;
  ext4_lblk_t lblk;
  ext4_fsblk_t pblk;
  unsigned int len;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4_ext_put_in_cache {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  unsigned int len;
  ext4_fsblk_t start;
  char __data[0];
};

struct trace_event_raw_ext4_ext_in_cache {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  int ret;
  char __data[0];
};

struct trace_event_raw_ext4_find_delalloc_range {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t from;
  ext4_lblk_t to;
  int reverse;
  int found;
  ext4_lblk_t found_blk;
  char __data[0];
};

struct trace_event_raw_ext4_get_reserved_cluster_alloc {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  unsigned int len;
  char __data[0];
};

struct trace_event_raw_ext4_ext_show_extent {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_fsblk_t pblk;
  ext4_lblk_t lblk;
  short unsigned int len;
  char __data[0];
};

struct trace_event_raw_ext4_remove_blocks {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t from;
  ext4_lblk_t to;
  ext4_fsblk_t ee_pblk;
  ext4_lblk_t ee_lblk;
  short unsigned int ee_len;
  ext4_fsblk_t pc_pclu;
  ext4_lblk_t pc_lblk;
  int pc_state;
  char __data[0];
};

struct trace_event_raw_ext4_ext_rm_leaf {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t start;
  ext4_lblk_t ee_lblk;
  ext4_fsblk_t ee_pblk;
  short int ee_len;
  ext4_fsblk_t pc_pclu;
  ext4_lblk_t pc_lblk;
  int pc_state;
  char __data[0];
};

struct trace_event_raw_ext4_ext_rm_idx {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_fsblk_t pblk;
  char __data[0];
};

struct trace_event_raw_ext4_ext_remove_space {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t start;
  ext4_lblk_t end;
  int depth;
  char __data[0];
};

struct trace_event_raw_ext4_ext_remove_space_done {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t start;
  ext4_lblk_t end;
  int depth;
  ext4_fsblk_t pc_pclu;
  ext4_lblk_t pc_lblk;
  int pc_state;
  short unsigned int eh_entries;
  char __data[0];
};

struct trace_event_raw_ext4__es_extent {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  ext4_lblk_t len;
  ext4_fsblk_t pblk;
  char status;
  char __data[0];
};

struct trace_event_raw_ext4_es_remove_extent {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t lblk;
  loff_t len;
  char __data[0];
};

struct trace_event_raw_ext4_es_find_extent_range_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  char __data[0];
};

struct trace_event_raw_ext4_es_find_extent_range_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  ext4_lblk_t len;
  ext4_fsblk_t pblk;
  char status;
  char __data[0];
};

struct trace_event_raw_ext4_es_lookup_extent_enter {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  char __data[0];
};

struct trace_event_raw_ext4_es_lookup_extent_exit {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  ext4_lblk_t len;
  ext4_fsblk_t pblk;
  char status;
  int found;
  char __data[0];
};

struct trace_event_raw_ext4__es_shrink_enter {
  struct trace_entry ent;
  dev_t dev;
  int nr_to_scan;
  int cache_cnt;
  char __data[0];
};

struct trace_event_raw_ext4_es_shrink_scan_exit {
  struct trace_entry ent;
  dev_t dev;
  int nr_shrunk;
  int cache_cnt;
  char __data[0];
};

struct trace_event_raw_ext4_collapse_range {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t offset;
  loff_t len;
  char __data[0];
};

struct trace_event_raw_ext4_insert_range {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  loff_t offset;
  loff_t len;
  char __data[0];
};

struct trace_event_raw_ext4_es_shrink {
  struct trace_entry ent;
  dev_t dev;
  int nr_shrunk;
  long long unsigned int scan_time;
  int nr_skipped;
  int retried;
  char __data[0];
};

struct trace_event_raw_ext4_es_insert_delayed_block {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  ext4_lblk_t lblk;
  ext4_lblk_t len;
  ext4_fsblk_t pblk;
  char status;
  bool allocated;
  char __data[0];
};

struct trace_event_raw_ext4_fsmap_class {
  struct trace_entry ent;
  dev_t dev;
  dev_t keydev;
  u32 agno;
  u64 bno;
  u64 len;
  u64 owner;
  char __data[0];
};

struct trace_event_raw_ext4_getfsmap_class {
  struct trace_entry ent;
  dev_t dev;
  dev_t keydev;
  u64 block;
  u64 len;
  u64 owner;
  u64 flags;
  char __data[0];
};

struct trace_event_raw_ext4_shutdown {
  struct trace_entry ent;
  dev_t dev;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ext4_error {
  struct trace_entry ent;
  dev_t dev;
  const char* function;
  unsigned int line;
  char __data[0];
};

struct trace_event_raw_ext4_prefetch_bitmaps {
  struct trace_entry ent;
  dev_t dev;
  __u32 group;
  __u32 next;
  __u32 ios;
  char __data[0];
};

struct trace_event_raw_ext4_lazy_itable_init {
  struct trace_entry ent;
  dev_t dev;
  __u32 group;
  char __data[0];
};

struct trace_event_raw_ext4_fc_replay_scan {
  struct trace_entry ent;
  dev_t dev;
  int error;
  int off;
  char __data[0];
};

struct trace_event_raw_ext4_fc_replay {
  struct trace_entry ent;
  dev_t dev;
  int tag;
  int ino;
  int priv1;
  int priv2;
  char __data[0];
};

struct trace_event_raw_ext4_fc_commit_start {
  struct trace_entry ent;
  dev_t dev;
  char __data[0];
};

struct trace_event_raw_ext4_fc_commit_stop {
  struct trace_entry ent;
  dev_t dev;
  int nblks;
  int reason;
  int num_fc;
  int num_fc_ineligible;
  int nblks_agg;
  char __data[0];
};

struct trace_event_raw_ext4_fc_stats {
  struct trace_entry ent;
  dev_t dev;
  struct ext4_sb_info* sbi;
  int count;
  char __data[0];
};

struct trace_event_raw_ext4_fc_track_create {
  struct trace_entry ent;
  dev_t dev;
  int ino;
  int error;
  char __data[0];
};

struct trace_event_raw_ext4_fc_track_link {
  struct trace_entry ent;
  dev_t dev;
  int ino;
  int error;
  char __data[0];
};

struct trace_event_raw_ext4_fc_track_unlink {
  struct trace_entry ent;
  dev_t dev;
  int ino;
  int error;
  char __data[0];
};

struct trace_event_raw_ext4_fc_track_inode {
  struct trace_entry ent;
  dev_t dev;
  int ino;
  int error;
  char __data[0];
};

struct trace_event_raw_ext4_fc_track_range {
  struct trace_entry ent;
  dev_t dev;
  int ino;
  long int start;
  long int end;
  int error;
  char __data[0];
};

struct trace_event_data_offsets_ext4_other_inode_update_time {};

struct trace_event_data_offsets_ext4_free_inode {};

struct trace_event_data_offsets_ext4_request_inode {};

struct trace_event_data_offsets_ext4_allocate_inode {};

struct trace_event_data_offsets_ext4_evict_inode {};

struct trace_event_data_offsets_ext4_drop_inode {};

struct trace_event_data_offsets_ext4_nfs_commit_metadata {};

struct trace_event_data_offsets_ext4_mark_inode_dirty {};

struct trace_event_data_offsets_ext4_begin_ordered_truncate {};

struct trace_event_data_offsets_ext4__write_begin {};

struct trace_event_data_offsets_ext4__write_end {};

struct trace_event_data_offsets_ext4_writepages {};

struct trace_event_data_offsets_ext4_da_write_pages {};

struct trace_event_data_offsets_ext4_da_write_pages_extent {};

struct trace_event_data_offsets_ext4_writepages_result {};

struct trace_event_data_offsets_ext4__page_op {};

struct trace_event_data_offsets_ext4_invalidatepage_op {};

struct trace_event_data_offsets_ext4_discard_blocks {};

struct trace_event_data_offsets_ext4__mb_new_pa {};

struct trace_event_data_offsets_ext4_mb_release_inode_pa {};

struct trace_event_data_offsets_ext4_mb_release_group_pa {};

struct trace_event_data_offsets_ext4_discard_preallocations {};

struct trace_event_data_offsets_ext4_mb_discard_preallocations {};

struct trace_event_data_offsets_ext4_request_blocks {};

struct trace_event_data_offsets_ext4_allocate_blocks {};

struct trace_event_data_offsets_ext4_free_blocks {};

struct trace_event_data_offsets_ext4_sync_file_enter {};

struct trace_event_data_offsets_ext4_sync_file_exit {};

struct trace_event_data_offsets_ext4_sync_fs {};

struct trace_event_data_offsets_ext4_alloc_da_blocks {};

struct trace_event_data_offsets_ext4_mballoc_alloc {};

struct trace_event_data_offsets_ext4_mballoc_prealloc {};

struct trace_event_data_offsets_ext4__mballoc {};

struct trace_event_data_offsets_ext4_forget {};

struct trace_event_data_offsets_ext4_da_update_reserve_space {};

struct trace_event_data_offsets_ext4_da_reserve_space {};

struct trace_event_data_offsets_ext4_da_release_space {};

struct trace_event_data_offsets_ext4__bitmap_load {};

struct trace_event_data_offsets_ext4_read_block_bitmap_load {};

struct trace_event_data_offsets_ext4_direct_IO_enter {};

struct trace_event_data_offsets_ext4_direct_IO_exit {};

struct trace_event_data_offsets_ext4__fallocate_mode {};

struct trace_event_data_offsets_ext4_fallocate_exit {};

struct trace_event_data_offsets_ext4_unlink_enter {};

struct trace_event_data_offsets_ext4_unlink_exit {};

struct trace_event_data_offsets_ext4__truncate {};

struct trace_event_data_offsets_ext4_ext_convert_to_initialized_enter {};

struct trace_event_data_offsets_ext4_ext_convert_to_initialized_fastpath {};

struct trace_event_data_offsets_ext4__map_blocks_enter {};

struct trace_event_data_offsets_ext4__map_blocks_exit {};

struct trace_event_data_offsets_ext4_ext_load_extent {};

struct trace_event_data_offsets_ext4_load_inode {};

struct trace_event_data_offsets_ext4_journal_start {};

struct trace_event_data_offsets_ext4_journal_start_reserved {};

struct trace_event_data_offsets_ext4__trim {};

struct trace_event_data_offsets_ext4_ext_handle_unwritten_extents {};

struct trace_event_data_offsets_ext4_get_implied_cluster_alloc_exit {};

struct trace_event_data_offsets_ext4_ext_put_in_cache {};

struct trace_event_data_offsets_ext4_ext_in_cache {};

struct trace_event_data_offsets_ext4_find_delalloc_range {};

struct trace_event_data_offsets_ext4_get_reserved_cluster_alloc {};

struct trace_event_data_offsets_ext4_ext_show_extent {};

struct trace_event_data_offsets_ext4_remove_blocks {};

struct trace_event_data_offsets_ext4_ext_rm_leaf {};

struct trace_event_data_offsets_ext4_ext_rm_idx {};

struct trace_event_data_offsets_ext4_ext_remove_space {};

struct trace_event_data_offsets_ext4_ext_remove_space_done {};

struct trace_event_data_offsets_ext4__es_extent {};

struct trace_event_data_offsets_ext4_es_remove_extent {};

struct trace_event_data_offsets_ext4_es_find_extent_range_enter {};

struct trace_event_data_offsets_ext4_es_find_extent_range_exit {};

struct trace_event_data_offsets_ext4_es_lookup_extent_enter {};

struct trace_event_data_offsets_ext4_es_lookup_extent_exit {};

struct trace_event_data_offsets_ext4__es_shrink_enter {};

struct trace_event_data_offsets_ext4_es_shrink_scan_exit {};

struct trace_event_data_offsets_ext4_collapse_range {};

struct trace_event_data_offsets_ext4_insert_range {};

struct trace_event_data_offsets_ext4_es_shrink {};

struct trace_event_data_offsets_ext4_es_insert_delayed_block {};

struct trace_event_data_offsets_ext4_fsmap_class {};

struct trace_event_data_offsets_ext4_getfsmap_class {};

struct trace_event_data_offsets_ext4_shutdown {};

struct trace_event_data_offsets_ext4_error {};

struct trace_event_data_offsets_ext4_prefetch_bitmaps {};

struct trace_event_data_offsets_ext4_lazy_itable_init {};

struct trace_event_data_offsets_ext4_fc_replay_scan {};

struct trace_event_data_offsets_ext4_fc_replay {};

struct trace_event_data_offsets_ext4_fc_commit_start {};

struct trace_event_data_offsets_ext4_fc_commit_stop {};

struct trace_event_data_offsets_ext4_fc_stats {};

struct trace_event_data_offsets_ext4_fc_track_create {};

struct trace_event_data_offsets_ext4_fc_track_link {};

struct trace_event_data_offsets_ext4_fc_track_unlink {};

struct trace_event_data_offsets_ext4_fc_track_inode {};

struct trace_event_data_offsets_ext4_fc_track_range {};

typedef void (
    *btf_trace_ext4_other_inode_update_time)(void*, struct inode*, ino_t);

typedef void (*btf_trace_ext4_free_inode)(void*, struct inode*);

typedef void (*btf_trace_ext4_request_inode)(void*, struct inode*, int);

typedef void (
    *btf_trace_ext4_allocate_inode)(void*, struct inode*, struct inode*, int);

typedef void (*btf_trace_ext4_evict_inode)(void*, struct inode*);

typedef void (*btf_trace_ext4_drop_inode)(void*, struct inode*, int);

typedef void (*btf_trace_ext4_nfs_commit_metadata)(void*, struct inode*);

typedef void (
    *btf_trace_ext4_mark_inode_dirty)(void*, struct inode*, long unsigned int);

typedef void (
    *btf_trace_ext4_begin_ordered_truncate)(void*, struct inode*, loff_t);

typedef void (*btf_trace_ext4_write_begin)(
    void*,
    struct inode*,
    loff_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_da_write_begin)(
    void*,
    struct inode*,
    loff_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_write_end)(
    void*,
    struct inode*,
    loff_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_journalled_write_end)(
    void*,
    struct inode*,
    loff_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_da_write_end)(
    void*,
    struct inode*,
    loff_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_writepages)(
    void*,
    struct inode*,
    struct writeback_control*);

typedef void (*btf_trace_ext4_da_write_pages)(
    void*,
    struct inode*,
    long unsigned int,
    struct writeback_control*);

typedef void (*btf_trace_ext4_da_write_pages_extent)(
    void*,
    struct inode*,
    struct ext4_map_blocks*);

typedef void (*btf_trace_ext4_writepages_result)(
    void*,
    struct inode*,
    struct writeback_control*,
    int,
    int);

typedef void (*btf_trace_ext4_writepage)(void*, struct page*);

typedef void (*btf_trace_ext4_readpage)(void*, struct page*);

typedef void (*btf_trace_ext4_releasepage)(void*, struct page*);

typedef void (*btf_trace_ext4_invalidatepage)(
    void*,
    struct page*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_journalled_invalidatepage)(
    void*,
    struct page*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_discard_blocks)(
    void*,
    struct super_block*,
    long long unsigned int,
    long long unsigned int);

typedef void (*btf_trace_ext4_mb_new_inode_pa)(
    void*,
    struct ext4_allocation_context*,
    struct ext4_prealloc_space*);

typedef void (*btf_trace_ext4_mb_new_group_pa)(
    void*,
    struct ext4_allocation_context*,
    struct ext4_prealloc_space*);

typedef void (*btf_trace_ext4_mb_release_inode_pa)(
    void*,
    struct ext4_prealloc_space*,
    long long unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_mb_release_group_pa)(
    void*,
    struct super_block*,
    struct ext4_prealloc_space*);

typedef void (*btf_trace_ext4_discard_preallocations)(
    void*,
    struct inode*,
    unsigned int,
    unsigned int);

typedef void (
    *btf_trace_ext4_mb_discard_preallocations)(void*, struct super_block*, int);

typedef void (
    *btf_trace_ext4_request_blocks)(void*, struct ext4_allocation_request*);

typedef void (*btf_trace_ext4_allocate_blocks)(
    void*,
    struct ext4_allocation_request*,
    long long unsigned int);

typedef void (*btf_trace_ext4_free_blocks)(
    void*,
    struct inode*,
    __u64,
    long unsigned int,
    int);

typedef void (*btf_trace_ext4_sync_file_enter)(void*, struct file*, int);

typedef void (*btf_trace_ext4_sync_file_exit)(void*, struct inode*, int);

typedef void (*btf_trace_ext4_sync_fs)(void*, struct super_block*, int);

typedef void (*btf_trace_ext4_alloc_da_blocks)(void*, struct inode*);

typedef void (
    *btf_trace_ext4_mballoc_alloc)(void*, struct ext4_allocation_context*);

typedef void (
    *btf_trace_ext4_mballoc_prealloc)(void*, struct ext4_allocation_context*);

typedef void (*btf_trace_ext4_mballoc_discard)(
    void*,
    struct super_block*,
    struct inode*,
    ext4_group_t,
    ext4_grpblk_t,
    ext4_grpblk_t);

typedef void (*btf_trace_ext4_mballoc_free)(
    void*,
    struct super_block*,
    struct inode*,
    ext4_group_t,
    ext4_grpblk_t,
    ext4_grpblk_t);

typedef void (*btf_trace_ext4_forget)(void*, struct inode*, int, __u64);

typedef void (
    *btf_trace_ext4_da_update_reserve_space)(void*, struct inode*, int, int);

typedef void (*btf_trace_ext4_da_reserve_space)(void*, struct inode*);

typedef void (*btf_trace_ext4_da_release_space)(void*, struct inode*, int);

typedef void (*btf_trace_ext4_mb_bitmap_load)(
    void*,
    struct super_block*,
    long unsigned int);

typedef void (*btf_trace_ext4_mb_buddy_bitmap_load)(
    void*,
    struct super_block*,
    long unsigned int);

typedef void (*btf_trace_ext4_load_inode_bitmap)(
    void*,
    struct super_block*,
    long unsigned int);

typedef void (*btf_trace_ext4_read_block_bitmap_load)(
    void*,
    struct super_block*,
    long unsigned int,
    bool);

typedef void (*btf_trace_ext4_direct_IO_enter)(
    void*,
    struct inode*,
    loff_t,
    long unsigned int,
    int);

typedef void (*btf_trace_ext4_direct_IO_exit)(
    void*,
    struct inode*,
    loff_t,
    long unsigned int,
    int,
    int);

typedef void (
    *btf_trace_ext4_fallocate_enter)(void*, struct inode*, loff_t, loff_t, int);

typedef void (
    *btf_trace_ext4_punch_hole)(void*, struct inode*, loff_t, loff_t, int);

typedef void (
    *btf_trace_ext4_zero_range)(void*, struct inode*, loff_t, loff_t, int);

typedef void (*btf_trace_ext4_fallocate_exit)(
    void*,
    struct inode*,
    loff_t,
    unsigned int,
    int);

typedef void (
    *btf_trace_ext4_unlink_enter)(void*, struct inode*, struct dentry*);

typedef void (*btf_trace_ext4_unlink_exit)(void*, struct dentry*, int);

typedef void (*btf_trace_ext4_truncate_enter)(void*, struct inode*);

typedef void (*btf_trace_ext4_truncate_exit)(void*, struct inode*);

typedef void (*btf_trace_ext4_ext_convert_to_initialized_enter)(
    void*,
    struct inode*,
    struct ext4_map_blocks*,
    struct ext4_extent*);

typedef void (*btf_trace_ext4_ext_convert_to_initialized_fastpath)(
    void*,
    struct inode*,
    struct ext4_map_blocks*,
    struct ext4_extent*,
    struct ext4_extent*);

typedef void (*btf_trace_ext4_ext_map_blocks_enter)(
    void*,
    struct inode*,
    ext4_lblk_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_ind_map_blocks_enter)(
    void*,
    struct inode*,
    ext4_lblk_t,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ext4_ext_map_blocks_exit)(
    void*,
    struct inode*,
    unsigned int,
    struct ext4_map_blocks*,
    int);

typedef void (*btf_trace_ext4_ind_map_blocks_exit)(
    void*,
    struct inode*,
    unsigned int,
    struct ext4_map_blocks*,
    int);

typedef void (*btf_trace_ext4_ext_load_extent)(
    void*,
    struct inode*,
    ext4_lblk_t,
    ext4_fsblk_t);

typedef void (
    *btf_trace_ext4_load_inode)(void*, struct super_block*, long unsigned int);

typedef void (*btf_trace_ext4_journal_start)(
    void*,
    struct super_block*,
    int,
    int,
    int,
    long unsigned int);

typedef void (*btf_trace_ext4_journal_start_reserved)(
    void*,
    struct super_block*,
    int,
    long unsigned int);

typedef void (*btf_trace_ext4_trim_extent)(
    void*,
    struct super_block*,
    ext4_group_t,
    ext4_grpblk_t,
    ext4_grpblk_t);

typedef void (*btf_trace_ext4_trim_all_free)(
    void*,
    struct super_block*,
    ext4_group_t,
    ext4_grpblk_t,
    ext4_grpblk_t);

typedef void (*btf_trace_ext4_ext_handle_unwritten_extents)(
    void*,
    struct inode*,
    struct ext4_map_blocks*,
    int,
    unsigned int,
    ext4_fsblk_t);

typedef void (*btf_trace_ext4_get_implied_cluster_alloc_exit)(
    void*,
    struct super_block*,
    struct ext4_map_blocks*,
    int);

typedef void (*btf_trace_ext4_ext_put_in_cache)(
    void*,
    struct inode*,
    ext4_lblk_t,
    unsigned int,
    ext4_fsblk_t);

typedef void (
    *btf_trace_ext4_ext_in_cache)(void*, struct inode*, ext4_lblk_t, int);

typedef void (*btf_trace_ext4_find_delalloc_range)(
    void*,
    struct inode*,
    ext4_lblk_t,
    ext4_lblk_t,
    int,
    int,
    ext4_lblk_t);

typedef void (*btf_trace_ext4_get_reserved_cluster_alloc)(
    void*,
    struct inode*,
    ext4_lblk_t,
    unsigned int);

typedef void (*btf_trace_ext4_ext_show_extent)(
    void*,
    struct inode*,
    ext4_lblk_t,
    ext4_fsblk_t,
    short unsigned int);

typedef void (*btf_trace_ext4_remove_blocks)(
    void*,
    struct inode*,
    struct ext4_extent*,
    ext4_lblk_t,
    ext4_fsblk_t,
    struct partial_cluster*);

typedef void (*btf_trace_ext4_ext_rm_leaf)(
    void*,
    struct inode*,
    ext4_lblk_t,
    struct ext4_extent*,
    struct partial_cluster*);

typedef void (*btf_trace_ext4_ext_rm_idx)(void*, struct inode*, ext4_fsblk_t);

typedef void (*btf_trace_ext4_ext_remove_space)(
    void*,
    struct inode*,
    ext4_lblk_t,
    ext4_lblk_t,
    int);

typedef void (*btf_trace_ext4_ext_remove_space_done)(
    void*,
    struct inode*,
    ext4_lblk_t,
    ext4_lblk_t,
    int,
    struct partial_cluster*,
    __le16);

typedef void (*btf_trace_ext4_es_insert_extent)(
    void*,
    struct inode*,
    struct extent_status*);

typedef void (*btf_trace_ext4_es_cache_extent)(
    void*,
    struct inode*,
    struct extent_status*);

typedef void (*btf_trace_ext4_es_remove_extent)(
    void*,
    struct inode*,
    ext4_lblk_t,
    ext4_lblk_t);

typedef void (*btf_trace_ext4_es_find_extent_range_enter)(
    void*,
    struct inode*,
    ext4_lblk_t);

typedef void (*btf_trace_ext4_es_find_extent_range_exit)(
    void*,
    struct inode*,
    struct extent_status*);

typedef void (
    *btf_trace_ext4_es_lookup_extent_enter)(void*, struct inode*, ext4_lblk_t);

typedef void (*btf_trace_ext4_es_lookup_extent_exit)(
    void*,
    struct inode*,
    struct extent_status*,
    int);

typedef void (
    *btf_trace_ext4_es_shrink_count)(void*, struct super_block*, int, int);

typedef void (
    *btf_trace_ext4_es_shrink_scan_enter)(void*, struct super_block*, int, int);

typedef void (
    *btf_trace_ext4_es_shrink_scan_exit)(void*, struct super_block*, int, int);

typedef void (
    *btf_trace_ext4_collapse_range)(void*, struct inode*, loff_t, loff_t);

typedef void (
    *btf_trace_ext4_insert_range)(void*, struct inode*, loff_t, loff_t);

typedef void (
    *btf_trace_ext4_es_shrink)(void*, struct super_block*, int, u64, int, int);

typedef void (*btf_trace_ext4_es_insert_delayed_block)(
    void*,
    struct inode*,
    struct extent_status*,
    bool);

typedef void (*btf_trace_ext4_fsmap_low_key)(
    void*,
    struct super_block*,
    u32,
    u32,
    u64,
    u64,
    u64);

typedef void (*btf_trace_ext4_fsmap_high_key)(
    void*,
    struct super_block*,
    u32,
    u32,
    u64,
    u64,
    u64);

typedef void (*btf_trace_ext4_fsmap_mapping)(
    void*,
    struct super_block*,
    u32,
    u32,
    u64,
    u64,
    u64);

typedef void (*btf_trace_ext4_getfsmap_low_key)(
    void*,
    struct super_block*,
    struct ext4_fsmap*);

typedef void (*btf_trace_ext4_getfsmap_high_key)(
    void*,
    struct super_block*,
    struct ext4_fsmap*);

typedef void (*btf_trace_ext4_getfsmap_mapping)(
    void*,
    struct super_block*,
    struct ext4_fsmap*);

typedef void (
    *btf_trace_ext4_shutdown)(void*, struct super_block*, long unsigned int);

typedef void (*btf_trace_ext4_error)(
    void*,
    struct super_block*,
    const char*,
    unsigned int);

typedef void (*btf_trace_ext4_prefetch_bitmaps)(
    void*,
    struct super_block*,
    ext4_group_t,
    ext4_group_t,
    unsigned int);

typedef void (
    *btf_trace_ext4_lazy_itable_init)(void*, struct super_block*, ext4_group_t);

typedef void (
    *btf_trace_ext4_fc_replay_scan)(void*, struct super_block*, int, int);

typedef void (
    *btf_trace_ext4_fc_replay)(void*, struct super_block*, int, int, int, int);

typedef void (*btf_trace_ext4_fc_commit_start)(void*, struct super_block*);

typedef void (
    *btf_trace_ext4_fc_commit_stop)(void*, struct super_block*, int, int);

typedef void (*btf_trace_ext4_fc_stats)(void*, struct super_block*);

typedef void (
    *btf_trace_ext4_fc_track_create)(void*, struct inode*, struct dentry*, int);

typedef void (
    *btf_trace_ext4_fc_track_link)(void*, struct inode*, struct dentry*, int);

typedef void (
    *btf_trace_ext4_fc_track_unlink)(void*, struct inode*, struct dentry*, int);

typedef void (*btf_trace_ext4_fc_track_inode)(void*, struct inode*, int);

typedef void (*btf_trace_ext4_fc_track_range)(
    void*,
    struct inode*,
    long int,
    long int,
    int);

struct ext4_err_translation {
  int code;
  int errno;
};

enum {
  Opt_bsd_df = 0,
  Opt_minix_df = 1,
  Opt_grpid = 2,
  Opt_nogrpid = 3,
  Opt_resgid = 4,
  Opt_resuid = 5,
  Opt_sb = 6,
  Opt_err_cont = 7,
  Opt_err_panic = 8,
  Opt_err_ro = 9,
  Opt_nouid32 = 10,
  Opt_debug = 11,
  Opt_removed = 12,
  Opt_user_xattr = 13,
  Opt_nouser_xattr = 14,
  Opt_acl = 15,
  Opt_noacl = 16,
  Opt_auto_da_alloc = 17,
  Opt_noauto_da_alloc = 18,
  Opt_noload = 19,
  Opt_commit = 20,
  Opt_min_batch_time = 21,
  Opt_max_batch_time = 22,
  Opt_journal_dev = 23,
  Opt_journal_path = 24,
  Opt_journal_checksum = 25,
  Opt_journal_async_commit = 26,
  Opt_abort = 27,
  Opt_data_journal = 28,
  Opt_data_ordered = 29,
  Opt_data_writeback = 30,
  Opt_data_err_abort = 31,
  Opt_data_err_ignore = 32,
  Opt_test_dummy_encryption = 33,
  Opt_inlinecrypt = 34,
  Opt_usrjquota = 35,
  Opt_grpjquota = 36,
  Opt_offusrjquota = 37,
  Opt_offgrpjquota = 38,
  Opt_jqfmt_vfsold = 39,
  Opt_jqfmt_vfsv0 = 40,
  Opt_jqfmt_vfsv1 = 41,
  Opt_quota = 42,
  Opt_noquota = 43,
  Opt_barrier = 44,
  Opt_nobarrier = 45,
  Opt_err___2 = 46,
  Opt_usrquota = 47,
  Opt_grpquota = 48,
  Opt_prjquota = 49,
  Opt_i_version = 50,
  Opt_dax = 51,
  Opt_dax_always = 52,
  Opt_dax_inode = 53,
  Opt_dax_never = 54,
  Opt_stripe = 55,
  Opt_delalloc = 56,
  Opt_nodelalloc = 57,
  Opt_warn_on_error = 58,
  Opt_nowarn_on_error = 59,
  Opt_mblk_io_submit = 60,
  Opt_lazytime = 61,
  Opt_nolazytime = 62,
  Opt_debug_want_extra_isize = 63,
  Opt_nomblk_io_submit = 64,
  Opt_block_validity = 65,
  Opt_noblock_validity = 66,
  Opt_inode_readahead_blks = 67,
  Opt_journal_ioprio = 68,
  Opt_dioread_nolock = 69,
  Opt_dioread_lock = 70,
  Opt_discard = 71,
  Opt_nodiscard = 72,
  Opt_init_itable = 73,
  Opt_noinit_itable = 74,
  Opt_max_dir_size_kb = 75,
  Opt_nojournal_checksum = 76,
  Opt_nombcache = 77,
  Opt_prefetch_block_bitmaps = 78,
};

struct mount_opts {
  int token;
  int mount_opt;
  int flags;
};

struct ext4_mount_options {
  long unsigned int s_mount_opt;
  long unsigned int s_mount_opt2;
  kuid_t s_resuid;
  kgid_t s_resgid;
  long unsigned int s_commit_interval;
  u32 s_min_batch_time;
  u32 s_max_batch_time;
  int s_jquota_fmt;
  char* s_qf_names[3];
};

enum {
  attr_noop = 0,
  attr_delayed_allocation_blocks = 1,
  attr_session_write_kbytes = 2,
  attr_lifetime_write_kbytes = 3,
  attr_reserved_clusters = 4,
  attr_sra_exceeded_retry_limit = 5,
  attr_inode_readahead = 6,
  attr_trigger_test_error = 7,
  attr_first_error_time = 8,
  attr_last_error_time = 9,
  attr_feature = 10,
  attr_pointer_ui = 11,
  attr_pointer_ul = 12,
  attr_pointer_u64 = 13,
  attr_pointer_u8 = 14,
  attr_pointer_string = 15,
  attr_pointer_atomic = 16,
  attr_journal_task = 17,
};

enum {
  ptr_explicit = 0,
  ptr_ext4_sb_info_offset = 1,
  ptr_ext4_super_block_offset = 2,
};

struct ext4_attr {
  struct attribute attr;
  short int attr_id;
  short int attr_ptr;
  short unsigned int attr_size;
  union {
    int offset;
    void* explicit_ptr;
  } u;
};

struct ext4_xattr_header {
  __le32 h_magic;
  __le32 h_refcount;
  __le32 h_blocks;
  __le32 h_hash;
  __le32 h_checksum;
  __u32 h_reserved[3];
};

struct ext4_xattr_block_find {
  struct ext4_xattr_search s;
  struct buffer_head* bh;
};

struct ext4_fc_tl {
  __le16 fc_tag;
  __le16 fc_len;
};

struct ext4_fc_head {
  __le32 fc_features;
  __le32 fc_tid;
};

struct ext4_fc_add_range {
  __le32 fc_ino;
  __u8 fc_ex[12];
};

struct ext4_fc_del_range {
  __le32 fc_ino;
  __le32 fc_lblk;
  __le32 fc_len;
};

struct ext4_fc_dentry_info {
  __le32 fc_parent_ino;
  __le32 fc_ino;
  __u8 fc_dname[0];
};

struct ext4_fc_inode {
  __le32 fc_ino;
  __u8 fc_raw_inode[0];
};

struct ext4_fc_tail {
  __le32 fc_tid;
  __le32 fc_crc;
};

struct ext4_fc_dentry_update {
  int fcd_op;
  int fcd_parent;
  int fcd_ino;
  struct qstr fcd_name;
  unsigned char fcd_iname[32];
  struct list_head fcd_list;
};

struct __track_dentry_update_args {
  struct dentry* dentry;
  int op;
};

struct __track_range_args {
  ext4_lblk_t start;
  ext4_lblk_t end;
};

struct dentry_info_args {
  int parent_ino;
  int dname_len;
  int ino;
  int inode_len;
  char* dname;
};

typedef struct {
  __le16 e_tag;
  __le16 e_perm;
  __le32 e_id;
} ext4_acl_entry;

typedef struct {
  __le32 a_version;
} ext4_acl_header;

struct commit_header {
  __be32 h_magic;
  __be32 h_blocktype;
  __be32 h_sequence;
  unsigned char h_chksum_type;
  unsigned char h_chksum_size;
  unsigned char h_padding[2];
  __be32 h_chksum[8];
  __be64 h_commit_sec;
  __be32 h_commit_nsec;
};

struct journal_block_tag3_s {
  __be32 t_blocknr;
  __be32 t_flags;
  __be32 t_blocknr_high;
  __be32 t_checksum;
};

typedef struct journal_block_tag3_s journal_block_tag3_t;

struct journal_block_tag_s {
  __be32 t_blocknr;
  __be16 t_checksum;
  __be16 t_flags;
  __be32 t_blocknr_high;
};

typedef struct journal_block_tag_s journal_block_tag_t;

struct jbd2_journal_block_tail {
  __be32 t_checksum;
};

struct jbd2_journal_revoke_header_s {
  journal_header_t r_header;
  __be32 r_count;
};

typedef struct jbd2_journal_revoke_header_s jbd2_journal_revoke_header_t;

struct recovery_info {
  tid_t start_transaction;
  tid_t end_transaction;
  int nr_replays;
  int nr_revokes;
  int nr_revoke_hits;
};

struct jbd2_revoke_table_s {
  int hash_size;
  int hash_shift;
  struct list_head* hash_table;
};

struct jbd2_revoke_record_s {
  struct list_head hash;
  tid_t sequence;
  long long unsigned int blocknr;
};

struct trace_event_raw_jbd2_checkpoint {
  struct trace_entry ent;
  dev_t dev;
  int result;
  char __data[0];
};

struct trace_event_raw_jbd2_commit {
  struct trace_entry ent;
  dev_t dev;
  char sync_commit;
  int transaction;
  char __data[0];
};

struct trace_event_raw_jbd2_end_commit {
  struct trace_entry ent;
  dev_t dev;
  char sync_commit;
  int transaction;
  int head;
  char __data[0];
};

struct trace_event_raw_jbd2_submit_inode_data {
  struct trace_entry ent;
  dev_t dev;
  ino_t ino;
  char __data[0];
};

struct trace_event_raw_jbd2_handle_start_class {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int tid;
  unsigned int type;
  unsigned int line_no;
  int requested_blocks;
  char __data[0];
};

struct trace_event_raw_jbd2_handle_extend {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int tid;
  unsigned int type;
  unsigned int line_no;
  int buffer_credits;
  int requested_blocks;
  char __data[0];
};

struct trace_event_raw_jbd2_handle_stats {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int tid;
  unsigned int type;
  unsigned int line_no;
  int interval;
  int sync;
  int requested_blocks;
  int dirtied_blocks;
  char __data[0];
};

struct trace_event_raw_jbd2_run_stats {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int tid;
  long unsigned int wait;
  long unsigned int request_delay;
  long unsigned int running;
  long unsigned int locked;
  long unsigned int flushing;
  long unsigned int logging;
  __u32 handle_count;
  __u32 blocks;
  __u32 blocks_logged;
  char __data[0];
};

struct trace_event_raw_jbd2_checkpoint_stats {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int tid;
  long unsigned int chp_time;
  __u32 forced_to_close;
  __u32 written;
  __u32 dropped;
  char __data[0];
};

struct trace_event_raw_jbd2_update_log_tail {
  struct trace_entry ent;
  dev_t dev;
  tid_t tail_sequence;
  tid_t first_tid;
  long unsigned int block_nr;
  long unsigned int freed;
  char __data[0];
};

struct trace_event_raw_jbd2_write_superblock {
  struct trace_entry ent;
  dev_t dev;
  int write_op;
  char __data[0];
};

struct trace_event_raw_jbd2_lock_buffer_stall {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int stall_ms;
  char __data[0];
};

struct trace_event_data_offsets_jbd2_checkpoint {};

struct trace_event_data_offsets_jbd2_commit {};

struct trace_event_data_offsets_jbd2_end_commit {};

struct trace_event_data_offsets_jbd2_submit_inode_data {};

struct trace_event_data_offsets_jbd2_handle_start_class {};

struct trace_event_data_offsets_jbd2_handle_extend {};

struct trace_event_data_offsets_jbd2_handle_stats {};

struct trace_event_data_offsets_jbd2_run_stats {};

struct trace_event_data_offsets_jbd2_checkpoint_stats {};

struct trace_event_data_offsets_jbd2_update_log_tail {};

struct trace_event_data_offsets_jbd2_write_superblock {};

struct trace_event_data_offsets_jbd2_lock_buffer_stall {};

typedef void (*btf_trace_jbd2_checkpoint)(void*, journal_t*, int);

typedef void (*btf_trace_jbd2_start_commit)(void*, journal_t*, transaction_t*);

typedef void (
    *btf_trace_jbd2_commit_locking)(void*, journal_t*, transaction_t*);

typedef void (
    *btf_trace_jbd2_commit_flushing)(void*, journal_t*, transaction_t*);

typedef void (
    *btf_trace_jbd2_commit_logging)(void*, journal_t*, transaction_t*);

typedef void (
    *btf_trace_jbd2_drop_transaction)(void*, journal_t*, transaction_t*);

typedef void (*btf_trace_jbd2_end_commit)(void*, journal_t*, transaction_t*);

typedef void (*btf_trace_jbd2_submit_inode_data)(void*, struct inode*);

typedef void (*btf_trace_jbd2_handle_start)(
    void*,
    dev_t,
    long unsigned int,
    unsigned int,
    unsigned int,
    int);

typedef void (*btf_trace_jbd2_handle_restart)(
    void*,
    dev_t,
    long unsigned int,
    unsigned int,
    unsigned int,
    int);

typedef void (*btf_trace_jbd2_handle_extend)(
    void*,
    dev_t,
    long unsigned int,
    unsigned int,
    unsigned int,
    int,
    int);

typedef void (*btf_trace_jbd2_handle_stats)(
    void*,
    dev_t,
    long unsigned int,
    unsigned int,
    unsigned int,
    int,
    int,
    int,
    int);

typedef void (*btf_trace_jbd2_run_stats)(
    void*,
    dev_t,
    long unsigned int,
    struct transaction_run_stats_s*);

typedef void (*btf_trace_jbd2_checkpoint_stats)(
    void*,
    dev_t,
    long unsigned int,
    struct transaction_chp_stats_s*);

typedef void (*btf_trace_jbd2_update_log_tail)(
    void*,
    journal_t*,
    tid_t,
    long unsigned int,
    long unsigned int);

typedef void (*btf_trace_jbd2_write_superblock)(void*, journal_t*, int);

typedef void (
    *btf_trace_jbd2_lock_buffer_stall)(void*, dev_t, long unsigned int);

struct jbd2_stats_proc_session {
  journal_t* journal;
  struct transaction_stats_s* stats;
  int start;
  int max;
};

struct ramfs_mount_opts {
  umode_t mode;
};

struct ramfs_fs_info {
  struct ramfs_mount_opts mount_opts;
};

enum ramfs_param {
  Opt_mode___3 = 0,
};

enum hugetlbfs_size_type {
  NO_SIZE = 0,
  SIZE_STD = 1,
  SIZE_PERCENT = 2,
};

struct hugetlbfs_fs_context {
  struct hstate* hstate;
  long long unsigned int max_size_opt;
  long long unsigned int min_size_opt;
  long int max_hpages;
  long int nr_inodes;
  long int min_hpages;
  enum hugetlbfs_size_type max_val_type;
  enum hugetlbfs_size_type min_val_type;
  kuid_t uid;
  kgid_t gid;
  umode_t mode;
};

enum hugetlb_param {
  Opt_gid___4 = 0,
  Opt_min_size = 1,
  Opt_mode___4 = 2,
  Opt_nr_inodes___2 = 3,
  Opt_pagesize = 4,
  Opt_size___2 = 5,
  Opt_uid___3 = 6,
};

typedef u16 wchar_t;

struct nls_table {
  const char* charset;
  const char* alias;
  int (*uni2char)(wchar_t, unsigned char*, int);
  int (*char2uni)(const unsigned char*, int, wchar_t*);
  const unsigned char* charset2lower;
  const unsigned char* charset2upper;
  struct module* owner;
  struct nls_table* next;
};

struct fat_mount_options {
  kuid_t fs_uid;
  kgid_t fs_gid;
  short unsigned int fs_fmask;
  short unsigned int fs_dmask;
  short unsigned int codepage;
  int time_offset;
  char* iocharset;
  short unsigned int shortname;
  unsigned char name_check;
  unsigned char errors;
  unsigned char nfs;
  short unsigned int allow_utime;
  unsigned int quiet : 1;
  unsigned int showexec : 1;
  unsigned int sys_immutable : 1;
  unsigned int dotsOK : 1;
  unsigned int isvfat : 1;
  unsigned int utf8 : 1;
  unsigned int unicode_xlate : 1;
  unsigned int numtail : 1;
  unsigned int flush : 1;
  unsigned int nocase : 1;
  unsigned int usefree : 1;
  unsigned int tz_set : 1;
  unsigned int rodir : 1;
  unsigned int discard : 1;
  unsigned int dos1xfloppy : 1;
};

struct fatent_operations;

struct msdos_sb_info {
  short unsigned int sec_per_clus;
  short unsigned int cluster_bits;
  unsigned int cluster_size;
  unsigned char fats;
  unsigned char fat_bits;
  short unsigned int fat_start;
  long unsigned int fat_length;
  long unsigned int dir_start;
  short unsigned int dir_entries;
  long unsigned int data_start;
  long unsigned int max_cluster;
  long unsigned int root_cluster;
  long unsigned int fsinfo_sector;
  struct mutex fat_lock;
  struct mutex nfs_build_inode_lock;
  struct mutex s_lock;
  unsigned int prev_free;
  unsigned int free_clusters;
  unsigned int free_clus_valid;
  struct fat_mount_options options;
  struct nls_table* nls_disk;
  struct nls_table* nls_io;
  const void* dir_ops;
  int dir_per_block;
  int dir_per_block_bits;
  unsigned int vol_id;
  int fatent_shift;
  const struct fatent_operations* fatent_ops;
  struct inode* fat_inode;
  struct inode* fsinfo_inode;
  struct ratelimit_state ratelimit;
  spinlock_t inode_hash_lock;
  struct hlist_head inode_hashtable[256];
  spinlock_t dir_hash_lock;
  struct hlist_head dir_hashtable[256];
  unsigned int dirty;
  struct callback_head rcu;
};

struct fat_entry;

struct fatent_operations {
  void (*ent_blocknr)(struct super_block*, int, int*, sector_t*);
  void (*ent_set_ptr)(struct fat_entry*, int);
  int (*ent_bread)(struct super_block*, struct fat_entry*, int, sector_t);
  int (*ent_get)(struct fat_entry*);
  void (*ent_put)(struct fat_entry*, int);
  int (*ent_next)(struct fat_entry*);
};

struct msdos_inode_info {
  spinlock_t cache_lru_lock;
  struct list_head cache_lru;
  int nr_caches;
  unsigned int cache_valid_id;
  loff_t mmu_private;
  int i_start;
  int i_logstart;
  int i_attrs;
  loff_t i_pos;
  struct hlist_node i_fat_hash;
  struct hlist_node i_dir_hash;
  struct rw_semaphore truncate_lock;
  struct inode vfs_inode;
};

struct fat_entry {
  int entry;
  union {
    u8* ent12_p[2];
    __le16* ent16_p;
    __le32* ent32_p;
  } u;
  int nr_bhs;
  struct buffer_head* bhs[2];
  struct inode* fat_inode;
};

struct fat_cache {
  struct list_head cache_list;
  int nr_contig;
  int fcluster;
  int dcluster;
};

struct fat_cache_id {
  unsigned int id;
  int nr_contig;
  int fcluster;
  int dcluster;
};

struct compat_dirent {
  u32 d_ino;
  compat_off_t d_off;
  u16 d_reclen;
  char d_name[256];
};

enum utf16_endian {
  UTF16_HOST_ENDIAN = 0,
  UTF16_LITTLE_ENDIAN = 1,
  UTF16_BIG_ENDIAN = 2,
};

struct __fat_dirent {
  long int d_ino;
  __kernel_off_t d_off;
  short unsigned int d_reclen;
  char d_name[256];
};

struct msdos_dir_entry {
  __u8 name[11];
  __u8 attr;
  __u8 lcase;
  __u8 ctime_cs;
  __le16 ctime;
  __le16 cdate;
  __le16 adate;
  __le16 starthi;
  __le16 time;
  __le16 date;
  __le16 start;
  __le32 size;
};

struct msdos_dir_slot {
  __u8 id;
  __u8 name0_4[10];
  __u8 attr;
  __u8 reserved;
  __u8 alias_checksum;
  __u8 name5_10[12];
  __le16 start;
  __u8 name11_12[4];
};

struct fat_slot_info {
  loff_t i_pos;
  loff_t slot_off;
  int nr_slots;
  struct msdos_dir_entry* de;
  struct buffer_head* bh;
};

typedef long long unsigned int llu;

enum {
  PARSE_INVALID = 1,
  PARSE_NOT_LONGNAME = 2,
  PARSE_EOF = 3,
};

struct fat_ioctl_filldir_callback {
  struct dir_context ctx;
  void* dirent;
  int result;
  const char* longname;
  int long_len;
  const char* shortname;
  int short_len;
};

struct fatent_ra {
  sector_t cur;
  sector_t limit;
  unsigned int ra_blocks;
  sector_t ra_advance;
  sector_t ra_next;
  sector_t ra_limit;
};

struct fat_boot_sector {
  __u8 ignored[3];
  __u8 system_id[8];
  __u8 sector_size[2];
  __u8 sec_per_clus;
  __le16 reserved;
  __u8 fats;
  __u8 dir_entries[2];
  __u8 sectors[2];
  __u8 media;
  __le16 fat_length;
  __le16 secs_track;
  __le16 heads;
  __le32 hidden;
  __le32 total_sect;
  union {
    struct {
      __u8 drive_number;
      __u8 state;
      __u8 signature;
      __u8 vol_id[4];
      __u8 vol_label[11];
      __u8 fs_type[8];
    } fat16;
    struct {
      __le32 length;
      __le16 flags;
      __u8 version[2];
      __le32 root_cluster;
      __le16 info_sector;
      __le16 backup_boot;
      __le16 reserved2[6];
      __u8 drive_number;
      __u8 state;
      __u8 signature;
      __u8 vol_id[4];
      __u8 vol_label[11];
      __u8 fs_type[8];
    } fat32;
  };
};

struct fat_boot_fsinfo {
  __le32 signature1;
  __le32 reserved1[120];
  __le32 signature2;
  __le32 free_clusters;
  __le32 next_cluster;
  __le32 reserved2[4];
};

struct fat_bios_param_block {
  u16 fat_sector_size;
  u8 fat_sec_per_clus;
  u16 fat_reserved;
  u8 fat_fats;
  u16 fat_dir_entries;
  u16 fat_sectors;
  u16 fat_fat_length;
  u32 fat_total_sect;
  u8 fat16_state;
  u32 fat16_vol_id;
  u32 fat32_length;
  u32 fat32_root_cluster;
  u16 fat32_info_sector;
  u8 fat32_state;
  u32 fat32_vol_id;
};

struct fat_floppy_defaults {
  unsigned int nr_sectors;
  unsigned int sec_per_clus;
  unsigned int dir_entries;
  unsigned int media;
  unsigned int fat_length;
};

enum {
  Opt_check_n = 0,
  Opt_check_r = 1,
  Opt_check_s = 2,
  Opt_uid___4 = 3,
  Opt_gid___5 = 4,
  Opt_umask = 5,
  Opt_dmask = 6,
  Opt_fmask = 7,
  Opt_allow_utime = 8,
  Opt_codepage = 9,
  Opt_usefree = 10,
  Opt_nocase = 11,
  Opt_quiet = 12,
  Opt_showexec = 13,
  Opt_debug___2 = 14,
  Opt_immutable = 15,
  Opt_dots = 16,
  Opt_nodots = 17,
  Opt_charset = 18,
  Opt_shortname_lower = 19,
  Opt_shortname_win95 = 20,
  Opt_shortname_winnt = 21,
  Opt_shortname_mixed = 22,
  Opt_utf8_no = 23,
  Opt_utf8_yes = 24,
  Opt_uni_xl_no = 25,
  Opt_uni_xl_yes = 26,
  Opt_nonumtail_no = 27,
  Opt_nonumtail_yes = 28,
  Opt_obsolete = 29,
  Opt_flush = 30,
  Opt_tz_utc = 31,
  Opt_rodir = 32,
  Opt_err_cont___2 = 33,
  Opt_err_panic___2 = 34,
  Opt_err_ro___2 = 35,
  Opt_discard___2 = 36,
  Opt_nfs = 37,
  Opt_time_offset = 38,
  Opt_nfs_stale_rw = 39,
  Opt_nfs_nostale_ro = 40,
  Opt_err___3 = 41,
  Opt_dos1xfloppy = 42,
};

struct fat_fid {
  u32 i_gen;
  u32 i_pos_low;
  u16 i_pos_hi;
  u16 parent_i_pos_hi;
  u32 parent_i_pos_low;
  u32 parent_i_gen;
};

struct shortname_info {
  unsigned char lower : 1;
  unsigned char upper : 1;
  unsigned char valid : 1;
};

struct getdents_callback___2 {
  struct dir_context ctx;
  char* name;
  u64 ino;
  int found;
  int sequence;
};

typedef u32 unicode_t;

struct utf8_table {
  int cmask;
  int cval;
  int shift;
  long int lmask;
  long int lval;
};

struct ovl_config {
  char* lowerdir;
  char* upperdir;
  char* workdir;
  bool default_permissions;
  bool redirect_dir;
  bool redirect_follow;
  const char* redirect_mode;
  bool index;
  bool uuid;
  bool nfs_export;
  int xino;
  bool metacopy;
  bool userxattr;
  bool ovl_volatile;
};

struct ovl_sb {
  struct super_block* sb;
  dev_t pseudo_dev;
  bool bad_uuid;
  bool is_lower;
};

struct ovl_layer {
  struct vfsmount* mnt;
  struct inode* trap;
  struct ovl_sb* fs;
  int idx;
  int fsid;
};

struct ovl_path {
  const struct ovl_layer* layer;
  struct dentry* dentry;
};

struct ovl_fs {
  unsigned int numlayer;
  unsigned int numfs;
  const struct ovl_layer* layers;
  struct ovl_sb* fs;
  struct dentry* workbasedir;
  struct dentry* workdir;
  struct dentry* indexdir;
  long int namelen;
  struct ovl_config config;
  const struct cred* creator_cred;
  bool tmpfile;
  bool noxattr;
  bool upperdir_locked;
  bool workdir_locked;
  bool share_whiteout;
  struct inode* workbasedir_trap;
  struct inode* workdir_trap;
  struct inode* indexdir_trap;
  int xino_mode;
  atomic_long_t last_ino;
  struct dentry* whiteout;
  errseq_t errseq;
};

struct ovl_entry {
  union {
    struct {
      long unsigned int flags;
    };
    struct callback_head rcu;
  };
  unsigned int numlower;
  struct ovl_path lowerstack[0];
};

struct ovl_dir_cache;

struct ovl_inode {
  union {
    struct ovl_dir_cache* cache;
    struct inode* lowerdata;
  };
  const char* redirect;
  u64 version;
  long unsigned int flags;
  struct inode vfs_inode;
  struct dentry* __upperdentry;
  struct inode* lower;
  struct mutex lock;
};

enum ovl_xattr {
  OVL_XATTR_OPAQUE = 0,
  OVL_XATTR_REDIRECT = 1,
  OVL_XATTR_ORIGIN = 2,
  OVL_XATTR_IMPURE = 3,
  OVL_XATTR_NLINK = 4,
  OVL_XATTR_UPPER = 5,
  OVL_XATTR_METACOPY = 6,
};

enum ovl_inode_flag {
  OVL_IMPURE = 0,
  OVL_WHITEOUTS = 1,
  OVL_INDEX = 2,
  OVL_UPPERDATA = 3,
  OVL_CONST_INO = 4,
};

enum ovl_entry_flag {
  OVL_E_UPPER_ALIAS = 0,
  OVL_E_OPAQUE = 1,
  OVL_E_CONNECTED = 2,
};

enum {
  OVL_XINO_OFF = 0,
  OVL_XINO_AUTO = 1,
  OVL_XINO_ON = 2,
};

struct ovl_inode_params {
  struct inode* newinode;
  struct dentry* upperdentry;
  struct ovl_path* lowerpath;
  bool index;
  unsigned int numlower;
  char* redirect;
  struct dentry* lowerdata;
};

struct ovl_cattr {
  dev_t rdev;
  umode_t mode;
  const char* link;
  struct dentry* hardlink;
};

enum {
  OPT_LOWERDIR = 0,
  OPT_UPPERDIR = 1,
  OPT_WORKDIR = 2,
  OPT_DEFAULT_PERMISSIONS = 3,
  OPT_REDIRECT_DIR = 4,
  OPT_INDEX_ON = 5,
  OPT_INDEX_OFF = 6,
  OPT_UUID_ON = 7,
  OPT_UUID_OFF = 8,
  OPT_NFS_EXPORT_ON = 9,
  OPT_USERXATTR = 10,
  OPT_NFS_EXPORT_OFF = 11,
  OPT_XINO_ON = 12,
  OPT_XINO_OFF = 13,
  OPT_XINO_AUTO = 14,
  OPT_METACOPY_ON = 15,
  OPT_METACOPY_OFF = 16,
  OPT_VOLATILE = 17,
  OPT_ERR = 18,
};

struct ovl_fb {
  u8 version;
  u8 magic;
  u8 len;
  u8 flags;
  u8 type;
  uuid_t uuid;
  u32 fid[0];
} __attribute__((packed));

struct ovl_fh {
  u8 padding[3];
  union {
    struct ovl_fb fb;
    u8 buf[0];
  };
} __attribute__((packed));

struct ovl_lookup_data {
  struct super_block* sb;
  struct qstr name;
  bool is_dir;
  bool opaque;
  bool stop;
  bool last;
  char* redirect;
  bool metacopy;
};

enum ovl_path_type {
  __OVL_PATH_UPPER = 1,
  __OVL_PATH_MERGE = 2,
  __OVL_PATH_ORIGIN = 4,
};

struct ovl_aio_req {
  struct kiocb iocb;
  struct kiocb* orig_iocb;
  struct fd fd;
};

enum ovl_copyop {
  OVL_COPY = 0,
  OVL_CLONE = 1,
  OVL_DEDUPE = 2,
};

struct ovl_dir_cache___2 {
  long int refcount;
  u64 version;
  struct list_head entries;
  struct rb_root root;
};

struct ovl_cache_entry {
  unsigned int len;
  unsigned int type;
  u64 real_ino;
  u64 ino;
  struct list_head l_node;
  struct rb_node node;
  struct ovl_cache_entry* next_maybe_whiteout;
  bool is_upper;
  bool is_whiteout;
  char name[0];
};

struct ovl_readdir_data {
  struct dir_context ctx;
  struct dentry* dentry;
  bool is_lowest;
  struct rb_root* root;
  struct list_head* list;
  struct list_head middle;
  struct ovl_cache_entry* first_maybe_whiteout;
  int count;
  int err;
  bool is_upper;
  bool d_type_supported;
};

struct ovl_dir_file {
  bool is_real;
  bool is_upper;
  struct ovl_dir_cache___2* cache;
  struct list_head* cursor;
  struct file* realfile;
  struct file* upperfile;
};

struct ovl_readdir_translate {
  struct dir_context* orig_ctx;
  struct ovl_dir_cache___2* cache;
  struct dir_context ctx;
  u64 parent_ino;
  int fsid;
  int xinobits;
  bool xinowarn;
};

struct ovl_copy_up_ctx {
  struct dentry* parent;
  struct dentry* dentry;
  struct path lowerpath;
  struct kstat stat;
  struct kstat pstat;
  const char* link;
  struct dentry* destdir;
  struct qstr destname;
  struct dentry* workdir;
  bool origin;
  bool indexed;
  bool metacopy;
};

struct ovl_cu_creds {
  const struct cred* old;
  struct cred* new;
};

typedef s8 int8_t;

typedef __s64 xfs_off_t;

typedef long long unsigned int xfs_ino_t;

typedef __s64 xfs_daddr_t;

typedef __u32 xfs_nlink_t;

typedef uint32_t prid_t;

typedef uint32_t xfs_agblock_t;

typedef uint32_t xfs_agino_t;

typedef uint32_t xfs_extlen_t;

typedef uint32_t xfs_agnumber_t;

typedef int32_t xfs_extnum_t;

typedef int64_t xfs_fsize_t;

typedef int64_t xfs_lsn_t;

typedef uint32_t xfs_dablk_t;

typedef uint32_t xfs_dahash_t;

typedef uint64_t xfs_fsblock_t;

typedef uint64_t xfs_rfsblock_t;

typedef uint64_t xfs_rtblock_t;

typedef uint64_t xfs_fileoff_t;

typedef uint64_t xfs_filblks_t;

typedef void* xfs_failaddr_t;

typedef enum {
  XFS_LOOKUP_EQi = 0,
  XFS_LOOKUP_LEi = 1,
  XFS_LOOKUP_GEi = 2,
} xfs_lookup_t;

typedef enum {
  XFS_BTNUM_BNOi = 0,
  XFS_BTNUM_CNTi = 1,
  XFS_BTNUM_RMAPi = 2,
  XFS_BTNUM_BMAPi = 3,
  XFS_BTNUM_INOi = 4,
  XFS_BTNUM_FINOi = 5,
  XFS_BTNUM_REFCi = 6,
  XFS_BTNUM_MAX = 7,
} xfs_btnum_t;

struct xfs_name {
  const unsigned char* name;
  int len;
  int type;
};

typedef uint32_t xfs_dqid_t;

struct xfs_iext_leaf;

struct xfs_iext_cursor {
  struct xfs_iext_leaf* leaf;
  int pos;
};

typedef enum {
  XFS_EXT_NORM = 0,
  XFS_EXT_UNWRITTEN = 1,
} xfs_exntst_t;

struct xfs_bmbt_irec {
  xfs_fileoff_t br_startoff;
  xfs_fsblock_t br_startblock;
  xfs_filblks_t br_blockcount;
  xfs_exntst_t br_state;
};

enum xfs_ag_resv_type {
  XFS_AG_RESV_NONE = 0,
  XFS_AG_RESV_AGFL = 1,
  XFS_AG_RESV_METADATA = 2,
  XFS_AG_RESV_RMAPBT = 3,
};

typedef struct {
  struct rw_semaphore mr_lock;
} mrlock_t;

enum {
  __XBTS_lookup = 0,
  __XBTS_compare = 1,
  __XBTS_insrec = 2,
  __XBTS_delrec = 3,
  __XBTS_newroot = 4,
  __XBTS_killroot = 5,
  __XBTS_increment = 6,
  __XBTS_decrement = 7,
  __XBTS_lshift = 8,
  __XBTS_rshift = 9,
  __XBTS_split = 10,
  __XBTS_join = 11,
  __XBTS_alloc = 12,
  __XBTS_free = 13,
  __XBTS_moves = 14,
  __XBTS_MAX = 15,
};

struct __xfsstats {
  uint32_t xs_allocx;
  uint32_t xs_allocb;
  uint32_t xs_freex;
  uint32_t xs_freeb;
  uint32_t xs_abt_lookup;
  uint32_t xs_abt_compare;
  uint32_t xs_abt_insrec;
  uint32_t xs_abt_delrec;
  uint32_t xs_blk_mapr;
  uint32_t xs_blk_mapw;
  uint32_t xs_blk_unmap;
  uint32_t xs_add_exlist;
  uint32_t xs_del_exlist;
  uint32_t xs_look_exlist;
  uint32_t xs_cmp_exlist;
  uint32_t xs_bmbt_lookup;
  uint32_t xs_bmbt_compare;
  uint32_t xs_bmbt_insrec;
  uint32_t xs_bmbt_delrec;
  uint32_t xs_dir_lookup;
  uint32_t xs_dir_create;
  uint32_t xs_dir_remove;
  uint32_t xs_dir_getdents;
  uint32_t xs_trans_sync;
  uint32_t xs_trans_async;
  uint32_t xs_trans_empty;
  uint32_t xs_ig_attempts;
  uint32_t xs_ig_found;
  uint32_t xs_ig_frecycle;
  uint32_t xs_ig_missed;
  uint32_t xs_ig_dup;
  uint32_t xs_ig_reclaims;
  uint32_t xs_ig_attrchg;
  uint32_t xs_log_writes;
  uint32_t xs_log_blocks;
  uint32_t xs_log_noiclogs;
  uint32_t xs_log_force;
  uint32_t xs_log_force_sleep;
  uint32_t xs_try_logspace;
  uint32_t xs_sleep_logspace;
  uint32_t xs_push_ail;
  uint32_t xs_push_ail_success;
  uint32_t xs_push_ail_pushbuf;
  uint32_t xs_push_ail_pinned;
  uint32_t xs_push_ail_locked;
  uint32_t xs_push_ail_flushing;
  uint32_t xs_push_ail_restarts;
  uint32_t xs_push_ail_flush;
  uint32_t xs_xstrat_quick;
  uint32_t xs_xstrat_split;
  uint32_t xs_write_calls;
  uint32_t xs_read_calls;
  uint32_t xs_attr_get;
  uint32_t xs_attr_set;
  uint32_t xs_attr_remove;
  uint32_t xs_attr_list;
  uint32_t xs_iflush_count;
  uint32_t xs_icluster_flushcnt;
  uint32_t xs_icluster_flushinode;
  uint32_t vn_active;
  uint32_t vn_alloc;
  uint32_t vn_get;
  uint32_t vn_hold;
  uint32_t vn_rele;
  uint32_t vn_reclaim;
  uint32_t vn_remove;
  uint32_t vn_free;
  uint32_t xb_get;
  uint32_t xb_create;
  uint32_t xb_get_locked;
  uint32_t xb_get_locked_waited;
  uint32_t xb_busy_locked;
  uint32_t xb_miss_locked;
  uint32_t xb_page_retries;
  uint32_t xb_page_found;
  uint32_t xb_get_read;
  uint32_t xs_abtb_2[15];
  uint32_t xs_abtc_2[15];
  uint32_t xs_bmbt_2[15];
  uint32_t xs_ibt_2[15];
  uint32_t xs_fibt_2[15];
  uint32_t xs_rmap_2[15];
  uint32_t xs_refcbt_2[15];
  uint32_t xs_qm_dqreclaims;
  uint32_t xs_qm_dqreclaim_misses;
  uint32_t xs_qm_dquot_dups;
  uint32_t xs_qm_dqcachemisses;
  uint32_t xs_qm_dqcachehits;
  uint32_t xs_qm_dqwants;
  uint32_t xs_qm_dquot;
  uint32_t xs_qm_dquot_unused;
  uint64_t xs_xstrat_bytes;
  uint64_t xs_write_bytes;
  uint64_t xs_read_bytes;
  uint64_t defer_relog;
};

struct xfsstats {
  union {
    struct __xfsstats s;
    uint32_t a[187];
  };
};

struct xfs_kobj {
  struct kobject kobject;
  struct completion complete;
};

struct xstats {
  struct xfsstats* xs_stats;
  struct xfs_kobj xs_kobj;
};

struct xfs_sysctl_val {
  int min;
  int val;
  int max;
};

typedef struct xfs_sysctl_val xfs_sysctl_val_t;

struct xfs_param {
  xfs_sysctl_val_t sgid_inherit;
  xfs_sysctl_val_t symlink_mode;
  xfs_sysctl_val_t panic_mask;
  xfs_sysctl_val_t error_level;
  xfs_sysctl_val_t syncd_timer;
  xfs_sysctl_val_t stats_clear;
  xfs_sysctl_val_t inherit_sync;
  xfs_sysctl_val_t inherit_nodump;
  xfs_sysctl_val_t inherit_noatim;
  xfs_sysctl_val_t xfs_buf_timer;
  xfs_sysctl_val_t xfs_buf_age;
  xfs_sysctl_val_t inherit_nosym;
  xfs_sysctl_val_t rotorstep;
  xfs_sysctl_val_t inherit_nodfrg;
  xfs_sysctl_val_t fstrm_timer;
  xfs_sysctl_val_t blockgc_timer;
};

typedef struct xfs_param xfs_param_t;

struct xfs_globals {
  int log_recovery_delay;
  int mount_delay;
  bool bug_on_assert;
  bool always_cow;
};

typedef unsigned int xfs_buf_flags_t;

struct xfs_mount;

struct xfs_buftarg {
  dev_t bt_dev;
  struct block_device* bt_bdev;
  struct dax_device* bt_daxdev;
  struct xfs_mount* bt_mount;
  unsigned int bt_meta_sectorsize;
  size_t bt_meta_sectormask;
  size_t bt_logical_sectorsize;
  size_t bt_logical_sectormask;
  struct shrinker bt_shrinker;
  struct list_lru bt_lru;
  struct percpu_counter bt_io_count;
  struct ratelimit_state bt_ioerror_rl;
};

struct xfs_sb {
  uint32_t sb_magicnum;
  uint32_t sb_blocksize;
  xfs_rfsblock_t sb_dblocks;
  xfs_rfsblock_t sb_rblocks;
  xfs_rtblock_t sb_rextents;
  uuid_t sb_uuid;
  xfs_fsblock_t sb_logstart;
  xfs_ino_t sb_rootino;
  xfs_ino_t sb_rbmino;
  xfs_ino_t sb_rsumino;
  xfs_agblock_t sb_rextsize;
  xfs_agblock_t sb_agblocks;
  xfs_agnumber_t sb_agcount;
  xfs_extlen_t sb_rbmblocks;
  xfs_extlen_t sb_logblocks;
  uint16_t sb_versionnum;
  uint16_t sb_sectsize;
  uint16_t sb_inodesize;
  uint16_t sb_inopblock;
  char sb_fname[12];
  uint8_t sb_blocklog;
  uint8_t sb_sectlog;
  uint8_t sb_inodelog;
  uint8_t sb_inopblog;
  uint8_t sb_agblklog;
  uint8_t sb_rextslog;
  uint8_t sb_inprogress;
  uint8_t sb_imax_pct;
  uint64_t sb_icount;
  uint64_t sb_ifree;
  uint64_t sb_fdblocks;
  uint64_t sb_frextents;
  xfs_ino_t sb_uquotino;
  xfs_ino_t sb_gquotino;
  uint16_t sb_qflags;
  uint8_t sb_flags;
  uint8_t sb_shared_vn;
  xfs_extlen_t sb_inoalignmt;
  uint32_t sb_unit;
  uint32_t sb_width;
  uint8_t sb_dirblklog;
  uint8_t sb_logsectlog;
  uint16_t sb_logsectsize;
  uint32_t sb_logsunit;
  uint32_t sb_features2;
  uint32_t sb_bad_features2;
  uint32_t sb_features_compat;
  uint32_t sb_features_ro_compat;
  uint32_t sb_features_incompat;
  uint32_t sb_features_log_incompat;
  uint32_t sb_crc;
  xfs_extlen_t sb_spino_align;
  xfs_ino_t sb_pquotino;
  xfs_lsn_t sb_lsn;
  uuid_t sb_meta_uuid;
};

typedef struct xfs_buftarg xfs_buftarg_t;

struct xfs_mru_cache;

struct xfs_ino_geometry {
  uint64_t maxicount;
  unsigned int inode_cluster_size;
  unsigned int inode_cluster_size_raw;
  unsigned int inodes_per_cluster;
  unsigned int blocks_per_cluster;
  unsigned int cluster_align;
  unsigned int cluster_align_inodes;
  unsigned int inoalign_mask;
  unsigned int inobt_mxr[2];
  unsigned int inobt_mnr[2];
  unsigned int inobt_maxlevels;
  unsigned int ialloc_inos;
  unsigned int ialloc_blks;
  unsigned int ialloc_min_blks;
  unsigned int ialloc_align;
  unsigned int agino_log;
  uint64_t new_diflags2;
};

struct xfs_trans_res {
  uint tr_logres;
  int tr_logcount;
  int tr_logflags;
};

struct xfs_trans_resv {
  struct xfs_trans_res tr_write;
  struct xfs_trans_res tr_itruncate;
  struct xfs_trans_res tr_rename;
  struct xfs_trans_res tr_link;
  struct xfs_trans_res tr_remove;
  struct xfs_trans_res tr_symlink;
  struct xfs_trans_res tr_create;
  struct xfs_trans_res tr_create_tmpfile;
  struct xfs_trans_res tr_mkdir;
  struct xfs_trans_res tr_ifree;
  struct xfs_trans_res tr_ichange;
  struct xfs_trans_res tr_growdata;
  struct xfs_trans_res tr_addafork;
  struct xfs_trans_res tr_writeid;
  struct xfs_trans_res tr_attrinval;
  struct xfs_trans_res tr_attrsetm;
  struct xfs_trans_res tr_attrsetrt;
  struct xfs_trans_res tr_attrrm;
  struct xfs_trans_res tr_clearagi;
  struct xfs_trans_res tr_growrtalloc;
  struct xfs_trans_res tr_growrtzero;
  struct xfs_trans_res tr_growrtfree;
  struct xfs_trans_res tr_qm_setqlim;
  struct xfs_trans_res tr_qm_dqalloc;
  struct xfs_trans_res tr_qm_quotaoff;
  struct xfs_trans_res tr_qm_equotaoff;
  struct xfs_trans_res tr_sb;
  struct xfs_trans_res tr_fsyncts;
};

struct xfs_error_cfg {
  struct xfs_kobj kobj;
  int max_retries;
  long int retry_timeout;
};

struct xfs_ail;

struct xfs_buf;

struct xfs_da_geometry;

struct xlog;

struct xfs_inode;

struct xfs_quotainfo;

struct xfs_mount {
  struct xfs_sb m_sb;
  struct super_block* m_super;
  struct xfs_ail* m_ail;
  struct xfs_buf* m_sb_bp;
  char* m_rtname;
  char* m_logname;
  struct xfs_da_geometry* m_dir_geo;
  struct xfs_da_geometry* m_attr_geo;
  struct xlog* m_log;
  struct xfs_inode* m_rbmip;
  struct xfs_inode* m_rsumip;
  struct xfs_inode* m_rootip;
  struct xfs_quotainfo* m_quotainfo;
  xfs_buftarg_t* m_ddev_targp;
  xfs_buftarg_t* m_logdev_targp;
  xfs_buftarg_t* m_rtdev_targp;
  uint8_t* m_rsum_cache;
  struct xfs_mru_cache* m_filestream;
  struct workqueue_struct* m_buf_workqueue;
  struct workqueue_struct* m_unwritten_workqueue;
  struct workqueue_struct* m_cil_workqueue;
  struct workqueue_struct* m_reclaim_workqueue;
  struct workqueue_struct* m_blockgc_workqueue;
  struct workqueue_struct* m_sync_workqueue;
  int m_bsize;
  uint8_t m_blkbit_log;
  uint8_t m_blkbb_log;
  uint8_t m_agno_log;
  uint8_t m_sectbb_log;
  uint m_blockmask;
  uint m_blockwsize;
  uint m_blockwmask;
  uint m_alloc_mxr[2];
  uint m_alloc_mnr[2];
  uint m_bmap_dmxr[2];
  uint m_bmap_dmnr[2];
  uint m_rmap_mxr[2];
  uint m_rmap_mnr[2];
  uint m_refc_mxr[2];
  uint m_refc_mnr[2];
  uint m_ag_maxlevels;
  uint m_bm_maxlevels[2];
  uint m_rmap_maxlevels;
  uint m_refc_maxlevels;
  xfs_extlen_t m_ag_prealloc_blocks;
  uint m_alloc_set_aside;
  uint m_ag_max_usable;
  int m_dalign;
  int m_swidth;
  xfs_agnumber_t m_maxagi;
  uint m_allocsize_log;
  uint m_allocsize_blocks;
  int m_logbufs;
  int m_logbsize;
  uint m_rsumlevels;
  uint m_rsumsize;
  int m_fixedfsid[2];
  uint m_qflags;
  uint64_t m_flags;
  int64_t m_low_space[5];
  struct xfs_ino_geometry m_ino_geo;
  struct xfs_trans_resv m_resv;
  bool m_always_cow;
  bool m_fail_unmount;
  bool m_finobt_nores;
  bool m_update_sb;
  uint8_t m_fs_checked;
  uint8_t m_fs_sick;
  uint8_t m_rt_checked;
  uint8_t m_rt_sick;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t m_sb_lock;
  struct percpu_counter m_icount;
  struct percpu_counter m_ifree;
  struct percpu_counter m_fdblocks;
  struct percpu_counter m_delalloc_blks;
  struct xarray m_perag_tree;
  spinlock_t m_perag_lock;
  uint64_t m_resblks;
  uint64_t m_resblks_avail;
  uint64_t m_resblks_save;
  struct delayed_work m_reclaim_work;
  struct xfs_kobj m_kobj;
  struct xfs_kobj m_error_kobj;
  struct xfs_kobj m_error_meta_kobj;
  struct xfs_error_cfg m_error_cfg[4];
  struct xstats m_stats;
  xfs_agnumber_t m_agfrotor;
  xfs_agnumber_t m_agirotor;
  spinlock_t m_agirotor_lock;
  struct work_struct m_flush_inodes_work;
  uint32_t m_generation;
  struct mutex m_growlock;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct xfs_buf_map {
  xfs_daddr_t bm_bn;
  int bm_len;
};

struct xfs_buf_ops {
  char* name;
  union {
    __be32 magic[2];
    __be16 magic16[2];
  };
  void (*verify_read)(struct xfs_buf*);
  void (*verify_write)(struct xfs_buf*);
  xfs_failaddr_t (*verify_struct)(struct xfs_buf*);
};

struct xfs_perag;

struct xfs_buf_log_item;

struct xfs_trans;

struct xfs_buf {
  struct rhash_head b_rhash_head;
  xfs_daddr_t b_bn;
  int b_length;
  atomic_t b_hold;
  atomic_t b_lru_ref;
  xfs_buf_flags_t b_flags;
  struct semaphore b_sema;
  struct list_head b_lru;
  spinlock_t b_lock;
  unsigned int b_state;
  int b_io_error;
  wait_queue_head_t b_waiters;
  struct list_head b_list;
  struct xfs_perag* b_pag;
  struct xfs_mount* b_mount;
  struct xfs_buftarg* b_target;
  void* b_addr;
  struct work_struct b_ioend_work;
  struct completion b_iowait;
  struct xfs_buf_log_item* b_log_item;
  struct list_head b_li_list;
  struct xfs_trans* b_transp;
  struct page** b_pages;
  struct page* b_page_array[2];
  struct xfs_buf_map* b_maps;
  struct xfs_buf_map __b_map;
  int b_map_count;
  atomic_t b_pin_count;
  atomic_t b_io_remaining;
  unsigned int b_page_count;
  unsigned int b_offset;
  int b_error;
  int b_retries;
  long unsigned int b_first_retry_time;
  int b_last_error;
  const struct xfs_buf_ops* b_ops;
};

struct xfs_ag_resv {
  xfs_extlen_t ar_orig_reserved;
  xfs_extlen_t ar_reserved;
  xfs_extlen_t ar_asked;
};

struct xfs_perag {
  struct xfs_mount* pag_mount;
  xfs_agnumber_t pag_agno;
  atomic_t pag_ref;
  char pagf_init;
  char pagi_init;
  char pagf_metadata;
  char pagi_inodeok;
  uint8_t pagf_levels[3];
  bool pagf_agflreset;
  uint32_t pagf_flcount;
  xfs_extlen_t pagf_freeblks;
  xfs_extlen_t pagf_longest;
  uint32_t pagf_btreeblks;
  xfs_agino_t pagi_freecount;
  xfs_agino_t pagi_count;
  xfs_agino_t pagl_pagino;
  xfs_agino_t pagl_leftrec;
  xfs_agino_t pagl_rightrec;
  uint16_t pag_checked;
  uint16_t pag_sick;
  spinlock_t pag_state_lock;
  spinlock_t pagb_lock;
  struct rb_root pagb_tree;
  unsigned int pagb_gen;
  wait_queue_head_t pagb_wait;
  atomic_t pagf_fstrms;
  spinlock_t pag_ici_lock;
  struct xarray pag_ici_root;
  int pag_ici_reclaimable;
  long unsigned int pag_ici_reclaim_cursor;
  spinlock_t pag_buf_lock;
  struct rhashtable pag_buf_hash;
  struct callback_head callback_head;
  int pagb_count;
  struct xfs_ag_resv pag_meta_resv;
  struct xfs_ag_resv pag_rmapbt_resv;
  struct delayed_work pag_blockgc_work;
  uint8_t pagf_refcount_level;
  struct rhashtable pagi_unlinked_hash;
};

struct xfs_item_ops;

struct xfs_log_vec;

struct xfs_log_item {
  struct list_head li_ail;
  struct list_head li_trans;
  xfs_lsn_t li_lsn;
  struct xfs_mount* li_mountp;
  struct xfs_ail* li_ailp;
  uint li_type;
  long unsigned int li_flags;
  struct xfs_buf* li_buf;
  struct list_head li_bio_list;
  const struct xfs_item_ops* li_ops;
  struct list_head li_cil;
  struct xfs_log_vec* li_lv;
  struct xfs_log_vec* li_lv_shadow;
  xfs_lsn_t li_seq;
};

struct xfs_buf_log_format {
  short unsigned int blf_type;
  short unsigned int blf_size;
  short unsigned int blf_flags;
  short unsigned int blf_len;
  int64_t blf_blkno;
  unsigned int blf_map_size;
  unsigned int blf_data_map[17];
};

struct xfs_buf_log_item {
  struct xfs_log_item bli_item;
  struct xfs_buf* bli_buf;
  unsigned int bli_flags;
  unsigned int bli_recur;
  atomic_t bli_refcount;
  int bli_format_count;
  struct xfs_buf_log_format* bli_formats;
  struct xfs_buf_log_format __bli_format;
};

struct xlog_ticket;

struct xfs_dquot_acct;

struct xfs_trans {
  unsigned int t_magic;
  unsigned int t_log_res;
  unsigned int t_log_count;
  unsigned int t_blk_res;
  unsigned int t_blk_res_used;
  unsigned int t_rtx_res;
  unsigned int t_rtx_res_used;
  unsigned int t_flags;
  xfs_fsblock_t t_firstblock;
  struct xlog_ticket* t_ticket;
  struct xfs_mount* t_mountp;
  struct xfs_dquot_acct* t_dqinfo;
  int64_t t_icount_delta;
  int64_t t_ifree_delta;
  int64_t t_fdblocks_delta;
  int64_t t_res_fdblocks_delta;
  int64_t t_frextents_delta;
  int64_t t_res_frextents_delta;
  int64_t t_dblocks_delta;
  int64_t t_agcount_delta;
  int64_t t_imaxpct_delta;
  int64_t t_rextsize_delta;
  int64_t t_rbmblocks_delta;
  int64_t t_rblocks_delta;
  int64_t t_rextents_delta;
  int64_t t_rextslog_delta;
  struct list_head t_items;
  struct list_head t_busy;
  struct list_head t_dfops;
  long unsigned int t_pflags;
};

struct xfs_agf {
  __be32 agf_magicnum;
  __be32 agf_versionnum;
  __be32 agf_seqno;
  __be32 agf_length;
  __be32 agf_roots[3];
  __be32 agf_levels[3];
  __be32 agf_flfirst;
  __be32 agf_fllast;
  __be32 agf_flcount;
  __be32 agf_freeblks;
  __be32 agf_longest;
  __be32 agf_btreeblks;
  uuid_t agf_uuid;
  __be32 agf_rmap_blocks;
  __be32 agf_refcount_blocks;
  __be32 agf_refcount_root;
  __be32 agf_refcount_level;
  __be64 agf_spare64[14];
  __be64 agf_lsn;
  __be32 agf_crc;
  __be32 agf_spare2;
};

enum xfs_dinode_fmt {
  XFS_DINODE_FMT_DEV = 0,
  XFS_DINODE_FMT_LOCAL = 1,
  XFS_DINODE_FMT_EXTENTS = 2,
  XFS_DINODE_FMT_BTREE = 3,
  XFS_DINODE_FMT_UUID = 4,
};

struct xfs_alloc_rec {
  __be32 ar_startblock;
  __be32 ar_blockcount;
};

typedef struct xfs_alloc_rec xfs_alloc_key_t;

struct xfs_alloc_rec_incore {
  xfs_agblock_t ar_startblock;
  xfs_extlen_t ar_blockcount;
};

typedef uint64_t xfs_inofree_t;

struct xfs_inobt_rec {
  __be32 ir_startino;
  union {
    struct {
      __be32 ir_freecount;
    } f;
    struct {
      __be16 ir_holemask;
      __u8 ir_count;
      __u8 ir_freecount;
    } sp;
  } ir_u;
  __be64 ir_free;
};

struct xfs_inobt_rec_incore {
  xfs_agino_t ir_startino;
  uint16_t ir_holemask;
  uint8_t ir_count;
  uint8_t ir_freecount;
  xfs_inofree_t ir_free;
};

struct xfs_inobt_key {
  __be32 ir_startino;
};

struct xfs_owner_info {
  uint64_t oi_owner;
  xfs_fileoff_t oi_offset;
  unsigned int oi_flags;
};

struct xfs_rmap_rec {
  __be32 rm_startblock;
  __be32 rm_blockcount;
  __be64 rm_owner;
  __be64 rm_offset;
};

struct xfs_rmap_irec {
  xfs_agblock_t rm_startblock;
  xfs_extlen_t rm_blockcount;
  uint64_t rm_owner;
  uint64_t rm_offset;
  unsigned int rm_flags;
};

struct xfs_rmap_key {
  __be32 rm_startblock;
  __be64 rm_owner;
  __be64 rm_offset;
} __attribute__((packed));

struct xfs_refcount_rec {
  __be32 rc_startblock;
  __be32 rc_blockcount;
  __be32 rc_refcount;
};

struct xfs_refcount_key {
  __be32 rc_startblock;
};

struct xfs_refcount_irec {
  xfs_agblock_t rc_startblock;
  xfs_extlen_t rc_blockcount;
  xfs_nlink_t rc_refcount;
};

struct xfs_bmbt_rec {
  __be64 l0;
  __be64 l1;
};

typedef struct xfs_bmbt_rec xfs_bmbt_rec_t;

typedef xfs_bmbt_rec_t xfs_bmdr_rec_t;

struct xfs_bmbt_key {
  __be64 br_startoff;
};

typedef struct xfs_bmbt_key xfs_bmdr_key_t;

struct xfs_btree_block_shdr {
  __be32 bb_leftsib;
  __be32 bb_rightsib;
  __be64 bb_blkno;
  __be64 bb_lsn;
  uuid_t bb_uuid;
  __be32 bb_owner;
  __le32 bb_crc;
};

struct xfs_btree_block_lhdr {
  __be64 bb_leftsib;
  __be64 bb_rightsib;
  __be64 bb_blkno;
  __be64 bb_lsn;
  uuid_t bb_uuid;
  __be64 bb_owner;
  __le32 bb_crc;
  __be32 bb_pad;
};

struct xfs_btree_block {
  __be32 bb_magic;
  __be16 bb_level;
  __be16 bb_numrecs;
  union {
    struct xfs_btree_block_shdr s;
    struct xfs_btree_block_lhdr l;
  } bb_u;
};

typedef uint32_t xlog_tid_t;

struct xlog_rec_header {
  __be32 h_magicno;
  __be32 h_cycle;
  __be32 h_version;
  __be32 h_len;
  __be64 h_lsn;
  __be64 h_tail_lsn;
  __le32 h_crc;
  __be32 h_prev_block;
  __be32 h_num_logops;
  __be32 h_cycle_data[64];
  __be32 h_fmt;
  uuid_t h_fs_uuid;
  __be32 h_size;
};

typedef struct xlog_rec_header xlog_rec_header_t;

struct xlog_rec_ext_header {
  __be32 xh_cycle;
  __be32 xh_cycle_data[64];
};

typedef struct xlog_rec_ext_header xlog_rec_ext_header_t;

union xlog_in_core2 {
  xlog_rec_header_t hic_header;
  xlog_rec_ext_header_t hic_xheader;
  char hic_sector[512];
};

typedef union xlog_in_core2 xlog_in_core_2_t;

struct xfs_log_iovec {
  void* i_addr;
  int i_len;
  uint i_type;
};

struct xfs_trans_header {
  uint th_magic;
  uint th_type;
  int32_t th_tid;
  uint th_num_items;
};

typedef struct xfs_trans_header xfs_trans_header_t;

struct xfs_inode_log_format {
  uint16_t ilf_type;
  uint16_t ilf_size;
  uint32_t ilf_fields;
  uint16_t ilf_asize;
  uint16_t ilf_dsize;
  uint32_t ilf_pad;
  uint64_t ilf_ino;
  union {
    uint32_t ilfu_rdev;
    uint8_t __pad[16];
  } ilf_u;
  int64_t ilf_blkno;
  int32_t ilf_len;
  int32_t ilf_boffset;
};

struct xfs_icreate_log {
  uint16_t icl_type;
  uint16_t icl_size;
  __be32 icl_ag;
  __be32 icl_agbno;
  __be32 icl_count;
  __be32 icl_isize;
  __be32 icl_length;
  __be32 icl_gen;
};

enum {
  XFS_LOWSP_1_PCNT = 0,
  XFS_LOWSP_2_PCNT = 1,
  XFS_LOWSP_3_PCNT = 2,
  XFS_LOWSP_4_PCNT = 3,
  XFS_LOWSP_5_PCNT = 4,
  XFS_LOWSP_MAX = 5,
};

enum {
  XFS_ERR_METADATA = 0,
  XFS_ERR_CLASS_MAX = 1,
};

enum {
  XFS_ERR_DEFAULT = 0,
  XFS_ERR_EIO = 1,
  XFS_ERR_ENOSPC = 2,
  XFS_ERR_ENODEV = 3,
  XFS_ERR_ERRNO_MAX = 4,
};

typedef uint xfs_dir2_data_aoff_t;

struct xfs_da_geometry {
  unsigned int blksize;
  unsigned int fsbcount;
  uint8_t fsblog;
  uint8_t blklog;
  unsigned int node_hdr_size;
  unsigned int node_ents;
  unsigned int magicpct;
  xfs_dablk_t datablk;
  unsigned int leaf_hdr_size;
  unsigned int leaf_max_ents;
  xfs_dablk_t leafblk;
  unsigned int free_hdr_size;
  unsigned int free_max_bests;
  xfs_dablk_t freeblk;
  xfs_dir2_data_aoff_t data_first_offset;
  size_t data_entry_offset;
};

struct xlog_grant_head {
  spinlock_t lock;
  struct list_head waiters;
  atomic64_t grant;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct xfs_cil;

struct xlog_in_core;

typedef struct xlog_in_core xlog_in_core_t;

struct xlog {
  struct xfs_mount* l_mp;
  struct xfs_ail* l_ailp;
  struct xfs_cil* l_cilp;
  struct xfs_buftarg* l_targ;
  struct workqueue_struct* l_ioend_workqueue;
  struct delayed_work l_work;
  uint l_flags;
  uint l_quotaoffs_flag;
  struct list_head* l_buf_cancel_table;
  int l_iclog_hsize;
  int l_iclog_heads;
  uint l_sectBBsize;
  int l_iclog_size;
  int l_iclog_bufs;
  xfs_daddr_t l_logBBstart;
  int l_logsize;
  int l_logBBsize;
  long : 64;
  wait_queue_head_t l_flush_wait;
  int l_covered_state;
  xlog_in_core_t* l_iclog;
  spinlock_t l_icloglock;
  int l_curr_cycle;
  int l_prev_cycle;
  int l_curr_block;
  int l_prev_block;
  atomic64_t l_last_sync_lsn;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  atomic64_t l_tail_lsn;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct xlog_grant_head l_reserve_head;
  struct xlog_grant_head l_write_head;
  struct xfs_kobj l_kobj;
  xfs_lsn_t l_recovery_lsn;
  long : 64;
  long : 64;
  long : 64;
};

struct xfs_imap {
  xfs_daddr_t im_blkno;
  short unsigned int im_len;
  short unsigned int im_boffset;
};

struct xfs_ifork {
  int64_t if_bytes;
  struct xfs_btree_block* if_broot;
  unsigned int if_seq;
  int if_height;
  union {
    void* if_root;
    char* if_data;
  } if_u1;
  short int if_broot_bytes;
  unsigned char if_flags;
  int8_t if_format;
  xfs_extnum_t if_nextents;
};

struct xfs_icdinode {
  uint16_t di_flushiter;
  prid_t di_projid;
  xfs_fsize_t di_size;
  xfs_rfsblock_t di_nblocks;
  xfs_extlen_t di_extsize;
  uint8_t di_forkoff;
  uint32_t di_dmevmask;
  uint16_t di_dmstate;
  uint16_t di_flags;
  uint64_t di_flags2;
  uint32_t di_cowextsize;
  struct timespec64 di_crtime;
};

struct xfs_dquot;

struct xfs_inode_log_item;

struct xfs_inode {
  struct xfs_mount* i_mount;
  struct xfs_dquot* i_udquot;
  struct xfs_dquot* i_gdquot;
  struct xfs_dquot* i_pdquot;
  xfs_ino_t i_ino;
  struct xfs_imap i_imap;
  struct xfs_ifork* i_afp;
  struct xfs_ifork* i_cowfp;
  struct xfs_ifork i_df;
  struct xfs_inode_log_item* i_itemp;
  mrlock_t i_lock;
  mrlock_t i_mmaplock;
  atomic_t i_pincount;
  uint16_t i_checked;
  uint16_t i_sick;
  spinlock_t i_flags_lock;
  long unsigned int i_flags;
  uint64_t i_delayed_blks;
  struct xfs_icdinode i_d;
  struct inode i_vnode;
  spinlock_t i_ioend_lock;
  struct work_struct i_ioend_work;
  struct list_head i_ioend_list;
};

enum xfs_defer_ops_type {
  XFS_DEFER_OPS_TYPE_BMAP = 0,
  XFS_DEFER_OPS_TYPE_REFCOUNT = 1,
  XFS_DEFER_OPS_TYPE_RMAP = 2,
  XFS_DEFER_OPS_TYPE_FREE = 3,
  XFS_DEFER_OPS_TYPE_AGFL_FREE = 4,
  XFS_DEFER_OPS_TYPE_MAX = 5,
};

struct xfs_defer_pending {
  struct list_head dfp_list;
  struct list_head dfp_work;
  struct xfs_log_item* dfp_intent;
  struct xfs_log_item* dfp_done;
  unsigned int dfp_count;
  enum xfs_defer_ops_type dfp_type;
};

struct xfs_btree_cur;

struct xfs_defer_op_type {
  struct xfs_log_item* (
      *create_intent)(struct xfs_trans*, struct list_head*, unsigned int, bool);
  void (*abort_intent)(struct xfs_log_item*);
  struct xfs_log_item* (
      *create_done)(struct xfs_trans*, struct xfs_log_item*, unsigned int);
  int (*finish_item)(
      struct xfs_trans*,
      struct xfs_log_item*,
      struct list_head*,
      struct xfs_btree_cur**);
  void (*finish_cleanup)(struct xfs_trans*, struct xfs_btree_cur*, int);
  void (*cancel_item)(struct list_head*);
  unsigned int max_items;
};

union xfs_btree_irec {
  struct xfs_alloc_rec_incore a;
  struct xfs_bmbt_irec b;
  struct xfs_inobt_rec_incore i;
  struct xfs_rmap_irec r;
  struct xfs_refcount_irec rc;
};

struct xbtree_afakeroot;

struct xfs_btree_cur_ag {
  union {
    struct xfs_buf* agbp;
    struct xbtree_afakeroot* afake;
  };
  xfs_agnumber_t agno;
  union {
    struct {
      long unsigned int nr_ops;
      int shape_changes;
    } refc;
    struct {
      bool active;
    } abt;
  };
};

struct xbtree_ifakeroot;

struct xfs_btree_cur_ino {
  struct xfs_inode* ip;
  struct xbtree_ifakeroot* ifake;
  int allocated;
  short int forksize;
  char whichfork;
  char flags;
};

struct xfs_btree_ops;

struct xfs_btree_cur {
  struct xfs_trans* bc_tp;
  struct xfs_mount* bc_mp;
  const struct xfs_btree_ops* bc_ops;
  uint bc_flags;
  union xfs_btree_irec bc_rec;
  struct xfs_buf* bc_bufs[9];
  int bc_ptrs[9];
  uint8_t bc_ra[9];
  uint8_t bc_nlevels;
  uint8_t bc_blocklog;
  xfs_btnum_t bc_btnum;
  int bc_statoff;
  union {
    struct xfs_btree_cur_ag bc_ag;
    struct xfs_btree_cur_ino bc_ino;
  };
};

struct xfs_da_node_entry {
  __be32 hashval;
  __be32 before;
};

typedef uint8_t xfs_dqtype_t;

typedef uint64_t xfs_qcnt_t;

typedef uint16_t xfs_qwarncnt_t;

struct xfs_dquot_res {
  xfs_qcnt_t reserved;
  xfs_qcnt_t count;
  xfs_qcnt_t hardlimit;
  xfs_qcnt_t softlimit;
  time64_t timer;
  xfs_qwarncnt_t warnings;
};

struct xfs_dq_logitem {
  struct xfs_log_item qli_item;
  struct xfs_dquot* qli_dquot;
  xfs_lsn_t qli_flush_lsn;
};

struct xfs_dquot {
  struct list_head q_lru;
  struct xfs_mount* q_mount;
  xfs_dqtype_t q_type;
  uint16_t q_flags;
  xfs_dqid_t q_id;
  uint q_nrefs;
  int q_bufoffset;
  xfs_daddr_t q_blkno;
  xfs_fileoff_t q_fileoffset;
  struct xfs_dquot_res q_blk;
  struct xfs_dquot_res q_ino;
  struct xfs_dquot_res q_rtb;
  struct xfs_dq_logitem q_logitem;
  xfs_qcnt_t q_prealloc_lo_wmark;
  xfs_qcnt_t q_prealloc_hi_wmark;
  int64_t q_low_space[3];
  struct mutex q_qlock;
  struct completion q_flush;
  atomic_t q_pincount;
  struct wait_queue_head q_pinwait;
};

union xfs_btree_ptr {
  __be32 s;
  __be64 l;
};

union xfs_btree_key {
  struct xfs_bmbt_key bmbt;
  xfs_bmdr_key_t bmbr;
  xfs_alloc_key_t alloc;
  struct xfs_inobt_key inobt;
  struct xfs_rmap_key rmap;
  struct xfs_rmap_key __rmap_bigkey[2];
  struct xfs_refcount_key refc;
};

union xfs_btree_rec {
  struct xfs_bmbt_rec bmbt;
  xfs_bmdr_rec_t bmbr;
  struct xfs_alloc_rec alloc;
  struct xfs_inobt_rec inobt;
  struct xfs_rmap_rec rmap;
  struct xfs_refcount_rec refc;
};

struct xfs_btree_ops {
  size_t key_len;
  size_t rec_len;
  struct xfs_btree_cur* (*dup_cursor)(struct xfs_btree_cur*);
  void (*update_cursor)(struct xfs_btree_cur*, struct xfs_btree_cur*);
  void (*set_root)(struct xfs_btree_cur*, union xfs_btree_ptr*, int);
  int (*alloc_block)(
      struct xfs_btree_cur*,
      union xfs_btree_ptr*,
      union xfs_btree_ptr*,
      int*);
  int (*free_block)(struct xfs_btree_cur*, struct xfs_buf*);
  void (*update_lastrec)(
      struct xfs_btree_cur*,
      struct xfs_btree_block*,
      union xfs_btree_rec*,
      int,
      int);
  int (*get_minrecs)(struct xfs_btree_cur*, int);
  int (*get_maxrecs)(struct xfs_btree_cur*, int);
  int (*get_dmaxrecs)(struct xfs_btree_cur*, int);
  void (*init_key_from_rec)(union xfs_btree_key*, union xfs_btree_rec*);
  void (*init_rec_from_cur)(struct xfs_btree_cur*, union xfs_btree_rec*);
  void (*init_ptr_from_cur)(struct xfs_btree_cur*, union xfs_btree_ptr*);
  void (*init_high_key_from_rec)(union xfs_btree_key*, union xfs_btree_rec*);
  int64_t (*key_diff)(struct xfs_btree_cur*, union xfs_btree_key*);
  int64_t (*diff_two_keys)(
      struct xfs_btree_cur*,
      union xfs_btree_key*,
      union xfs_btree_key*);
  const struct xfs_buf_ops* buf_ops;
  int (*keys_inorder)(
      struct xfs_btree_cur*,
      union xfs_btree_key*,
      union xfs_btree_key*);
  int (*recs_inorder)(
      struct xfs_btree_cur*,
      union xfs_btree_rec*,
      union xfs_btree_rec*);
};

struct xbtree_afakeroot {
  xfs_agblock_t af_root;
  unsigned int af_levels;
  unsigned int af_blocks;
};

struct xbtree_ifakeroot {
  struct xfs_ifork* if_fork;
  int64_t if_blocks;
  unsigned int if_levels;
  unsigned int if_fork_size;
  unsigned int if_format;
  unsigned int if_extents;
};

enum xfs_dacmp {
  XFS_CMP_DIFFERENT = 0,
  XFS_CMP_EXACT = 1,
  XFS_CMP_CASE = 2,
};

struct xfs_da_args {
  struct xfs_da_geometry* geo;
  const uint8_t* name;
  int namelen;
  uint8_t filetype;
  void* value;
  int valuelen;
  unsigned int attr_filter;
  unsigned int attr_flags;
  xfs_dahash_t hashval;
  xfs_ino_t inumber;
  struct xfs_inode* dp;
  struct xfs_trans* trans;
  xfs_extlen_t total;
  int whichfork;
  xfs_dablk_t blkno;
  int index;
  xfs_dablk_t rmtblkno;
  int rmtblkcnt;
  int rmtvaluelen;
  xfs_dablk_t blkno2;
  int index2;
  xfs_dablk_t rmtblkno2;
  int rmtblkcnt2;
  int rmtvaluelen2;
  int op_flags;
  enum xfs_dacmp cmpresult;
};

typedef unsigned int xfs_alloctype_t;

struct xfs_alloc_arg {
  struct xfs_trans* tp;
  struct xfs_mount* mp;
  struct xfs_buf* agbp;
  struct xfs_perag* pag;
  xfs_fsblock_t fsbno;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t minlen;
  xfs_extlen_t maxlen;
  xfs_extlen_t mod;
  xfs_extlen_t prod;
  xfs_extlen_t minleft;
  xfs_extlen_t total;
  xfs_extlen_t alignment;
  xfs_extlen_t minalignslop;
  xfs_agblock_t min_agbno;
  xfs_agblock_t max_agbno;
  xfs_extlen_t len;
  xfs_alloctype_t type;
  xfs_alloctype_t otype;
  int datatype;
  char wasdel;
  char wasfromfl;
  struct xfs_owner_info oinfo;
  enum xfs_ag_resv_type resv;
};

struct xfs_attrlist_cursor_kern {
  __u32 hashval;
  __u32 blkno;
  __u32 offset;
  __u16 pad1;
  __u8 pad2;
  __u8 initted;
};

struct xfs_attr_list_context;

typedef void (*put_listent_func_t)(
    struct xfs_attr_list_context*,
    int,
    unsigned char*,
    int,
    int);

struct xfs_attr_list_context {
  struct xfs_trans* tp;
  struct xfs_inode* dp;
  struct xfs_attrlist_cursor_kern cursor;
  void* buffer;
  int seen_enough;
  bool allow_incomplete;
  ssize_t count;
  int dupcnt;
  int bufsize;
  int firstu;
  unsigned int attr_filter;
  int resynch;
  put_listent_func_t put_listent;
  int index;
};

struct xfs_item_ops {
  unsigned int flags;
  void (*iop_size)(struct xfs_log_item*, int*, int*);
  void (*iop_format)(struct xfs_log_item*, struct xfs_log_vec*);
  void (*iop_pin)(struct xfs_log_item*);
  void (*iop_unpin)(struct xfs_log_item*, int);
  uint (*iop_push)(struct xfs_log_item*, struct list_head*);
  void (*iop_committing)(struct xfs_log_item*, xfs_lsn_t);
  void (*iop_release)(struct xfs_log_item*);
  xfs_lsn_t (*iop_committed)(struct xfs_log_item*, xfs_lsn_t);
  int (*iop_recover)(struct xfs_log_item*, struct list_head*);
  bool (*iop_match)(struct xfs_log_item*, uint64_t);
  struct xfs_log_item* (*iop_relog)(struct xfs_log_item*, struct xfs_trans*);
};

struct xlog_res {
  uint r_len;
  uint r_type;
};

typedef struct xlog_res xlog_res_t;

struct xlog_ticket {
  struct list_head t_queue;
  struct task_struct* t_task;
  xlog_tid_t t_tid;
  atomic_t t_ref;
  int t_curr_res;
  int t_unit_res;
  char t_ocnt;
  char t_cnt;
  char t_clientid;
  char t_flags;
  uint t_res_num;
  uint t_res_num_ophdrs;
  uint t_res_arr_sum;
  uint t_res_o_flow;
  xlog_res_t t_res_arr[15];
};

enum xlog_iclog_state {
  XLOG_STATE_ACTIVE = 0,
  XLOG_STATE_WANT_SYNC = 1,
  XLOG_STATE_SYNCING = 2,
  XLOG_STATE_DONE_SYNC = 3,
  XLOG_STATE_CALLBACK = 4,
  XLOG_STATE_DIRTY = 5,
  XLOG_STATE_IOERROR = 6,
};

struct xlog_in_core {
  wait_queue_head_t ic_force_wait;
  wait_queue_head_t ic_write_wait;
  struct xlog_in_core* ic_next;
  struct xlog_in_core* ic_prev;
  struct xlog* ic_log;
  u32 ic_size;
  u32 ic_offset;
  enum xlog_iclog_state ic_state;
  char* ic_datap;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t ic_callback_lock;
  struct list_head ic_callbacks;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  atomic_t ic_refcnt;
  xlog_in_core_2_t* ic_data;
  struct semaphore ic_sema;
  struct work_struct ic_end_io_work;
  struct bio ic_bio;
  struct bio_vec ic_bvec[0];
};

struct xfs_cil_ctx {
  struct xfs_cil* cil;
  xfs_lsn_t sequence;
  xfs_lsn_t start_lsn;
  xfs_lsn_t commit_lsn;
  struct xlog_ticket* ticket;
  int nvecs;
  int space_used;
  struct list_head busy_extents;
  struct xfs_log_vec* lv_chain;
  struct list_head iclog_entry;
  struct list_head committing;
  struct work_struct discard_endio_work;
};

struct xfs_cil {
  struct xlog* xc_log;
  struct list_head xc_cil;
  spinlock_t xc_cil_lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct rw_semaphore xc_ctx_lock;
  struct xfs_cil_ctx* xc_ctx;
  long : 64;
  long : 64;
  spinlock_t xc_push_lock;
  xfs_lsn_t xc_push_seq;
  struct list_head xc_committing;
  wait_queue_head_t xc_commit_wait;
  xfs_lsn_t xc_current_sequence;
  struct work_struct xc_push_work;
  wait_queue_head_t xc_push_wait;
  long : 64;
};

struct xfs_dqtrx {
  struct xfs_dquot* qt_dquot;
  uint64_t qt_blk_res;
  int64_t qt_bcount_delta;
  int64_t qt_delbcnt_delta;
  uint64_t qt_rtblk_res;
  uint64_t qt_rtblk_res_used;
  int64_t qt_rtbcount_delta;
  int64_t qt_delrtb_delta;
  uint64_t qt_ino_res;
  uint64_t qt_ino_res_used;
  int64_t qt_icount_delta;
};

enum {
  XFS_QLOWSP_1_PCNT = 0,
  XFS_QLOWSP_3_PCNT = 1,
  XFS_QLOWSP_5_PCNT = 2,
  XFS_QLOWSP_MAX = 3,
};

enum xlog_recover_reorder {
  XLOG_REORDER_BUFFER_LIST = 0,
  XLOG_REORDER_ITEM_LIST = 1,
  XLOG_REORDER_INODE_BUFFER_LIST = 2,
  XLOG_REORDER_CANCEL_LIST = 3,
};

struct xlog_recover_item;

struct xlog_recover_item_ops {
  uint16_t item_type;
  enum xlog_recover_reorder (*reorder)(struct xlog_recover_item*);
  void (*ra_pass2)(struct xlog*, struct xlog_recover_item*);
  int (*commit_pass1)(struct xlog*, struct xlog_recover_item*);
  int (*commit_pass2)(
      struct xlog*,
      struct list_head*,
      struct xlog_recover_item*,
      xfs_lsn_t);
};

struct xlog_recover_item {
  struct list_head ri_list;
  int ri_cnt;
  int ri_total;
  struct xfs_log_iovec* ri_buf;
  const struct xlog_recover_item_ops* ri_ops;
};

struct xlog_recover {
  struct hlist_node r_list;
  xlog_tid_t r_log_tid;
  xfs_trans_header_t r_theader;
  int r_state;
  xfs_lsn_t r_lsn;
  struct list_head r_itemq;
};

struct xfs_fsmap {
  dev_t fmr_device;
  uint32_t fmr_flags;
  uint64_t fmr_physical;
  uint64_t fmr_owner;
  xfs_fileoff_t fmr_offset;
  xfs_filblks_t fmr_length;
};

struct xfs_eofblocks {
  __u32 eof_flags;
  kuid_t eof_uid;
  kgid_t eof_gid;
  prid_t eof_prid;
  __u64 eof_min_file_size;
};

struct trace_event_raw_xfs_attr_list_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  u32 hashval;
  u32 blkno;
  u32 offset;
  void* buffer;
  int bufsize;
  int count;
  int firstu;
  int dupcnt;
  unsigned int attr_filter;
  char __data[0];
};

struct trace_event_raw_xlog_intent_recovery_failed {
  struct trace_entry ent;
  dev_t dev;
  int error;
  void* function;
  char __data[0];
};

struct trace_event_raw_xfs_perag_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  int refcount;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_ag_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  char __data[0];
};

struct trace_event_raw_xfs_attr_list_node_descend {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  u32 hashval;
  u32 blkno;
  u32 offset;
  void* buffer;
  int bufsize;
  int count;
  int firstu;
  int dupcnt;
  unsigned int attr_filter;
  u32 bt_hashval;
  u32 bt_before;
  char __data[0];
};

struct trace_event_raw_xfs_bmap_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  void* leaf;
  int pos;
  xfs_fileoff_t startoff;
  xfs_fsblock_t startblock;
  xfs_filblks_t blockcount;
  xfs_exntst_t state;
  int bmap_state;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_buf_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_daddr_t bno;
  int nblks;
  int hold;
  int pincount;
  unsigned int lockval;
  unsigned int flags;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_buf_flags_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_daddr_t bno;
  size_t buffer_length;
  int hold;
  int pincount;
  unsigned int lockval;
  unsigned int flags;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_buf_ioerror {
  struct trace_entry ent;
  dev_t dev;
  xfs_daddr_t bno;
  size_t buffer_length;
  unsigned int flags;
  int hold;
  int pincount;
  unsigned int lockval;
  int error;
  xfs_failaddr_t caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_buf_item_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_daddr_t buf_bno;
  size_t buf_len;
  int buf_hold;
  int buf_pincount;
  int buf_lockval;
  unsigned int buf_flags;
  unsigned int bli_recur;
  int bli_refcount;
  unsigned int bli_flags;
  long unsigned int li_flags;
  char __data[0];
};

struct trace_event_raw_xfs_filestream_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_agnumber_t agno;
  int streams;
  char __data[0];
};

struct trace_event_raw_xfs_filestream_pick {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_agnumber_t agno;
  int streams;
  xfs_extlen_t free;
  int nscan;
  char __data[0];
};

struct trace_event_raw_xfs_lock_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  int lock_flags;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_inode_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  char __data[0];
};

struct trace_event_raw_xfs_filemap_fault {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  enum page_entry_size pe_size;
  bool write_fault;
  char __data[0];
};

struct trace_event_raw_xfs_iref_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  int count;
  int pincount;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_iomap_prealloc_size {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_fsblock_t blocks;
  int shift;
  unsigned int writeio_blocks;
  char __data[0];
};

struct trace_event_raw_xfs_irec_merge_pre {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agino_t agino;
  uint16_t holemask;
  xfs_agino_t nagino;
  uint16_t nholemask;
  char __data[0];
};

struct trace_event_raw_xfs_irec_merge_post {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agino_t agino;
  uint16_t holemask;
  char __data[0];
};

struct trace_event_raw_xfs_namespace_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t dp_ino;
  int namelen;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_xfs_rename {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t src_dp_ino;
  xfs_ino_t target_dp_ino;
  int src_namelen;
  int target_namelen;
  u32 __data_loc_src_name;
  u32 __data_loc_target_name;
  char __data[0];
};

struct trace_event_raw_xfs_dquot_class {
  struct trace_entry ent;
  dev_t dev;
  u32 id;
  xfs_dqtype_t type;
  unsigned int flags;
  unsigned int nrefs;
  long long unsigned int res_bcount;
  long long unsigned int res_rtbcount;
  long long unsigned int res_icount;
  long long unsigned int bcount;
  long long unsigned int rtbcount;
  long long unsigned int icount;
  long long unsigned int blk_hardlimit;
  long long unsigned int blk_softlimit;
  long long unsigned int rtb_hardlimit;
  long long unsigned int rtb_softlimit;
  long long unsigned int ino_hardlimit;
  long long unsigned int ino_softlimit;
  char __data[0];
};

struct trace_event_raw_xfs_trans_mod_dquot {
  struct trace_entry ent;
  dev_t dev;
  xfs_dqtype_t type;
  unsigned int flags;
  unsigned int dqid;
  unsigned int field;
  int64_t delta;
  char __data[0];
};

struct trace_event_raw_xfs_dqtrx_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_dqtype_t type;
  unsigned int flags;
  u32 dqid;
  uint64_t blk_res;
  int64_t bcount_delta;
  int64_t delbcnt_delta;
  uint64_t rtblk_res;
  uint64_t rtblk_res_used;
  int64_t rtbcount_delta;
  int64_t delrtb_delta;
  uint64_t ino_res;
  uint64_t ino_res_used;
  int64_t icount_delta;
  char __data[0];
};

struct trace_event_raw_xfs_loggrant_class {
  struct trace_entry ent;
  dev_t dev;
  char ocnt;
  char cnt;
  int curr_res;
  int unit_res;
  unsigned int flags;
  int reserveq;
  int writeq;
  int grant_reserve_cycle;
  int grant_reserve_bytes;
  int grant_write_cycle;
  int grant_write_bytes;
  int curr_cycle;
  int curr_block;
  xfs_lsn_t tail_lsn;
  char __data[0];
};

struct trace_event_raw_xfs_log_item_class {
  struct trace_entry ent;
  dev_t dev;
  void* lip;
  uint type;
  long unsigned int flags;
  xfs_lsn_t lsn;
  char __data[0];
};

struct trace_event_raw_xfs_log_force {
  struct trace_entry ent;
  dev_t dev;
  xfs_lsn_t lsn;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_ail_class {
  struct trace_entry ent;
  dev_t dev;
  void* lip;
  uint type;
  long unsigned int flags;
  xfs_lsn_t old_lsn;
  xfs_lsn_t new_lsn;
  char __data[0];
};

struct trace_event_raw_xfs_log_assign_tail_lsn {
  struct trace_entry ent;
  dev_t dev;
  xfs_lsn_t new_lsn;
  xfs_lsn_t old_lsn;
  xfs_lsn_t last_sync_lsn;
  char __data[0];
};

struct trace_event_raw_xfs_file_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_fsize_t size;
  loff_t offset;
  size_t count;
  char __data[0];
};

struct trace_event_raw_xfs_imap_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  loff_t size;
  loff_t offset;
  size_t count;
  int whichfork;
  xfs_fileoff_t startoff;
  xfs_fsblock_t startblock;
  xfs_filblks_t blockcount;
  char __data[0];
};

struct trace_event_raw_xfs_simple_io_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  loff_t isize;
  loff_t disize;
  loff_t offset;
  size_t count;
  char __data[0];
};

struct trace_event_raw_xfs_itrunc_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_fsize_t size;
  xfs_fsize_t new_size;
  char __data[0];
};

struct trace_event_raw_xfs_pagecache_inval {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_fsize_t size;
  xfs_off_t start;
  xfs_off_t finish;
  char __data[0];
};

struct trace_event_raw_xfs_bunmap {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_fsize_t size;
  xfs_fileoff_t bno;
  xfs_filblks_t len;
  long unsigned int caller_ip;
  int flags;
  char __data[0];
};

struct trace_event_raw_xfs_extent_busy_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  char __data[0];
};

struct trace_event_raw_xfs_extent_busy_trim {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  xfs_agblock_t tbno;
  xfs_extlen_t tlen;
  char __data[0];
};

struct trace_event_raw_xfs_agf_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  int flags;
  __u32 length;
  __u32 bno_root;
  __u32 cnt_root;
  __u32 bno_level;
  __u32 cnt_level;
  __u32 flfirst;
  __u32 fllast;
  __u32 flcount;
  __u32 freeblks;
  __u32 longest;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_free_extent {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  int resv;
  int haveleft;
  int haveright;
  char __data[0];
};

struct trace_event_raw_xfs_alloc_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t minlen;
  xfs_extlen_t maxlen;
  xfs_extlen_t mod;
  xfs_extlen_t prod;
  xfs_extlen_t minleft;
  xfs_extlen_t total;
  xfs_extlen_t alignment;
  xfs_extlen_t minalignslop;
  xfs_extlen_t len;
  short int type;
  short int otype;
  char wasdel;
  char wasfromfl;
  int resv;
  int datatype;
  xfs_fsblock_t firstblock;
  char __data[0];
};

struct trace_event_raw_xfs_alloc_cur_check {
  struct trace_entry ent;
  dev_t dev;
  xfs_btnum_t btnum;
  xfs_agblock_t bno;
  xfs_extlen_t len;
  xfs_extlen_t diff;
  bool new;
  char __data[0];
};

struct trace_event_raw_xfs_da_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  u32 __data_loc_name;
  int namelen;
  xfs_dahash_t hashval;
  xfs_ino_t inumber;
  int op_flags;
  char __data[0];
};

struct trace_event_raw_xfs_attr_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  u32 __data_loc_name;
  int namelen;
  int valuelen;
  xfs_dahash_t hashval;
  unsigned int attr_filter;
  unsigned int attr_flags;
  int op_flags;
  char __data[0];
};

struct trace_event_raw_xfs_dir2_space_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  int op_flags;
  int idx;
  char __data[0];
};

struct trace_event_raw_xfs_dir2_leafn_moveents {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  int op_flags;
  int src_idx;
  int dst_idx;
  int count;
  char __data[0];
};

struct trace_event_raw_xfs_swap_extent_class {
  struct trace_entry ent;
  dev_t dev;
  int which;
  xfs_ino_t ino;
  int format;
  int nex;
  int broot_size;
  int fork_off;
  char __data[0];
};

struct trace_event_raw_xfs_log_recover {
  struct trace_entry ent;
  dev_t dev;
  xfs_daddr_t headblk;
  xfs_daddr_t tailblk;
  char __data[0];
};

struct trace_event_raw_xfs_log_recover_record {
  struct trace_entry ent;
  dev_t dev;
  xfs_lsn_t lsn;
  int len;
  int num_logops;
  int pass;
  char __data[0];
};

struct trace_event_raw_xfs_log_recover_item_class {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int item;
  xlog_tid_t tid;
  xfs_lsn_t lsn;
  int type;
  int pass;
  int count;
  int total;
  char __data[0];
};

struct trace_event_raw_xfs_log_recover_buf_item_class {
  struct trace_entry ent;
  dev_t dev;
  int64_t blkno;
  short unsigned int len;
  short unsigned int flags;
  short unsigned int size;
  unsigned int map_size;
  char __data[0];
};

struct trace_event_raw_xfs_log_recover_ino_item_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  short unsigned int size;
  int fields;
  short unsigned int asize;
  short unsigned int dsize;
  int64_t blkno;
  int len;
  int boffset;
  char __data[0];
};

struct trace_event_raw_xfs_log_recover_icreate_item_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  unsigned int count;
  unsigned int isize;
  xfs_agblock_t length;
  unsigned int gen;
  char __data[0];
};

struct trace_event_raw_xfs_discard_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  char __data[0];
};

struct trace_event_raw_xfs_btree_cur_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_btnum_t btnum;
  int level;
  int nlevels;
  int ptr;
  xfs_daddr_t daddr;
  char __data[0];
};

struct trace_event_raw_xfs_defer_class {
  struct trace_entry ent;
  dev_t dev;
  struct xfs_trans* tp;
  char committed;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_defer_error_class {
  struct trace_entry ent;
  dev_t dev;
  struct xfs_trans* tp;
  char committed;
  int error;
  char __data[0];
};

struct trace_event_raw_xfs_defer_pending_class {
  struct trace_entry ent;
  dev_t dev;
  int type;
  void* intent;
  char committed;
  int nr;
  char __data[0];
};

struct trace_event_raw_xfs_phys_extent_deferred_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  int type;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  char __data[0];
};

struct trace_event_raw_xfs_map_extent_deferred_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_ino_t ino;
  xfs_agblock_t agbno;
  int whichfork;
  xfs_fileoff_t l_loff;
  xfs_filblks_t l_len;
  xfs_exntst_t l_state;
  int op;
  char __data[0];
};

struct trace_event_raw_xfs_rmap_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  uint64_t owner;
  uint64_t offset;
  long unsigned int flags;
  char __data[0];
};

struct trace_event_raw_xfs_ag_error_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  int error;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_rmapbt_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  uint64_t owner;
  uint64_t offset;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_xfs_ag_resv_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  int resv;
  xfs_extlen_t freeblks;
  xfs_extlen_t flcount;
  xfs_extlen_t reserved;
  xfs_extlen_t asked;
  xfs_extlen_t len;
  char __data[0];
};

struct trace_event_raw_xfs_ag_btree_lookup_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  xfs_lookup_t dir;
  char __data[0];
};

struct trace_event_raw_xfs_refcount_extent_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t startblock;
  xfs_extlen_t blockcount;
  xfs_nlink_t refcount;
  char __data[0];
};

struct trace_event_raw_xfs_refcount_extent_at_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t startblock;
  xfs_extlen_t blockcount;
  xfs_nlink_t refcount;
  xfs_agblock_t agbno;
  char __data[0];
};

struct trace_event_raw_xfs_refcount_double_extent_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t i1_startblock;
  xfs_extlen_t i1_blockcount;
  xfs_nlink_t i1_refcount;
  xfs_agblock_t i2_startblock;
  xfs_extlen_t i2_blockcount;
  xfs_nlink_t i2_refcount;
  char __data[0];
};

struct trace_event_raw_xfs_refcount_double_extent_at_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t i1_startblock;
  xfs_extlen_t i1_blockcount;
  xfs_nlink_t i1_refcount;
  xfs_agblock_t i2_startblock;
  xfs_extlen_t i2_blockcount;
  xfs_nlink_t i2_refcount;
  xfs_agblock_t agbno;
  char __data[0];
};

struct trace_event_raw_xfs_refcount_triple_extent_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agblock_t i1_startblock;
  xfs_extlen_t i1_blockcount;
  xfs_nlink_t i1_refcount;
  xfs_agblock_t i2_startblock;
  xfs_extlen_t i2_blockcount;
  xfs_nlink_t i2_refcount;
  xfs_agblock_t i3_startblock;
  xfs_extlen_t i3_blockcount;
  xfs_nlink_t i3_refcount;
  char __data[0];
};

struct trace_event_raw_xfs_refcount_finish_one_leftover {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  int type;
  xfs_agblock_t agbno;
  xfs_extlen_t len;
  xfs_agblock_t new_agbno;
  xfs_extlen_t new_len;
  char __data[0];
};

struct trace_event_raw_xfs_inode_error_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  int error;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_double_io_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t src_ino;
  loff_t src_isize;
  loff_t src_disize;
  loff_t src_offset;
  size_t len;
  xfs_ino_t dest_ino;
  loff_t dest_isize;
  loff_t dest_disize;
  loff_t dest_offset;
  char __data[0];
};

struct trace_event_raw_xfs_inode_irec_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  xfs_fileoff_t lblk;
  xfs_extlen_t len;
  xfs_fsblock_t pblk;
  int state;
  char __data[0];
};

struct trace_event_raw_xfs_reflink_remap_blocks {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t src_ino;
  xfs_fileoff_t src_lblk;
  xfs_filblks_t len;
  xfs_ino_t dest_ino;
  xfs_fileoff_t dest_lblk;
  char __data[0];
};

struct trace_event_raw_xfs_ioctl_clone {
  struct trace_entry ent;
  dev_t dev;
  long unsigned int src_ino;
  loff_t src_isize;
  long unsigned int dest_ino;
  loff_t dest_isize;
  char __data[0];
};

struct trace_event_raw_xfs_fsmap_class {
  struct trace_entry ent;
  dev_t dev;
  dev_t keydev;
  xfs_agnumber_t agno;
  xfs_fsblock_t bno;
  xfs_filblks_t len;
  uint64_t owner;
  uint64_t offset;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_xfs_getfsmap_class {
  struct trace_entry ent;
  dev_t dev;
  dev_t keydev;
  xfs_daddr_t block;
  xfs_daddr_t len;
  uint64_t owner;
  uint64_t offset;
  uint64_t flags;
  char __data[0];
};

struct trace_event_raw_xfs_trans_resv_calc {
  struct trace_entry ent;
  dev_t dev;
  int type;
  uint logres;
  int logcount;
  int logflags;
  char __data[0];
};

struct trace_event_raw_xfs_trans_class {
  struct trace_entry ent;
  dev_t dev;
  uint32_t tid;
  uint32_t flags;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_iunlink_update_bucket {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  unsigned int bucket;
  xfs_agino_t old_ptr;
  xfs_agino_t new_ptr;
  char __data[0];
};

struct trace_event_raw_xfs_iunlink_update_dinode {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agino_t agino;
  xfs_agino_t old_ptr;
  xfs_agino_t new_ptr;
  char __data[0];
};

struct trace_event_raw_xfs_ag_inode_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agino_t agino;
  char __data[0];
};

struct trace_event_raw_xfs_fs_corrupt_class {
  struct trace_entry ent;
  dev_t dev;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_xfs_ag_corrupt_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_xfs_inode_corrupt_class {
  struct trace_entry ent;
  dev_t dev;
  xfs_ino_t ino;
  unsigned int flags;
  char __data[0];
};

struct trace_event_raw_xfs_iwalk_ag {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agino_t startino;
  char __data[0];
};

struct trace_event_raw_xfs_iwalk_ag_rec {
  struct trace_entry ent;
  dev_t dev;
  xfs_agnumber_t agno;
  xfs_agino_t startino;
  uint64_t freemask;
  char __data[0];
};

struct trace_event_raw_xfs_pwork_init {
  struct trace_entry ent;
  dev_t dev;
  unsigned int nr_threads;
  pid_t pid;
  char __data[0];
};

struct trace_event_raw_xfs_kmem_class {
  struct trace_entry ent;
  ssize_t size;
  int flags;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_raw_xfs_check_new_dalign {
  struct trace_entry ent;
  dev_t dev;
  int new_dalign;
  xfs_ino_t sb_rootino;
  xfs_ino_t calc_rootino;
  char __data[0];
};

struct trace_event_raw_xfs_btree_commit_afakeroot {
  struct trace_entry ent;
  dev_t dev;
  xfs_btnum_t btnum;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  unsigned int levels;
  unsigned int blocks;
  char __data[0];
};

struct trace_event_raw_xfs_btree_commit_ifakeroot {
  struct trace_entry ent;
  dev_t dev;
  xfs_btnum_t btnum;
  xfs_agnumber_t agno;
  xfs_agino_t agino;
  unsigned int levels;
  unsigned int blocks;
  int whichfork;
  char __data[0];
};

struct trace_event_raw_xfs_btree_bload_level_geometry {
  struct trace_entry ent;
  dev_t dev;
  xfs_btnum_t btnum;
  unsigned int level;
  unsigned int nlevels;
  uint64_t nr_this_level;
  unsigned int nr_per_block;
  unsigned int desired_npb;
  long long unsigned int blocks;
  long long unsigned int blocks_with_extra;
  char __data[0];
};

struct trace_event_raw_xfs_btree_bload_block {
  struct trace_entry ent;
  dev_t dev;
  xfs_btnum_t btnum;
  unsigned int level;
  long long unsigned int block_idx;
  long long unsigned int nr_blocks;
  xfs_agnumber_t agno;
  xfs_agblock_t agbno;
  unsigned int nr_records;
  char __data[0];
};

struct trace_event_raw_xfs_timestamp_range_class {
  struct trace_entry ent;
  dev_t dev;
  long long int min;
  long long int max;
  char __data[0];
};

struct trace_event_raw_xfs_eofblocks_class {
  struct trace_entry ent;
  dev_t dev;
  __u32 flags;
  uint32_t uid;
  uint32_t gid;
  prid_t prid;
  __u64 min_file_size;
  long unsigned int caller_ip;
  char __data[0];
};

struct trace_event_data_offsets_xfs_attr_list_class {};

struct trace_event_data_offsets_xlog_intent_recovery_failed {};

struct trace_event_data_offsets_xfs_perag_class {};

struct trace_event_data_offsets_xfs_ag_class {};

struct trace_event_data_offsets_xfs_attr_list_node_descend {};

struct trace_event_data_offsets_xfs_bmap_class {};

struct trace_event_data_offsets_xfs_buf_class {};

struct trace_event_data_offsets_xfs_buf_flags_class {};

struct trace_event_data_offsets_xfs_buf_ioerror {};

struct trace_event_data_offsets_xfs_buf_item_class {};

struct trace_event_data_offsets_xfs_filestream_class {};

struct trace_event_data_offsets_xfs_filestream_pick {};

struct trace_event_data_offsets_xfs_lock_class {};

struct trace_event_data_offsets_xfs_inode_class {};

struct trace_event_data_offsets_xfs_filemap_fault {};

struct trace_event_data_offsets_xfs_iref_class {};

struct trace_event_data_offsets_xfs_iomap_prealloc_size {};

struct trace_event_data_offsets_xfs_irec_merge_pre {};

struct trace_event_data_offsets_xfs_irec_merge_post {};

struct trace_event_data_offsets_xfs_namespace_class {
  u32 name;
};

struct trace_event_data_offsets_xfs_rename {
  u32 src_name;
  u32 target_name;
};

struct trace_event_data_offsets_xfs_dquot_class {};

struct trace_event_data_offsets_xfs_trans_mod_dquot {};

struct trace_event_data_offsets_xfs_dqtrx_class {};

struct trace_event_data_offsets_xfs_loggrant_class {};

struct trace_event_data_offsets_xfs_log_item_class {};

struct trace_event_data_offsets_xfs_log_force {};

struct trace_event_data_offsets_xfs_ail_class {};

struct trace_event_data_offsets_xfs_log_assign_tail_lsn {};

struct trace_event_data_offsets_xfs_file_class {};

struct trace_event_data_offsets_xfs_imap_class {};

struct trace_event_data_offsets_xfs_simple_io_class {};

struct trace_event_data_offsets_xfs_itrunc_class {};

struct trace_event_data_offsets_xfs_pagecache_inval {};

struct trace_event_data_offsets_xfs_bunmap {};

struct trace_event_data_offsets_xfs_extent_busy_class {};

struct trace_event_data_offsets_xfs_extent_busy_trim {};

struct trace_event_data_offsets_xfs_agf_class {};

struct trace_event_data_offsets_xfs_free_extent {};

struct trace_event_data_offsets_xfs_alloc_class {};

struct trace_event_data_offsets_xfs_alloc_cur_check {};

struct trace_event_data_offsets_xfs_da_class {
  u32 name;
};

struct trace_event_data_offsets_xfs_attr_class {
  u32 name;
};

struct trace_event_data_offsets_xfs_dir2_space_class {};

struct trace_event_data_offsets_xfs_dir2_leafn_moveents {};

struct trace_event_data_offsets_xfs_swap_extent_class {};

struct trace_event_data_offsets_xfs_log_recover {};

struct trace_event_data_offsets_xfs_log_recover_record {};

struct trace_event_data_offsets_xfs_log_recover_item_class {};

struct trace_event_data_offsets_xfs_log_recover_buf_item_class {};

struct trace_event_data_offsets_xfs_log_recover_ino_item_class {};

struct trace_event_data_offsets_xfs_log_recover_icreate_item_class {};

struct trace_event_data_offsets_xfs_discard_class {};

struct trace_event_data_offsets_xfs_btree_cur_class {};

struct trace_event_data_offsets_xfs_defer_class {};

struct trace_event_data_offsets_xfs_defer_error_class {};

struct trace_event_data_offsets_xfs_defer_pending_class {};

struct trace_event_data_offsets_xfs_phys_extent_deferred_class {};

struct trace_event_data_offsets_xfs_map_extent_deferred_class {};

struct trace_event_data_offsets_xfs_rmap_class {};

struct trace_event_data_offsets_xfs_ag_error_class {};

struct trace_event_data_offsets_xfs_rmapbt_class {};

struct trace_event_data_offsets_xfs_ag_resv_class {};

struct trace_event_data_offsets_xfs_ag_btree_lookup_class {};

struct trace_event_data_offsets_xfs_refcount_extent_class {};

struct trace_event_data_offsets_xfs_refcount_extent_at_class {};

struct trace_event_data_offsets_xfs_refcount_double_extent_class {};

struct trace_event_data_offsets_xfs_refcount_double_extent_at_class {};

struct trace_event_data_offsets_xfs_refcount_triple_extent_class {};

struct trace_event_data_offsets_xfs_refcount_finish_one_leftover {};

struct trace_event_data_offsets_xfs_inode_error_class {};

struct trace_event_data_offsets_xfs_double_io_class {};

struct trace_event_data_offsets_xfs_inode_irec_class {};

struct trace_event_data_offsets_xfs_reflink_remap_blocks {};

struct trace_event_data_offsets_xfs_ioctl_clone {};

struct trace_event_data_offsets_xfs_fsmap_class {};

struct trace_event_data_offsets_xfs_getfsmap_class {};

struct trace_event_data_offsets_xfs_trans_resv_calc {};

struct trace_event_data_offsets_xfs_trans_class {};

struct trace_event_data_offsets_xfs_iunlink_update_bucket {};

struct trace_event_data_offsets_xfs_iunlink_update_dinode {};

struct trace_event_data_offsets_xfs_ag_inode_class {};

struct trace_event_data_offsets_xfs_fs_corrupt_class {};

struct trace_event_data_offsets_xfs_ag_corrupt_class {};

struct trace_event_data_offsets_xfs_inode_corrupt_class {};

struct trace_event_data_offsets_xfs_iwalk_ag {};

struct trace_event_data_offsets_xfs_iwalk_ag_rec {};

struct trace_event_data_offsets_xfs_pwork_init {};

struct trace_event_data_offsets_xfs_kmem_class {};

struct trace_event_data_offsets_xfs_check_new_dalign {};

struct trace_event_data_offsets_xfs_btree_commit_afakeroot {};

struct trace_event_data_offsets_xfs_btree_commit_ifakeroot {};

struct trace_event_data_offsets_xfs_btree_bload_level_geometry {};

struct trace_event_data_offsets_xfs_btree_bload_block {};

struct trace_event_data_offsets_xfs_timestamp_range_class {};

struct trace_event_data_offsets_xfs_eofblocks_class {};

typedef void (
    *btf_trace_xfs_attr_list_sf)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_sf_all)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_leaf)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_leaf_end)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_full)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_add)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_wrong_blk)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_list_notfound)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_leaf_list)(void*, struct xfs_attr_list_context*);

typedef void (
    *btf_trace_xfs_attr_node_list)(void*, struct xfs_attr_list_context*);

typedef void (*btf_trace_xlog_intent_recovery_failed)(
    void*,
    struct xfs_mount*,
    int,
    void*);

typedef void (*btf_trace_xfs_perag_get)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_perag_get_tag)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_perag_put)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_perag_set_reclaim)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_perag_clear_reclaim)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_perag_set_blockgc)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_perag_clear_blockgc)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (
    *btf_trace_xfs_read_agf)(void*, struct xfs_mount*, xfs_agnumber_t);

typedef void (
    *btf_trace_xfs_alloc_read_agf)(void*, struct xfs_mount*, xfs_agnumber_t);

typedef void (
    *btf_trace_xfs_read_agi)(void*, struct xfs_mount*, xfs_agnumber_t);

typedef void (
    *btf_trace_xfs_ialloc_read_agi)(void*, struct xfs_mount*, xfs_agnumber_t);

typedef void (*btf_trace_xfs_attr_list_node_descend)(
    void*,
    struct xfs_attr_list_context*,
    struct xfs_da_node_entry*);

typedef void (*btf_trace_xfs_iext_insert)(
    void*,
    struct xfs_inode*,
    struct xfs_iext_cursor*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_iext_remove)(
    void*,
    struct xfs_inode*,
    struct xfs_iext_cursor*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_bmap_pre_update)(
    void*,
    struct xfs_inode*,
    struct xfs_iext_cursor*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_bmap_post_update)(
    void*,
    struct xfs_inode*,
    struct xfs_iext_cursor*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_read_extent)(
    void*,
    struct xfs_inode*,
    struct xfs_iext_cursor*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_write_extent)(
    void*,
    struct xfs_inode*,
    struct xfs_iext_cursor*,
    int,
    long unsigned int);

typedef void (
    *btf_trace_xfs_buf_init)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_free)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_hold)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_rele)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_iodone)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_submit)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_lock)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_lock_done)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_trylock_fail)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_trylock)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_unlock)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_iowait)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_iowait_done)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_delwri_queue)(void*, struct xfs_buf*, long unsigned int);

typedef void (*btf_trace_xfs_buf_delwri_queued)(
    void*,
    struct xfs_buf*,
    long unsigned int);

typedef void (
    *btf_trace_xfs_buf_delwri_split)(void*, struct xfs_buf*, long unsigned int);

typedef void (*btf_trace_xfs_buf_delwri_pushbuf)(
    void*,
    struct xfs_buf*,
    long unsigned int);

typedef void (
    *btf_trace_xfs_buf_get_uncached)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_item_relse)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_iodone_async)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_buf_error_relse)(void*, struct xfs_buf*, long unsigned int);

typedef void (*btf_trace_xfs_buf_drain_buftarg)(
    void*,
    struct xfs_buf*,
    long unsigned int);

typedef void (*btf_trace_xfs_trans_read_buf_shut)(
    void*,
    struct xfs_buf*,
    long unsigned int);

typedef void (
    *btf_trace_xfs_btree_corrupt)(void*, struct xfs_buf*, long unsigned int);

typedef void (
    *btf_trace_xfs_reset_dqcounts)(void*, struct xfs_buf*, long unsigned int);

typedef void (*btf_trace_xfs_buf_find)(
    void*,
    struct xfs_buf*,
    unsigned int,
    long unsigned int);

typedef void (*btf_trace_xfs_buf_get)(
    void*,
    struct xfs_buf*,
    unsigned int,
    long unsigned int);

typedef void (*btf_trace_xfs_buf_read)(
    void*,
    struct xfs_buf*,
    unsigned int,
    long unsigned int);

typedef void (
    *btf_trace_xfs_buf_ioerror)(void*, struct xfs_buf*, int, xfs_failaddr_t);

typedef void (*btf_trace_xfs_buf_item_size)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_buf_item_size_ordered)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_buf_item_size_stale)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_buf_item_format)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_buf_item_format_stale)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_buf_item_ordered)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_buf_item_pin)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_buf_item_unpin)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_buf_item_unpin_stale)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_buf_item_release)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_buf_item_committed)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_buf_item_push)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_get_buf)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_trans_get_buf_recur)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_getsb)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_trans_getsb_recur)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_read_buf)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_trans_read_buf_recur)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_log_buf)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_brelse)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_bjoin)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_bhold)(void*, struct xfs_buf_log_item*);

typedef void (
    *btf_trace_xfs_trans_bhold_release)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_trans_binval)(void*, struct xfs_buf_log_item*);

typedef void (*btf_trace_xfs_filestream_free)(
    void*,
    struct xfs_mount*,
    xfs_ino_t,
    xfs_agnumber_t);

typedef void (*btf_trace_xfs_filestream_lookup)(
    void*,
    struct xfs_mount*,
    xfs_ino_t,
    xfs_agnumber_t);

typedef void (*btf_trace_xfs_filestream_scan)(
    void*,
    struct xfs_mount*,
    xfs_ino_t,
    xfs_agnumber_t);

typedef void (*btf_trace_xfs_filestream_pick)(
    void*,
    struct xfs_inode*,
    xfs_agnumber_t,
    xfs_extlen_t,
    int);

typedef void (*btf_trace_xfs_ilock)(
    void*,
    struct xfs_inode*,
    unsigned int,
    long unsigned int);

typedef void (*btf_trace_xfs_ilock_nowait)(
    void*,
    struct xfs_inode*,
    unsigned int,
    long unsigned int);

typedef void (*btf_trace_xfs_ilock_demote)(
    void*,
    struct xfs_inode*,
    unsigned int,
    long unsigned int);

typedef void (*btf_trace_xfs_iunlock)(
    void*,
    struct xfs_inode*,
    unsigned int,
    long unsigned int);

typedef void (*btf_trace_xfs_iget_skip)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_iget_reclaim)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_iget_reclaim_fail)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_iget_hit)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_iget_miss)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_getattr)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_setattr)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_readlink)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_inactive_symlink)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_alloc_file_space)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_free_file_space)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_zero_file_space)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_collapse_file_space)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_insert_file_space)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_readdir)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_get_acl)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_vm_bmap)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_file_ioctl)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_file_compat_ioctl)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_ioctl_setattr)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_dir_fsync)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_file_fsync)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_destroy_inode)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_update_time)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_dquot_dqalloc)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_dquot_dqdetach)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_inode_set_eofblocks_tag)(void*, struct xfs_inode*);

typedef void (
    *btf_trace_xfs_inode_clear_eofblocks_tag)(void*, struct xfs_inode*);

typedef void (
    *btf_trace_xfs_inode_free_eofblocks_invalid)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_inode_set_cowblocks_tag)(void*, struct xfs_inode*);

typedef void (
    *btf_trace_xfs_inode_clear_cowblocks_tag)(void*, struct xfs_inode*);

typedef void (
    *btf_trace_xfs_inode_free_cowblocks_invalid)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_filemap_fault)(
    void*,
    struct xfs_inode*,
    enum page_entry_size,
    bool);

typedef void (*btf_trace_xfs_iomap_prealloc_size)(
    void*,
    struct xfs_inode*,
    xfs_fsblock_t,
    int,
    unsigned int);

typedef void (*btf_trace_xfs_irec_merge_pre)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agino_t,
    uint16_t,
    xfs_agino_t,
    uint16_t);

typedef void (*btf_trace_xfs_irec_merge_post)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agino_t,
    uint16_t);

typedef void (
    *btf_trace_xfs_irele)(void*, struct xfs_inode*, long unsigned int);

typedef void (
    *btf_trace_xfs_inode_pin)(void*, struct xfs_inode*, long unsigned int);

typedef void (
    *btf_trace_xfs_inode_unpin)(void*, struct xfs_inode*, long unsigned int);

typedef void (*btf_trace_xfs_inode_unpin_nowait)(
    void*,
    struct xfs_inode*,
    long unsigned int);

typedef void (
    *btf_trace_xfs_remove)(void*, struct xfs_inode*, struct xfs_name*);

typedef void (*btf_trace_xfs_link)(void*, struct xfs_inode*, struct xfs_name*);

typedef void (
    *btf_trace_xfs_lookup)(void*, struct xfs_inode*, struct xfs_name*);

typedef void (
    *btf_trace_xfs_create)(void*, struct xfs_inode*, struct xfs_name*);

typedef void (
    *btf_trace_xfs_symlink)(void*, struct xfs_inode*, struct xfs_name*);

typedef void (*btf_trace_xfs_rename)(
    void*,
    struct xfs_inode*,
    struct xfs_inode*,
    struct xfs_name*,
    struct xfs_name*);

typedef void (*btf_trace_xfs_dqadjust)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqreclaim_want)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqreclaim_dirty)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqreclaim_busy)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqreclaim_done)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqattach_found)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqattach_get)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqalloc)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqtobp_read)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqread)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqread_fail)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqget_hit)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqget_miss)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqget_freeing)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqget_dup)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqput)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqput_free)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqrele)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqflush)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqflush_force)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_dqflush_done)(void*, struct xfs_dquot*);

typedef void (
    *btf_trace_xfs_trans_apply_dquot_deltas_before)(void*, struct xfs_dquot*);

typedef void (
    *btf_trace_xfs_trans_apply_dquot_deltas_after)(void*, struct xfs_dquot*);

typedef void (*btf_trace_xfs_trans_mod_dquot)(
    void*,
    struct xfs_trans*,
    struct xfs_dquot*,
    unsigned int,
    int64_t);

typedef void (
    *btf_trace_xfs_trans_apply_dquot_deltas)(void*, struct xfs_dqtrx*);

typedef void (*btf_trace_xfs_trans_mod_dquot_before)(void*, struct xfs_dqtrx*);

typedef void (*btf_trace_xfs_trans_mod_dquot_after)(void*, struct xfs_dqtrx*);

typedef void (
    *btf_trace_xfs_log_umount_write)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_grant_sleep)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_grant_wake)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_grant_wake_up)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_reserve)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_reserve_exit)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_regrant)(void*, struct xlog*, struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_regrant_exit)(void*, struct xlog*, struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_ticket_regrant)(
    void*,
    struct xlog*,
    struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_ticket_regrant_exit)(
    void*,
    struct xlog*,
    struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_ticket_regrant_sub)(
    void*,
    struct xlog*,
    struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_ticket_ungrant)(
    void*,
    struct xlog*,
    struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_ticket_ungrant_sub)(
    void*,
    struct xlog*,
    struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_ticket_ungrant_exit)(
    void*,
    struct xlog*,
    struct xlog_ticket*);

typedef void (
    *btf_trace_xfs_log_cil_wait)(void*, struct xlog*, struct xlog_ticket*);

typedef void (*btf_trace_xfs_log_force)(
    void*,
    struct xfs_mount*,
    xfs_lsn_t,
    long unsigned int);

typedef void (*btf_trace_xfs_ail_push)(void*, struct xfs_log_item*);

typedef void (*btf_trace_xfs_ail_pinned)(void*, struct xfs_log_item*);

typedef void (*btf_trace_xfs_ail_locked)(void*, struct xfs_log_item*);

typedef void (*btf_trace_xfs_ail_flushing)(void*, struct xfs_log_item*);

typedef void (*btf_trace_xfs_ail_insert)(
    void*,
    struct xfs_log_item*,
    xfs_lsn_t,
    xfs_lsn_t);

typedef void (
    *btf_trace_xfs_ail_move)(void*, struct xfs_log_item*, xfs_lsn_t, xfs_lsn_t);

typedef void (*btf_trace_xfs_ail_delete)(
    void*,
    struct xfs_log_item*,
    xfs_lsn_t,
    xfs_lsn_t);

typedef void (
    *btf_trace_xfs_log_assign_tail_lsn)(void*, struct xlog*, xfs_lsn_t);

typedef void (
    *btf_trace_xfs_file_buffered_read)(void*, struct kiocb*, struct iov_iter*);

typedef void (
    *btf_trace_xfs_file_direct_read)(void*, struct kiocb*, struct iov_iter*);

typedef void (
    *btf_trace_xfs_file_dax_read)(void*, struct kiocb*, struct iov_iter*);

typedef void (
    *btf_trace_xfs_file_buffered_write)(void*, struct kiocb*, struct iov_iter*);

typedef void (
    *btf_trace_xfs_file_direct_write)(void*, struct kiocb*, struct iov_iter*);

typedef void (
    *btf_trace_xfs_file_dax_write)(void*, struct kiocb*, struct iov_iter*);

typedef void (*btf_trace_xfs_reflink_bounce_dio_write)(
    void*,
    struct kiocb*,
    struct iov_iter*);

typedef void (*btf_trace_xfs_map_blocks_found)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t,
    int,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_map_blocks_alloc)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t,
    int,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_iomap_alloc)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t,
    int,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_iomap_found)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t,
    int,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_delalloc_enospc)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_unwritten_convert)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (
    *btf_trace_xfs_setfilesize)(void*, struct xfs_inode*, xfs_off_t, ssize_t);

typedef void (
    *btf_trace_xfs_zero_eof)(void*, struct xfs_inode*, xfs_off_t, ssize_t);

typedef void (*btf_trace_xfs_end_io_direct_write)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_end_io_direct_write_unwritten)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_end_io_direct_write_append)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_itruncate_extents_start)(
    void*,
    struct xfs_inode*,
    xfs_fsize_t);

typedef void (*btf_trace_xfs_itruncate_extents_end)(
    void*,
    struct xfs_inode*,
    xfs_fsize_t);

typedef void (*btf_trace_xfs_pagecache_inval)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    xfs_off_t);

typedef void (*btf_trace_xfs_bunmap)(
    void*,
    struct xfs_inode*,
    xfs_fileoff_t,
    xfs_filblks_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_extent_busy)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_extent_busy_enomem)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_extent_busy_force)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_extent_busy_reuse)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_extent_busy_clear)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_extent_busy_trim)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_agf)(
    void*,
    struct xfs_mount*,
    struct xfs_agf*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_agfl_reset)(
    void*,
    struct xfs_mount*,
    struct xfs_agf*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_free_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    enum xfs_ag_resv_type,
    int,
    int);

typedef void (*btf_trace_xfs_alloc_exact_done)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_exact_notfound)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_exact_error)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_near_nominleft)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_near_first)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_cur)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_cur_right)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_cur_left)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_cur_lookup)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_cur_lookup_done)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_near_error)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_near_noentry)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_near_busy)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_size_neither)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_size_noentry)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_size_nominleft)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_size_done)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_size_error)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_size_busy)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_small_freelist)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_small_notenough)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_small_done)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_small_error)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_vextent_badargs)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_vextent_nofix)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_vextent_noagbp)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_vextent_loopfailed)(void*, struct xfs_alloc_arg*);

typedef void (
    *btf_trace_xfs_alloc_vextent_allfailed)(void*, struct xfs_alloc_arg*);

typedef void (*btf_trace_xfs_alloc_cur_check)(
    void*,
    struct xfs_mount*,
    xfs_btnum_t,
    xfs_agblock_t,
    xfs_extlen_t,
    xfs_extlen_t,
    bool);

typedef void (*btf_trace_xfs_dir2_sf_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_create)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_lookup)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_replace)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_removename)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_toino4)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_toino8)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_sf_to_block)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_block_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_block_lookup)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_block_replace)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_block_removename)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_block_to_sf)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_block_to_leaf)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leaf_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leaf_lookup)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leaf_replace)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leaf_removename)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leaf_to_block)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leaf_to_node)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_node_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_node_lookup)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_node_replace)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_node_removename)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_node_to_leaf)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_sf_add)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_sf_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_sf_create)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_sf_lookup)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_sf_remove)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_sf_to_leaf)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_add)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_add_old)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_add_new)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_add_work)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_create)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_compact)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_get)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_lookup)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_replace)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_remove)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_removename)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_split)(void*, struct xfs_da_args*);

typedef void (
    *btf_trace_xfs_attr_leaf_split_before)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_split_after)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_clearflag)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_setflag)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_flipflags)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_to_sf)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_to_node)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_rebalance)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_unbalance)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_leaf_toosmall)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_node_addname)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_node_get)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_node_replace)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_node_removename)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_fillstate)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_refillstate)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_rmtval_get)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_rmtval_set)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_attr_rmtval_remove)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_split)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_join)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_link_before)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_link_after)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_unlink_back)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_unlink_forward)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_root_split)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_root_join)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_add)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_create)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_split)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_remove)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_rebalance)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_unbalance)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_node_toosmall)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_swap_lastblock)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_grow_inode)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_shrink_inode)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_fixhashpath)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_da_path_shift)(void*, struct xfs_da_args*);

typedef void (*btf_trace_xfs_dir2_leafn_add)(void*, struct xfs_da_args*, int);

typedef void (
    *btf_trace_xfs_dir2_leafn_remove)(void*, struct xfs_da_args*, int);

typedef void (*btf_trace_xfs_dir2_grow_inode)(void*, struct xfs_da_args*, int);

typedef void (
    *btf_trace_xfs_dir2_shrink_inode)(void*, struct xfs_da_args*, int);

typedef void (*btf_trace_xfs_dir2_leafn_moveents)(
    void*,
    struct xfs_da_args*,
    int,
    int,
    int);

typedef void (*btf_trace_xfs_swap_extent_before)(void*, struct xfs_inode*, int);

typedef void (*btf_trace_xfs_swap_extent_after)(void*, struct xfs_inode*, int);

typedef void (
    *btf_trace_xfs_log_recover)(void*, struct xlog*, xfs_daddr_t, xfs_daddr_t);

typedef void (*btf_trace_xfs_log_recover_record)(
    void*,
    struct xlog*,
    struct xlog_rec_header*,
    int);

typedef void (*btf_trace_xfs_log_recover_item_add)(
    void*,
    struct xlog*,
    struct xlog_recover*,
    struct xlog_recover_item*,
    int);

typedef void (*btf_trace_xfs_log_recover_item_add_cont)(
    void*,
    struct xlog*,
    struct xlog_recover*,
    struct xlog_recover_item*,
    int);

typedef void (*btf_trace_xfs_log_recover_item_reorder_head)(
    void*,
    struct xlog*,
    struct xlog_recover*,
    struct xlog_recover_item*,
    int);

typedef void (*btf_trace_xfs_log_recover_item_reorder_tail)(
    void*,
    struct xlog*,
    struct xlog_recover*,
    struct xlog_recover_item*,
    int);

typedef void (*btf_trace_xfs_log_recover_item_recover)(
    void*,
    struct xlog*,
    struct xlog_recover*,
    struct xlog_recover_item*,
    int);

typedef void (*btf_trace_xfs_log_recover_buf_not_cancel)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_cancel)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_cancel_add)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_cancel_ref_inc)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_recover)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_skip)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_inode_buf)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_reg_buf)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_buf_dquot_buf)(
    void*,
    struct xlog*,
    struct xfs_buf_log_format*);

typedef void (*btf_trace_xfs_log_recover_inode_recover)(
    void*,
    struct xlog*,
    struct xfs_inode_log_format*);

typedef void (*btf_trace_xfs_log_recover_inode_cancel)(
    void*,
    struct xlog*,
    struct xfs_inode_log_format*);

typedef void (*btf_trace_xfs_log_recover_inode_skip)(
    void*,
    struct xlog*,
    struct xfs_inode_log_format*);

typedef void (*btf_trace_xfs_log_recover_icreate_cancel)(
    void*,
    struct xlog*,
    struct xfs_icreate_log*);

typedef void (*btf_trace_xfs_log_recover_icreate_recover)(
    void*,
    struct xlog*,
    struct xfs_icreate_log*);

typedef void (*btf_trace_xfs_discard_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_discard_toosmall)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_discard_exclude)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_discard_busy)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_btree_updkeys)(
    void*,
    struct xfs_btree_cur*,
    int,
    struct xfs_buf*);

typedef void (*btf_trace_xfs_btree_overlapped_query_range)(
    void*,
    struct xfs_btree_cur*,
    int,
    struct xfs_buf*);

typedef void (
    *btf_trace_xfs_defer_cancel)(void*, struct xfs_trans*, long unsigned int);

typedef void (*btf_trace_xfs_defer_trans_roll)(
    void*,
    struct xfs_trans*,
    long unsigned int);

typedef void (*btf_trace_xfs_defer_trans_abort)(
    void*,
    struct xfs_trans*,
    long unsigned int);

typedef void (
    *btf_trace_xfs_defer_finish)(void*, struct xfs_trans*, long unsigned int);

typedef void (*btf_trace_xfs_defer_finish_done)(
    void*,
    struct xfs_trans*,
    long unsigned int);

typedef void (
    *btf_trace_xfs_defer_trans_roll_error)(void*, struct xfs_trans*, int);

typedef void (*btf_trace_xfs_defer_finish_error)(void*, struct xfs_trans*, int);

typedef void (*btf_trace_xfs_defer_create_intent)(
    void*,
    struct xfs_mount*,
    struct xfs_defer_pending*);

typedef void (*btf_trace_xfs_defer_cancel_list)(
    void*,
    struct xfs_mount*,
    struct xfs_defer_pending*);

typedef void (*btf_trace_xfs_defer_pending_finish)(
    void*,
    struct xfs_mount*,
    struct xfs_defer_pending*);

typedef void (*btf_trace_xfs_defer_pending_abort)(
    void*,
    struct xfs_mount*,
    struct xfs_defer_pending*);

typedef void (*btf_trace_xfs_defer_relog_intent)(
    void*,
    struct xfs_mount*,
    struct xfs_defer_pending*);

typedef void (*btf_trace_xfs_bmap_free_defer)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_bmap_free_deferred)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_agfl_free_defer)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_agfl_free_deferred)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_rmap_unmap)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    bool,
    const struct xfs_owner_info*);

typedef void (*btf_trace_xfs_rmap_unmap_done)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    bool,
    const struct xfs_owner_info*);

typedef void (*btf_trace_xfs_rmap_unmap_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_map)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    bool,
    const struct xfs_owner_info*);

typedef void (*btf_trace_xfs_rmap_map_done)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    bool,
    const struct xfs_owner_info*);

typedef void (*btf_trace_xfs_rmap_map_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_convert)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    bool,
    const struct xfs_owner_info*);

typedef void (*btf_trace_xfs_rmap_convert_done)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    bool,
    const struct xfs_owner_info*);

typedef void (*btf_trace_xfs_rmap_convert_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_convert_state)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_defer)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_ino_t,
    int,
    xfs_fileoff_t,
    xfs_filblks_t,
    xfs_exntst_t);

typedef void (*btf_trace_xfs_rmap_deferred)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_ino_t,
    int,
    xfs_fileoff_t,
    xfs_filblks_t,
    xfs_exntst_t);

typedef void (*btf_trace_xfs_rmapbt_alloc_block)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_rmapbt_free_block)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_rmap_update)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_insert)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_delete)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_insert_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_delete_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_update_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_rmap_find_left_neighbor_candidate)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_find_left_neighbor_query)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_lookup_le_range_candidate)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_lookup_le_range)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_lookup_le_range_result)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_find_right_neighbor_result)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_rmap_find_left_neighbor_result)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t,
    uint64_t,
    uint64_t,
    unsigned int);

typedef void (*btf_trace_xfs_bmap_defer)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_ino_t,
    int,
    xfs_fileoff_t,
    xfs_filblks_t,
    xfs_exntst_t);

typedef void (*btf_trace_xfs_bmap_deferred)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_ino_t,
    int,
    xfs_fileoff_t,
    xfs_filblks_t,
    xfs_exntst_t);

typedef void (*btf_trace_xfs_ag_resv_init)(
    void*,
    struct xfs_perag*,
    enum xfs_ag_resv_type,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_ag_resv_free)(
    void*,
    struct xfs_perag*,
    enum xfs_ag_resv_type,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_ag_resv_alloc_extent)(
    void*,
    struct xfs_perag*,
    enum xfs_ag_resv_type,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_ag_resv_free_extent)(
    void*,
    struct xfs_perag*,
    enum xfs_ag_resv_type,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_ag_resv_critical)(
    void*,
    struct xfs_perag*,
    enum xfs_ag_resv_type,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_ag_resv_needed)(
    void*,
    struct xfs_perag*,
    enum xfs_ag_resv_type,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_ag_resv_free_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_ag_resv_init_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcountbt_alloc_block)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcountbt_free_block)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_lookup)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_lookup_t);

typedef void (*btf_trace_xfs_refcount_get)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_update)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_insert)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_delete)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_insert_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_delete_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_update_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_increase)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_decrease)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_cow_increase)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_cow_decrease)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_merge_center_extents)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*,
    struct xfs_refcount_irec*,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_modify_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_recover_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_split_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*,
    xfs_agblock_t);

typedef void (*btf_trace_xfs_refcount_merge_left_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_merge_right_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*,
    struct xfs_refcount_irec*);

typedef void (*btf_trace_xfs_refcount_find_left_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*,
    struct xfs_refcount_irec*,
    xfs_agblock_t);

typedef void (*btf_trace_xfs_refcount_find_right_extent)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_refcount_irec*,
    struct xfs_refcount_irec*,
    xfs_agblock_t);

typedef void (*btf_trace_xfs_refcount_adjust_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_adjust_cow_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_merge_center_extents_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_modify_extent_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_split_extent_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_merge_left_extent_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_merge_right_extent_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_find_left_extent_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_find_right_extent_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_find_shared)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_find_shared_result)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_find_shared_error)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_refcount_defer)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_deferred)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_refcount_finish_one_leftover)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    int,
    xfs_agblock_t,
    xfs_extlen_t,
    xfs_agblock_t,
    xfs_extlen_t);

typedef void (*btf_trace_xfs_reflink_set_inode_flag)(void*, struct xfs_inode*);

typedef void (
    *btf_trace_xfs_reflink_unset_inode_flag)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_reflink_update_inode_size)(
    void*,
    struct xfs_inode*,
    xfs_fsize_t);

typedef void (*btf_trace_xfs_reflink_remap_blocks)(
    void*,
    struct xfs_inode*,
    xfs_fileoff_t,
    xfs_filblks_t,
    struct xfs_inode*,
    xfs_fileoff_t);

typedef void (*btf_trace_xfs_reflink_remap_range)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    xfs_off_t,
    struct xfs_inode*,
    xfs_off_t);

typedef void (*btf_trace_xfs_reflink_remap_range_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_set_inode_flag_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_update_inode_size_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_remap_blocks_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_remap_extent_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_remap_extent_src)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_remap_extent_dest)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_compare_extents)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    xfs_off_t,
    struct xfs_inode*,
    xfs_off_t);

typedef void (*btf_trace_xfs_reflink_compare_extents_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_ioctl_clone)(void*, struct inode*, struct inode*);

typedef void (*btf_trace_xfs_reflink_unshare)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_reflink_unshare_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_trim_around_shared)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_cow_found)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_cow_enospc)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_convert_cow)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_cancel_cow_range)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_reflink_end_cow)(
    void*,
    struct xfs_inode*,
    xfs_off_t,
    ssize_t);

typedef void (*btf_trace_xfs_reflink_cow_remap)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_reflink_cancel_cow_range_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_end_cow_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_reflink_cancel_cow)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_swap_extent_rmap_remap)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_swap_extent_rmap_remap_piece)(
    void*,
    struct xfs_inode*,
    struct xfs_bmbt_irec*);

typedef void (*btf_trace_xfs_swap_extent_rmap_error)(
    void*,
    struct xfs_inode*,
    int,
    long unsigned int);

typedef void (*btf_trace_xfs_fsmap_low_key)(
    void*,
    struct xfs_mount*,
    u32,
    xfs_agnumber_t,
    struct xfs_rmap_irec*);

typedef void (*btf_trace_xfs_fsmap_high_key)(
    void*,
    struct xfs_mount*,
    u32,
    xfs_agnumber_t,
    struct xfs_rmap_irec*);

typedef void (*btf_trace_xfs_fsmap_mapping)(
    void*,
    struct xfs_mount*,
    u32,
    xfs_agnumber_t,
    struct xfs_rmap_irec*);

typedef void (*btf_trace_xfs_getfsmap_low_key)(
    void*,
    struct xfs_mount*,
    struct xfs_fsmap*);

typedef void (*btf_trace_xfs_getfsmap_high_key)(
    void*,
    struct xfs_mount*,
    struct xfs_fsmap*);

typedef void (*btf_trace_xfs_getfsmap_mapping)(
    void*,
    struct xfs_mount*,
    struct xfs_fsmap*);

typedef void (*btf_trace_xfs_trans_resv_calc)(
    void*,
    struct xfs_mount*,
    unsigned int,
    struct xfs_trans_res*);

typedef void (
    *btf_trace_xfs_trans_alloc)(void*, struct xfs_trans*, long unsigned int);

typedef void (
    *btf_trace_xfs_trans_cancel)(void*, struct xfs_trans*, long unsigned int);

typedef void (
    *btf_trace_xfs_trans_commit)(void*, struct xfs_trans*, long unsigned int);

typedef void (
    *btf_trace_xfs_trans_dup)(void*, struct xfs_trans*, long unsigned int);

typedef void (
    *btf_trace_xfs_trans_free)(void*, struct xfs_trans*, long unsigned int);

typedef void (
    *btf_trace_xfs_trans_roll)(void*, struct xfs_trans*, long unsigned int);

typedef void (
    *btf_trace_xfs_trans_add_item)(void*, struct xfs_trans*, long unsigned int);

typedef void (*btf_trace_xfs_trans_commit_items)(
    void*,
    struct xfs_trans*,
    long unsigned int);

typedef void (*btf_trace_xfs_trans_free_items)(
    void*,
    struct xfs_trans*,
    long unsigned int);

typedef void (*btf_trace_xfs_iunlink_update_bucket)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    unsigned int,
    xfs_agino_t,
    xfs_agino_t);

typedef void (*btf_trace_xfs_iunlink_update_dinode)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agino_t,
    xfs_agino_t,
    xfs_agino_t);

typedef void (*btf_trace_xfs_iunlink)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_iunlink_remove)(void*, struct xfs_inode*);

typedef void (*btf_trace_xfs_iunlink_map_prev_fallback)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t);

typedef void (
    *btf_trace_xfs_fs_mark_sick)(void*, struct xfs_mount*, unsigned int);

typedef void (
    *btf_trace_xfs_fs_mark_healthy)(void*, struct xfs_mount*, unsigned int);

typedef void (*btf_trace_xfs_fs_unfixed_corruption)(
    void*,
    struct xfs_mount*,
    unsigned int);

typedef void (
    *btf_trace_xfs_rt_mark_sick)(void*, struct xfs_mount*, unsigned int);

typedef void (
    *btf_trace_xfs_rt_mark_healthy)(void*, struct xfs_mount*, unsigned int);

typedef void (*btf_trace_xfs_rt_unfixed_corruption)(
    void*,
    struct xfs_mount*,
    unsigned int);

typedef void (*btf_trace_xfs_ag_mark_sick)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    unsigned int);

typedef void (*btf_trace_xfs_ag_mark_healthy)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    unsigned int);

typedef void (*btf_trace_xfs_ag_unfixed_corruption)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    unsigned int);

typedef void (
    *btf_trace_xfs_inode_mark_sick)(void*, struct xfs_inode*, unsigned int);

typedef void (
    *btf_trace_xfs_inode_mark_healthy)(void*, struct xfs_inode*, unsigned int);

typedef void (*btf_trace_xfs_iwalk_ag)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    xfs_agino_t);

typedef void (*btf_trace_xfs_iwalk_ag_rec)(
    void*,
    struct xfs_mount*,
    xfs_agnumber_t,
    struct xfs_inobt_rec_incore*);

typedef void (
    *btf_trace_xfs_pwork_init)(void*, struct xfs_mount*, unsigned int, pid_t);

typedef void (*btf_trace_kmem_alloc)(void*, ssize_t, int, long unsigned int);

typedef void (*btf_trace_kmem_alloc_io)(void*, ssize_t, int, long unsigned int);

typedef void (
    *btf_trace_kmem_alloc_large)(void*, ssize_t, int, long unsigned int);

typedef void (
    *btf_trace_xfs_check_new_dalign)(void*, struct xfs_mount*, int, xfs_ino_t);

typedef void (
    *btf_trace_xfs_btree_commit_afakeroot)(void*, struct xfs_btree_cur*);

typedef void (
    *btf_trace_xfs_btree_commit_ifakeroot)(void*, struct xfs_btree_cur*);

typedef void (*btf_trace_xfs_btree_bload_level_geometry)(
    void*,
    struct xfs_btree_cur*,
    unsigned int,
    uint64_t,
    unsigned int,
    unsigned int,
    uint64_t,
    uint64_t);

typedef void (*btf_trace_xfs_btree_bload_block)(
    void*,
    struct xfs_btree_cur*,
    unsigned int,
    uint64_t,
    uint64_t,
    union xfs_btree_ptr*,
    unsigned int);

typedef void (*btf_trace_xfs_inode_timestamp_range)(
    void*,
    struct xfs_mount*,
    long long int,
    long long int);

typedef void (*btf_trace_xfs_quota_expiry_range)(
    void*,
    struct xfs_mount*,
    long long int,
    long long int);

typedef void (*btf_trace_xfs_ioc_free_eofblocks)(
    void*,
    struct xfs_mount*,
    struct xfs_eofblocks*,
    long unsigned int);

typedef void (*btf_trace_xfs_blockgc_free_space)(
    void*,
    struct xfs_mount*,
    struct xfs_eofblocks*,
    long unsigned int);

struct xfs_ag_geometry {
  uint32_t ag_number;
  uint32_t ag_length;
  uint32_t ag_freeblks;
  uint32_t ag_icount;
  uint32_t ag_ifree;
  uint32_t ag_sick;
  uint32_t ag_checked;
  uint32_t ag_flags;
  uint64_t ag_reserved[12];
};

typedef struct xfs_sb xfs_sb_t;

struct xfs_dsb {
  __be32 sb_magicnum;
  __be32 sb_blocksize;
  __be64 sb_dblocks;
  __be64 sb_rblocks;
  __be64 sb_rextents;
  uuid_t sb_uuid;
  __be64 sb_logstart;
  __be64 sb_rootino;
  __be64 sb_rbmino;
  __be64 sb_rsumino;
  __be32 sb_rextsize;
  __be32 sb_agblocks;
  __be32 sb_agcount;
  __be32 sb_rbmblocks;
  __be32 sb_logblocks;
  __be16 sb_versionnum;
  __be16 sb_sectsize;
  __be16 sb_inodesize;
  __be16 sb_inopblock;
  char sb_fname[12];
  __u8 sb_blocklog;
  __u8 sb_sectlog;
  __u8 sb_inodelog;
  __u8 sb_inopblog;
  __u8 sb_agblklog;
  __u8 sb_rextslog;
  __u8 sb_inprogress;
  __u8 sb_imax_pct;
  __be64 sb_icount;
  __be64 sb_ifree;
  __be64 sb_fdblocks;
  __be64 sb_frextents;
  __be64 sb_uquotino;
  __be64 sb_gquotino;
  __be16 sb_qflags;
  __u8 sb_flags;
  __u8 sb_shared_vn;
  __be32 sb_inoalignmt;
  __be32 sb_unit;
  __be32 sb_width;
  __u8 sb_dirblklog;
  __u8 sb_logsectlog;
  __be16 sb_logsectsize;
  __be32 sb_logsunit;
  __be32 sb_features2;
  __be32 sb_bad_features2;
  __be32 sb_features_compat;
  __be32 sb_features_ro_compat;
  __be32 sb_features_incompat;
  __be32 sb_features_log_incompat;
  __le32 sb_crc;
  __be32 sb_spino_align;
  __be64 sb_pquotino;
  __be64 sb_lsn;
  uuid_t sb_meta_uuid;
};

struct xfs_agi {
  __be32 agi_magicnum;
  __be32 agi_versionnum;
  __be32 agi_seqno;
  __be32 agi_length;
  __be32 agi_count;
  __be32 agi_root;
  __be32 agi_level;
  __be32 agi_freecount;
  __be32 agi_newino;
  __be32 agi_dirino;
  __be32 agi_unlinked[64];
  uuid_t agi_uuid;
  __be32 agi_crc;
  __be32 agi_pad32;
  __be64 agi_lsn;
  __be32 agi_free_root;
  __be32 agi_free_level;
  __be32 agi_iblocks;
  __be32 agi_fblocks;
};

struct xfs_agfl {
  __be32 agfl_magicnum;
  __be32 agfl_seqno;
  uuid_t agfl_uuid;
  __be64 agfl_lsn;
  __be32 agfl_crc;
} __attribute__((packed));

typedef struct xfs_alloc_rec xfs_alloc_rec_t;

struct aghdr_init_data {
  xfs_agblock_t agno;
  xfs_extlen_t agsize;
  struct list_head buffer_list;
  xfs_rfsblock_t nfree;
  xfs_daddr_t daddr;
  size_t numblks;
  xfs_btnum_t type;
};

typedef void (*aghdr_init_work_f)(
    struct xfs_mount*,
    struct xfs_buf*,
    struct aghdr_init_data*);

struct xfs_aghdr_grow_data {
  xfs_daddr_t daddr;
  size_t numblks;
  const struct xfs_buf_ops* ops;
  aghdr_init_work_f work;
  xfs_btnum_t type;
  bool need_init;
};

enum xfs_blft {
  XFS_BLFT_UNKNOWN_BUF = 0,
  XFS_BLFT_UDQUOT_BUF = 1,
  XFS_BLFT_PDQUOT_BUF = 2,
  XFS_BLFT_GDQUOT_BUF = 3,
  XFS_BLFT_BTREE_BUF = 4,
  XFS_BLFT_AGF_BUF = 5,
  XFS_BLFT_AGFL_BUF = 6,
  XFS_BLFT_AGI_BUF = 7,
  XFS_BLFT_DINO_BUF = 8,
  XFS_BLFT_SYMLINK_BUF = 9,
  XFS_BLFT_DIR_BLOCK_BUF = 10,
  XFS_BLFT_DIR_DATA_BUF = 11,
  XFS_BLFT_DIR_FREE_BUF = 12,
  XFS_BLFT_DIR_LEAF1_BUF = 13,
  XFS_BLFT_DIR_LEAFN_BUF = 14,
  XFS_BLFT_DA_NODE_BUF = 15,
  XFS_BLFT_ATTR_LEAF_BUF = 16,
  XFS_BLFT_ATTR_RMT_BUF = 17,
  XFS_BLFT_SB_BUF = 18,
  XFS_BLFT_RTBITMAP_BUF = 19,
  XFS_BLFT_RTSUMMARY_BUF = 20,
  XFS_BLFT_MAX_BUF = 32,
};

typedef struct xfs_mount xfs_mount_t;

typedef struct xfs_perag xfs_perag_t;

typedef struct xfs_btree_cur xfs_btree_cur_t;

typedef struct xfs_alloc_arg xfs_alloc_arg_t;

typedef int (*xfs_alloc_query_range_fn)(
    struct xfs_btree_cur*,
    struct xfs_alloc_rec_incore*,
    void*);

typedef int (*xfs_agfl_walk_fn)(struct xfs_mount*, xfs_agblock_t, void*);

struct xfs_log_vec {
  struct xfs_log_vec* lv_next;
  int lv_niovecs;
  struct xfs_log_iovec* lv_iovecp;
  struct xfs_log_item* lv_item;
  char* lv_buf;
  int lv_bytes;
  int lv_buf_len;
  int lv_size;
};

typedef struct xfs_trans xfs_trans_t;

struct xfs_extent_free_item {
  xfs_fsblock_t xefi_startblock;
  xfs_extlen_t xefi_blockcount;
  bool xefi_skip_discard;
  struct list_head xefi_list;
  struct xfs_owner_info xefi_oinfo;
};

struct xfs_alloc_cur {
  struct xfs_btree_cur* cnt;
  struct xfs_btree_cur* bnolt;
  struct xfs_btree_cur* bnogt;
  xfs_extlen_t cur_len;
  xfs_agblock_t rec_bno;
  xfs_extlen_t rec_len;
  xfs_agblock_t bno;
  xfs_extlen_t len;
  xfs_extlen_t diff;
  unsigned int busy_gen;
  bool busy;
};

struct xfs_alloc_query_range_info {
  xfs_alloc_query_range_fn fn;
  void* priv;
};

typedef struct xfs_alloc_rec_incore xfs_alloc_rec_incore_t;

struct xfs_attr_sf_hdr {
  __be16 totsize;
  __u8 count;
  __u8 padding;
};

struct xfs_attr_sf_entry {
  uint8_t namelen;
  uint8_t valuelen;
  uint8_t flags;
  uint8_t nameval[0];
};

struct xfs_attr_shortform {
  struct xfs_attr_sf_hdr hdr;
  struct xfs_attr_sf_entry list[1];
};

typedef struct xfs_da_args xfs_da_args_t;

struct xfs_da_state_blk {
  struct xfs_buf* bp;
  xfs_dablk_t blkno;
  xfs_daddr_t disk_blkno;
  int index;
  xfs_dahash_t hashval;
  int magic;
};

typedef struct xfs_da_state_blk xfs_da_state_blk_t;

struct xfs_da_state_path {
  int active;
  xfs_da_state_blk_t blk[5];
};

typedef struct xfs_da_state_path xfs_da_state_path_t;

struct xfs_da_state {
  xfs_da_args_t* args;
  struct xfs_mount* mp;
  xfs_da_state_path_t path;
  xfs_da_state_path_t altpath;
  unsigned char inleaf;
  unsigned char extravalid;
  unsigned char extraafter;
  xfs_da_state_blk_t extrablk;
};

typedef struct xfs_da_state xfs_da_state_t;

typedef unsigned int xfs_km_flags_t;

struct xfs_da_blkinfo {
  __be32 forw;
  __be32 back;
  __be16 magic;
  __be16 pad;
};

typedef struct xfs_da_blkinfo xfs_da_blkinfo_t;

struct xfs_da3_blkinfo {
  struct xfs_da_blkinfo hdr;
  __be32 crc;
  __be64 blkno;
  __be64 lsn;
  uuid_t uuid;
  __be64 owner;
};

struct xfs_da_node_hdr {
  struct xfs_da_blkinfo info;
  __be16 __count;
  __be16 __level;
};

struct xfs_da_intnode {
  struct xfs_da_node_hdr hdr;
  struct xfs_da_node_entry __btree[0];
};

struct xfs_attr_leaf_map {
  __be16 base;
  __be16 size;
};

typedef struct xfs_attr_leaf_map xfs_attr_leaf_map_t;

struct xfs_attr_leaf_hdr {
  xfs_da_blkinfo_t info;
  __be16 count;
  __be16 usedbytes;
  __be16 firstused;
  __u8 holes;
  __u8 pad1;
  xfs_attr_leaf_map_t freemap[3];
};

typedef struct xfs_attr_leaf_hdr xfs_attr_leaf_hdr_t;

struct xfs_attr_leaf_entry {
  __be32 hashval;
  __be16 nameidx;
  __u8 flags;
  __u8 pad2;
};

typedef struct xfs_attr_leaf_entry xfs_attr_leaf_entry_t;

struct xfs_attr_leaf_name_local {
  __be16 valuelen;
  __u8 namelen;
  __u8 nameval[1];
};

typedef struct xfs_attr_leaf_name_local xfs_attr_leaf_name_local_t;

struct xfs_attr_leaf_name_remote {
  __be32 valueblk;
  __be32 valuelen;
  __u8 namelen;
  __u8 name[1];
};

typedef struct xfs_attr_leaf_name_remote xfs_attr_leaf_name_remote_t;

struct xfs_attr_leafblock {
  xfs_attr_leaf_hdr_t hdr;
  xfs_attr_leaf_entry_t entries[1];
};

typedef struct xfs_attr_leafblock xfs_attr_leafblock_t;

struct xfs_attr3_leaf_hdr {
  struct xfs_da3_blkinfo info;
  __be16 count;
  __be16 usedbytes;
  __be16 firstused;
  __u8 holes;
  __u8 pad1;
  struct xfs_attr_leaf_map freemap[3];
  __be32 pad2;
};

struct xfs_attr3_leafblock {
  struct xfs_attr3_leaf_hdr hdr;
  struct xfs_attr_leaf_entry entries[1];
};

struct xfs_da3_icnode_hdr {
  uint32_t forw;
  uint32_t back;
  uint16_t magic;
  uint16_t count;
  uint16_t level;
  struct xfs_da_node_entry* btree;
};

struct xfs_attr3_icleaf_hdr {
  uint32_t forw;
  uint32_t back;
  uint16_t magic;
  uint16_t count;
  uint16_t usedbytes;
  uint32_t firstused;
  __u8 holes;
  struct {
    uint16_t base;
    uint16_t size;
  } freemap[3];
};

struct xfs_attr3_rmt_hdr {
  __be32 rm_magic;
  __be32 rm_offset;
  __be32 rm_bytes;
  __be32 rm_crc;
  uuid_t rm_uuid;
  __be64 rm_owner;
  __be64 rm_blkno;
  __be64 rm_lsn;
};

typedef s16 int16_t;

typedef int16_t xfs_aextnum_t;

typedef struct xfs_bmbt_irec xfs_bmbt_irec_t;

typedef struct xfs_bmbt_key xfs_bmbt_key_t;

typedef __be64 xfs_bmbt_ptr_t;

typedef struct xfs_inode xfs_inode_t;

struct xfs_bmalloca {
  struct xfs_trans* tp;
  struct xfs_inode* ip;
  struct xfs_bmbt_irec prev;
  struct xfs_bmbt_irec got;
  xfs_fileoff_t offset;
  xfs_extlen_t length;
  xfs_fsblock_t blkno;
  struct xfs_btree_cur* cur;
  struct xfs_iext_cursor icur;
  int nallocs;
  int logflags;
  xfs_extlen_t total;
  xfs_extlen_t minlen;
  xfs_extlen_t minleft;
  bool eof;
  bool wasdel;
  bool aeof;
  bool conv;
  int datatype;
  int flags;
};

enum xfs_bmap_intent_type {
  XFS_BMAP_MAP = 1,
  XFS_BMAP_UNMAP = 2,
};

struct xfs_bmap_intent {
  struct list_head bi_list;
  enum xfs_bmap_intent_type bi_type;
  struct xfs_inode* bi_owner;
  int bi_whichfork;
  struct xfs_bmbt_irec bi_bmap;
};

struct xfs_iread_state {
  struct xfs_iext_cursor icur;
  xfs_extnum_t loaded;
};

struct xfs_bmdr_block {
  __be16 bb_level;
  __be16 bb_numrecs;
};

typedef struct xfs_bmdr_block xfs_bmdr_block_t;

typedef uint64_t xfs_bmbt_rec_base_t;

typedef __be64 xfs_bmdr_ptr_t;

typedef int (*xfs_btree_query_range_fn)(
    struct xfs_btree_cur*,
    union xfs_btree_rec*,
    void*);

typedef int (*xfs_btree_visit_blocks_fn)(struct xfs_btree_cur*, int, void*);

struct xfs_btree_split_args {
  struct xfs_btree_cur* cur;
  int level;
  union xfs_btree_ptr* ptrp;
  union xfs_btree_key* key;
  struct xfs_btree_cur** curp;
  int* stat;
  int result;
  bool kswapd;
  struct completion* done;
  struct work_struct work;
};

struct xfs_btree_block_change_owner_info {
  uint64_t new_owner;
  struct list_head* buffer_list;
};

typedef int (*xfs_btree_bload_get_record_fn)(struct xfs_btree_cur*, void*);

typedef int (*xfs_btree_bload_claim_block_fn)(
    struct xfs_btree_cur*,
    union xfs_btree_ptr*,
    void*);

typedef size_t (
    *xfs_btree_bload_iroot_size_fn)(struct xfs_btree_cur*, unsigned int, void*);

struct xfs_btree_bload {
  xfs_btree_bload_get_record_fn get_record;
  xfs_btree_bload_claim_block_fn claim_block;
  xfs_btree_bload_iroot_size_fn iroot_size;
  uint64_t nr_records;
  int leaf_slack;
  int node_slack;
  uint64_t nr_blocks;
  unsigned int btree_height;
};

struct xfs_da3_node_hdr {
  struct xfs_da3_blkinfo info;
  __be16 __count;
  __be16 __level;
  __be32 __pad32;
};

typedef struct xfs_da_intnode xfs_da_intnode_t;

struct xfs_da3_intnode {
  struct xfs_da3_node_hdr hdr;
  struct xfs_da_node_entry __btree[0];
};

struct xfs_dir2_leaf_hdr {
  xfs_da_blkinfo_t info;
  __be16 count;
  __be16 stale;
};

typedef struct xfs_dir2_leaf_hdr xfs_dir2_leaf_hdr_t;

struct xfs_dir2_leaf_entry {
  __be32 hashval;
  __be32 address;
};

typedef struct xfs_dir2_leaf_entry xfs_dir2_leaf_entry_t;

struct xfs_dir2_leaf {
  xfs_dir2_leaf_hdr_t hdr;
  xfs_dir2_leaf_entry_t __ents[0];
};

typedef struct xfs_dir2_leaf xfs_dir2_leaf_t;

struct xfs_dir3_icleaf_hdr {
  uint32_t forw;
  uint32_t back;
  uint16_t magic;
  uint16_t count;
  uint16_t stale;
  struct xfs_dir2_leaf_entry* ents;
};

struct xfs_defer_capture {
  struct list_head dfc_list;
  struct list_head dfc_dfops;
  unsigned int dfc_tpflags;
  unsigned int dfc_blkres;
  unsigned int dfc_rtxres;
  unsigned int dfc_logres;
  struct xfs_inode* dfc_capture_ip;
};

struct xfs_inode_log_item {
  struct xfs_log_item ili_item;
  struct xfs_inode* ili_inode;
  short unsigned int ili_lock_flags;
  spinlock_t ili_lock;
  unsigned int ili_last_fields;
  unsigned int ili_fields;
  unsigned int ili_fsync_fields;
  xfs_lsn_t ili_flush_lsn;
  xfs_lsn_t ili_last_lsn;
};

typedef xfs_off_t xfs_dir2_off_t;

typedef uint32_t xfs_dir2_db_t;

struct xfs_dir2_sf_hdr {
  uint8_t count;
  uint8_t i8count;
  uint8_t parent[8];
};

typedef struct xfs_dir2_sf_hdr xfs_dir2_sf_hdr_t;

typedef uint32_t xfs_dir2_dataptr_t;

struct xfs_dir2_sf_entry {
  __u8 namelen;
  __u8 offset[2];
  __u8 name[0];
};

typedef struct xfs_dir2_sf_entry xfs_dir2_sf_entry_t;

struct xfs_dir2_data_free {
  __be16 offset;
  __be16 length;
};

typedef struct xfs_dir2_data_free xfs_dir2_data_free_t;

struct xfs_dir2_data_hdr {
  __be32 magic;
  xfs_dir2_data_free_t bestfree[3];
};

typedef struct xfs_dir2_data_hdr xfs_dir2_data_hdr_t;

struct xfs_dir3_blk_hdr {
  __be32 magic;
  __be32 crc;
  __be64 blkno;
  __be64 lsn;
  uuid_t uuid;
  __be64 owner;
};

struct xfs_dir2_data_entry {
  __be64 inumber;
  __u8 namelen;
  __u8 name[0];
};

typedef struct xfs_dir2_data_entry xfs_dir2_data_entry_t;

struct xfs_dir2_data_unused {
  __be16 freetag;
  __be16 length;
  __be16 tag;
};

typedef struct xfs_dir2_data_unused xfs_dir2_data_unused_t;

struct xfs_dir2_leaf_tail {
  __be32 bestcount;
};

typedef struct xfs_dir2_leaf_tail xfs_dir2_leaf_tail_t;

struct xfs_dir2_block_tail {
  __be32 count;
  __be32 stale;
};

typedef struct xfs_dir2_block_tail xfs_dir2_block_tail_t;

struct xfs_dir3_data_hdr {
  struct xfs_dir3_blk_hdr hdr;
  xfs_dir2_data_free_t best_free[3];
  __be32 pad;
};

typedef uint16_t xfs_dir2_data_off_t;

struct xfs_dir3_leaf_hdr {
  struct xfs_da3_blkinfo info;
  __be16 count;
  __be16 stale;
  __be32 pad;
};

struct xfs_dir3_leaf {
  struct xfs_dir3_leaf_hdr hdr;
  struct xfs_dir2_leaf_entry __ents[0];
};

struct xfs_dir3_icfree_hdr {
  uint32_t magic;
  uint32_t firstdb;
  uint32_t nvalid;
  uint32_t nused;
  __be16* bests;
};

struct xfs_dir2_free_hdr {
  __be32 magic;
  __be32 firstdb;
  __be32 nvalid;
  __be32 nused;
};

typedef struct xfs_dir2_free_hdr xfs_dir2_free_hdr_t;

struct xfs_dir2_free {
  xfs_dir2_free_hdr_t hdr;
  __be16 bests[0];
};

typedef struct xfs_dir2_free xfs_dir2_free_t;

struct xfs_dir3_free_hdr {
  struct xfs_dir3_blk_hdr hdr;
  __be32 firstdb;
  __be32 nvalid;
  __be32 nused;
  __be32 pad;
};

struct xfs_dir3_free {
  struct xfs_dir3_free_hdr hdr;
  __be16 bests[0];
};

struct xfs_disk_dquot {
  __be16 d_magic;
  __u8 d_version;
  __u8 d_type;
  __be32 d_id;
  __be64 d_blk_hardlimit;
  __be64 d_blk_softlimit;
  __be64 d_ino_hardlimit;
  __be64 d_ino_softlimit;
  __be64 d_bcount;
  __be64 d_icount;
  __be32 d_itimer;
  __be32 d_btimer;
  __be16 d_iwarns;
  __be16 d_bwarns;
  __be32 d_pad0;
  __be64 d_rtb_hardlimit;
  __be64 d_rtb_softlimit;
  __be64 d_rtbcount;
  __be32 d_rtbtimer;
  __be16 d_rtbwarns;
  __be16 d_pad;
};

struct xfs_dqblk {
  struct xfs_disk_dquot dd_diskdq;
  char dd_fill[4];
  __be32 dd_crc;
  __be64 dd_lsn;
  uuid_t dd_uuid;
};

struct xfs_quota_limits {
  xfs_qcnt_t hard;
  xfs_qcnt_t soft;
  time64_t time;
  xfs_qwarncnt_t warn;
};

struct xfs_def_quota {
  struct xfs_quota_limits blk;
  struct xfs_quota_limits ino;
  struct xfs_quota_limits rtb;
};

struct xfs_quotainfo {
  struct xarray qi_uquota_tree;
  struct xarray qi_gquota_tree;
  struct xarray qi_pquota_tree;
  struct mutex qi_tree_lock;
  struct xfs_inode* qi_uquotaip;
  struct xfs_inode* qi_gquotaip;
  struct xfs_inode* qi_pquotaip;
  struct list_lru qi_lru;
  int qi_dquots;
  struct mutex qi_quotaofflock;
  xfs_filblks_t qi_dqchunklen;
  uint qi_dqperchunk;
  struct xfs_def_quota qi_usr_default;
  struct xfs_def_quota qi_grp_default;
  struct xfs_def_quota qi_prj_default;
  struct shrinker qi_shrinker;
  time64_t qi_expiry_min;
  time64_t qi_expiry_max;
};

struct xfs_dquot_acct {
  struct xfs_dqtrx dqs[6];
};

enum {
  XFS_QM_TRANS_USR = 0,
  XFS_QM_TRANS_GRP = 1,
  XFS_QM_TRANS_PRJ = 2,
  XFS_QM_TRANS_DQTYPES = 3,
};

typedef __be64 xfs_timestamp_t;

struct xfs_dinode {
  __be16 di_magic;
  __be16 di_mode;
  __u8 di_version;
  __u8 di_format;
  __be16 di_onlink;
  __be32 di_uid;
  __be32 di_gid;
  __be32 di_nlink;
  __be16 di_projid_lo;
  __be16 di_projid_hi;
  __u8 di_pad[6];
  __be16 di_flushiter;
  xfs_timestamp_t di_atime;
  xfs_timestamp_t di_mtime;
  xfs_timestamp_t di_ctime;
  __be64 di_size;
  __be64 di_nblocks;
  __be32 di_extsize;
  __be32 di_nextents;
  __be16 di_anextents;
  __u8 di_forkoff;
  __s8 di_aformat;
  __be32 di_dmevmask;
  __be16 di_dmstate;
  __be16 di_flags;
  __be32 di_gen;
  __be32 di_next_unlinked;
  __le32 di_crc;
  __be64 di_changecount;
  __be64 di_lsn;
  __be64 di_flags2;
  __be32 di_cowextsize;
  __u8 di_pad2[12];
  xfs_timestamp_t di_crtime;
  __be64 di_ino;
  uuid_t di_uuid;
};

typedef struct xfs_inobt_rec_incore xfs_inobt_rec_incore_t;

struct xfs_icluster {
  bool deleted;
  xfs_ino_t first_ino;
  uint64_t alloc;
};

struct xfs_ialloc_count_inodes {
  xfs_agino_t count;
  xfs_agino_t freecount;
};

struct xfs_iext_rec {
  uint64_t lo;
  uint64_t hi;
};

struct xfs_iext_leaf {
  struct xfs_iext_rec recs[15];
  struct xfs_iext_leaf* prev;
  struct xfs_iext_leaf* next;
};

enum {
  NODE_SIZE = 256,
  KEYS_PER_NODE = 16,
  RECS_PER_LEAF = 15,
};

struct xfs_iext_node {
  uint64_t keys[16];
  void* ptrs[16];
};

typedef __u32 xfs_dev_t;

typedef struct xfs_dinode xfs_dinode_t;

struct xfs_legacy_timestamp {
  __be32 t_sec;
  __be32 t_nsec;
};

typedef int (*xfs_rmap_query_range_fn)(
    struct xfs_btree_cur*,
    struct xfs_rmap_irec*,
    void*);

enum xfs_rmap_intent_type {
  XFS_RMAP_MAP = 0,
  XFS_RMAP_MAP_SHARED = 1,
  XFS_RMAP_UNMAP = 2,
  XFS_RMAP_UNMAP_SHARED = 3,
  XFS_RMAP_CONVERT = 4,
  XFS_RMAP_CONVERT_SHARED = 5,
  XFS_RMAP_ALLOC = 6,
  XFS_RMAP_FREE = 7,
};

struct xfs_rmap_intent {
  struct list_head ri_list;
  enum xfs_rmap_intent_type ri_type;
  uint64_t ri_owner;
  int ri_whichfork;
  struct xfs_bmbt_irec ri_bmap;
};

struct xfs_find_left_neighbor_info {
  struct xfs_rmap_irec high;
  struct xfs_rmap_irec* irec;
  int* stat;
};

struct xfs_rmap_query_range_info {
  xfs_rmap_query_range_fn fn;
  void* priv;
};

struct xfs_rmap_key_state {
  uint64_t owner;
  uint64_t offset;
  unsigned int flags;
};

enum xfs_refcount_intent_type {
  XFS_REFCOUNT_INCREASE = 1,
  XFS_REFCOUNT_DECREASE = 2,
  XFS_REFCOUNT_ALLOC_COW = 3,
  XFS_REFCOUNT_FREE_COW = 4,
};

struct xfs_refcount_intent {
  struct list_head ri_list;
  enum xfs_refcount_intent_type ri_type;
  xfs_fsblock_t ri_startblock;
  xfs_extlen_t ri_blockcount;
};

enum xfs_refc_adjust_op {
  XFS_REFCOUNT_ADJUST_INCREASE = 1,
  XFS_REFCOUNT_ADJUST_DECREASE = 4294967295,
  XFS_REFCOUNT_ADJUST_COW_ALLOC = 0,
  XFS_REFCOUNT_ADJUST_COW_FREE = 4294967295,
};

struct xfs_refcount_recovery {
  struct list_head rr_list;
  struct xfs_refcount_irec rr_rrec;
};

struct xfs_fsop_geom {
  __u32 blocksize;
  __u32 rtextsize;
  __u32 agblocks;
  __u32 agcount;
  __u32 logblocks;
  __u32 sectsize;
  __u32 inodesize;
  __u32 imaxpct;
  __u64 datablocks;
  __u64 rtblocks;
  __u64 rtextents;
  __u64 logstart;
  unsigned char uuid[16];
  __u32 sunit;
  __u32 swidth;
  __s32 version;
  __u32 flags;
  __u32 logsectsize;
  __u32 rtsectsize;
  __u32 dirblocksize;
  __u32 logsunit;
  uint32_t sick;
  uint32_t checked;
  __u64 reserved[17];
};

typedef struct xfs_dsb xfs_dsb_t;

struct xfs_dsymlink_hdr {
  __be32 sl_magic;
  __be32 sl_offset;
  __be32 sl_bytes;
  __be32 sl_crc;
  uuid_t sl_uuid;
  __be64 sl_owner;
  __be64 sl_blkno;
  __be64 sl_lsn;
};

struct xfs_ail {
  struct xfs_mount* ail_mount;
  struct task_struct* ail_task;
  struct list_head ail_head;
  xfs_lsn_t ail_target;
  xfs_lsn_t ail_target_prev;
  struct list_head ail_cursors;
  spinlock_t ail_lock;
  xfs_lsn_t ail_last_pushed_lsn;
  int ail_log_flush;
  struct list_head ail_buf_list;
  wait_queue_head_t ail_empty;
};

typedef int32_t xfs_suminfo_t;

typedef uint32_t xfs_rtword_t;

typedef int64_t xfs_srtblock_t;

struct xfs_rtalloc_rec {
  xfs_rtblock_t ar_startext;
  xfs_rtblock_t ar_extcount;
};

typedef int (*xfs_rtalloc_query_range_fn)(
    struct xfs_trans*,
    struct xfs_rtalloc_rec*,
    void*);

struct xfs_writepage_ctx {
  struct iomap_writepage_ctx ctx;
  unsigned int data_seq;
  unsigned int cow_seq;
};

struct xfs_attr_sf_sort {
  uint8_t entno;
  uint8_t namelen;
  uint8_t valuelen;
  uint8_t flags;
  xfs_dahash_t hash;
  unsigned char* name;
};

typedef struct xfs_attr_sf_sort xfs_attr_sf_sort_t;

typedef uint64_t xfs_ufsize_t;

struct getbmapx {
  __s64 bmv_offset;
  __s64 bmv_block;
  __s64 bmv_length;
  __s32 bmv_count;
  __s32 bmv_entries;
  __s32 bmv_iflags;
  __s32 bmv_oflags;
  __s32 bmv_unused1;
  __s32 bmv_unused2;
};

struct xfs_bstime {
  __kernel_long_t tv_sec;
  __s32 tv_nsec;
};

typedef struct xfs_bstime xfs_bstime_t;

struct xfs_bstat {
  __u64 bs_ino;
  __u16 bs_mode;
  __u16 bs_nlink;
  __u32 bs_uid;
  __u32 bs_gid;
  __u32 bs_rdev;
  __s32 bs_blksize;
  __s64 bs_size;
  xfs_bstime_t bs_atime;
  xfs_bstime_t bs_mtime;
  xfs_bstime_t bs_ctime;
  int64_t bs_blocks;
  __u32 bs_xflags;
  __s32 bs_extsize;
  __s32 bs_extents;
  __u32 bs_gen;
  __u16 bs_projid_lo;
  __u16 bs_forkoff;
  __u16 bs_projid_hi;
  uint16_t bs_sick;
  uint16_t bs_checked;
  unsigned char bs_pad[2];
  __u32 bs_cowextsize;
  __u32 bs_dmevmask;
  __u16 bs_dmstate;
  __u16 bs_aextents;
};

struct xfs_swapext {
  int64_t sx_version;
  int64_t sx_fdtarget;
  int64_t sx_fdtmp;
  xfs_off_t sx_offset;
  xfs_off_t sx_length;
  char sx_pad[16];
  struct xfs_bstat sx_stat;
};

struct kgetbmap {
  __s64 bmv_offset;
  __s64 bmv_block;
  __s64 bmv_length;
  __s32 bmv_oflags;
};

struct xfs_fid64 {
  u64 ino;
  u32 gen;
  u64 parent_ino;
  u32 parent_gen;
} __attribute__((packed));

struct xfs_extent_busy {
  struct rb_node rb_node;
  struct list_head list;
  xfs_agnumber_t agno;
  xfs_agblock_t bno;
  xfs_extlen_t length;
  unsigned int flags;
};

enum layout_break_reason {
  BREAK_WRITE = 0,
  BREAK_UNMAP = 1,
};

enum xfs_prealloc_flags {
  XFS_PREALLOC_SET = 2,
  XFS_PREALLOC_CLEAR = 4,
  XFS_PREALLOC_SYNC = 8,
  XFS_PREALLOC_INVISIBLE = 16,
};

struct xfs_mru_cache_elem {
  struct list_head list_node;
  long unsigned int key;
};

struct xfs_fstrm_item {
  struct xfs_mru_cache_elem mru;
  xfs_agnumber_t ag;
};

enum xfs_fstrm_alloc {
  XFS_PICK_USERDATA = 1,
  XFS_PICK_LOWSPACE = 2,
};

struct xfs_fsmap_head {
  uint32_t fmh_iflags;
  uint32_t fmh_oflags;
  unsigned int fmh_count;
  unsigned int fmh_entries;
  struct xfs_fsmap fmh_keys[2];
};

struct xfs_getfsmap_info {
  struct xfs_fsmap_head* head;
  struct fsmap* fsmap_recs;
  struct xfs_buf* agf_bp;
  xfs_daddr_t next_daddr;
  u64 missing_owner;
  u32 dev;
  xfs_agnumber_t agno;
  struct xfs_rmap_irec low;
  struct xfs_rmap_irec high;
  bool last;
};

struct xfs_getfsmap_dev {
  u32 dev;
  int (*fn)(struct xfs_trans*, struct xfs_fsmap*, struct xfs_getfsmap_info*);
};

struct xfs_fsop_counts {
  __u64 freedata;
  __u64 freertx;
  __u64 freeino;
  __u64 allocino;
};

typedef struct xfs_fsop_counts xfs_fsop_counts_t;

struct xfs_fsop_resblks {
  __u64 resblks;
  __u64 resblks_avail;
};

typedef struct xfs_fsop_resblks xfs_fsop_resblks_t;

struct xfs_growfs_data {
  __u64 newblocks;
  __u32 imaxpct;
};

struct xfs_growfs_log {
  __u32 newblocks;
  __u32 isint;
};

struct xfs_bulkstat {
  uint64_t bs_ino;
  uint64_t bs_size;
  uint64_t bs_blocks;
  uint64_t bs_xflags;
  int64_t bs_atime;
  int64_t bs_mtime;
  int64_t bs_ctime;
  int64_t bs_btime;
  uint32_t bs_gen;
  uint32_t bs_uid;
  uint32_t bs_gid;
  uint32_t bs_projectid;
  uint32_t bs_atime_nsec;
  uint32_t bs_mtime_nsec;
  uint32_t bs_ctime_nsec;
  uint32_t bs_btime_nsec;
  uint32_t bs_blksize;
  uint32_t bs_rdev;
  uint32_t bs_cowextsize_blks;
  uint32_t bs_extsize_blks;
  uint32_t bs_nlink;
  uint32_t bs_extents;
  uint32_t bs_aextents;
  uint16_t bs_version;
  uint16_t bs_forkoff;
  uint16_t bs_sick;
  uint16_t bs_checked;
  uint16_t bs_mode;
  uint16_t bs_pad2;
  uint64_t bs_pad[7];
};

struct ioctl_sick_map {
  unsigned int sick_mask;
  unsigned int ioctl_mask;
};

struct dioattr {
  __u32 d_mem;
  __u32 d_miniosz;
  __u32 d_maxiosz;
};

struct xfs_flock64 {
  __s16 l_type;
  __s16 l_whence;
  __s64 l_start;
  __s64 l_len;
  __s32 l_sysid;
  __u32 l_pid;
  __s32 l_pad[4];
};

typedef struct xfs_flock64 xfs_flock64_t;

struct xfs_growfs_rt {
  __u64 newblocks;
  __u32 extsize;
};

typedef struct xfs_growfs_rt xfs_growfs_rt_t;

struct xfs_fsop_bulkreq {
  __u64* lastip;
  __s32 icount;
  void* ubuffer;
  __s32* ocount;
};

struct xfs_inogrp {
  __u64 xi_startino;
  __s32 xi_alloccount;
  __u64 xi_allocmask;
};

struct xfs_inumbers {
  uint64_t xi_startino;
  uint64_t xi_allocmask;
  uint8_t xi_alloccount;
  uint8_t xi_version;
  uint8_t xi_padding[6];
};

struct xfs_bulk_ireq {
  uint64_t ino;
  uint32_t flags;
  uint32_t icount;
  uint32_t ocount;
  uint32_t agno;
  uint64_t reserved[5];
};

struct xfs_bulkstat_req {
  struct xfs_bulk_ireq hdr;
  struct xfs_bulkstat bulkstat[0];
};

struct xfs_inumbers_req {
  struct xfs_bulk_ireq hdr;
  struct xfs_inumbers inumbers[0];
};

struct xfs_error_injection {
  __s32 fd;
  __s32 errtag;
};

typedef struct xfs_error_injection xfs_error_injection_t;

struct xfs_fs_eofblocks {
  __u32 eof_version;
  __u32 eof_flags;
  uid_t eof_uid;
  gid_t eof_gid;
  prid_t eof_prid;
  __u32 pad32;
  __u64 eof_min_file_size;
  __u64 pad64[12];
};

struct xfs_fsop_handlereq {
  __u32 fd;
  void* path;
  __u32 oflags;
  void* ihandle;
  __u32 ihandlen;
  void* ohandle;
  __u32* ohandlen;
};

typedef struct xfs_fsop_handlereq xfs_fsop_handlereq_t;

struct xfs_attrlist_cursor {
  __u32 opaque[4];
};

struct xfs_attrlist {
  __s32 al_count;
  __s32 al_more;
  __s32 al_offset[1];
};

struct xfs_attrlist_ent {
  __u32 a_valuelen;
  char a_name[1];
};

struct xfs_fsop_attrlist_handlereq {
  struct xfs_fsop_handlereq hreq;
  struct xfs_attrlist_cursor pos;
  __u32 flags;
  __u32 buflen;
  void* buffer;
};

struct xfs_attr_multiop {
  __u32 am_opcode;
  __s32 am_error;
  void* am_attrname;
  void* am_attrvalue;
  __u32 am_length;
  __u32 am_flags;
};

typedef struct xfs_attr_multiop xfs_attr_multiop_t;

struct xfs_fsop_attrmulti_handlereq {
  struct xfs_fsop_handlereq hreq;
  __u32 opcount;
  struct xfs_attr_multiop* ops;
};

typedef struct xfs_fsop_attrmulti_handlereq xfs_fsop_attrmulti_handlereq_t;

typedef struct {
  __u32 val[2];
} xfs_fsid_t;

struct xfs_fid {
  __u16 fid_len;
  __u16 fid_pad;
  __u32 fid_gen;
  __u64 fid_ino;
};

typedef struct xfs_fid xfs_fid_t;

struct xfs_handle {
  union {
    __s64 align;
    xfs_fsid_t _ha_fsid;
  } ha_u;
  xfs_fid_t ha_fid;
};

typedef struct xfs_handle xfs_handle_t;

typedef struct xfs_swapext xfs_swapext_t;

struct xfs_scrub_metadata {
  __u32 sm_type;
  __u32 sm_flags;
  __u64 sm_ino;
  __u32 sm_gen;
  __u32 sm_agno;
  __u64 sm_reserved[5];
};

struct xfs_ibulk {
  struct xfs_mount* mp;
  struct user_namespace* mnt_userns;
  void* ubuffer;
  xfs_ino_t startino;
  unsigned int icount;
  unsigned int ocount;
  unsigned int flags;
};

struct xfs_iunlink {
  struct rhash_head iu_rhash_head;
  xfs_agino_t iu_agino;
  xfs_agino_t iu_next_unlinked;
};

typedef int (
    *bulkstat_one_fmt_pf)(struct xfs_ibulk*, const struct xfs_bulkstat*);

typedef int (*inumbers_fmt_pf)(struct xfs_ibulk*, const struct xfs_inumbers*);

struct xfs_bstat_chunk {
  bulkstat_one_fmt_pf formatter;
  struct xfs_ibulk* breq;
  struct xfs_bulkstat* buf;
};

struct xfs_inumbers_chunk {
  inumbers_fmt_pf formatter;
  struct xfs_ibulk* breq;
};

typedef int (
    *xfs_iwalk_fn)(struct xfs_mount*, struct xfs_trans*, xfs_ino_t, void*);

typedef int (*xfs_inobt_walk_fn)(
    struct xfs_mount*,
    struct xfs_trans*,
    xfs_agnumber_t,
    const struct xfs_inobt_rec_incore*,
    void*);

struct xfs_pwork;

typedef int (*xfs_pwork_work_fn)(struct xfs_mount*, struct xfs_pwork*);

struct xfs_pwork_ctl;

struct xfs_pwork {
  struct work_struct work;
  struct xfs_pwork_ctl* pctl;
};

struct xfs_pwork_ctl {
  struct workqueue_struct* wq;
  struct xfs_mount* mp;
  xfs_pwork_work_fn work_fn;
  struct wait_queue_head poll_wait;
  atomic_t nr_work;
  int error;
};

struct xfs_iwalk_ag {
  struct xfs_pwork pwork;
  struct xfs_mount* mp;
  struct xfs_trans* tp;
  xfs_ino_t startino;
  xfs_ino_t lastino;
  struct xfs_inobt_rec_incore* recs;
  unsigned int sz_recs;
  unsigned int nr_recs;
  xfs_iwalk_fn iwalk_fn;
  xfs_inobt_walk_fn inobt_walk_fn;
  void* data;
  unsigned int trim_start : 1;
  unsigned int skip_empty : 1;
};

typedef void (*xfs_mru_cache_free_func_t)(void*, struct xfs_mru_cache_elem*);

struct xfs_mru_cache___2 {
  struct xarray store;
  struct list_head* lists;
  struct list_head reap_list;
  spinlock_t lock;
  unsigned int grp_count;
  unsigned int grp_time;
  unsigned int lru_grp;
  long unsigned int time_zero;
  xfs_mru_cache_free_func_t free_func;
  struct delayed_work work;
  unsigned int queued;
  void* data;
};

struct xstats_entry {
  char* desc;
  int endpoint;
};

enum xfs_dax_mode {
  XFS_DAX_INODE = 0,
  XFS_DAX_ALWAYS = 1,
  XFS_DAX_NEVER = 2,
};

enum {
  Opt_logbufs = 0,
  Opt_logbsize = 1,
  Opt_logdev = 2,
  Opt_rtdev = 3,
  Opt_wsync = 4,
  Opt_noalign = 5,
  Opt_swalloc = 6,
  Opt_sunit = 7,
  Opt_swidth = 8,
  Opt_nouuid = 9,
  Opt_grpid___2 = 10,
  Opt_nogrpid___2 = 11,
  Opt_bsdgroups = 12,
  Opt_sysvgroups = 13,
  Opt_allocsize = 14,
  Opt_norecovery = 15,
  Opt_inode64___2 = 16,
  Opt_inode32___2 = 17,
  Opt_ikeep = 18,
  Opt_noikeep = 19,
  Opt_largeio = 20,
  Opt_nolargeio = 21,
  Opt_attr2 = 22,
  Opt_noattr2 = 23,
  Opt_filestreams = 24,
  Opt_quota___2 = 25,
  Opt_noquota___2 = 26,
  Opt_usrquota___2 = 27,
  Opt_grpquota___2 = 28,
  Opt_prjquota___2 = 29,
  Opt_uquota = 30,
  Opt_gquota = 31,
  Opt_pquota = 32,
  Opt_uqnoenforce = 33,
  Opt_gqnoenforce = 34,
  Opt_pqnoenforce = 35,
  Opt_qnoenforce = 36,
  Opt_discard___3 = 37,
  Opt_nodiscard___2 = 38,
  Opt_dax___2 = 39,
  Opt_dax_enum = 40,
  Opt_barrier___2 = 41,
  Opt_nobarrier___2 = 42,
  Opt_discard_sync = 43,
};

struct proc_xfs_info {
  uint64_t flag;
  char* str;
};

struct xfs_sysfs_attr {
  struct attribute attr;
  ssize_t (*show)(struct kobject*, char*);
  ssize_t (*store)(struct kobject*, const char*, size_t);
};

struct xfs_error_init {
  char* name;
  int max_retries;
  int retry_timeout;
};

struct xfs_ail_cursor {
  struct list_head list;
  struct xfs_log_item* item;
};

struct xfs_unmount_log_format {
  uint16_t magic;
  uint16_t pad1;
  uint32_t pad2;
};

struct xlog_op_header {
  __be32 oh_tid;
  __be32 oh_len;
  __u8 oh_clientid;
  __u8 oh_flags;
  __u16 oh_res2;
};

typedef struct xlog_op_header xlog_op_header_t;

typedef struct xlog_ticket xlog_ticket_t;

struct xfs_map_extent {
  uint64_t me_owner;
  uint64_t me_startblock;
  uint64_t me_startoff;
  uint32_t me_len;
  uint32_t me_flags;
};

struct xfs_bui_log_format {
  uint16_t bui_type;
  uint16_t bui_size;
  uint32_t bui_nextents;
  uint64_t bui_id;
  struct xfs_map_extent bui_extents[0];
};

struct xfs_bud_log_format {
  uint16_t bud_type;
  uint16_t bud_size;
  uint32_t __pad;
  uint64_t bud_bui_id;
};

struct xfs_bui_log_item {
  struct xfs_log_item bui_item;
  atomic_t bui_refcount;
  atomic_t bui_next_extent;
  struct xfs_bui_log_format bui_format;
};

struct xfs_bud_log_item {
  struct xfs_log_item bud_item;
  struct xfs_bui_log_item* bud_buip;
  struct xfs_bud_log_format bud_format;
};

struct xfs_buf_cancel {
  xfs_daddr_t bc_blkno;
  uint bc_len;
  int bc_refcount;
  struct list_head bc_list;
};

struct xfs_dq_logformat {
  uint16_t qlf_type;
  uint16_t qlf_size;
  xfs_dqid_t qlf_id;
  int64_t qlf_blkno;
  int32_t qlf_len;
  uint32_t qlf_boffset;
};

struct xfs_qoff_logformat {
  short unsigned int qf_type;
  short unsigned int qf_size;
  unsigned int qf_flags;
  char qf_pad[12];
};

typedef struct xfs_log_iovec xfs_log_iovec_t;

struct xfs_extent {
  xfs_fsblock_t ext_start;
  xfs_extlen_t ext_len;
};

typedef struct xfs_extent xfs_extent_t;

struct xfs_extent_32 {
  uint64_t ext_start;
  uint32_t ext_len;
} __attribute__((packed));

typedef struct xfs_extent_32 xfs_extent_32_t;

struct xfs_extent_64 {
  uint64_t ext_start;
  uint32_t ext_len;
  uint32_t ext_pad;
};

typedef struct xfs_extent_64 xfs_extent_64_t;

struct xfs_efi_log_format {
  uint16_t efi_type;
  uint16_t efi_size;
  uint32_t efi_nextents;
  uint64_t efi_id;
  xfs_extent_t efi_extents[1];
};

typedef struct xfs_efi_log_format xfs_efi_log_format_t;

struct xfs_efi_log_format_32 {
  uint16_t efi_type;
  uint16_t efi_size;
  uint32_t efi_nextents;
  uint64_t efi_id;
  xfs_extent_32_t efi_extents[1];
} __attribute__((packed));

typedef struct xfs_efi_log_format_32 xfs_efi_log_format_32_t;

struct xfs_efi_log_format_64 {
  uint16_t efi_type;
  uint16_t efi_size;
  uint32_t efi_nextents;
  uint64_t efi_id;
  xfs_extent_64_t efi_extents[1];
};

typedef struct xfs_efi_log_format_64 xfs_efi_log_format_64_t;

struct xfs_efd_log_format {
  uint16_t efd_type;
  uint16_t efd_size;
  uint32_t efd_nextents;
  uint64_t efd_efi_id;
  xfs_extent_t efd_extents[1];
};

typedef struct xfs_efd_log_format xfs_efd_log_format_t;

struct xfs_efi_log_item {
  struct xfs_log_item efi_item;
  atomic_t efi_refcount;
  atomic_t efi_next_extent;
  xfs_efi_log_format_t efi_format;
};

struct xfs_efd_log_item {
  struct xfs_log_item efd_item;
  struct xfs_efi_log_item* efd_efip;
  uint efd_next_extent;
  xfs_efd_log_format_t efd_format;
};

struct xfs_icreate_item {
  struct xfs_log_item ic_item;
  struct xfs_icreate_log ic_format;
};

struct xfs_inode_log_format_32 {
  uint16_t ilf_type;
  uint16_t ilf_size;
  uint32_t ilf_fields;
  uint16_t ilf_asize;
  uint16_t ilf_dsize;
  uint64_t ilf_ino;
  union {
    uint32_t ilfu_rdev;
    uint8_t __pad[16];
  } ilf_u;
  int64_t ilf_blkno;
  int32_t ilf_len;
  int32_t ilf_boffset;
} __attribute__((packed));

typedef uint64_t xfs_ictimestamp_t;

struct xfs_legacy_ictimestamp {
  int32_t t_sec;
  int32_t t_nsec;
};

struct xfs_log_dinode {
  uint16_t di_magic;
  uint16_t di_mode;
  int8_t di_version;
  int8_t di_format;
  uint8_t di_pad3[2];
  uint32_t di_uid;
  uint32_t di_gid;
  uint32_t di_nlink;
  uint16_t di_projid_lo;
  uint16_t di_projid_hi;
  uint8_t di_pad[6];
  uint16_t di_flushiter;
  xfs_ictimestamp_t di_atime;
  xfs_ictimestamp_t di_mtime;
  xfs_ictimestamp_t di_ctime;
  xfs_fsize_t di_size;
  xfs_rfsblock_t di_nblocks;
  xfs_extlen_t di_extsize;
  xfs_extnum_t di_nextents;
  xfs_aextnum_t di_anextents;
  uint8_t di_forkoff;
  int8_t di_aformat;
  uint32_t di_dmevmask;
  uint16_t di_dmstate;
  uint16_t di_flags;
  uint32_t di_gen;
  xfs_agino_t di_next_unlinked;
  uint32_t di_crc;
  uint64_t di_changecount;
  xfs_lsn_t di_lsn;
  uint64_t di_flags2;
  uint32_t di_cowextsize;
  uint8_t di_pad2[12];
  xfs_ictimestamp_t di_crtime;
  xfs_ino_t di_ino;
  uuid_t di_uuid;
};

struct xfs_phys_extent {
  uint64_t pe_startblock;
  uint32_t pe_len;
  uint32_t pe_flags;
};

struct xfs_cui_log_format {
  uint16_t cui_type;
  uint16_t cui_size;
  uint32_t cui_nextents;
  uint64_t cui_id;
  struct xfs_phys_extent cui_extents[0];
};

struct xfs_cud_log_format {
  uint16_t cud_type;
  uint16_t cud_size;
  uint32_t __pad;
  uint64_t cud_cui_id;
};

struct xfs_cui_log_item {
  struct xfs_log_item cui_item;
  atomic_t cui_refcount;
  atomic_t cui_next_extent;
  struct xfs_cui_log_format cui_format;
};

struct xfs_cud_log_item {
  struct xfs_log_item cud_item;
  struct xfs_cui_log_item* cud_cuip;
  struct xfs_cud_log_format cud_format;
};

struct xfs_rui_log_format {
  uint16_t rui_type;
  uint16_t rui_size;
  uint32_t rui_nextents;
  uint64_t rui_id;
  struct xfs_map_extent rui_extents[0];
};

struct xfs_rud_log_format {
  uint16_t rud_type;
  uint16_t rud_size;
  uint32_t __pad;
  uint64_t rud_rui_id;
};

struct xfs_rui_log_item {
  struct xfs_log_item rui_item;
  atomic_t rui_refcount;
  atomic_t rui_next_extent;
  struct xfs_rui_log_format rui_format;
};

struct xfs_rud_log_item {
  struct xfs_log_item rud_item;
  struct xfs_rui_log_item* rud_ruip;
  struct xfs_rud_log_format rud_format;
};

typedef struct xfs_agi xfs_agi_t;

typedef int (*xfs_qm_dqiterate_fn)(struct xfs_dquot*, xfs_dqtype_t, void*);

struct xfs_qoff_logitem {
  struct xfs_log_item qql_item;
  struct xfs_qoff_logitem* qql_start_lip;
  unsigned int qql_flags;
};

struct xfs_qm_isolate {
  struct list_head buffers;
  struct list_head dispose;
};

struct xfs_acl_entry {
  __be32 ae_tag;
  __be32 ae_id;
  __be16 ae_perm;
  __be16 ae_pad;
};

struct xfs_acl {
  __be32 acl_cnt;
  struct xfs_acl_entry acl_entry[0];
};

struct compat_xfs_bstime {
  old_time32_t tv_sec;
  __s32 tv_nsec;
};

typedef struct compat_xfs_bstime compat_xfs_bstime_t;

struct compat_xfs_bstat {
  __u64 bs_ino;
  __u16 bs_mode;
  __u16 bs_nlink;
  __u32 bs_uid;
  __u32 bs_gid;
  __u32 bs_rdev;
  __s32 bs_blksize;
  __s64 bs_size;
  compat_xfs_bstime_t bs_atime;
  compat_xfs_bstime_t bs_mtime;
  compat_xfs_bstime_t bs_ctime;
  int64_t bs_blocks;
  __u32 bs_xflags;
  __s32 bs_extsize;
  __s32 bs_extents;
  __u32 bs_gen;
  __u16 bs_projid_lo;
  __u16 bs_forkoff;
  __u16 bs_projid_hi;
  unsigned char bs_pad[10];
  __u32 bs_dmevmask;
  __u16 bs_dmstate;
  __u16 bs_aextents;
} __attribute__((packed));

struct compat_xfs_fsop_bulkreq {
  compat_uptr_t lastip;
  __s32 icount;
  compat_uptr_t ubuffer;
  compat_uptr_t ocount;
};

struct compat_xfs_fsop_handlereq {
  __u32 fd;
  compat_uptr_t path;
  __u32 oflags;
  compat_uptr_t ihandle;
  __u32 ihandlen;
  compat_uptr_t ohandle;
  compat_uptr_t ohandlen;
};

typedef struct compat_xfs_fsop_handlereq compat_xfs_fsop_handlereq_t;

struct compat_xfs_swapext {
  int64_t sx_version;
  int64_t sx_fdtarget;
  int64_t sx_fdtmp;
  xfs_off_t sx_offset;
  xfs_off_t sx_length;
  char sx_pad[16];
  struct compat_xfs_bstat sx_stat;
} __attribute__((packed));

struct compat_xfs_fsop_attrlist_handlereq {
  struct compat_xfs_fsop_handlereq hreq;
  struct xfs_attrlist_cursor pos;
  __u32 flags;
  __u32 buflen;
  compat_uptr_t buffer;
};

typedef struct compat_xfs_fsop_attrlist_handlereq
    compat_xfs_fsop_attrlist_handlereq_t;

struct compat_xfs_attr_multiop {
  __u32 am_opcode;
  __s32 am_error;
  compat_uptr_t am_attrname;
  compat_uptr_t am_attrvalue;
  __u32 am_length;
  __u32 am_flags;
};

typedef struct compat_xfs_attr_multiop compat_xfs_attr_multiop_t;

struct compat_xfs_fsop_attrmulti_handlereq {
  struct compat_xfs_fsop_handlereq hreq;
  __u32 opcount;
  compat_uptr_t ops;
};

typedef struct compat_xfs_fsop_attrmulti_handlereq
    compat_xfs_fsop_attrmulti_handlereq_t;

struct compat_xfs_flock64 {
  __s16 l_type;
  __s16 l_whence;
  __s64 l_start;
  __s64 l_len;
  __s32 l_sysid;
  __u32 l_pid;
  __s32 l_pad[4];
} __attribute__((packed));

typedef struct compat_xfs_flock64 compat_xfs_flock64_t;

struct compat_xfs_fsop_geom_v1 {
  __u32 blocksize;
  __u32 rtextsize;
  __u32 agblocks;
  __u32 agcount;
  __u32 logblocks;
  __u32 sectsize;
  __u32 inodesize;
  __u32 imaxpct;
  __u64 datablocks;
  __u64 rtblocks;
  __u64 rtextents;
  __u64 logstart;
  unsigned char uuid[16];
  __u32 sunit;
  __u32 swidth;
  __s32 version;
  __u32 flags;
  __u32 logsectsize;
  __u32 rtsectsize;
  __u32 dirblocksize;
} __attribute__((packed));

typedef struct compat_xfs_fsop_geom_v1 compat_xfs_fsop_geom_v1_t;

struct compat_xfs_inogrp {
  __u64 xi_startino;
  __s32 xi_alloccount;
  __u64 xi_allocmask;
} __attribute__((packed));

struct compat_xfs_growfs_data {
  __u64 newblocks;
  __u32 imaxpct;
} __attribute__((packed));

typedef struct compat_xfs_growfs_data compat_xfs_growfs_data_t;

struct compat_xfs_growfs_rt {
  __u64 newblocks;
  __u32 extsize;
} __attribute__((packed));

typedef struct compat_xfs_growfs_rt compat_xfs_growfs_rt_t;

typedef struct vfsmount* (*debugfs_automount_t)(struct dentry*, void*);

struct debugfs_fsdata {
  const struct file_operations* real_fops;
  refcount_t active_users;
  struct completion active_users_drained;
};

struct debugfs_mount_opts {
  kuid_t uid;
  kgid_t gid;
  umode_t mode;
};

enum {
  Opt_uid___5 = 0,
  Opt_gid___6 = 1,
  Opt_mode___5 = 2,
  Opt_err___4 = 3,
};

struct debugfs_fs_info {
  struct debugfs_mount_opts mount_opts;
};

struct debugfs_blob_wrapper {
  void* data;
  long unsigned int size;
};

struct debugfs_reg32 {
  char* name;
  long unsigned int offset;
};

struct debugfs_regset32 {
  const struct debugfs_reg32* regs;
  int nregs;
  void* base;
  struct device* dev;
};

struct debugfs_devm_entry {
  int (*read)(struct seq_file*, void*);
  struct device* dev;
};

struct tracefs_dir_ops {
  int (*mkdir)(const char*);
  int (*rmdir)(const char*);
};

struct tracefs_mount_opts {
  kuid_t uid;
  kgid_t gid;
  umode_t mode;
};

struct tracefs_fs_info {
  struct tracefs_mount_opts mount_opts;
};

struct btrfs_ioctl_vol_args {
  __s64 fd;
  char name[4088];
};

struct btrfs_scrub_progress {
  __u64 data_extents_scrubbed;
  __u64 tree_extents_scrubbed;
  __u64 data_bytes_scrubbed;
  __u64 tree_bytes_scrubbed;
  __u64 read_errors;
  __u64 csum_errors;
  __u64 verify_errors;
  __u64 no_csum;
  __u64 csum_discards;
  __u64 super_errors;
  __u64 malloc_errors;
  __u64 uncorrectable_errors;
  __u64 corrected_errors;
  __u64 last_physical;
  __u64 unverified_errors;
};

struct btrfs_balance_args {
  __u64 profiles;
  union {
    __u64 usage;
    struct {
      __u32 usage_min;
      __u32 usage_max;
    };
  };
  __u64 devid;
  __u64 pstart;
  __u64 pend;
  __u64 vstart;
  __u64 vend;
  __u64 target;
  __u64 flags;
  union {
    __u64 limit;
    struct {
      __u32 limit_min;
      __u32 limit_max;
    };
  };
  __u32 stripes_min;
  __u32 stripes_max;
  __u64 unused[6];
};

struct btrfs_balance_progress {
  __u64 expected;
  __u64 considered;
  __u64 completed;
};

enum btrfs_dev_stat_values {
  BTRFS_DEV_STAT_WRITE_ERRS = 0,
  BTRFS_DEV_STAT_READ_ERRS = 1,
  BTRFS_DEV_STAT_FLUSH_ERRS = 2,
  BTRFS_DEV_STAT_CORRUPTION_ERRS = 3,
  BTRFS_DEV_STAT_GENERATION_ERRS = 4,
  BTRFS_DEV_STAT_VALUES_MAX = 5,
};

struct btrfs_disk_key {
  __le64 objectid;
  __u8 type;
  __le64 offset;
} __attribute__((packed));

struct btrfs_key {
  __u64 objectid;
  __u8 type;
  __u64 offset;
} __attribute__((packed));

struct btrfs_dev_item {
  __le64 devid;
  __le64 total_bytes;
  __le64 bytes_used;
  __le32 io_align;
  __le32 io_width;
  __le32 sector_size;
  __le64 type;
  __le64 generation;
  __le64 start_offset;
  __le32 dev_group;
  __u8 seek_speed;
  __u8 bandwidth;
  __u8 uuid[16];
  __u8 fsid[16];
} __attribute__((packed));

struct btrfs_inode_ref {
  __le64 index;
  __le16 name_len;
} __attribute__((packed));

struct btrfs_timespec {
  __le64 sec;
  __le32 nsec;
} __attribute__((packed));

struct btrfs_inode_item {
  __le64 generation;
  __le64 transid;
  __le64 size;
  __le64 nbytes;
  __le64 block_group;
  __le32 nlink;
  __le32 uid;
  __le32 gid;
  __le32 mode;
  __le64 rdev;
  __le64 flags;
  __le64 sequence;
  __le64 reserved[4];
  struct btrfs_timespec atime;
  struct btrfs_timespec ctime;
  struct btrfs_timespec mtime;
  struct btrfs_timespec otime;
} __attribute__((packed));

struct btrfs_dir_item {
  struct btrfs_disk_key location;
  __le64 transid;
  __le16 data_len;
  __le16 name_len;
  __u8 type;
} __attribute__((packed));

struct btrfs_root_item {
  struct btrfs_inode_item inode;
  __le64 generation;
  __le64 root_dirid;
  __le64 bytenr;
  __le64 byte_limit;
  __le64 bytes_used;
  __le64 last_snapshot;
  __le64 flags;
  __le32 refs;
  struct btrfs_disk_key drop_progress;
  __u8 drop_level;
  __u8 level;
  __le64 generation_v2;
  __u8 uuid[16];
  __u8 parent_uuid[16];
  __u8 received_uuid[16];
  __le64 ctransid;
  __le64 otransid;
  __le64 stransid;
  __le64 rtransid;
  struct btrfs_timespec ctime;
  struct btrfs_timespec otime;
  struct btrfs_timespec stime;
  struct btrfs_timespec rtime;
  __le64 reserved[8];
} __attribute__((packed));

struct btrfs_root_ref {
  __le64 dirid;
  __le64 sequence;
  __le16 name_len;
} __attribute__((packed));

enum {
  BTRFS_FILE_EXTENT_INLINE = 0,
  BTRFS_FILE_EXTENT_REG = 1,
  BTRFS_FILE_EXTENT_PREALLOC = 2,
  BTRFS_NR_FILE_EXTENT_TYPES = 3,
};

struct btrfs_file_extent_item {
  __le64 generation;
  __le64 ram_bytes;
  __u8 compression;
  __u8 encryption;
  __le16 other_encoding;
  __u8 type;
  __le64 disk_bytenr;
  __le64 disk_num_bytes;
  __le64 offset;
  __le64 num_bytes;
} __attribute__((packed));

enum btrfs_raid_types {
  BTRFS_RAID_RAID10 = 0,
  BTRFS_RAID_RAID1 = 1,
  BTRFS_RAID_DUP = 2,
  BTRFS_RAID_RAID0 = 3,
  BTRFS_RAID_SINGLE = 4,
  BTRFS_RAID_RAID5 = 5,
  BTRFS_RAID_RAID6 = 6,
  BTRFS_RAID_RAID1C3 = 7,
  BTRFS_RAID_RAID1C4 = 8,
  BTRFS_NR_RAID_TYPES = 9,
};

enum {
  IO_TREE_FS_PINNED_EXTENTS = 0,
  IO_TREE_FS_EXCLUDED_EXTENTS = 1,
  IO_TREE_BTREE_INODE_IO = 2,
  IO_TREE_INODE_IO = 3,
  IO_TREE_INODE_IO_FAILURE = 4,
  IO_TREE_RELOC_BLOCKS = 5,
  IO_TREE_TRANS_DIRTY_PAGES = 6,
  IO_TREE_ROOT_DIRTY_LOG_PAGES = 7,
  IO_TREE_INODE_FILE_EXTENT = 8,
  IO_TREE_LOG_CSUM_RANGE = 9,
  IO_TREE_SELFTEST = 10,
  IO_TREE_DEVICE_ALLOC_STATE = 11,
};

struct btrfs_fs_info;

struct extent_io_tree {
  struct rb_root state;
  struct btrfs_fs_info* fs_info;
  void* private_data;
  u64 dirty_bytes;
  bool track_uptodate;
  u8 owner;
  spinlock_t lock;
};

struct extent_map_tree {
  struct rb_root_cached map;
  struct list_head modified_extents;
  rwlock_t lock;
};

struct btrfs_space_info;

struct btrfs_block_rsv {
  u64 size;
  u64 reserved;
  struct btrfs_space_info* space_info;
  spinlock_t lock;
  short unsigned int full;
  short unsigned int type;
  short unsigned int failfast;
  u64 qgroup_rsv_size;
  u64 qgroup_rsv_reserved;
};

struct btrfs_block_group;

struct btrfs_free_cluster {
  spinlock_t lock;
  spinlock_t refill_lock;
  struct rb_root root;
  u64 max_size;
  u64 window_start;
  bool fragmented;
  struct btrfs_block_group* block_group;
  struct list_head block_group_list;
};

struct btrfs_discard_ctl {
  struct workqueue_struct* discard_workers;
  struct delayed_work work;
  spinlock_t lock;
  struct btrfs_block_group* block_group;
  struct list_head discard_list[3];
  u64 prev_discard;
  u64 prev_discard_time;
  atomic_t discardable_extents;
  atomic64_t discardable_bytes;
  u64 max_discard_size;
  u64 delay_ms;
  u32 iops_limit;
  u32 kbps_limit;
  u64 discard_extent_bytes;
  u64 discard_bitmap_bytes;
  atomic64_t discard_bytes_saved;
};

struct btrfs_work;

typedef void (*btrfs_func_t)(struct btrfs_work*);

struct __btrfs_workqueue;

struct btrfs_work {
  btrfs_func_t func;
  btrfs_func_t ordered_func;
  btrfs_func_t ordered_free;
  struct work_struct normal_work;
  struct list_head ordered_list;
  struct __btrfs_workqueue* wq;
  long unsigned int flags;
};

struct btrfs_device;

struct btrfs_dev_replace {
  u64 replace_state;
  time64_t time_started;
  time64_t time_stopped;
  atomic64_t num_write_errors;
  atomic64_t num_uncorrectable_read_errors;
  u64 cursor_left;
  u64 committed_cursor_left;
  u64 cursor_left_last_write_of_item;
  u64 cursor_right;
  u64 cont_reading_from_srcdev_mode;
  int is_valid;
  int item_needs_writeback;
  struct btrfs_device* srcdev;
  struct btrfs_device* tgtdev;
  struct mutex lock_finishing_cancel_unmount;
  struct rw_semaphore rwsem;
  struct btrfs_scrub_progress scrub_progress;
  struct percpu_counter bio_counter;
  wait_queue_head_t replace_wait;
};

enum btrfs_exclusive_operation {
  BTRFS_EXCLOP_NONE = 0,
  BTRFS_EXCLOP_BALANCE = 1,
  BTRFS_EXCLOP_DEV_ADD = 2,
  BTRFS_EXCLOP_DEV_REMOVE = 3,
  BTRFS_EXCLOP_DEV_REPLACE = 4,
  BTRFS_EXCLOP_RESIZE = 5,
  BTRFS_EXCLOP_SWAP_ACTIVATE = 6,
};

struct btrfs_root;

struct btrfs_transaction;

struct btrfs_super_block;

struct btrfs_stripe_hash_table;

struct btrfs_workqueue;

struct btrfs_fs_devices;

struct reloc_control;

struct btrfs_balance_control;

struct ulist;

struct btrfs_delayed_root;

struct btrfs_fs_info {
  u8 chunk_tree_uuid[16];
  long unsigned int flags;
  struct btrfs_root* extent_root;
  struct btrfs_root* tree_root;
  struct btrfs_root* chunk_root;
  struct btrfs_root* dev_root;
  struct btrfs_root* fs_root;
  struct btrfs_root* csum_root;
  struct btrfs_root* quota_root;
  struct btrfs_root* uuid_root;
  struct btrfs_root* free_space_root;
  struct btrfs_root* data_reloc_root;
  struct btrfs_root* log_root_tree;
  spinlock_t fs_roots_radix_lock;
  struct xarray fs_roots_radix;
  spinlock_t block_group_cache_lock;
  u64 first_logical_byte;
  struct rb_root block_group_cache_tree;
  atomic64_t free_chunk_space;
  struct extent_io_tree excluded_extents;
  struct extent_map_tree mapping_tree;
  struct btrfs_block_rsv global_block_rsv;
  struct btrfs_block_rsv trans_block_rsv;
  struct btrfs_block_rsv chunk_block_rsv;
  struct btrfs_block_rsv delayed_block_rsv;
  struct btrfs_block_rsv delayed_refs_rsv;
  struct btrfs_block_rsv empty_block_rsv;
  u64 generation;
  u64 last_trans_committed;
  u64 avg_delayed_ref_runtime;
  u64 last_trans_log_full_commit;
  long unsigned int mount_opt;
  long unsigned int pending_changes;
  long unsigned int compress_type : 4;
  unsigned int compress_level;
  u32 commit_interval;
  u64 max_inline;
  struct btrfs_transaction* running_transaction;
  wait_queue_head_t transaction_throttle;
  wait_queue_head_t transaction_wait;
  wait_queue_head_t transaction_blocked_wait;
  wait_queue_head_t async_submit_wait;
  spinlock_t super_lock;
  struct btrfs_super_block* super_copy;
  struct btrfs_super_block* super_for_commit;
  struct super_block* sb;
  struct inode* btree_inode;
  struct mutex tree_log_mutex;
  struct mutex transaction_kthread_mutex;
  struct mutex cleaner_mutex;
  struct mutex chunk_mutex;
  struct mutex ro_block_group_mutex;
  struct btrfs_stripe_hash_table* stripe_hash_table;
  struct mutex ordered_operations_mutex;
  struct rw_semaphore commit_root_sem;
  struct rw_semaphore cleanup_work_sem;
  struct rw_semaphore subvol_sem;
  spinlock_t trans_lock;
  struct mutex reloc_mutex;
  struct list_head trans_list;
  struct list_head dead_roots;
  struct list_head caching_block_groups;
  spinlock_t delayed_iput_lock;
  struct list_head delayed_iputs;
  atomic_t nr_delayed_iputs;
  wait_queue_head_t delayed_iputs_wait;
  atomic64_t tree_mod_seq;
  rwlock_t tree_mod_log_lock;
  struct rb_root tree_mod_log;
  struct list_head tree_mod_seq_list;
  atomic_t async_delalloc_pages;
  spinlock_t ordered_root_lock;
  struct list_head ordered_roots;
  struct mutex delalloc_root_mutex;
  spinlock_t delalloc_root_lock;
  struct list_head delalloc_roots;
  struct btrfs_workqueue* workers;
  struct btrfs_workqueue* delalloc_workers;
  struct btrfs_workqueue* flush_workers;
  struct btrfs_workqueue* endio_workers;
  struct btrfs_workqueue* endio_meta_workers;
  struct btrfs_workqueue* endio_raid56_workers;
  struct btrfs_workqueue* rmw_workers;
  struct btrfs_workqueue* endio_meta_write_workers;
  struct btrfs_workqueue* endio_write_workers;
  struct btrfs_workqueue* endio_freespace_worker;
  struct btrfs_workqueue* caching_workers;
  struct btrfs_workqueue* readahead_workers;
  struct btrfs_workqueue* fixup_workers;
  struct btrfs_workqueue* delayed_workers;
  struct task_struct* transaction_kthread;
  struct task_struct* cleaner_kthread;
  u32 thread_pool_size;
  struct kobject* space_info_kobj;
  struct kobject* qgroups_kobj;
  u64 total_pinned;
  struct percpu_counter dirty_metadata_bytes;
  struct percpu_counter delalloc_bytes;
  struct percpu_counter ordered_bytes;
  s32 dirty_metadata_batch;
  s32 delalloc_batch;
  struct list_head dirty_cowonly_roots;
  struct btrfs_fs_devices* fs_devices;
  struct list_head space_info;
  struct btrfs_space_info* data_sinfo;
  struct reloc_control* reloc_ctl;
  struct btrfs_free_cluster data_alloc_cluster;
  struct btrfs_free_cluster meta_alloc_cluster;
  spinlock_t defrag_inodes_lock;
  struct rb_root defrag_inodes;
  atomic_t defrag_running;
  seqlock_t profiles_lock;
  u64 avail_data_alloc_bits;
  u64 avail_metadata_alloc_bits;
  u64 avail_system_alloc_bits;
  spinlock_t balance_lock;
  struct mutex balance_mutex;
  atomic_t balance_pause_req;
  atomic_t balance_cancel_req;
  struct btrfs_balance_control* balance_ctl;
  wait_queue_head_t balance_wait_q;
  atomic_t reloc_cancel_req;
  u32 data_chunk_allocations;
  u32 metadata_ratio;
  void* bdev_holder;
  struct mutex scrub_lock;
  atomic_t scrubs_running;
  atomic_t scrub_pause_req;
  atomic_t scrubs_paused;
  atomic_t scrub_cancel_req;
  wait_queue_head_t scrub_pause_wait;
  refcount_t scrub_workers_refcnt;
  struct btrfs_workqueue* scrub_workers;
  struct btrfs_workqueue* scrub_wr_completion_workers;
  struct btrfs_workqueue* scrub_parity_workers;
  struct btrfs_discard_ctl discard_ctl;
  u64 qgroup_flags;
  struct rb_root qgroup_tree;
  spinlock_t qgroup_lock;
  struct ulist* qgroup_ulist;
  struct mutex qgroup_ioctl_lock;
  struct list_head dirty_qgroups;
  u64 qgroup_seq;
  struct mutex qgroup_rescan_lock;
  struct btrfs_key qgroup_rescan_progress;
  struct btrfs_workqueue* qgroup_rescan_workers;
  struct completion qgroup_rescan_completion;
  struct btrfs_work qgroup_rescan_work;
  bool qgroup_rescan_running;
  long unsigned int fs_state;
  struct btrfs_delayed_root* delayed_root;
  spinlock_t reada_lock;
  struct xarray reada_tree;
  atomic_t reada_works_cnt;
  spinlock_t buffer_lock;
  struct xarray buffer_radix;
  int backup_root_index;
  struct btrfs_dev_replace dev_replace;
  struct semaphore uuid_tree_rescan_sem;
  struct work_struct async_reclaim_work;
  struct work_struct async_data_reclaim_work;
  struct work_struct preempt_reclaim_work;
  struct work_struct reclaim_bgs_work;
  struct list_head reclaim_bgs;
  int bg_reclaim_threshold;
  spinlock_t unused_bgs_lock;
  struct list_head unused_bgs;
  struct mutex unused_bg_unpin_mutex;
  struct mutex reclaim_bgs_lock;
  u32 nodesize;
  u32 sectorsize;
  u32 sectorsize_bits;
  u32 csum_size;
  u32 csums_per_leaf;
  u32 stripesize;
  spinlock_t swapfile_pins_lock;
  struct rb_root swapfile_pins;
  struct crypto_shash* csum_shash;
  spinlock_t send_reloc_lock;
  int send_in_progress;
  enum btrfs_exclusive_operation exclusive_operation;
  union {
    u64 zone_size;
    u64 zoned;
  };
  u64 max_zone_append_size;
  struct mutex zoned_meta_io_lock;
  spinlock_t treelog_bg_lock;
  u64 treelog_bg;
  struct kobject* discard_debug_kobj;
};

struct io_failure_record;

struct extent_state {
  u64 start;
  u64 end;
  struct rb_node rb_node;
  wait_queue_head_t wq;
  refcount_t refs;
  u32 state;
  struct io_failure_record* failrec;
};

struct io_failure_record {
  struct page* page;
  u64 start;
  u64 len;
  u64 logical;
  long unsigned int bio_flags;
  int this_mirror;
  int failed_mirror;
  int in_validation;
};

struct ulist {
  long unsigned int nnodes;
  struct list_head nodes;
  struct rb_root root;
};

struct extent_buffer {
  u64 start;
  long unsigned int len;
  long unsigned int bflags;
  struct btrfs_fs_info* fs_info;
  spinlock_t refs_lock;
  atomic_t refs;
  atomic_t io_pages;
  int read_mirror;
  struct callback_head callback_head;
  pid_t lock_owner;
  s8 log_index;
  struct rw_semaphore lock;
  struct page* pages[16];
  struct list_head release_list;
};

struct map_lookup;

struct extent_map {
  struct rb_node rb_node;
  u64 start;
  u64 len;
  u64 mod_start;
  u64 mod_len;
  u64 orig_start;
  u64 orig_block_len;
  u64 ram_bytes;
  u64 block_start;
  u64 block_len;
  u64 generation;
  long unsigned int flags;
  struct map_lookup* map_lookup;
  refcount_t refs;
  unsigned int compress_type;
  struct list_head list;
};

struct btrfs_ordered_inode_tree {
  spinlock_t lock;
  struct rb_root tree;
  struct rb_node* last;
};

struct btrfs_delayed_node;

struct btrfs_inode {
  struct btrfs_root* root;
  struct btrfs_key location;
  spinlock_t lock;
  struct extent_map_tree extent_tree;
  struct extent_io_tree io_tree;
  struct extent_io_tree io_failure_tree;
  struct extent_io_tree file_extent_tree;
  struct mutex log_mutex;
  struct btrfs_ordered_inode_tree ordered_tree;
  struct list_head delalloc_inodes;
  struct rb_node rb_node;
  long unsigned int runtime_flags;
  atomic_t sync_writers;
  u64 generation;
  u64 last_trans;
  u64 logged_trans;
  int last_sub_trans;
  int last_log_commit;
  u64 delalloc_bytes;
  u64 new_delalloc_bytes;
  u64 defrag_bytes;
  u64 disk_i_size;
  u64 index_cnt;
  u64 dir_index;
  u64 last_unlink_trans;
  u64 last_reflink_trans;
  u64 csum_bytes;
  u32 flags;
  unsigned int outstanding_extents;
  struct btrfs_block_rsv block_rsv;
  unsigned int prop_compress;
  unsigned int defrag_compress;
  struct btrfs_delayed_node* delayed_node;
  struct timespec64 i_otime;
  struct list_head delayed_iput;
  struct rw_semaphore i_mmap_lock;
  struct inode vfs_inode;
};

enum {
  EXTENT_FLAG_PINNED = 0,
  EXTENT_FLAG_COMPRESSED = 1,
  EXTENT_FLAG_PREALLOC = 2,
  EXTENT_FLAG_LOGGING = 3,
  EXTENT_FLAG_FILLING = 4,
  EXTENT_FLAG_FS_MAPPING = 5,
};

struct btrfs_bio_stripe {
  struct btrfs_device* dev;
  u64 physical;
  u64 length;
};

struct map_lookup {
  u64 type;
  int io_align;
  int io_width;
  u64 stripe_len;
  int num_stripes;
  int sub_stripes;
  int verified_stripes;
  struct btrfs_bio_stripe stripes[0];
};

struct __btrfs_workqueue {
  struct workqueue_struct* normal_wq;
  struct btrfs_fs_info* fs_info;
  struct list_head ordered_list;
  spinlock_t list_lock;
  atomic_t pending;
  int limit_active;
  int current_active;
  int thresh;
  unsigned int count;
  spinlock_t thres_lock;
};

struct btrfs_space_info {
  spinlock_t lock;
  u64 total_bytes;
  u64 bytes_used;
  u64 bytes_pinned;
  u64 bytes_reserved;
  u64 bytes_may_use;
  u64 bytes_readonly;
  u64 bytes_zone_unusable;
  u64 max_extent_size;
  int clamp;
  unsigned int full : 1;
  unsigned int chunk_alloc : 1;
  unsigned int flush : 1;
  unsigned int force_alloc;
  u64 disk_used;
  u64 disk_total;
  u64 flags;
  struct percpu_counter total_bytes_pinned;
  struct list_head list;
  struct list_head ro_bgs;
  struct list_head priority_tickets;
  struct list_head tickets;
  u64 reclaim_size;
  u64 tickets_id;
  struct rw_semaphore groups_sem;
  struct list_head block_groups[9];
  struct kobject kobj;
  struct kobject* block_group_kobjs[9];
};

enum btrfs_lock_nesting {
  BTRFS_NESTING_NORMAL = 0,
  BTRFS_NESTING_COW = 1,
  BTRFS_NESTING_LEFT = 2,
  BTRFS_NESTING_RIGHT = 3,
  BTRFS_NESTING_LEFT_COW = 4,
  BTRFS_NESTING_RIGHT_COW = 5,
  BTRFS_NESTING_SPLIT = 6,
  BTRFS_NESTING_NEW_ROOT = 7,
  BTRFS_NESTING_MAX = 8,
};

struct btrfs_drew_lock {
  atomic_t readers;
  struct percpu_counter writers;
  wait_queue_head_t pending_writers;
  wait_queue_head_t pending_readers;
};

enum {
  BTRFS_FS_STATE_ERROR = 0,
  BTRFS_FS_STATE_REMOUNTING = 1,
  BTRFS_FS_STATE_RO = 2,
  BTRFS_FS_STATE_TRANS_ABORTED = 3,
  BTRFS_FS_STATE_DEV_REPLACING = 4,
  BTRFS_FS_STATE_DUMMY_FS_INFO = 5,
};

struct btrfs_header {
  u8 csum[32];
  u8 fsid[16];
  __le64 bytenr;
  __le64 flags;
  u8 chunk_tree_uuid[16];
  __le64 generation;
  __le64 owner;
  __le32 nritems;
  u8 level;
} __attribute__((packed));

struct btrfs_root_backup {
  __le64 tree_root;
  __le64 tree_root_gen;
  __le64 chunk_root;
  __le64 chunk_root_gen;
  __le64 extent_root;
  __le64 extent_root_gen;
  __le64 fs_root;
  __le64 fs_root_gen;
  __le64 dev_root;
  __le64 dev_root_gen;
  __le64 csum_root;
  __le64 csum_root_gen;
  __le64 total_bytes;
  __le64 bytes_used;
  __le64 num_devices;
  __le64 unused_64[4];
  u8 tree_root_level;
  u8 chunk_root_level;
  u8 extent_root_level;
  u8 fs_root_level;
  u8 dev_root_level;
  u8 csum_root_level;
  u8 unused_8[10];
};

struct btrfs_super_block {
  u8 csum[32];
  u8 fsid[16];
  __le64 bytenr;
  __le64 flags;
  __le64 magic;
  __le64 generation;
  __le64 root;
  __le64 chunk_root;
  __le64 log_root;
  __le64 log_root_transid;
  __le64 total_bytes;
  __le64 bytes_used;
  __le64 root_dir_objectid;
  __le64 num_devices;
  __le32 sectorsize;
  __le32 nodesize;
  __le32 __unused_leafsize;
  __le32 stripesize;
  __le32 sys_chunk_array_size;
  __le64 chunk_root_generation;
  __le64 compat_flags;
  __le64 compat_ro_flags;
  __le64 incompat_flags;
  __le16 csum_type;
  u8 root_level;
  u8 chunk_root_level;
  u8 log_root_level;
  struct btrfs_dev_item dev_item;
  char label[256];
  __le64 cache_generation;
  __le64 uuid_tree_generation;
  u8 metadata_uuid[16];
  __le64 reserved[28];
  u8 sys_chunk_array[2048];
  struct btrfs_root_backup super_roots[4];
} __attribute__((packed));

struct btrfs_item {
  struct btrfs_disk_key key;
  __le32 offset;
  __le32 size;
} __attribute__((packed));

struct btrfs_path {
  struct extent_buffer* nodes[8];
  int slots[8];
  u8 locks[8];
  u8 reada;
  u8 lowest_level;
  unsigned int search_for_split : 1;
  unsigned int keep_locks : 1;
  unsigned int skip_locking : 1;
  unsigned int search_commit_root : 1;
  unsigned int need_commit_sem : 1;
  unsigned int skip_release_on_error : 1;
  unsigned int search_for_extension : 1;
};

struct rcu_string;

struct btrfs_zoned_device_info;

struct scrub_ctx;

struct reada_zone;

struct btrfs_device {
  struct list_head dev_list;
  struct list_head dev_alloc_list;
  struct list_head post_commit_list;
  struct btrfs_fs_devices* fs_devices;
  struct btrfs_fs_info* fs_info;
  struct rcu_string* name;
  u64 generation;
  struct block_device* bdev;
  struct btrfs_zoned_device_info* zone_info;
  fmode_t mode;
  long unsigned int dev_state;
  blk_status_t last_flush_error;
  u64 devid;
  u64 total_bytes;
  u64 disk_total_bytes;
  u64 bytes_used;
  u32 io_align;
  u32 io_width;
  u64 type;
  u32 sector_size;
  u8 uuid[16];
  u64 commit_total_bytes;
  u64 commit_bytes_used;
  struct bio* flush_bio;
  struct completion flush_wait;
  struct scrub_ctx* scrub_ctx;
  atomic_t reada_in_flight;
  u64 reada_next;
  struct reada_zone* reada_curr_zone;
  struct xarray reada_zones;
  struct xarray reada_extents;
  int dev_stats_valid;
  atomic_t dev_stats_ccnt;
  atomic_t dev_stat_values[5];
  struct extent_io_tree alloc_state;
  struct completion kobj_unregister;
  struct kobject devid_kobj;
};

enum btrfs_discard_state {
  BTRFS_DISCARD_EXTENTS = 0,
  BTRFS_DISCARD_BITMAPS = 1,
  BTRFS_DISCARD_RESET_CURSOR = 2,
};

struct btrfs_io_ctl {
  void* cur;
  void* orig;
  struct page* page;
  struct page** pages;
  struct btrfs_fs_info* fs_info;
  struct inode* inode;
  long unsigned int size;
  int index;
  int num_pages;
  int entries;
  int bitmaps;
};

struct btrfs_full_stripe_locks_tree {
  struct rb_root root;
  struct mutex lock;
};

struct btrfs_caching_control;

struct btrfs_free_space_ctl;

struct btrfs_block_group {
  struct btrfs_fs_info* fs_info;
  struct inode* inode;
  spinlock_t lock;
  u64 start;
  u64 length;
  u64 pinned;
  u64 reserved;
  u64 used;
  u64 delalloc_bytes;
  u64 bytes_super;
  u64 flags;
  u64 cache_generation;
  u32 bitmap_high_thresh;
  u32 bitmap_low_thresh;
  struct rw_semaphore data_rwsem;
  long unsigned int full_stripe_len;
  unsigned int ro;
  unsigned int iref : 1;
  unsigned int has_caching_ctl : 1;
  unsigned int removed : 1;
  unsigned int to_copy : 1;
  unsigned int relocating_repair : 1;
  int disk_cache_state;
  int cached;
  struct btrfs_caching_control* caching_ctl;
  u64 last_byte_to_unpin;
  struct btrfs_space_info* space_info;
  struct btrfs_free_space_ctl* free_space_ctl;
  struct rb_node cache_node;
  struct list_head list;
  refcount_t refs;
  struct list_head cluster_list;
  struct list_head bg_list;
  struct list_head ro_list;
  atomic_t frozen;
  struct list_head discard_list;
  int discard_index;
  u64 discard_eligible_time;
  u64 discard_cursor;
  enum btrfs_discard_state discard_state;
  struct list_head dirty_list;
  struct list_head io_list;
  struct btrfs_io_ctl io_ctl;
  atomic_t reservations;
  atomic_t nocow_writers;
  struct mutex free_space_lock;
  int needs_free_space;
  bool seq_zone;
  int swap_extents;
  struct btrfs_full_stripe_locks_tree full_stripe_locks_root;
  u64 alloc_offset;
  u64 zone_unusable;
  u64 meta_write_pointer;
};

enum {
  BTRFS_FS_BARRIER = 0,
  BTRFS_FS_CLOSING_START = 1,
  BTRFS_FS_CLOSING_DONE = 2,
  BTRFS_FS_LOG_RECOVERING = 3,
  BTRFS_FS_OPEN = 4,
  BTRFS_FS_QUOTA_ENABLED = 5,
  BTRFS_FS_UPDATE_UUID_TREE_GEN = 6,
  BTRFS_FS_CREATING_FREE_SPACE_TREE = 7,
  BTRFS_FS_BTREE_ERR = 8,
  BTRFS_FS_LOG1_ERR = 9,
  BTRFS_FS_LOG2_ERR = 10,
  BTRFS_FS_QUOTA_OVERRIDE = 11,
  BTRFS_FS_FROZEN = 12,
  BTRFS_FS_BALANCE_RUNNING = 13,
  BTRFS_FS_RELOC_RUNNING = 14,
  BTRFS_FS_CLEANER_RUNNING = 15,
  BTRFS_FS_CSUM_IMPL_FAST = 16,
  BTRFS_FS_DISCARD_RUNNING = 17,
  BTRFS_FS_CLEANUP_SPACE_CACHE_V1 = 18,
  BTRFS_FS_FREE_SPACE_TREE_UNTRUSTED = 19,
  BTRFS_FS_WRITE_TIME_CHECKS_DISABLED = 20,
};

struct btrfs_qgroup_swapped_blocks {
  spinlock_t lock;
  bool swapped;
  struct rb_root blocks[8];
};

struct btrfs_root {
  struct extent_buffer* node;
  struct extent_buffer* commit_root;
  struct btrfs_root* log_root;
  struct btrfs_root* reloc_root;
  long unsigned int state;
  struct btrfs_root_item root_item;
  struct btrfs_key root_key;
  struct btrfs_fs_info* fs_info;
  struct extent_io_tree dirty_log_pages;
  struct mutex objectid_mutex;
  spinlock_t accounting_lock;
  int : 32;
  struct btrfs_block_rsv* block_rsv;
  struct mutex log_mutex;
  wait_queue_head_t log_writer_wait;
  wait_queue_head_t log_commit_wait[2];
  struct list_head log_ctxs[2];
  atomic_t log_writers;
  atomic_t log_commit[2];
  atomic_t log_batch;
  int log_transid;
  int log_transid_committed;
  int last_log_commit;
  pid_t log_start_pid;
  u64 last_trans;
  u32 type;
  int : 32;
  u64 free_objectid;
  struct btrfs_key defrag_progress;
  struct btrfs_key defrag_max;
  long : 48;
  struct list_head dirty_list;
  struct list_head root_list;
  spinlock_t log_extents_lock[2];
  struct list_head logged_list[2];
  int orphan_cleanup_state;
  spinlock_t inode_lock;
  struct rb_root inode_tree;
  struct xarray delayed_nodes_tree;
  dev_t anon_dev;
  spinlock_t root_item_lock;
  refcount_t refs;
  int : 32;
  struct mutex delalloc_mutex;
  spinlock_t delalloc_lock;
  int : 32;
  struct list_head delalloc_inodes;
  struct list_head delalloc_root;
  u64 nr_delalloc_inodes;
  struct mutex ordered_extent_mutex;
  spinlock_t ordered_extent_lock;
  int : 32;
  struct list_head ordered_extents;
  struct list_head ordered_root;
  u64 nr_ordered_extents;
  struct list_head reloc_dirty_list;
  int send_in_progress;
  int dedupe_in_progress;
  struct btrfs_drew_lock snapshot_lock;
  atomic_t snapshot_force_cow;
  spinlock_t qgroup_meta_rsv_lock;
  u64 qgroup_meta_rsv_pertrans;
  u64 qgroup_meta_rsv_prealloc;
  wait_queue_head_t qgroup_flush_wait;
  atomic_t nr_swapfiles;
  int : 32;
  struct btrfs_qgroup_swapped_blocks swapped_blocks;
  struct extent_io_tree log_csum_range;
} __attribute__((packed));

enum btrfs_trans_state {
  TRANS_STATE_RUNNING = 0,
  TRANS_STATE_COMMIT_START = 1,
  TRANS_STATE_COMMIT_DOING = 2,
  TRANS_STATE_UNBLOCKED = 3,
  TRANS_STATE_SUPER_COMMITTED = 4,
  TRANS_STATE_COMPLETED = 5,
  TRANS_STATE_MAX = 6,
};

struct btrfs_delayed_ref_root {
  struct rb_root_cached href_root;
  struct rb_root dirty_extent_root;
  spinlock_t lock;
  atomic_t num_entries;
  long unsigned int num_heads;
  long unsigned int num_heads_ready;
  u64 pending_csums;
  long unsigned int flags;
  u64 run_delayed_start;
  u64 qgroup_to_skip;
};

struct btrfs_transaction {
  u64 transid;
  atomic_t num_extwriters;
  atomic_t num_writers;
  refcount_t use_count;
  long unsigned int flags;
  enum btrfs_trans_state state;
  int aborted;
  struct list_head list;
  struct extent_io_tree dirty_pages;
  time64_t start_time;
  wait_queue_head_t writer_wait;
  wait_queue_head_t commit_wait;
  struct list_head pending_snapshots;
  struct list_head dev_update_list;
  struct list_head switch_commits;
  struct list_head dirty_bgs;
  struct list_head io_bgs;
  struct list_head dropped_roots;
  struct extent_io_tree pinned_extents;
  struct mutex cache_write_mutex;
  spinlock_t dirty_bgs_lock;
  struct list_head deleted_bgs;
  spinlock_t dropped_roots_lock;
  struct btrfs_delayed_ref_root delayed_refs;
  struct btrfs_fs_info* fs_info;
  atomic_t pending_ordered;
  wait_queue_head_t pending_wait;
  spinlock_t releasing_ebs_lock;
  struct list_head releasing_ebs;
  atomic64_t chunk_bytes_reserved;
  wait_queue_head_t chunk_reserve_wait;
};

enum btrfs_chunk_allocation_policy {
  BTRFS_CHUNK_ALLOC_REGULAR = 0,
  BTRFS_CHUNK_ALLOC_ZONED = 1,
};

enum btrfs_read_policy {
  BTRFS_READ_POLICY_PID = 0,
  BTRFS_NR_READ_POLICY = 1,
};

struct btrfs_fs_devices {
  u8 fsid[16];
  u8 metadata_uuid[16];
  bool fsid_change;
  struct list_head fs_list;
  u64 num_devices;
  u64 open_devices;
  u64 rw_devices;
  u64 missing_devices;
  u64 total_rw_bytes;
  u64 total_devices;
  u64 latest_generation;
  struct block_device* latest_bdev;
  struct mutex device_list_mutex;
  struct list_head devices;
  struct list_head alloc_list;
  struct list_head seed_list;
  bool seeding;
  int opened;
  bool rotating;
  struct btrfs_fs_info* fs_info;
  struct kobject fsid_kobj;
  struct kobject* devices_kobj;
  struct kobject* devinfo_kobj;
  struct completion kobj_unregister;
  enum btrfs_chunk_allocation_policy chunk_alloc_policy;
  enum btrfs_read_policy read_policy;
};

struct btrfs_balance_control {
  struct btrfs_balance_args data;
  struct btrfs_balance_args meta;
  struct btrfs_balance_args sys;
  u64 flags;
  struct btrfs_balance_progress stat;
};

struct btrfs_delayed_root {
  spinlock_t lock;
  struct list_head node_list;
  struct list_head prepare_list;
  atomic_t items;
  atomic_t items_seq;
  int nodes;
  wait_queue_head_t wait;
};

enum btrfs_reserve_flush_enum {
  BTRFS_RESERVE_NO_FLUSH = 0,
  BTRFS_RESERVE_FLUSH_LIMIT = 1,
  BTRFS_RESERVE_FLUSH_EVICT = 2,
  BTRFS_RESERVE_FLUSH_DATA = 3,
  BTRFS_RESERVE_FLUSH_FREE_SPACE_INODE = 4,
  BTRFS_RESERVE_FLUSH_ALL = 5,
  BTRFS_RESERVE_FLUSH_ALL_STEAL = 6,
};

enum btrfs_flush_state {
  FLUSH_DELAYED_ITEMS_NR = 1,
  FLUSH_DELAYED_ITEMS = 2,
  FLUSH_DELAYED_REFS_NR = 3,
  FLUSH_DELAYED_REFS = 4,
  FLUSH_DELALLOC = 5,
  FLUSH_DELALLOC_WAIT = 6,
  ALLOC_CHUNK = 7,
  ALLOC_CHUNK_FORCE = 8,
  RUN_DELAYED_IPUTS = 9,
  COMMIT_TRANS = 10,
  FORCE_COMMIT_TRANS = 11,
};

struct btrfs_delayed_node {
  u64 inode_id;
  u64 bytes_reserved;
  struct btrfs_root* root;
  struct list_head n_list;
  struct list_head p_list;
  struct rb_root_cached ins_root;
  struct rb_root_cached del_root;
  struct mutex mutex;
  struct btrfs_inode_item inode_item;
  refcount_t refs;
  u64 index_cnt;
  long unsigned int flags;
  int count;
};

enum {
  BTRFS_ORDERED_REGULAR = 0,
  BTRFS_ORDERED_NOCOW = 1,
  BTRFS_ORDERED_PREALLOC = 2,
  BTRFS_ORDERED_COMPRESSED = 3,
  BTRFS_ORDERED_DIRECT = 4,
  BTRFS_ORDERED_IO_DONE = 5,
  BTRFS_ORDERED_COMPLETE = 6,
  BTRFS_ORDERED_IOERR = 7,
  BTRFS_ORDERED_TRUNCATED = 8,
  BTRFS_ORDERED_LOGGED = 9,
  BTRFS_ORDERED_LOGGED_CSUM = 10,
  BTRFS_ORDERED_PENDING = 11,
};

struct btrfs_ordered_extent {
  u64 file_offset;
  u64 disk_bytenr;
  u64 num_bytes;
  u64 disk_num_bytes;
  u64 bytes_left;
  u64 outstanding_isize;
  u64 truncated_len;
  long unsigned int flags;
  int compress_type;
  int qgroup_rsv;
  refcount_t refs;
  struct inode* inode;
  struct list_head list;
  struct list_head log_list;
  wait_queue_head_t wait;
  struct rb_node rb_node;
  struct list_head root_extent_list;
  struct btrfs_work work;
  struct completion completion;
  struct btrfs_work flush_work;
  struct list_head work_list;
  u64 physical;
  struct gendisk* disk;
  u8 partno;
};

struct btrfs_delayed_ref_node {
  struct rb_node ref_node;
  struct list_head add_list;
  u64 bytenr;
  u64 num_bytes;
  u64 seq;
  refcount_t refs;
  int ref_mod;
  unsigned int action : 8;
  unsigned int type : 8;
  unsigned int is_head : 1;
  unsigned int in_tree : 1;
};

struct btrfs_delayed_extent_op {
  struct btrfs_disk_key key;
  u8 level;
  bool update_key;
  bool update_flags;
  bool is_data;
  u64 flags_to_set;
};

struct btrfs_delayed_ref_head {
  u64 bytenr;
  u64 num_bytes;
  refcount_t refs;
  struct mutex mutex;
  spinlock_t lock;
  struct rb_root_cached ref_tree;
  struct list_head ref_add_list;
  struct rb_node href_node;
  struct btrfs_delayed_extent_op* extent_op;
  int total_ref_mod;
  int ref_mod;
  unsigned int must_insert_reserved : 1;
  unsigned int is_data : 1;
  unsigned int is_system : 1;
  unsigned int processing : 1;
};

struct btrfs_delayed_tree_ref {
  struct btrfs_delayed_ref_node node;
  u64 root;
  u64 parent;
  int level;
};

struct btrfs_delayed_data_ref {
  struct btrfs_delayed_ref_node node;
  u64 root;
  u64 parent;
  u64 objectid;
  u64 offset;
};

struct btrfs_trans_handle {
  u64 transid;
  u64 bytes_reserved;
  u64 chunk_bytes_reserved;
  long unsigned int delayed_ref_updates;
  struct btrfs_transaction* transaction;
  struct btrfs_block_rsv* block_rsv;
  struct btrfs_block_rsv* orig_rsv;
  refcount_t use_count;
  unsigned int type;
  short int aborted;
  bool adding_csums;
  bool allocating_chunk;
  bool can_flush_pending_bgs;
  bool reloc_reserved;
  bool dirty;
  bool in_fsync;
  struct btrfs_root* root;
  struct btrfs_fs_info* fs_info;
  struct list_head new_bgs;
};

struct rcu_string {
  struct callback_head rcu;
  char str[0];
};

struct btrfs_zoned_device_info {
  u64 zone_size;
  u8 zone_size_shift;
  u64 max_zone_append_size;
  u32 nr_zones;
  long unsigned int* seq_zones;
  long unsigned int* empty_zones;
  struct blk_zone sb_zones[6];
};

struct btrfs_device_info {
  struct btrfs_device* dev;
  u64 dev_offset;
  u64 max_avail;
  u64 total_avail;
};

struct btrfs_raid_attr {
  u8 sub_stripes;
  u8 dev_stripes;
  u8 devs_max;
  u8 devs_min;
  u8 tolerated_failures;
  u8 devs_increment;
  u8 ncopies;
  u8 nparity;
  u8 mindev_error;
  const char raid_name[8];
  u64 bg_flag;
};

enum btrfs_compression_type {
  BTRFS_COMPRESS_NONE = 0,
  BTRFS_COMPRESS_ZLIB = 1,
  BTRFS_COMPRESS_LZO = 2,
  BTRFS_COMPRESS_ZSTD = 3,
  BTRFS_NR_COMPRESS_TYPES = 4,
};

struct workspace_manager {
  struct list_head idle_ws;
  spinlock_t ws_lock;
  int free_ws;
  atomic_t total_ws;
  wait_queue_head_t ws_wait;
};

struct btrfs_compress_op {
  struct workspace_manager* workspace_manager;
  unsigned int max_level;
  unsigned int default_level;
};

enum btrfs_trim_state {
  BTRFS_TRIM_STATE_UNTRIMMED = 0,
  BTRFS_TRIM_STATE_TRIMMED = 1,
  BTRFS_TRIM_STATE_TRIMMING = 2,
};

struct btrfs_free_space {
  struct rb_node offset_index;
  struct rb_node bytes_index;
  u64 offset;
  u64 bytes;
  u64 max_extent_size;
  long unsigned int* bitmap;
  struct list_head list;
  enum btrfs_trim_state trim_state;
  s32 bitmap_extents;
};

struct btrfs_free_space_op;

struct btrfs_free_space_ctl {
  spinlock_t tree_lock;
  struct rb_root free_space_offset;
  struct rb_root_cached free_space_bytes;
  u64 free_space;
  int extents_thresh;
  int free_extents;
  int total_bitmaps;
  int unit;
  u64 start;
  s32 discardable_extents[2];
  s64 discardable_bytes[2];
  const struct btrfs_free_space_op* op;
  void* private;
  struct mutex cache_writeout_mutex;
  struct list_head trimming_ranges;
};

struct btrfs_free_space_op {
  bool (*use_bitmap)(struct btrfs_free_space_ctl*, struct btrfs_free_space*);
};

struct extent_inode_elem;

struct prelim_ref {
  struct rb_node rbnode;
  u64 root_id;
  struct btrfs_key key_for_search;
  int level;
  int count;
  struct extent_inode_elem* inode_list;
  u64 parent;
  u64 wanted_disk_byte;
};

struct btrfs_caching_control {
  struct list_head list;
  struct mutex mutex;
  wait_queue_head_t wait;
  struct btrfs_work work;
  struct btrfs_block_group* block_group;
  u64 progress;
  refcount_t count;
};

struct btrfs_qgroup_extent_record {
  struct rb_node node;
  u64 bytenr;
  u64 num_bytes;
  u32 data_rsv;
  u64 data_rsv_refroot;
  struct ulist* old_roots;
};

enum btrfs_qgroup_rsv_type {
  BTRFS_QGROUP_RSV_DATA = 0,
  BTRFS_QGROUP_RSV_META_PERTRANS = 1,
  BTRFS_QGROUP_RSV_META_PREALLOC = 2,
  BTRFS_QGROUP_RSV_LAST = 3,
};

struct btrfs_qgroup_rsv {
  u64 values[3];
};

struct btrfs_qgroup {
  u64 qgroupid;
  u64 rfer;
  u64 rfer_cmpr;
  u64 excl;
  u64 excl_cmpr;
  u64 lim_flags;
  u64 max_rfer;
  u64 max_excl;
  u64 rsv_rfer;
  u64 rsv_excl;
  struct btrfs_qgroup_rsv rsv;
  struct list_head groups;
  struct list_head members;
  struct list_head dirty;
  struct rb_node node;
  u64 old_refcnt;
  u64 new_refcnt;
  struct kobject kobj;
};

struct trace_event_raw_btrfs_transaction_commit {
  struct trace_entry ent;
  u8 fsid[16];
  u64 generation;
  u64 root_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs__inode {
  struct trace_entry ent;
  u8 fsid[16];
  u64 ino;
  u64 blocks;
  u64 disk_i_size;
  u64 generation;
  u64 last_trans;
  u64 logged_trans;
  u64 root_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs_get_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_objectid;
  u64 ino;
  u64 start;
  u64 len;
  u64 orig_start;
  u64 block_start;
  u64 block_len;
  long unsigned int flags;
  int refs;
  unsigned int compress_type;
  char __data[0];
};

struct trace_event_raw_btrfs_handle_em_exist {
  struct trace_entry ent;
  u8 fsid[16];
  u64 e_start;
  u64 e_len;
  u64 map_start;
  u64 map_len;
  u64 start;
  u64 len;
  char __data[0];
};

struct trace_event_raw_btrfs__file_extent_item_regular {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_obj;
  u64 ino;
  loff_t isize;
  u64 disk_isize;
  u64 num_bytes;
  u64 ram_bytes;
  u64 disk_bytenr;
  u64 disk_num_bytes;
  u64 extent_offset;
  u8 extent_type;
  u8 compression;
  u64 extent_start;
  u64 extent_end;
  char __data[0];
};

struct trace_event_raw_btrfs__file_extent_item_inline {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_obj;
  u64 ino;
  loff_t isize;
  u64 disk_isize;
  u8 extent_type;
  u8 compression;
  u64 extent_start;
  u64 extent_end;
  char __data[0];
};

struct trace_event_raw_btrfs__ordered_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 ino;
  u64 file_offset;
  u64 start;
  u64 len;
  u64 disk_len;
  u64 bytes_left;
  long unsigned int flags;
  int compress_type;
  int refs;
  u64 root_objectid;
  u64 truncated_len;
  char __data[0];
};

struct trace_event_raw_btrfs__writepage {
  struct trace_entry ent;
  u8 fsid[16];
  u64 ino;
  long unsigned int index;
  long int nr_to_write;
  long int pages_skipped;
  loff_t range_start;
  loff_t range_end;
  char for_kupdate;
  char for_reclaim;
  char range_cyclic;
  long unsigned int writeback_index;
  u64 root_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs_writepage_end_io_hook {
  struct trace_entry ent;
  u8 fsid[16];
  u64 ino;
  long unsigned int index;
  u64 start;
  u64 end;
  int uptodate;
  u64 root_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs_sync_file {
  struct trace_entry ent;
  u8 fsid[16];
  u64 ino;
  u64 parent;
  int datasync;
  u64 root_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs_sync_fs {
  struct trace_entry ent;
  u8 fsid[16];
  int wait;
  char __data[0];
};

struct trace_event_raw_btrfs_add_block_group {
  struct trace_entry ent;
  u8 fsid[16];
  u64 offset;
  u64 size;
  u64 flags;
  u64 bytes_used;
  u64 bytes_super;
  int create;
  char __data[0];
};

struct trace_event_raw_btrfs_delayed_tree_ref {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bytenr;
  u64 num_bytes;
  int action;
  u64 parent;
  u64 ref_root;
  int level;
  int type;
  u64 seq;
  char __data[0];
};

struct trace_event_raw_btrfs_delayed_data_ref {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bytenr;
  u64 num_bytes;
  int action;
  u64 parent;
  u64 ref_root;
  u64 owner;
  u64 offset;
  int type;
  u64 seq;
  char __data[0];
};

struct trace_event_raw_btrfs_delayed_ref_head {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bytenr;
  u64 num_bytes;
  int action;
  int is_data;
  char __data[0];
};

struct trace_event_raw_btrfs__chunk {
  struct trace_entry ent;
  u8 fsid[16];
  int num_stripes;
  u64 type;
  int sub_stripes;
  u64 offset;
  u64 size;
  u64 root_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs_cow_block {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_objectid;
  u64 buf_start;
  int refs;
  u64 cow_start;
  int buf_level;
  int cow_level;
  char __data[0];
};

struct trace_event_raw_btrfs_space_reservation {
  struct trace_entry ent;
  u8 fsid[16];
  u32 __data_loc_type;
  u64 val;
  u64 bytes;
  int reserve;
  char __data[0];
};

struct trace_event_raw_btrfs_trigger_flush {
  struct trace_entry ent;
  u8 fsid[16];
  u64 flags;
  u64 bytes;
  int flush;
  u32 __data_loc_reason;
  char __data[0];
};

struct trace_event_raw_btrfs_flush_space {
  struct trace_entry ent;
  u8 fsid[16];
  u64 flags;
  u64 num_bytes;
  int state;
  int ret;
  bool for_preempt;
  char __data[0];
};

struct trace_event_raw_btrfs__reserved_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 start;
  u64 len;
  char __data[0];
};

struct trace_event_raw_find_free_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_objectid;
  u64 num_bytes;
  u64 empty_size;
  u64 data;
  char __data[0];
};

struct trace_event_raw_btrfs__reserve_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bg_objectid;
  u64 flags;
  u64 start;
  u64 len;
  char __data[0];
};

struct trace_event_raw_btrfs_find_cluster {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bg_objectid;
  u64 flags;
  u64 start;
  u64 bytes;
  u64 empty_size;
  u64 min_bytes;
  char __data[0];
};

struct trace_event_raw_btrfs_failed_cluster_setup {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bg_objectid;
  char __data[0];
};

struct trace_event_raw_btrfs_setup_cluster {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bg_objectid;
  u64 flags;
  u64 start;
  u64 max_size;
  u64 size;
  int bitmap;
  char __data[0];
};

struct trace_event_raw_alloc_extent_state {
  struct trace_entry ent;
  const struct extent_state* state;
  gfp_t mask;
  const void* ip;
  char __data[0];
};

struct trace_event_raw_free_extent_state {
  struct trace_entry ent;
  const struct extent_state* state;
  const void* ip;
  char __data[0];
};

struct trace_event_raw_btrfs__work {
  struct trace_entry ent;
  u8 fsid[16];
  const void* work;
  const void* wq;
  const void* func;
  const void* ordered_func;
  const void* ordered_free;
  const void* normal_work;
  char __data[0];
};

struct trace_event_raw_btrfs__work__done {
  struct trace_entry ent;
  u8 fsid[16];
  const void* wtag;
  char __data[0];
};

struct trace_event_raw_btrfs__workqueue {
  struct trace_entry ent;
  u8 fsid[16];
  const void* wq;
  u32 __data_loc_name;
  int high;
  char __data[0];
};

struct trace_event_raw_btrfs__workqueue_done {
  struct trace_entry ent;
  u8 fsid[16];
  const void* wq;
  char __data[0];
};

struct trace_event_raw_btrfs__qgroup_rsv_data {
  struct trace_entry ent;
  u8 fsid[16];
  u64 rootid;
  u64 ino;
  u64 start;
  u64 len;
  u64 reserved;
  int op;
  char __data[0];
};

struct trace_event_raw_btrfs_qgroup_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bytenr;
  u64 num_bytes;
  char __data[0];
};

struct trace_event_raw_qgroup_num_dirty_extents {
  struct trace_entry ent;
  u8 fsid[16];
  u64 transid;
  u64 num_dirty_extents;
  char __data[0];
};

struct trace_event_raw_btrfs_qgroup_account_extent {
  struct trace_entry ent;
  u8 fsid[16];
  u64 transid;
  u64 bytenr;
  u64 num_bytes;
  u64 nr_old_roots;
  u64 nr_new_roots;
  char __data[0];
};

struct trace_event_raw_qgroup_update_counters {
  struct trace_entry ent;
  u8 fsid[16];
  u64 qgid;
  u64 old_rfer;
  u64 old_excl;
  u64 cur_old_count;
  u64 cur_new_count;
  char __data[0];
};

struct trace_event_raw_qgroup_update_reserve {
  struct trace_entry ent;
  u8 fsid[16];
  u64 qgid;
  u64 cur_reserved;
  s64 diff;
  int type;
  char __data[0];
};

struct trace_event_raw_qgroup_meta_reserve {
  struct trace_entry ent;
  u8 fsid[16];
  u64 refroot;
  s64 diff;
  int type;
  char __data[0];
};

struct trace_event_raw_qgroup_meta_convert {
  struct trace_entry ent;
  u8 fsid[16];
  u64 refroot;
  s64 diff;
  char __data[0];
};

struct trace_event_raw_qgroup_meta_free_all_pertrans {
  struct trace_entry ent;
  u8 fsid[16];
  u64 refroot;
  s64 diff;
  int type;
  char __data[0];
};

struct trace_event_raw_btrfs__prelim_ref {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_id;
  u64 objectid;
  u8 type;
  u64 offset;
  int level;
  int old_count;
  u64 parent;
  u64 bytenr;
  int mod_count;
  u64 tree_size;
  char __data[0];
};

struct trace_event_raw_btrfs_inode_mod_outstanding_extents {
  struct trace_entry ent;
  u8 fsid[16];
  u64 root_objectid;
  u64 ino;
  int mod;
  char __data[0];
};

struct trace_event_raw_btrfs__block_group {
  struct trace_entry ent;
  u8 fsid[16];
  u64 bytenr;
  u64 len;
  u64 used;
  u64 flags;
  char __data[0];
};

struct trace_event_raw_btrfs_set_extent_bit {
  struct trace_entry ent;
  u8 fsid[16];
  unsigned int owner;
  u64 ino;
  u64 rootid;
  u64 start;
  u64 len;
  unsigned int set_bits;
  char __data[0];
};

struct trace_event_raw_btrfs_clear_extent_bit {
  struct trace_entry ent;
  u8 fsid[16];
  unsigned int owner;
  u64 ino;
  u64 rootid;
  u64 start;
  u64 len;
  unsigned int clear_bits;
  char __data[0];
};

struct trace_event_raw_btrfs_convert_extent_bit {
  struct trace_entry ent;
  u8 fsid[16];
  unsigned int owner;
  u64 ino;
  u64 rootid;
  u64 start;
  u64 len;
  unsigned int set_bits;
  unsigned int clear_bits;
  char __data[0];
};

struct trace_event_raw_btrfs_dump_space_info {
  struct trace_entry ent;
  u8 fsid[16];
  u64 flags;
  u64 total_bytes;
  u64 bytes_used;
  u64 bytes_pinned;
  u64 bytes_reserved;
  u64 bytes_may_use;
  u64 bytes_readonly;
  u64 reclaim_size;
  int clamp;
  u64 global_reserved;
  u64 trans_reserved;
  u64 delayed_refs_reserved;
  u64 delayed_reserved;
  u64 free_chunk_space;
  u64 delalloc_bytes;
  u64 ordered_bytes;
  char __data[0];
};

struct trace_event_raw_btrfs_reserve_ticket {
  struct trace_entry ent;
  u8 fsid[16];
  u64 flags;
  u64 bytes;
  u64 start_ns;
  int flush;
  int error;
  char __data[0];
};

struct trace_event_raw_btrfs_sleep_tree_lock {
  struct trace_entry ent;
  u8 fsid[16];
  u64 block;
  u64 generation;
  u64 start_ns;
  u64 end_ns;
  u64 diff_ns;
  u64 owner;
  int is_log_tree;
  char __data[0];
};

struct trace_event_raw_btrfs_locking_events {
  struct trace_entry ent;
  u8 fsid[16];
  u64 block;
  u64 generation;
  u64 owner;
  int is_log_tree;
  char __data[0];
};

struct trace_event_raw_btrfs__space_info_update {
  struct trace_entry ent;
  u8 fsid[16];
  u64 type;
  u64 old;
  s64 diff;
  char __data[0];
};

struct trace_event_data_offsets_btrfs_transaction_commit {};

struct trace_event_data_offsets_btrfs__inode {};

struct trace_event_data_offsets_btrfs_get_extent {};

struct trace_event_data_offsets_btrfs_handle_em_exist {};

struct trace_event_data_offsets_btrfs__file_extent_item_regular {};

struct trace_event_data_offsets_btrfs__file_extent_item_inline {};

struct trace_event_data_offsets_btrfs__ordered_extent {};

struct trace_event_data_offsets_btrfs__writepage {};

struct trace_event_data_offsets_btrfs_writepage_end_io_hook {};

struct trace_event_data_offsets_btrfs_sync_file {};

struct trace_event_data_offsets_btrfs_sync_fs {};

struct trace_event_data_offsets_btrfs_add_block_group {};

struct trace_event_data_offsets_btrfs_delayed_tree_ref {};

struct trace_event_data_offsets_btrfs_delayed_data_ref {};

struct trace_event_data_offsets_btrfs_delayed_ref_head {};

struct trace_event_data_offsets_btrfs__chunk {};

struct trace_event_data_offsets_btrfs_cow_block {};

struct trace_event_data_offsets_btrfs_space_reservation {
  u32 type;
};

struct trace_event_data_offsets_btrfs_trigger_flush {
  u32 reason;
};

struct trace_event_data_offsets_btrfs_flush_space {};

struct trace_event_data_offsets_btrfs__reserved_extent {};

struct trace_event_data_offsets_find_free_extent {};

struct trace_event_data_offsets_btrfs__reserve_extent {};

struct trace_event_data_offsets_btrfs_find_cluster {};

struct trace_event_data_offsets_btrfs_failed_cluster_setup {};

struct trace_event_data_offsets_btrfs_setup_cluster {};

struct trace_event_data_offsets_alloc_extent_state {};

struct trace_event_data_offsets_free_extent_state {};

struct trace_event_data_offsets_btrfs__work {};

struct trace_event_data_offsets_btrfs__work__done {};

struct trace_event_data_offsets_btrfs__workqueue {
  u32 name;
};

struct trace_event_data_offsets_btrfs__workqueue_done {};

struct trace_event_data_offsets_btrfs__qgroup_rsv_data {};

struct trace_event_data_offsets_btrfs_qgroup_extent {};

struct trace_event_data_offsets_qgroup_num_dirty_extents {};

struct trace_event_data_offsets_btrfs_qgroup_account_extent {};

struct trace_event_data_offsets_qgroup_update_counters {};

struct trace_event_data_offsets_qgroup_update_reserve {};

struct trace_event_data_offsets_qgroup_meta_reserve {};

struct trace_event_data_offsets_qgroup_meta_convert {};

struct trace_event_data_offsets_qgroup_meta_free_all_pertrans {};

struct trace_event_data_offsets_btrfs__prelim_ref {};

struct trace_event_data_offsets_btrfs_inode_mod_outstanding_extents {};

struct trace_event_data_offsets_btrfs__block_group {};

struct trace_event_data_offsets_btrfs_set_extent_bit {};

struct trace_event_data_offsets_btrfs_clear_extent_bit {};

struct trace_event_data_offsets_btrfs_convert_extent_bit {};

struct trace_event_data_offsets_btrfs_dump_space_info {};

struct trace_event_data_offsets_btrfs_reserve_ticket {};

struct trace_event_data_offsets_btrfs_sleep_tree_lock {};

struct trace_event_data_offsets_btrfs_locking_events {};

struct trace_event_data_offsets_btrfs__space_info_update {};

typedef void (
    *btf_trace_btrfs_transaction_commit)(void*, const struct btrfs_root*);

typedef void (*btf_trace_btrfs_inode_new)(void*, const struct inode*);

typedef void (*btf_trace_btrfs_inode_request)(void*, const struct inode*);

typedef void (*btf_trace_btrfs_inode_evict)(void*, const struct inode*);

typedef void (*btf_trace_btrfs_get_extent)(
    void*,
    const struct btrfs_root*,
    const struct btrfs_inode*,
    const struct extent_map*);

typedef void (*btf_trace_btrfs_handle_em_exist)(
    void*,
    const struct btrfs_fs_info*,
    const struct extent_map*,
    const struct extent_map*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_get_extent_show_fi_regular)(
    void*,
    const struct btrfs_inode*,
    const struct extent_buffer*,
    const struct btrfs_file_extent_item*,
    u64);

typedef void (*btf_trace_btrfs_truncate_show_fi_regular)(
    void*,
    const struct btrfs_inode*,
    const struct extent_buffer*,
    const struct btrfs_file_extent_item*,
    u64);

typedef void (*btf_trace_btrfs_get_extent_show_fi_inline)(
    void*,
    const struct btrfs_inode*,
    const struct extent_buffer*,
    const struct btrfs_file_extent_item*,
    int,
    u64);

typedef void (*btf_trace_btrfs_truncate_show_fi_inline)(
    void*,
    const struct btrfs_inode*,
    const struct extent_buffer*,
    const struct btrfs_file_extent_item*,
    int,
    u64);

typedef void (*btf_trace_btrfs_ordered_extent_add)(
    void*,
    const struct btrfs_inode*,
    const struct btrfs_ordered_extent*);

typedef void (*btf_trace_btrfs_ordered_extent_remove)(
    void*,
    const struct btrfs_inode*,
    const struct btrfs_ordered_extent*);

typedef void (*btf_trace_btrfs_ordered_extent_start)(
    void*,
    const struct btrfs_inode*,
    const struct btrfs_ordered_extent*);

typedef void (*btf_trace_btrfs_ordered_extent_put)(
    void*,
    const struct btrfs_inode*,
    const struct btrfs_ordered_extent*);

typedef void (*btf_trace___extent_writepage)(
    void*,
    const struct page*,
    const struct inode*,
    const struct writeback_control*);

typedef void (*btf_trace_btrfs_writepage_end_io_hook)(
    void*,
    const struct page*,
    u64,
    u64,
    int);

typedef void (*btf_trace_btrfs_sync_file)(void*, const struct file*, int);

typedef void (
    *btf_trace_btrfs_sync_fs)(void*, const struct btrfs_fs_info*, int);

typedef void (*btf_trace_btrfs_add_block_group)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_block_group*,
    int);

typedef void (*btf_trace_add_delayed_tree_ref)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_delayed_ref_node*,
    const struct btrfs_delayed_tree_ref*,
    int);

typedef void (*btf_trace_run_delayed_tree_ref)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_delayed_ref_node*,
    const struct btrfs_delayed_tree_ref*,
    int);

typedef void (*btf_trace_add_delayed_data_ref)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_delayed_ref_node*,
    const struct btrfs_delayed_data_ref*,
    int);

typedef void (*btf_trace_run_delayed_data_ref)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_delayed_ref_node*,
    const struct btrfs_delayed_data_ref*,
    int);

typedef void (*btf_trace_add_delayed_ref_head)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_delayed_ref_head*,
    int);

typedef void (*btf_trace_run_delayed_ref_head)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_delayed_ref_head*,
    int);

typedef void (*btf_trace_btrfs_chunk_alloc)(
    void*,
    const struct btrfs_fs_info*,
    const struct map_lookup*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_chunk_free)(
    void*,
    const struct btrfs_fs_info*,
    const struct map_lookup*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_cow_block)(
    void*,
    const struct btrfs_root*,
    const struct extent_buffer*,
    const struct extent_buffer*);

typedef void (*btf_trace_btrfs_space_reservation)(
    void*,
    const struct btrfs_fs_info*,
    const char*,
    u64,
    u64,
    int);

typedef void (*btf_trace_btrfs_trigger_flush)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64,
    int,
    const char*);

typedef void (*btf_trace_btrfs_flush_space)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64,
    int,
    int,
    bool);

typedef void (*btf_trace_btrfs_reserved_extent_alloc)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_reserved_extent_free)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64);

typedef void (*btf_trace_find_free_extent)(
    void*,
    const struct btrfs_root*,
    u64,
    u64,
    u64);

typedef void (*btf_trace_btrfs_reserve_extent)(
    void*,
    const struct btrfs_block_group*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_reserve_extent_cluster)(
    void*,
    const struct btrfs_block_group*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_find_cluster)(
    void*,
    const struct btrfs_block_group*,
    u64,
    u64,
    u64,
    u64);

typedef void (*btf_trace_btrfs_failed_cluster_setup)(
    void*,
    const struct btrfs_block_group*);

typedef void (*btf_trace_btrfs_setup_cluster)(
    void*,
    const struct btrfs_block_group*,
    const struct btrfs_free_cluster*,
    u64,
    int);

typedef void (*btf_trace_alloc_extent_state)(
    void*,
    const struct extent_state*,
    gfp_t,
    long unsigned int);

typedef void (*btf_trace_free_extent_state)(
    void*,
    const struct extent_state*,
    long unsigned int);

typedef void (*btf_trace_btrfs_work_queued)(void*, const struct btrfs_work*);

typedef void (*btf_trace_btrfs_work_sched)(void*, const struct btrfs_work*);

typedef void (*btf_trace_btrfs_all_work_done)(
    void*,
    const struct btrfs_fs_info*,
    const void*);

typedef void (*btf_trace_btrfs_ordered_sched)(void*, const struct btrfs_work*);

typedef void (*btf_trace_btrfs_workqueue_alloc)(
    void*,
    const struct __btrfs_workqueue*,
    const char*,
    int);

typedef void (
    *btf_trace_btrfs_workqueue_destroy)(void*, const struct __btrfs_workqueue*);

typedef void (*btf_trace_btrfs_qgroup_reserve_data)(
    void*,
    const struct inode*,
    u64,
    u64,
    u64,
    int);

typedef void (*btf_trace_btrfs_qgroup_release_data)(
    void*,
    const struct inode*,
    u64,
    u64,
    u64,
    int);

typedef void (*btf_trace_btrfs_qgroup_account_extents)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_qgroup_extent_record*);

typedef void (*btf_trace_btrfs_qgroup_trace_extent)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_qgroup_extent_record*);

typedef void (*btf_trace_qgroup_num_dirty_extents)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64);

typedef void (*btf_trace_btrfs_qgroup_account_extent)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64,
    u64,
    u64,
    u64);

typedef void (*btf_trace_qgroup_update_counters)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_qgroup*,
    u64,
    u64);

typedef void (*btf_trace_qgroup_update_reserve)(
    void*,
    struct btrfs_fs_info*,
    struct btrfs_qgroup*,
    s64,
    int);

typedef void (
    *btf_trace_qgroup_meta_reserve)(void*, struct btrfs_root*, s64, int);

typedef void (*btf_trace_qgroup_meta_convert)(void*, struct btrfs_root*, s64);

typedef void (
    *btf_trace_qgroup_meta_free_all_pertrans)(void*, struct btrfs_root*);

typedef void (*btf_trace_btrfs_prelim_ref_merge)(
    void*,
    const struct btrfs_fs_info*,
    const struct prelim_ref*,
    const struct prelim_ref*,
    u64);

typedef void (*btf_trace_btrfs_prelim_ref_insert)(
    void*,
    const struct btrfs_fs_info*,
    const struct prelim_ref*,
    const struct prelim_ref*,
    u64);

typedef void (*btf_trace_btrfs_inode_mod_outstanding_extents)(
    void*,
    const struct btrfs_root*,
    u64,
    int);

typedef void (*btf_trace_btrfs_remove_block_group)(
    void*,
    const struct btrfs_block_group*);

typedef void (*btf_trace_btrfs_add_unused_block_group)(
    void*,
    const struct btrfs_block_group*);

typedef void (*btf_trace_btrfs_add_reclaim_block_group)(
    void*,
    const struct btrfs_block_group*);

typedef void (*btf_trace_btrfs_reclaim_block_group)(
    void*,
    const struct btrfs_block_group*);

typedef void (*btf_trace_btrfs_skip_unused_block_group)(
    void*,
    const struct btrfs_block_group*);

typedef void (*btf_trace_btrfs_set_extent_bit)(
    void*,
    const struct extent_io_tree*,
    u64,
    u64,
    unsigned int);

typedef void (*btf_trace_btrfs_clear_extent_bit)(
    void*,
    const struct extent_io_tree*,
    u64,
    u64,
    unsigned int);

typedef void (*btf_trace_btrfs_convert_extent_bit)(
    void*,
    const struct extent_io_tree*,
    u64,
    u64,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_btrfs_done_preemptive_reclaim)(
    void*,
    struct btrfs_fs_info*,
    const struct btrfs_space_info*);

typedef void (*btf_trace_btrfs_fail_all_tickets)(
    void*,
    struct btrfs_fs_info*,
    const struct btrfs_space_info*);

typedef void (*btf_trace_btrfs_reserve_ticket)(
    void*,
    const struct btrfs_fs_info*,
    u64,
    u64,
    u64,
    int,
    int);

typedef void (
    *btf_trace_btrfs_tree_read_lock)(void*, const struct extent_buffer*, u64);

typedef void (
    *btf_trace_btrfs_tree_lock)(void*, const struct extent_buffer*, u64);

typedef void (*btf_trace_btrfs_tree_unlock)(void*, const struct extent_buffer*);

typedef void (
    *btf_trace_btrfs_tree_read_unlock)(void*, const struct extent_buffer*);

typedef void (*btf_trace_btrfs_tree_read_unlock_blocking)(
    void*,
    const struct extent_buffer*);

typedef void (*btf_trace_btrfs_set_lock_blocking_read)(
    void*,
    const struct extent_buffer*);

typedef void (*btf_trace_btrfs_set_lock_blocking_write)(
    void*,
    const struct extent_buffer*);

typedef void (
    *btf_trace_btrfs_try_tree_read_lock)(void*, const struct extent_buffer*);

typedef void (
    *btf_trace_btrfs_try_tree_write_lock)(void*, const struct extent_buffer*);

typedef void (
    *btf_trace_btrfs_tree_read_lock_atomic)(void*, const struct extent_buffer*);

typedef void (*btf_trace_update_bytes_may_use)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_space_info*,
    u64,
    s64);

typedef void (*btf_trace_update_bytes_pinned)(
    void*,
    const struct btrfs_fs_info*,
    const struct btrfs_space_info*,
    u64,
    s64);

enum {
  Opt_acl___2 = 0,
  Opt_noacl___2 = 1,
  Opt_clear_cache = 2,
  Opt_commit_interval = 3,
  Opt_compress = 4,
  Opt_compress_force = 5,
  Opt_compress_force_type = 6,
  Opt_compress_type = 7,
  Opt_degraded = 8,
  Opt_device = 9,
  Opt_fatal_errors = 10,
  Opt_flushoncommit = 11,
  Opt_noflushoncommit = 12,
  Opt_max_inline = 13,
  Opt_barrier___3 = 14,
  Opt_nobarrier___3 = 15,
  Opt_datacow = 16,
  Opt_nodatacow = 17,
  Opt_datasum = 18,
  Opt_nodatasum = 19,
  Opt_defrag = 20,
  Opt_nodefrag = 21,
  Opt_discard___4 = 22,
  Opt_nodiscard___3 = 23,
  Opt_discard_mode = 24,
  Opt_norecovery___2 = 25,
  Opt_ratio = 26,
  Opt_rescan_uuid_tree = 27,
  Opt_skip_balance = 28,
  Opt_space_cache = 29,
  Opt_no_space_cache = 30,
  Opt_space_cache_version = 31,
  Opt_ssd = 32,
  Opt_nossd = 33,
  Opt_ssd_spread = 34,
  Opt_nossd_spread = 35,
  Opt_subvol = 36,
  Opt_subvol_empty = 37,
  Opt_subvolid = 38,
  Opt_thread_pool = 39,
  Opt_treelog = 40,
  Opt_notreelog = 41,
  Opt_user_subvol_rm_allowed = 42,
  Opt_rescue = 43,
  Opt_usebackuproot = 44,
  Opt_nologreplay = 45,
  Opt_ignorebadroots = 46,
  Opt_ignoredatacsums = 47,
  Opt_rescue_all = 48,
  Opt_recovery = 49,
  Opt_inode_cache = 50,
  Opt_noinode_cache = 51,
  Opt_check_integrity = 52,
  Opt_check_integrity_including_extent_data = 53,
  Opt_check_integrity_print_mask = 54,
  Opt_enospc_debug = 55,
  Opt_noenospc_debug = 56,
  Opt_err___5 = 57,
};

enum btrfs_csum_type {
  BTRFS_CSUM_TYPE_CRC32 = 0,
  BTRFS_CSUM_TYPE_XXHASH = 1,
  BTRFS_CSUM_TYPE_SHA256 = 2,
  BTRFS_CSUM_TYPE_BLAKE2 = 3,
};

enum {
  EXTENT_BUFFER_UPTODATE = 0,
  EXTENT_BUFFER_DIRTY = 1,
  EXTENT_BUFFER_CORRUPT = 2,
  EXTENT_BUFFER_READAHEAD = 3,
  EXTENT_BUFFER_TREE_REF = 4,
  EXTENT_BUFFER_STALE = 5,
  EXTENT_BUFFER_WRITEBACK = 6,
  EXTENT_BUFFER_READ_ERR = 7,
  EXTENT_BUFFER_UNMAPPED = 8,
  EXTENT_BUFFER_IN_TREE = 9,
  EXTENT_BUFFER_WRITE_ERR = 10,
  EXTENT_BUFFER_NO_CHECK = 11,
};

struct btrfs_key_ptr {
  struct btrfs_disk_key key;
  __le64 blockptr;
  __le64 generation;
} __attribute__((packed));

enum {
  READA_NONE = 0,
  READA_BACK = 1,
  READA_FORWARD = 2,
};

enum {
  BTRFS_ROOT_IN_TRANS_SETUP = 0,
  BTRFS_ROOT_SHAREABLE = 1,
  BTRFS_ROOT_TRACK_DIRTY = 2,
  BTRFS_ROOT_IN_RADIX = 3,
  BTRFS_ROOT_ORPHAN_ITEM_INSERTED = 4,
  BTRFS_ROOT_DEFRAG_RUNNING = 5,
  BTRFS_ROOT_FORCE_COW = 6,
  BTRFS_ROOT_MULTI_LOG_TASKS = 7,
  BTRFS_ROOT_DIRTY = 8,
  BTRFS_ROOT_DELETING = 9,
  BTRFS_ROOT_DEAD_RELOC_TREE = 10,
  BTRFS_ROOT_DEAD_TREE = 11,
  BTRFS_ROOT_HAS_LOG_TREE = 12,
  BTRFS_ROOT_QGROUP_FLUSHING = 13,
};

struct btrfs_map_token {
  struct extent_buffer* eb;
  char* kaddr;
  long unsigned int offset;
};

enum btrfs_mod_log_op {
  BTRFS_MOD_LOG_KEY_REPLACE = 0,
  BTRFS_MOD_LOG_KEY_ADD = 1,
  BTRFS_MOD_LOG_KEY_REMOVE = 2,
  BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING = 3,
  BTRFS_MOD_LOG_KEY_REMOVE_WHILE_MOVING = 4,
  BTRFS_MOD_LOG_MOVE_KEYS = 5,
  BTRFS_MOD_LOG_ROOT_REPLACE = 6,
};

struct btrfs_csums {
  u16 size;
  const char name[10];
  const char driver[12];
};

struct btrfs_extent_item {
  __le64 refs;
  __le64 generation;
  __le64 flags;
};

struct btrfs_tree_block_info {
  struct btrfs_disk_key key;
  __u8 level;
} __attribute__((packed));

struct btrfs_extent_data_ref {
  __le64 root;
  __le64 objectid;
  __le64 offset;
  __le32 count;
} __attribute__((packed));

struct btrfs_shared_data_ref {
  __le32 count;
};

struct btrfs_extent_inline_ref {
  __u8 type;
  __le64 offset;
} __attribute__((packed));

enum btrfs_caching_type {
  BTRFS_CACHE_NO = 0,
  BTRFS_CACHE_STARTED = 1,
  BTRFS_CACHE_FAST = 2,
  BTRFS_CACHE_FINISHED = 3,
  BTRFS_CACHE_ERROR = 4,
};

enum btrfs_inline_ref_type {
  BTRFS_REF_TYPE_INVALID = 0,
  BTRFS_REF_TYPE_BLOCK = 1,
  BTRFS_REF_TYPE_DATA = 2,
  BTRFS_REF_TYPE_ANY = 3,
};

enum btrfs_ref_type {
  BTRFS_REF_NOT_SET = 0,
  BTRFS_REF_DATA = 1,
  BTRFS_REF_METADATA = 2,
  BTRFS_REF_LAST = 3,
};

struct btrfs_data_ref {
  u64 ref_root;
  u64 ino;
  u64 offset;
};

struct btrfs_tree_ref {
  int level;
  u64 root;
};

struct btrfs_ref {
  enum btrfs_ref_type type;
  int action;
  bool skip_qgroup;
  u64 real_root;
  u64 bytenr;
  u64 len;
  u64 parent;
  union {
    struct btrfs_data_ref data_ref;
    struct btrfs_tree_ref tree_ref;
  };
};

struct btrfs_bio {
  refcount_t refs;
  atomic_t stripes_pending;
  struct btrfs_fs_info* fs_info;
  u64 map_type;
  bio_end_io_t* end_io;
  struct bio* orig_bio;
  void* private;
  atomic_t error;
  int max_errors;
  int num_stripes;
  int mirror_num;
  int num_tgtdevs;
  int* tgtdev_map;
  u64* raid_map;
  struct btrfs_bio_stripe stripes[0];
};

enum btrfs_map_op {
  BTRFS_MAP_READ = 0,
  BTRFS_MAP_WRITE = 1,
  BTRFS_MAP_DISCARD = 2,
  BTRFS_MAP_GET_READ_MIRRORS = 3,
};

enum btrfs_chunk_alloc_enum {
  CHUNK_ALLOC_NO_FORCE = 0,
  CHUNK_ALLOC_LIMITED = 1,
  CHUNK_ALLOC_FORCE = 2,
};

enum btrfs_loop_type {
  LOOP_CACHING_NOWAIT = 0,
  LOOP_CACHING_WAIT = 1,
  LOOP_ALLOC_CHUNK = 2,
  LOOP_NO_EMPTY_SIZE = 3,
};

enum btrfs_extent_allocation_policy {
  BTRFS_EXTENT_ALLOC_CLUSTERED = 0,
  BTRFS_EXTENT_ALLOC_ZONED = 1,
};

struct find_free_extent_ctl {
  u64 num_bytes;
  u64 empty_size;
  u64 flags;
  int delalloc;
  u64 search_start;
  u64 empty_cluster;
  struct btrfs_free_cluster* last_ptr;
  bool use_cluster;
  bool have_caching_bg;
  bool orig_have_caching_bg;
  bool for_treelog;
  int index;
  int loop;
  bool retry_clustered;
  bool retry_unclustered;
  int cached;
  u64 max_extent_size;
  u64 total_free_space;
  u64 found_offset;
  u64 hint_byte;
  enum btrfs_extent_allocation_policy policy;
};

struct walk_control {
  u64 refs[8];
  u64 flags[8];
  struct btrfs_key update_progress;
  struct btrfs_key drop_progress;
  short : 16;
  int drop_level;
  int stage;
  int level;
  int shared_level;
  int update_ref;
  int keep_locks;
  int reada_slot;
  int reada_count;
  int restarted;
} __attribute__((packed));

struct btrfs_stripe {
  __le64 devid;
  __le64 offset;
  __u8 dev_uuid[16];
};

struct btrfs_chunk {
  __le64 length;
  __le64 owner;
  __le64 stripe_len;
  __le64 type;
  __le32 io_align;
  __le32 io_width;
  __le32 sector_size;
  __le16 num_stripes;
  __le16 sub_stripes;
  struct btrfs_stripe stripe;
};

struct btrfs_dev_extent {
  __le64 chunk_tree;
  __le64 chunk_objectid;
  __le64 chunk_offset;
  __le64 length;
  __u8 chunk_tree_uuid[16];
};

struct btrfs_block_group_item {
  __le64 used;
  __le64 chunk_objectid;
  __le64 flags;
};

struct root_name_map {
  u64 id;
  char name[16];
};

struct btrfs_csum_item {
  __u8 csum;
};

struct btrfs_ordered_sum {
  u64 bytenr;
  int len;
  struct list_head list;
  u8 sums[0];
};

struct btrfs_io_bio {
  unsigned int mirror_num;
  struct btrfs_device* device;
  u64 logical;
  u8* csum;
  u8 csum_inline[64];
  struct bvec_iter iter;
  struct bio bio;
};

struct btrfs_inode_extref {
  __le64 parent_objectid;
  __le64 index;
  __le16 name_len;
  __u8 name[0];
} __attribute__((packed));

typedef blk_status_t extent_submit_bio_start_t(struct inode*, struct bio*, u64);

enum {
  BTRFS_BLOCK_RSV_GLOBAL = 0,
  BTRFS_BLOCK_RSV_DELALLOC = 1,
  BTRFS_BLOCK_RSV_TRANS = 2,
  BTRFS_BLOCK_RSV_CHUNK = 3,
  BTRFS_BLOCK_RSV_DELOPS = 4,
  BTRFS_BLOCK_RSV_DELREFS = 5,
  BTRFS_BLOCK_RSV_EMPTY = 6,
  BTRFS_BLOCK_RSV_TEMP = 7,
};

enum btrfs_wq_endio_type {
  BTRFS_WQ_ENDIO_DATA = 0,
  BTRFS_WQ_ENDIO_METADATA = 1,
  BTRFS_WQ_ENDIO_FREE_SPACE = 2,
  BTRFS_WQ_ENDIO_RAID56 = 3,
};

enum {
  BTRFS_INODE_FLUSH_ON_CLOSE = 0,
  BTRFS_INODE_DUMMY = 1,
  BTRFS_INODE_IN_DEFRAG = 2,
  BTRFS_INODE_HAS_ASYNC_EXTENT = 3,
  BTRFS_INODE_NEEDS_FULL_SYNC = 4,
  BTRFS_INODE_COPY_EVERYTHING = 5,
  BTRFS_INODE_IN_DELALLOC_LIST = 6,
  BTRFS_INODE_HAS_PROPS = 7,
  BTRFS_INODE_SNAPSHOT_FLUSH = 8,
  BTRFS_INODE_NO_XATTRS = 9,
  BTRFS_INODE_NO_DELALLOC_FLUSH = 10,
  BTRFS_INODE_APPEND_WRITE = 11,
};

enum btrfs_disk_cache_state {
  BTRFS_DC_WRITTEN = 0,
  BTRFS_DC_ERROR = 1,
  BTRFS_DC_CLEAR = 2,
  BTRFS_DC_SETUP = 3,
};

struct btrfs_end_io_wq {
  struct bio* bio;
  bio_end_io_t* end_io;
  void* private;
  struct btrfs_fs_info* info;
  blk_status_t status;
  enum btrfs_wq_endio_type metadata;
  struct btrfs_work work;
};

struct async_submit_bio {
  struct inode* inode;
  struct bio* bio;
  extent_submit_bio_start_t* submit_bio_start;
  int mirror_num;
  u64 dio_file_offset;
  struct btrfs_work work;
  blk_status_t status;
};

struct btrfs_qgroup_limit {
  __u64 flags;
  __u64 max_rfer;
  __u64 max_excl;
  __u64 rsv_rfer;
  __u64 rsv_excl;
};

struct btrfs_qgroup_inherit {
  __u64 flags;
  __u64 num_qgroups;
  __u64 num_ref_copies;
  __u64 num_excl_copies;
  struct btrfs_qgroup_limit lim;
  __u64 qgroups[0];
};

enum btrfs_delayed_ref_flags {
  BTRFS_DELAYED_REFS_FLUSHING = 0,
};

struct btrfs_pending_snapshot {
  struct dentry* dentry;
  struct inode* dir;
  struct btrfs_root* root;
  struct btrfs_root_item* root_item;
  struct btrfs_root* snap;
  struct btrfs_qgroup_inherit* inherit;
  struct btrfs_path* path;
  struct btrfs_block_rsv block_rsv;
  int error;
  dev_t anon_dev;
  bool readonly;
  struct list_head list;
};

struct btrfs_async_commit {
  struct btrfs_trans_handle* newtrans;
  struct work_struct work;
};

struct extent_changeset {
  unsigned int bytes_changed;
  struct ulist range_changed;
};

enum btrfs_orphan_cleanup_state {
  ORPHAN_CLEANUP_STARTED = 1,
  ORPHAN_CLEANUP_DONE = 2,
};

struct btrfs_swapfile_pin {
  struct rb_node node;
  void* ptr;
  struct inode* inode;
  bool is_block_group;
  int bg_extent_count;
};

struct btrfs_replace_extent_info {
  u64 disk_offset;
  u64 disk_len;
  u64 data_offset;
  u64 data_len;
  u64 file_offset;
  char* extent_buf;
  bool is_new_extent;
  int qgroup_reserved;
  int insertions;
};

struct btrfs_drop_extents_args {
  struct btrfs_path* path;
  u64 start;
  u64 end;
  bool drop_cache;
  bool replace_extent;
  u32 extent_item_size;
  u64 drop_end;
  u64 bytes_found;
  bool extent_inserted;
};

struct btrfs_file_private {
  void* filldir_buf;
};

struct btrfs_dio_private {
  struct inode* inode;
  u64 logical_offset;
  u64 disk_bytenr;
  u32 bytes;
  refcount_t refs;
  struct bio* dio_bio;
  u8 csums[0];
};

struct btrfs_io_geometry {
  u64 len;
  u64 offset;
  u64 stripe_len;
  u64 stripe_nr;
  u64 stripe_offset;
  u64 raid56_stripe_offset;
};

struct btrfs_iget_args {
  u64 ino;
  struct btrfs_root* root;
};

struct btrfs_dio_data {
  u64 reserve;
  loff_t length;
  ssize_t submitted;
  struct extent_changeset* data_reserved;
};

struct async_extent {
  u64 start;
  u64 ram_size;
  u64 compressed_size;
  struct page** pages;
  long unsigned int nr_pages;
  int compress_type;
  struct list_head list;
};

struct async_chunk {
  struct inode* inode;
  struct page* locked_page;
  u64 start;
  u64 end;
  unsigned int write_flags;
  struct list_head extents;
  struct cgroup_subsys_state* blkcg_css;
  struct btrfs_work work;
  atomic_t* pending;
};

struct async_cow {
  atomic_t num_chunks;
  struct async_chunk chunks[0];
};

struct btrfs_writepage_fixup {
  struct page* page;
  struct inode* inode;
  struct btrfs_work work;
};

struct dir_entry___2 {
  u64 ino;
  u64 offset;
  unsigned int type;
  int name_len;
};

struct btrfs_delalloc_work {
  struct inode* inode;
  int sync_mode;
  struct completion completion;
  struct list_head list;
  struct btrfs_work work;
};

struct btrfs_swap_info {
  u64 start;
  u64 block_start;
  u64 block_len;
  u64 lowest_ppage;
  u64 highest_ppage;
  long unsigned int nr_pages;
  int nr_extents;
};

struct btrfs_ioctl_defrag_range_args {
  __u64 start;
  __u64 len;
  __u64 flags;
  __u32 extent_thresh;
  __u32 compress_type;
  __u32 unused[4];
};

struct btrfs_log_ctx {
  int log_ret;
  int log_transid;
  bool log_new_dentries;
  bool logging_new_name;
  struct inode* inode;
  struct list_head list;
  struct list_head ordered_extents;
};

struct inode_defrag {
  struct rb_node rb_node;
  u64 ino;
  u64 transid;
  u64 root;
  u64 last_offset;
  int cycled;
};

struct falloc_range {
  struct list_head list;
  u64 start;
  u64 len;
};

enum {
  RANGE_BOUNDARY_WRITTEN_EXTENT = 0,
  RANGE_BOUNDARY_PREALLOC_EXTENT = 1,
  RANGE_BOUNDARY_HOLE = 2,
};

struct iomap_dio___2;

enum btrfs_feature_set {
  FEAT_COMPAT = 0,
  FEAT_COMPAT_RO = 1,
  FEAT_INCOMPAT = 2,
  FEAT_MAX = 3,
};

struct btrfs_feature_attr {
  struct kobj_attribute kobj_attr;
  enum btrfs_feature_set feature_set;
  u64 feature_bit;
};

struct raid_kobject {
  u64 flags;
  struct kobject kobj;
};

typedef blk_status_t
submit_bio_hook_t(struct inode*, struct bio*, int, long unsigned int);

struct btrfs_subpage {
  spinlock_t lock;
  u16 uptodate_bitmap;
  u16 error_bitmap;
  union {
    atomic_t eb_refs;
    struct {
      atomic_t readers;
    };
  };
};

enum btrfs_subpage_type {
  BTRFS_SUBPAGE_METADATA = 0,
  BTRFS_SUBPAGE_DATA = 1,
};

struct tree_entry {
  u64 start;
  u64 end;
  struct rb_node rb_node;
};

struct extent_page_data {
  struct bio* bio;
  unsigned int extent_locked : 1;
  unsigned int sync_io : 1;
};

struct processed_extent {
  struct btrfs_inode* inode;
  u64 start;
  u64 end;
  bool uptodate;
};

struct fiemap_cache {
  u64 offset;
  u64 phys;
  u64 len;
  u32 flags;
  bool cached;
};

struct raid6_calls {
  void (*gen_syndrome)(int, size_t, void**);
  void (*xor_syndrome)(int, int, int, size_t, void**);
  int (*valid)();
  const char* name;
  int prefer;
};

struct raid6_recov_calls {
  void (*data2)(int, size_t, int, int, void**);
  void (*datap)(int, size_t, int, void**);
  int (*valid)();
  const char* name;
  int priority;
};

struct btrfs_ioctl_balance_args {
  __u64 flags;
  __u64 state;
  struct btrfs_balance_args data;
  struct btrfs_balance_args meta;
  struct btrfs_balance_args sys;
  struct btrfs_balance_progress stat;
  __u64 unused[72];
};

struct btrfs_ioctl_get_dev_stats {
  __u64 devid;
  __u64 nr_items;
  __u64 flags;
  __u64 values[5];
  __u64 unused[121];
};

enum btrfs_err_code {
  BTRFS_ERROR_DEV_RAID1_MIN_NOT_MET = 1,
  BTRFS_ERROR_DEV_RAID10_MIN_NOT_MET = 2,
  BTRFS_ERROR_DEV_RAID5_MIN_NOT_MET = 3,
  BTRFS_ERROR_DEV_RAID6_MIN_NOT_MET = 4,
  BTRFS_ERROR_DEV_TGT_REPLACE = 5,
  BTRFS_ERROR_DEV_MISSING_NOT_FOUND = 6,
  BTRFS_ERROR_DEV_ONLY_WRITABLE = 7,
  BTRFS_ERROR_DEV_EXCL_RUN_IN_PROGRESS = 8,
  BTRFS_ERROR_DEV_RAID1C3_MIN_NOT_MET = 9,
  BTRFS_ERROR_DEV_RAID1C4_MIN_NOT_MET = 10,
};

struct btrfs_disk_balance_args {
  __le64 profiles;
  union {
    __le64 usage;
    struct {
      __le32 usage_min;
      __le32 usage_max;
    };
  };
  __le64 devid;
  __le64 pstart;
  __le64 pend;
  __le64 vstart;
  __le64 vend;
  __le64 target;
  __le64 flags;
  union {
    __le64 limit;
    struct {
      __le32 limit_min;
      __le32 limit_max;
    };
  };
  __le32 stripes_min;
  __le32 stripes_max;
  __le64 unused[6];
};

struct btrfs_balance_item {
  __le64 flags;
  struct btrfs_disk_balance_args data;
  struct btrfs_disk_balance_args meta;
  struct btrfs_disk_balance_args sys;
  __le64 unused[4];
};

struct btrfs_dev_stats_item {
  __le64 values[5];
};

struct alloc_chunk_ctl {
  u64 start;
  u64 type;
  int num_stripes;
  int sub_stripes;
  int dev_stripes;
  int devs_max;
  int devs_min;
  int devs_increment;
  int ncopies;
  int nparity;
  u64 max_stripe_size;
  u64 max_chunk_size;
  u64 dev_extent_min;
  u64 stripe_size;
  u64 chunk_size;
  int ndevs;
};

struct btrfs_workqueue {
  struct __btrfs_workqueue* normal;
  struct __btrfs_workqueue* high;
};

enum {
  WORK_DONE_BIT = 0,
  WORK_ORDER_DONE_BIT = 1,
  WORK_HIGH_PRIO_BIT = 2,
};

struct btrfs_ioctl_qgroup_limit_args {
  __u64 qgroupid;
  struct btrfs_qgroup_limit lim;
};

struct btrfs_ioctl_vol_args_v2 {
  __s64 fd;
  __u64 transid;
  __u64 flags;
  union {
    struct {
      __u64 size;
      struct btrfs_qgroup_inherit* qgroup_inherit;
    };
    __u64 unused[4];
  };
  union {
    char name[4040];
    __u64 devid;
    __u64 subvolid;
  };
};

struct btrfs_ioctl_scrub_args {
  __u64 devid;
  __u64 start;
  __u64 end;
  __u64 flags;
  struct btrfs_scrub_progress progress;
  __u64 unused[109];
};

struct btrfs_ioctl_dev_replace_start_params {
  __u64 srcdevid;
  __u64 cont_reading_from_srcdev_mode;
  __u8 srcdev_name[1025];
  __u8 tgtdev_name[1025];
};

struct btrfs_ioctl_dev_replace_status_params {
  __u64 replace_state;
  __u64 progress_1000;
  __u64 time_started;
  __u64 time_stopped;
  __u64 num_write_errors;
  __u64 num_uncorrectable_read_errors;
};

struct btrfs_ioctl_dev_replace_args {
  __u64 cmd;
  __u64 result;
  union {
    struct btrfs_ioctl_dev_replace_start_params start;
    struct btrfs_ioctl_dev_replace_status_params status;
  };
  __u64 spare[64];
};

struct btrfs_ioctl_dev_info_args {
  __u64 devid;
  __u8 uuid[16];
  __u64 bytes_used;
  __u64 total_bytes;
  __u64 unused[379];
  __u8 path[1024];
};

struct btrfs_ioctl_fs_info_args {
  __u64 max_id;
  __u64 num_devices;
  __u8 fsid[16];
  __u32 nodesize;
  __u32 sectorsize;
  __u32 clone_alignment;
  __u16 csum_type;
  __u16 csum_size;
  __u64 flags;
  __u64 generation;
  __u8 metadata_uuid[16];
  __u8 reserved[944];
};

struct btrfs_ioctl_feature_flags {
  __u64 compat_flags;
  __u64 compat_ro_flags;
  __u64 incompat_flags;
};

struct btrfs_ioctl_ino_lookup_args {
  __u64 treeid;
  __u64 objectid;
  char name[4080];
};

struct btrfs_ioctl_ino_lookup_user_args {
  __u64 dirid;
  __u64 treeid;
  char name[256];
  char path[3824];
};

struct btrfs_ioctl_search_key {
  __u64 tree_id;
  __u64 min_objectid;
  __u64 max_objectid;
  __u64 min_offset;
  __u64 max_offset;
  __u64 min_transid;
  __u64 max_transid;
  __u32 min_type;
  __u32 max_type;
  __u32 nr_items;
  __u32 unused;
  __u64 unused1;
  __u64 unused2;
  __u64 unused3;
  __u64 unused4;
};

struct btrfs_ioctl_search_header {
  __u64 transid;
  __u64 objectid;
  __u64 offset;
  __u32 type;
  __u32 len;
};

struct btrfs_ioctl_search_args {
  struct btrfs_ioctl_search_key key;
  char buf[3992];
};

struct btrfs_ioctl_search_args_v2 {
  struct btrfs_ioctl_search_key key;
  __u64 buf_size;
  __u64 buf[0];
};

struct btrfs_ioctl_space_info {
  __u64 flags;
  __u64 total_bytes;
  __u64 used_bytes;
};

struct btrfs_ioctl_space_args {
  __u64 space_slots;
  __u64 total_spaces;
  struct btrfs_ioctl_space_info spaces[0];
};

struct btrfs_data_container {
  __u32 bytes_left;
  __u32 bytes_missing;
  __u32 elem_cnt;
  __u32 elem_missed;
  __u64 val[0];
};

struct btrfs_ioctl_ino_path_args {
  __u64 inum;
  __u64 size;
  __u64 reserved[4];
  __u64 fspath;
};

struct btrfs_ioctl_logical_ino_args {
  __u64 logical;
  __u64 size;
  __u64 reserved[3];
  __u64 flags;
  __u64 inodes;
};

struct btrfs_ioctl_quota_ctl_args {
  __u64 cmd;
  __u64 status;
};

struct btrfs_ioctl_quota_rescan_args {
  __u64 flags;
  __u64 progress;
  __u64 reserved[6];
};

struct btrfs_ioctl_qgroup_assign_args {
  __u64 assign;
  __u64 src;
  __u64 dst;
};

struct btrfs_ioctl_qgroup_create_args {
  __u64 create;
  __u64 qgroupid;
};

struct btrfs_ioctl_timespec {
  __u64 sec;
  __u32 nsec;
};

struct btrfs_ioctl_received_subvol_args {
  char uuid[16];
  __u64 stransid;
  __u64 rtransid;
  struct btrfs_ioctl_timespec stime;
  struct btrfs_ioctl_timespec rtime;
  __u64 flags;
  __u64 reserved[16];
};

struct btrfs_ioctl_send_args {
  __s64 send_fd;
  __u64 clone_sources_count;
  __u64* clone_sources;
  __u64 parent_root;
  __u64 flags;
  __u64 reserved[4];
};

struct btrfs_ioctl_get_subvol_info_args {
  __u64 treeid;
  char name[256];
  __u64 parent_id;
  __u64 dirid;
  __u64 generation;
  __u64 flags;
  __u8 uuid[16];
  __u8 parent_uuid[16];
  __u8 received_uuid[16];
  __u64 ctransid;
  __u64 otransid;
  __u64 stransid;
  __u64 rtransid;
  struct btrfs_ioctl_timespec ctime;
  struct btrfs_ioctl_timespec otime;
  struct btrfs_ioctl_timespec stime;
  struct btrfs_ioctl_timespec rtime;
  __u64 reserved[8];
};

struct btrfs_ioctl_get_subvol_rootref_args {
  __u64 min_treeid;
  struct {
    __u64 treeid;
    __u64 dirid;
  } rootref[255];
  __u8 num_items;
  __u8 align[7];
};

struct inode_fs_paths {
  struct btrfs_path* btrfs_path;
  struct btrfs_root* fs_root;
  struct btrfs_data_container* fspath;
};

struct btrfs_ioctl_timespec_32 {
  __u64 sec;
  __u32 nsec;
} __attribute__((packed));

struct btrfs_ioctl_received_subvol_args_32 {
  char uuid[16];
  __u64 stransid;
  __u64 rtransid;
  struct btrfs_ioctl_timespec_32 stime;
  struct btrfs_ioctl_timespec_32 rtime;
  __u64 flags;
  __u64 reserved[16];
} __attribute__((packed));

struct btrfs_ioctl_send_args_32 {
  __s64 send_fd;
  __u64 clone_sources_count;
  compat_uptr_t clone_sources;
  __u64 parent_root;
  __u64 flags;
  __u64 reserved[4];
} __attribute__((packed));

struct btrfs_trans_handle___2;

struct btrfs_fid {
  u64 objectid;
  u64 root_objectid;
  u32 gen;
  u64 parent_objectid;
  u32 parent_gen;
  u64 parent_root_objectid;
} __attribute__((packed));

struct btrfs_dir_log_item {
  __le64 end;
};

enum {
  LOG_INODE_ALL = 0,
  LOG_INODE_EXISTS = 1,
  LOG_OTHER_INODE = 2,
  LOG_OTHER_INODE_ALL = 3,
};

enum {
  LOG_WALK_PIN_ONLY = 0,
  LOG_WALK_REPLAY_INODES = 1,
  LOG_WALK_REPLAY_DIR_INDEX = 2,
  LOG_WALK_REPLAY_ALL = 3,
};

struct walk_control___2 {
  int free;
  int write;
  int wait;
  int pin;
  int stage;
  bool ignore_cur_inode;
  struct btrfs_root* replay_dest;
  struct btrfs_trans_handle* trans;
  int (*process_func)(
      struct btrfs_root*,
      struct extent_buffer*,
      struct walk_control___2*,
      u64,
      int);
};

struct btrfs_ino_list {
  u64 ino;
  u64 parent;
  struct list_head list;
};

struct btrfs_dir_list {
  u64 ino;
  struct list_head list;
};

struct btrfs_free_space_entry {
  __le64 offset;
  __le64 bytes;
  __u8 type;
} __attribute__((packed));

struct btrfs_free_space_header {
  struct btrfs_disk_key location;
  __le64 generation;
  __le64 num_entries;
  __le64 num_bitmaps;
} __attribute__((packed));

struct btrfs_trim_range {
  u64 start;
  u64 bytes;
  struct list_head list;
};

typedef unsigned char Byte;

typedef long unsigned int uLong;

struct internal_state;

struct z_stream_s {
  const Byte* next_in;
  uLong avail_in;
  uLong total_in;
  Byte* next_out;
  uLong avail_out;
  uLong total_out;
  char* msg;
  struct internal_state* state;
  void* workspace;
  int data_type;
  uLong adler;
  uLong reserved;
};

struct internal_state {
  int dummy;
};

typedef struct z_stream_s z_stream;

struct compressed_bio {
  refcount_t pending_bios;
  struct page** compressed_pages;
  struct inode* inode;
  u64 start;
  long unsigned int len;
  long unsigned int compressed_len;
  int compress_type;
  long unsigned int nr_pages;
  int errors;
  int mirror_num;
  struct bio* orig_bio;
  u8 sums[0];
};

struct workspace {
  z_stream strm;
  char* buf;
  unsigned int buf_size;
  struct list_head list;
  int level;
};

struct workspace___2 {
  void* mem;
  void* buf;
  void* cbuf;
  struct list_head list;
};

typedef enum {
  ZSTD_error_no_error = 0,
  ZSTD_error_GENERIC = 1,
  ZSTD_error_prefix_unknown = 2,
  ZSTD_error_version_unsupported = 3,
  ZSTD_error_parameter_unknown = 4,
  ZSTD_error_frameParameter_unsupported = 5,
  ZSTD_error_frameParameter_unsupportedBy32bits = 6,
  ZSTD_error_frameParameter_windowTooLarge = 7,
  ZSTD_error_compressionParameter_unsupported = 8,
  ZSTD_error_init_missing = 9,
  ZSTD_error_memory_allocation = 10,
  ZSTD_error_stage_wrong = 11,
  ZSTD_error_dstSize_tooSmall = 12,
  ZSTD_error_srcSize_wrong = 13,
  ZSTD_error_corruption_detected = 14,
  ZSTD_error_checksum_wrong = 15,
  ZSTD_error_tableLog_tooLarge = 16,
  ZSTD_error_maxSymbolValue_tooLarge = 17,
  ZSTD_error_maxSymbolValue_tooSmall = 18,
  ZSTD_error_dictionary_corrupted = 19,
  ZSTD_error_dictionary_wrong = 20,
  ZSTD_error_dictionaryCreation_failed = 21,
  ZSTD_error_maxCode = 22,
} ZSTD_ErrorCode;

typedef enum {
  ZSTD_fast = 0,
  ZSTD_dfast = 1,
  ZSTD_greedy = 2,
  ZSTD_lazy = 3,
  ZSTD_lazy2 = 4,
  ZSTD_btlazy2 = 5,
  ZSTD_btopt = 6,
  ZSTD_btopt2 = 7,
} ZSTD_strategy;

typedef struct {
  unsigned int windowLog;
  unsigned int chainLog;
  unsigned int hashLog;
  unsigned int searchLog;
  unsigned int searchLength;
  unsigned int targetLength;
  ZSTD_strategy strategy;
} ZSTD_compressionParameters;

typedef struct {
  unsigned int contentSizeFlag;
  unsigned int checksumFlag;
  unsigned int noDictIDFlag;
} ZSTD_frameParameters;

typedef struct {
  ZSTD_compressionParameters cParams;
  ZSTD_frameParameters fParams;
} ZSTD_parameters;

struct ZSTD_inBuffer_s {
  const void* src;
  size_t size;
  size_t pos;
};

typedef struct ZSTD_inBuffer_s ZSTD_inBuffer;

struct ZSTD_outBuffer_s {
  void* dst;
  size_t size;
  size_t pos;
};

typedef struct ZSTD_outBuffer_s ZSTD_outBuffer;

struct ZSTD_CStream_s;

typedef struct ZSTD_CStream_s ZSTD_CStream;

struct ZSTD_DStream_s;

typedef struct ZSTD_DStream_s ZSTD_DStream;

struct workspace___3 {
  void* mem;
  size_t size;
  char* buf;
  unsigned int level;
  unsigned int req_level;
  long unsigned int last_used;
  struct list_head list;
  struct list_head lru_list;
  ZSTD_inBuffer in_buf;
  ZSTD_outBuffer out_buf;
};

struct zstd_workspace_manager {
  const struct btrfs_compress_op* ops;
  spinlock_t lock;
  struct list_head lru_list;
  struct list_head idle_ws[15];
  long unsigned int active_map;
  wait_queue_head_t wait;
  struct timer_list timer;
};

struct bucket_item {
  u32 count;
};

struct heuristic_ws {
  u8* sample;
  u32 sample_size;
  struct bucket_item* bucket;
  struct bucket_item* bucket_b;
  struct list_head list;
};

struct btrfs_seq_list {
  struct list_head list;
  u64 seq;
};

struct ulist_iterator {
  struct list_head* cur_list;
};

struct ulist_node {
  u64 val;
  u64 aux;
  struct list_head list;
  struct rb_node rb_node;
};

struct btrfs_backref_node;

struct btrfs_backref_cache {
  struct rb_root rb_root;
  struct btrfs_backref_node* path[8];
  struct list_head pending[8];
  struct list_head leaves;
  struct list_head changed;
  struct list_head detached;
  u64 last_trans;
  int nr_nodes;
  int nr_edges;
  struct list_head pending_edge;
  struct list_head useless_node;
  struct btrfs_fs_info* fs_info;
  unsigned int is_reloc;
};

struct file_extent_cluster {
  u64 start;
  u64 end;
  u64 boundary[128];
  unsigned int nr;
};

struct mapping_tree {
  struct rb_root rb_root;
  spinlock_t lock;
};

struct reloc_control {
  struct btrfs_block_group* block_group;
  struct btrfs_root* extent_root;
  struct inode* data_inode;
  struct btrfs_block_rsv* block_rsv;
  struct btrfs_backref_cache backref_cache;
  struct file_extent_cluster cluster;
  struct extent_io_tree processed_blocks;
  struct mapping_tree reloc_root_tree;
  struct list_head reloc_roots;
  struct list_head dirty_subvol_roots;
  u64 merging_rsv_size;
  u64 nodes_relocated;
  u64 reserved_bytes;
  u64 search_start;
  u64 extents_found;
  unsigned int stage : 8;
  unsigned int create_reloc_tree : 1;
  unsigned int merge_reloc_tree : 1;
  unsigned int found_file_extent : 1;
};

struct btrfs_backref_iter {
  u64 bytenr;
  struct btrfs_path* path;
  struct btrfs_fs_info* fs_info;
  struct btrfs_key cur_key;
  u32 item_ptr;
  u32 cur_ptr;
  u32 end_ptr;
};

struct btrfs_backref_node {
  struct {
    struct rb_node rb_node;
    u64 bytenr;
  };
  u64 new_bytenr;
  u64 owner;
  struct list_head list;
  struct list_head upper;
  struct list_head lower;
  struct btrfs_root* root;
  struct extent_buffer* eb;
  unsigned int level : 8;
  unsigned int cowonly : 1;
  unsigned int lowest : 1;
  unsigned int locked : 1;
  unsigned int processed : 1;
  unsigned int checked : 1;
  unsigned int pending : 1;
  unsigned int detached : 1;
  unsigned int is_reloc_root : 1;
};

struct btrfs_backref_edge {
  struct list_head list[2];
  struct btrfs_backref_node* node[2];
};

struct rb_simple_node {
  struct rb_node rb_node;
  u64 bytenr;
};

struct mapping_node {
  struct {
    struct rb_node rb_node;
    u64 bytenr;
  };
  void* data;
};

struct tree_block {
  struct {
    struct rb_node rb_node;
    u64 bytenr;
  };
  u64 owner;
  struct btrfs_key key;
  unsigned int level : 8;
  unsigned int key_ready : 1;
};

struct btrfs_delayed_item {
  struct rb_node rb_node;
  struct btrfs_key key;
  struct list_head tree_list;
  struct list_head readdir_list;
  u64 bytes_reserved;
  struct btrfs_delayed_node* delayed_node;
  refcount_t refs;
  int ins_or_del;
  u32 data_len;
  char data[0];
};

struct btrfs_async_delayed_work {
  struct btrfs_delayed_root* delayed_root;
  int nr;
  struct btrfs_work work;
};

struct reada_control {
  struct btrfs_fs_info* fs_info;
  struct btrfs_key key_start;
  struct btrfs_key key_end;
  short : 16;
  atomic_t elems;
  struct kref refcnt;
  int : 32;
  wait_queue_head_t wait;
} __attribute__((packed));

struct scrub_bio;

struct scrub_ctx {
  struct scrub_bio* bios[64];
  struct btrfs_fs_info* fs_info;
  int first_free;
  int curr;
  atomic_t bios_in_flight;
  atomic_t workers_pending;
  spinlock_t list_lock;
  wait_queue_head_t list_wait;
  struct list_head csum_list;
  atomic_t cancel_req;
  int readonly;
  int pages_per_rd_bio;
  int is_dev_replace;
  u64 write_pointer;
  struct scrub_bio* wr_curr_bio;
  struct mutex wr_lock;
  int pages_per_wr_bio;
  struct btrfs_device* wr_tgtdev;
  bool flush_all_writes;
  struct btrfs_scrub_progress stat;
  spinlock_t stat_lock;
  refcount_t refs;
};

struct scrub_recover {
  refcount_t refs;
  struct btrfs_bio* bbio;
  u64 map_length;
};

struct scrub_block;

struct scrub_page {
  struct scrub_block* sblock;
  struct page* page;
  struct btrfs_device* dev;
  struct list_head list;
  u64 flags;
  u64 generation;
  u64 logical;
  u64 physical;
  u64 physical_for_dev_replace;
  atomic_t refs;
  u8 mirror_num;
  int have_csum : 1;
  int io_error : 1;
  u8 csum[32];
  struct scrub_recover* recover;
};

struct scrub_parity;

struct scrub_block {
  struct scrub_page* pagev[16];
  int page_count;
  atomic_t outstanding_pages;
  refcount_t refs;
  struct scrub_ctx* sctx;
  struct scrub_parity* sparity;
  struct {
    unsigned int header_error : 1;
    unsigned int checksum_error : 1;
    unsigned int no_io_error_seen : 1;
    unsigned int generation_error : 1;
    unsigned int data_corrected : 1;
  };
  struct btrfs_work work;
};

struct scrub_bio {
  int index;
  struct scrub_ctx* sctx;
  struct btrfs_device* dev;
  struct bio* bio;
  blk_status_t status;
  u64 logical;
  u64 physical;
  struct scrub_page* pagev[32];
  int page_count;
  int next_free;
  struct btrfs_work work;
};

struct scrub_parity {
  struct scrub_ctx* sctx;
  struct btrfs_device* scrub_dev;
  u64 logic_start;
  u64 logic_end;
  int nsectors;
  u32 stripe_len;
  refcount_t refs;
  struct list_head spages;
  struct btrfs_work work;
  long unsigned int* dbitmap;
  long unsigned int* ebitmap;
  long unsigned int bitmap[0];
};

struct scrub_warning {
  struct btrfs_path* path;
  u64 extent_item_size;
  const char* errstr;
  u64 physical;
  u64 logical;
  struct btrfs_device* dev;
};

struct full_stripe_lock {
  struct rb_node node;
  u64 logical;
  u64 refs;
  struct mutex mutex;
};

struct btrfs_raid_bio;

struct reada_zone {
  u64 start;
  u64 end;
  u64 elems;
  struct list_head list;
  spinlock_t lock;
  int locked;
  struct btrfs_device* device;
  struct btrfs_device* devs[5];
  int ndevs;
  struct kref refcnt;
};

struct reada_extctl {
  struct list_head list;
  struct reada_control* rc;
  u64 generation;
};

struct reada_extent {
  u64 logical;
  u64 owner_root;
  struct btrfs_key top;
  struct list_head extctl;
  int refcnt;
  spinlock_t lock;
  struct reada_zone* zones[5];
  int nzones;
  int scheduled;
  int level;
};

struct reada_machine_work {
  struct btrfs_work work;
  struct btrfs_fs_info* fs_info;
};

typedef int iterate_extent_inodes_t(u64, u64, u64, void*);

struct extent_inode_elem {
  u64 inum;
  u64 offset;
  struct extent_inode_elem* next;
};

struct preftree {
  struct rb_root_cached root;
  unsigned int count;
};

struct preftrees {
  struct preftree direct;
  struct preftree indirect;
  struct preftree indirect_missing_keys;
};

struct share_check {
  u64 root_objectid;
  u64 inum;
  int share_count;
};

typedef int
iterate_irefs_t(u64, u32, long unsigned int, struct extent_buffer*, void*);

struct btrfs_qgroup_status_item {
  __le64 version;
  __le64 generation;
  __le64 flags;
  __le64 rescan;
};

struct btrfs_qgroup_info_item {
  __le64 generation;
  __le64 rfer;
  __le64 rfer_cmpr;
  __le64 excl;
  __le64 excl_cmpr;
};

struct btrfs_qgroup_limit_item {
  __le64 flags;
  __le64 max_rfer;
  __le64 max_excl;
  __le64 rsv_rfer;
  __le64 rsv_excl;
};

struct btrfs_qgroup_swapped_block {
  struct rb_node node;
  int level;
  bool trace_leaf;
  u64 subvol_bytenr;
  u64 subvol_generation;
  u64 reloc_bytenr;
  u64 reloc_generation;
  u64 last_snapshot;
  struct btrfs_key first_key;
};

struct btrfs_qgroup_list {
  struct list_head next_group;
  struct list_head next_member;
  struct btrfs_qgroup* group;
  struct btrfs_qgroup* member;
};

struct btrfs_stream_header {
  char magic[13];
  __le32 version;
} __attribute__((packed));

struct btrfs_cmd_header {
  __le32 len;
  __le16 cmd;
  __le32 crc;
} __attribute__((packed));

struct btrfs_tlv_header {
  __le16 tlv_type;
  __le16 tlv_len;
};

enum btrfs_send_cmd {
  BTRFS_SEND_C_UNSPEC = 0,
  BTRFS_SEND_C_SUBVOL = 1,
  BTRFS_SEND_C_SNAPSHOT = 2,
  BTRFS_SEND_C_MKFILE = 3,
  BTRFS_SEND_C_MKDIR = 4,
  BTRFS_SEND_C_MKNOD = 5,
  BTRFS_SEND_C_MKFIFO = 6,
  BTRFS_SEND_C_MKSOCK = 7,
  BTRFS_SEND_C_SYMLINK = 8,
  BTRFS_SEND_C_RENAME = 9,
  BTRFS_SEND_C_LINK = 10,
  BTRFS_SEND_C_UNLINK = 11,
  BTRFS_SEND_C_RMDIR = 12,
  BTRFS_SEND_C_SET_XATTR = 13,
  BTRFS_SEND_C_REMOVE_XATTR = 14,
  BTRFS_SEND_C_WRITE = 15,
  BTRFS_SEND_C_CLONE = 16,
  BTRFS_SEND_C_TRUNCATE = 17,
  BTRFS_SEND_C_CHMOD = 18,
  BTRFS_SEND_C_CHOWN = 19,
  BTRFS_SEND_C_UTIMES = 20,
  BTRFS_SEND_C_END = 21,
  BTRFS_SEND_C_UPDATE_EXTENT = 22,
  __BTRFS_SEND_C_MAX = 23,
};

enum {
  BTRFS_SEND_A_UNSPEC = 0,
  BTRFS_SEND_A_UUID = 1,
  BTRFS_SEND_A_CTRANSID = 2,
  BTRFS_SEND_A_INO = 3,
  BTRFS_SEND_A_SIZE = 4,
  BTRFS_SEND_A_MODE = 5,
  BTRFS_SEND_A_UID = 6,
  BTRFS_SEND_A_GID = 7,
  BTRFS_SEND_A_RDEV = 8,
  BTRFS_SEND_A_CTIME = 9,
  BTRFS_SEND_A_MTIME = 10,
  BTRFS_SEND_A_ATIME = 11,
  BTRFS_SEND_A_OTIME = 12,
  BTRFS_SEND_A_XATTR_NAME = 13,
  BTRFS_SEND_A_XATTR_DATA = 14,
  BTRFS_SEND_A_PATH = 15,
  BTRFS_SEND_A_PATH_TO = 16,
  BTRFS_SEND_A_PATH_LINK = 17,
  BTRFS_SEND_A_FILE_OFFSET = 18,
  BTRFS_SEND_A_DATA = 19,
  BTRFS_SEND_A_CLONE_UUID = 20,
  BTRFS_SEND_A_CLONE_CTRANSID = 21,
  BTRFS_SEND_A_CLONE_PATH = 22,
  BTRFS_SEND_A_CLONE_OFFSET = 23,
  BTRFS_SEND_A_CLONE_LEN = 24,
  __BTRFS_SEND_A_MAX = 25,
};

struct fs_path {
  union {
    struct {
      char* start;
      char* end;
      char* buf;
      short unsigned int buf_len : 15;
      short unsigned int reversed : 1;
      char inline_buf[0];
    };
    char pad[256];
  };
};

struct clone_root {
  struct btrfs_root* root;
  u64 ino;
  u64 offset;
  u64 found_refs;
};

struct send_ctx {
  struct file* send_filp;
  loff_t send_off;
  char* send_buf;
  u32 send_size;
  u32 send_max_size;
  u64 total_send_size;
  u64 cmd_send_size[23];
  u64 flags;
  struct btrfs_root* send_root;
  struct btrfs_root* parent_root;
  struct clone_root* clone_roots;
  int clone_roots_cnt;
  struct btrfs_path* left_path;
  struct btrfs_path* right_path;
  struct btrfs_key* cmp_key;
  u64 cur_ino;
  u64 cur_inode_gen;
  int cur_inode_new;
  int cur_inode_new_gen;
  int cur_inode_deleted;
  u64 cur_inode_size;
  u64 cur_inode_mode;
  u64 cur_inode_rdev;
  u64 cur_inode_last_extent;
  u64 cur_inode_next_write_offset;
  bool ignore_cur_inode;
  u64 send_progress;
  struct list_head new_refs;
  struct list_head deleted_refs;
  struct xarray name_cache;
  struct list_head name_cache_list;
  int name_cache_size;
  struct file_ra_state ra;
  struct rb_root pending_dir_moves;
  struct rb_root waiting_dir_moves;
  struct rb_root orphan_dirs;
};

struct pending_dir_move {
  struct rb_node node;
  struct list_head list;
  u64 parent_ino;
  u64 ino;
  u64 gen;
  struct list_head update_refs;
};

struct waiting_dir_move {
  struct rb_node node;
  u64 ino;
  u64 rmdir_ino;
  u64 rmdir_gen;
  bool orphanized;
};

struct orphan_dir_info {
  struct rb_node node;
  u64 ino;
  u64 gen;
  u64 last_dir_index_offset;
};

struct name_cache_entry {
  struct list_head list;
  struct list_head radix_list;
  u64 ino;
  u64 gen;
  u64 parent_ino;
  u64 parent_gen;
  int ret;
  int need_later_update;
  int name_len;
  char name[0];
};

enum btrfs_compare_tree_result {
  BTRFS_COMPARE_TREE_NEW = 0,
  BTRFS_COMPARE_TREE_DELETED = 1,
  BTRFS_COMPARE_TREE_CHANGED = 2,
  BTRFS_COMPARE_TREE_SAME = 3,
};

typedef int (*iterate_inode_ref_t)(int, u64, int, struct fs_path*, void*);

typedef int (*iterate_dir_item_t)(
    int,
    struct btrfs_key*,
    const char*,
    int,
    const char*,
    int,
    u8,
    void*);

struct backref_ctx {
  struct send_ctx* sctx;
  u64 found;
  u64 cur_objectid;
  u64 cur_offset;
  u64 extent_len;
  int found_itself;
};

enum inode_state {
  inode_state_no_change = 0,
  inode_state_will_create = 1,
  inode_state_did_create = 2,
  inode_state_will_delete = 3,
  inode_state_did_delete = 4,
};

struct recorded_ref {
  struct list_head list;
  char* name;
  struct fs_path* full_path;
  u64 dir;
  u64 dir_gen;
  int name_len;
};

struct find_ref_ctx {
  u64 dir;
  u64 dir_gen;
  struct btrfs_root* root;
  struct fs_path* name;
  int found_idx;
};

struct find_xattr_ctx {
  const char* name;
  int name_len;
  int found_idx;
  char* found_data;
  int found_data_len;
};

struct parent_paths_ctx {
  struct list_head* refs;
  struct send_ctx* sctx;
};

struct btrfs_dev_replace_item {
  __le64 src_devid;
  __le64 cursor_left;
  __le64 cursor_right;
  __le64 cont_reading_from_srcdev_mode;
  __le64 replace_state;
  __le64 time_started;
  __le64 time_stopped;
  __le64 num_write_errors;
  __le64 num_uncorrectable_read_errors;
};

struct blk_plug_cb;

typedef void (*blk_plug_cb_fn)(struct blk_plug_cb*, bool);

struct blk_plug_cb {
  struct list_head list;
  blk_plug_cb_fn callback;
  void* data;
};

struct btrfs_stripe_hash {
  struct list_head hash_list;
  spinlock_t lock;
};

struct btrfs_stripe_hash_table {
  struct list_head stripe_cache;
  spinlock_t cache_lock;
  int cache_size;
  struct btrfs_stripe_hash table[0];
};

enum btrfs_rbio_ops {
  BTRFS_RBIO_WRITE = 0,
  BTRFS_RBIO_READ_REBUILD = 1,
  BTRFS_RBIO_PARITY_SCRUB = 2,
  BTRFS_RBIO_REBUILD_MISSING = 3,
};

struct btrfs_raid_bio___2 {
  struct btrfs_fs_info* fs_info;
  struct btrfs_bio* bbio;
  struct list_head hash_list;
  struct list_head stripe_cache;
  struct btrfs_work work;
  struct bio_list bio_list;
  spinlock_t bio_list_lock;
  struct list_head plug_list;
  long unsigned int flags;
  int stripe_len;
  int nr_data;
  int real_stripes;
  int stripe_npages;
  enum btrfs_rbio_ops operation;
  int faila;
  int failb;
  int scrubp;
  int nr_pages;
  int bio_list_bytes;
  int generic_bio_cnt;
  refcount_t refs;
  atomic_t stripes_pending;
  atomic_t error;
  struct page** stripe_pages;
  struct page** bio_pages;
  long unsigned int* dbitmap;
  void** finish_pointers;
  long unsigned int* finish_pbitmap;
};

struct btrfs_plug_cb {
  struct blk_plug_cb cb;
  struct btrfs_fs_info* info;
  struct list_head rbio_list;
  struct btrfs_work work;
};

struct prop_handler {
  struct hlist_node node;
  const char* xattr_name;
  int (*validate)(const char*, size_t);
  int (*apply)(struct inode*, const char*, size_t);
  const char* (*extract)(struct inode*);
  int inheritable;
};

struct btrfs_free_space_info {
  __le32 extent_count;
  __le32 flags;
};

struct reserve_ticket {
  u64 bytes;
  int error;
  bool steal;
  struct list_head list;
  wait_queue_head_t wait;
};

struct tree_mod_root {
  u64 logical;
  u8 level;
};

struct tree_mod_elem {
  struct rb_node node;
  u64 logical;
  u64 seq;
  enum btrfs_mod_log_op op;
  int slot;
  u64 generation;
  struct btrfs_disk_key key;
  u64 blockptr;
  struct {
    int dst_slot;
    int nr_items;
  } move;
  struct tree_mod_root old_root;
};

enum pstore_type_id {
  PSTORE_TYPE_DMESG = 0,
  PSTORE_TYPE_MCE = 1,
  PSTORE_TYPE_CONSOLE = 2,
  PSTORE_TYPE_FTRACE = 3,
  PSTORE_TYPE_PPC_RTAS = 4,
  PSTORE_TYPE_PPC_OF = 5,
  PSTORE_TYPE_PPC_COMMON = 6,
  PSTORE_TYPE_PMSG = 7,
  PSTORE_TYPE_PPC_OPAL = 8,
  PSTORE_TYPE_MAX = 9,
};

struct pstore_info;

struct pstore_record {
  struct pstore_info* psi;
  enum pstore_type_id type;
  u64 id;
  struct timespec64 time;
  char* buf;
  ssize_t size;
  ssize_t ecc_notice_size;
  int count;
  enum kmsg_dump_reason reason;
  unsigned int part;
  bool compressed;
};

struct pstore_info {
  struct module* owner;
  const char* name;
  struct semaphore buf_lock;
  char* buf;
  size_t bufsize;
  struct mutex read_mutex;
  int flags;
  int max_reason;
  void* data;
  int (*open)(struct pstore_info*);
  int (*close)(struct pstore_info*);
  ssize_t (*read)(struct pstore_record*);
  int (*write)(struct pstore_record*);
  int (*write_user)(struct pstore_record*, const char*);
  int (*erase)(struct pstore_record*);
};

struct pstore_ftrace_record {
  long unsigned int ip;
  long unsigned int parent_ip;
  u64 ts;
};

struct pstore_private {
  struct list_head list;
  struct dentry* dentry;
  struct pstore_record* record;
  size_t total_size;
};

struct pstore_ftrace_seq_data {
  const void* ptr;
  size_t off;
  size_t size;
};

enum {
  Opt_kmsg_bytes = 0,
  Opt_err___6 = 1,
};

struct crypto_comp {
  struct crypto_tfm base;
};

struct pstore_zbackend {
  int (*zbufsize)(size_t);
  const char* name;
};

struct ipc64_perm {
  __kernel_key_t key;
  __kernel_uid32_t uid;
  __kernel_gid32_t gid;
  __kernel_uid32_t cuid;
  __kernel_gid32_t cgid;
  __kernel_mode_t mode;
  unsigned char __pad1[0];
  short unsigned int seq;
  short unsigned int __pad2;
  __kernel_ulong_t __unused1;
  __kernel_ulong_t __unused2;
};

typedef s32 compat_key_t;

typedef u32 __compat_gid32_t;

struct compat_ipc64_perm {
  compat_key_t key;
  __compat_uid32_t uid;
  __compat_gid32_t gid;
  __compat_uid32_t cuid;
  __compat_gid32_t cgid;
  short unsigned int mode;
  short unsigned int __pad1;
  short unsigned int seq;
  short unsigned int __pad2;
  compat_ulong_t unused1;
  compat_ulong_t unused2;
};

struct compat_ipc_perm {
  key_t key;
  __compat_uid_t uid;
  __compat_gid_t gid;
  __compat_uid_t cuid;
  __compat_gid_t cgid;
  compat_mode_t mode;
  short unsigned int seq;
};

struct ipc_perm {
  __kernel_key_t key;
  __kernel_uid_t uid;
  __kernel_gid_t gid;
  __kernel_uid_t cuid;
  __kernel_gid_t cgid;
  __kernel_mode_t mode;
  short unsigned int seq;
};

struct ipc_params {
  key_t key;
  int flg;
  union {
    size_t size;
    int nsems;
  } u;
};

struct ipc_ops {
  int (*getnew)(struct ipc_namespace*, struct ipc_params*);
  int (*associate)(struct kern_ipc_perm*, int);
  int (*more_checks)(struct kern_ipc_perm*, struct ipc_params*);
};

struct ipc_proc_iface {
  const char* path;
  const char* header;
  int ids;
  int (*show)(struct seq_file*, void*);
};

struct ipc_proc_iter {
  struct ipc_namespace* ns;
  struct pid_namespace* pid_ns;
  struct ipc_proc_iface* iface;
};

struct msg_msgseg;

struct msg_msg {
  struct list_head m_list;
  long int m_type;
  size_t m_ts;
  struct msg_msgseg* next;
  void* security;
};

struct msg_msgseg {
  struct msg_msgseg* next;
};

typedef int __kernel_ipc_pid_t;

struct msgbuf {
  __kernel_long_t mtype;
  char mtext[1];
};

struct msg;

struct msqid_ds {
  struct ipc_perm msg_perm;
  struct msg* msg_first;
  struct msg* msg_last;
  __kernel_old_time_t msg_stime;
  __kernel_old_time_t msg_rtime;
  __kernel_old_time_t msg_ctime;
  long unsigned int msg_lcbytes;
  long unsigned int msg_lqbytes;
  short unsigned int msg_cbytes;
  short unsigned int msg_qnum;
  short unsigned int msg_qbytes;
  __kernel_ipc_pid_t msg_lspid;
  __kernel_ipc_pid_t msg_lrpid;
};

struct msqid64_ds {
  struct ipc64_perm msg_perm;
  long int msg_stime;
  long int msg_rtime;
  long int msg_ctime;
  long unsigned int msg_cbytes;
  long unsigned int msg_qnum;
  long unsigned int msg_qbytes;
  __kernel_pid_t msg_lspid;
  __kernel_pid_t msg_lrpid;
  long unsigned int __unused4;
  long unsigned int __unused5;
};

struct msginfo {
  int msgpool;
  int msgmap;
  int msgmax;
  int msgmnb;
  int msgmni;
  int msgssz;
  int msgtql;
  short unsigned int msgseg;
};

typedef u16 compat_ipc_pid_t;

struct compat_msqid64_ds {
  struct compat_ipc64_perm msg_perm;
  compat_ulong_t msg_stime;
  compat_ulong_t msg_stime_high;
  compat_ulong_t msg_rtime;
  compat_ulong_t msg_rtime_high;
  compat_ulong_t msg_ctime;
  compat_ulong_t msg_ctime_high;
  compat_ulong_t msg_cbytes;
  compat_ulong_t msg_qnum;
  compat_ulong_t msg_qbytes;
  compat_pid_t msg_lspid;
  compat_pid_t msg_lrpid;
  compat_ulong_t __unused4;
  compat_ulong_t __unused5;
};

struct msg_queue {
  struct kern_ipc_perm q_perm;
  time64_t q_stime;
  time64_t q_rtime;
  time64_t q_ctime;
  long unsigned int q_cbytes;
  long unsigned int q_qnum;
  long unsigned int q_qbytes;
  struct pid* q_lspid;
  struct pid* q_lrpid;
  struct list_head q_messages;
  struct list_head q_receivers;
  struct list_head q_senders;
  long : 64;
  long : 64;
};

struct msg_receiver {
  struct list_head r_list;
  struct task_struct* r_tsk;
  int r_mode;
  long int r_msgtype;
  long int r_maxsize;
  struct msg_msg* r_msg;
};

struct msg_sender {
  struct list_head list;
  struct task_struct* tsk;
  size_t msgsz;
};

struct compat_msqid_ds {
  struct compat_ipc_perm msg_perm;
  compat_uptr_t msg_first;
  compat_uptr_t msg_last;
  old_time32_t msg_stime;
  old_time32_t msg_rtime;
  old_time32_t msg_ctime;
  compat_ulong_t msg_lcbytes;
  compat_ulong_t msg_lqbytes;
  short unsigned int msg_cbytes;
  short unsigned int msg_qnum;
  short unsigned int msg_qbytes;
  compat_ipc_pid_t msg_lspid;
  compat_ipc_pid_t msg_lrpid;
};

struct compat_msgbuf {
  compat_long_t mtype;
  char mtext[1];
};

struct sem;

struct sem_queue;

struct sem_undo;

struct semid_ds {
  struct ipc_perm sem_perm;
  __kernel_old_time_t sem_otime;
  __kernel_old_time_t sem_ctime;
  struct sem* sem_base;
  struct sem_queue* sem_pending;
  struct sem_queue** sem_pending_last;
  struct sem_undo* undo;
  short unsigned int sem_nsems;
};

struct sem {
  int semval;
  struct pid* sempid;
  spinlock_t lock;
  struct list_head pending_alter;
  struct list_head pending_const;
  time64_t sem_otime;
};

struct sem_queue {
  struct list_head list;
  struct task_struct* sleeper;
  struct sem_undo* undo;
  struct pid* pid;
  int status;
  struct sembuf* sops;
  struct sembuf* blocking;
  int nsops;
  bool alter;
  bool dupsop;
};

struct sem_undo {
  struct list_head list_proc;
  struct callback_head rcu;
  struct sem_undo_list* ulp;
  struct list_head list_id;
  int semid;
  short int* semadj;
};

struct semid64_ds {
  struct ipc64_perm sem_perm;
  __kernel_long_t sem_otime;
  __kernel_ulong_t __unused1;
  __kernel_long_t sem_ctime;
  __kernel_ulong_t __unused2;
  __kernel_ulong_t sem_nsems;
  __kernel_ulong_t __unused3;
  __kernel_ulong_t __unused4;
};

struct seminfo {
  int semmap;
  int semmni;
  int semmns;
  int semmnu;
  int semmsl;
  int semopm;
  int semume;
  int semusz;
  int semvmx;
  int semaem;
};

struct sem_undo_list {
  refcount_t refcnt;
  spinlock_t lock;
  struct list_head list_proc;
};

struct compat_semid64_ds {
  struct compat_ipc64_perm sem_perm;
  compat_ulong_t sem_otime;
  compat_ulong_t sem_otime_high;
  compat_ulong_t sem_ctime;
  compat_ulong_t sem_ctime_high;
  compat_ulong_t sem_nsems;
  compat_ulong_t __unused3;
  compat_ulong_t __unused4;
};

struct sem_array {
  struct kern_ipc_perm sem_perm;
  time64_t sem_ctime;
  struct list_head pending_alter;
  struct list_head pending_const;
  struct list_head list_id;
  int sem_nsems;
  int complex_count;
  unsigned int use_global_lock;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct sem sems[0];
};

struct compat_semid_ds {
  struct compat_ipc_perm sem_perm;
  old_time32_t sem_otime;
  old_time32_t sem_ctime;
  compat_uptr_t sem_base;
  compat_uptr_t sem_pending;
  compat_uptr_t sem_pending_last;
  compat_uptr_t undo;
  short unsigned int sem_nsems;
};

struct shmid_ds {
  struct ipc_perm shm_perm;
  int shm_segsz;
  __kernel_old_time_t shm_atime;
  __kernel_old_time_t shm_dtime;
  __kernel_old_time_t shm_ctime;
  __kernel_ipc_pid_t shm_cpid;
  __kernel_ipc_pid_t shm_lpid;
  short unsigned int shm_nattch;
  short unsigned int shm_unused;
  void* shm_unused2;
  void* shm_unused3;
};

struct shmid64_ds {
  struct ipc64_perm shm_perm;
  size_t shm_segsz;
  long int shm_atime;
  long int shm_dtime;
  long int shm_ctime;
  __kernel_pid_t shm_cpid;
  __kernel_pid_t shm_lpid;
  long unsigned int shm_nattch;
  long unsigned int __unused4;
  long unsigned int __unused5;
};

struct shminfo64 {
  long unsigned int shmmax;
  long unsigned int shmmin;
  long unsigned int shmmni;
  long unsigned int shmseg;
  long unsigned int shmall;
  long unsigned int __unused1;
  long unsigned int __unused2;
  long unsigned int __unused3;
  long unsigned int __unused4;
};

struct shminfo {
  int shmmax;
  int shmmin;
  int shmmni;
  int shmseg;
  int shmall;
};

struct shm_info {
  int used_ids;
  __kernel_ulong_t shm_tot;
  __kernel_ulong_t shm_rss;
  __kernel_ulong_t shm_swp;
  __kernel_ulong_t swap_attempts;
  __kernel_ulong_t swap_successes;
};

struct compat_shmid64_ds {
  struct compat_ipc64_perm shm_perm;
  compat_size_t shm_segsz;
  compat_ulong_t shm_atime;
  compat_ulong_t shm_atime_high;
  compat_ulong_t shm_dtime;
  compat_ulong_t shm_dtime_high;
  compat_ulong_t shm_ctime;
  compat_ulong_t shm_ctime_high;
  compat_pid_t shm_cpid;
  compat_pid_t shm_lpid;
  compat_ulong_t shm_nattch;
  compat_ulong_t __unused4;
  compat_ulong_t __unused5;
};

struct shmid_kernel {
  struct kern_ipc_perm shm_perm;
  struct file* shm_file;
  long unsigned int shm_nattch;
  long unsigned int shm_segsz;
  time64_t shm_atim;
  time64_t shm_dtim;
  time64_t shm_ctim;
  struct pid* shm_cprid;
  struct pid* shm_lprid;
  struct user_struct* mlock_user;
  struct task_struct* shm_creator;
  struct list_head shm_clist;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct shm_file_data {
  int id;
  struct ipc_namespace* ns;
  struct file* file;
  const struct vm_operations_struct* vm_ops;
};

struct compat_shmid_ds {
  struct compat_ipc_perm shm_perm;
  int shm_segsz;
  old_time32_t shm_atime;
  old_time32_t shm_dtime;
  old_time32_t shm_ctime;
  compat_ipc_pid_t shm_cpid;
  compat_ipc_pid_t shm_lpid;
  short unsigned int shm_nattch;
  short unsigned int shm_unused;
  compat_uptr_t shm_unused2;
  compat_uptr_t shm_unused3;
};

struct compat_shminfo64 {
  compat_ulong_t shmmax;
  compat_ulong_t shmmin;
  compat_ulong_t shmmni;
  compat_ulong_t shmseg;
  compat_ulong_t shmall;
  compat_ulong_t __unused1;
  compat_ulong_t __unused2;
  compat_ulong_t __unused3;
  compat_ulong_t __unused4;
};

struct compat_shm_info {
  compat_int_t used_ids;
  compat_ulong_t shm_tot;
  compat_ulong_t shm_rss;
  compat_ulong_t shm_swp;
  compat_ulong_t swap_attempts;
  compat_ulong_t swap_successes;
};

struct compat_ipc_kludge {
  compat_uptr_t msgp;
  compat_long_t msgtyp;
};

struct mqueue_fs_context {
  struct ipc_namespace* ipc_ns;
};

struct posix_msg_tree_node {
  struct rb_node rb_node;
  struct list_head msg_list;
  int priority;
};

struct ext_wait_queue {
  struct task_struct* task;
  struct list_head list;
  struct msg_msg* msg;
  int state;
};

struct mqueue_inode_info {
  spinlock_t lock;
  struct inode vfs_inode;
  wait_queue_head_t wait_q;
  struct rb_root msg_tree;
  struct rb_node* msg_tree_rightmost;
  struct posix_msg_tree_node* node_cache;
  struct mq_attr attr;
  struct sigevent notify;
  struct pid* notify_owner;
  u32 notify_self_exec_id;
  struct user_namespace* notify_user_ns;
  struct user_struct* user;
  struct sock* notify_sock;
  struct sk_buff* notify_cookie;
  struct ext_wait_queue e_wait_q[2];
  long unsigned int qsize;
};

struct compat_mq_attr {
  compat_long_t mq_flags;
  compat_long_t mq_maxmsg;
  compat_long_t mq_msgsize;
  compat_long_t mq_curmsgs;
  compat_long_t __reserved[4];
};

enum key_state {
  KEY_IS_UNINSTANTIATED = 0,
  KEY_IS_POSITIVE = 1,
};

struct key_user {
  struct rb_node node;
  struct mutex cons_lock;
  spinlock_t lock;
  refcount_t usage;
  atomic_t nkeys;
  atomic_t nikeys;
  kuid_t uid;
  int qnkeys;
  int qnbytes;
};

enum key_notification_subtype {
  NOTIFY_KEY_INSTANTIATED = 0,
  NOTIFY_KEY_UPDATED = 1,
  NOTIFY_KEY_LINKED = 2,
  NOTIFY_KEY_UNLINKED = 3,
  NOTIFY_KEY_CLEARED = 4,
  NOTIFY_KEY_REVOKED = 5,
  NOTIFY_KEY_INVALIDATED = 6,
  NOTIFY_KEY_SETATTR = 7,
};

struct assoc_array_edit;

struct assoc_array_ops {
  long unsigned int (*get_key_chunk)(const void*, int);
  long unsigned int (*get_object_key_chunk)(const void*, int);
  bool (*compare_object)(const void*, const void*);
  int (*diff_objects)(const void*, const void*);
  void (*free_object)(void*);
};

struct assoc_array_node {
  struct assoc_array_ptr* back_pointer;
  u8 parent_slot;
  struct assoc_array_ptr* slots[16];
  long unsigned int nr_leaves_on_branch;
};

struct assoc_array_shortcut {
  struct assoc_array_ptr* back_pointer;
  int parent_slot;
  int skip_to_level;
  struct assoc_array_ptr* next_node;
  long unsigned int index_key[0];
};

struct assoc_array_edit___2 {
  struct callback_head rcu;
  struct assoc_array* array;
  const struct assoc_array_ops* ops;
  const struct assoc_array_ops* ops_for_excised_subtree;
  struct assoc_array_ptr* leaf;
  struct assoc_array_ptr** leaf_p;
  struct assoc_array_ptr* dead_leaf;
  struct assoc_array_ptr* new_meta[3];
  struct assoc_array_ptr* excised_meta[1];
  struct assoc_array_ptr* excised_subtree;
  struct assoc_array_ptr** set_backpointers[16];
  struct assoc_array_ptr* set_backpointers_to;
  struct assoc_array_node* adjust_count_on;
  long int adjust_count_by;
  struct {
    struct assoc_array_ptr** ptr;
    struct assoc_array_ptr* to;
  } set[2];
  struct {
    u8* p;
    u8 to;
  } set_parent_slot[1];
  u8 segment_cache[17];
};

struct keyring_search_context {
  struct keyring_index_key index_key;
  const struct cred* cred;
  struct key_match_data match_data;
  unsigned int flags;
  int (*iterator)(const void*, void*);
  int skipped_ret;
  bool possessed;
  key_ref_t result;
  time64_t now;
};

struct keyring_read_iterator_context {
  size_t buflen;
  size_t count;
  key_serial_t* buffer;
};

struct keyctl_dh_params {
  union {
    __s32 private;
    __s32 priv;
  };
  __s32 prime;
  __s32 base;
};

struct keyctl_kdf_params {
  char* hashname;
  char* otherinfo;
  __u32 otherinfolen;
  __u32 __spare[8];
};

struct keyctl_pkey_query {
  __u32 supported_ops;
  __u32 key_size;
  __u16 max_data_size;
  __u16 max_sig_size;
  __u16 max_enc_size;
  __u16 max_dec_size;
  __u32 __spare[10];
};

struct keyctl_pkey_params {
  __s32 key_id;
  __u32 in_len;
  union {
    __u32 out_len;
    __u32 in2_len;
  };
  __u32 __spare[7];
};

struct request_key_auth {
  struct callback_head rcu;
  struct key* target_key;
  struct key* dest_keyring;
  const struct cred* cred;
  void* callout_info;
  size_t callout_len;
  pid_t pid;
  char op[8];
};

struct user_key_payload {
  struct callback_head rcu;
  short unsigned int datalen;
  long : 48;
  char data[0];
};

enum {
  Opt_err___7 = 0,
  Opt_enc = 1,
  Opt_hash = 2,
};

struct vfs_cap_data {
  __le32 magic_etc;
  struct {
    __le32 permitted;
    __le32 inheritable;
  } data[2];
};

struct vfs_ns_cap_data {
  __le32 magic_etc;
  struct {
    __le32 permitted;
    __le32 inheritable;
  } data[2];
  __le32 rootid;
};

struct sctp_endpoint;

union security_list_options {
  int (*binder_set_context_mgr)(struct task_struct*);
  int (*binder_transaction)(struct task_struct*, struct task_struct*);
  int (*binder_transfer_binder)(struct task_struct*, struct task_struct*);
  int (*binder_transfer_file)(
      struct task_struct*,
      struct task_struct*,
      struct file*);
  int (*ptrace_access_check)(struct task_struct*, unsigned int);
  int (*ptrace_traceme)(struct task_struct*);
  int (*capget)(
      struct task_struct*,
      kernel_cap_t*,
      kernel_cap_t*,
      kernel_cap_t*);
  int (*capset)(
      struct cred*,
      const struct cred*,
      const kernel_cap_t*,
      const kernel_cap_t*,
      const kernel_cap_t*);
  int (*capable)(const struct cred*, struct user_namespace*, int, unsigned int);
  int (*quotactl)(int, int, int, struct super_block*);
  int (*quota_on)(struct dentry*);
  int (*syslog)(int);
  int (*settime)(const struct timespec64*, const struct timezone*);
  int (*vm_enough_memory)(struct mm_struct*, long int);
  int (*bprm_creds_for_exec)(struct linux_binprm*);
  int (*bprm_creds_from_file)(struct linux_binprm*, struct file*);
  int (*bprm_check_security)(struct linux_binprm*);
  void (*bprm_committing_creds)(struct linux_binprm*);
  void (*bprm_committed_creds)(struct linux_binprm*);
  int (*fs_context_dup)(struct fs_context*, struct fs_context*);
  int (*fs_context_parse_param)(struct fs_context*, struct fs_parameter*);
  int (*sb_alloc_security)(struct super_block*);
  void (*sb_free_security)(struct super_block*);
  void (*sb_free_mnt_opts)(void*);
  int (*sb_eat_lsm_opts)(char*, void**);
  int (*sb_remount)(struct super_block*, void*);
  int (*sb_kern_mount)(struct super_block*);
  int (*sb_show_options)(struct seq_file*, struct super_block*);
  int (*sb_statfs)(struct dentry*);
  int (*sb_mount)(
      const char*,
      const struct path*,
      const char*,
      long unsigned int,
      void*);
  int (*sb_umount)(struct vfsmount*, int);
  int (*sb_pivotroot)(const struct path*, const struct path*);
  int (*sb_set_mnt_opts)(
      struct super_block*,
      void*,
      long unsigned int,
      long unsigned int*);
  int (*sb_clone_mnt_opts)(
      const struct super_block*,
      struct super_block*,
      long unsigned int,
      long unsigned int*);
  int (*sb_add_mnt_opt)(const char*, const char*, int, void**);
  int (*move_mount)(const struct path*, const struct path*);
  int (*dentry_init_security)(
      struct dentry*,
      int,
      const struct qstr*,
      void**,
      u32*);
  int (*dentry_create_files_as)(
      struct dentry*,
      int,
      struct qstr*,
      const struct cred*,
      struct cred*);
  int (*path_notify)(const struct path*, u64, unsigned int);
  int (*inode_alloc_security)(struct inode*);
  void (*inode_free_security)(struct inode*);
  int (*inode_init_security)(
      struct inode*,
      struct inode*,
      const struct qstr*,
      const char**,
      void**,
      size_t*);
  int (*inode_init_security_anon)(
      struct inode*,
      const struct qstr*,
      const struct inode*);
  int (*inode_create)(struct inode*, struct dentry*, umode_t);
  int (*inode_link)(struct dentry*, struct inode*, struct dentry*);
  int (*inode_unlink)(struct inode*, struct dentry*);
  int (*inode_symlink)(struct inode*, struct dentry*, const char*);
  int (*inode_mkdir)(struct inode*, struct dentry*, umode_t);
  int (*inode_rmdir)(struct inode*, struct dentry*);
  int (*inode_mknod)(struct inode*, struct dentry*, umode_t, dev_t);
  int (*inode_rename)(
      struct inode*,
      struct dentry*,
      struct inode*,
      struct dentry*);
  int (*inode_readlink)(struct dentry*);
  int (*inode_follow_link)(struct dentry*, struct inode*, bool);
  int (*inode_permission)(struct inode*, int);
  int (*inode_setattr)(struct dentry*, struct iattr*);
  int (*inode_getattr)(const struct path*);
  int (*inode_setxattr)(
      struct user_namespace*,
      struct dentry*,
      const char*,
      const void*,
      size_t,
      int);
  void (*inode_post_setxattr)(
      struct dentry*,
      const char*,
      const void*,
      size_t,
      int);
  int (*inode_getxattr)(struct dentry*, const char*);
  int (*inode_listxattr)(struct dentry*);
  int (*inode_removexattr)(struct user_namespace*, struct dentry*, const char*);
  int (*inode_need_killpriv)(struct dentry*);
  int (*inode_killpriv)(struct user_namespace*, struct dentry*);
  int (*inode_getsecurity)(
      struct user_namespace*,
      struct inode*,
      const char*,
      void**,
      bool);
  int (
      *inode_setsecurity)(struct inode*, const char*, const void*, size_t, int);
  int (*inode_listsecurity)(struct inode*, char*, size_t);
  void (*inode_getsecid)(struct inode*, u32*);
  int (*inode_copy_up)(struct dentry*, struct cred**);
  int (*inode_copy_up_xattr)(const char*);
  int (*kernfs_init_security)(struct kernfs_node*, struct kernfs_node*);
  int (*file_permission)(struct file*, int);
  int (*file_alloc_security)(struct file*);
  void (*file_free_security)(struct file*);
  int (*file_ioctl)(struct file*, unsigned int, long unsigned int);
  int (*mmap_addr)(long unsigned int);
  int (*mmap_file)(
      struct file*,
      long unsigned int,
      long unsigned int,
      long unsigned int);
  int (*file_mprotect)(
      struct vm_area_struct*,
      long unsigned int,
      long unsigned int);
  int (*file_lock)(struct file*, unsigned int);
  int (*file_fcntl)(struct file*, unsigned int, long unsigned int);
  void (*file_set_fowner)(struct file*);
  int (*file_send_sigiotask)(struct task_struct*, struct fown_struct*, int);
  int (*file_receive)(struct file*);
  int (*file_open)(struct file*);
  int (*task_alloc)(struct task_struct*, long unsigned int);
  void (*task_free)(struct task_struct*);
  int (*cred_alloc_blank)(struct cred*, gfp_t);
  void (*cred_free)(struct cred*);
  int (*cred_prepare)(struct cred*, const struct cred*, gfp_t);
  void (*cred_transfer)(struct cred*, const struct cred*);
  void (*cred_getsecid)(const struct cred*, u32*);
  int (*kernel_act_as)(struct cred*, u32);
  int (*kernel_create_files_as)(struct cred*, struct inode*);
  int (*kernel_module_request)(char*);
  int (*kernel_load_data)(enum kernel_load_data_id, bool);
  int (*kernel_post_load_data)(char*, loff_t, enum kernel_load_data_id, char*);
  int (*kernel_read_file)(struct file*, enum kernel_read_file_id, bool);
  int (*kernel_post_read_file)(
      struct file*,
      char*,
      loff_t,
      enum kernel_read_file_id);
  int (*task_fix_setuid)(struct cred*, const struct cred*, int);
  int (*task_fix_setgid)(struct cred*, const struct cred*, int);
  int (*task_setpgid)(struct task_struct*, pid_t);
  int (*task_getpgid)(struct task_struct*);
  int (*task_getsid)(struct task_struct*);
  void (*task_getsecid_subj)(struct task_struct*, u32*);
  void (*task_getsecid_obj)(struct task_struct*, u32*);
  int (*task_setnice)(struct task_struct*, int);
  int (*task_setioprio)(struct task_struct*, int);
  int (*task_getioprio)(struct task_struct*);
  int (*task_prlimit)(const struct cred*, const struct cred*, unsigned int);
  int (*task_setrlimit)(struct task_struct*, unsigned int, struct rlimit*);
  int (*task_setscheduler)(struct task_struct*);
  int (*task_getscheduler)(struct task_struct*);
  int (*task_movememory)(struct task_struct*);
  int (*task_kill)(
      struct task_struct*,
      struct kernel_siginfo*,
      int,
      const struct cred*);
  int (*task_prctl)(
      int,
      long unsigned int,
      long unsigned int,
      long unsigned int,
      long unsigned int);
  void (*task_to_inode)(struct task_struct*, struct inode*);
  int (*ipc_permission)(struct kern_ipc_perm*, short int);
  void (*ipc_getsecid)(struct kern_ipc_perm*, u32*);
  int (*msg_msg_alloc_security)(struct msg_msg*);
  void (*msg_msg_free_security)(struct msg_msg*);
  int (*msg_queue_alloc_security)(struct kern_ipc_perm*);
  void (*msg_queue_free_security)(struct kern_ipc_perm*);
  int (*msg_queue_associate)(struct kern_ipc_perm*, int);
  int (*msg_queue_msgctl)(struct kern_ipc_perm*, int);
  int (*msg_queue_msgsnd)(struct kern_ipc_perm*, struct msg_msg*, int);
  int (*msg_queue_msgrcv)(
      struct kern_ipc_perm*,
      struct msg_msg*,
      struct task_struct*,
      long int,
      int);
  int (*shm_alloc_security)(struct kern_ipc_perm*);
  void (*shm_free_security)(struct kern_ipc_perm*);
  int (*shm_associate)(struct kern_ipc_perm*, int);
  int (*shm_shmctl)(struct kern_ipc_perm*, int);
  int (*shm_shmat)(struct kern_ipc_perm*, char*, int);
  int (*sem_alloc_security)(struct kern_ipc_perm*);
  void (*sem_free_security)(struct kern_ipc_perm*);
  int (*sem_associate)(struct kern_ipc_perm*, int);
  int (*sem_semctl)(struct kern_ipc_perm*, int);
  int (*sem_semop)(struct kern_ipc_perm*, struct sembuf*, unsigned int, int);
  int (*netlink_send)(struct sock*, struct sk_buff*);
  void (*d_instantiate)(struct dentry*, struct inode*);
  int (*getprocattr)(struct task_struct*, char*, char**);
  int (*setprocattr)(const char*, void*, size_t);
  int (*ismaclabel)(const char*);
  int (*secid_to_secctx)(u32, char**, u32*);
  int (*secctx_to_secid)(const char*, u32, u32*);
  void (*release_secctx)(char*, u32);
  void (*inode_invalidate_secctx)(struct inode*);
  int (*inode_notifysecctx)(struct inode*, void*, u32);
  int (*inode_setsecctx)(struct dentry*, void*, u32);
  int (*inode_getsecctx)(struct inode*, void**, u32*);
  int (*unix_stream_connect)(struct sock*, struct sock*, struct sock*);
  int (*unix_may_send)(struct socket*, struct socket*);
  int (*socket_create)(int, int, int, int);
  int (*socket_post_create)(struct socket*, int, int, int, int);
  int (*socket_socketpair)(struct socket*, struct socket*);
  int (*socket_bind)(struct socket*, struct sockaddr*, int);
  int (*socket_connect)(struct socket*, struct sockaddr*, int);
  int (*socket_listen)(struct socket*, int);
  int (*socket_accept)(struct socket*, struct socket*);
  int (*socket_sendmsg)(struct socket*, struct msghdr*, int);
  int (*socket_recvmsg)(struct socket*, struct msghdr*, int, int);
  int (*socket_getsockname)(struct socket*);
  int (*socket_getpeername)(struct socket*);
  int (*socket_getsockopt)(struct socket*, int, int);
  int (*socket_setsockopt)(struct socket*, int, int);
  int (*socket_shutdown)(struct socket*, int);
  int (*socket_sock_rcv_skb)(struct sock*, struct sk_buff*);
  int (*socket_getpeersec_stream)(struct socket*, char*, int*, unsigned int);
  int (*socket_getpeersec_dgram)(struct socket*, struct sk_buff*, u32*);
  int (*sk_alloc_security)(struct sock*, int, gfp_t);
  void (*sk_free_security)(struct sock*);
  void (*sk_clone_security)(const struct sock*, struct sock*);
  void (*sk_getsecid)(struct sock*, u32*);
  void (*sock_graft)(struct sock*, struct socket*);
  int (*inet_conn_request)(
      const struct sock*,
      struct sk_buff*,
      struct request_sock*);
  void (*inet_csk_clone)(struct sock*, const struct request_sock*);
  void (*inet_conn_established)(struct sock*, struct sk_buff*);
  int (*secmark_relabel_packet)(u32);
  void (*secmark_refcount_inc)();
  void (*secmark_refcount_dec)();
  void (*req_classify_flow)(const struct request_sock*, struct flowi_common*);
  int (*tun_dev_alloc_security)(void**);
  void (*tun_dev_free_security)(void*);
  int (*tun_dev_create)();
  int (*tun_dev_attach_queue)(void*);
  int (*tun_dev_attach)(struct sock*, void*);
  int (*tun_dev_open)(void*);
  int (*sctp_assoc_request)(struct sctp_endpoint*, struct sk_buff*);
  int (*sctp_bind_connect)(struct sock*, int, struct sockaddr*, int);
  void (*sctp_sk_clone)(struct sctp_endpoint*, struct sock*, struct sock*);
  int (*key_alloc)(struct key*, const struct cred*, long unsigned int);
  void (*key_free)(struct key*);
  int (*key_permission)(key_ref_t, const struct cred*, enum key_need_perm);
  int (*key_getsecurity)(struct key*, char**);
  int (*audit_rule_init)(u32, u32, char*, void**);
  int (*audit_rule_known)(struct audit_krule*);
  int (*audit_rule_match)(u32, u32, u32, void*);
  void (*audit_rule_free)(void*);
  int (*bpf)(int, union bpf_attr*, unsigned int);
  int (*bpf_map)(struct bpf_map*, fmode_t);
  int (*bpf_prog)(struct bpf_prog*);
  int (*bpf_map_alloc_security)(struct bpf_map*);
  void (*bpf_map_free_security)(struct bpf_map*);
  int (*bpf_prog_alloc_security)(struct bpf_prog_aux*);
  void (*bpf_prog_free_security)(struct bpf_prog_aux*);
  int (*locked_down)(enum lockdown_reason);
  int (*perf_event_open)(struct perf_event_attr*, int);
  int (*perf_event_alloc)(struct perf_event*);
  void (*perf_event_free)(struct perf_event*);
  int (*perf_event_read)(struct perf_event*);
  int (*perf_event_write)(struct perf_event*);
};

struct security_hook_list {
  struct hlist_node list;
  struct hlist_head* head;
  union security_list_options hook;
  char* lsm;
};

enum lsm_event {
  LSM_POLICY_CHANGE = 0,
};

typedef int (*initxattrs)(struct inode*, const struct xattr*, void*);

struct ethhdr {
  unsigned char h_dest[6];
  unsigned char h_source[6];
  __be16 h_proto;
};

struct ethtool_drvinfo {
  __u32 cmd;
  char driver[32];
  char version[32];
  char fw_version[32];
  char bus_info[32];
  char erom_version[32];
  char reserved2[12];
  __u32 n_priv_flags;
  __u32 n_stats;
  __u32 testinfo_len;
  __u32 eedump_len;
  __u32 regdump_len;
};

struct ethtool_wolinfo {
  __u32 cmd;
  __u32 supported;
  __u32 wolopts;
  __u8 sopass[6];
};

struct ethtool_tunable {
  __u32 cmd;
  __u32 id;
  __u32 type_id;
  __u32 len;
  void* data[0];
};

struct ethtool_regs {
  __u32 cmd;
  __u32 version;
  __u32 len;
  __u8 data[0];
};

struct ethtool_eeprom {
  __u32 cmd;
  __u32 magic;
  __u32 offset;
  __u32 len;
  __u8 data[0];
};

struct ethtool_eee {
  __u32 cmd;
  __u32 supported;
  __u32 advertised;
  __u32 lp_advertised;
  __u32 eee_active;
  __u32 eee_enabled;
  __u32 tx_lpi_enabled;
  __u32 tx_lpi_timer;
  __u32 reserved[2];
};

struct ethtool_modinfo {
  __u32 cmd;
  __u32 type;
  __u32 eeprom_len;
  __u32 reserved[8];
};

struct ethtool_coalesce {
  __u32 cmd;
  __u32 rx_coalesce_usecs;
  __u32 rx_max_coalesced_frames;
  __u32 rx_coalesce_usecs_irq;
  __u32 rx_max_coalesced_frames_irq;
  __u32 tx_coalesce_usecs;
  __u32 tx_max_coalesced_frames;
  __u32 tx_coalesce_usecs_irq;
  __u32 tx_max_coalesced_frames_irq;
  __u32 stats_block_coalesce_usecs;
  __u32 use_adaptive_rx_coalesce;
  __u32 use_adaptive_tx_coalesce;
  __u32 pkt_rate_low;
  __u32 rx_coalesce_usecs_low;
  __u32 rx_max_coalesced_frames_low;
  __u32 tx_coalesce_usecs_low;
  __u32 tx_max_coalesced_frames_low;
  __u32 pkt_rate_high;
  __u32 rx_coalesce_usecs_high;
  __u32 rx_max_coalesced_frames_high;
  __u32 tx_coalesce_usecs_high;
  __u32 tx_max_coalesced_frames_high;
  __u32 rate_sample_interval;
};

struct ethtool_ringparam {
  __u32 cmd;
  __u32 rx_max_pending;
  __u32 rx_mini_max_pending;
  __u32 rx_jumbo_max_pending;
  __u32 tx_max_pending;
  __u32 rx_pending;
  __u32 rx_mini_pending;
  __u32 rx_jumbo_pending;
  __u32 tx_pending;
};

struct ethtool_channels {
  __u32 cmd;
  __u32 max_rx;
  __u32 max_tx;
  __u32 max_other;
  __u32 max_combined;
  __u32 rx_count;
  __u32 tx_count;
  __u32 other_count;
  __u32 combined_count;
};

struct ethtool_pauseparam {
  __u32 cmd;
  __u32 autoneg;
  __u32 rx_pause;
  __u32 tx_pause;
};

enum ethtool_link_ext_state {
  ETHTOOL_LINK_EXT_STATE_AUTONEG = 0,
  ETHTOOL_LINK_EXT_STATE_LINK_TRAINING_FAILURE = 1,
  ETHTOOL_LINK_EXT_STATE_LINK_LOGICAL_MISMATCH = 2,
  ETHTOOL_LINK_EXT_STATE_BAD_SIGNAL_INTEGRITY = 3,
  ETHTOOL_LINK_EXT_STATE_NO_CABLE = 4,
  ETHTOOL_LINK_EXT_STATE_CABLE_ISSUE = 5,
  ETHTOOL_LINK_EXT_STATE_EEPROM_ISSUE = 6,
  ETHTOOL_LINK_EXT_STATE_CALIBRATION_FAILURE = 7,
  ETHTOOL_LINK_EXT_STATE_POWER_BUDGET_EXCEEDED = 8,
  ETHTOOL_LINK_EXT_STATE_OVERHEAT = 9,
};

enum ethtool_link_ext_substate_autoneg {
  ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED = 1,
  ETHTOOL_LINK_EXT_SUBSTATE_AN_ACK_NOT_RECEIVED = 2,
  ETHTOOL_LINK_EXT_SUBSTATE_AN_NEXT_PAGE_EXCHANGE_FAILED = 3,
  ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED_FORCE_MODE = 4,
  ETHTOOL_LINK_EXT_SUBSTATE_AN_FEC_MISMATCH_DURING_OVERRIDE = 5,
  ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_HCD = 6,
};

enum ethtool_link_ext_substate_link_training {
  ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_FRAME_LOCK_NOT_ACQUIRED = 1,
  ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_INHIBIT_TIMEOUT = 2,
  ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_PARTNER_DID_NOT_SET_RECEIVER_READY = 3,
  ETHTOOL_LINK_EXT_SUBSTATE_LT_REMOTE_FAULT = 4,
};

enum ethtool_link_ext_substate_link_logical_mismatch {
  ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_BLOCK_LOCK = 1,
  ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_AM_LOCK = 2,
  ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_GET_ALIGN_STATUS = 3,
  ETHTOOL_LINK_EXT_SUBSTATE_LLM_FC_FEC_IS_NOT_LOCKED = 4,
  ETHTOOL_LINK_EXT_SUBSTATE_LLM_RS_FEC_IS_NOT_LOCKED = 5,
};

enum ethtool_link_ext_substate_bad_signal_integrity {
  ETHTOOL_LINK_EXT_SUBSTATE_BSI_LARGE_NUMBER_OF_PHYSICAL_ERRORS = 1,
  ETHTOOL_LINK_EXT_SUBSTATE_BSI_UNSUPPORTED_RATE = 2,
};

enum ethtool_link_ext_substate_cable_issue {
  ETHTOOL_LINK_EXT_SUBSTATE_CI_UNSUPPORTED_CABLE = 1,
  ETHTOOL_LINK_EXT_SUBSTATE_CI_CABLE_TEST_FAILURE = 2,
};

struct ethtool_test {
  __u32 cmd;
  __u32 flags;
  __u32 reserved;
  __u32 len;
  __u64 data[0];
};

struct ethtool_stats {
  __u32 cmd;
  __u32 n_stats;
  __u64 data[0];
};

struct ethtool_tcpip4_spec {
  __be32 ip4src;
  __be32 ip4dst;
  __be16 psrc;
  __be16 pdst;
  __u8 tos;
};

struct ethtool_ah_espip4_spec {
  __be32 ip4src;
  __be32 ip4dst;
  __be32 spi;
  __u8 tos;
};

struct ethtool_usrip4_spec {
  __be32 ip4src;
  __be32 ip4dst;
  __be32 l4_4_bytes;
  __u8 tos;
  __u8 ip_ver;
  __u8 proto;
};

struct ethtool_tcpip6_spec {
  __be32 ip6src[4];
  __be32 ip6dst[4];
  __be16 psrc;
  __be16 pdst;
  __u8 tclass;
};

struct ethtool_ah_espip6_spec {
  __be32 ip6src[4];
  __be32 ip6dst[4];
  __be32 spi;
  __u8 tclass;
};

struct ethtool_usrip6_spec {
  __be32 ip6src[4];
  __be32 ip6dst[4];
  __be32 l4_4_bytes;
  __u8 tclass;
  __u8 l4_proto;
};

union ethtool_flow_union {
  struct ethtool_tcpip4_spec tcp_ip4_spec;
  struct ethtool_tcpip4_spec udp_ip4_spec;
  struct ethtool_tcpip4_spec sctp_ip4_spec;
  struct ethtool_ah_espip4_spec ah_ip4_spec;
  struct ethtool_ah_espip4_spec esp_ip4_spec;
  struct ethtool_usrip4_spec usr_ip4_spec;
  struct ethtool_tcpip6_spec tcp_ip6_spec;
  struct ethtool_tcpip6_spec udp_ip6_spec;
  struct ethtool_tcpip6_spec sctp_ip6_spec;
  struct ethtool_ah_espip6_spec ah_ip6_spec;
  struct ethtool_ah_espip6_spec esp_ip6_spec;
  struct ethtool_usrip6_spec usr_ip6_spec;
  struct ethhdr ether_spec;
  __u8 hdata[52];
};

struct ethtool_flow_ext {
  __u8 padding[2];
  unsigned char h_dest[6];
  __be16 vlan_etype;
  __be16 vlan_tci;
  __be32 data[2];
};

struct ethtool_rx_flow_spec {
  __u32 flow_type;
  union ethtool_flow_union h_u;
  struct ethtool_flow_ext h_ext;
  union ethtool_flow_union m_u;
  struct ethtool_flow_ext m_ext;
  __u64 ring_cookie;
  __u32 location;
};

struct ethtool_rxnfc {
  __u32 cmd;
  __u32 flow_type;
  __u64 data;
  struct ethtool_rx_flow_spec fs;
  union {
    __u32 rule_cnt;
    __u32 rss_context;
  };
  __u32 rule_locs[0];
};

struct ethtool_flash {
  __u32 cmd;
  __u32 region;
  char data[128];
};

struct ethtool_dump {
  __u32 cmd;
  __u32 version;
  __u32 flag;
  __u32 len;
  __u8 data[0];
};

struct ethtool_ts_info {
  __u32 cmd;
  __u32 so_timestamping;
  __s32 phc_index;
  __u32 tx_types;
  __u32 tx_reserved[3];
  __u32 rx_filters;
  __u32 rx_reserved[3];
};

struct ethtool_fecparam {
  __u32 cmd;
  __u32 active_fec;
  __u32 fec;
  __u32 reserved;
};

enum ethtool_link_mode_bit_indices {
  ETHTOOL_LINK_MODE_10baseT_Half_BIT = 0,
  ETHTOOL_LINK_MODE_10baseT_Full_BIT = 1,
  ETHTOOL_LINK_MODE_100baseT_Half_BIT = 2,
  ETHTOOL_LINK_MODE_100baseT_Full_BIT = 3,
  ETHTOOL_LINK_MODE_1000baseT_Half_BIT = 4,
  ETHTOOL_LINK_MODE_1000baseT_Full_BIT = 5,
  ETHTOOL_LINK_MODE_Autoneg_BIT = 6,
  ETHTOOL_LINK_MODE_TP_BIT = 7,
  ETHTOOL_LINK_MODE_AUI_BIT = 8,
  ETHTOOL_LINK_MODE_MII_BIT = 9,
  ETHTOOL_LINK_MODE_FIBRE_BIT = 10,
  ETHTOOL_LINK_MODE_BNC_BIT = 11,
  ETHTOOL_LINK_MODE_10000baseT_Full_BIT = 12,
  ETHTOOL_LINK_MODE_Pause_BIT = 13,
  ETHTOOL_LINK_MODE_Asym_Pause_BIT = 14,
  ETHTOOL_LINK_MODE_2500baseX_Full_BIT = 15,
  ETHTOOL_LINK_MODE_Backplane_BIT = 16,
  ETHTOOL_LINK_MODE_1000baseKX_Full_BIT = 17,
  ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT = 18,
  ETHTOOL_LINK_MODE_10000baseKR_Full_BIT = 19,
  ETHTOOL_LINK_MODE_10000baseR_FEC_BIT = 20,
  ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT = 21,
  ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT = 22,
  ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT = 23,
  ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT = 24,
  ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT = 25,
  ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT = 26,
  ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT = 27,
  ETHTOOL_LINK_MODE_56000baseCR4_Full_BIT = 28,
  ETHTOOL_LINK_MODE_56000baseSR4_Full_BIT = 29,
  ETHTOOL_LINK_MODE_56000baseLR4_Full_BIT = 30,
  ETHTOOL_LINK_MODE_25000baseCR_Full_BIT = 31,
  ETHTOOL_LINK_MODE_25000baseKR_Full_BIT = 32,
  ETHTOOL_LINK_MODE_25000baseSR_Full_BIT = 33,
  ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT = 34,
  ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT = 35,
  ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT = 36,
  ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT = 37,
  ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT = 38,
  ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT = 39,
  ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT = 40,
  ETHTOOL_LINK_MODE_1000baseX_Full_BIT = 41,
  ETHTOOL_LINK_MODE_10000baseCR_Full_BIT = 42,
  ETHTOOL_LINK_MODE_10000baseSR_Full_BIT = 43,
  ETHTOOL_LINK_MODE_10000baseLR_Full_BIT = 44,
  ETHTOOL_LINK_MODE_10000baseLRM_Full_BIT = 45,
  ETHTOOL_LINK_MODE_10000baseER_Full_BIT = 46,
  ETHTOOL_LINK_MODE_2500baseT_Full_BIT = 47,
  ETHTOOL_LINK_MODE_5000baseT_Full_BIT = 48,
  ETHTOOL_LINK_MODE_FEC_NONE_BIT = 49,
  ETHTOOL_LINK_MODE_FEC_RS_BIT = 50,
  ETHTOOL_LINK_MODE_FEC_BASER_BIT = 51,
  ETHTOOL_LINK_MODE_50000baseKR_Full_BIT = 52,
  ETHTOOL_LINK_MODE_50000baseSR_Full_BIT = 53,
  ETHTOOL_LINK_MODE_50000baseCR_Full_BIT = 54,
  ETHTOOL_LINK_MODE_50000baseLR_ER_FR_Full_BIT = 55,
  ETHTOOL_LINK_MODE_50000baseDR_Full_BIT = 56,
  ETHTOOL_LINK_MODE_100000baseKR2_Full_BIT = 57,
  ETHTOOL_LINK_MODE_100000baseSR2_Full_BIT = 58,
  ETHTOOL_LINK_MODE_100000baseCR2_Full_BIT = 59,
  ETHTOOL_LINK_MODE_100000baseLR2_ER2_FR2_Full_BIT = 60,
  ETHTOOL_LINK_MODE_100000baseDR2_Full_BIT = 61,
  ETHTOOL_LINK_MODE_200000baseKR4_Full_BIT = 62,
  ETHTOOL_LINK_MODE_200000baseSR4_Full_BIT = 63,
  ETHTOOL_LINK_MODE_200000baseLR4_ER4_FR4_Full_BIT = 64,
  ETHTOOL_LINK_MODE_200000baseDR4_Full_BIT = 65,
  ETHTOOL_LINK_MODE_200000baseCR4_Full_BIT = 66,
  ETHTOOL_LINK_MODE_100baseT1_Full_BIT = 67,
  ETHTOOL_LINK_MODE_1000baseT1_Full_BIT = 68,
  ETHTOOL_LINK_MODE_400000baseKR8_Full_BIT = 69,
  ETHTOOL_LINK_MODE_400000baseSR8_Full_BIT = 70,
  ETHTOOL_LINK_MODE_400000baseLR8_ER8_FR8_Full_BIT = 71,
  ETHTOOL_LINK_MODE_400000baseDR8_Full_BIT = 72,
  ETHTOOL_LINK_MODE_400000baseCR8_Full_BIT = 73,
  ETHTOOL_LINK_MODE_FEC_LLRS_BIT = 74,
  ETHTOOL_LINK_MODE_100000baseKR_Full_BIT = 75,
  ETHTOOL_LINK_MODE_100000baseSR_Full_BIT = 76,
  ETHTOOL_LINK_MODE_100000baseLR_ER_FR_Full_BIT = 77,
  ETHTOOL_LINK_MODE_100000baseCR_Full_BIT = 78,
  ETHTOOL_LINK_MODE_100000baseDR_Full_BIT = 79,
  ETHTOOL_LINK_MODE_200000baseKR2_Full_BIT = 80,
  ETHTOOL_LINK_MODE_200000baseSR2_Full_BIT = 81,
  ETHTOOL_LINK_MODE_200000baseLR2_ER2_FR2_Full_BIT = 82,
  ETHTOOL_LINK_MODE_200000baseDR2_Full_BIT = 83,
  ETHTOOL_LINK_MODE_200000baseCR2_Full_BIT = 84,
  ETHTOOL_LINK_MODE_400000baseKR4_Full_BIT = 85,
  ETHTOOL_LINK_MODE_400000baseSR4_Full_BIT = 86,
  ETHTOOL_LINK_MODE_400000baseLR4_ER4_FR4_Full_BIT = 87,
  ETHTOOL_LINK_MODE_400000baseDR4_Full_BIT = 88,
  ETHTOOL_LINK_MODE_400000baseCR4_Full_BIT = 89,
  ETHTOOL_LINK_MODE_100baseFX_Half_BIT = 90,
  ETHTOOL_LINK_MODE_100baseFX_Full_BIT = 91,
  __ETHTOOL_LINK_MODE_MASK_NBITS = 92,
};

struct ethtool_link_settings {
  __u32 cmd;
  __u32 speed;
  __u8 duplex;
  __u8 port;
  __u8 phy_address;
  __u8 autoneg;
  __u8 mdio_support;
  __u8 eth_tp_mdix;
  __u8 eth_tp_mdix_ctrl;
  __s8 link_mode_masks_nwords;
  __u8 transceiver;
  __u8 master_slave_cfg;
  __u8 master_slave_state;
  __u8 reserved1[1];
  __u32 reserved[7];
  __u32 link_mode_masks[0];
};

struct ethtool_link_ext_state_info {
  enum ethtool_link_ext_state link_ext_state;
  union {
    enum ethtool_link_ext_substate_autoneg autoneg;
    enum ethtool_link_ext_substate_link_training link_training;
    enum ethtool_link_ext_substate_link_logical_mismatch link_logical_mismatch;
    enum ethtool_link_ext_substate_bad_signal_integrity bad_signal_integrity;
    enum ethtool_link_ext_substate_cable_issue cable_issue;
    u8 __link_ext_substate;
  };
};

struct ethtool_link_ksettings {
  struct ethtool_link_settings base;
  struct {
    long unsigned int supported[2];
    long unsigned int advertising[2];
    long unsigned int lp_advertising[2];
  } link_modes;
  u32 lanes;
};

struct ethtool_eth_mac_stats {
  u64 FramesTransmittedOK;
  u64 SingleCollisionFrames;
  u64 MultipleCollisionFrames;
  u64 FramesReceivedOK;
  u64 FrameCheckSequenceErrors;
  u64 AlignmentErrors;
  u64 OctetsTransmittedOK;
  u64 FramesWithDeferredXmissions;
  u64 LateCollisions;
  u64 FramesAbortedDueToXSColls;
  u64 FramesLostDueToIntMACXmitError;
  u64 CarrierSenseErrors;
  u64 OctetsReceivedOK;
  u64 FramesLostDueToIntMACRcvError;
  u64 MulticastFramesXmittedOK;
  u64 BroadcastFramesXmittedOK;
  u64 FramesWithExcessiveDeferral;
  u64 MulticastFramesReceivedOK;
  u64 BroadcastFramesReceivedOK;
  u64 InRangeLengthErrors;
  u64 OutOfRangeLengthField;
  u64 FrameTooLongErrors;
};

struct ethtool_eth_phy_stats {
  u64 SymbolErrorDuringCarrier;
};

struct ethtool_eth_ctrl_stats {
  u64 MACControlFramesTransmitted;
  u64 MACControlFramesReceived;
  u64 UnsupportedOpcodesReceived;
};

struct ethtool_pause_stats {
  u64 tx_pause_frames;
  u64 rx_pause_frames;
};

struct ethtool_fec_stat {
  u64 total;
  u64 lanes[8];
};

struct ethtool_fec_stats {
  struct ethtool_fec_stat corrected_blocks;
  struct ethtool_fec_stat uncorrectable_blocks;
  struct ethtool_fec_stat corrected_bits;
};

struct ethtool_rmon_hist_range {
  u16 low;
  u16 high;
};

struct ethtool_rmon_stats {
  u64 undersize_pkts;
  u64 oversize_pkts;
  u64 fragments;
  u64 jabbers;
  u64 hist[10];
  u64 hist_tx[10];
};

struct ethtool_module_eeprom {
  __u32 offset;
  __u32 length;
  __u8 page;
  __u8 bank;
  __u8 i2c_address;
  __u8* data;
};

enum ib_uverbs_write_cmds {
  IB_USER_VERBS_CMD_GET_CONTEXT = 0,
  IB_USER_VERBS_CMD_QUERY_DEVICE = 1,
  IB_USER_VERBS_CMD_QUERY_PORT = 2,
  IB_USER_VERBS_CMD_ALLOC_PD = 3,
  IB_USER_VERBS_CMD_DEALLOC_PD = 4,
  IB_USER_VERBS_CMD_CREATE_AH = 5,
  IB_USER_VERBS_CMD_MODIFY_AH = 6,
  IB_USER_VERBS_CMD_QUERY_AH = 7,
  IB_USER_VERBS_CMD_DESTROY_AH = 8,
  IB_USER_VERBS_CMD_REG_MR = 9,
  IB_USER_VERBS_CMD_REG_SMR = 10,
  IB_USER_VERBS_CMD_REREG_MR = 11,
  IB_USER_VERBS_CMD_QUERY_MR = 12,
  IB_USER_VERBS_CMD_DEREG_MR = 13,
  IB_USER_VERBS_CMD_ALLOC_MW = 14,
  IB_USER_VERBS_CMD_BIND_MW = 15,
  IB_USER_VERBS_CMD_DEALLOC_MW = 16,
  IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL = 17,
  IB_USER_VERBS_CMD_CREATE_CQ = 18,
  IB_USER_VERBS_CMD_RESIZE_CQ = 19,
  IB_USER_VERBS_CMD_DESTROY_CQ = 20,
  IB_USER_VERBS_CMD_POLL_CQ = 21,
  IB_USER_VERBS_CMD_PEEK_CQ = 22,
  IB_USER_VERBS_CMD_REQ_NOTIFY_CQ = 23,
  IB_USER_VERBS_CMD_CREATE_QP = 24,
  IB_USER_VERBS_CMD_QUERY_QP = 25,
  IB_USER_VERBS_CMD_MODIFY_QP = 26,
  IB_USER_VERBS_CMD_DESTROY_QP = 27,
  IB_USER_VERBS_CMD_POST_SEND = 28,
  IB_USER_VERBS_CMD_POST_RECV = 29,
  IB_USER_VERBS_CMD_ATTACH_MCAST = 30,
  IB_USER_VERBS_CMD_DETACH_MCAST = 31,
  IB_USER_VERBS_CMD_CREATE_SRQ = 32,
  IB_USER_VERBS_CMD_MODIFY_SRQ = 33,
  IB_USER_VERBS_CMD_QUERY_SRQ = 34,
  IB_USER_VERBS_CMD_DESTROY_SRQ = 35,
  IB_USER_VERBS_CMD_POST_SRQ_RECV = 36,
  IB_USER_VERBS_CMD_OPEN_XRCD = 37,
  IB_USER_VERBS_CMD_CLOSE_XRCD = 38,
  IB_USER_VERBS_CMD_CREATE_XSRQ = 39,
  IB_USER_VERBS_CMD_OPEN_QP = 40,
};

enum ib_uverbs_wc_opcode {
  IB_UVERBS_WC_SEND = 0,
  IB_UVERBS_WC_RDMA_WRITE = 1,
  IB_UVERBS_WC_RDMA_READ = 2,
  IB_UVERBS_WC_COMP_SWAP = 3,
  IB_UVERBS_WC_FETCH_ADD = 4,
  IB_UVERBS_WC_BIND_MW = 5,
  IB_UVERBS_WC_LOCAL_INV = 6,
  IB_UVERBS_WC_TSO = 7,
};

enum ib_uverbs_create_qp_mask {
  IB_UVERBS_CREATE_QP_MASK_IND_TABLE = 1,
};

enum ib_uverbs_wr_opcode {
  IB_UVERBS_WR_RDMA_WRITE = 0,
  IB_UVERBS_WR_RDMA_WRITE_WITH_IMM = 1,
  IB_UVERBS_WR_SEND = 2,
  IB_UVERBS_WR_SEND_WITH_IMM = 3,
  IB_UVERBS_WR_RDMA_READ = 4,
  IB_UVERBS_WR_ATOMIC_CMP_AND_SWP = 5,
  IB_UVERBS_WR_ATOMIC_FETCH_AND_ADD = 6,
  IB_UVERBS_WR_LOCAL_INV = 7,
  IB_UVERBS_WR_BIND_MW = 8,
  IB_UVERBS_WR_SEND_WITH_INV = 9,
  IB_UVERBS_WR_TSO = 10,
  IB_UVERBS_WR_RDMA_READ_WITH_INV = 11,
  IB_UVERBS_WR_MASKED_ATOMIC_CMP_AND_SWP = 12,
  IB_UVERBS_WR_MASKED_ATOMIC_FETCH_AND_ADD = 13,
};

enum ib_uverbs_access_flags {
  IB_UVERBS_ACCESS_LOCAL_WRITE = 1,
  IB_UVERBS_ACCESS_REMOTE_WRITE = 2,
  IB_UVERBS_ACCESS_REMOTE_READ = 4,
  IB_UVERBS_ACCESS_REMOTE_ATOMIC = 8,
  IB_UVERBS_ACCESS_MW_BIND = 16,
  IB_UVERBS_ACCESS_ZERO_BASED = 32,
  IB_UVERBS_ACCESS_ON_DEMAND = 64,
  IB_UVERBS_ACCESS_HUGETLB = 128,
  IB_UVERBS_ACCESS_RELAXED_ORDERING = 1048576,
  IB_UVERBS_ACCESS_OPTIONAL_RANGE = 1072693248,
};

enum ib_uverbs_srq_type {
  IB_UVERBS_SRQT_BASIC = 0,
  IB_UVERBS_SRQT_XRC = 1,
  IB_UVERBS_SRQT_TM = 2,
};

enum ib_uverbs_wq_type {
  IB_UVERBS_WQT_RQ = 0,
};

enum ib_uverbs_wq_flags {
  IB_UVERBS_WQ_FLAGS_CVLAN_STRIPPING = 1,
  IB_UVERBS_WQ_FLAGS_SCATTER_FCS = 2,
  IB_UVERBS_WQ_FLAGS_DELAY_DROP = 4,
  IB_UVERBS_WQ_FLAGS_PCI_WRITE_END_PADDING = 8,
};

enum ib_uverbs_qp_type {
  IB_UVERBS_QPT_RC = 2,
  IB_UVERBS_QPT_UC = 3,
  IB_UVERBS_QPT_UD = 4,
  IB_UVERBS_QPT_RAW_PACKET = 8,
  IB_UVERBS_QPT_XRC_INI = 9,
  IB_UVERBS_QPT_XRC_TGT = 10,
  IB_UVERBS_QPT_DRIVER = 255,
};

enum ib_uverbs_qp_create_flags {
  IB_UVERBS_QP_CREATE_BLOCK_MULTICAST_LOOPBACK = 2,
  IB_UVERBS_QP_CREATE_SCATTER_FCS = 256,
  IB_UVERBS_QP_CREATE_CVLAN_STRIPPING = 512,
  IB_UVERBS_QP_CREATE_PCI_WRITE_END_PADDING = 2048,
  IB_UVERBS_QP_CREATE_SQ_SIG_ALL = 4096,
};

enum ib_uverbs_gid_type {
  IB_UVERBS_GID_TYPE_IB = 0,
  IB_UVERBS_GID_TYPE_ROCE_V1 = 1,
  IB_UVERBS_GID_TYPE_ROCE_V2 = 2,
};

union ib_gid {
  u8 raw[16];
  struct {
    __be64 subnet_prefix;
    __be64 interface_id;
  } global;
};

enum ib_poll_context {
  IB_POLL_SOFTIRQ = 0,
  IB_POLL_WORKQUEUE = 1,
  IB_POLL_UNBOUND_WORKQUEUE = 2,
  IB_POLL_LAST_POOL_TYPE = 2,
  IB_POLL_DIRECT = 3,
};

struct lsm_network_audit {
  int netif;
  const struct sock* sk;
  u16 family;
  __be16 dport;
  __be16 sport;
  union {
    struct {
      __be32 daddr;
      __be32 saddr;
    } v4;
    struct {
      struct in6_addr daddr;
      struct in6_addr saddr;
    } v6;
  } fam;
};

struct lsm_ioctlop_audit {
  struct path path;
  u16 cmd;
};

struct lsm_ibpkey_audit {
  u64 subnet_prefix;
  u16 pkey;
};

struct lsm_ibendport_audit {
  char dev_name[64];
  u8 port;
};

struct selinux_state;

struct selinux_audit_data {
  u32 ssid;
  u32 tsid;
  u16 tclass;
  u32 requested;
  u32 audited;
  u32 denied;
  int result;
  struct selinux_state* state;
};

struct common_audit_data {
  char type;
  union {
    struct path path;
    struct dentry* dentry;
    struct inode* inode;
    struct lsm_network_audit* net;
    int cap;
    int ipc_id;
    struct task_struct* tsk;
    struct {
      key_serial_t key;
      char* key_desc;
    } key_struct;
    char* kmod_name;
    struct lsm_ioctlop_audit* op;
    struct file* file;
    struct lsm_ibpkey_audit* ibpkey;
    struct lsm_ibendport_audit* ibendport;
    int reason;
  } u;
  union {
    struct selinux_audit_data* selinux_audit_data;
  };
};

enum {
  POLICYDB_CAPABILITY_NETPEER = 0,
  POLICYDB_CAPABILITY_OPENPERM = 1,
  POLICYDB_CAPABILITY_EXTSOCKCLASS = 2,
  POLICYDB_CAPABILITY_ALWAYSNETWORK = 3,
  POLICYDB_CAPABILITY_CGROUPSECLABEL = 4,
  POLICYDB_CAPABILITY_NNP_NOSUID_TRANSITION = 5,
  POLICYDB_CAPABILITY_GENFS_SECLABEL_SYMLINKS = 6,
  __POLICYDB_CAPABILITY_MAX = 7,
};

struct selinux_avc;

struct selinux_policy;

struct selinux_state {
  bool disabled;
  bool enforcing;
  bool checkreqprot;
  bool initialized;
  bool policycap[7];
  struct page* status_page;
  struct mutex status_lock;
  struct selinux_avc* avc;
  struct selinux_policy* policy;
  struct mutex policy_mutex;
};

struct avc_cache {
  struct hlist_head slots[512];
  spinlock_t slots_lock[512];
  atomic_t lru_hint;
  atomic_t active_nodes;
  u32 latest_notif;
};

struct selinux_avc {
  unsigned int avc_cache_threshold;
  struct avc_cache avc_cache;
};

struct av_decision {
  u32 allowed;
  u32 auditallow;
  u32 auditdeny;
  u32 seqno;
  u32 flags;
};

struct extended_perms_data {
  u32 p[8];
};

struct extended_perms_decision {
  u8 used;
  u8 driver;
  struct extended_perms_data* allowed;
  struct extended_perms_data* auditallow;
  struct extended_perms_data* dontaudit;
};

struct extended_perms {
  u16 len;
  struct extended_perms_data drivers;
};

struct avc_cache_stats {
  unsigned int lookups;
  unsigned int misses;
  unsigned int allocations;
  unsigned int reclaims;
  unsigned int frees;
};

struct security_class_mapping {
  const char* name;
  const char* perms[33];
};

struct trace_event_raw_selinux_audited {
  struct trace_entry ent;
  u32 requested;
  u32 denied;
  u32 audited;
  int result;
  u32 __data_loc_scontext;
  u32 __data_loc_tcontext;
  u32 __data_loc_tclass;
  char __data[0];
};

struct trace_event_data_offsets_selinux_audited {
  u32 scontext;
  u32 tcontext;
  u32 tclass;
};

typedef void (*btf_trace_selinux_audited)(
    void*,
    struct selinux_audit_data*,
    char*,
    char*,
    const char*);

struct avc_xperms_node;

struct avc_entry {
  u32 ssid;
  u32 tsid;
  u16 tclass;
  struct av_decision avd;
  struct avc_xperms_node* xp_node;
};

struct avc_xperms_node {
  struct extended_perms xp;
  struct list_head xpd_head;
};

struct avc_node {
  struct avc_entry ae;
  struct hlist_node list;
  struct callback_head rhead;
};

struct avc_xperms_decision_node {
  struct extended_perms_decision xpd;
  struct list_head xpd_list;
};

struct avc_callback_node {
  int (*callback)(u32);
  u32 events;
  struct avc_callback_node* next;
};

typedef __u16 __sum16;

typedef u16 u_int16_t;

struct rhltable {
  struct rhashtable ht;
};

enum sctp_endpoint_type {
  SCTP_EP_TYPE_SOCKET = 0,
  SCTP_EP_TYPE_ASSOCIATION = 1,
};

struct sctp_chunk;

struct sctp_inq {
  struct list_head in_chunk_list;
  struct sctp_chunk* in_progress;
  struct work_struct immediate;
};

struct sctp_bind_addr {
  __u16 port;
  struct list_head address_list;
};

struct sctp_ep_common {
  struct hlist_node node;
  int hashent;
  enum sctp_endpoint_type type;
  refcount_t refcnt;
  bool dead;
  struct sock* sk;
  struct net* net;
  struct sctp_inq inqueue;
  struct sctp_bind_addr bind_addr;
};

struct sctp_hmac_algo_param;

struct sctp_chunks_param;

struct sctp_endpoint {
  struct sctp_ep_common base;
  struct list_head asocs;
  __u8 secret_key[32];
  __u8* digest;
  __u32 sndbuf_policy;
  __u32 rcvbuf_policy;
  struct crypto_shash** auth_hmacs;
  struct sctp_hmac_algo_param* auth_hmacs_list;
  struct sctp_chunks_param* auth_chunk_list;
  struct list_head endpoint_shared_keys;
  __u16 active_key_id;
  __u8 ecn_enable : 1;
  __u8 auth_enable : 1;
  __u8 intl_enable : 1;
  __u8 prsctp_enable : 1;
  __u8 asconf_enable : 1;
  __u8 reconf_enable : 1;
  __u8 strreset_enable;
  u32 secid;
  u32 peer_secid;
};

struct sockaddr_in6 {
  short unsigned int sin6_family;
  __be16 sin6_port;
  __be32 sin6_flowinfo;
  struct in6_addr sin6_addr;
  __u32 sin6_scope_id;
};

enum ip_conntrack_info {
  IP_CT_ESTABLISHED = 0,
  IP_CT_RELATED = 1,
  IP_CT_NEW = 2,
  IP_CT_IS_REPLY = 3,
  IP_CT_ESTABLISHED_REPLY = 3,
  IP_CT_RELATED_REPLY = 4,
  IP_CT_NUMBER = 5,
  IP_CT_UNTRACKED = 7,
};

struct nf_conntrack {
  atomic_t use;
};

struct sockaddr_in {
  __kernel_sa_family_t sin_family;
  __be16 sin_port;
  struct in_addr sin_addr;
  unsigned char __pad[8];
};

struct nf_hook_state;

typedef unsigned int
nf_hookfn(void*, struct sk_buff*, const struct nf_hook_state*);

struct nf_hook_entry {
  nf_hookfn* hook;
  void* priv;
};

struct nf_hook_entries {
  u16 num_hook_entries;
  struct nf_hook_entry hooks[0];
};

struct nf_hook_state {
  unsigned int hook;
  u_int8_t pf;
  struct net_device* in;
  struct net_device* out;
  struct sock* sk;
  struct net* net;
  int (*okfn)(struct net*, struct sock*, struct sk_buff*);
};

struct nf_hook_ops {
  nf_hookfn* hook;
  struct net_device* dev;
  void* priv;
  u_int8_t pf;
  unsigned int hooknum;
  int priority;
};

enum nf_nat_manip_type {
  NF_NAT_MANIP_SRC = 0,
  NF_NAT_MANIP_DST = 1,
};

enum ip_conntrack_dir {
  IP_CT_DIR_ORIGINAL = 0,
  IP_CT_DIR_REPLY = 1,
  IP_CT_DIR_MAX = 2,
};

struct nf_conn;

struct nf_nat_hook {
  int (*parse_nat_setup)(
      struct nf_conn*,
      enum nf_nat_manip_type,
      const struct nlattr*);
  void (*decode_session)(struct sk_buff*, struct flowi*);
  unsigned int (*manip_pkt)(
      struct sk_buff*,
      struct nf_conn*,
      enum nf_nat_manip_type,
      enum ip_conntrack_dir);
};

union nf_inet_addr {
  __u32 all[4];
  __be32 ip;
  __be32 ip6[4];
  struct in_addr in;
  struct in6_addr in6;
};

union nf_conntrack_man_proto {
  __be16 all;
  struct {
    __be16 port;
  } tcp;
  struct {
    __be16 port;
  } udp;
  struct {
    __be16 id;
  } icmp;
  struct {
    __be16 port;
  } dccp;
  struct {
    __be16 port;
  } sctp;
  struct {
    __be16 key;
  } gre;
};

struct nf_conntrack_man {
  union nf_inet_addr u3;
  union nf_conntrack_man_proto u;
  u_int16_t l3num;
};

struct nf_conntrack_tuple {
  struct nf_conntrack_man src;
  struct {
    union nf_inet_addr u3;
    union {
      __be16 all;
      struct {
        __be16 port;
      } tcp;
      struct {
        __be16 port;
      } udp;
      struct {
        u_int8_t type;
        u_int8_t code;
      } icmp;
      struct {
        __be16 port;
      } dccp;
      struct {
        __be16 port;
      } sctp;
      struct {
        __be16 key;
      } gre;
    } u;
    u_int8_t protonum;
    u_int8_t dir;
  } dst;
};

struct nf_conntrack_tuple_hash {
  struct hlist_nulls_node hnnode;
  struct nf_conntrack_tuple tuple;
};

typedef u32 u_int32_t;

typedef u64 u_int64_t;

struct nf_ct_dccp {
  u_int8_t role[2];
  u_int8_t state;
  u_int8_t last_pkt;
  u_int8_t last_dir;
  u_int64_t handshake_seq;
};

enum sctp_conntrack {
  SCTP_CONNTRACK_NONE = 0,
  SCTP_CONNTRACK_CLOSED = 1,
  SCTP_CONNTRACK_COOKIE_WAIT = 2,
  SCTP_CONNTRACK_COOKIE_ECHOED = 3,
  SCTP_CONNTRACK_ESTABLISHED = 4,
  SCTP_CONNTRACK_SHUTDOWN_SENT = 5,
  SCTP_CONNTRACK_SHUTDOWN_RECD = 6,
  SCTP_CONNTRACK_SHUTDOWN_ACK_SENT = 7,
  SCTP_CONNTRACK_HEARTBEAT_SENT = 8,
  SCTP_CONNTRACK_HEARTBEAT_ACKED = 9,
  SCTP_CONNTRACK_MAX = 10,
};

struct ip_ct_sctp {
  enum sctp_conntrack state;
  __be32 vtag[2];
  u8 last_dir;
  u8 flags;
};

struct ip_ct_tcp_state {
  u_int32_t td_end;
  u_int32_t td_maxend;
  u_int32_t td_maxwin;
  u_int32_t td_maxack;
  u_int8_t td_scale;
  u_int8_t flags;
};

struct ip_ct_tcp {
  struct ip_ct_tcp_state seen[2];
  u_int8_t state;
  u_int8_t last_dir;
  u_int8_t retrans;
  u_int8_t last_index;
  u_int32_t last_seq;
  u_int32_t last_ack;
  u_int32_t last_end;
  u_int16_t last_win;
  u_int8_t last_wscale;
  u_int8_t last_flags;
};

struct nf_ct_udp {
  long unsigned int stream_ts;
};

struct nf_ct_gre {
  unsigned int stream_timeout;
  unsigned int timeout;
};

union nf_conntrack_proto {
  struct nf_ct_dccp dccp;
  struct ip_ct_sctp sctp;
  struct ip_ct_tcp tcp;
  struct nf_ct_udp udp;
  struct nf_ct_gre gre;
  unsigned int tmpl_padto;
};

struct nf_ct_ext;

struct nf_conn {
  struct nf_conntrack ct_general;
  spinlock_t lock;
  u32 timeout;
  struct nf_conntrack_tuple_hash tuplehash[2];
  long unsigned int status;
  u16 cpu;
  possible_net_t ct_net;
  struct hlist_node nat_bysource;
  struct {
  } __nfct_init_offset;
  struct nf_conn* master;
  u_int32_t mark;
  struct nf_ct_ext* ext;
  union nf_conntrack_proto proto;
};

struct nf_conntrack_zone {
  u16 id;
  u8 flags;
  u8 dir;
};

struct nf_ct_hook {
  int (*update)(struct net*, struct sk_buff*);
  void (*destroy)(struct nf_conntrack*);
  bool (*get_tuple_skb)(struct nf_conntrack_tuple*, const struct sk_buff*);
};

struct nfnl_ct_hook {
  size_t (*build_size)(const struct nf_conn*);
  int (*build)(
      struct sk_buff*,
      struct nf_conn*,
      enum ip_conntrack_info,
      u_int16_t,
      u_int16_t);
  int (*parse)(const struct nlattr*, struct nf_conn*);
  int (*attach_expect)(const struct nlattr*, struct nf_conn*, u32, u32);
  void (*seq_adjust)(
      struct sk_buff*,
      struct nf_conn*,
      enum ip_conntrack_info,
      s32);
};

enum nf_ip_hook_priorities {
  NF_IP_PRI_FIRST = 2147483648,
  NF_IP_PRI_RAW_BEFORE_DEFRAG = 4294966846,
  NF_IP_PRI_CONNTRACK_DEFRAG = 4294966896,
  NF_IP_PRI_RAW = 4294966996,
  NF_IP_PRI_SELINUX_FIRST = 4294967071,
  NF_IP_PRI_CONNTRACK = 4294967096,
  NF_IP_PRI_MANGLE = 4294967146,
  NF_IP_PRI_NAT_DST = 4294967196,
  NF_IP_PRI_FILTER = 0,
  NF_IP_PRI_SECURITY = 50,
  NF_IP_PRI_NAT_SRC = 100,
  NF_IP_PRI_SELINUX_LAST = 225,
  NF_IP_PRI_CONNTRACK_HELPER = 300,
  NF_IP_PRI_CONNTRACK_CONFIRM = 2147483647,
  NF_IP_PRI_LAST = 2147483647,
};

enum nf_ip6_hook_priorities {
  NF_IP6_PRI_FIRST = 2147483648,
  NF_IP6_PRI_RAW_BEFORE_DEFRAG = 4294966846,
  NF_IP6_PRI_CONNTRACK_DEFRAG = 4294966896,
  NF_IP6_PRI_RAW = 4294966996,
  NF_IP6_PRI_SELINUX_FIRST = 4294967071,
  NF_IP6_PRI_CONNTRACK = 4294967096,
  NF_IP6_PRI_MANGLE = 4294967146,
  NF_IP6_PRI_NAT_DST = 4294967196,
  NF_IP6_PRI_FILTER = 0,
  NF_IP6_PRI_SECURITY = 50,
  NF_IP6_PRI_NAT_SRC = 100,
  NF_IP6_PRI_SELINUX_LAST = 225,
  NF_IP6_PRI_CONNTRACK_HELPER = 300,
  NF_IP6_PRI_LAST = 2147483647,
};

struct socket_alloc {
  struct socket socket;
  struct inode vfs_inode;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct ip_options {
  __be32 faddr;
  __be32 nexthop;
  unsigned char optlen;
  unsigned char srr;
  unsigned char rr;
  unsigned char ts;
  unsigned char is_strictroute : 1;
  unsigned char srr_is_hit : 1;
  unsigned char is_changed : 1;
  unsigned char rr_needaddr : 1;
  unsigned char ts_needtime : 1;
  unsigned char ts_needaddr : 1;
  unsigned char router_alert;
  unsigned char cipso;
  unsigned char __pad2;
  unsigned char __data[0];
};

struct ip_options_rcu {
  struct callback_head rcu;
  struct ip_options opt;
};

struct ipv6_opt_hdr;

struct ipv6_rt_hdr;

struct ipv6_txoptions {
  refcount_t refcnt;
  int tot_len;
  __u16 opt_flen;
  __u16 opt_nflen;
  struct ipv6_opt_hdr* hopopt;
  struct ipv6_opt_hdr* dst0opt;
  struct ipv6_rt_hdr* srcrt;
  struct ipv6_opt_hdr* dst1opt;
  struct callback_head rcu;
};

struct inet_cork {
  unsigned int flags;
  __be32 addr;
  struct ip_options* opt;
  unsigned int fragsize;
  int length;
  struct dst_entry* dst;
  u8 tx_flags;
  __u8 ttl;
  __s16 tos;
  char priority;
  __u16 gso_size;
  u64 transmit_time;
  u32 mark;
};

struct inet_cork_full {
  struct inet_cork base;
  struct flowi fl;
};

struct ipv6_pinfo;

struct ip_mc_socklist;

struct inet_sock {
  struct sock sk;
  struct ipv6_pinfo* pinet6;
  __be32 inet_saddr;
  __s16 uc_ttl;
  __u16 cmsg_flags;
  __be16 inet_sport;
  __u16 inet_id;
  struct ip_options_rcu* inet_opt;
  int rx_dst_ifindex;
  __u8 tos;
  __u8 min_ttl;
  __u8 mc_ttl;
  __u8 pmtudisc;
  __u8 recverr : 1;
  __u8 is_icsk : 1;
  __u8 freebind : 1;
  __u8 hdrincl : 1;
  __u8 mc_loop : 1;
  __u8 transparent : 1;
  __u8 mc_all : 1;
  __u8 nodefrag : 1;
  __u8 bind_address_no_port : 1;
  __u8 recverr_rfc4884 : 1;
  __u8 defer_connect : 1;
  __u8 rcv_tos;
  __u8 convert_csum;
  int uc_index;
  int mc_index;
  __be32 mc_addr;
  struct ip_mc_socklist* mc_list;
  struct inet_cork_full cork;
};

struct in6_pktinfo {
  struct in6_addr ipi6_addr;
  int ipi6_ifindex;
};

struct inet6_cork {
  struct ipv6_txoptions* opt;
  u8 hop_limit;
  u8 tclass;
};

struct ipv6_mc_socklist;

struct ipv6_ac_socklist;

struct ipv6_fl_socklist;

struct ipv6_pinfo {
  struct in6_addr saddr;
  struct in6_pktinfo sticky_pktinfo;
  const struct in6_addr* daddr_cache;
  const struct in6_addr* saddr_cache;
  __be32 flow_label;
  __u32 frag_size;
  __u16 __unused_1 : 7;
  __s16 hop_limit : 9;
  __u16 mc_loop : 1;
  __u16 __unused_2 : 6;
  __s16 mcast_hops : 9;
  int ucast_oif;
  int mcast_oif;
  union {
    struct {
      __u16 srcrt : 1;
      __u16 osrcrt : 1;
      __u16 rxinfo : 1;
      __u16 rxoinfo : 1;
      __u16 rxhlim : 1;
      __u16 rxohlim : 1;
      __u16 hopopts : 1;
      __u16 ohopopts : 1;
      __u16 dstopts : 1;
      __u16 odstopts : 1;
      __u16 rxflow : 1;
      __u16 rxtclass : 1;
      __u16 rxpmtu : 1;
      __u16 rxorigdstaddr : 1;
      __u16 recvfragsize : 1;
    } bits;
    __u16 all;
  } rxopt;
  __u16 recverr : 1;
  __u16 sndflow : 1;
  __u16 repflow : 1;
  __u16 pmtudisc : 3;
  __u16 padding : 1;
  __u16 srcprefs : 3;
  __u16 dontfrag : 1;
  __u16 autoflowlabel : 1;
  __u16 autoflowlabel_set : 1;
  __u16 mc_all : 1;
  __u16 recverr_rfc4884 : 1;
  __u16 rtalert_isolate : 1;
  __u8 min_hopcount;
  __u8 tclass;
  __be32 rcv_flowinfo;
  __u32 dst_cookie;
  __u32 rx_dst_cookie;
  struct ipv6_mc_socklist* ipv6_mc_list;
  struct ipv6_ac_socklist* ipv6_ac_list;
  struct ipv6_fl_socklist* ipv6_fl_list;
  struct ipv6_txoptions* opt;
  struct sk_buff* pktoptions;
  struct sk_buff* rxpmtu;
  struct inet6_cork cork;
};

struct tcphdr {
  __be16 source;
  __be16 dest;
  __be32 seq;
  __be32 ack_seq;
  __u16 res1 : 4;
  __u16 doff : 4;
  __u16 fin : 1;
  __u16 syn : 1;
  __u16 rst : 1;
  __u16 psh : 1;
  __u16 ack : 1;
  __u16 urg : 1;
  __u16 ece : 1;
  __u16 cwr : 1;
  __be16 window;
  __sum16 check;
  __be16 urg_ptr;
};

struct iphdr {
  __u8 ihl : 4;
  __u8 version : 4;
  __u8 tos;
  __be16 tot_len;
  __be16 id;
  __be16 frag_off;
  __u8 ttl;
  __u8 protocol;
  __sum16 check;
  __be32 saddr;
  __be32 daddr;
};

struct ipv6_rt_hdr {
  __u8 nexthdr;
  __u8 hdrlen;
  __u8 type;
  __u8 segments_left;
};

struct ipv6_opt_hdr {
  __u8 nexthdr;
  __u8 hdrlen;
};

struct ipv6hdr {
  __u8 priority : 4;
  __u8 version : 4;
  __u8 flow_lbl[3];
  __be16 payload_len;
  __u8 nexthdr;
  __u8 hop_limit;
  struct in6_addr saddr;
  struct in6_addr daddr;
};

struct udphdr {
  __be16 source;
  __be16 dest;
  __be16 len;
  __sum16 check;
};

struct inet6_skb_parm {
  int iif;
  __be16 ra;
  __u16 dst0;
  __u16 srcrt;
  __u16 dst1;
  __u16 lastopt;
  __u16 nhoff;
  __u16 flags;
  __u16 dsthao;
  __u16 frag_max_size;
};

struct ip6_sf_socklist;

struct ipv6_mc_socklist {
  struct in6_addr addr;
  int ifindex;
  unsigned int sfmode;
  struct ipv6_mc_socklist* next;
  rwlock_t sflock;
  struct ip6_sf_socklist* sflist;
  struct callback_head rcu;
};

struct ipv6_ac_socklist {
  struct in6_addr acl_addr;
  int acl_ifindex;
  struct ipv6_ac_socklist* acl_next;
};

struct ip6_flowlabel;

struct ipv6_fl_socklist {
  struct ipv6_fl_socklist* next;
  struct ip6_flowlabel* fl;
  struct callback_head rcu;
};

struct ip6_sf_socklist {
  unsigned int sl_max;
  unsigned int sl_count;
  struct in6_addr sl_addr[0];
};

struct ip6_flowlabel {
  struct ip6_flowlabel* next;
  __be32 label;
  atomic_t users;
  struct in6_addr dst;
  struct ipv6_txoptions* opt;
  long unsigned int linger;
  struct callback_head rcu;
  u8 share;
  union {
    struct pid* pid;
    kuid_t uid;
  } owner;
  long unsigned int lastuse;
  long unsigned int expires;
  struct net* fl_net;
};

struct inet_skb_parm {
  int iif;
  struct ip_options opt;
  u16 flags;
  u16 frag_max_size;
};

struct nf_ipv6_ops {
  void (*route_input)(struct sk_buff*);
  int (*fragment)(
      struct net*,
      struct sock*,
      struct sk_buff*,
      int (*)(struct net*, struct sock*, struct sk_buff*));
  int (*reroute)(struct sk_buff*, const struct nf_queue_entry*);
};

struct nf_queue_entry {
  struct list_head list;
  struct sk_buff* skb;
  unsigned int id;
  unsigned int hook_index;
  struct net_device* physin;
  struct net_device* physout;
  struct nf_hook_state state;
  u16 size;
};

struct tty_file_private {
  struct tty_struct* tty;
  struct file* file;
  struct list_head list;
};

struct icmp_err {
  int errno;
  unsigned int fatal : 1;
};

struct dccp_hdr {
  __be16 dccph_sport;
  __be16 dccph_dport;
  __u8 dccph_doff;
  __u8 dccph_cscov : 4;
  __u8 dccph_ccval : 4;
  __sum16 dccph_checksum;
  __u8 dccph_x : 1;
  __u8 dccph_type : 4;
  __u8 dccph_reserved : 3;
  __u8 dccph_seq2;
  __be16 dccph_seq;
};

enum dccp_state {
  DCCP_OPEN = 1,
  DCCP_REQUESTING = 2,
  DCCP_LISTEN = 10,
  DCCP_RESPOND = 3,
  DCCP_ACTIVE_CLOSEREQ = 4,
  DCCP_PASSIVE_CLOSE = 8,
  DCCP_CLOSING = 11,
  DCCP_TIME_WAIT = 6,
  DCCP_CLOSED = 7,
  DCCP_NEW_SYN_RECV = 12,
  DCCP_PARTOPEN = 13,
  DCCP_PASSIVE_CLOSEREQ = 14,
  DCCP_MAX_STATES = 15,
};

typedef __s32 sctp_assoc_t;

enum sctp_msg_flags {
  MSG_NOTIFICATION = 32768,
};

struct sctp_initmsg {
  __u16 sinit_num_ostreams;
  __u16 sinit_max_instreams;
  __u16 sinit_max_attempts;
  __u16 sinit_max_init_timeo;
};

struct sctp_sndrcvinfo {
  __u16 sinfo_stream;
  __u16 sinfo_ssn;
  __u16 sinfo_flags;
  __u32 sinfo_ppid;
  __u32 sinfo_context;
  __u32 sinfo_timetolive;
  __u32 sinfo_tsn;
  __u32 sinfo_cumtsn;
  sctp_assoc_t sinfo_assoc_id;
};

struct sctp_rtoinfo {
  sctp_assoc_t srto_assoc_id;
  __u32 srto_initial;
  __u32 srto_max;
  __u32 srto_min;
};

struct sctp_assocparams {
  sctp_assoc_t sasoc_assoc_id;
  __u16 sasoc_asocmaxrxt;
  __u16 sasoc_number_peer_destinations;
  __u32 sasoc_peer_rwnd;
  __u32 sasoc_local_rwnd;
  __u32 sasoc_cookie_life;
};

struct sctp_paddrparams {
  sctp_assoc_t spp_assoc_id;
  struct __kernel_sockaddr_storage spp_address;
  __u32 spp_hbinterval;
  __u16 spp_pathmaxrxt;
  __u32 spp_pathmtu;
  __u32 spp_sackdelay;
  __u32 spp_flags;
  __u32 spp_ipv6_flowlabel;
  __u8 spp_dscp;
  char : 8;
} __attribute__((packed));

struct sctphdr {
  __be16 source;
  __be16 dest;
  __be32 vtag;
  __le32 checksum;
};

struct sctp_chunkhdr {
  __u8 type;
  __u8 flags;
  __be16 length;
};

enum sctp_cid {
  SCTP_CID_DATA = 0,
  SCTP_CID_INIT = 1,
  SCTP_CID_INIT_ACK = 2,
  SCTP_CID_SACK = 3,
  SCTP_CID_HEARTBEAT = 4,
  SCTP_CID_HEARTBEAT_ACK = 5,
  SCTP_CID_ABORT = 6,
  SCTP_CID_SHUTDOWN = 7,
  SCTP_CID_SHUTDOWN_ACK = 8,
  SCTP_CID_ERROR = 9,
  SCTP_CID_COOKIE_ECHO = 10,
  SCTP_CID_COOKIE_ACK = 11,
  SCTP_CID_ECN_ECNE = 12,
  SCTP_CID_ECN_CWR = 13,
  SCTP_CID_SHUTDOWN_COMPLETE = 14,
  SCTP_CID_AUTH = 15,
  SCTP_CID_I_DATA = 64,
  SCTP_CID_FWD_TSN = 192,
  SCTP_CID_ASCONF = 193,
  SCTP_CID_I_FWD_TSN = 194,
  SCTP_CID_ASCONF_ACK = 128,
  SCTP_CID_RECONF = 130,
};

struct sctp_paramhdr {
  __be16 type;
  __be16 length;
};

enum sctp_param {
  SCTP_PARAM_HEARTBEAT_INFO = 256,
  SCTP_PARAM_IPV4_ADDRESS = 1280,
  SCTP_PARAM_IPV6_ADDRESS = 1536,
  SCTP_PARAM_STATE_COOKIE = 1792,
  SCTP_PARAM_UNRECOGNIZED_PARAMETERS = 2048,
  SCTP_PARAM_COOKIE_PRESERVATIVE = 2304,
  SCTP_PARAM_HOST_NAME_ADDRESS = 2816,
  SCTP_PARAM_SUPPORTED_ADDRESS_TYPES = 3072,
  SCTP_PARAM_ECN_CAPABLE = 128,
  SCTP_PARAM_RANDOM = 640,
  SCTP_PARAM_CHUNKS = 896,
  SCTP_PARAM_HMAC_ALGO = 1152,
  SCTP_PARAM_SUPPORTED_EXT = 2176,
  SCTP_PARAM_FWD_TSN_SUPPORT = 192,
  SCTP_PARAM_ADD_IP = 448,
  SCTP_PARAM_DEL_IP = 704,
  SCTP_PARAM_ERR_CAUSE = 960,
  SCTP_PARAM_SET_PRIMARY = 1216,
  SCTP_PARAM_SUCCESS_REPORT = 1472,
  SCTP_PARAM_ADAPTATION_LAYER_IND = 1728,
  SCTP_PARAM_RESET_OUT_REQUEST = 3328,
  SCTP_PARAM_RESET_IN_REQUEST = 3584,
  SCTP_PARAM_RESET_TSN_REQUEST = 3840,
  SCTP_PARAM_RESET_RESPONSE = 4096,
  SCTP_PARAM_RESET_ADD_OUT_STREAMS = 4352,
  SCTP_PARAM_RESET_ADD_IN_STREAMS = 4608,
};

struct sctp_datahdr {
  __be32 tsn;
  __be16 stream;
  __be16 ssn;
  __u32 ppid;
  __u8 payload[0];
};

struct sctp_idatahdr {
  __be32 tsn;
  __be16 stream;
  __be16 reserved;
  __be32 mid;
  union {
    __u32 ppid;
    __be32 fsn;
  };
  __u8 payload[0];
};

struct sctp_inithdr {
  __be32 init_tag;
  __be32 a_rwnd;
  __be16 num_outbound_streams;
  __be16 num_inbound_streams;
  __be32 initial_tsn;
  __u8 params[0];
};

struct sctp_init_chunk {
  struct sctp_chunkhdr chunk_hdr;
  struct sctp_inithdr init_hdr;
};

struct sctp_ipv4addr_param {
  struct sctp_paramhdr param_hdr;
  struct in_addr addr;
};

struct sctp_ipv6addr_param {
  struct sctp_paramhdr param_hdr;
  struct in6_addr addr;
};

struct sctp_cookie_preserve_param {
  struct sctp_paramhdr param_hdr;
  __be32 lifespan_increment;
};

struct sctp_hostname_param {
  struct sctp_paramhdr param_hdr;
  uint8_t hostname[0];
};

struct sctp_supported_addrs_param {
  struct sctp_paramhdr param_hdr;
  __be16 types[0];
};

struct sctp_adaptation_ind_param {
  struct sctp_paramhdr param_hdr;
  __be32 adaptation_ind;
};

struct sctp_supported_ext_param {
  struct sctp_paramhdr param_hdr;
  __u8 chunks[0];
};

struct sctp_random_param {
  struct sctp_paramhdr param_hdr;
  __u8 random_val[0];
};

struct sctp_chunks_param {
  struct sctp_paramhdr param_hdr;
  __u8 chunks[0];
};

struct sctp_hmac_algo_param {
  struct sctp_paramhdr param_hdr;
  __be16 hmac_ids[0];
};

struct sctp_cookie_param {
  struct sctp_paramhdr p;
  __u8 body[0];
};

struct sctp_gap_ack_block {
  __be16 start;
  __be16 end;
};

union sctp_sack_variable {
  struct sctp_gap_ack_block gab;
  __be32 dup;
};

struct sctp_sackhdr {
  __be32 cum_tsn_ack;
  __be32 a_rwnd;
  __be16 num_gap_ack_blocks;
  __be16 num_dup_tsns;
  union sctp_sack_variable variable[0];
};

struct sctp_heartbeathdr {
  struct sctp_paramhdr info;
};

struct sctp_shutdownhdr {
  __be32 cum_tsn_ack;
};

struct sctp_errhdr {
  __be16 cause;
  __be16 length;
  __u8 variable[0];
};

struct sctp_ecnehdr {
  __be32 lowest_tsn;
};

struct sctp_cwrhdr {
  __be32 lowest_tsn;
};

struct sctp_fwdtsn_skip {
  __be16 stream;
  __be16 ssn;
};

struct sctp_fwdtsn_hdr {
  __be32 new_cum_tsn;
  struct sctp_fwdtsn_skip skip[0];
};

struct sctp_ifwdtsn_skip {
  __be16 stream;
  __u8 reserved;
  __u8 flags;
  __be32 mid;
};

struct sctp_ifwdtsn_hdr {
  __be32 new_cum_tsn;
  struct sctp_ifwdtsn_skip skip[0];
};

struct sctp_addip_param {
  struct sctp_paramhdr param_hdr;
  __be32 crr_id;
};

struct sctp_addiphdr {
  __be32 serial;
  __u8 params[0];
};

struct sctp_authhdr {
  __be16 shkey_id;
  __be16 hmac_id;
  __u8 hmac[0];
};

union sctp_addr {
  struct sockaddr_in v4;
  struct sockaddr_in6 v6;
  struct sockaddr sa;
};

struct sctp_cookie {
  __u32 my_vtag;
  __u32 peer_vtag;
  __u32 my_ttag;
  __u32 peer_ttag;
  ktime_t expiration;
  __u16 sinit_num_ostreams;
  __u16 sinit_max_instreams;
  __u32 initial_tsn;
  union sctp_addr peer_addr;
  __u16 my_port;
  __u8 prsctp_capable;
  __u8 padding;
  __u32 adaptation_ind;
  __u8 auth_random[36];
  __u8 auth_hmacs[10];
  __u8 auth_chunks[20];
  __u32 raw_addr_list_len;
  struct sctp_init_chunk peer_init[0];
};

struct sctp_tsnmap {
  long unsigned int* tsn_map;
  __u32 base_tsn;
  __u32 cumulative_tsn_ack_point;
  __u32 max_tsn_seen;
  __u16 len;
  __u16 pending_data;
  __u16 num_dup_tsns;
  __be32 dup_tsns[16];
};

struct sctp_inithdr_host {
  __u32 init_tag;
  __u32 a_rwnd;
  __u16 num_outbound_streams;
  __u16 num_inbound_streams;
  __u32 initial_tsn;
};

enum sctp_state {
  SCTP_STATE_CLOSED = 0,
  SCTP_STATE_COOKIE_WAIT = 1,
  SCTP_STATE_COOKIE_ECHOED = 2,
  SCTP_STATE_ESTABLISHED = 3,
  SCTP_STATE_SHUTDOWN_PENDING = 4,
  SCTP_STATE_SHUTDOWN_SENT = 5,
  SCTP_STATE_SHUTDOWN_RECEIVED = 6,
  SCTP_STATE_SHUTDOWN_ACK_SENT = 7,
};

struct sctp_stream_out_ext;

struct sctp_stream_out {
  union {
    __u32 mid;
    __u16 ssn;
  };
  __u32 mid_uo;
  struct sctp_stream_out_ext* ext;
  __u8 state;
};

struct sctp_stream_in {
  union {
    __u32 mid;
    __u16 ssn;
  };
  __u32 mid_uo;
  __u32 fsn;
  __u32 fsn_uo;
  char pd_mode;
  char pd_mode_uo;
};

struct sctp_stream_interleave;

struct sctp_stream {
  struct {
    struct __genradix tree;
    struct sctp_stream_out type[0];
  } out;
  struct {
    struct __genradix tree;
    struct sctp_stream_in type[0];
  } in;
  __u16 outcnt;
  __u16 incnt;
  struct sctp_stream_out* out_curr;
  union {
    struct {
      struct list_head prio_list;
    };
    struct {
      struct list_head rr_list;
      struct sctp_stream_out_ext* rr_next;
    };
  };
  struct sctp_stream_interleave* si;
};

struct sctp_sched_ops;

struct sctp_association;

struct sctp_outq {
  struct sctp_association* asoc;
  struct list_head out_chunk_list;
  struct sctp_sched_ops* sched;
  unsigned int out_qlen;
  unsigned int error;
  struct list_head control_chunk_list;
  struct list_head sacked;
  struct list_head retransmit;
  struct list_head abandoned;
  __u32 outstanding_bytes;
  char fast_rtx;
  char cork;
};

struct sctp_ulpq {
  char pd_mode;
  struct sctp_association* asoc;
  struct sk_buff_head reasm;
  struct sk_buff_head reasm_uo;
  struct sk_buff_head lobby;
};

struct sctp_priv_assoc_stats {
  struct __kernel_sockaddr_storage obs_rto_ipaddr;
  __u64 max_obs_rto;
  __u64 isacks;
  __u64 osacks;
  __u64 opackets;
  __u64 ipackets;
  __u64 rtxchunks;
  __u64 outofseqtsns;
  __u64 idupchunks;
  __u64 gapcnt;
  __u64 ouodchunks;
  __u64 iuodchunks;
  __u64 oodchunks;
  __u64 iodchunks;
  __u64 octrlchunks;
  __u64 ictrlchunks;
};

struct sctp_transport;

struct sctp_auth_bytes;

struct sctp_shared_key;

struct sctp_association {
  struct sctp_ep_common base;
  struct list_head asocs;
  sctp_assoc_t assoc_id;
  struct sctp_endpoint* ep;
  struct sctp_cookie c;
  struct {
    struct list_head transport_addr_list;
    __u32 rwnd;
    __u16 transport_count;
    __u16 port;
    struct sctp_transport* primary_path;
    union sctp_addr primary_addr;
    struct sctp_transport* active_path;
    struct sctp_transport* retran_path;
    struct sctp_transport* last_sent_to;
    struct sctp_transport* last_data_from;
    struct sctp_tsnmap tsn_map;
    __be16 addip_disabled_mask;
    __u16 ecn_capable : 1;
    __u16 ipv4_address : 1;
    __u16 ipv6_address : 1;
    __u16 hostname_address : 1;
    __u16 asconf_capable : 1;
    __u16 prsctp_capable : 1;
    __u16 reconf_capable : 1;
    __u16 intl_capable : 1;
    __u16 auth_capable : 1;
    __u16 sack_needed : 1;
    __u16 sack_generation : 1;
    __u16 zero_window_announced : 1;
    __u32 sack_cnt;
    __u32 adaptation_ind;
    struct sctp_inithdr_host i;
    void* cookie;
    int cookie_len;
    __u32 addip_serial;
    struct sctp_random_param* peer_random;
    struct sctp_chunks_param* peer_chunks;
    struct sctp_hmac_algo_param* peer_hmacs;
  } peer;
  enum sctp_state state;
  int overall_error_count;
  ktime_t cookie_life;
  long unsigned int rto_initial;
  long unsigned int rto_max;
  long unsigned int rto_min;
  int max_burst;
  int max_retrans;
  __u16 pf_retrans;
  __u16 ps_retrans;
  __u16 max_init_attempts;
  __u16 init_retries;
  long unsigned int max_init_timeo;
  long unsigned int hbinterval;
  __be16 encap_port;
  __u16 pathmaxrxt;
  __u32 flowlabel;
  __u8 dscp;
  __u8 pmtu_pending;
  __u32 pathmtu;
  __u32 param_flags;
  __u32 sackfreq;
  long unsigned int sackdelay;
  long unsigned int timeouts[11];
  struct timer_list timers[11];
  struct sctp_transport* shutdown_last_sent_to;
  struct sctp_transport* init_last_sent_to;
  int shutdown_retries;
  __u32 next_tsn;
  __u32 ctsn_ack_point;
  __u32 adv_peer_ack_point;
  __u32 highest_sacked;
  __u32 fast_recovery_exit;
  __u8 fast_recovery;
  __u16 unack_data;
  __u32 rtx_data_chunks;
  __u32 rwnd;
  __u32 a_rwnd;
  __u32 rwnd_over;
  __u32 rwnd_press;
  int sndbuf_used;
  atomic_t rmem_alloc;
  wait_queue_head_t wait;
  __u32 frag_point;
  __u32 user_frag;
  int init_err_counter;
  int init_cycle;
  __u16 default_stream;
  __u16 default_flags;
  __u32 default_ppid;
  __u32 default_context;
  __u32 default_timetolive;
  __u32 default_rcv_context;
  struct sctp_stream stream;
  struct sctp_outq outqueue;
  struct sctp_ulpq ulpq;
  __u32 last_ecne_tsn;
  __u32 last_cwr_tsn;
  int numduptsns;
  struct sctp_chunk* addip_last_asconf;
  struct list_head asconf_ack_list;
  struct list_head addip_chunk_list;
  __u32 addip_serial;
  int src_out_of_asoc_ok;
  union sctp_addr* asconf_addr_del_pending;
  struct sctp_transport* new_transport;
  struct list_head endpoint_shared_keys;
  struct sctp_auth_bytes* asoc_shared_key;
  struct sctp_shared_key* shkey;
  __u16 default_hmac_id;
  __u16 active_key_id;
  __u8 need_ecne : 1;
  __u8 temp : 1;
  __u8 pf_expose : 2;
  __u8 force_delay : 1;
  __u8 strreset_enable;
  __u8 strreset_outstanding;
  __u32 strreset_outseq;
  __u32 strreset_inseq;
  __u32 strreset_result[2];
  struct sctp_chunk* strreset_chunk;
  struct sctp_priv_assoc_stats stats;
  int sent_cnt_removable;
  __u16 subscribe;
  __u64 abandoned_unsent[3];
  __u64 abandoned_sent[3];
  struct callback_head rcu;
};

struct sctp_auth_bytes {
  refcount_t refcnt;
  __u32 len;
  __u8 data[0];
};

struct sctp_shared_key {
  struct list_head key_list;
  struct sctp_auth_bytes* key;
  refcount_t refcnt;
  __u16 key_id;
  __u8 deactivated;
};

enum {
  SCTP_MAX_STREAM = 65535,
};

enum sctp_event_timeout {
  SCTP_EVENT_TIMEOUT_NONE = 0,
  SCTP_EVENT_TIMEOUT_T1_COOKIE = 1,
  SCTP_EVENT_TIMEOUT_T1_INIT = 2,
  SCTP_EVENT_TIMEOUT_T2_SHUTDOWN = 3,
  SCTP_EVENT_TIMEOUT_T3_RTX = 4,
  SCTP_EVENT_TIMEOUT_T4_RTO = 5,
  SCTP_EVENT_TIMEOUT_T5_SHUTDOWN_GUARD = 6,
  SCTP_EVENT_TIMEOUT_HEARTBEAT = 7,
  SCTP_EVENT_TIMEOUT_RECONF = 8,
  SCTP_EVENT_TIMEOUT_SACK = 9,
  SCTP_EVENT_TIMEOUT_AUTOCLOSE = 10,
};

enum {
  SCTP_MAX_DUP_TSNS = 16,
};

enum sctp_scope {
  SCTP_SCOPE_GLOBAL = 0,
  SCTP_SCOPE_PRIVATE = 1,
  SCTP_SCOPE_LINK = 2,
  SCTP_SCOPE_LOOPBACK = 3,
  SCTP_SCOPE_UNUSABLE = 4,
};

enum {
  SCTP_AUTH_HMAC_ID_RESERVED_0 = 0,
  SCTP_AUTH_HMAC_ID_SHA1 = 1,
  SCTP_AUTH_HMAC_ID_RESERVED_2 = 2,
  SCTP_AUTH_HMAC_ID_SHA256 = 3,
  __SCTP_AUTH_HMAC_MAX = 4,
};

struct sctp_ulpevent {
  struct sctp_association* asoc;
  struct sctp_chunk* chunk;
  unsigned int rmem_len;
  union {
    __u32 mid;
    __u16 ssn;
  };
  union {
    __u32 ppid;
    __u32 fsn;
  };
  __u32 tsn;
  __u32 cumtsn;
  __u16 stream;
  __u16 flags;
  __u16 msg_flags;
} __attribute__((packed));

union sctp_addr_param;

union sctp_params {
  void* v;
  struct sctp_paramhdr* p;
  struct sctp_cookie_preserve_param* life;
  struct sctp_hostname_param* dns;
  struct sctp_cookie_param* cookie;
  struct sctp_supported_addrs_param* sat;
  struct sctp_ipv4addr_param* v4;
  struct sctp_ipv6addr_param* v6;
  union sctp_addr_param* addr;
  struct sctp_adaptation_ind_param* aind;
  struct sctp_supported_ext_param* ext;
  struct sctp_random_param* random;
  struct sctp_chunks_param* chunks;
  struct sctp_hmac_algo_param* hmac_algo;
  struct sctp_addip_param* addip;
};

struct sctp_sender_hb_info;

struct sctp_signed_cookie;

struct sctp_datamsg;

struct sctp_chunk {
  struct list_head list;
  refcount_t refcnt;
  int sent_count;
  union {
    struct list_head transmitted_list;
    struct list_head stream_list;
  };
  struct list_head frag_list;
  struct sk_buff* skb;
  union {
    struct sk_buff* head_skb;
    struct sctp_shared_key* shkey;
  };
  union sctp_params param_hdr;
  union {
    __u8* v;
    struct sctp_datahdr* data_hdr;
    struct sctp_inithdr* init_hdr;
    struct sctp_sackhdr* sack_hdr;
    struct sctp_heartbeathdr* hb_hdr;
    struct sctp_sender_hb_info* hbs_hdr;
    struct sctp_shutdownhdr* shutdown_hdr;
    struct sctp_signed_cookie* cookie_hdr;
    struct sctp_ecnehdr* ecne_hdr;
    struct sctp_cwrhdr* ecn_cwr_hdr;
    struct sctp_errhdr* err_hdr;
    struct sctp_addiphdr* addip_hdr;
    struct sctp_fwdtsn_hdr* fwdtsn_hdr;
    struct sctp_authhdr* auth_hdr;
    struct sctp_idatahdr* idata_hdr;
    struct sctp_ifwdtsn_hdr* ifwdtsn_hdr;
  } subh;
  __u8* chunk_end;
  struct sctp_chunkhdr* chunk_hdr;
  struct sctphdr* sctp_hdr;
  struct sctp_sndrcvinfo sinfo;
  struct sctp_association* asoc;
  struct sctp_ep_common* rcvr;
  long unsigned int sent_at;
  union sctp_addr source;
  union sctp_addr dest;
  struct sctp_datamsg* msg;
  struct sctp_transport* transport;
  struct sk_buff* auth_chunk;
  __u16 rtt_in_progress : 1;
  __u16 has_tsn : 1;
  __u16 has_ssn : 1;
  __u16 singleton : 1;
  __u16 end_of_packet : 1;
  __u16 ecn_ce_done : 1;
  __u16 pdiscard : 1;
  __u16 tsn_gap_acked : 1;
  __u16 data_accepted : 1;
  __u16 auth : 1;
  __u16 has_asconf : 1;
  __u16 tsn_missing_report : 2;
  __u16 fast_retransmit : 2;
};

struct sctp_stream_interleave {
  __u16 data_chunk_len;
  __u16 ftsn_chunk_len;
  struct sctp_chunk* (*make_datafrag)(
      const struct sctp_association*,
      const struct sctp_sndrcvinfo*,
      int,
      __u8,
      gfp_t);
  void (*assign_number)(struct sctp_chunk*);
  bool (*validate_data)(struct sctp_chunk*);
  int (*ulpevent_data)(struct sctp_ulpq*, struct sctp_chunk*, gfp_t);
  int (*enqueue_event)(struct sctp_ulpq*, struct sctp_ulpevent*);
  void (*renege_events)(struct sctp_ulpq*, struct sctp_chunk*, gfp_t);
  void (*start_pd)(struct sctp_ulpq*, gfp_t);
  void (*abort_pd)(struct sctp_ulpq*, gfp_t);
  void (*generate_ftsn)(struct sctp_outq*, __u32);
  bool (*validate_ftsn)(struct sctp_chunk*);
  void (*report_ftsn)(struct sctp_ulpq*, __u32);
  void (*handle_ftsn)(struct sctp_ulpq*, struct sctp_chunk*);
};

struct sctp_bind_bucket {
  short unsigned int port;
  signed char fastreuse;
  signed char fastreuseport;
  kuid_t fastuid;
  struct hlist_node node;
  struct hlist_head owner;
  struct net* net;
};

struct sctp_bind_hashbucket {
  spinlock_t lock;
  struct hlist_head chain;
};

struct sctp_hashbucket {
  rwlock_t lock;
  struct hlist_head chain;
};

struct sctp_globals {
  struct list_head address_families;
  struct sctp_hashbucket* ep_hashtable;
  struct sctp_bind_hashbucket* port_hashtable;
  struct rhltable transport_hashtable;
  int ep_hashsize;
  int port_hashsize;
  __u16 max_instreams;
  __u16 max_outstreams;
  bool checksum_disable;
};

enum sctp_socket_type {
  SCTP_SOCKET_UDP = 0,
  SCTP_SOCKET_UDP_HIGH_BANDWIDTH = 1,
  SCTP_SOCKET_TCP = 2,
};

struct sctp_pf;

struct sctp_sock {
  struct inet_sock inet;
  enum sctp_socket_type type;
  struct sctp_pf* pf;
  struct crypto_shash* hmac;
  char* sctp_hmac_alg;
  struct sctp_endpoint* ep;
  struct sctp_bind_bucket* bind_hash;
  __u16 default_stream;
  __u32 default_ppid;
  __u16 default_flags;
  __u32 default_context;
  __u32 default_timetolive;
  __u32 default_rcv_context;
  int max_burst;
  __u32 hbinterval;
  __be16 udp_port;
  __be16 encap_port;
  __u16 pathmaxrxt;
  __u32 flowlabel;
  __u8 dscp;
  __u16 pf_retrans;
  __u16 ps_retrans;
  __u32 pathmtu;
  __u32 sackdelay;
  __u32 sackfreq;
  __u32 param_flags;
  __u32 default_ss;
  struct sctp_rtoinfo rtoinfo;
  struct sctp_paddrparams paddrparam;
  struct sctp_assocparams assocparams;
  __u16 subscribe;
  struct sctp_initmsg initmsg;
  int user_frag;
  __u32 autoclose;
  __u32 adaptation_ind;
  __u32 pd_point;
  __u16 nodelay : 1;
  __u16 pf_expose : 2;
  __u16 reuse : 1;
  __u16 disable_fragments : 1;
  __u16 v4mapped : 1;
  __u16 frag_interleave : 1;
  __u16 recvrcvinfo : 1;
  __u16 recvnxtinfo : 1;
  __u16 data_ready_signalled : 1;
  atomic_t pd_mode;
  struct sk_buff_head pd_lobby;
  struct list_head auto_asconf_list;
  int do_auto_asconf;
};

struct sctp_af;

struct sctp_pf {
  void (*event_msgname)(struct sctp_ulpevent*, char*, int*);
  void (*skb_msgname)(struct sk_buff*, char*, int*);
  int (*af_supported)(sa_family_t, struct sctp_sock*);
  int (*cmp_addr)(
      const union sctp_addr*,
      const union sctp_addr*,
      struct sctp_sock*);
  int (*bind_verify)(struct sctp_sock*, union sctp_addr*);
  int (*send_verify)(struct sctp_sock*, union sctp_addr*);
  int (*supported_addrs)(const struct sctp_sock*, __be16*);
  struct sock* (
      *create_accept_sk)(struct sock*, struct sctp_association*, bool);
  int (*addr_to_user)(struct sctp_sock*, union sctp_addr*);
  void (*to_sk_saddr)(union sctp_addr*, struct sock*);
  void (*to_sk_daddr)(union sctp_addr*, struct sock*);
  void (*copy_ip_options)(struct sock*, struct sock*);
  struct sctp_af* af;
};

struct sctp_signed_cookie {
  __u8 signature[32];
  __u32 __pad;
  struct sctp_cookie c;
} __attribute__((packed));

union sctp_addr_param {
  struct sctp_paramhdr p;
  struct sctp_ipv4addr_param v4;
  struct sctp_ipv6addr_param v6;
};

struct sctp_sender_hb_info {
  struct sctp_paramhdr param_hdr;
  union sctp_addr daddr;
  long unsigned int sent_at;
  __u64 hb_nonce;
};

struct sctp_af {
  int (*sctp_xmit)(struct sk_buff*, struct sctp_transport*);
  int (*setsockopt)(struct sock*, int, int, sockptr_t, unsigned int);
  int (*getsockopt)(struct sock*, int, int, char*, int*);
  void (*get_dst)(
      struct sctp_transport*,
      union sctp_addr*,
      struct flowi*,
      struct sock*);
  void (*get_saddr)(struct sctp_sock*, struct sctp_transport*, struct flowi*);
  void (*copy_addrlist)(struct list_head*, struct net_device*);
  int (*cmp_addr)(const union sctp_addr*, const union sctp_addr*);
  void (*addr_copy)(union sctp_addr*, union sctp_addr*);
  void (*from_skb)(union sctp_addr*, struct sk_buff*, int);
  void (*from_sk)(union sctp_addr*, struct sock*);
  void (
      *from_addr_param)(union sctp_addr*, union sctp_addr_param*, __be16, int);
  int (*to_addr_param)(const union sctp_addr*, union sctp_addr_param*);
  int (*addr_valid)(union sctp_addr*, struct sctp_sock*, const struct sk_buff*);
  enum sctp_scope (*scope)(union sctp_addr*);
  void (*inaddr_any)(union sctp_addr*, __be16);
  int (*is_any)(const union sctp_addr*);
  int (*available)(union sctp_addr*, struct sctp_sock*);
  int (*skb_iif)(const struct sk_buff*);
  int (*is_ce)(const struct sk_buff*);
  void (*seq_dump_addr)(struct seq_file*, union sctp_addr*);
  void (*ecn_capable)(struct sock*);
  __u16 net_header_len;
  int sockaddr_len;
  int (*ip_options_len)(struct sock*);
  sa_family_t sa_family;
  struct list_head list;
};

struct sctp_packet {
  __u16 source_port;
  __u16 destination_port;
  __u32 vtag;
  struct list_head chunk_list;
  size_t overhead;
  size_t size;
  size_t max_size;
  struct sctp_transport* transport;
  struct sctp_chunk* auth;
  u8 has_cookie_echo : 1;
  u8 has_sack : 1;
  u8 has_auth : 1;
  u8 has_data : 1;
  u8 ipfragok : 1;
};

struct sctp_transport {
  struct list_head transports;
  struct rhlist_head node;
  refcount_t refcnt;
  __u32 rto_pending : 1;
  __u32 hb_sent : 1;
  __u32 pmtu_pending : 1;
  __u32 dst_pending_confirm : 1;
  __u32 sack_generation : 1;
  u32 dst_cookie;
  struct flowi fl;
  union sctp_addr ipaddr;
  struct sctp_af* af_specific;
  struct sctp_association* asoc;
  long unsigned int rto;
  __u32 rtt;
  __u32 rttvar;
  __u32 srtt;
  __u32 cwnd;
  __u32 ssthresh;
  __u32 partial_bytes_acked;
  __u32 flight_size;
  __u32 burst_limited;
  struct dst_entry* dst;
  union sctp_addr saddr;
  long unsigned int hbinterval;
  long unsigned int sackdelay;
  __u32 sackfreq;
  atomic_t mtu_info;
  ktime_t last_time_heard;
  long unsigned int last_time_sent;
  long unsigned int last_time_ecne_reduced;
  __be16 encap_port;
  __u16 pathmaxrxt;
  __u32 flowlabel;
  __u8 dscp;
  __u16 pf_retrans;
  __u16 ps_retrans;
  __u32 pathmtu;
  __u32 param_flags;
  int init_sent_count;
  int state;
  short unsigned int error_count;
  struct timer_list T3_rtx_timer;
  struct timer_list hb_timer;
  struct timer_list proto_unreach_timer;
  struct timer_list reconf_timer;
  struct list_head transmitted;
  struct sctp_packet packet;
  struct list_head send_ready;
  struct {
    __u32 next_tsn_at_change;
    char changeover_active;
    char cycling_changeover;
    char cacc_saw_newack;
  } cacc;
  __u64 hb_nonce;
  struct callback_head rcu;
};

struct sctp_datamsg {
  struct list_head chunks;
  refcount_t refcnt;
  long unsigned int expires_at;
  int send_error;
  u8 send_failed : 1;
  u8 can_delay : 1;
  u8 abandoned : 1;
};

struct sctp_stream_priorities {
  struct list_head prio_sched;
  struct list_head active;
  struct sctp_stream_out_ext* next;
  __u16 prio;
};

struct sctp_stream_out_ext {
  __u64 abandoned_unsent[3];
  __u64 abandoned_sent[3];
  struct list_head outq;
  union {
    struct {
      struct list_head prio_list;
      struct sctp_stream_priorities* prio_head;
    };
    struct {
      struct list_head rr_list;
    };
  };
};

struct task_security_struct {
  u32 osid;
  u32 sid;
  u32 exec_sid;
  u32 create_sid;
  u32 keycreate_sid;
  u32 sockcreate_sid;
};

enum label_initialized {
  LABEL_INVALID = 0,
  LABEL_INITIALIZED = 1,
  LABEL_PENDING = 2,
};

struct inode_security_struct {
  struct inode* inode;
  struct list_head list;
  u32 task_sid;
  u32 sid;
  u16 sclass;
  unsigned char initialized;
  spinlock_t lock;
};

struct file_security_struct {
  u32 sid;
  u32 fown_sid;
  u32 isid;
  u32 pseqno;
};

struct superblock_security_struct {
  u32 sid;
  u32 def_sid;
  u32 mntpoint_sid;
  short unsigned int behavior;
  short unsigned int flags;
  struct mutex lock;
  struct list_head isec_head;
  spinlock_t isec_lock;
};

struct msg_security_struct {
  u32 sid;
};

struct ipc_security_struct {
  u16 sclass;
  u32 sid;
};

struct sk_security_struct {
  u32 sid;
  u32 peer_sid;
  u16 sclass;
  enum {
    SCTP_ASSOC_UNSET = 0,
    SCTP_ASSOC_SET = 1,
  } sctp_assoc_state;
};

struct tun_security_struct {
  u32 sid;
};

struct key_security_struct {
  u32 sid;
};

struct bpf_security_struct {
  u32 sid;
};

struct perf_event_security_struct {
  u32 sid;
};

struct selinux_mnt_opts {
  const char* fscontext;
  const char* context;
  const char* rootcontext;
  const char* defcontext;
};

enum {
  Opt_error = 4294967295,
  Opt_context = 0,
  Opt_defcontext = 1,
  Opt_fscontext = 2,
  Opt_rootcontext = 3,
  Opt_seclabel = 4,
};

struct selinux_policy_convert_data;

struct selinux_load_state {
  struct selinux_policy* policy;
  struct selinux_policy_convert_data* convert_data;
};

enum sel_inos {
  SEL_ROOT_INO = 2,
  SEL_LOAD = 3,
  SEL_ENFORCE = 4,
  SEL_CONTEXT = 5,
  SEL_ACCESS = 6,
  SEL_CREATE = 7,
  SEL_RELABEL = 8,
  SEL_USER = 9,
  SEL_POLICYVERS = 10,
  SEL_COMMIT_BOOLS = 11,
  SEL_MLS = 12,
  SEL_DISABLE = 13,
  SEL_MEMBER = 14,
  SEL_CHECKREQPROT = 15,
  SEL_COMPAT_NET = 16,
  SEL_REJECT_UNKNOWN = 17,
  SEL_DENY_UNKNOWN = 18,
  SEL_STATUS = 19,
  SEL_POLICY = 20,
  SEL_VALIDATE_TRANS = 21,
  SEL_INO_NEXT = 22,
};

struct selinux_fs_info {
  struct dentry* bool_dir;
  unsigned int bool_num;
  char** bool_pending_names;
  unsigned int* bool_pending_values;
  struct dentry* class_dir;
  long unsigned int last_class_ino;
  bool policy_opened;
  struct dentry* policycap_dir;
  long unsigned int last_ino;
  struct selinux_state* state;
  struct super_block* sb;
};

struct policy_load_memory {
  size_t len;
  void* data;
};

enum {
  SELNL_MSG_SETENFORCE = 16,
  SELNL_MSG_POLICYLOAD = 17,
  SELNL_MSG_MAX = 18,
};

enum selinux_nlgroups {
  SELNLGRP_NONE = 0,
  SELNLGRP_AVC = 1,
  __SELNLGRP_MAX = 2,
};

struct selnl_msg_setenforce {
  __s32 val;
};

struct selnl_msg_policyload {
  __u32 seqno;
};

enum {
  XFRM_MSG_BASE = 16,
  XFRM_MSG_NEWSA = 16,
  XFRM_MSG_DELSA = 17,
  XFRM_MSG_GETSA = 18,
  XFRM_MSG_NEWPOLICY = 19,
  XFRM_MSG_DELPOLICY = 20,
  XFRM_MSG_GETPOLICY = 21,
  XFRM_MSG_ALLOCSPI = 22,
  XFRM_MSG_ACQUIRE = 23,
  XFRM_MSG_EXPIRE = 24,
  XFRM_MSG_UPDPOLICY = 25,
  XFRM_MSG_UPDSA = 26,
  XFRM_MSG_POLEXPIRE = 27,
  XFRM_MSG_FLUSHSA = 28,
  XFRM_MSG_FLUSHPOLICY = 29,
  XFRM_MSG_NEWAE = 30,
  XFRM_MSG_GETAE = 31,
  XFRM_MSG_REPORT = 32,
  XFRM_MSG_MIGRATE = 33,
  XFRM_MSG_NEWSADINFO = 34,
  XFRM_MSG_GETSADINFO = 35,
  XFRM_MSG_NEWSPDINFO = 36,
  XFRM_MSG_GETSPDINFO = 37,
  XFRM_MSG_MAPPING = 38,
  __XFRM_MSG_MAX = 39,
};

enum {
  RTM_BASE = 16,
  RTM_NEWLINK = 16,
  RTM_DELLINK = 17,
  RTM_GETLINK = 18,
  RTM_SETLINK = 19,
  RTM_NEWADDR = 20,
  RTM_DELADDR = 21,
  RTM_GETADDR = 22,
  RTM_NEWROUTE = 24,
  RTM_DELROUTE = 25,
  RTM_GETROUTE = 26,
  RTM_NEWNEIGH = 28,
  RTM_DELNEIGH = 29,
  RTM_GETNEIGH = 30,
  RTM_NEWRULE = 32,
  RTM_DELRULE = 33,
  RTM_GETRULE = 34,
  RTM_NEWQDISC = 36,
  RTM_DELQDISC = 37,
  RTM_GETQDISC = 38,
  RTM_NEWTCLASS = 40,
  RTM_DELTCLASS = 41,
  RTM_GETTCLASS = 42,
  RTM_NEWTFILTER = 44,
  RTM_DELTFILTER = 45,
  RTM_GETTFILTER = 46,
  RTM_NEWACTION = 48,
  RTM_DELACTION = 49,
  RTM_GETACTION = 50,
  RTM_NEWPREFIX = 52,
  RTM_GETMULTICAST = 58,
  RTM_GETANYCAST = 62,
  RTM_NEWNEIGHTBL = 64,
  RTM_GETNEIGHTBL = 66,
  RTM_SETNEIGHTBL = 67,
  RTM_NEWNDUSEROPT = 68,
  RTM_NEWADDRLABEL = 72,
  RTM_DELADDRLABEL = 73,
  RTM_GETADDRLABEL = 74,
  RTM_GETDCB = 78,
  RTM_SETDCB = 79,
  RTM_NEWNETCONF = 80,
  RTM_DELNETCONF = 81,
  RTM_GETNETCONF = 82,
  RTM_NEWMDB = 84,
  RTM_DELMDB = 85,
  RTM_GETMDB = 86,
  RTM_NEWNSID = 88,
  RTM_DELNSID = 89,
  RTM_GETNSID = 90,
  RTM_NEWSTATS = 92,
  RTM_GETSTATS = 94,
  RTM_NEWCACHEREPORT = 96,
  RTM_NEWCHAIN = 100,
  RTM_DELCHAIN = 101,
  RTM_GETCHAIN = 102,
  RTM_NEWNEXTHOP = 104,
  RTM_DELNEXTHOP = 105,
  RTM_GETNEXTHOP = 106,
  RTM_NEWLINKPROP = 108,
  RTM_DELLINKPROP = 109,
  RTM_GETLINKPROP = 110,
  RTM_NEWVLAN = 112,
  RTM_DELVLAN = 113,
  RTM_GETVLAN = 114,
  __RTM_MAX = 115,
};

struct nlmsg_perm {
  u16 nlmsg_type;
  u32 perm;
};

struct netif_security_struct {
  struct net* ns;
  int ifindex;
  u32 sid;
};

struct sel_netif {
  struct list_head list;
  struct netif_security_struct nsec;
  struct callback_head callback_head;
};

struct netnode_security_struct {
  union {
    __be32 ipv4;
    struct in6_addr ipv6;
  } addr;
  u32 sid;
  u16 family;
};

struct sel_netnode_bkt {
  unsigned int size;
  struct list_head list;
};

struct sel_netnode {
  struct netnode_security_struct nsec;
  struct list_head list;
  struct callback_head rcu;
};

struct netport_security_struct {
  u32 sid;
  u16 port;
  u8 protocol;
};

struct sel_netport_bkt {
  int size;
  struct list_head list;
};

struct sel_netport {
  struct netport_security_struct psec;
  struct list_head list;
  struct callback_head rcu;
};

struct selinux_kernel_status {
  u32 version;
  u32 sequence;
  u32 enforcing;
  u32 policyload;
  u32 deny_unknown;
};

struct ebitmap_node {
  struct ebitmap_node* next;
  long unsigned int maps[6];
  u32 startbit;
};

struct ebitmap {
  struct ebitmap_node* node;
  u32 highbit;
};

struct policy_file {
  char* data;
  size_t len;
};

struct hashtab_node {
  void* key;
  void* datum;
  struct hashtab_node* next;
};

struct hashtab {
  struct hashtab_node** htable;
  u32 size;
  u32 nel;
};

struct hashtab_info {
  u32 slots_used;
  u32 max_chain_len;
};

struct hashtab_key_params {
  u32 (*hash)(const void*);
  int (*cmp)(const void*, const void*);
};

struct symtab {
  struct hashtab table;
  u32 nprim;
};

struct mls_level {
  u32 sens;
  struct ebitmap cat;
};

struct mls_range {
  struct mls_level level[2];
};

struct context___2 {
  u32 user;
  u32 role;
  u32 type;
  u32 len;
  struct mls_range range;
  char* str;
};

struct sidtab_str_cache;

struct sidtab_entry {
  u32 sid;
  u32 hash;
  struct context___2 context;
  struct sidtab_str_cache* cache;
  struct hlist_node list;
};

struct sidtab_str_cache {
  struct callback_head rcu_member;
  struct list_head lru_member;
  struct sidtab_entry* parent;
  u32 len;
  char str[0];
};

struct sidtab_node_inner;

struct sidtab_node_leaf;

union sidtab_entry_inner {
  struct sidtab_node_inner* ptr_inner;
  struct sidtab_node_leaf* ptr_leaf;
};

struct sidtab_node_inner {
  union sidtab_entry_inner entries[512];
};

struct sidtab_node_leaf {
  struct sidtab_entry entries[39];
};

struct sidtab_isid_entry {
  int set;
  struct sidtab_entry entry;
};

struct sidtab;

struct sidtab_convert_params {
  int (*func)(struct context___2*, struct context___2*, void*);
  void* args;
  struct sidtab* target;
};

struct sidtab {
  union sidtab_entry_inner roots[4];
  u32 count;
  struct sidtab_convert_params* convert;
  bool frozen;
  spinlock_t lock;
  u32 cache_free_slots;
  struct list_head cache_lru_list;
  spinlock_t cache_lock;
  struct sidtab_isid_entry isids[27];
  struct hlist_head context_to_sid[512];
};

struct avtab_key {
  u16 source_type;
  u16 target_type;
  u16 target_class;
  u16 specified;
};

struct avtab_extended_perms {
  u8 specified;
  u8 driver;
  struct extended_perms_data perms;
};

struct avtab_datum {
  union {
    u32 data;
    struct avtab_extended_perms* xperms;
  } u;
};

struct avtab_node {
  struct avtab_key key;
  struct avtab_datum datum;
  struct avtab_node* next;
};

struct avtab {
  struct avtab_node** htable;
  u32 nel;
  u32 nslot;
  u32 mask;
};

struct type_set;

struct constraint_expr {
  u32 expr_type;
  u32 attr;
  u32 op;
  struct ebitmap names;
  struct type_set* type_names;
  struct constraint_expr* next;
};

struct type_set {
  struct ebitmap types;
  struct ebitmap negset;
  u32 flags;
};

struct constraint_node {
  u32 permissions;
  struct constraint_expr* expr;
  struct constraint_node* next;
};

struct common_datum {
  u32 value;
  struct symtab permissions;
};

struct class_datum {
  u32 value;
  char* comkey;
  struct common_datum* comdatum;
  struct symtab permissions;
  struct constraint_node* constraints;
  struct constraint_node* validatetrans;
  char default_user;
  char default_role;
  char default_type;
  char default_range;
};

struct role_datum {
  u32 value;
  u32 bounds;
  struct ebitmap dominates;
  struct ebitmap types;
};

struct role_allow {
  u32 role;
  u32 new_role;
  struct role_allow* next;
};

struct type_datum {
  u32 value;
  u32 bounds;
  unsigned char primary;
  unsigned char attribute;
};

struct user_datum {
  u32 value;
  u32 bounds;
  struct ebitmap roles;
  struct mls_range range;
  struct mls_level dfltlevel;
};

struct cond_bool_datum {
  __u32 value;
  int state;
};

struct ocontext {
  union {
    char* name;
    struct {
      u8 protocol;
      u16 low_port;
      u16 high_port;
    } port;
    struct {
      u32 addr;
      u32 mask;
    } node;
    struct {
      u32 addr[4];
      u32 mask[4];
    } node6;
    struct {
      u64 subnet_prefix;
      u16 low_pkey;
      u16 high_pkey;
    } ibpkey;
    struct {
      char* dev_name;
      u8 port;
    } ibendport;
  } u;
  union {
    u32 sclass;
    u32 behavior;
  } v;
  struct context___2 context[2];
  u32 sid[2];
  struct ocontext* next;
};

struct genfs {
  char* fstype;
  struct ocontext* head;
  struct genfs* next;
};

struct cond_node;

struct policydb {
  int mls_enabled;
  struct symtab symtab[8];
  char** sym_val_to_name[8];
  struct class_datum** class_val_to_struct;
  struct role_datum** role_val_to_struct;
  struct user_datum** user_val_to_struct;
  struct type_datum** type_val_to_struct;
  struct avtab te_avtab;
  struct hashtab role_tr;
  struct ebitmap filename_trans_ttypes;
  struct hashtab filename_trans;
  u32 compat_filename_trans_count;
  struct cond_bool_datum** bool_val_to_struct;
  struct avtab te_cond_avtab;
  struct cond_node* cond_list;
  u32 cond_list_len;
  struct role_allow* role_allow;
  struct ocontext* ocontexts[9];
  struct genfs* genfs;
  struct hashtab range_tr;
  struct ebitmap* type_attr_map_array;
  struct ebitmap policycaps;
  struct ebitmap permissive_map;
  size_t len;
  unsigned int policyvers;
  unsigned int reject_unknown : 1;
  unsigned int allow_unknown : 1;
  u16 process_class;
  u32 process_trans_perms;
};

struct selinux_mapping;

struct selinux_map {
  struct selinux_mapping* mapping;
  u16 size;
};

struct selinux_policy {
  struct sidtab* sidtab;
  struct policydb policydb;
  struct selinux_map map;
  u32 latest_granting;
};

struct perm_datum {
  u32 value;
};

struct role_trans_key {
  u32 role;
  u32 type;
  u32 tclass;
};

struct role_trans_datum {
  u32 new_role;
};

struct filename_trans_key {
  u32 ttype;
  u16 tclass;
  const char* name;
};

struct filename_trans_datum {
  struct ebitmap stypes;
  u32 otype;
  struct filename_trans_datum* next;
};

struct level_datum {
  struct mls_level* level;
  unsigned char isalias;
};

struct cat_datum {
  u32 value;
  unsigned char isalias;
};

struct range_trans {
  u32 source_type;
  u32 target_type;
  u32 target_class;
};

struct cond_expr_node;

struct cond_expr {
  struct cond_expr_node* nodes;
  u32 len;
};

struct cond_av_list {
  struct avtab_node** nodes;
  u32 len;
};

struct cond_node {
  int cur_state;
  struct cond_expr expr;
  struct cond_av_list true_list;
  struct cond_av_list false_list;
};

struct policy_data {
  struct policydb* p;
  void* fp;
};

struct cond_expr_node {
  u32 expr_type;
  u32 bool;
};

struct selinux_mapping {
  u16 value;
  unsigned int num_perms;
  u32 perms[32];
};

struct policydb_compat_info {
  int version;
  int sym_num;
  int ocon_num;
};

struct convert_context_args {
  struct selinux_state* state;
  struct policydb* oldp;
  struct policydb* newp;
};

struct selinux_policy_convert_data {
  struct convert_context_args args;
  struct sidtab_convert_params sidtab_params;
};

struct selinux_audit_rule {
  u32 au_seqno;
  struct context___2 au_ctxt;
};

struct cond_insertf_data {
  struct policydb* p;
  struct avtab_node** dst;
  struct cond_av_list* other;
};

struct sockaddr_un {
  __kernel_sa_family_t sun_family;
  char sun_path[108];
};

struct unix_address {
  refcount_t refcnt;
  int len;
  unsigned int hash;
  struct sockaddr_un name[0];
};

struct scm_stat {
  atomic_t nr_fds;
};

struct unix_sock {
  struct sock sk;
  struct unix_address* addr;
  struct path path;
  struct mutex iolock;
  struct mutex bindlock;
  struct sock* peer;
  struct list_head link;
  atomic_long_t inflight;
  spinlock_t lock;
  long unsigned int gc_flags;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct socket_wq peer_wq;
  wait_queue_entry_t peer_wake;
  struct scm_stat scm_stat;
  struct sk_buff* oob_skb;
  long : 64;
};

enum devcg_behavior {
  DEVCG_DEFAULT_NONE = 0,
  DEVCG_DEFAULT_ALLOW = 1,
  DEVCG_DEFAULT_DENY = 2,
};

struct dev_exception_item {
  u32 major;
  u32 minor;
  short int type;
  short int access;
  struct list_head list;
  struct callback_head rcu;
};

struct dev_cgroup {
  struct cgroup_subsys_state css;
  struct list_head exceptions;
  enum devcg_behavior behavior;
};

enum integrity_status {
  INTEGRITY_PASS = 0,
  INTEGRITY_PASS_IMMUTABLE = 1,
  INTEGRITY_FAIL = 2,
  INTEGRITY_NOLABEL = 3,
  INTEGRITY_NOXATTRS = 4,
  INTEGRITY_UNKNOWN = 5,
};

struct ima_digest_data {
  u8 algo;
  u8 length;
  union {
    struct {
      u8 unused;
      u8 type;
    } sha1;
    struct {
      u8 type;
      u8 algo;
    } ng;
    u8 data[2];
  } xattr;
  u8 digest[0];
};

struct integrity_iint_cache {
  struct rb_node rb_node;
  struct mutex mutex;
  struct inode* inode;
  u64 version;
  long unsigned int flags;
  long unsigned int measured_pcrs;
  long unsigned int atomic_flags;
  enum integrity_status ima_file_status : 4;
  enum integrity_status ima_mmap_status : 4;
  enum integrity_status ima_bprm_status : 4;
  enum integrity_status ima_read_status : 4;
  enum integrity_status ima_creds_status : 4;
  enum integrity_status evm_status : 4;
  struct ima_digest_data* ima_hash;
};

enum {
  CRYPTO_MSG_ALG_REQUEST = 0,
  CRYPTO_MSG_ALG_REGISTER = 1,
  CRYPTO_MSG_ALG_LOADED = 2,
};

struct crypto_larval {
  struct crypto_alg alg;
  struct crypto_alg* adult;
  struct completion completion;
  u32 mask;
};

struct crypto_cipher {
  struct crypto_tfm base;
};

enum {
  CRYPTOA_UNSPEC = 0,
  CRYPTOA_ALG = 1,
  CRYPTOA_TYPE = 2,
  CRYPTOA_U32 = 3,
  __CRYPTOA_MAX = 4,
};

struct crypto_attr_alg {
  char name[128];
};

struct crypto_attr_type {
  u32 type;
  u32 mask;
};

struct crypto_attr_u32 {
  u32 num;
};

struct rtattr {
  short unsigned int rta_len;
  short unsigned int rta_type;
};

struct crypto_queue {
  struct list_head list;
  struct list_head* backlog;
  unsigned int qlen;
  unsigned int max_qlen;
};

enum {
  NAPI_STATE_SCHED = 0,
  NAPI_STATE_MISSED = 1,
  NAPI_STATE_DISABLE = 2,
  NAPI_STATE_NPSVC = 3,
  NAPI_STATE_LISTED = 4,
  NAPI_STATE_NO_BUSY_POLL = 5,
  NAPI_STATE_IN_BUSY_POLL = 6,
  NAPI_STATE_PREFER_BUSY_POLL = 7,
  NAPI_STATE_THREADED = 8,
  NAPI_STATE_SCHED_THREADED = 9,
};

enum bpf_xdp_mode {
  XDP_MODE_SKB = 0,
  XDP_MODE_DRV = 1,
  XDP_MODE_HW = 2,
  __MAX_XDP_MODE = 3,
};

enum {
  NETIF_MSG_DRV_BIT = 0,
  NETIF_MSG_PROBE_BIT = 1,
  NETIF_MSG_LINK_BIT = 2,
  NETIF_MSG_TIMER_BIT = 3,
  NETIF_MSG_IFDOWN_BIT = 4,
  NETIF_MSG_IFUP_BIT = 5,
  NETIF_MSG_RX_ERR_BIT = 6,
  NETIF_MSG_TX_ERR_BIT = 7,
  NETIF_MSG_TX_QUEUED_BIT = 8,
  NETIF_MSG_INTR_BIT = 9,
  NETIF_MSG_TX_DONE_BIT = 10,
  NETIF_MSG_RX_STATUS_BIT = 11,
  NETIF_MSG_PKTDATA_BIT = 12,
  NETIF_MSG_HW_BIT = 13,
  NETIF_MSG_WOL_BIT = 14,
  NETIF_MSG_CLASS_COUNT = 15,
};

struct aead_instance {
  void (*free)(struct aead_instance*);
  union {
    struct {
      char head[64];
      struct crypto_instance base;
    } s;
    struct aead_alg alg;
  };
};

struct crypto_aead_spawn {
  struct crypto_spawn base;
};

enum crypto_attr_type_t {
  CRYPTOCFGA_UNSPEC = 0,
  CRYPTOCFGA_PRIORITY_VAL = 1,
  CRYPTOCFGA_REPORT_LARVAL = 2,
  CRYPTOCFGA_REPORT_HASH = 3,
  CRYPTOCFGA_REPORT_BLKCIPHER = 4,
  CRYPTOCFGA_REPORT_AEAD = 5,
  CRYPTOCFGA_REPORT_COMPRESS = 6,
  CRYPTOCFGA_REPORT_RNG = 7,
  CRYPTOCFGA_REPORT_CIPHER = 8,
  CRYPTOCFGA_REPORT_AKCIPHER = 9,
  CRYPTOCFGA_REPORT_KPP = 10,
  CRYPTOCFGA_REPORT_ACOMP = 11,
  CRYPTOCFGA_STAT_LARVAL = 12,
  CRYPTOCFGA_STAT_HASH = 13,
  CRYPTOCFGA_STAT_BLKCIPHER = 14,
  CRYPTOCFGA_STAT_AEAD = 15,
  CRYPTOCFGA_STAT_COMPRESS = 16,
  CRYPTOCFGA_STAT_RNG = 17,
  CRYPTOCFGA_STAT_CIPHER = 18,
  CRYPTOCFGA_STAT_AKCIPHER = 19,
  CRYPTOCFGA_STAT_KPP = 20,
  CRYPTOCFGA_STAT_ACOMP = 21,
  __CRYPTOCFGA_MAX = 22,
};

struct crypto_report_aead {
  char type[64];
  char geniv[64];
  unsigned int blocksize;
  unsigned int maxauthsize;
  unsigned int ivsize;
};

struct crypto_sync_skcipher;

struct aead_geniv_ctx {
  spinlock_t lock;
  struct crypto_aead* child;
  struct crypto_sync_skcipher* sknull;
  u8 salt[0];
};

struct crypto_rng;

struct rng_alg {
  int (*generate)(
      struct crypto_rng*,
      const u8*,
      unsigned int,
      u8*,
      unsigned int);
  int (*seed)(struct crypto_rng*, const u8*, unsigned int);
  void (*set_ent)(struct crypto_rng*, const u8*, unsigned int);
  unsigned int seedsize;
  struct crypto_alg base;
};

struct crypto_rng {
  struct crypto_tfm base;
};

struct crypto_cipher_spawn {
  struct crypto_spawn base;
};

struct crypto_sync_skcipher {
  struct crypto_skcipher base;
};

struct skcipher_instance {
  void (*free)(struct skcipher_instance*);
  union {
    struct {
      char head[64];
      struct crypto_instance base;
    } s;
    struct skcipher_alg alg;
  };
};

struct crypto_skcipher_spawn {
  struct crypto_spawn base;
};

struct skcipher_ctx_simple {
  struct crypto_cipher* cipher;
};

struct crypto_report_blkcipher {
  char type[64];
  char geniv[64];
  unsigned int blocksize;
  unsigned int min_keysize;
  unsigned int max_keysize;
  unsigned int ivsize;
};

enum {
  SKCIPHER_WALK_PHYS = 1,
  SKCIPHER_WALK_SLOW = 2,
  SKCIPHER_WALK_COPY = 4,
  SKCIPHER_WALK_DIFF = 8,
  SKCIPHER_WALK_SLEEP = 16,
};

struct skcipher_walk_buffer {
  struct list_head entry;
  struct scatter_walk dst;
  unsigned int len;
  u8* data;
  u8 buffer[0];
};

struct ahash_alg {
  int (*init)(struct ahash_request*);
  int (*update)(struct ahash_request*);
  int (*final)(struct ahash_request*);
  int (*finup)(struct ahash_request*);
  int (*digest)(struct ahash_request*);
  int (*export)(struct ahash_request*, void*);
  int (*import)(struct ahash_request*, const void*);
  int (*setkey)(struct crypto_ahash*, const u8*, unsigned int);
  int (*init_tfm)(struct crypto_ahash*);
  void (*exit_tfm)(struct crypto_ahash*);
  struct hash_alg_common halg;
};

struct crypto_hash_walk {
  char* data;
  unsigned int offset;
  unsigned int alignmask;
  struct page* pg;
  unsigned int entrylen;
  unsigned int total;
  struct scatterlist* sg;
  unsigned int flags;
};

struct ahash_instance {
  void (*free)(struct ahash_instance*);
  union {
    struct {
      char head[88];
      struct crypto_instance base;
    } s;
    struct ahash_alg alg;
  };
};

struct crypto_ahash_spawn {
  struct crypto_spawn base;
};

struct crypto_report_hash {
  char type[64];
  unsigned int blocksize;
  unsigned int digestsize;
};

struct ahash_request_priv {
  crypto_completion_t complete;
  void* data;
  u8* result;
  u32 flags;
  void* ubuf[0];
};

struct shash_instance {
  void (*free)(struct shash_instance*);
  union {
    struct {
      char head[96];
      struct crypto_instance base;
    } s;
    struct shash_alg alg;
  };
};

struct crypto_shash_spawn {
  struct crypto_spawn base;
};

struct crypto_report_akcipher {
  char type[64];
};

struct akcipher_request {
  struct crypto_async_request base;
  struct scatterlist* src;
  struct scatterlist* dst;
  unsigned int src_len;
  unsigned int dst_len;
  void* __ctx[0];
};

struct crypto_akcipher {
  struct crypto_tfm base;
};

struct akcipher_alg {
  int (*sign)(struct akcipher_request*);
  int (*verify)(struct akcipher_request*);
  int (*encrypt)(struct akcipher_request*);
  int (*decrypt)(struct akcipher_request*);
  int (*set_pub_key)(struct crypto_akcipher*, const void*, unsigned int);
  int (*set_priv_key)(struct crypto_akcipher*, const void*, unsigned int);
  unsigned int (*max_size)(struct crypto_akcipher*);
  int (*init)(struct crypto_akcipher*);
  void (*exit)(struct crypto_akcipher*);
  unsigned int reqsize;
  struct crypto_alg base;
};

struct akcipher_instance {
  void (*free)(struct akcipher_instance*);
  union {
    struct {
      char head[80];
      struct crypto_instance base;
    } s;
    struct akcipher_alg alg;
  };
};

struct crypto_akcipher_spawn {
  struct crypto_spawn base;
};

struct crypto_report_kpp {
  char type[64];
};

struct kpp_request {
  struct crypto_async_request base;
  struct scatterlist* src;
  struct scatterlist* dst;
  unsigned int src_len;
  unsigned int dst_len;
  void* __ctx[0];
};

struct crypto_kpp {
  struct crypto_tfm base;
};

struct kpp_alg {
  int (*set_secret)(struct crypto_kpp*, const void*, unsigned int);
  int (*generate_public_key)(struct kpp_request*);
  int (*compute_shared_secret)(struct kpp_request*);
  unsigned int (*max_size)(struct crypto_kpp*);
  int (*init)(struct crypto_kpp*);
  void (*exit)(struct crypto_kpp*);
  unsigned int reqsize;
  struct crypto_alg base;
};

enum asn1_class {
  ASN1_UNIV = 0,
  ASN1_APPL = 1,
  ASN1_CONT = 2,
  ASN1_PRIV = 3,
};

enum asn1_method {
  ASN1_PRIM = 0,
  ASN1_CONS = 1,
};

enum asn1_tag {
  ASN1_EOC = 0,
  ASN1_BOOL = 1,
  ASN1_INT = 2,
  ASN1_BTS = 3,
  ASN1_OTS = 4,
  ASN1_NULL = 5,
  ASN1_OID = 6,
  ASN1_ODE = 7,
  ASN1_EXT = 8,
  ASN1_REAL = 9,
  ASN1_ENUM = 10,
  ASN1_EPDV = 11,
  ASN1_UTF8STR = 12,
  ASN1_RELOID = 13,
  ASN1_SEQ = 16,
  ASN1_SET = 17,
  ASN1_NUMSTR = 18,
  ASN1_PRNSTR = 19,
  ASN1_TEXSTR = 20,
  ASN1_VIDSTR = 21,
  ASN1_IA5STR = 22,
  ASN1_UNITIM = 23,
  ASN1_GENTIM = 24,
  ASN1_GRASTR = 25,
  ASN1_VISSTR = 26,
  ASN1_GENSTR = 27,
  ASN1_UNISTR = 28,
  ASN1_CHRSTR = 29,
  ASN1_BMPSTR = 30,
  ASN1_LONG_TAG = 31,
};

typedef int (*asn1_action_t)(void*, size_t, unsigned char, const void*, size_t);

struct asn1_decoder {
  const unsigned char* machine;
  size_t machlen;
  const asn1_action_t* actions;
};

enum asn1_opcode {
  ASN1_OP_MATCH = 0,
  ASN1_OP_MATCH_OR_SKIP = 1,
  ASN1_OP_MATCH_ACT = 2,
  ASN1_OP_MATCH_ACT_OR_SKIP = 3,
  ASN1_OP_MATCH_JUMP = 4,
  ASN1_OP_MATCH_JUMP_OR_SKIP = 5,
  ASN1_OP_MATCH_ANY = 8,
  ASN1_OP_MATCH_ANY_OR_SKIP = 9,
  ASN1_OP_MATCH_ANY_ACT = 10,
  ASN1_OP_MATCH_ANY_ACT_OR_SKIP = 11,
  ASN1_OP_COND_MATCH_OR_SKIP = 17,
  ASN1_OP_COND_MATCH_ACT_OR_SKIP = 19,
  ASN1_OP_COND_MATCH_JUMP_OR_SKIP = 21,
  ASN1_OP_COND_MATCH_ANY = 24,
  ASN1_OP_COND_MATCH_ANY_OR_SKIP = 25,
  ASN1_OP_COND_MATCH_ANY_ACT = 26,
  ASN1_OP_COND_MATCH_ANY_ACT_OR_SKIP = 27,
  ASN1_OP_COND_FAIL = 28,
  ASN1_OP_COMPLETE = 29,
  ASN1_OP_ACT = 30,
  ASN1_OP_MAYBE_ACT = 31,
  ASN1_OP_END_SEQ = 32,
  ASN1_OP_END_SET = 33,
  ASN1_OP_END_SEQ_OF = 34,
  ASN1_OP_END_SET_OF = 35,
  ASN1_OP_END_SEQ_ACT = 36,
  ASN1_OP_END_SET_ACT = 37,
  ASN1_OP_END_SEQ_OF_ACT = 38,
  ASN1_OP_END_SET_OF_ACT = 39,
  ASN1_OP_RETURN = 40,
  ASN1_OP__NR = 41,
};

enum rsapubkey_actions {
  ACT_rsa_get_e = 0,
  ACT_rsa_get_n = 1,
  NR__rsapubkey_actions = 2,
};

enum rsaprivkey_actions {
  ACT_rsa_get_d = 0,
  ACT_rsa_get_dp = 1,
  ACT_rsa_get_dq = 2,
  ACT_rsa_get_e___2 = 3,
  ACT_rsa_get_n___2 = 4,
  ACT_rsa_get_p = 5,
  ACT_rsa_get_q = 6,
  ACT_rsa_get_qinv = 7,
  NR__rsaprivkey_actions = 8,
};

typedef long unsigned int mpi_limb_t;

struct gcry_mpi {
  int alloced;
  int nlimbs;
  int nbits;
  int sign;
  unsigned int flags;
  mpi_limb_t* d;
};

typedef struct gcry_mpi* MPI;

struct rsa_key {
  const u8* n;
  const u8* e;
  const u8* d;
  const u8* p;
  const u8* q;
  const u8* dp;
  const u8* dq;
  const u8* qinv;
  size_t n_sz;
  size_t e_sz;
  size_t d_sz;
  size_t p_sz;
  size_t q_sz;
  size_t dp_sz;
  size_t dq_sz;
  size_t qinv_sz;
};

struct rsa_mpi_key {
  MPI n;
  MPI e;
  MPI d;
};

struct crypto_template___2;

struct asn1_decoder___2;

struct rsa_asn1_template {
  const char* name;
  const u8* data;
  size_t size;
};

struct pkcs1pad_ctx {
  struct crypto_akcipher* child;
  unsigned int key_size;
};

struct pkcs1pad_inst_ctx {
  struct crypto_akcipher_spawn spawn;
  const struct rsa_asn1_template* digest_info;
};

struct pkcs1pad_request {
  struct scatterlist in_sg[2];
  struct scatterlist out_sg[1];
  uint8_t* in_buf;
  uint8_t* out_buf;
  struct akcipher_request child_req;
};

struct crypto_report_acomp {
  char type[64];
};

struct acomp_alg {
  int (*compress)(struct acomp_req*);
  int (*decompress)(struct acomp_req*);
  void (*dst_free)(struct scatterlist*);
  int (*init)(struct crypto_acomp*);
  void (*exit)(struct crypto_acomp*);
  unsigned int reqsize;
  struct crypto_alg base;
};

struct crypto_report_comp {
  char type[64];
};

struct crypto_scomp {
  struct crypto_tfm base;
};

struct scomp_alg {
  void* (*alloc_ctx)(struct crypto_scomp*);
  void (*free_ctx)(struct crypto_scomp*, void*);
  int (*compress)(
      struct crypto_scomp*,
      const u8*,
      unsigned int,
      u8*,
      unsigned int*,
      void*);
  int (*decompress)(
      struct crypto_scomp*,
      const u8*,
      unsigned int,
      u8*,
      unsigned int*,
      void*);
  struct crypto_alg base;
};

struct scomp_scratch {
  spinlock_t lock;
  void* src;
  void* dst;
};

struct cryptomgr_param {
  struct rtattr* tb[34];
  struct {
    struct rtattr attr;
    struct crypto_attr_type data;
  } type;
  union {
    struct rtattr attr;
    struct {
      struct rtattr attr;
      struct crypto_attr_alg data;
    } alg;
    struct {
      struct rtattr attr;
      struct crypto_attr_u32 data;
    } nu32;
  } attrs[32];
  char template[128];
  struct crypto_larval* larval;
  u32 otype;
  u32 omask;
};

struct crypto_test_param {
  char driver[128];
  char alg[128];
  u32 type;
};

struct hmac_ctx {
  struct crypto_shash* hash;
};

struct md5_state {
  u32 hash[4];
  u32 block[16];
  u64 byte_count;
};

struct sha256_state {
  u32 state[8];
  u64 count;
  u8 buf[64];
};

enum blake2b_lengths {
  BLAKE2B_BLOCK_SIZE = 128,
  BLAKE2B_HASH_SIZE = 64,
  BLAKE2B_KEY_SIZE = 64,
  BLAKE2B_160_HASH_SIZE = 20,
  BLAKE2B_256_HASH_SIZE = 32,
  BLAKE2B_384_HASH_SIZE = 48,
  BLAKE2B_512_HASH_SIZE = 64,
};

struct blake2b_state {
  u64 h[8];
  u64 t[2];
  u64 f[2];
  u8 buf[128];
  unsigned int buflen;
  unsigned int outlen;
};

enum blake2b_iv {
  BLAKE2B_IV0 = 4089235720,
  BLAKE2B_IV1 = 2227873595,
  BLAKE2B_IV2 = 4271175723,
  BLAKE2B_IV3 = 1595750129,
  BLAKE2B_IV4 = 2917565137,
  BLAKE2B_IV5 = 725511199,
  BLAKE2B_IV6 = 4215389547,
  BLAKE2B_IV7 = 327033209,
};

typedef void (
    *blake2b_compress_t)(struct blake2b_state*, const u8*, size_t, u32);

struct blake2b_tfm_ctx {
  u8 key[64];
  unsigned int keylen;
};

typedef struct {
  u64 a;
  u64 b;
} u128;

typedef struct {
  __be64 a;
  __be64 b;
} be128;

typedef struct {
  __le64 b;
  __le64 a;
} le128;

struct gf128mul_4k {
  be128 t[256];
};

struct gf128mul_64k {
  struct gf128mul_4k* t[16];
};

struct lrw_tfm_ctx {
  struct crypto_skcipher* child;
  struct gf128mul_64k* table;
  be128 mulinc[128];
};

struct lrw_request_ctx {
  be128 t;
  struct skcipher_request subreq;
};

struct xts_tfm_ctx {
  struct crypto_skcipher* child;
  struct crypto_cipher* tweak;
};

struct xts_instance_ctx {
  struct crypto_skcipher_spawn spawn;
  char name[128];
};

struct xts_request_ctx {
  le128 t;
  struct scatterlist* tail;
  struct scatterlist sg[2];
  struct skcipher_request subreq;
};

struct cryptd_skcipher {
  struct crypto_skcipher base;
};

struct cryptd_ahash {
  struct crypto_ahash base;
};

struct cryptd_aead {
  struct crypto_aead base;
};

struct cryptd_cpu_queue {
  struct crypto_queue queue;
  struct work_struct work;
};

struct cryptd_queue {
  struct cryptd_cpu_queue* cpu_queue;
};

struct cryptd_instance_ctx {
  struct crypto_spawn spawn;
  struct cryptd_queue* queue;
};

struct skcipherd_instance_ctx {
  struct crypto_skcipher_spawn spawn;
  struct cryptd_queue* queue;
};

struct hashd_instance_ctx {
  struct crypto_shash_spawn spawn;
  struct cryptd_queue* queue;
};

struct aead_instance_ctx {
  struct crypto_aead_spawn aead_spawn;
  struct cryptd_queue* queue;
};

struct cryptd_skcipher_ctx {
  refcount_t refcnt;
  struct crypto_sync_skcipher* child;
};

struct cryptd_skcipher_request_ctx {
  crypto_completion_t complete;
};

struct cryptd_hash_ctx {
  refcount_t refcnt;
  struct crypto_shash* child;
};

struct cryptd_hash_request_ctx {
  crypto_completion_t complete;
  struct shash_desc desc;
};

struct cryptd_aead_ctx {
  refcount_t refcnt;
  struct crypto_aead* child;
};

struct cryptd_aead_request_ctx {
  crypto_completion_t complete;
};

struct deflate_ctx {
  struct z_stream_s comp_stream;
  struct z_stream_s decomp_stream;
};

struct chksum_ctx {
  u32 key;
};

struct chksum_desc_ctx {
  u32 crc;
};

struct chksum_desc_ctx___2 {
  __u16 crc;
};

struct lzo_ctx {
  void* lzo_comp_mem;
};

struct lzorle_ctx {
  void* lzorle_comp_mem;
};

struct xxh64_state {
  uint64_t total_len;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t mem64[4];
  uint32_t memsize;
};

struct xxhash64_tfm_ctx {
  u64 seed;
};

struct xxhash64_desc_ctx {
  struct xxh64_state xxhstate;
};

struct crypto_report_rng {
  char type[64];
  unsigned int seedsize;
};

struct random_ready_callback {
  struct list_head list;
  void (*func)(struct random_ready_callback*);
  struct module* owner;
};

struct drbg_string {
  const unsigned char* buf;
  size_t len;
  struct list_head list;
};

typedef uint32_t drbg_flag_t;

struct drbg_core {
  drbg_flag_t flags;
  __u8 statelen;
  __u8 blocklen_bytes;
  char cra_name[128];
  char backend_cra_name[128];
};

struct drbg_state;

struct drbg_state_ops {
  int (*update)(struct drbg_state*, struct list_head*, int);
  int (*generate)(
      struct drbg_state*,
      unsigned char*,
      unsigned int,
      struct list_head*);
  int (*crypto_init)(struct drbg_state*);
  int (*crypto_fini)(struct drbg_state*);
};

struct drbg_state {
  struct mutex drbg_mutex;
  unsigned char* V;
  unsigned char* Vbuf;
  unsigned char* C;
  unsigned char* Cbuf;
  size_t reseed_ctr;
  size_t reseed_threshold;
  unsigned char* scratchpad;
  unsigned char* scratchpadbuf;
  void* priv_data;
  struct crypto_skcipher* ctr_handle;
  struct skcipher_request* ctr_req;
  __u8* outscratchpadbuf;
  __u8* outscratchpad;
  struct crypto_wait ctr_wait;
  struct scatterlist sg_in;
  struct scatterlist sg_out;
  bool seeded;
  bool pr;
  bool fips_primed;
  unsigned char* prev;
  struct work_struct seed_work;
  struct crypto_rng* jent;
  const struct drbg_state_ops* d_ops;
  const struct drbg_core* core;
  struct drbg_string test_data;
  struct random_ready_callback random_ready;
};

enum drbg_prefixes {
  DRBG_PREFIX0 = 0,
  DRBG_PREFIX1 = 1,
  DRBG_PREFIX2 = 2,
  DRBG_PREFIX3 = 3,
};

struct sdesc {
  struct shash_desc shash;
  char ctx[0];
};

struct rand_data {
  __u64 data;
  __u64 old_data;
  __u64 prev_time;
  __u64 last_delta;
  __s64 last_delta2;
  unsigned int osr;
  unsigned char* mem;
  unsigned int memlocation;
  unsigned int memblocks;
  unsigned int memblocksize;
  unsigned int memaccessloops;
  int rct_count;
  unsigned int apt_observations;
  unsigned int apt_count;
  unsigned int apt_base;
  unsigned int apt_base_set : 1;
  unsigned int health_failure : 1;
};

struct rand_data___2;

struct jitterentropy {
  spinlock_t jent_lock;
  struct rand_data___2* entropy_collector;
  unsigned int reset_cnt;
};

struct sockaddr_alg_new {
  __u16 salg_family;
  __u8 salg_type[14];
  __u32 salg_feat;
  __u32 salg_mask;
  __u8 salg_name[0];
};

struct af_alg_iv {
  __u32 ivlen;
  __u8 iv[0];
};

struct cmsghdr {
  __kernel_size_t cmsg_len;
  int cmsg_level;
  int cmsg_type;
};

struct net_proto_family {
  int family;
  int (*create)(struct net*, struct socket*, int, int);
  struct module* owner;
};

enum {
  SOCK_WAKE_IO = 0,
  SOCK_WAKE_WAITD = 1,
  SOCK_WAKE_SPACE = 2,
  SOCK_WAKE_URG = 3,
};

struct af_alg_type;

struct alg_sock {
  struct sock sk;
  struct sock* parent;
  atomic_t refcnt;
  atomic_t nokey_refcnt;
  const struct af_alg_type* type;
  void* private;
};

struct af_alg_type {
  void* (*bind)(const char*, u32, u32);
  void (*release)(void*);
  int (*setkey)(void*, const u8*, unsigned int);
  int (*setentropy)(void*, sockptr_t, unsigned int);
  int (*accept)(void*, struct sock*);
  int (*accept_nokey)(void*, struct sock*);
  int (*setauthsize)(void*, unsigned int);
  struct proto_ops* ops;
  struct proto_ops* ops_nokey;
  struct module* owner;
  char name[14];
};

struct af_alg_control {
  struct af_alg_iv* iv;
  int op;
  unsigned int aead_assoclen;
};

struct af_alg_sgl {
  struct scatterlist sg[17];
  struct page* pages[16];
  unsigned int npages;
};

struct af_alg_tsgl {
  struct list_head list;
  unsigned int cur;
  struct scatterlist sg[0];
};

struct af_alg_rsgl {
  struct af_alg_sgl sgl;
  struct list_head list;
  size_t sg_num_bytes;
};

struct af_alg_async_req {
  struct kiocb* iocb;
  struct sock* sk;
  struct af_alg_rsgl first_rsgl;
  struct af_alg_rsgl* last_rsgl;
  struct list_head rsgl_list;
  struct scatterlist* tsgl;
  unsigned int tsgl_entries;
  unsigned int outlen;
  unsigned int areqlen;
  union {
    struct aead_request aead_req;
    struct skcipher_request skcipher_req;
  } cra_u;
};

struct af_alg_ctx {
  struct list_head tsgl_list;
  void* iv;
  size_t aead_assoclen;
  struct crypto_wait wait;
  size_t used;
  atomic_t rcvused;
  bool more;
  bool merge;
  bool enc;
  bool init;
  unsigned int len;
};

struct alg_type_list {
  const struct af_alg_type* type;
  struct list_head list;
};

struct hash_ctx {
  struct af_alg_sgl sgl;
  u8* result;
  struct crypto_wait wait;
  unsigned int len;
  bool more;
  struct ahash_request req;
};

struct xor_block_template {
  struct xor_block_template* next;
  const char* name;
  int speed;
  void (*do_2)(long unsigned int, long unsigned int*, long unsigned int*);
  void (*do_3)(
      long unsigned int,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*);
  void (*do_4)(
      long unsigned int,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*);
  void (*do_5)(
      long unsigned int,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*);
};

enum asymmetric_payload_bits {
  asym_crypto = 0,
  asym_subtype = 1,
  asym_key_ids = 2,
  asym_auth = 3,
};

struct asymmetric_key_id {
  short unsigned int len;
  unsigned char data[0];
};

struct asymmetric_key_ids {
  void* id[2];
};

struct public_key_signature;

struct asymmetric_key_subtype___2 {
  struct module* owner;
  const char* name;
  short unsigned int name_len;
  void (*describe)(const struct key*, struct seq_file*);
  void (*destroy)(void*, void*);
  int (*query)(const struct kernel_pkey_params*, struct kernel_pkey_query*);
  int (*eds_op)(struct kernel_pkey_params*, const void*, void*);
  int (
      *verify_signature)(const struct key*, const struct public_key_signature*);
};

struct public_key_signature {
  struct asymmetric_key_id* auth_ids[2];
  u8* s;
  u32 s_size;
  u8* digest;
  u8 digest_size;
  const char* pkey_algo;
  const char* hash_algo;
  const char* encoding;
  const void* data;
  unsigned int data_size;
};

struct asymmetric_key_parser {
  struct list_head link;
  struct module* owner;
  const char* name;
  int (*parse)(struct key_preparsed_payload*);
};

enum OID {
  OID_id_dsa_with_sha1 = 0,
  OID_id_dsa = 1,
  OID_id_ecdsa_with_sha1 = 2,
  OID_id_ecPublicKey = 3,
  OID_rsaEncryption = 4,
  OID_md2WithRSAEncryption = 5,
  OID_md3WithRSAEncryption = 6,
  OID_md4WithRSAEncryption = 7,
  OID_sha1WithRSAEncryption = 8,
  OID_sha256WithRSAEncryption = 9,
  OID_sha384WithRSAEncryption = 10,
  OID_sha512WithRSAEncryption = 11,
  OID_sha224WithRSAEncryption = 12,
  OID_data = 13,
  OID_signed_data = 14,
  OID_email_address = 15,
  OID_contentType = 16,
  OID_messageDigest = 17,
  OID_signingTime = 18,
  OID_smimeCapabilites = 19,
  OID_smimeAuthenticatedAttrs = 20,
  OID_md2 = 21,
  OID_md4 = 22,
  OID_md5 = 23,
  OID_msIndirectData = 24,
  OID_msStatementType = 25,
  OID_msSpOpusInfo = 26,
  OID_msPeImageDataObjId = 27,
  OID_msIndividualSPKeyPurpose = 28,
  OID_msOutlookExpress = 29,
  OID_certAuthInfoAccess = 30,
  OID_sha1 = 31,
  OID_sha256 = 32,
  OID_sha384 = 33,
  OID_sha512 = 34,
  OID_sha224 = 35,
  OID_commonName = 36,
  OID_surname = 37,
  OID_countryName = 38,
  OID_locality = 39,
  OID_stateOrProvinceName = 40,
  OID_organizationName = 41,
  OID_organizationUnitName = 42,
  OID_title = 43,
  OID_description = 44,
  OID_name = 45,
  OID_givenName = 46,
  OID_initials = 47,
  OID_generationalQualifier = 48,
  OID_subjectKeyIdentifier = 49,
  OID_keyUsage = 50,
  OID_subjectAltName = 51,
  OID_issuerAltName = 52,
  OID_basicConstraints = 53,
  OID_crlDistributionPoints = 54,
  OID_certPolicies = 55,
  OID_authorityKeyIdentifier = 56,
  OID_extKeyUsage = 57,
  OID_gostCPSignA = 58,
  OID_gostCPSignB = 59,
  OID_gostCPSignC = 60,
  OID_gost2012PKey256 = 61,
  OID_gost2012PKey512 = 62,
  OID_gost2012Digest256 = 63,
  OID_gost2012Digest512 = 64,
  OID_gost2012Signature256 = 65,
  OID_gost2012Signature512 = 66,
  OID_gostTC26Sign256A = 67,
  OID_gostTC26Sign256B = 68,
  OID_gostTC26Sign256C = 69,
  OID_gostTC26Sign256D = 70,
  OID_gostTC26Sign512A = 71,
  OID_gostTC26Sign512B = 72,
  OID_gostTC26Sign512C = 73,
  OID_sm2 = 74,
  OID_sm3 = 75,
  OID_SM2_with_SM3 = 76,
  OID_sm3WithRSAEncryption = 77,
  OID__NR = 78,
};

struct public_key {
  void* key;
  u32 keylen;
  enum OID algo;
  void* params;
  u32 paramlen;
  bool key_is_private;
  const char* id_type;
  const char* pkey_algo;
};

enum x509_actions {
  ACT_x509_extract_key_data = 0,
  ACT_x509_extract_name_segment = 1,
  ACT_x509_note_OID = 2,
  ACT_x509_note_issuer = 3,
  ACT_x509_note_not_after = 4,
  ACT_x509_note_not_before = 5,
  ACT_x509_note_params = 6,
  ACT_x509_note_pkey_algo = 7,
  ACT_x509_note_serial = 8,
  ACT_x509_note_signature = 9,
  ACT_x509_note_subject = 10,
  ACT_x509_note_tbs_certificate = 11,
  ACT_x509_process_extension = 12,
  NR__x509_actions = 13,
};

enum x509_akid_actions {
  ACT_x509_akid_note_kid = 0,
  ACT_x509_akid_note_name = 1,
  ACT_x509_akid_note_serial = 2,
  ACT_x509_extract_name_segment___2 = 3,
  ACT_x509_note_OID___2 = 4,
  NR__x509_akid_actions = 5,
};

struct x509_certificate {
  struct x509_certificate* next;
  struct x509_certificate* signer;
  struct public_key* pub;
  struct public_key_signature* sig;
  char* issuer;
  char* subject;
  struct asymmetric_key_id* id;
  struct asymmetric_key_id* skid;
  time64_t valid_from;
  time64_t valid_to;
  const void* tbs;
  unsigned int tbs_size;
  unsigned int raw_sig_size;
  const void* raw_sig;
  const void* raw_serial;
  unsigned int raw_serial_size;
  unsigned int raw_issuer_size;
  const void* raw_issuer;
  const void* raw_subject;
  unsigned int raw_subject_size;
  unsigned int raw_skid_size;
  const void* raw_skid;
  unsigned int index;
  bool seen;
  bool verified;
  bool self_signed;
  bool unsupported_key;
  bool unsupported_sig;
  bool blacklisted;
};

struct x509_parse_context {
  struct x509_certificate* cert;
  long unsigned int data;
  const void* cert_start;
  const void* key;
  size_t key_size;
  const void* params;
  size_t params_size;
  enum OID key_algo;
  enum OID last_oid;
  enum OID algo_oid;
  unsigned char nr_mpi;
  u8 o_size;
  u8 cn_size;
  u8 email_size;
  u16 o_offset;
  u16 cn_offset;
  u16 email_offset;
  unsigned int raw_akid_size;
  const void* raw_akid;
  const void* akid_raw_issuer;
  unsigned int akid_raw_issuer_size;
};

enum pkcs7_actions {
  ACT_pkcs7_check_content_type = 0,
  ACT_pkcs7_extract_cert = 1,
  ACT_pkcs7_note_OID = 2,
  ACT_pkcs7_note_certificate_list = 3,
  ACT_pkcs7_note_content = 4,
  ACT_pkcs7_note_data = 5,
  ACT_pkcs7_note_signed_info = 6,
  ACT_pkcs7_note_signeddata_version = 7,
  ACT_pkcs7_note_signerinfo_version = 8,
  ACT_pkcs7_sig_note_authenticated_attr = 9,
  ACT_pkcs7_sig_note_digest_algo = 10,
  ACT_pkcs7_sig_note_issuer = 11,
  ACT_pkcs7_sig_note_pkey_algo = 12,
  ACT_pkcs7_sig_note_serial = 13,
  ACT_pkcs7_sig_note_set_of_authattrs = 14,
  ACT_pkcs7_sig_note_signature = 15,
  ACT_pkcs7_sig_note_skid = 16,
  NR__pkcs7_actions = 17,
};

struct pkcs7_signed_info {
  struct pkcs7_signed_info* next;
  struct x509_certificate* signer;
  unsigned int index;
  bool unsupported_crypto;
  bool blacklisted;
  const void* msgdigest;
  unsigned int msgdigest_len;
  unsigned int authattrs_len;
  const void* authattrs;
  long unsigned int aa_set;
  time64_t signing_time;
  struct public_key_signature* sig;
};

struct pkcs7_message___2 {
  struct x509_certificate* certs;
  struct x509_certificate* crl;
  struct pkcs7_signed_info* signed_infos;
  u8 version;
  bool have_authattrs;
  enum OID data_type;
  size_t data_len;
  size_t data_hdrlen;
  const void* data;
};

struct pkcs7_parse_context {
  struct pkcs7_message___2* msg;
  struct pkcs7_signed_info* sinfo;
  struct pkcs7_signed_info** ppsinfo;
  struct x509_certificate* certs;
  struct x509_certificate** ppcerts;
  long unsigned int data;
  enum OID last_oid;
  unsigned int x509_index;
  unsigned int sinfo_index;
  const void* raw_serial;
  unsigned int raw_serial_size;
  unsigned int raw_issuer_size;
  const void* raw_issuer;
  const void* raw_skid;
  unsigned int raw_skid_size;
  bool expect_skid;
};

enum hash_algo {
  HASH_ALGO_MD4 = 0,
  HASH_ALGO_MD5 = 1,
  HASH_ALGO_SHA1 = 2,
  HASH_ALGO_RIPE_MD_160 = 3,
  HASH_ALGO_SHA256 = 4,
  HASH_ALGO_SHA384 = 5,
  HASH_ALGO_SHA512 = 6,
  HASH_ALGO_SHA224 = 7,
  HASH_ALGO_RIPE_MD_128 = 8,
  HASH_ALGO_RIPE_MD_256 = 9,
  HASH_ALGO_RIPE_MD_320 = 10,
  HASH_ALGO_WP_256 = 11,
  HASH_ALGO_WP_384 = 12,
  HASH_ALGO_WP_512 = 13,
  HASH_ALGO_TGR_128 = 14,
  HASH_ALGO_TGR_160 = 15,
  HASH_ALGO_TGR_192 = 16,
  HASH_ALGO_SM3_256 = 17,
  HASH_ALGO_STREEBOG_256 = 18,
  HASH_ALGO_STREEBOG_512 = 19,
  HASH_ALGO__LAST = 20,
};

struct simd_skcipher_alg___2 {
  const char* ialg_name;
  struct skcipher_alg alg;
};

struct simd_skcipher_ctx {
  struct cryptd_skcipher* cryptd_tfm;
};

struct simd_aead_alg___2 {
  const char* ialg_name;
  struct aead_alg alg;
};

struct simd_aead_ctx {
  struct cryptd_aead* cryptd_tfm;
};

struct bio_alloc_cache {
  struct bio_list free_list;
  unsigned int nr;
};

enum rq_qos_id {
  RQ_QOS_WBT = 0,
  RQ_QOS_LATENCY = 1,
  RQ_QOS_COST = 2,
};

struct rq_qos_ops;

struct rq_qos {
  struct rq_qos_ops* ops;
  struct request_queue* q;
  enum rq_qos_id id;
  struct rq_qos* next;
  struct dentry* debugfs_dir;
};

enum hctx_type {
  HCTX_TYPE_DEFAULT = 0,
  HCTX_TYPE_READ = 1,
  HCTX_TYPE_POLL = 2,
  HCTX_MAX_TYPES = 3,
};

struct rq_qos_ops {
  void (*throttle)(struct rq_qos*, struct bio*);
  void (*track)(struct rq_qos*, struct request*, struct bio*);
  void (*merge)(struct rq_qos*, struct request*, struct bio*);
  void (*issue)(struct rq_qos*, struct request*);
  void (*requeue)(struct rq_qos*, struct request*);
  void (*done)(struct rq_qos*, struct request*);
  void (*done_bio)(struct rq_qos*, struct bio*);
  void (*cleanup)(struct rq_qos*, struct bio*);
  void (*queue_depth_changed)(struct rq_qos*);
  void (*exit)(struct rq_qos*);
  const struct blk_mq_debugfs_attr* debugfs_attrs;
};

struct biovec_slab {
  int nr_vecs;
  char* name;
  struct kmem_cache* slab;
};

struct bio_slab {
  struct kmem_cache* slab;
  unsigned int slab_ref;
  unsigned int slab_size;
  char name[8];
};

enum {
  BLK_MQ_F_SHOULD_MERGE = 1,
  BLK_MQ_F_TAG_QUEUE_SHARED = 2,
  BLK_MQ_F_STACKING = 4,
  BLK_MQ_F_TAG_HCTX_SHARED = 8,
  BLK_MQ_F_BLOCKING = 32,
  BLK_MQ_F_NO_SCHED = 64,
  BLK_MQ_F_ALLOC_POLICY_START_BIT = 8,
  BLK_MQ_F_ALLOC_POLICY_BITS = 1,
  BLK_MQ_S_STOPPED = 0,
  BLK_MQ_S_TAG_ACTIVE = 1,
  BLK_MQ_S_SCHED_RESTART = 2,
  BLK_MQ_S_INACTIVE = 3,
  BLK_MQ_MAX_DEPTH = 10240,
  BLK_MQ_CPU_WORK_BATCH = 8,
};

enum {
  WBT_RWQ_BG = 0,
  WBT_RWQ_KSWAPD = 1,
  WBT_RWQ_DISCARD = 2,
  WBT_NUM_RWQ = 3,
};

enum rpm_status {
  RPM_ACTIVE = 0,
  RPM_RESUMING = 1,
  RPM_SUSPENDED = 2,
  RPM_SUSPENDING = 3,
};

enum {
  BLK_MQ_REQ_NOWAIT = 1,
  BLK_MQ_REQ_RESERVED = 2,
  BLK_MQ_REQ_PM = 4,
};

struct trace_event_raw_block_buffer {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  size_t size;
  char __data[0];
};

struct trace_event_raw_block_rq_requeue {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  char rwbs[8];
  u32 __data_loc_cmd;
  char __data[0];
};

struct trace_event_raw_block_rq_complete {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  int error;
  char rwbs[8];
  u32 __data_loc_cmd;
  char __data[0];
};

struct trace_event_raw_block_rq {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  unsigned int bytes;
  char rwbs[8];
  char comm[16];
  u32 __data_loc_cmd;
  char __data[0];
};

struct trace_event_raw_block_bio_complete {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  int error;
  char rwbs[8];
  char __data[0];
};

struct trace_event_raw_block_bio {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  char rwbs[8];
  char comm[16];
  char __data[0];
};

struct trace_event_raw_block_plug {
  struct trace_entry ent;
  char comm[16];
  char __data[0];
};

struct trace_event_raw_block_unplug {
  struct trace_entry ent;
  int nr_rq;
  char comm[16];
  char __data[0];
};

struct trace_event_raw_block_split {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  sector_t new_sector;
  char rwbs[8];
  char comm[16];
  char __data[0];
};

struct trace_event_raw_block_bio_remap {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  dev_t old_dev;
  sector_t old_sector;
  char rwbs[8];
  char __data[0];
};

struct trace_event_raw_block_rq_remap {
  struct trace_entry ent;
  dev_t dev;
  sector_t sector;
  unsigned int nr_sector;
  dev_t old_dev;
  sector_t old_sector;
  unsigned int nr_bios;
  char rwbs[8];
  char __data[0];
};

struct trace_event_data_offsets_block_buffer {};

struct trace_event_data_offsets_block_rq_requeue {
  u32 cmd;
};

struct trace_event_data_offsets_block_rq_complete {
  u32 cmd;
};

struct trace_event_data_offsets_block_rq {
  u32 cmd;
};

struct trace_event_data_offsets_block_bio_complete {};

struct trace_event_data_offsets_block_bio {};

struct trace_event_data_offsets_block_plug {};

struct trace_event_data_offsets_block_unplug {};

struct trace_event_data_offsets_block_split {};

struct trace_event_data_offsets_block_bio_remap {};

struct trace_event_data_offsets_block_rq_remap {};

typedef void (*btf_trace_block_touch_buffer)(void*, struct buffer_head*);

typedef void (*btf_trace_block_dirty_buffer)(void*, struct buffer_head*);

typedef void (*btf_trace_block_rq_requeue)(void*, struct request*);

typedef void (
    *btf_trace_block_rq_complete)(void*, struct request*, int, unsigned int);

typedef void (*btf_trace_block_rq_insert)(void*, struct request*);

typedef void (*btf_trace_block_rq_issue)(void*, struct request*);

typedef void (*btf_trace_block_rq_merge)(void*, struct request*);

typedef void (
    *btf_trace_block_bio_complete)(void*, struct request_queue*, struct bio*);

typedef void (*btf_trace_block_bio_bounce)(void*, struct bio*);

typedef void (*btf_trace_block_bio_backmerge)(void*, struct bio*);

typedef void (*btf_trace_block_bio_frontmerge)(void*, struct bio*);

typedef void (*btf_trace_block_bio_queue)(void*, struct bio*);

typedef void (*btf_trace_block_getrq)(void*, struct bio*);

typedef void (*btf_trace_block_plug)(void*, struct request_queue*);

typedef void (
    *btf_trace_block_unplug)(void*, struct request_queue*, unsigned int, bool);

typedef void (*btf_trace_block_split)(void*, struct bio*, unsigned int);

typedef void (*btf_trace_block_bio_remap)(void*, struct bio*, dev_t, sector_t);

typedef void (
    *btf_trace_block_rq_remap)(void*, struct request*, dev_t, sector_t);

enum {
  BLK_MQ_NO_TAG = 4294967295,
  BLK_MQ_TAG_MIN = 1,
  BLK_MQ_TAG_MAX = 4294967294,
};

struct queue_sysfs_entry {
  struct attribute attr;
  ssize_t (*show)(struct request_queue*, char*);
  ssize_t (*store)(struct request_queue*, const char*, size_t);
};

enum {
  REQ_FSEQ_PREFLUSH = 1,
  REQ_FSEQ_DATA = 2,
  REQ_FSEQ_POSTFLUSH = 4,
  REQ_FSEQ_DONE = 8,
  REQ_FSEQ_ACTIONS = 7,
  FLUSH_PENDING_TIMEOUT = 5000,
};

enum {
  ICQ_EXITED = 4,
  ICQ_DESTROYED = 8,
};

struct rq_map_data {
  struct page** pages;
  int page_order;
  int nr_entries;
  long unsigned int offset;
  int null_mapped;
  int from_user;
};

struct bio_map_data {
  bool is_our_pages : 1;
  bool is_null_mapped : 1;
  struct iov_iter iter;
  struct iovec iov[0];
};

struct req_iterator {
  struct bvec_iter iter;
  struct bio* bio;
};

enum bio_merge_status {
  BIO_MERGE_OK = 0,
  BIO_MERGE_NONE = 1,
  BIO_MERGE_FAILED = 2,
};

typedef bool (*sb_for_each_fn)(struct sbitmap*, unsigned int, void*);

enum {
  BLK_MQ_UNIQUE_TAG_BITS = 16,
  BLK_MQ_UNIQUE_TAG_MASK = 65535,
};

struct mq_inflight {
  struct block_device* part;
  unsigned int inflight[2];
};

struct flush_busy_ctx_data {
  struct blk_mq_hw_ctx* hctx;
  struct list_head* list;
};

struct dispatch_rq_data {
  struct blk_mq_hw_ctx* hctx;
  struct request* rq;
};

enum prep_dispatch {
  PREP_DISPATCH_OK = 0,
  PREP_DISPATCH_NO_TAG = 1,
  PREP_DISPATCH_NO_BUDGET = 2,
};

struct rq_iter_data {
  struct blk_mq_hw_ctx* hctx;
  bool has_rq;
};

struct blk_mq_qe_pair {
  struct list_head node;
  struct request_queue* q;
  struct elevator_type* type;
};

struct sbq_wait {
  struct sbitmap_queue* sbq;
  struct wait_queue_entry wait;
};

typedef bool busy_iter_fn(struct blk_mq_hw_ctx*, struct request*, void*, bool);

typedef bool busy_tag_iter_fn(struct request*, void*, bool);

struct bt_iter_data {
  struct blk_mq_hw_ctx* hctx;
  busy_iter_fn* fn;
  void* data;
  bool reserved;
};

struct bt_tags_iter_data {
  struct blk_mq_tags* tags;
  busy_tag_iter_fn* fn;
  void* data;
  unsigned int flags;
};

struct blk_queue_stats {
  struct list_head callbacks;
  spinlock_t lock;
  bool enable_accounting;
};

struct blk_mq_ctx_sysfs_entry {
  struct attribute attr;
  ssize_t (*show)(struct blk_mq_ctx*, char*);
  ssize_t (*store)(struct blk_mq_ctx*, const char*, size_t);
};

struct blk_mq_hw_ctx_sysfs_entry {
  struct attribute attr;
  ssize_t (*show)(struct blk_mq_hw_ctx*, char*);
  ssize_t (*store)(struct blk_mq_hw_ctx*, const char*, size_t);
};

typedef u32 compat_caddr_t;

struct hd_geometry {
  unsigned char heads;
  unsigned char sectors;
  short unsigned int cylinders;
  long unsigned int start;
};

struct blkpg_ioctl_arg {
  int op;
  int flags;
  int datalen;
  void* data;
};

struct blkpg_partition {
  long long int start;
  long long int length;
  int pno;
  char devname[64];
  char volname[64];
};

struct pr_reservation {
  __u64 key;
  __u32 type;
  __u32 flags;
};

struct pr_registration {
  __u64 old_key;
  __u64 new_key;
  __u32 flags;
  __u32 __pad;
};

struct pr_preempt {
  __u64 old_key;
  __u64 new_key;
  __u32 type;
  __u32 flags;
};

struct pr_clear {
  __u64 key;
  __u32 flags;
  __u32 __pad;
};

struct compat_blkpg_ioctl_arg {
  compat_int_t op;
  compat_int_t flags;
  compat_int_t datalen;
  compat_caddr_t data;
};

struct compat_hd_geometry {
  unsigned char heads;
  unsigned char sectors;
  short unsigned int cylinders;
  u32 start;
};

struct klist_node;

struct klist {
  spinlock_t k_lock;
  struct list_head k_list;
  void (*get)(struct klist_node*);
  void (*put)(struct klist_node*);
};

struct klist_node {
  void* n_klist;
  struct list_head n_node;
  struct kref n_ref;
};

struct klist_iter {
  struct klist* i_klist;
  struct klist_node* i_cur;
};

struct class_dev_iter {
  struct klist_iter ki;
  const struct device_type* type;
};

enum {
  DISK_EVENT_FLAG_POLL = 1,
  DISK_EVENT_FLAG_UEVENT = 2,
};

struct disk_events {
  struct list_head node;
  struct gendisk* disk;
  spinlock_t lock;
  struct mutex block_mutex;
  int block;
  unsigned int pending;
  unsigned int clearing;
  long int poll_msecs;
  struct delayed_work dwork;
};

struct badblocks {
  struct device* dev;
  int count;
  int unacked_exist;
  int shift;
  u64* page;
  int changed;
  seqlock_t lock;
  sector_t sector;
  sector_t size;
};

struct disk_part_iter {
  struct gendisk* disk;
  struct block_device* part;
  long unsigned int idx;
  unsigned int flags;
};

struct blk_major_name {
  struct blk_major_name* next;
  int major;
  char name[16];
  void (*probe)(dev_t);
};

enum {
  IOPRIO_WHO_PROCESS = 1,
  IOPRIO_WHO_PGRP = 2,
  IOPRIO_WHO_USER = 3,
};

struct parsed_partitions {
  struct block_device* bdev;
  char name[32];
  struct {
    sector_t from;
    sector_t size;
    int flags;
    bool has_info;
    struct partition_meta_info info;
  }* parts;
  int next;
  int limit;
  bool access_beyond_eod;
  char* pp_buf;
};

typedef struct {
  struct page* v;
} Sector;

struct msdos_partition {
  u8 boot_ind;
  u8 head;
  u8 sector;
  u8 cyl;
  u8 sys_ind;
  u8 end_head;
  u8 end_sector;
  u8 end_cyl;
  __le32 start_sect;
  __le32 nr_sects;
};

enum msdos_sys_ind {
  DOS_EXTENDED_PARTITION = 5,
  LINUX_EXTENDED_PARTITION = 133,
  WIN98_EXTENDED_PARTITION = 15,
  LINUX_DATA_PARTITION = 131,
  LINUX_LVM_PARTITION = 142,
  LINUX_RAID_PARTITION = 253,
  SOLARIS_X86_PARTITION = 130,
  NEW_SOLARIS_X86_PARTITION = 191,
  DM6_AUX1PARTITION = 81,
  DM6_AUX3PARTITION = 83,
  DM6_PARTITION = 84,
  EZD_PARTITION = 85,
  FREEBSD_PARTITION = 165,
  OPENBSD_PARTITION = 166,
  NETBSD_PARTITION = 169,
  BSDI_PARTITION = 183,
  MINIX_PARTITION = 129,
  UNIXWARE_PARTITION = 99,
};

struct _gpt_header {
  __le64 signature;
  __le32 revision;
  __le32 header_size;
  __le32 header_crc32;
  __le32 reserved1;
  __le64 my_lba;
  __le64 alternate_lba;
  __le64 first_usable_lba;
  __le64 last_usable_lba;
  efi_guid_t disk_guid;
  __le64 partition_entry_lba;
  __le32 num_partition_entries;
  __le32 sizeof_partition_entry;
  __le32 partition_entry_array_crc32;
} __attribute__((packed));

typedef struct _gpt_header gpt_header;

struct _gpt_entry_attributes {
  u64 required_to_function : 1;
  u64 reserved : 47;
  u64 type_guid_specific : 16;
};

typedef struct _gpt_entry_attributes gpt_entry_attributes;

struct _gpt_entry {
  efi_guid_t partition_type_guid;
  efi_guid_t unique_partition_guid;
  __le64 starting_lba;
  __le64 ending_lba;
  gpt_entry_attributes attributes;
  __le16 partition_name[36];
};

typedef struct _gpt_entry gpt_entry;

struct _gpt_mbr_record {
  u8 boot_indicator;
  u8 start_head;
  u8 start_sector;
  u8 start_track;
  u8 os_type;
  u8 end_head;
  u8 end_sector;
  u8 end_track;
  __le32 starting_lba;
  __le32 size_in_lba;
};

typedef struct _gpt_mbr_record gpt_mbr_record;

struct _legacy_mbr {
  u8 boot_code[440];
  __le32 unique_mbr_signature;
  __le16 unknown;
  gpt_mbr_record partition_record[4];
  __le16 signature;
} __attribute__((packed));

typedef struct _legacy_mbr legacy_mbr;

struct rq_wait {
  wait_queue_head_t wait;
  atomic_t inflight;
};

struct rq_depth {
  unsigned int max_depth;
  int scale_step;
  bool scaled_max;
  unsigned int queue_depth;
  unsigned int default_depth;
};

typedef bool acquire_inflight_cb_t(struct rq_wait*, void*);

typedef void cleanup_cb_t(struct rq_wait*, void*);

struct rq_qos_wait_data {
  struct wait_queue_entry wq;
  struct task_struct* task;
  struct rq_wait* rqw;
  acquire_inflight_cb_t* cb;
  void* private_data;
  bool got_token;
};

struct cdrom_device_ops;

struct cdrom_device_info {
  const struct cdrom_device_ops* ops;
  struct list_head list;
  struct gendisk* disk;
  void* handle;
  int mask;
  int speed;
  int capacity;
  unsigned int options : 30;
  unsigned int mc_flags : 2;
  unsigned int vfs_events;
  unsigned int ioctl_events;
  int use_count;
  char name[20];
  __u8 sanyo_slot : 2;
  __u8 keeplocked : 1;
  __u8 reserved : 5;
  int cdda_method;
  __u8 last_sense;
  __u8 media_written;
  short unsigned int mmc3_profile;
  int for_data;
  int (*exit)(struct cdrom_device_info*);
  int mrw_mode_page;
};

struct scsi_sense_hdr {
  u8 response_code;
  u8 sense_key;
  u8 asc;
  u8 ascq;
  u8 byte4;
  u8 byte5;
  u8 byte6;
  u8 additional_length;
};

struct cdrom_msf0 {
  __u8 minute;
  __u8 second;
  __u8 frame;
};

union cdrom_addr {
  struct cdrom_msf0 msf;
  int lba;
};

struct cdrom_multisession {
  union cdrom_addr addr;
  __u8 xa_flag;
  __u8 addr_format;
};

struct cdrom_mcn {
  __u8 medium_catalog_number[14];
};

struct request_sense;

struct cdrom_generic_command {
  unsigned char cmd[12];
  unsigned char* buffer;
  unsigned int buflen;
  int stat;
  struct request_sense* sense;
  unsigned char data_direction;
  int quiet;
  int timeout;
  union {
    void* reserved[1];
    void* unused;
  };
};

struct request_sense {
  __u8 error_code : 7;
  __u8 valid : 1;
  __u8 segment_number;
  __u8 sense_key : 4;
  __u8 reserved2 : 1;
  __u8 ili : 1;
  __u8 reserved1 : 2;
  __u8 information[4];
  __u8 add_sense_len;
  __u8 command_info[4];
  __u8 asc;
  __u8 ascq;
  __u8 fruc;
  __u8 sks[3];
  __u8 asb[46];
};

struct packet_command {
  unsigned char cmd[12];
  unsigned char* buffer;
  unsigned int buflen;
  int stat;
  struct scsi_sense_hdr* sshdr;
  unsigned char data_direction;
  int quiet;
  int timeout;
  void* reserved[1];
};

struct cdrom_device_ops {
  int (*open)(struct cdrom_device_info*, int);
  void (*release)(struct cdrom_device_info*);
  int (*drive_status)(struct cdrom_device_info*, int);
  unsigned int (*check_events)(struct cdrom_device_info*, unsigned int, int);
  int (*tray_move)(struct cdrom_device_info*, int);
  int (*lock_door)(struct cdrom_device_info*, int);
  int (*select_speed)(struct cdrom_device_info*, int);
  int (*select_disc)(struct cdrom_device_info*, int);
  int (
      *get_last_session)(struct cdrom_device_info*, struct cdrom_multisession*);
  int (*get_mcn)(struct cdrom_device_info*, struct cdrom_mcn*);
  int (*reset)(struct cdrom_device_info*);
  int (*audio_ioctl)(struct cdrom_device_info*, unsigned int, void*);
  const int capability;
  int (*generic_packet)(struct cdrom_device_info*, struct packet_command*);
};

struct scsi_ioctl_command {
  unsigned int inlen;
  unsigned int outlen;
  unsigned char data[0];
};

enum scsi_device_event {
  SDEV_EVT_MEDIA_CHANGE = 1,
  SDEV_EVT_INQUIRY_CHANGE_REPORTED = 2,
  SDEV_EVT_CAPACITY_CHANGE_REPORTED = 3,
  SDEV_EVT_SOFT_THRESHOLD_REACHED_REPORTED = 4,
  SDEV_EVT_MODE_PARAMETER_CHANGE_REPORTED = 5,
  SDEV_EVT_LUN_CHANGE_REPORTED = 6,
  SDEV_EVT_ALUA_STATE_CHANGE_REPORTED = 7,
  SDEV_EVT_POWER_ON_RESET_OCCURRED = 8,
  SDEV_EVT_FIRST = 1,
  SDEV_EVT_LAST = 8,
  SDEV_EVT_MAXBITS = 9,
};

struct scsi_request {
  unsigned char __cmd[16];
  unsigned char* cmd;
  short unsigned int cmd_len;
  int result;
  unsigned int sense_len;
  unsigned int resid_len;
  int retries;
  void* sense;
};

struct sg_io_hdr {
  int interface_id;
  int dxfer_direction;
  unsigned char cmd_len;
  unsigned char mx_sb_len;
  short unsigned int iovec_count;
  unsigned int dxfer_len;
  void* dxferp;
  unsigned char* cmdp;
  void* sbp;
  unsigned int timeout;
  unsigned int flags;
  int pack_id;
  void* usr_ptr;
  unsigned char status;
  unsigned char masked_status;
  unsigned char msg_status;
  unsigned char sb_len_wr;
  short unsigned int host_status;
  short unsigned int driver_status;
  int resid;
  unsigned int duration;
  unsigned int info;
};

struct compat_sg_io_hdr {
  compat_int_t interface_id;
  compat_int_t dxfer_direction;
  unsigned char cmd_len;
  unsigned char mx_sb_len;
  short unsigned int iovec_count;
  compat_uint_t dxfer_len;
  compat_uint_t dxferp;
  compat_uptr_t cmdp;
  compat_uptr_t sbp;
  compat_uint_t timeout;
  compat_uint_t flags;
  compat_int_t pack_id;
  compat_uptr_t usr_ptr;
  unsigned char status;
  unsigned char masked_status;
  unsigned char msg_status;
  unsigned char sb_len_wr;
  short unsigned int host_status;
  short unsigned int driver_status;
  compat_int_t resid;
  compat_uint_t duration;
  compat_uint_t info;
};

struct blk_cmd_filter {
  long unsigned int read_ok[4];
  long unsigned int write_ok[4];
};

struct compat_cdrom_generic_command {
  unsigned char cmd[12];
  compat_caddr_t buffer;
  compat_uint_t buflen;
  compat_int_t stat;
  compat_caddr_t sense;
  unsigned char data_direction;
  unsigned char pad[3];
  compat_int_t quiet;
  compat_int_t timeout;
  compat_caddr_t unused;
};

enum {
  OMAX_SB_LEN = 16,
};

struct bsg_device {
  struct request_queue* queue;
  spinlock_t lock;
  struct hlist_node dev_list;
  refcount_t ref_count;
  char name[20];
  int max_queue;
};

struct bsg_job;

typedef int bsg_job_fn(struct bsg_job*);

struct bsg_buffer {
  unsigned int payload_len;
  int sg_cnt;
  struct scatterlist* sg_list;
};

struct bsg_job {
  struct device* dev;
  struct kref kref;
  unsigned int timeout;
  void* request;
  void* reply;
  unsigned int request_len;
  unsigned int reply_len;
  struct bsg_buffer request_payload;
  struct bsg_buffer reply_payload;
  int result;
  unsigned int reply_payload_rcv_len;
  struct request* bidi_rq;
  struct bio* bidi_bio;
  void* dd_data;
};

typedef enum blk_eh_timer_return bsg_timeout_fn(struct request*);

struct bsg_set {
  struct blk_mq_tag_set tag_set;
  bsg_job_fn* job_fn;
  bsg_timeout_fn* timeout_fn;
};

typedef struct blkcg_policy_data* blkcg_pol_alloc_cpd_fn(gfp_t);

typedef void blkcg_pol_init_cpd_fn(struct blkcg_policy_data*);

typedef void blkcg_pol_free_cpd_fn(struct blkcg_policy_data*);

typedef void blkcg_pol_bind_cpd_fn(struct blkcg_policy_data*);

typedef struct blkg_policy_data*
blkcg_pol_alloc_pd_fn(gfp_t, struct request_queue*, struct blkcg*);

typedef void blkcg_pol_init_pd_fn(struct blkg_policy_data*);

typedef void blkcg_pol_online_pd_fn(struct blkg_policy_data*);

typedef void blkcg_pol_offline_pd_fn(struct blkg_policy_data*);

typedef void blkcg_pol_free_pd_fn(struct blkg_policy_data*);

typedef void blkcg_pol_reset_pd_stats_fn(struct blkg_policy_data*);

typedef size_t blkcg_pol_stat_pd_fn(struct blkg_policy_data*, char*, size_t);

struct blkcg_policy {
  int plid;
  struct cftype* dfl_cftypes;
  struct cftype* legacy_cftypes;
  blkcg_pol_alloc_cpd_fn* cpd_alloc_fn;
  blkcg_pol_init_cpd_fn* cpd_init_fn;
  blkcg_pol_free_cpd_fn* cpd_free_fn;
  blkcg_pol_bind_cpd_fn* cpd_bind_fn;
  blkcg_pol_alloc_pd_fn* pd_alloc_fn;
  blkcg_pol_init_pd_fn* pd_init_fn;
  blkcg_pol_online_pd_fn* pd_online_fn;
  blkcg_pol_offline_pd_fn* pd_offline_fn;
  blkcg_pol_free_pd_fn* pd_free_fn;
  blkcg_pol_reset_pd_stats_fn* pd_reset_stats_fn;
  blkcg_pol_stat_pd_fn* pd_stat_fn;
};

struct blkg_conf_ctx {
  struct block_device* bdev;
  struct blkcg_gq* blkg;
  char* body;
};

enum blkg_rwstat_type {
  BLKG_RWSTAT_READ = 0,
  BLKG_RWSTAT_WRITE = 1,
  BLKG_RWSTAT_SYNC = 2,
  BLKG_RWSTAT_ASYNC = 3,
  BLKG_RWSTAT_DISCARD = 4,
  BLKG_RWSTAT_NR = 5,
  BLKG_RWSTAT_TOTAL = 5,
};

struct blkg_rwstat {
  struct percpu_counter cpu_cnt[5];
  atomic64_t aux_cnt[5];
};

struct blkg_rwstat_sample {
  u64 cnt[5];
};

struct throtl_service_queue {
  struct throtl_service_queue* parent_sq;
  struct list_head queued[2];
  unsigned int nr_queued[2];
  struct rb_root_cached pending_tree;
  unsigned int nr_pending;
  long unsigned int first_pending_disptime;
  struct timer_list pending_timer;
};

struct latency_bucket {
  long unsigned int total_latency;
  int samples;
};

struct avg_latency_bucket {
  long unsigned int latency;
  bool valid;
};

struct throtl_data {
  struct throtl_service_queue service_queue;
  struct request_queue* queue;
  unsigned int nr_queued[2];
  unsigned int throtl_slice;
  struct work_struct dispatch_work;
  unsigned int limit_index;
  bool limit_valid[2];
  long unsigned int low_upgrade_time;
  long unsigned int low_downgrade_time;
  unsigned int scale;
  struct latency_bucket tmp_buckets[18];
  struct avg_latency_bucket avg_buckets[18];
  struct latency_bucket* latency_buckets[2];
  long unsigned int last_calculate_time;
  long unsigned int filtered_latency;
  bool track_bio_latency;
};

struct throtl_grp;

struct throtl_qnode {
  struct list_head node;
  struct bio_list bios;
  struct throtl_grp* tg;
};

struct throtl_grp {
  struct blkg_policy_data pd;
  struct rb_node rb_node;
  struct throtl_data* td;
  struct throtl_service_queue service_queue;
  struct throtl_qnode qnode_on_self[2];
  struct throtl_qnode qnode_on_parent[2];
  long unsigned int disptime;
  unsigned int flags;
  bool has_rules[2];
  uint64_t bps[4];
  uint64_t bps_conf[4];
  unsigned int iops[4];
  unsigned int iops_conf[4];
  uint64_t bytes_disp[2];
  unsigned int io_disp[2];
  long unsigned int last_low_overflow_time[2];
  uint64_t last_bytes_disp[2];
  unsigned int last_io_disp[2];
  long unsigned int last_check_time;
  long unsigned int latency_target;
  long unsigned int latency_target_conf;
  long unsigned int slice_start[2];
  long unsigned int slice_end[2];
  long unsigned int last_finish_time;
  long unsigned int checked_last_finish_time;
  long unsigned int avg_idletime;
  long unsigned int idletime_threshold;
  long unsigned int idletime_threshold_conf;
  unsigned int bio_cnt;
  unsigned int bad_bio_cnt;
  long unsigned int bio_cnt_reset_time;
  struct blkg_rwstat stat_bytes;
  struct blkg_rwstat stat_ios;
};

enum tg_state_flags {
  THROTL_TG_PENDING = 1,
  THROTL_TG_WAS_EMPTY = 2,
};

enum {
  LIMIT_LOW = 0,
  LIMIT_MAX = 1,
  LIMIT_CNT = 2,
};

struct blk_iolatency {
  struct rq_qos rqos;
  struct timer_list timer;
  atomic_t enabled;
};

struct iolatency_grp;

struct child_latency_info {
  spinlock_t lock;
  u64 last_scale_event;
  u64 scale_lat;
  u64 nr_samples;
  struct iolatency_grp* scale_grp;
  atomic_t scale_cookie;
};

struct percentile_stats {
  u64 total;
  u64 missed;
};

struct latency_stat {
  union {
    struct percentile_stats ps;
    struct blk_rq_stat rqs;
  };
};

struct iolatency_grp {
  struct blkg_policy_data pd;
  struct latency_stat* stats;
  struct latency_stat cur_stat;
  struct blk_iolatency* blkiolat;
  struct rq_depth rq_depth;
  struct rq_wait rq_wait;
  atomic64_t window_start;
  atomic_t scale_cookie;
  u64 min_lat_nsec;
  u64 cur_win_nsec;
  u64 lat_avg;
  u64 nr_samples;
  bool ssd;
  struct child_latency_info child_lat;
};

enum {
  MILLION = 1000000,
  MIN_PERIOD = 1000,
  MAX_PERIOD = 1000000,
  MARGIN_MIN_PCT = 10,
  MARGIN_LOW_PCT = 20,
  MARGIN_TARGET_PCT = 50,
  INUSE_ADJ_STEP_PCT = 25,
  TIMER_SLACK_PCT = 1,
  WEIGHT_ONE = 65536,
  VTIME_PER_SEC_SHIFT = 37,
  VTIME_PER_SEC = 0,
  VTIME_PER_USEC = 137438,
  VTIME_PER_NSEC = 137,
  VRATE_MIN_PPM = 10000,
  VRATE_MAX_PPM = 100000000,
  VRATE_MIN = 1374,
  VRATE_CLAMP_ADJ_PCT = 4,
  RQ_WAIT_BUSY_PCT = 5,
  UNBUSY_THR_PCT = 75,
  MIN_DELAY_THR_PCT = 500,
  MAX_DELAY_THR_PCT = 25000,
  MIN_DELAY = 250,
  MAX_DELAY = 250000,
  DFGV_USAGE_PCT = 50,
  DFGV_PERIOD = 100000,
  MAX_LAGGING_PERIODS = 10,
  AUTOP_CYCLE_NSEC = 1410065408,
  IOC_PAGE_SHIFT = 12,
  IOC_PAGE_SIZE = 4096,
  IOC_SECT_TO_PAGE_SHIFT = 3,
  LCOEF_RANDIO_PAGES = 4096,
};

enum ioc_running {
  IOC_IDLE = 0,
  IOC_RUNNING = 1,
  IOC_STOP = 2,
};

enum {
  QOS_ENABLE = 0,
  QOS_CTRL = 1,
  NR_QOS_CTRL_PARAMS = 2,
};

enum {
  QOS_RPPM = 0,
  QOS_RLAT = 1,
  QOS_WPPM = 2,
  QOS_WLAT = 3,
  QOS_MIN = 4,
  QOS_MAX = 5,
  NR_QOS_PARAMS = 6,
};

enum {
  COST_CTRL = 0,
  COST_MODEL = 1,
  NR_COST_CTRL_PARAMS = 2,
};

enum {
  I_LCOEF_RBPS = 0,
  I_LCOEF_RSEQIOPS = 1,
  I_LCOEF_RRANDIOPS = 2,
  I_LCOEF_WBPS = 3,
  I_LCOEF_WSEQIOPS = 4,
  I_LCOEF_WRANDIOPS = 5,
  NR_I_LCOEFS = 6,
};

enum {
  LCOEF_RPAGE = 0,
  LCOEF_RSEQIO = 1,
  LCOEF_RRANDIO = 2,
  LCOEF_WPAGE = 3,
  LCOEF_WSEQIO = 4,
  LCOEF_WRANDIO = 5,
  NR_LCOEFS = 6,
};

enum {
  AUTOP_INVALID = 0,
  AUTOP_HDD = 1,
  AUTOP_SSD_QD1 = 2,
  AUTOP_SSD_DFL = 3,
  AUTOP_SSD_FAST = 4,
};

struct ioc_params {
  u32 qos[6];
  u64 i_lcoefs[6];
  u64 lcoefs[6];
  u32 too_fast_vrate_pct;
  u32 too_slow_vrate_pct;
};

struct ioc_margins {
  s64 min;
  s64 low;
  s64 target;
};

struct ioc_missed {
  local_t nr_met;
  local_t nr_missed;
  u32 last_met;
  u32 last_missed;
};

struct ioc_pcpu_stat {
  struct ioc_missed missed[2];
  local64_t rq_wait_ns;
  u64 last_rq_wait_ns;
};

struct ioc {
  struct rq_qos rqos;
  bool enabled;
  struct ioc_params params;
  struct ioc_margins margins;
  u32 period_us;
  u32 timer_slack_ns;
  u64 vrate_min;
  u64 vrate_max;
  spinlock_t lock;
  struct timer_list timer;
  struct list_head active_iocgs;
  struct ioc_pcpu_stat* pcpu_stat;
  enum ioc_running running;
  atomic64_t vtime_rate;
  u64 vtime_base_rate;
  s64 vtime_err;
  seqcount_spinlock_t period_seqcount;
  u64 period_at;
  u64 period_at_vtime;
  atomic64_t cur_period;
  int busy_level;
  bool weights_updated;
  atomic_t hweight_gen;
  u64 dfgv_period_at;
  u64 dfgv_period_rem;
  u64 dfgv_usage_us_sum;
  u64 autop_too_fast_at;
  u64 autop_too_slow_at;
  int autop_idx;
  bool user_qos_params : 1;
  bool user_cost_model : 1;
};

struct iocg_pcpu_stat {
  local64_t abs_vusage;
};

struct iocg_stat {
  u64 usage_us;
  u64 wait_us;
  u64 indebt_us;
  u64 indelay_us;
};

struct ioc_gq {
  struct blkg_policy_data pd;
  struct ioc* ioc;
  u32 cfg_weight;
  u32 weight;
  u32 active;
  u32 inuse;
  u32 last_inuse;
  s64 saved_margin;
  sector_t cursor;
  atomic64_t vtime;
  atomic64_t done_vtime;
  u64 abs_vdebt;
  u64 delay;
  u64 delay_at;
  atomic64_t active_period;
  struct list_head active_list;
  u64 child_active_sum;
  u64 child_inuse_sum;
  u64 child_adjusted_sum;
  int hweight_gen;
  u32 hweight_active;
  u32 hweight_inuse;
  u32 hweight_donating;
  u32 hweight_after_donation;
  struct list_head walk_list;
  struct list_head surplus_list;
  struct wait_queue_head waitq;
  struct hrtimer waitq_timer;
  u64 activated_at;
  struct iocg_pcpu_stat* pcpu_stat;
  struct iocg_stat local_stat;
  struct iocg_stat desc_stat;
  struct iocg_stat last_stat;
  u64 last_stat_abs_vusage;
  u64 usage_delta_us;
  u64 wait_since;
  u64 indebt_since;
  u64 indelay_since;
  int level;
  struct ioc_gq* ancestors[0];
};

struct ioc_cgrp {
  struct blkcg_policy_data cpd;
  unsigned int dfl_weight;
};

struct ioc_now {
  u64 now_ns;
  u64 now;
  u64 vnow;
  u64 vrate;
};

struct iocg_wait {
  struct wait_queue_entry wait;
  struct bio* bio;
  u64 abs_cost;
  bool committed;
};

struct iocg_wake_ctx {
  struct ioc_gq* iocg;
  u32 hw_inuse;
  s64 vbudget;
};

struct trace_event_raw_iocost_iocg_state {
  struct trace_entry ent;
  u32 __data_loc_devname;
  u32 __data_loc_cgroup;
  u64 now;
  u64 vnow;
  u64 vrate;
  u64 last_period;
  u64 cur_period;
  u64 vtime;
  u32 weight;
  u32 inuse;
  u64 hweight_active;
  u64 hweight_inuse;
  char __data[0];
};

struct trace_event_raw_iocg_inuse_update {
  struct trace_entry ent;
  u32 __data_loc_devname;
  u32 __data_loc_cgroup;
  u64 now;
  u32 old_inuse;
  u32 new_inuse;
  u64 old_hweight_inuse;
  u64 new_hweight_inuse;
  char __data[0];
};

struct trace_event_raw_iocost_ioc_vrate_adj {
  struct trace_entry ent;
  u32 __data_loc_devname;
  u64 old_vrate;
  u64 new_vrate;
  int busy_level;
  u32 read_missed_ppm;
  u32 write_missed_ppm;
  u32 rq_wait_pct;
  int nr_lagging;
  int nr_shortages;
  char __data[0];
};

struct trace_event_raw_iocost_iocg_forgive_debt {
  struct trace_entry ent;
  u32 __data_loc_devname;
  u32 __data_loc_cgroup;
  u64 now;
  u64 vnow;
  u32 usage_pct;
  u64 old_debt;
  u64 new_debt;
  u64 old_delay;
  u64 new_delay;
  char __data[0];
};

struct trace_event_data_offsets_iocost_iocg_state {
  u32 devname;
  u32 cgroup;
};

struct trace_event_data_offsets_iocg_inuse_update {
  u32 devname;
  u32 cgroup;
};

struct trace_event_data_offsets_iocost_ioc_vrate_adj {
  u32 devname;
};

struct trace_event_data_offsets_iocost_iocg_forgive_debt {
  u32 devname;
  u32 cgroup;
};

typedef void (*btf_trace_iocost_iocg_activate)(
    void*,
    struct ioc_gq*,
    const char*,
    struct ioc_now*,
    u64,
    u64,
    u64);

typedef void (*btf_trace_iocost_iocg_idle)(
    void*,
    struct ioc_gq*,
    const char*,
    struct ioc_now*,
    u64,
    u64,
    u64);

typedef void (*btf_trace_iocost_inuse_shortage)(
    void*,
    struct ioc_gq*,
    const char*,
    struct ioc_now*,
    u32,
    u32,
    u64,
    u64);

typedef void (*btf_trace_iocost_inuse_transfer)(
    void*,
    struct ioc_gq*,
    const char*,
    struct ioc_now*,
    u32,
    u32,
    u64,
    u64);

typedef void (*btf_trace_iocost_inuse_adjust)(
    void*,
    struct ioc_gq*,
    const char*,
    struct ioc_now*,
    u32,
    u32,
    u64,
    u64);

typedef void (*btf_trace_iocost_ioc_vrate_adj)(
    void*,
    struct ioc*,
    u64,
    u32*,
    u32,
    int,
    int);

typedef void (*btf_trace_iocost_iocg_forgive_debt)(
    void*,
    struct ioc_gq*,
    const char*,
    struct ioc_now*,
    u32,
    u64,
    u64,
    u64,
    u64);

struct deadline_data {
  struct rb_root sort_list[2];
  struct list_head fifo_list[2];
  struct request* next_rq[2];
  unsigned int batching;
  unsigned int starved;
  int fifo_expire[2];
  int fifo_batch;
  int writes_starved;
  int front_merges;
  spinlock_t lock;
  spinlock_t zone_lock;
  struct list_head dispatch;
};

struct trace_event_raw_kyber_latency {
  struct trace_entry ent;
  dev_t dev;
  char domain[16];
  char type[8];
  u8 percentile;
  u8 numerator;
  u8 denominator;
  unsigned int samples;
  char __data[0];
};

struct trace_event_raw_kyber_adjust {
  struct trace_entry ent;
  dev_t dev;
  char domain[16];
  unsigned int depth;
  char __data[0];
};

struct trace_event_raw_kyber_throttled {
  struct trace_entry ent;
  dev_t dev;
  char domain[16];
  char __data[0];
};

struct trace_event_data_offsets_kyber_latency {};

struct trace_event_data_offsets_kyber_adjust {};

struct trace_event_data_offsets_kyber_throttled {};

typedef void (*btf_trace_kyber_latency)(
    void*,
    struct request_queue*,
    const char*,
    const char*,
    unsigned int,
    unsigned int,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_kyber_adjust)(
    void*,
    struct request_queue*,
    const char*,
    unsigned int);

typedef void (
    *btf_trace_kyber_throttled)(void*, struct request_queue*, const char*);

enum {
  KYBER_READ = 0,
  KYBER_WRITE = 1,
  KYBER_DISCARD = 2,
  KYBER_OTHER = 3,
  KYBER_NUM_DOMAINS = 4,
};

enum {
  KYBER_ASYNC_PERCENT = 75,
};

enum {
  KYBER_LATENCY_SHIFT = 2,
  KYBER_GOOD_BUCKETS = 4,
  KYBER_LATENCY_BUCKETS = 8,
};

enum {
  KYBER_TOTAL_LATENCY = 0,
  KYBER_IO_LATENCY = 1,
};

struct kyber_cpu_latency {
  atomic_t buckets[48];
};

struct kyber_ctx_queue {
  spinlock_t lock;
  struct list_head rq_list[4];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct kyber_queue_data {
  struct request_queue* q;
  struct sbitmap_queue domain_tokens[4];
  unsigned int async_depth;
  struct kyber_cpu_latency* cpu_latency;
  struct timer_list timer;
  unsigned int latency_buckets[48];
  long unsigned int latency_timeout[3];
  int domain_p99[3];
  u64 latency_targets[3];
};

struct kyber_hctx_data {
  spinlock_t lock;
  struct list_head rqs[4];
  unsigned int cur_domain;
  unsigned int batching;
  struct kyber_ctx_queue* kcqs;
  struct sbitmap kcq_map[4];
  struct sbq_wait domain_wait[4];
  struct sbq_wait_state* domain_ws[4];
  atomic_t wait_index[4];
};

struct flush_kcq_data {
  struct kyber_hctx_data* khd;
  unsigned int sched_domain;
  struct list_head* list;
};

struct virtio_device_id {
  __u32 device;
  __u32 vendor;
};

struct virtio_device;

struct virtqueue {
  struct list_head list;
  void (*callback)(struct virtqueue*);
  const char* name;
  struct virtio_device* vdev;
  unsigned int index;
  unsigned int num_free;
  void* priv;
};

struct vringh_config_ops;

struct virtio_config_ops;

struct virtio_device {
  int index;
  bool failed;
  bool config_enabled;
  bool config_change_pending;
  spinlock_t config_lock;
  struct device dev;
  struct virtio_device_id id;
  const struct virtio_config_ops* config;
  const struct vringh_config_ops* vringh_config;
  struct list_head vqs;
  u64 features;
  void* priv;
};

typedef void vq_callback_t(struct virtqueue*);

struct virtio_shm_region;

struct virtio_config_ops {
  void (*get)(struct virtio_device*, unsigned int, void*, unsigned int);
  void (*set)(struct virtio_device*, unsigned int, const void*, unsigned int);
  u32 (*generation)(struct virtio_device*);
  u8 (*get_status)(struct virtio_device*);
  void (*set_status)(struct virtio_device*, u8);
  void (*reset)(struct virtio_device*);
  int (*find_vqs)(
      struct virtio_device*,
      unsigned int,
      struct virtqueue**,
      vq_callback_t**,
      const char* const*,
      const bool*,
      struct irq_affinity*);
  void (*del_vqs)(struct virtio_device*);
  u64 (*get_features)(struct virtio_device*);
  int (*finalize_features)(struct virtio_device*);
  const char* (*bus_name)(struct virtio_device*);
  int (*set_vq_affinity)(struct virtqueue*, const struct cpumask*);
  const struct cpumask* (*get_vq_affinity)(struct virtio_device*, int);
  bool (*get_shm_region)(struct virtio_device*, struct virtio_shm_region*, u8);
};

struct virtio_shm_region {
  u64 addr;
  u64 len;
};

enum wbt_flags {
  WBT_TRACKED = 1,
  WBT_READ = 2,
  WBT_KSWAPD = 4,
  WBT_DISCARD = 8,
  WBT_NR_BITS = 4,
};

enum {
  WBT_STATE_ON_DEFAULT = 1,
  WBT_STATE_ON_MANUAL = 2,
  WBT_STATE_OFF_DEFAULT = 3,
};

struct rq_wb {
  unsigned int wb_background;
  unsigned int wb_normal;
  short int enable_state;
  unsigned int unknown_cnt;
  u64 win_nsec;
  u64 cur_win_nsec;
  struct blk_stat_callback* cb;
  u64 sync_issue;
  void* sync_cookie;
  unsigned int wc;
  long unsigned int last_issue;
  long unsigned int last_comp;
  long unsigned int min_lat_nsec;
  struct rq_qos rqos;
  struct rq_wait rq_wait[3];
  struct rq_depth rq_depth;
};

struct trace_event_raw_wbt_stat {
  struct trace_entry ent;
  char name[32];
  s64 rmean;
  u64 rmin;
  u64 rmax;
  s64 rnr_samples;
  s64 rtime;
  s64 wmean;
  u64 wmin;
  u64 wmax;
  s64 wnr_samples;
  s64 wtime;
  char __data[0];
};

struct trace_event_raw_wbt_lat {
  struct trace_entry ent;
  char name[32];
  long unsigned int lat;
  char __data[0];
};

struct trace_event_raw_wbt_step {
  struct trace_entry ent;
  char name[32];
  const char* msg;
  int step;
  long unsigned int window;
  unsigned int bg;
  unsigned int normal;
  unsigned int max;
  char __data[0];
};

struct trace_event_raw_wbt_timer {
  struct trace_entry ent;
  char name[32];
  unsigned int status;
  int step;
  unsigned int inflight;
  char __data[0];
};

struct trace_event_data_offsets_wbt_stat {};

struct trace_event_data_offsets_wbt_lat {};

struct trace_event_data_offsets_wbt_step {};

struct trace_event_data_offsets_wbt_timer {};

typedef void (
    *btf_trace_wbt_stat)(void*, struct backing_dev_info*, struct blk_rq_stat*);

typedef void (
    *btf_trace_wbt_lat)(void*, struct backing_dev_info*, long unsigned int);

typedef void (*btf_trace_wbt_step)(
    void*,
    struct backing_dev_info*,
    const char*,
    int,
    long unsigned int,
    unsigned int,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_wbt_timer)(
    void*,
    struct backing_dev_info*,
    unsigned int,
    int,
    unsigned int);

enum {
  RWB_DEF_DEPTH = 16,
  RWB_WINDOW_NSEC = 100000000,
  RWB_MIN_WRITE_SAMPLES = 3,
  RWB_UNKNOWN_BUMP = 5,
};

enum {
  LAT_OK = 1,
  LAT_UNKNOWN = 2,
  LAT_UNKNOWN_WRITES = 3,
  LAT_EXCEEDED = 4,
};

struct wbt_wait_data {
  struct rq_wb* rwb;
  enum wbt_flags wb_acct;
  long unsigned int rw;
};

struct show_busy_params {
  struct seq_file* m;
  struct blk_mq_hw_ctx* hctx;
};

typedef void (*swap_func_t)(void*, void*, int);

typedef int (*cmp_r_func_t)(const void*, const void*, const void*);

struct siprand_state {
  long unsigned int v0;
  long unsigned int v1;
  long unsigned int v2;
  long unsigned int v3;
};

typedef __kernel_long_t __kernel_ptrdiff_t;

typedef __kernel_ptrdiff_t ptrdiff_t;

struct region {
  unsigned int start;
  unsigned int off;
  unsigned int group_len;
  unsigned int end;
};

enum {
  REG_OP_ISFREE = 0,
  REG_OP_ALLOC = 1,
  REG_OP_RELEASE = 2,
};

typedef struct scatterlist* sg_alloc_fn(unsigned int, gfp_t);

typedef void sg_free_fn(struct scatterlist*, unsigned int);

struct sg_page_iter {
  struct scatterlist* sg;
  unsigned int sg_pgoffset;
  unsigned int __nents;
  int __pg_advance;
};

struct sg_dma_page_iter {
  struct sg_page_iter base;
};

struct sg_mapping_iter {
  struct page* page;
  void* addr;
  size_t length;
  size_t consumed;
  struct sg_page_iter piter;
  unsigned int __offset;
  unsigned int __remaining;
  unsigned int __flags;
};

typedef int (
    *list_cmp_func_t)(void*, const struct list_head*, const struct list_head*);

struct csum_state {
  __wsum csum;
  size_t off;
};

struct rhashtable_walker {
  struct list_head list;
  struct bucket_table* tbl;
};

struct rhashtable_iter {
  struct rhashtable* ht;
  struct rhash_head* p;
  struct rhlist_head* list;
  struct rhashtable_walker walker;
  unsigned int slot;
  unsigned int skip;
  bool end_of_table;
};

union nested_table {
  union nested_table* table;
  struct rhash_lock_head* bucket;
};

struct once_work {
  struct work_struct work;
  struct static_key_true* key;
};

struct genradix_iter {
  size_t offset;
  size_t pos;
};

struct genradix_node {
  union {
    struct genradix_node* children[512];
    u8 data[4096];
  };
};

struct reciprocal_value_adv {
  u32 m;
  u8 sh;
  u8 exp;
  bool is_wide_m;
};

enum devm_ioremap_type {
  DEVM_IOREMAP = 0,
  DEVM_IOREMAP_UC = 1,
  DEVM_IOREMAP_WC = 2,
};

struct pcim_iomap_devres {
  void* table[6];
};

struct btree_head {
  long unsigned int* node;
  mempool_t* mempool;
  int height;
};

struct btree_geo {
  int keylen;
  int no_pairs;
  int no_longs;
};

typedef void (*visitor128_t)(void*, long unsigned int, u64, u64, size_t);

typedef void (*visitorl_t)(void*, long unsigned int, long unsigned int, size_t);

typedef void (*visitor32_t)(void*, long unsigned int, u32, size_t);

typedef void (*visitor64_t)(void*, long unsigned int, u64, size_t);

enum assoc_array_walk_status {
  assoc_array_walk_tree_empty = 0,
  assoc_array_walk_found_terminal_node = 1,
  assoc_array_walk_found_wrong_shortcut = 2,
};

struct assoc_array_walk_result {
  struct {
    struct assoc_array_node* node;
    int level;
    int slot;
  } terminal_node;
  struct {
    struct assoc_array_shortcut* shortcut;
    int level;
    int sc_level;
    long unsigned int sc_segments;
    long unsigned int dissimilarity;
  } wrong_shortcut;
};

struct assoc_array_delete_collapse_context {
  struct assoc_array_node* node;
  const void* skip_leaf;
  int slot;
};

struct xxh32_state {
  uint32_t total_len_32;
  uint32_t large_len;
  uint32_t v1;
  uint32_t v2;
  uint32_t v3;
  uint32_t v4;
  uint32_t mem32[4];
  uint32_t memsize;
};

struct gen_pool_chunk {
  struct list_head next_chunk;
  atomic_long_t avail;
  phys_addr_t phys_addr;
  void* owner;
  long unsigned int start_addr;
  long unsigned int end_addr;
  long unsigned int bits[0];
};

struct genpool_data_align {
  int align;
};

struct genpool_data_fixed {
  long unsigned int offset;
};

typedef z_stream* z_streamp;

typedef struct {
  unsigned char op;
  unsigned char bits;
  short unsigned int val;
} code;

typedef enum {
  HEAD = 0,
  FLAGS = 1,
  TIME = 2,
  OS = 3,
  EXLEN = 4,
  EXTRA = 5,
  NAME = 6,
  COMMENT = 7,
  HCRC = 8,
  DICTID = 9,
  DICT = 10,
  TYPE = 11,
  TYPEDO = 12,
  STORED = 13,
  COPY = 14,
  TABLE = 15,
  LENLENS = 16,
  CODELENS = 17,
  LEN = 18,
  LENEXT = 19,
  DIST = 20,
  DISTEXT = 21,
  MATCH = 22,
  LIT = 23,
  CHECK = 24,
  LENGTH = 25,
  DONE = 26,
  BAD = 27,
  MEM = 28,
  SYNC = 29,
} inflate_mode;

struct inflate_state {
  inflate_mode mode;
  int last;
  int wrap;
  int havedict;
  int flags;
  unsigned int dmax;
  long unsigned int check;
  long unsigned int total;
  unsigned int wbits;
  unsigned int wsize;
  unsigned int whave;
  unsigned int write;
  unsigned char* window;
  long unsigned int hold;
  unsigned int bits;
  unsigned int length;
  unsigned int offset;
  unsigned int extra;
  const code* lencode;
  const code* distcode;
  unsigned int lenbits;
  unsigned int distbits;
  unsigned int ncode;
  unsigned int nlen;
  unsigned int ndist;
  unsigned int have;
  code* next;
  short unsigned int lens[320];
  short unsigned int work[288];
  code codes[2048];
};

union uu {
  short unsigned int us;
  unsigned char b[2];
};

typedef unsigned int uInt;

struct inflate_workspace {
  struct inflate_state inflate_state;
  unsigned char working_window[32768];
};

typedef enum {
  CODES = 0,
  LENS = 1,
  DISTS = 2,
} codetype;

typedef unsigned char uch;

typedef short unsigned int ush;

typedef long unsigned int ulg;

struct ct_data_s {
  union {
    ush freq;
    ush code;
  } fc;
  union {
    ush dad;
    ush len;
  } dl;
};

typedef struct ct_data_s ct_data;

struct static_tree_desc_s {
  const ct_data* static_tree;
  const int* extra_bits;
  int extra_base;
  int elems;
  int max_length;
};

typedef struct static_tree_desc_s static_tree_desc;

struct tree_desc_s {
  ct_data* dyn_tree;
  int max_code;
  static_tree_desc* stat_desc;
};

typedef ush Pos;

typedef unsigned int IPos;

struct deflate_state {
  z_streamp strm;
  int status;
  Byte* pending_buf;
  ulg pending_buf_size;
  Byte* pending_out;
  int pending;
  int noheader;
  Byte data_type;
  Byte method;
  int last_flush;
  uInt w_size;
  uInt w_bits;
  uInt w_mask;
  Byte* window;
  ulg window_size;
  Pos* prev;
  Pos* head;
  uInt ins_h;
  uInt hash_size;
  uInt hash_bits;
  uInt hash_mask;
  uInt hash_shift;
  long int block_start;
  uInt match_length;
  IPos prev_match;
  int match_available;
  uInt strstart;
  uInt match_start;
  uInt lookahead;
  uInt prev_length;
  uInt max_chain_length;
  uInt max_lazy_match;
  int level;
  int strategy;
  uInt good_match;
  int nice_match;
  struct ct_data_s dyn_ltree[573];
  struct ct_data_s dyn_dtree[61];
  struct ct_data_s bl_tree[39];
  struct tree_desc_s l_desc;
  struct tree_desc_s d_desc;
  struct tree_desc_s bl_desc;
  ush bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  uch depth[573];
  uch* l_buf;
  uInt lit_bufsize;
  uInt last_lit;
  ush* d_buf;
  ulg opt_len;
  ulg static_len;
  ulg compressed_len;
  uInt matches;
  int last_eob_len;
  ush bi_buf;
  int bi_valid;
};

typedef struct deflate_state deflate_state;

typedef enum {
  need_more = 0,
  block_done = 1,
  finish_started = 2,
  finish_done = 3,
} block_state;

typedef block_state (*compress_func)(deflate_state*, int);

struct deflate_workspace {
  deflate_state deflate_memory;
  Byte* window_memory;
  Pos* prev_memory;
  Pos* head_memory;
  char* overlay_memory;
};

typedef struct deflate_workspace deflate_workspace;

struct config_s {
  ush good_length;
  ush max_lazy;
  ush nice_length;
  ush max_chain;
  compress_func func;
};

typedef struct config_s config;

typedef struct tree_desc_s tree_desc;

typedef struct {
  const uint8_t* externalDict;
  size_t extDictSize;
  const uint8_t* prefixEnd;
  size_t prefixSize;
} LZ4_streamDecode_t_internal;

typedef union {
  long long unsigned int table[4];
  LZ4_streamDecode_t_internal internal_donotuse;
} LZ4_streamDecode_t;

typedef uint8_t BYTE;

typedef uint16_t U16;

typedef uint32_t U32;

typedef uint64_t U64;

typedef uintptr_t uptrval;

typedef enum {
  noDict = 0,
  withPrefix64k = 1,
  usingExtDict = 2,
} dict_directive;

typedef enum {
  endOnOutputSize = 0,
  endOnInputSize = 1,
} endCondition_directive;

typedef enum {
  decode_full_block = 0,
  partial_decode = 1,
} earlyEnd_directive;

typedef struct {
  size_t bitContainer;
  int bitPos;
  char* startPtr;
  char* ptr;
  char* endPtr;
} BIT_CStream_t;

typedef unsigned int FSE_CTable;

typedef struct {
  ptrdiff_t value;
  const void* stateTable;
  const void* symbolTT;
  unsigned int stateLog;
} FSE_CState_t;

typedef struct {
  int deltaFindState;
  U32 deltaNbBits;
} FSE_symbolCompressionTransform;

typedef int16_t S16;

struct HUF_CElt_s {
  U16 val;
  BYTE nbBits;
};

typedef struct HUF_CElt_s HUF_CElt;

typedef enum {
  HUF_repeat_none = 0,
  HUF_repeat_check = 1,
  HUF_repeat_valid = 2,
} HUF_repeat;

struct nodeElt_s {
  U32 count;
  U16 parent;
  BYTE byte;
  BYTE nbBits;
};

typedef struct nodeElt_s nodeElt;

typedef struct {
  U32 base;
  U32 curr;
} rankPos;

typedef enum {
  ZSTDcs_created = 0,
  ZSTDcs_init = 1,
  ZSTDcs_ongoing = 2,
  ZSTDcs_ending = 3,
} ZSTD_compressionStage_e;

typedef void* (*ZSTD_allocFunction)(void*, size_t);

typedef void (*ZSTD_freeFunction)(void*, void*);

typedef struct {
  ZSTD_allocFunction customAlloc;
  ZSTD_freeFunction customFree;
  void* opaque;
} ZSTD_customMem;

typedef struct {
  U32 price;
  U32 off;
  U32 mlen;
  U32 litlen;
  U32 rep[3];
} ZSTD_optimal_t;

typedef struct {
  U32 off;
  U32 len;
} ZSTD_match_t;

struct seqDef_s;

typedef struct seqDef_s seqDef;

typedef struct {
  seqDef* sequencesStart;
  seqDef* sequences;
  BYTE* litStart;
  BYTE* lit;
  BYTE* llCode;
  BYTE* mlCode;
  BYTE* ofCode;
  U32 longLengthID;
  U32 longLengthPos;
  ZSTD_optimal_t* priceTable;
  ZSTD_match_t* matchTable;
  U32* matchLengthFreq;
  U32* litLengthFreq;
  U32* litFreq;
  U32* offCodeFreq;
  U32 matchLengthSum;
  U32 matchSum;
  U32 litLengthSum;
  U32 litSum;
  U32 offCodeSum;
  U32 log2matchLengthSum;
  U32 log2matchSum;
  U32 log2litLengthSum;
  U32 log2litSum;
  U32 log2offCodeSum;
  U32 factor;
  U32 staticPrices;
  U32 cachedPrice;
  U32 cachedLitLength;
  const BYTE* cachedLiterals;
} seqStore_t;

struct HUF_CElt_s___2;

typedef struct HUF_CElt_s___2 HUF_CElt___2;

struct ZSTD_CCtx_s {
  const BYTE* nextSrc;
  const BYTE* base;
  const BYTE* dictBase;
  U32 dictLimit;
  U32 lowLimit;
  U32 nextToUpdate;
  U32 nextToUpdate3;
  U32 hashLog3;
  U32 loadedDictEnd;
  U32 forceWindow;
  U32 forceRawDict;
  ZSTD_compressionStage_e stage;
  U32 rep[3];
  U32 repToConfirm[3];
  U32 dictID;
  ZSTD_parameters params;
  void* workSpace;
  size_t workSpaceSize;
  size_t blockSize;
  U64 frameContentSize;
  struct xxh64_state xxhState;
  ZSTD_customMem customMem;
  seqStore_t seqStore;
  U32* hashTable;
  U32* hashTable3;
  U32* chainTable;
  HUF_CElt___2* hufTable;
  U32 flagStaticTables;
  HUF_repeat flagStaticHufTable;
  FSE_CTable offcodeCTable[187];
  FSE_CTable matchlengthCTable[363];
  FSE_CTable litlengthCTable[329];
  unsigned int tmpCounters[1536];
};

typedef struct ZSTD_CCtx_s ZSTD_CCtx;

struct ZSTD_CDict_s {
  void* dictBuffer;
  const void* dictContent;
  size_t dictContentSize;
  ZSTD_CCtx* refContext;
};

typedef struct ZSTD_CDict_s ZSTD_CDict;

typedef enum {
  zcss_init = 0,
  zcss_load = 1,
  zcss_flush = 2,
  zcss_final = 3,
} ZSTD_cStreamStage;

struct ZSTD_CStream_s___2 {
  ZSTD_CCtx* cctx;
  ZSTD_CDict* cdictLocal;
  const ZSTD_CDict* cdict;
  char* inBuff;
  size_t inBuffSize;
  size_t inToCompress;
  size_t inBuffPos;
  size_t inBuffTarget;
  size_t blockSize;
  char* outBuff;
  size_t outBuffSize;
  size_t outBuffContentSize;
  size_t outBuffFlushedSize;
  ZSTD_cStreamStage stage;
  U32 checksum;
  U32 frameEnded;
  U64 pledgedSrcSize;
  U64 inputProcessed;
  ZSTD_parameters params;
  ZSTD_customMem customMem;
};

typedef struct ZSTD_CStream_s___2 ZSTD_CStream___2;

typedef int32_t S32;

typedef enum {
  set_basic = 0,
  set_rle = 1,
  set_compressed = 2,
  set_repeat = 3,
} symbolEncodingType_e;

struct seqDef_s {
  U32 offset;
  U16 litLength;
  U16 matchLength;
};

typedef enum {
  ZSTDcrp_continue = 0,
  ZSTDcrp_noMemset = 1,
  ZSTDcrp_fullReset = 2,
} ZSTD_compResetPolicy_e;

typedef void (*ZSTD_blockCompressor)(ZSTD_CCtx*, const void*, size_t);

typedef enum {
  zsf_gather = 0,
  zsf_flush = 1,
  zsf_end = 2,
} ZSTD_flush_e;

typedef size_t (
    *searchMax_f)(ZSTD_CCtx*, const BYTE*, const BYTE*, size_t*, U32, U32);

typedef struct {
  size_t bitContainer;
  unsigned int bitsConsumed;
  const char* ptr;
  const char* start;
} BIT_DStream_t;

typedef enum {
  BIT_DStream_unfinished = 0,
  BIT_DStream_endOfBuffer = 1,
  BIT_DStream_completed = 2,
  BIT_DStream_overflow = 3,
} BIT_DStream_status;

typedef unsigned int FSE_DTable;

typedef struct {
  size_t state;
  const void* table;
} FSE_DState_t;

typedef struct {
  U16 tableLog;
  U16 fastMode;
} FSE_DTableHeader;

typedef struct {
  short unsigned int newState;
  unsigned char symbol;
  unsigned char nbBits;
} FSE_decode_t;

typedef struct {
  void* ptr;
  const void* end;
} ZSTD_stack;

typedef U32 HUF_DTable;

typedef struct {
  BYTE maxTableLog;
  BYTE tableType;
  BYTE tableLog;
  BYTE reserved;
} DTableDesc;

typedef struct {
  BYTE byte;
  BYTE nbBits;
} HUF_DEltX2;

typedef struct {
  U16 sequence;
  BYTE nbBits;
  BYTE length;
} HUF_DEltX4;

typedef struct {
  BYTE symbol;
  BYTE weight;
} sortedSymbol_t;

typedef U32 rankValCol_t[13];

typedef struct {
  U32 tableTime;
  U32 decode256Time;
} algo_time_t;

typedef struct {
  FSE_DTable LLTable[513];
  FSE_DTable OFTable[257];
  FSE_DTable MLTable[513];
  HUF_DTable hufTable[4097];
  U64 workspace[384];
  U32 rep[3];
} ZSTD_entropyTables_t;

typedef struct {
  long long unsigned int frameContentSize;
  unsigned int windowSize;
  unsigned int dictID;
  unsigned int checksumFlag;
} ZSTD_frameParams;

typedef enum {
  bt_raw = 0,
  bt_rle = 1,
  bt_compressed = 2,
  bt_reserved = 3,
} blockType_e;

typedef enum {
  ZSTDds_getFrameHeaderSize = 0,
  ZSTDds_decodeFrameHeader = 1,
  ZSTDds_decodeBlockHeader = 2,
  ZSTDds_decompressBlock = 3,
  ZSTDds_decompressLastBlock = 4,
  ZSTDds_checkChecksum = 5,
  ZSTDds_decodeSkippableHeader = 6,
  ZSTDds_skipFrame = 7,
} ZSTD_dStage;

struct ZSTD_DCtx_s {
  const FSE_DTable* LLTptr;
  const FSE_DTable* MLTptr;
  const FSE_DTable* OFTptr;
  const HUF_DTable* HUFptr;
  ZSTD_entropyTables_t entropy;
  const void* previousDstEnd;
  const void* base;
  const void* vBase;
  const void* dictEnd;
  size_t expected;
  ZSTD_frameParams fParams;
  blockType_e bType;
  ZSTD_dStage stage;
  U32 litEntropy;
  U32 fseEntropy;
  struct xxh64_state xxhState;
  size_t headerSize;
  U32 dictID;
  const BYTE* litPtr;
  ZSTD_customMem customMem;
  size_t litSize;
  size_t rleSize;
  BYTE litBuffer[131080];
  BYTE headerBuffer[18];
};

typedef struct ZSTD_DCtx_s ZSTD_DCtx;

struct ZSTD_DDict_s {
  void* dictBuffer;
  const void* dictContent;
  size_t dictSize;
  ZSTD_entropyTables_t entropy;
  U32 dictID;
  U32 entropyPresent;
  ZSTD_customMem cMem;
};

typedef struct ZSTD_DDict_s ZSTD_DDict;

typedef enum {
  zdss_init = 0,
  zdss_loadHeader = 1,
  zdss_read = 2,
  zdss_load = 3,
  zdss_flush = 4,
} ZSTD_dStreamStage;

struct ZSTD_DStream_s___2 {
  ZSTD_DCtx* dctx;
  ZSTD_DDict* ddictLocal;
  const ZSTD_DDict* ddict;
  ZSTD_frameParams fParams;
  ZSTD_dStreamStage stage;
  char* inBuff;
  size_t inBuffSize;
  size_t inPos;
  size_t maxWindowSize;
  char* outBuff;
  size_t outBuffSize;
  size_t outStart;
  size_t outEnd;
  size_t blockSize;
  BYTE headerBuffer[18];
  size_t lhSize;
  ZSTD_customMem customMem;
  void* legacyContext;
  U32 previousLegacyVersion;
  U32 legacyVersion;
  U32 hostageByte;
};

typedef struct ZSTD_DStream_s___2 ZSTD_DStream___2;

typedef enum {
  ZSTDnit_frameHeader = 0,
  ZSTDnit_blockHeader = 1,
  ZSTDnit_block = 2,
  ZSTDnit_lastBlock = 3,
  ZSTDnit_checksum = 4,
  ZSTDnit_skippableFrame = 5,
} ZSTD_nextInputType_e;

typedef uintptr_t uPtrDiff;

typedef struct {
  blockType_e blockType;
  U32 lastBlock;
  U32 origSize;
} blockProperties_t;

typedef union {
  FSE_decode_t realData;
  U32 alignedBy4;
} FSE_decode_t4;

typedef struct {
  size_t litLength;
  size_t matchLength;
  size_t offset;
  const BYTE* match;
} seq_t;

typedef struct {
  BIT_DStream_t DStream;
  FSE_DState_t stateLL;
  FSE_DState_t stateOffb;
  FSE_DState_t stateML;
  size_t prevOffset[3];
  const BYTE* base;
  size_t pos;
  uPtrDiff gotoDict;
} seqState_t;

enum xz_mode {
  XZ_SINGLE = 0,
  XZ_PREALLOC = 1,
  XZ_DYNALLOC = 2,
};

enum xz_ret {
  XZ_OK = 0,
  XZ_STREAM_END = 1,
  XZ_UNSUPPORTED_CHECK = 2,
  XZ_MEM_ERROR = 3,
  XZ_MEMLIMIT_ERROR = 4,
  XZ_FORMAT_ERROR = 5,
  XZ_OPTIONS_ERROR = 6,
  XZ_DATA_ERROR = 7,
  XZ_BUF_ERROR = 8,
};

struct xz_buf {
  const uint8_t* in;
  size_t in_pos;
  size_t in_size;
  uint8_t* out;
  size_t out_pos;
  size_t out_size;
};

typedef uint64_t vli_type;

enum xz_check {
  XZ_CHECK_NONE = 0,
  XZ_CHECK_CRC32 = 1,
  XZ_CHECK_CRC64 = 4,
  XZ_CHECK_SHA256 = 10,
};

struct xz_dec_hash {
  vli_type unpadded;
  vli_type uncompressed;
  uint32_t crc32;
};

struct xz_dec_lzma2;

struct xz_dec_bcj;

struct xz_dec {
  enum {
    SEQ_STREAM_HEADER = 0,
    SEQ_BLOCK_START = 1,
    SEQ_BLOCK_HEADER = 2,
    SEQ_BLOCK_UNCOMPRESS = 3,
    SEQ_BLOCK_PADDING = 4,
    SEQ_BLOCK_CHECK = 5,
    SEQ_INDEX = 6,
    SEQ_INDEX_PADDING = 7,
    SEQ_INDEX_CRC32 = 8,
    SEQ_STREAM_FOOTER = 9,
  } sequence;
  uint32_t pos;
  vli_type vli;
  size_t in_start;
  size_t out_start;
  uint32_t crc32;
  enum xz_check check_type;
  enum xz_mode mode;
  bool allow_buf_error;
  struct {
    vli_type compressed;
    vli_type uncompressed;
    uint32_t size;
  } block_header;
  struct {
    vli_type compressed;
    vli_type uncompressed;
    vli_type count;
    struct xz_dec_hash hash;
  } block;
  struct {
    enum {
      SEQ_INDEX_COUNT = 0,
      SEQ_INDEX_UNPADDED = 1,
      SEQ_INDEX_UNCOMPRESSED = 2,
    } sequence;
    vli_type size;
    vli_type count;
    struct xz_dec_hash hash;
  } index;
  struct {
    size_t pos;
    size_t size;
    uint8_t buf[1024];
  } temp;
  struct xz_dec_lzma2* lzma2;
  struct xz_dec_bcj* bcj;
  bool bcj_active;
};

enum lzma_state {
  STATE_LIT_LIT = 0,
  STATE_MATCH_LIT_LIT = 1,
  STATE_REP_LIT_LIT = 2,
  STATE_SHORTREP_LIT_LIT = 3,
  STATE_MATCH_LIT = 4,
  STATE_REP_LIT = 5,
  STATE_SHORTREP_LIT = 6,
  STATE_LIT_MATCH = 7,
  STATE_LIT_LONGREP = 8,
  STATE_LIT_SHORTREP = 9,
  STATE_NONLIT_MATCH = 10,
  STATE_NONLIT_REP = 11,
};

struct dictionary {
  uint8_t* buf;
  size_t start;
  size_t pos;
  size_t full;
  size_t limit;
  size_t end;
  uint32_t size;
  uint32_t size_max;
  uint32_t allocated;
  enum xz_mode mode;
};

struct rc_dec {
  uint32_t range;
  uint32_t code;
  uint32_t init_bytes_left;
  const uint8_t* in;
  size_t in_pos;
  size_t in_limit;
};

struct lzma_len_dec {
  uint16_t choice;
  uint16_t choice2;
  uint16_t low[128];
  uint16_t mid[128];
  uint16_t high[256];
};

struct lzma_dec {
  uint32_t rep0;
  uint32_t rep1;
  uint32_t rep2;
  uint32_t rep3;
  enum lzma_state state;
  uint32_t len;
  uint32_t lc;
  uint32_t literal_pos_mask;
  uint32_t pos_mask;
  uint16_t is_match[192];
  uint16_t is_rep[12];
  uint16_t is_rep0[12];
  uint16_t is_rep1[12];
  uint16_t is_rep2[12];
  uint16_t is_rep0_long[192];
  uint16_t dist_slot[256];
  uint16_t dist_special[114];
  uint16_t dist_align[16];
  struct lzma_len_dec match_len_dec;
  struct lzma_len_dec rep_len_dec;
  uint16_t literal[12288];
};

enum lzma2_seq {
  SEQ_CONTROL = 0,
  SEQ_UNCOMPRESSED_1 = 1,
  SEQ_UNCOMPRESSED_2 = 2,
  SEQ_COMPRESSED_0 = 3,
  SEQ_COMPRESSED_1 = 4,
  SEQ_PROPERTIES = 5,
  SEQ_LZMA_PREPARE = 6,
  SEQ_LZMA_RUN = 7,
  SEQ_COPY = 8,
};

struct lzma2_dec {
  enum lzma2_seq sequence;
  enum lzma2_seq next_sequence;
  uint32_t uncompressed;
  uint32_t compressed;
  bool need_dict_reset;
  bool need_props;
};

struct xz_dec_lzma2___2 {
  struct rc_dec rc;
  struct dictionary dict;
  struct lzma2_dec lzma2;
  struct lzma_dec lzma;
  struct {
    uint32_t size;
    uint8_t buf[63];
  } temp;
};

struct xz_dec_bcj___2 {
  enum {
    BCJ_X86 = 4,
    BCJ_POWERPC = 5,
    BCJ_IA64 = 6,
    BCJ_ARM = 7,
    BCJ_ARMTHUMB = 8,
    BCJ_SPARC = 9,
  } type;
  enum xz_ret ret;
  bool single_call;
  uint32_t pos;
  uint32_t x86_prev_mask;
  uint8_t* out;
  size_t out_pos;
  size_t out_size;
  struct {
    size_t filtered;
    size_t size;
    uint8_t buf[16];
  } temp;
};

typedef u64 unative_t;

struct raid6_sse_constants {
  u64 x1d[2];
};

struct raid6_avx2_constants {
  u64 x1d[4];
};

struct raid6_avx512_constants {
  u64 x1d[8];
};

struct ts_state {
  unsigned int offset;
  char cb[48];
};

struct ts_config;

struct ts_ops {
  const char* name;
  struct ts_config* (*init)(const void*, unsigned int, gfp_t, int);
  unsigned int (*find)(struct ts_config*, struct ts_state*);
  void (*destroy)(struct ts_config*);
  void* (*get_pattern)(struct ts_config*);
  unsigned int (*get_pattern_len)(struct ts_config*);
  struct module* owner;
  struct list_head list;
};

struct ts_config {
  struct ts_ops* ops;
  int flags;
  unsigned int (*get_next_block)(
      unsigned int,
      const u8**,
      struct ts_config*,
      struct ts_state*);
  void (*finish)(struct ts_config*, struct ts_state*);
};

struct ts_linear_state {
  unsigned int len;
  const void* data;
};

struct fault_attr {
  long unsigned int probability;
  long unsigned int interval;
  atomic_t times;
  atomic_t space;
  long unsigned int verbose;
  bool task_filter;
  long unsigned int stacktrace_depth;
  long unsigned int require_start;
  long unsigned int require_end;
  long unsigned int reject_start;
  long unsigned int reject_end;
  long unsigned int count;
  struct ratelimit_state ratelimit_state;
  struct dentry* dname;
};

struct ei_entry {
  struct list_head list;
  long unsigned int start_addr;
  long unsigned int end_addr;
  int etype;
  void* priv;
};

struct ddebug_table {
  struct list_head link;
  const char* mod_name;
  unsigned int num_ddebugs;
  struct _ddebug* ddebugs;
};

struct ddebug_query {
  const char* filename;
  const char* module;
  const char* function;
  const char* format;
  unsigned int first_lineno;
  unsigned int last_lineno;
};

struct ddebug_iter {
  struct ddebug_table* table;
  unsigned int idx;
};

struct flag_settings {
  unsigned int flags;
  unsigned int mask;
};

struct flagsbuf {
  char buf[7];
};

struct nla_bitfield32 {
  __u32 value;
  __u32 selector;
};

enum nla_policy_validation {
  NLA_VALIDATE_NONE = 0,
  NLA_VALIDATE_RANGE = 1,
  NLA_VALIDATE_RANGE_WARN_TOO_LONG = 2,
  NLA_VALIDATE_MIN = 3,
  NLA_VALIDATE_MAX = 4,
  NLA_VALIDATE_MASK = 5,
  NLA_VALIDATE_RANGE_PTR = 6,
  NLA_VALIDATE_FUNCTION = 7,
};

enum netlink_validation {
  NL_VALIDATE_LIBERAL = 0,
  NL_VALIDATE_TRAILING = 1,
  NL_VALIDATE_MAXTYPE = 2,
  NL_VALIDATE_UNSPEC = 4,
  NL_VALIDATE_STRICT_ATTRS = 8,
  NL_VALIDATE_NESTED = 16,
};

struct cpu_rmap {
  struct kref refcount;
  u16 size;
  u16 used;
  void** obj;
  struct {
    u16 index;
    u16 dist;
  } near[0];
};

struct irq_glue {
  struct irq_affinity_notify notify;
  struct cpu_rmap* rmap;
  u16 index;
};

typedef mpi_limb_t* mpi_ptr_t;

typedef int mpi_size_t;

typedef mpi_limb_t UWtype;

typedef unsigned int UHWtype;

enum gcry_mpi_constants {
  MPI_C_ZERO = 0,
  MPI_C_ONE = 1,
  MPI_C_TWO = 2,
  MPI_C_THREE = 3,
  MPI_C_FOUR = 4,
  MPI_C_EIGHT = 5,
};

struct barrett_ctx_s;

typedef struct barrett_ctx_s* mpi_barrett_t;

struct gcry_mpi_point {
  MPI x;
  MPI y;
  MPI z;
};

typedef struct gcry_mpi_point* MPI_POINT;

enum gcry_mpi_ec_models {
  MPI_EC_WEIERSTRASS = 0,
  MPI_EC_MONTGOMERY = 1,
  MPI_EC_EDWARDS = 2,
};

enum ecc_dialects {
  ECC_DIALECT_STANDARD = 0,
  ECC_DIALECT_ED25519 = 1,
  ECC_DIALECT_SAFECURVE = 2,
};

struct mpi_ec_ctx {
  enum gcry_mpi_ec_models model;
  enum ecc_dialects dialect;
  int flags;
  unsigned int nbits;
  MPI p;
  MPI a;
  MPI b;
  MPI_POINT G;
  MPI n;
  unsigned int h;
  MPI_POINT Q;
  MPI d;
  const char* name;
  struct {
    struct {
      unsigned int a_is_pminus3 : 1;
      unsigned int two_inv_p : 1;
    } valid;
    int a_is_pminus3;
    MPI two_inv_p;
    mpi_barrett_t p_barrett;
    MPI scratch[11];
  } t;
  void (*addm)(MPI, MPI, MPI, struct mpi_ec_ctx*);
  void (*subm)(MPI, MPI, MPI, struct mpi_ec_ctx*);
  void (*mulm)(MPI, MPI, MPI, struct mpi_ec_ctx*);
  void (*pow2)(MPI, const MPI, struct mpi_ec_ctx*);
  void (*mul2)(MPI, MPI, struct mpi_ec_ctx*);
};

struct field_table {
  const char* p;
  void (*addm)(MPI, MPI, MPI, struct mpi_ec_ctx*);
  void (*subm)(MPI, MPI, MPI, struct mpi_ec_ctx*);
  void (*mulm)(MPI, MPI, MPI, struct mpi_ec_ctx*);
  void (*mul2)(MPI, MPI, struct mpi_ec_ctx*);
  void (*pow2)(MPI, const MPI, struct mpi_ec_ctx*);
};

enum gcry_mpi_format {
  GCRYMPI_FMT_NONE = 0,
  GCRYMPI_FMT_STD = 1,
  GCRYMPI_FMT_PGP = 2,
  GCRYMPI_FMT_SSH = 3,
  GCRYMPI_FMT_HEX = 4,
  GCRYMPI_FMT_USG = 5,
  GCRYMPI_FMT_OPAQUE = 8,
};

struct barrett_ctx_s___2;

typedef struct barrett_ctx_s___2* mpi_barrett_t___2;

struct barrett_ctx_s___2 {
  MPI m;
  int m_copied;
  int k;
  MPI y;
  MPI r1;
  MPI r2;
  MPI r3;
};

struct karatsuba_ctx {
  struct karatsuba_ctx* next;
  mpi_ptr_t tspace;
  mpi_size_t tspace_size;
  mpi_ptr_t tp;
  mpi_size_t tp_size;
};

typedef long int mpi_limb_signed_t;

struct dim_sample {
  ktime_t time;
  u32 pkt_ctr;
  u32 byte_ctr;
  u16 event_ctr;
  u32 comp_ctr;
};

struct dim_stats {
  int ppms;
  int bpms;
  int epms;
  int cpms;
  int cpe_ratio;
};

struct dim {
  u8 state;
  struct dim_stats prev_stats;
  struct dim_sample start_sample;
  struct dim_sample measuring_sample;
  struct work_struct work;
  void* priv;
  u8 profile_ix;
  u8 mode;
  u8 tune_state;
  u8 steps_right;
  u8 steps_left;
  u8 tired;
};

enum dim_tune_state {
  DIM_PARKING_ON_TOP = 0,
  DIM_PARKING_TIRED = 1,
  DIM_GOING_RIGHT = 2,
  DIM_GOING_LEFT = 3,
};

struct dim_cq_moder {
  u16 usec;
  u16 pkts;
  u16 comps;
  u8 cq_period_mode;
};

enum dim_cq_period_mode {
  DIM_CQ_PERIOD_MODE_START_FROM_EQE = 0,
  DIM_CQ_PERIOD_MODE_START_FROM_CQE = 1,
  DIM_CQ_PERIOD_NUM_MODES = 2,
};

enum dim_state {
  DIM_START_MEASURE = 0,
  DIM_MEASURE_IN_PROGRESS = 1,
  DIM_APPLY_NEW_PROFILE = 2,
};

enum dim_stats_state {
  DIM_STATS_WORSE = 0,
  DIM_STATS_SAME = 1,
  DIM_STATS_BETTER = 2,
};

enum dim_step_result {
  DIM_STEPPED = 0,
  DIM_TOO_TIRED = 1,
  DIM_ON_EDGE = 2,
};

struct sg_pool {
  size_t size;
  char* name;
  struct kmem_cache* slab;
  mempool_t* pool;
};

struct irq_poll;

typedef int irq_poll_fn(struct irq_poll*, int);

struct irq_poll {
  struct list_head list;
  long unsigned int state;
  int weight;
  irq_poll_fn* poll;
};

enum {
  IRQ_POLL_F_SCHED = 0,
  IRQ_POLL_F_DISABLE = 1,
};

struct font_desc {
  int idx;
  const char* name;
  unsigned int width;
  unsigned int height;
  unsigned int charcount;
  const void* data;
  int pref;
};

struct font_data {
  unsigned int extra[4];
  const unsigned char data[0];
};

typedef u16 ucs2_char_t;

struct msr {
  union {
    struct {
      u32 l;
      u32 h;
    };
    u64 q;
  };
};

struct msr_info {
  u32 msr_no;
  struct msr reg;
  struct msr* msrs;
  int err;
};

struct msr_regs_info {
  u32* regs;
  int err;
};

struct msr_info_completion {
  struct msr_info msr;
  struct completion done;
};

struct trace_event_raw_msr_trace_class {
  struct trace_entry ent;
  unsigned int msr;
  u64 val;
  int failed;
  char __data[0];
};

struct trace_event_data_offsets_msr_trace_class {};

typedef void (*btf_trace_read_msr)(void*, unsigned int, u64, int);

typedef void (*btf_trace_write_msr)(void*, unsigned int, u64, int);

typedef void (*btf_trace_rdpmc)(void*, unsigned int, u64, int);

struct compress_format {
  unsigned char magic[2];
  const char* name;
  decompress_fn decompressor;
};

struct group_data {
  int limit[21];
  int base[20];
  int permute[258];
  int minLen;
  int maxLen;
};

struct bunzip_data {
  int writeCopies;
  int writePos;
  int writeRunCountdown;
  int writeCount;
  int writeCurrent;
  long int (*fill)(void*, long unsigned int);
  long int inbufCount;
  long int inbufPos;
  unsigned char* inbuf;
  unsigned int inbufBitCount;
  unsigned int inbufBits;
  unsigned int crc32Table[256];
  unsigned int headerCRC;
  unsigned int totalCRC;
  unsigned int writeCRC;
  unsigned int* dbuf;
  unsigned int dbufSize;
  unsigned char selectors[32768];
  struct group_data groups[6];
  int io_error;
  int byteCount[256];
  unsigned char symToByte[256];
  unsigned char mtfSymbol[256];
};

struct rc {
  long int (*fill)(void*, long unsigned int);
  uint8_t* ptr;
  uint8_t* buffer;
  uint8_t* buffer_end;
  long int buffer_size;
  uint32_t code;
  uint32_t range;
  uint32_t bound;
  void (*error)(char*);
};

struct lzma_header {
  uint8_t pos;
  uint32_t dict_size;
  uint64_t dst_size;
} __attribute__((packed));

struct writer {
  uint8_t* buffer;
  uint8_t previous_byte;
  size_t buffer_pos;
  int bufsize;
  size_t global_pos;
  long int (*flush)(void*, long unsigned int);
  struct lzma_header* header;
};

struct cstate {
  int state;
  uint32_t rep0;
  uint32_t rep1;
  uint32_t rep2;
  uint32_t rep3;
};

struct xz_dec___2;

struct ZSTD_DCtx_s___2;

typedef struct ZSTD_DCtx_s___2 ZSTD_DCtx___2;

enum cpio_fields {
  C_MAGIC = 0,
  C_INO = 1,
  C_MODE = 2,
  C_UID = 3,
  C_GID = 4,
  C_NLINK = 5,
  C_MTIME = 6,
  C_FILESIZE = 7,
  C_MAJ = 8,
  C_MIN = 9,
  C_RMAJ = 10,
  C_RMIN = 11,
  C_NAMESIZE = 12,
  C_CHKSUM = 13,
  C_NFIELDS = 14,
};

struct fprop_local_single {
  long unsigned int events;
  unsigned int period;
  raw_spinlock_t lock;
};

struct ida_bitmap {
  long unsigned int bitmap[16];
};

struct klist_waiter {
  struct list_head list;
  struct klist_node* node;
  struct task_struct* process;
  int woken;
};

struct uevent_sock {
  struct list_head list;
  struct sock* sk;
};

enum {
  LOGIC_PIO_INDIRECT = 0,
  LOGIC_PIO_CPU_MMIO = 1,
};

struct logic_pio_host_ops;

struct logic_pio_hwaddr {
  struct list_head list;
  struct fwnode_handle* fwnode;
  resource_size_t hw_start;
  resource_size_t io_start;
  resource_size_t size;
  long unsigned int flags;
  void* hostdata;
  const struct logic_pio_host_ops* ops;
};

struct logic_pio_host_ops {
  u32 (*in)(void*, long unsigned int, size_t);
  void (*out)(void*, long unsigned int, u32, size_t);
  u32 (*ins)(void*, long unsigned int, void*, size_t, unsigned int);
  void (*outs)(void*, long unsigned int, const void*, size_t, unsigned int);
};

typedef struct {
  long unsigned int key[2];
} hsiphash_key_t;

struct clk_hw;

struct clk_rate_request {
  long unsigned int rate;
  long unsigned int min_rate;
  long unsigned int max_rate;
  long unsigned int best_parent_rate;
  struct clk_hw* best_parent_hw;
};

struct clk_core;

struct clk_init_data;

struct clk_hw {
  struct clk_core* core;
  struct clk* clk;
  const struct clk_init_data* init;
};

struct clk_duty {
  unsigned int num;
  unsigned int den;
};

struct clk_ops {
  int (*prepare)(struct clk_hw*);
  void (*unprepare)(struct clk_hw*);
  int (*is_prepared)(struct clk_hw*);
  void (*unprepare_unused)(struct clk_hw*);
  int (*enable)(struct clk_hw*);
  void (*disable)(struct clk_hw*);
  int (*is_enabled)(struct clk_hw*);
  void (*disable_unused)(struct clk_hw*);
  int (*save_context)(struct clk_hw*);
  void (*restore_context)(struct clk_hw*);
  long unsigned int (*recalc_rate)(struct clk_hw*, long unsigned int);
  long int (*round_rate)(struct clk_hw*, long unsigned int, long unsigned int*);
  int (*determine_rate)(struct clk_hw*, struct clk_rate_request*);
  int (*set_parent)(struct clk_hw*, u8);
  u8 (*get_parent)(struct clk_hw*);
  int (*set_rate)(struct clk_hw*, long unsigned int, long unsigned int);
  int (*set_rate_and_parent)(
      struct clk_hw*,
      long unsigned int,
      long unsigned int,
      u8);
  long unsigned int (*recalc_accuracy)(struct clk_hw*, long unsigned int);
  int (*get_phase)(struct clk_hw*);
  int (*set_phase)(struct clk_hw*, int);
  int (*get_duty_cycle)(struct clk_hw*, struct clk_duty*);
  int (*set_duty_cycle)(struct clk_hw*, struct clk_duty*);
  int (*init)(struct clk_hw*);
  void (*terminate)(struct clk_hw*);
  void (*debug_init)(struct clk_hw*, struct dentry*);
};

struct clk_parent_data {
  const struct clk_hw* hw;
  const char* fw_name;
  const char* name;
  int index;
};

struct clk_init_data {
  const char* name;
  const struct clk_ops* ops;
  const char* const* parent_names;
  const struct clk_parent_data* parent_data;
  const struct clk_hw** parent_hws;
  u8 num_parents;
  long unsigned int flags;
};

enum format_type {
  FORMAT_TYPE_NONE = 0,
  FORMAT_TYPE_WIDTH = 1,
  FORMAT_TYPE_PRECISION = 2,
  FORMAT_TYPE_CHAR = 3,
  FORMAT_TYPE_STR = 4,
  FORMAT_TYPE_PTR = 5,
  FORMAT_TYPE_PERCENT_CHAR = 6,
  FORMAT_TYPE_INVALID = 7,
  FORMAT_TYPE_LONG_LONG = 8,
  FORMAT_TYPE_ULONG = 9,
  FORMAT_TYPE_LONG = 10,
  FORMAT_TYPE_UBYTE = 11,
  FORMAT_TYPE_BYTE = 12,
  FORMAT_TYPE_USHORT = 13,
  FORMAT_TYPE_SHORT = 14,
  FORMAT_TYPE_UINT = 15,
  FORMAT_TYPE_INT = 16,
  FORMAT_TYPE_SIZE_T = 17,
  FORMAT_TYPE_PTRDIFF = 18,
};

struct printf_spec {
  unsigned int type : 8;
  int field_width : 24;
  unsigned int flags : 8;
  unsigned int base : 8;
  int precision : 16;
};

struct minmax_sample {
  u32 t;
  u32 v;
};

struct minmax {
  struct minmax_sample s[3];
};

enum {
  st_wordstart = 0,
  st_wordcmp = 1,
  st_wordskip = 2,
  st_bufcpy = 3,
};

enum {
  st_wordstart___2 = 0,
  st_wordcmp___2 = 1,
  st_wordskip___2 = 2,
};

struct in6_addr___2;

enum reg_type {
  REG_TYPE_RM = 0,
  REG_TYPE_REG = 1,
  REG_TYPE_INDEX = 2,
  REG_TYPE_BASE = 3,
};

enum {
  pci_channel_io_normal = 1,
  pci_channel_io_frozen = 2,
  pci_channel_io_perm_failure = 3,
};

struct pci_sriov {
  int pos;
  int nres;
  u32 cap;
  u16 ctrl;
  u16 total_VFs;
  u16 initial_VFs;
  u16 num_VFs;
  u16 offset;
  u16 stride;
  u16 vf_device;
  u32 pgsz;
  u8 link;
  u8 max_VF_buses;
  u16 driver_max_VFs;
  struct pci_dev* dev;
  struct pci_dev* self;
  u32 class;
  u8 hdr_type;
  u16 subsystem_vendor;
  u16 subsystem_device;
  resource_size_t barsz[6];
  bool drivers_autoprobe;
};

struct rcec_ea {
  u8 nextbusn;
  u8 lastbusn;
  u32 bitmap;
};

struct pci_bus_resource {
  struct list_head list;
  struct resource* res;
  unsigned int flags;
};

typedef u64 pci_bus_addr_t;

struct pci_bus_region {
  pci_bus_addr_t start;
  pci_bus_addr_t end;
};

enum pci_fixup_pass {
  pci_fixup_early = 0,
  pci_fixup_header = 1,
  pci_fixup_final = 2,
  pci_fixup_enable = 3,
  pci_fixup_resume = 4,
  pci_fixup_suspend = 5,
  pci_fixup_resume_early = 6,
  pci_fixup_suspend_late = 7,
};

struct hotplug_slot_ops;

struct hotplug_slot {
  const struct hotplug_slot_ops* ops;
  struct list_head slot_list;
  struct pci_slot* pci_slot;
  struct module* owner;
  const char* mod_name;
};

enum pci_dev_flags {
  PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = 1,
  PCI_DEV_FLAGS_NO_D3 = 2,
  PCI_DEV_FLAGS_ASSIGNED = 4,
  PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = 8,
  PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS = 32,
  PCI_DEV_FLAGS_NO_BUS_RESET = 64,
  PCI_DEV_FLAGS_NO_PM_RESET = 128,
  PCI_DEV_FLAGS_VPD_REF_F0 = 256,
  PCI_DEV_FLAGS_BRIDGE_XLATE_ROOT = 512,
  PCI_DEV_FLAGS_NO_FLR_RESET = 1024,
  PCI_DEV_FLAGS_NO_RELAXED_ORDERING = 2048,
};

enum pci_bus_flags {
  PCI_BUS_FLAGS_NO_MSI = 1,
  PCI_BUS_FLAGS_NO_MMRBC = 2,
  PCI_BUS_FLAGS_NO_AERSID = 4,
  PCI_BUS_FLAGS_NO_EXTCFG = 8,
};

enum pci_bus_speed {
  PCI_SPEED_33MHz = 0,
  PCI_SPEED_66MHz = 1,
  PCI_SPEED_66MHz_PCIX = 2,
  PCI_SPEED_100MHz_PCIX = 3,
  PCI_SPEED_133MHz_PCIX = 4,
  PCI_SPEED_66MHz_PCIX_ECC = 5,
  PCI_SPEED_100MHz_PCIX_ECC = 6,
  PCI_SPEED_133MHz_PCIX_ECC = 7,
  PCI_SPEED_66MHz_PCIX_266 = 9,
  PCI_SPEED_100MHz_PCIX_266 = 10,
  PCI_SPEED_133MHz_PCIX_266 = 11,
  AGP_UNKNOWN = 12,
  AGP_1X = 13,
  AGP_2X = 14,
  AGP_4X = 15,
  AGP_8X = 16,
  PCI_SPEED_66MHz_PCIX_533 = 17,
  PCI_SPEED_100MHz_PCIX_533 = 18,
  PCI_SPEED_133MHz_PCIX_533 = 19,
  PCIE_SPEED_2_5GT = 20,
  PCIE_SPEED_5_0GT = 21,
  PCIE_SPEED_8_0GT = 22,
  PCIE_SPEED_16_0GT = 23,
  PCIE_SPEED_32_0GT = 24,
  PCIE_SPEED_64_0GT = 25,
  PCI_SPEED_UNKNOWN = 255,
};

struct pci_host_bridge {
  struct device dev;
  struct pci_bus* bus;
  struct pci_ops* ops;
  struct pci_ops* child_ops;
  void* sysdata;
  int busnr;
  struct list_head windows;
  struct list_head dma_ranges;
  u8 (*swizzle_irq)(struct pci_dev*, u8*);
  int (*map_irq)(const struct pci_dev*, u8, u8);
  void (*release_fn)(struct pci_host_bridge*);
  void* release_data;
  struct msi_controller* msi;
  unsigned int ignore_reset_delay : 1;
  unsigned int no_ext_tags : 1;
  unsigned int native_aer : 1;
  unsigned int native_pcie_hotplug : 1;
  unsigned int native_shpc_hotplug : 1;
  unsigned int native_pme : 1;
  unsigned int native_ltr : 1;
  unsigned int native_dpc : 1;
  unsigned int preserve_config : 1;
  unsigned int size_windows : 1;
  resource_size_t (*align_resource)(
      struct pci_dev*,
      const struct resource*,
      resource_size_t,
      resource_size_t,
      resource_size_t);
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long unsigned int private[0];
};

enum {
  PCI_REASSIGN_ALL_RSRC = 1,
  PCI_REASSIGN_ALL_BUS = 2,
  PCI_PROBE_ONLY = 4,
  PCI_CAN_SKIP_ISA_ALIGN = 8,
  PCI_ENABLE_PROC_DOMAINS = 16,
  PCI_COMPAT_DOMAIN_0 = 32,
  PCI_SCAN_ALL_PCIE_DEVS = 64,
};

struct acpi_device_status {
  u32 present : 1;
  u32 enabled : 1;
  u32 show_in_ui : 1;
  u32 functional : 1;
  u32 battery_present : 1;
  u32 reserved : 27;
};

struct acpi_device_flags {
  u32 dynamic_status : 1;
  u32 removable : 1;
  u32 ejectable : 1;
  u32 power_manageable : 1;
  u32 match_driver : 1;
  u32 initialized : 1;
  u32 visited : 1;
  u32 hotplug_notify : 1;
  u32 is_dock_station : 1;
  u32 of_compatible_ok : 1;
  u32 coherent_dma : 1;
  u32 cca_seen : 1;
  u32 enumeration_by_parent : 1;
  u32 reserved : 19;
};

typedef char acpi_bus_id[8];

struct acpi_pnp_type {
  u32 hardware_id : 1;
  u32 bus_address : 1;
  u32 platform_id : 1;
  u32 reserved : 29;
};

typedef u64 acpi_bus_address;

typedef char acpi_device_name[40];

typedef char acpi_device_class[20];

union acpi_object;

struct acpi_device_pnp {
  acpi_bus_id bus_id;
  int instance_no;
  struct acpi_pnp_type type;
  acpi_bus_address bus_address;
  char* unique_id;
  struct list_head ids;
  acpi_device_name device_name;
  acpi_device_class device_class;
  union acpi_object* str_obj;
};

struct acpi_device_power_flags {
  u32 explicit_get : 1;
  u32 power_resources : 1;
  u32 inrush_current : 1;
  u32 power_removed : 1;
  u32 ignore_parent : 1;
  u32 dsw_present : 1;
  u32 reserved : 26;
};

struct acpi_device_power_state {
  struct {
    u8 valid : 1;
    u8 explicit_set : 1;
    u8 reserved : 6;
  } flags;
  int power;
  int latency;
  struct list_head resources;
};

struct acpi_device_power {
  int state;
  struct acpi_device_power_flags flags;
  struct acpi_device_power_state states[5];
};

struct acpi_device_wakeup_flags {
  u8 valid : 1;
  u8 notifier_present : 1;
};

struct acpi_device_wakeup_context {
  void (*func)(struct acpi_device_wakeup_context*);
  struct device* dev;
};

struct acpi_device_wakeup {
  acpi_handle gpe_device;
  u64 gpe_number;
  u64 sleep_state;
  struct list_head resources;
  struct acpi_device_wakeup_flags flags;
  struct acpi_device_wakeup_context context;
  struct wakeup_source* ws;
  int prepare_count;
  int enable_count;
};

struct acpi_device_perf_flags {
  u8 reserved : 8;
};

struct acpi_device_perf_state;

struct acpi_device_perf {
  int state;
  struct acpi_device_perf_flags flags;
  int state_count;
  struct acpi_device_perf_state* states;
};

struct acpi_device_dir {
  struct proc_dir_entry* entry;
};

struct acpi_device_data {
  const union acpi_object* pointer;
  struct list_head properties;
  const union acpi_object* of_compatible;
  struct list_head subnodes;
};

struct acpi_scan_handler;

struct acpi_hotplug_context;

struct acpi_driver;

struct acpi_gpio_mapping;

struct acpi_device {
  int device_type;
  acpi_handle handle;
  struct fwnode_handle fwnode;
  struct acpi_device* parent;
  struct list_head children;
  struct list_head node;
  struct list_head wakeup_list;
  struct list_head del_list;
  struct acpi_device_status status;
  struct acpi_device_flags flags;
  struct acpi_device_pnp pnp;
  struct acpi_device_power power;
  struct acpi_device_wakeup wakeup;
  struct acpi_device_perf performance;
  struct acpi_device_dir dir;
  struct acpi_device_data data;
  struct acpi_scan_handler* handler;
  struct acpi_hotplug_context* hp;
  struct acpi_driver* driver;
  const struct acpi_gpio_mapping* driver_gpios;
  void* driver_data;
  struct device dev;
  unsigned int physical_node_count;
  unsigned int dep_unmet;
  struct list_head physical_node_list;
  struct mutex physical_node_lock;
  void (*remove)(struct acpi_device*);
};

struct hotplug_slot_ops {
  int (*enable_slot)(struct hotplug_slot*);
  int (*disable_slot)(struct hotplug_slot*);
  int (*set_attention_status)(struct hotplug_slot*, u8);
  int (*hardware_test)(struct hotplug_slot*, u32);
  int (*get_power_status)(struct hotplug_slot*, u8*);
  int (*get_attention_status)(struct hotplug_slot*, u8*);
  int (*get_latch_status)(struct hotplug_slot*, u8*);
  int (*get_adapter_status)(struct hotplug_slot*, u8*);
  int (*reset_slot)(struct hotplug_slot*, int);
};

typedef u64 acpi_io_address;

typedef u32 acpi_object_type;

union acpi_object {
  acpi_object_type type;
  struct {
    acpi_object_type type;
    u64 value;
  } integer;
  struct {
    acpi_object_type type;
    u32 length;
    char* pointer;
  } string;
  struct {
    acpi_object_type type;
    u32 length;
    u8* pointer;
  } buffer;
  struct {
    acpi_object_type type;
    u32 count;
    union acpi_object* elements;
  } package;
  struct {
    acpi_object_type type;
    acpi_object_type actual_type;
    acpi_handle handle;
  } reference;
  struct {
    acpi_object_type type;
    u32 proc_id;
    acpi_io_address pblk_address;
    u32 pblk_length;
  } processor;
  struct {
    acpi_object_type type;
    u32 system_level;
    u32 resource_order;
  } power_resource;
};

struct acpi_hotplug_profile {
  struct kobject kobj;
  int (*scan_dependent)(struct acpi_device*);
  void (*notify_online)(struct acpi_device*);
  bool enabled : 1;
  bool demand_offline : 1;
};

struct acpi_scan_handler {
  const struct acpi_device_id* ids;
  struct list_head list_node;
  bool (*match)(const char*, const struct acpi_device_id**);
  int (*attach)(struct acpi_device*, const struct acpi_device_id*);
  void (*detach)(struct acpi_device*);
  void (*bind)(struct device*);
  void (*unbind)(struct device*);
  struct acpi_hotplug_profile hotplug;
};

struct acpi_hotplug_context {
  struct acpi_device* self;
  int (*notify)(struct acpi_device*, u32);
  void (*uevent)(struct acpi_device*, u32);
  void (*fixup)(struct acpi_device*);
};

typedef int (*acpi_op_add)(struct acpi_device*);

typedef int (*acpi_op_remove)(struct acpi_device*);

typedef void (*acpi_op_notify)(struct acpi_device*, u32);

struct acpi_device_ops {
  acpi_op_add add;
  acpi_op_remove remove;
  acpi_op_notify notify;
};

struct acpi_driver {
  char name[80];
  char class[80];
  const struct acpi_device_id* ids;
  unsigned int flags;
  struct acpi_device_ops ops;
  struct device_driver drv;
  struct module* owner;
};

struct acpi_device_perf_state {
  struct {
    u8 valid : 1;
    u8 reserved : 7;
  } flags;
  u8 power;
  u8 performance;
  int latency;
};

struct acpi_gpio_params;

struct acpi_gpio_mapping {
  const char* name;
  const struct acpi_gpio_params* data;
  unsigned int size;
  unsigned int quirks;
};

enum pci_bar_type {
  pci_bar_unknown = 0,
  pci_bar_io = 1,
  pci_bar_mem32 = 2,
  pci_bar_mem64 = 3,
};

struct pci_domain_busn_res {
  struct list_head list;
  struct resource res;
  int domain_nr;
};

struct bus_attribute {
  struct attribute attr;
  ssize_t (*show)(struct bus_type*, char*);
  ssize_t (*store)(struct bus_type*, const char*, size_t);
};

enum pcie_reset_state {
  pcie_deassert_reset = 1,
  pcie_warm_reset = 2,
  pcie_hot_reset = 3,
};

enum pcie_link_width {
  PCIE_LNK_WIDTH_RESRV = 0,
  PCIE_LNK_X1 = 1,
  PCIE_LNK_X2 = 2,
  PCIE_LNK_X4 = 4,
  PCIE_LNK_X8 = 8,
  PCIE_LNK_X12 = 12,
  PCIE_LNK_X16 = 16,
  PCIE_LNK_X32 = 32,
  PCIE_LNK_WIDTH_UNKNOWN = 255,
};

struct pci_cap_saved_data {
  u16 cap_nr;
  bool cap_extended;
  unsigned int size;
  u32 data[0];
};

struct pci_cap_saved_state {
  struct hlist_node next;
  struct pci_cap_saved_data cap;
};

typedef int (*arch_set_vga_state_t)(struct pci_dev*, bool, unsigned int, u32);

struct pci_platform_pm_ops {
  bool (*bridge_d3)(struct pci_dev*);
  bool (*is_manageable)(struct pci_dev*);
  int (*set_state)(struct pci_dev*, pci_power_t);
  pci_power_t (*get_state)(struct pci_dev*);
  void (*refresh_state)(struct pci_dev*);
  pci_power_t (*choose_state)(struct pci_dev*);
  int (*set_wakeup)(struct pci_dev*, bool);
  bool (*need_resume)(struct pci_dev*);
};

struct pci_pme_device {
  struct list_head list;
  struct pci_dev* dev;
};

struct pci_saved_state {
  u32 config_space[16];
  struct pci_cap_saved_data cap[0];
};

struct pci_devres {
  unsigned int enabled : 1;
  unsigned int pinned : 1;
  unsigned int orig_intx : 1;
  unsigned int restore_intx : 1;
  unsigned int mwi : 1;
  u32 region_mask;
};

struct driver_attribute {
  struct attribute attr;
  ssize_t (*show)(struct device_driver*, char*);
  ssize_t (*store)(struct device_driver*, const char*, size_t);
};

enum pci_ers_result {
  PCI_ERS_RESULT_NONE = 1,
  PCI_ERS_RESULT_CAN_RECOVER = 2,
  PCI_ERS_RESULT_NEED_RESET = 3,
  PCI_ERS_RESULT_DISCONNECT = 4,
  PCI_ERS_RESULT_RECOVERED = 5,
  PCI_ERS_RESULT_NO_AER_DRIVER = 6,
};

enum dev_dma_attr {
  DEV_DMA_NOT_SUPPORTED = 0,
  DEV_DMA_NON_COHERENT = 1,
  DEV_DMA_COHERENT = 2,
};

struct pcie_device {
  int irq;
  struct pci_dev* port;
  u32 service;
  void* priv_data;
  struct device device;
};

struct pcie_port_service_driver {
  const char* name;
  int (*probe)(struct pcie_device*);
  void (*remove)(struct pcie_device*);
  int (*suspend)(struct pcie_device*);
  int (*resume_noirq)(struct pcie_device*);
  int (*resume)(struct pcie_device*);
  int (*runtime_suspend)(struct pcie_device*);
  int (*runtime_resume)(struct pcie_device*);
  void (*error_resume)(struct pci_dev*);
  int port_type;
  u32 service;
  struct device_driver driver;
};

struct pci_dynid {
  struct list_head node;
  struct pci_device_id id;
};

struct drv_dev_and_id {
  struct pci_driver* drv;
  struct pci_dev* dev;
  const struct pci_device_id* id;
};

enum pci_mmap_state {
  pci_mmap_io = 0,
  pci_mmap_mem = 1,
};

enum pci_mmap_api {
  PCI_MMAP_SYSFS = 0,
  PCI_MMAP_PROCFS = 1,
};

struct pci_vpd_ops;

struct pci_vpd {
  const struct pci_vpd_ops* ops;
  struct bin_attribute* attr;
  struct mutex lock;
  unsigned int len;
  u16 flag;
  u8 cap;
  unsigned int busy : 1;
  unsigned int valid : 1;
};

struct pci_vpd_ops {
  ssize_t (*read)(struct pci_dev*, loff_t, size_t, void*);
  ssize_t (*write)(struct pci_dev*, loff_t, size_t, const void*);
  int (*set_size)(struct pci_dev*, size_t);
};

struct pci_dev_resource {
  struct list_head list;
  struct resource* res;
  struct pci_dev* dev;
  resource_size_t start;
  resource_size_t end;
  resource_size_t add_size;
  resource_size_t min_align;
  long unsigned int flags;
};

enum release_type {
  leaf_only = 0,
  whole_subtree = 1,
};

enum enable_type {
  undefined = 4294967295,
  user_disabled = 0,
  auto_disabled = 1,
  user_enabled = 2,
  auto_enabled = 3,
};

struct msix_entry {
  u32 vector;
  u16 entry;
};

struct portdrv_service_data {
  struct pcie_port_service_driver* drv;
  struct device* dev;
  u32 service;
};

struct walk_rcec_data {
  struct pci_dev* rcec;
  int (*user_callback)(struct pci_dev*, void*);
  void* user_data;
};

struct aspm_latency {
  u32 l0s;
  u32 l1;
};

struct pcie_link_state {
  struct pci_dev* pdev;
  struct pci_dev* downstream;
  struct pcie_link_state* root;
  struct pcie_link_state* parent;
  struct list_head sibling;
  u32 aspm_support : 7;
  u32 aspm_enabled : 7;
  u32 aspm_capable : 7;
  u32 aspm_default : 7;
  char : 4;
  u32 aspm_disable : 7;
  u32 clkpm_capable : 1;
  u32 clkpm_enabled : 1;
  u32 clkpm_default : 1;
  u32 clkpm_disable : 1;
  struct aspm_latency latency_up;
  struct aspm_latency latency_dw;
  struct aspm_latency acceptable[8];
};

struct aer_stats {
  u64 dev_cor_errs[16];
  u64 dev_fatal_errs[27];
  u64 dev_nonfatal_errs[27];
  u64 dev_total_cor_errs;
  u64 dev_total_fatal_errs;
  u64 dev_total_nonfatal_errs;
  u64 rootport_total_cor_errs;
  u64 rootport_total_fatal_errs;
  u64 rootport_total_nonfatal_errs;
};

struct aer_header_log_regs {
  unsigned int dw0;
  unsigned int dw1;
  unsigned int dw2;
  unsigned int dw3;
};

struct aer_capability_regs {
  u32 header;
  u32 uncor_status;
  u32 uncor_mask;
  u32 uncor_severity;
  u32 cor_status;
  u32 cor_mask;
  u32 cap_control;
  struct aer_header_log_regs header_log;
  u32 root_command;
  u32 root_status;
  u16 cor_err_source;
  u16 uncor_err_source;
};

struct aer_err_info {
  struct pci_dev* dev[5];
  int error_dev_num;
  unsigned int id : 16;
  unsigned int severity : 2;
  unsigned int __pad1 : 5;
  unsigned int multi_error_valid : 1;
  unsigned int first_error : 5;
  unsigned int __pad2 : 2;
  unsigned int tlp_header_valid : 1;
  unsigned int status;
  unsigned int mask;
  struct aer_header_log_regs tlp;
};

struct aer_err_source {
  unsigned int status;
  unsigned int id;
};

struct aer_rpc {
  struct pci_dev* rpd;
  struct {
    union {
      struct __kfifo kfifo;
      struct aer_err_source* type;
      const struct aer_err_source* const_type;
      char (*rectype)[0];
      struct aer_err_source* ptr;
      const struct aer_err_source* ptr_const;
    };
    struct aer_err_source buf[128];
  } aer_fifo;
};

struct aer_recover_entry {
  u8 bus;
  u8 devfn;
  u16 domain;
  int severity;
  struct aer_capability_regs* regs;
};

struct pci_filp_private {
  enum pci_mmap_state mmap_state;
  int write_combine;
};

struct pci_slot_attribute {
  struct attribute attr;
  ssize_t (*show)(struct pci_slot*, char*);
  ssize_t (*store)(struct pci_slot*, const char*, size_t);
};

typedef u64 acpi_size;

struct acpi_buffer {
  acpi_size length;
  void* pointer;
};

struct acpi_bus_type {
  struct list_head list;
  const char* name;
  bool (*match)(struct device*);
  struct acpi_device* (*find_companion)(struct device*);
  void (*setup)(struct device*);
  void (*cleanup)(struct device*);
};

struct acpi_pci_root {
  struct acpi_device* device;
  struct pci_bus* bus;
  u16 segment;
  struct resource secondary;
  u32 osc_support_set;
  u32 osc_control_set;
  phys_addr_t mcfg_addr;
};

enum pm_qos_flags_status {
  PM_QOS_FLAGS_UNDEFINED = 4294967295,
  PM_QOS_FLAGS_NONE = 0,
  PM_QOS_FLAGS_SOME = 1,
  PM_QOS_FLAGS_ALL = 2,
};

struct hpx_type0 {
  u32 revision;
  u8 cache_line_size;
  u8 latency_timer;
  u8 enable_serr;
  u8 enable_perr;
};

struct hpx_type1 {
  u32 revision;
  u8 max_mem_read;
  u8 avg_max_split;
  u16 tot_max_split;
};

struct hpx_type2 {
  u32 revision;
  u32 unc_err_mask_and;
  u32 unc_err_mask_or;
  u32 unc_err_sever_and;
  u32 unc_err_sever_or;
  u32 cor_err_mask_and;
  u32 cor_err_mask_or;
  u32 adv_err_cap_and;
  u32 adv_err_cap_or;
  u16 pci_exp_devctl_and;
  u16 pci_exp_devctl_or;
  u16 pci_exp_lnkctl_and;
  u16 pci_exp_lnkctl_or;
  u32 sec_unc_err_sever_and;
  u32 sec_unc_err_sever_or;
  u32 sec_unc_err_mask_and;
  u32 sec_unc_err_mask_or;
};

struct hpx_type3 {
  u16 device_type;
  u16 function_type;
  u16 config_space_location;
  u16 pci_exp_cap_id;
  u16 pci_exp_cap_ver;
  u16 pci_exp_vendor_id;
  u16 dvsec_id;
  u16 dvsec_rev;
  u16 match_offset;
  u32 match_mask_and;
  u32 match_value;
  u16 reg_offset;
  u32 reg_mask_and;
  u32 reg_mask_or;
};

enum hpx_type3_dev_type {
  HPX_TYPE_ENDPOINT = 1,
  HPX_TYPE_LEG_END = 2,
  HPX_TYPE_RC_END = 4,
  HPX_TYPE_RC_EC = 8,
  HPX_TYPE_ROOT_PORT = 16,
  HPX_TYPE_UPSTREAM = 32,
  HPX_TYPE_DOWNSTREAM = 64,
  HPX_TYPE_PCI_BRIDGE = 128,
  HPX_TYPE_PCIE_BRIDGE = 256,
};

enum hpx_type3_fn_type {
  HPX_FN_NORMAL = 1,
  HPX_FN_SRIOV_PHYS = 2,
  HPX_FN_SRIOV_VIRT = 4,
};

enum hpx_type3_cfg_loc {
  HPX_CFG_PCICFG = 0,
  HPX_CFG_PCIE_CAP = 1,
  HPX_CFG_PCIE_CAP_EXT = 2,
  HPX_CFG_VEND_CAP = 3,
  HPX_CFG_DVSEC = 4,
  HPX_CFG_MAX = 5,
};

enum pci_irq_reroute_variant {
  INTEL_IRQ_REROUTE_VARIANT = 1,
  MAX_IRQ_REROUTE_VARIANTS = 3,
};

struct pci_fixup {
  u16 vendor;
  u16 device;
  u32 class;
  unsigned int class_shift;
  int hook_offset;
};

enum {
  NVME_REG_CAP = 0,
  NVME_REG_VS = 8,
  NVME_REG_INTMS = 12,
  NVME_REG_INTMC = 16,
  NVME_REG_CC = 20,
  NVME_REG_CSTS = 28,
  NVME_REG_NSSR = 32,
  NVME_REG_AQA = 36,
  NVME_REG_ASQ = 40,
  NVME_REG_ACQ = 48,
  NVME_REG_CMBLOC = 56,
  NVME_REG_CMBSZ = 60,
  NVME_REG_BPINFO = 64,
  NVME_REG_BPRSEL = 68,
  NVME_REG_BPMBL = 72,
  NVME_REG_CMBMSC = 80,
  NVME_REG_PMRCAP = 3584,
  NVME_REG_PMRCTL = 3588,
  NVME_REG_PMRSTS = 3592,
  NVME_REG_PMREBS = 3596,
  NVME_REG_PMRSWTP = 3600,
  NVME_REG_DBS = 4096,
};

enum {
  NVME_CC_ENABLE = 1,
  NVME_CC_EN_SHIFT = 0,
  NVME_CC_CSS_SHIFT = 4,
  NVME_CC_MPS_SHIFT = 7,
  NVME_CC_AMS_SHIFT = 11,
  NVME_CC_SHN_SHIFT = 14,
  NVME_CC_IOSQES_SHIFT = 16,
  NVME_CC_IOCQES_SHIFT = 20,
  NVME_CC_CSS_NVM = 0,
  NVME_CC_CSS_CSI = 96,
  NVME_CC_CSS_MASK = 112,
  NVME_CC_AMS_RR = 0,
  NVME_CC_AMS_WRRU = 2048,
  NVME_CC_AMS_VS = 14336,
  NVME_CC_SHN_NONE = 0,
  NVME_CC_SHN_NORMAL = 16384,
  NVME_CC_SHN_ABRUPT = 32768,
  NVME_CC_SHN_MASK = 49152,
  NVME_CC_IOSQES = 393216,
  NVME_CC_IOCQES = 4194304,
  NVME_CAP_CSS_NVM = 1,
  NVME_CAP_CSS_CSI = 64,
  NVME_CSTS_RDY = 1,
  NVME_CSTS_CFS = 2,
  NVME_CSTS_NSSRO = 16,
  NVME_CSTS_PP = 32,
  NVME_CSTS_SHST_NORMAL = 0,
  NVME_CSTS_SHST_OCCUR = 4,
  NVME_CSTS_SHST_CMPLT = 8,
  NVME_CSTS_SHST_MASK = 12,
  NVME_CMBMSC_CRE = 1,
  NVME_CMBMSC_CMSE = 2,
};

enum {
  NVME_AEN_BIT_NS_ATTR = 8,
  NVME_AEN_BIT_FW_ACT = 9,
  NVME_AEN_BIT_ANA_CHANGE = 11,
  NVME_AEN_BIT_DISC_CHANGE = 31,
};

enum {
  SWITCHTEC_GAS_MRPC_OFFSET = 0,
  SWITCHTEC_GAS_TOP_CFG_OFFSET = 4096,
  SWITCHTEC_GAS_SW_EVENT_OFFSET = 6144,
  SWITCHTEC_GAS_SYS_INFO_OFFSET = 8192,
  SWITCHTEC_GAS_FLASH_INFO_OFFSET = 8704,
  SWITCHTEC_GAS_PART_CFG_OFFSET = 16384,
  SWITCHTEC_GAS_NTB_OFFSET = 65536,
  SWITCHTEC_GAS_PFF_CSR_OFFSET = 1261568,
};

enum {
  SWITCHTEC_NTB_REG_INFO_OFFSET = 0,
  SWITCHTEC_NTB_REG_CTRL_OFFSET = 16384,
  SWITCHTEC_NTB_REG_DBMSG_OFFSET = 409600,
};

struct nt_partition_info {
  u32 xlink_enabled;
  u32 target_part_low;
  u32 target_part_high;
  u32 reserved;
};

struct ntb_info_regs {
  u8 partition_count;
  u8 partition_id;
  u16 reserved1;
  u64 ep_map;
  u16 requester_id;
  u16 reserved2;
  u32 reserved3[4];
  struct nt_partition_info ntp_info[48];
} __attribute__((packed));

struct ntb_ctrl_regs {
  u32 partition_status;
  u32 partition_op;
  u32 partition_ctrl;
  u32 bar_setup;
  u32 bar_error;
  u16 lut_table_entries;
  u16 lut_table_offset;
  u32 lut_error;
  u16 req_id_table_size;
  u16 req_id_table_offset;
  u32 req_id_error;
  u32 reserved1[7];
  struct {
    u32 ctl;
    u32 win_size;
    u64 xlate_addr;
  } bar_entry[6];
  struct {
    u32 win_size;
    u32 reserved[3];
  } bar_ext_entry[6];
  u32 reserved2[192];
  u32 req_id_table[512];
  u32 reserved3[256];
  u64 lut_entry[512];
};

struct pci_dev_reset_methods {
  u16 vendor;
  u16 device;
  int (*reset)(struct pci_dev*, int);
};

struct pci_dev_acs_enabled {
  u16 vendor;
  u16 device;
  int (*acs_enabled)(struct pci_dev*, u16);
};

struct pci_dev_acs_ops {
  u16 vendor;
  u16 device;
  int (*enable_acs)(struct pci_dev*);
  int (*disable_acs_redir)(struct pci_dev*);
};

struct controller {
  struct pcie_device* pcie;
  u32 slot_cap;
  unsigned int inband_presence_disabled : 1;
  u16 slot_ctrl;
  struct mutex ctrl_lock;
  long unsigned int cmd_started;
  unsigned int cmd_busy : 1;
  wait_queue_head_t queue;
  atomic_t pending_events;
  unsigned int notification_enabled : 1;
  unsigned int power_fault_detected;
  struct task_struct* poll_thread;
  u8 state;
  struct mutex state_lock;
  struct delayed_work button_work;
  struct hotplug_slot hotplug_slot;
  struct rw_semaphore reset_lock;
  unsigned int ist_running;
  int request_result;
  wait_queue_head_t requester;
};

enum dmi_device_type {
  DMI_DEV_TYPE_ANY = 0,
  DMI_DEV_TYPE_OTHER = 1,
  DMI_DEV_TYPE_UNKNOWN = 2,
  DMI_DEV_TYPE_VIDEO = 3,
  DMI_DEV_TYPE_SCSI = 4,
  DMI_DEV_TYPE_ETHERNET = 5,
  DMI_DEV_TYPE_TOKENRING = 6,
  DMI_DEV_TYPE_SOUND = 7,
  DMI_DEV_TYPE_PATA = 8,
  DMI_DEV_TYPE_SATA = 9,
  DMI_DEV_TYPE_SAS = 10,
  DMI_DEV_TYPE_IPMI = 4294967295,
  DMI_DEV_TYPE_OEM_STRING = 4294967294,
  DMI_DEV_TYPE_DEV_ONBOARD = 4294967293,
  DMI_DEV_TYPE_DEV_SLOT = 4294967292,
};

struct dmi_device {
  struct list_head list;
  int type;
  const char* name;
  void* device_data;
};

struct dmi_dev_onboard {
  struct dmi_device dev;
  int instance;
  int segment;
  int bus;
  int devfn;
};

enum smbios_attr_enum {
  SMBIOS_ATTR_NONE = 0,
  SMBIOS_ATTR_LABEL_SHOW = 1,
  SMBIOS_ATTR_INSTANCE_SHOW = 2,
};

enum acpi_attr_enum {
  ACPI_ATTR_LABEL_SHOW = 0,
  ACPI_ATTR_INDEX_SHOW = 1,
};

struct vgastate {
  void* vgabase;
  long unsigned int membase;
  __u32 memsize;
  __u32 flags;
  __u32 depth;
  __u32 num_attr;
  __u32 num_crtc;
  __u32 num_gfx;
  __u32 num_seq;
  void* vidstate;
};

struct idle_cpu {
  struct cpuidle_state* state_table;
  long unsigned int auto_demotion_disable_flags;
  bool byt_auto_demotion_disable_flag;
  bool disable_promotion_to_c1e;
  bool use_acpi;
};

enum ipmi_addr_src {
  SI_INVALID = 0,
  SI_HOTMOD = 1,
  SI_HARDCODED = 2,
  SI_SPMI = 3,
  SI_ACPI = 4,
  SI_SMBIOS = 5,
  SI_PCI = 6,
  SI_DEVICETREE = 7,
  SI_PLATFORM = 8,
  SI_LAST = 9,
};

struct dmi_header {
  u8 type;
  u8 length;
  u16 handle;
};

enum si_type {
  SI_TYPE_INVALID = 0,
  SI_KCS = 1,
  SI_SMIC = 2,
  SI_BT = 3,
};

enum ipmi_addr_space {
  IPMI_IO_ADDR_SPACE = 0,
  IPMI_MEM_ADDR_SPACE = 1,
};

enum ipmi_plat_interface_type {
  IPMI_PLAT_IF_SI = 0,
  IPMI_PLAT_IF_SSIF = 1,
};

struct ipmi_plat_data {
  enum ipmi_plat_interface_type iftype;
  unsigned int type;
  unsigned int space;
  long unsigned int addr;
  unsigned int regspacing;
  unsigned int regsize;
  unsigned int regshift;
  unsigned int irq;
  unsigned int slave_addr;
  enum ipmi_addr_src addr_source;
};

struct ipmi_dmi_info {
  enum si_type si_type;
  unsigned int space;
  long unsigned int addr;
  u8 slave_addr;
  struct ipmi_dmi_info* next;
};

typedef u16 acpi_owner_id;

union acpi_name_union {
  u32 integer;
  char ascii[4];
};

struct acpi_table_desc {
  acpi_physical_address address;
  struct acpi_table_header* pointer;
  u32 length;
  union acpi_name_union signature;
  acpi_owner_id owner_id;
  u8 flags;
  u16 validation_count;
};

struct acpi_madt_io_sapic {
  struct acpi_subtable_header header;
  u8 id;
  u8 reserved;
  u32 global_irq_base;
  u64 address;
};

struct acpi_madt_interrupt_source {
  struct acpi_subtable_header header;
  u16 inti_flags;
  u8 type;
  u8 id;
  u8 eid;
  u8 io_sapic_vector;
  u32 global_irq;
  u32 flags;
};

struct acpi_madt_generic_interrupt {
  struct acpi_subtable_header header;
  u16 reserved;
  u32 cpu_interface_number;
  u32 uid;
  u32 flags;
  u32 parking_version;
  u32 performance_interrupt;
  u64 parked_address;
  u64 base_address;
  u64 gicv_base_address;
  u64 gich_base_address;
  u32 vgic_interrupt;
  u64 gicr_base_address;
  u64 arm_mpidr;
  u8 efficiency_class;
  u8 reserved2[1];
  u16 spe_interrupt;
} __attribute__((packed));

struct acpi_madt_generic_distributor {
  struct acpi_subtable_header header;
  u16 reserved;
  u32 gic_id;
  u64 base_address;
  u32 global_irq_base;
  u8 version;
  u8 reserved2[3];
};

typedef int (*acpi_tbl_table_handler)(struct acpi_table_header*);

struct transaction;

struct acpi_ec {
  acpi_handle handle;
  int gpe;
  int irq;
  long unsigned int command_addr;
  long unsigned int data_addr;
  bool global_lock;
  long unsigned int flags;
  long unsigned int reference_count;
  struct mutex mutex;
  wait_queue_head_t wait;
  struct list_head list;
  struct transaction* curr;
  spinlock_t lock;
  struct work_struct work;
  long unsigned int timestamp;
  long unsigned int nr_pending_queries;
  bool busy_polling;
  unsigned int polling_guard;
};

enum acpi_subtable_type {
  ACPI_SUBTABLE_COMMON = 0,
  ACPI_SUBTABLE_HMAT = 1,
};

struct acpi_subtable_entry {
  union acpi_subtable_headers* hdr;
  enum acpi_subtable_type type;
};

enum acpi_predicate {
  all_versions = 0,
  less_than_or_equal = 1,
  equal = 2,
  greater_than_or_equal = 3,
};

struct acpi_platform_list {
  char oem_id[7];
  char oem_table_id[9];
  u32 oem_revision;
  char* table;
  enum acpi_predicate pred;
  char* reason;
  u32 data;
};

typedef char* acpi_string;

struct acpi_osi_entry {
  char string[64];
  bool enable;
};

struct acpi_osi_config {
  u8 default_disabling;
  unsigned int linux_enable : 1;
  unsigned int linux_dmi : 1;
  unsigned int linux_cmdline : 1;
  unsigned int darwin_enable : 1;
  unsigned int darwin_dmi : 1;
  unsigned int darwin_cmdline : 1;
};

typedef u32 acpi_name;

struct acpi_predefined_names {
  const char* name;
  u8 type;
  char* val;
};

typedef u32 (*acpi_osd_handler)(void*);

typedef void (*acpi_osd_exec_callback)(void*);

typedef u32 (*acpi_sci_handler)(void*);

typedef void (*acpi_gbl_event_handler)(u32, acpi_handle, u32, void*);

typedef u32 (*acpi_event_handler)(void*);

typedef u32 (*acpi_gpe_handler)(acpi_handle, u32, void*);

typedef void (*acpi_notify_handler)(acpi_handle, u32, void*);

typedef void (*acpi_object_handler)(acpi_handle, void*);

typedef acpi_status (*acpi_init_handler)(acpi_handle, u32);

typedef acpi_status (
    *acpi_exception_handler)(acpi_status, acpi_name, u16, u32, void*);

typedef acpi_status (*acpi_table_handler)(u32, void*, void*);

typedef acpi_status (*acpi_adr_space_handler)(
    u32,
    acpi_physical_address,
    u32,
    u64*,
    void*,
    void*);

typedef acpi_status (*acpi_adr_space_setup)(acpi_handle, u32, void*, void**);

typedef u32 (*acpi_interface_handler)(acpi_string, u32);

struct acpi_pci_id {
  u16 segment;
  u16 bus;
  u16 device;
  u16 function;
};

struct acpi_mem_mapping {
  acpi_physical_address physical_address;
  u8* logical_address;
  acpi_size length;
  struct acpi_mem_mapping* next_mm;
};

struct acpi_mem_space_context {
  u32 length;
  acpi_physical_address address;
  struct acpi_mem_mapping* cur_mm;
  struct acpi_mem_mapping* first_mm;
};

struct acpi_table_facs {
  char signature[4];
  u32 length;
  u32 hardware_signature;
  u32 firmware_waking_vector;
  u32 global_lock;
  u32 flags;
  u64 xfirmware_waking_vector;
  u8 version;
  u8 reserved[3];
  u32 ospm_flags;
  u8 reserved1[24];
};

typedef enum {
  OSL_GLOBAL_LOCK_HANDLER = 0,
  OSL_NOTIFY_HANDLER = 1,
  OSL_GPE_HANDLER = 2,
  OSL_DEBUGGER_MAIN_THREAD = 3,
  OSL_DEBUGGER_EXEC_THREAD = 4,
  OSL_EC_POLL_HANDLER = 5,
  OSL_EC_BURST_HANDLER = 6,
} acpi_execute_type;

struct acpi_gpio_params {
  unsigned int crs_entry_index;
  unsigned int line_index;
  bool active_low;
};

struct acpi_rw_lock {
  void* writer_mutex;
  void* reader_mutex;
  u32 num_readers;
};

struct acpi_mutex_info {
  void* mutex;
  u32 use_count;
  u64 thread_id;
};

union acpi_operand_object;

struct acpi_namespace_node {
  union acpi_operand_object* object;
  u8 descriptor_type;
  u8 type;
  u16 flags;
  union acpi_name_union name;
  struct acpi_namespace_node* parent;
  struct acpi_namespace_node* child;
  struct acpi_namespace_node* peer;
  acpi_owner_id owner_id;
};

struct acpi_object_common {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
};

struct acpi_object_integer {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 fill[3];
  u64 value;
};

struct acpi_object_string {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  char* pointer;
  u32 length;
};

struct acpi_object_buffer {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8* pointer;
  u32 length;
  u32 aml_length;
  u8* aml_start;
  struct acpi_namespace_node* node;
};

struct acpi_object_package {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  struct acpi_namespace_node* node;
  union acpi_operand_object** elements;
  u8* aml_start;
  u32 aml_length;
  u32 count;
};

struct acpi_object_event {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  void* os_semaphore;
};

struct acpi_walk_state;

typedef acpi_status (*acpi_internal_method)(struct acpi_walk_state*);

struct acpi_object_method {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 info_flags;
  u8 param_count;
  u8 sync_level;
  union acpi_operand_object* mutex;
  union acpi_operand_object* node;
  u8* aml_start;
  union {
    acpi_internal_method implementation;
    union acpi_operand_object* handler;
  } dispatch;
  u32 aml_length;
  acpi_owner_id owner_id;
  u8 thread_count;
};

struct acpi_thread_state;

struct acpi_object_mutex {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 sync_level;
  u16 acquisition_depth;
  void* os_mutex;
  u64 thread_id;
  struct acpi_thread_state* owner_thread;
  union acpi_operand_object* prev;
  union acpi_operand_object* next;
  struct acpi_namespace_node* node;
  u8 original_sync_level;
};

struct acpi_object_region {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 space_id;
  struct acpi_namespace_node* node;
  union acpi_operand_object* handler;
  union acpi_operand_object* next;
  acpi_physical_address address;
  u32 length;
};

struct acpi_object_notify_common {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  union acpi_operand_object* notify_list[2];
  union acpi_operand_object* handler;
};

struct acpi_gpe_block_info;

struct acpi_object_device {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  union acpi_operand_object* notify_list[2];
  union acpi_operand_object* handler;
  struct acpi_gpe_block_info* gpe_block;
};

struct acpi_object_power_resource {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  union acpi_operand_object* notify_list[2];
  union acpi_operand_object* handler;
  u32 system_level;
  u32 resource_order;
};

struct acpi_object_processor {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 proc_id;
  u8 length;
  union acpi_operand_object* notify_list[2];
  union acpi_operand_object* handler;
  acpi_io_address address;
};

struct acpi_object_thermal_zone {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  union acpi_operand_object* notify_list[2];
  union acpi_operand_object* handler;
};

struct acpi_object_field_common {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 field_flags;
  u8 attribute;
  u8 access_byte_width;
  struct acpi_namespace_node* node;
  u32 bit_length;
  u32 base_byte_offset;
  u32 value;
  u8 start_field_bit_offset;
  u8 access_length;
  union acpi_operand_object* region_obj;
};

struct acpi_object_region_field {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 field_flags;
  u8 attribute;
  u8 access_byte_width;
  struct acpi_namespace_node* node;
  u32 bit_length;
  u32 base_byte_offset;
  u32 value;
  u8 start_field_bit_offset;
  u8 access_length;
  u16 resource_length;
  union acpi_operand_object* region_obj;
  u8* resource_buffer;
  u16 pin_number_index;
  u8* internal_pcc_buffer;
};

struct acpi_object_buffer_field {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 field_flags;
  u8 attribute;
  u8 access_byte_width;
  struct acpi_namespace_node* node;
  u32 bit_length;
  u32 base_byte_offset;
  u32 value;
  u8 start_field_bit_offset;
  u8 access_length;
  u8 is_create_field;
  union acpi_operand_object* buffer_obj;
};

struct acpi_object_bank_field {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 field_flags;
  u8 attribute;
  u8 access_byte_width;
  struct acpi_namespace_node* node;
  u32 bit_length;
  u32 base_byte_offset;
  u32 value;
  u8 start_field_bit_offset;
  u8 access_length;
  union acpi_operand_object* region_obj;
  union acpi_operand_object* bank_obj;
};

struct acpi_object_index_field {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 field_flags;
  u8 attribute;
  u8 access_byte_width;
  struct acpi_namespace_node* node;
  u32 bit_length;
  u32 base_byte_offset;
  u32 value;
  u8 start_field_bit_offset;
  u8 access_length;
  union acpi_operand_object* index_obj;
  union acpi_operand_object* data_obj;
};

struct acpi_object_notify_handler {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  struct acpi_namespace_node* node;
  u32 handler_type;
  acpi_notify_handler handler;
  void* context;
  union acpi_operand_object* next[2];
};

struct acpi_object_addr_handler {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 space_id;
  u8 handler_flags;
  acpi_adr_space_handler handler;
  struct acpi_namespace_node* node;
  void* context;
  void* context_mutex;
  acpi_adr_space_setup setup;
  union acpi_operand_object* region_list;
  union acpi_operand_object* next;
};

struct acpi_object_reference {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  u8 class;
  u8 target_type;
  u8 resolved;
  void* object;
  struct acpi_namespace_node* node;
  union acpi_operand_object** where;
  u8* index_pointer;
  u8* aml;
  u32 value;
};

struct acpi_object_extra {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  struct acpi_namespace_node* method_REG;
  struct acpi_namespace_node* scope_node;
  void* region_context;
  u8* aml_start;
  u32 aml_length;
};

struct acpi_object_data {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  acpi_object_handler handler;
  void* pointer;
};

struct acpi_object_cache_list {
  union acpi_operand_object* next_object;
  u8 descriptor_type;
  u8 type;
  u16 reference_count;
  u8 flags;
  union acpi_operand_object* next;
};

union acpi_operand_object {
  struct acpi_object_common common;
  struct acpi_object_integer integer;
  struct acpi_object_string string;
  struct acpi_object_buffer buffer;
  struct acpi_object_package package;
  struct acpi_object_event event;
  struct acpi_object_method method;
  struct acpi_object_mutex mutex;
  struct acpi_object_region region;
  struct acpi_object_notify_common common_notify;
  struct acpi_object_device device;
  struct acpi_object_power_resource power_resource;
  struct acpi_object_processor processor;
  struct acpi_object_thermal_zone thermal_zone;
  struct acpi_object_field_common common_field;
  struct acpi_object_region_field field;
  struct acpi_object_buffer_field buffer_field;
  struct acpi_object_bank_field bank_field;
  struct acpi_object_index_field index_field;
  struct acpi_object_notify_handler notify;
  struct acpi_object_addr_handler address_space;
  struct acpi_object_reference reference;
  struct acpi_object_extra extra;
  struct acpi_object_data data;
  struct acpi_object_cache_list cache;
  struct acpi_namespace_node node;
};

struct acpi_table_list {
  struct acpi_table_desc* tables;
  u32 current_table_count;
  u32 max_table_count;
  u8 flags;
};

union acpi_parse_object;

union acpi_generic_state;

struct acpi_parse_state {
  u8* aml_start;
  u8* aml;
  u8* aml_end;
  u8* pkg_start;
  u8* pkg_end;
  union acpi_parse_object* start_op;
  struct acpi_namespace_node* start_node;
  union acpi_generic_state* scope;
  union acpi_parse_object* start_scope;
  u32 aml_size;
};

typedef acpi_status (
    *acpi_parse_downwards)(struct acpi_walk_state*, union acpi_parse_object**);

typedef acpi_status (*acpi_parse_upwards)(struct acpi_walk_state*);

struct acpi_opcode_info;

struct acpi_walk_state {
  struct acpi_walk_state* next;
  u8 descriptor_type;
  u8 walk_type;
  u16 opcode;
  u8 next_op_info;
  u8 num_operands;
  u8 operand_index;
  acpi_owner_id owner_id;
  u8 last_predicate;
  u8 current_result;
  u8 return_used;
  u8 scope_depth;
  u8 pass_number;
  u8 namespace_override;
  u8 result_size;
  u8 result_count;
  u8* aml;
  u32 arg_types;
  u32 method_breakpoint;
  u32 user_breakpoint;
  u32 parse_flags;
  struct acpi_parse_state parser_state;
  u32 prev_arg_types;
  u32 arg_count;
  u16 method_nesting_depth;
  u8 method_is_nested;
  struct acpi_namespace_node arguments[7];
  struct acpi_namespace_node local_variables[8];
  union acpi_operand_object* operands[9];
  union acpi_operand_object** params;
  u8* aml_last_while;
  union acpi_operand_object** caller_return_desc;
  union acpi_generic_state* control_state;
  struct acpi_namespace_node* deferred_node;
  union acpi_operand_object* implicit_return_obj;
  struct acpi_namespace_node* method_call_node;
  union acpi_parse_object* method_call_op;
  union acpi_operand_object* method_desc;
  struct acpi_namespace_node* method_node;
  char* method_pathname;
  union acpi_parse_object* op;
  const struct acpi_opcode_info* op_info;
  union acpi_parse_object* origin;
  union acpi_operand_object* result_obj;
  union acpi_generic_state* results;
  union acpi_operand_object* return_desc;
  union acpi_generic_state* scope_info;
  union acpi_parse_object* prev_op;
  union acpi_parse_object* next_op;
  struct acpi_thread_state* thread;
  acpi_parse_downwards descending_callback;
  acpi_parse_upwards ascending_callback;
};

struct acpi_sci_handler_info {
  struct acpi_sci_handler_info* next;
  acpi_sci_handler address;
  void* context;
};

struct acpi_gpe_handler_info {
  acpi_gpe_handler address;
  void* context;
  struct acpi_namespace_node* method_node;
  u8 original_flags;
  u8 originally_enabled;
};

struct acpi_gpe_notify_info {
  struct acpi_namespace_node* device_node;
  struct acpi_gpe_notify_info* next;
};

union acpi_gpe_dispatch_info {
  struct acpi_namespace_node* method_node;
  struct acpi_gpe_handler_info* handler;
  struct acpi_gpe_notify_info* notify_list;
};

struct acpi_gpe_register_info;

struct acpi_gpe_event_info {
  union acpi_gpe_dispatch_info dispatch;
  struct acpi_gpe_register_info* register_info;
  u8 flags;
  u8 gpe_number;
  u8 runtime_count;
  u8 disable_for_dispatch;
};

struct acpi_gpe_address {
  u8 space_id;
  u64 address;
};

struct acpi_gpe_register_info {
  struct acpi_gpe_address status_address;
  struct acpi_gpe_address enable_address;
  u16 base_gpe_number;
  u8 enable_for_wake;
  u8 enable_for_run;
  u8 mask_for_run;
  u8 enable_mask;
};

struct acpi_gpe_xrupt_info;

struct acpi_gpe_block_info {
  struct acpi_namespace_node* node;
  struct acpi_gpe_block_info* previous;
  struct acpi_gpe_block_info* next;
  struct acpi_gpe_xrupt_info* xrupt_block;
  struct acpi_gpe_register_info* register_info;
  struct acpi_gpe_event_info* event_info;
  u64 address;
  u32 register_count;
  u16 gpe_count;
  u16 block_base_number;
  u8 space_id;
  u8 initialized;
};

struct acpi_gpe_xrupt_info {
  struct acpi_gpe_xrupt_info* previous;
  struct acpi_gpe_xrupt_info* next;
  struct acpi_gpe_block_info* gpe_block_list_head;
  u32 interrupt_number;
};

struct acpi_fixed_event_handler {
  acpi_event_handler handler;
  void* context;
};

struct acpi_fixed_event_info {
  u8 status_register_id;
  u8 enable_register_id;
  u16 status_bit_mask;
  u16 enable_bit_mask;
};

struct acpi_common_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
};

struct acpi_update_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  union acpi_operand_object* object;
};

struct acpi_pkg_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  u32 index;
  union acpi_operand_object* source_object;
  union acpi_operand_object* dest_object;
  struct acpi_walk_state* walk_state;
  void* this_target_obj;
  u32 num_packages;
};

struct acpi_control_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  u16 opcode;
  union acpi_parse_object* predicate_op;
  u8* aml_predicate_start;
  u8* package_end;
  u64 loop_timeout;
};

union acpi_parse_value {
  u64 integer;
  u32 size;
  char* string;
  u8* buffer;
  char* name;
  union acpi_parse_object* arg;
};

struct acpi_parse_obj_common {
  union acpi_parse_object* parent;
  u8 descriptor_type;
  u8 flags;
  u16 aml_opcode;
  u8* aml;
  union acpi_parse_object* next;
  struct acpi_namespace_node* node;
  union acpi_parse_value value;
  u8 arg_list_length;
};

struct acpi_parse_obj_named {
  union acpi_parse_object* parent;
  u8 descriptor_type;
  u8 flags;
  u16 aml_opcode;
  u8* aml;
  union acpi_parse_object* next;
  struct acpi_namespace_node* node;
  union acpi_parse_value value;
  u8 arg_list_length;
  char* path;
  u8* data;
  u32 length;
  u32 name;
};

struct acpi_parse_obj_asl {
  union acpi_parse_object* parent;
  u8 descriptor_type;
  u8 flags;
  u16 aml_opcode;
  u8* aml;
  union acpi_parse_object* next;
  struct acpi_namespace_node* node;
  union acpi_parse_value value;
  u8 arg_list_length;
  union acpi_parse_object* child;
  union acpi_parse_object* parent_method;
  char* filename;
  u8 file_changed;
  char* parent_filename;
  char* external_name;
  char* namepath;
  char name_seg[4];
  u32 extra_value;
  u32 column;
  u32 line_number;
  u32 logical_line_number;
  u32 logical_byte_offset;
  u32 end_line;
  u32 end_logical_line;
  u32 acpi_btype;
  u32 aml_length;
  u32 aml_subtree_length;
  u32 final_aml_length;
  u32 final_aml_offset;
  u32 compile_flags;
  u16 parse_opcode;
  u8 aml_opcode_length;
  u8 aml_pkg_len_bytes;
  u8 extra;
  char parse_op_name[20];
};

union acpi_parse_object {
  struct acpi_parse_obj_common common;
  struct acpi_parse_obj_named named;
  struct acpi_parse_obj_asl asl;
};

struct acpi_scope_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  struct acpi_namespace_node* node;
};

struct acpi_pscope_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  u32 arg_count;
  union acpi_parse_object* op;
  u8* arg_end;
  u8* pkg_end;
  u32 arg_list;
};

struct acpi_thread_state {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  u8 current_sync_level;
  struct acpi_walk_state* walk_state_list;
  union acpi_operand_object* acquired_mutex_list;
  u64 thread_id;
};

struct acpi_result_values {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  union acpi_operand_object* obj_desc[8];
};

struct acpi_global_notify_handler {
  acpi_notify_handler handler;
  void* context;
};

struct acpi_notify_info {
  void* next;
  u8 descriptor_type;
  u8 flags;
  u16 value;
  u16 state;
  u8 handler_list_id;
  struct acpi_namespace_node* node;
  union acpi_operand_object* handler_list_head;
  struct acpi_global_notify_handler* global;
};

union acpi_generic_state {
  struct acpi_common_state common;
  struct acpi_control_state control;
  struct acpi_update_state update;
  struct acpi_scope_state scope;
  struct acpi_pscope_state parse_scope;
  struct acpi_pkg_state pkg;
  struct acpi_thread_state thread;
  struct acpi_result_values results;
  struct acpi_notify_info notify;
};

struct acpi_address_range {
  struct acpi_address_range* next;
  struct acpi_namespace_node* region_node;
  acpi_physical_address start_address;
  acpi_physical_address end_address;
};

struct acpi_opcode_info {
  u32 parse_args;
  u32 runtime_args;
  u16 flags;
  u8 object_type;
  u8 class;
  u8 type;
};

struct acpi_comment_node {
  char* comment;
  struct acpi_comment_node* next;
};

struct acpi_bit_register_info {
  u8 parent_register;
  u8 bit_position;
  u16 access_bit_mask;
};

struct acpi_interface_info {
  char* name;
  struct acpi_interface_info* next;
  u8 flags;
  u8 value;
};

struct acpi_os_dpc {
  acpi_osd_exec_callback function;
  void* context;
  struct work_struct work;
};

struct acpi_ioremap {
  struct list_head list;
  void* virt;
  acpi_physical_address phys;
  acpi_size size;
  union {
    long unsigned int refcount;
    struct rcu_work rwork;
  } track;
};

struct acpi_hp_work {
  struct work_struct work;
  struct acpi_device* adev;
  u32 src;
};

struct acpi_object_list {
  u32 count;
  union acpi_object* pointer;
};

struct acpi_pld_info {
  u8 revision;
  u8 ignore_color;
  u8 red;
  u8 green;
  u8 blue;
  u16 width;
  u16 height;
  u8 user_visible;
  u8 dock;
  u8 lid;
  u8 panel;
  u8 vertical_position;
  u8 horizontal_position;
  u8 shape;
  u8 group_orientation;
  u8 group_token;
  u8 group_position;
  u8 bay;
  u8 ejectable;
  u8 ospm_eject_required;
  u8 cabinet_number;
  u8 card_cage_number;
  u8 reference;
  u8 rotation;
  u8 order;
  u8 reserved;
  u16 vertical_offset;
  u16 horizontal_offset;
};

struct acpi_handle_list {
  u32 count;
  acpi_handle handles[10];
};

struct acpi_device_bus_id {
  const char* bus_id;
  struct ida instance_ida;
  struct list_head node;
};

struct acpi_dev_match_info {
  struct acpi_device_id hid[2];
  const char* uid;
  s64 hrv;
};

struct nvs_region {
  __u64 phys_start;
  __u64 size;
  struct list_head node;
};

struct acpi_wakeup_handler {
  struct list_head list_node;
  bool (*wakeup)(void*);
  void* context;
};

struct acpi_hardware_id {
  struct list_head list;
  const char* id;
};

struct acpi_data_node {
  const char* name;
  acpi_handle handle;
  struct fwnode_handle fwnode;
  struct fwnode_handle* parent;
  struct acpi_device_data data;
  struct list_head sibling;
  struct kobject kobj;
  struct completion kobj_done;
};

struct acpi_data_node_attr {
  struct attribute attr;
  ssize_t (*show)(struct acpi_data_node*, char*);
  ssize_t (*store)(struct acpi_data_node*, const char*, size_t);
};

enum acpi_bus_device_type {
  ACPI_BUS_TYPE_DEVICE = 0,
  ACPI_BUS_TYPE_POWER = 1,
  ACPI_BUS_TYPE_PROCESSOR = 2,
  ACPI_BUS_TYPE_THERMAL = 3,
  ACPI_BUS_TYPE_POWER_BUTTON = 4,
  ACPI_BUS_TYPE_SLEEP_BUTTON = 5,
  ACPI_BUS_TYPE_ECDT_EC = 6,
  ACPI_BUS_DEVICE_TYPE_COUNT = 7,
};

struct acpi_device_physical_node {
  unsigned int node_id;
  struct list_head node;
  struct device* dev;
  bool put_online : 1;
};

struct acpi_osc_context {
  char* uuid_str;
  int rev;
  struct acpi_buffer cap;
  struct acpi_buffer ret;
};

struct acpi_pnp_device_id {
  u32 length;
  char* string;
};

struct acpi_pnp_device_id_list {
  u32 count;
  u32 list_size;
  struct acpi_pnp_device_id ids[0];
};

struct acpi_device_info {
  u32 info_size;
  u32 name;
  acpi_object_type type;
  u8 param_count;
  u16 valid;
  u8 flags;
  u8 highest_dstates[4];
  u8 lowest_dstates[5];
  u64 address;
  struct acpi_pnp_device_id hardware_id;
  struct acpi_pnp_device_id unique_id;
  struct acpi_pnp_device_id class_code;
  struct acpi_pnp_device_id_list compatible_id_list;
};

struct acpi_table_spcr {
  struct acpi_table_header header;
  u8 interface_type;
  u8 reserved[3];
  struct acpi_generic_address serial_port;
  u8 interrupt_type;
  u8 pc_interrupt;
  u32 interrupt;
  u8 baud_rate;
  u8 parity;
  u8 stop_bits;
  u8 flow_control;
  u8 terminal_type;
  u8 reserved1;
  u16 pci_device_id;
  u16 pci_vendor_id;
  u8 pci_bus;
  u8 pci_device;
  u8 pci_function;
  u32 pci_flags;
  u8 pci_segment;
  u32 reserved2;
} __attribute__((packed));

struct acpi_table_stao {
  struct acpi_table_header header;
  u8 ignore_uart;
} __attribute__((packed));

struct acpi_resource_irq {
  u8 descriptor_length;
  u8 triggering;
  u8 polarity;
  u8 shareable;
  u8 wake_capable;
  u8 interrupt_count;
  u8 interrupts[1];
};

struct acpi_resource_dma {
  u8 type;
  u8 bus_master;
  u8 transfer;
  u8 channel_count;
  u8 channels[1];
};

struct acpi_resource_start_dependent {
  u8 descriptor_length;
  u8 compatibility_priority;
  u8 performance_robustness;
};

struct acpi_resource_io {
  u8 io_decode;
  u8 alignment;
  u8 address_length;
  u16 minimum;
  u16 maximum;
} __attribute__((packed));

struct acpi_resource_fixed_io {
  u16 address;
  u8 address_length;
} __attribute__((packed));

struct acpi_resource_fixed_dma {
  u16 request_lines;
  u16 channels;
  u8 width;
} __attribute__((packed));

struct acpi_resource_vendor {
  u16 byte_length;
  u8 byte_data[1];
} __attribute__((packed));

struct acpi_resource_vendor_typed {
  u16 byte_length;
  u8 uuid_subtype;
  u8 uuid[16];
  u8 byte_data[1];
};

struct acpi_resource_end_tag {
  u8 checksum;
};

struct acpi_resource_memory24 {
  u8 write_protect;
  u16 minimum;
  u16 maximum;
  u16 alignment;
  u16 address_length;
} __attribute__((packed));

struct acpi_resource_memory32 {
  u8 write_protect;
  u32 minimum;
  u32 maximum;
  u32 alignment;
  u32 address_length;
} __attribute__((packed));

struct acpi_resource_fixed_memory32 {
  u8 write_protect;
  u32 address;
  u32 address_length;
} __attribute__((packed));

struct acpi_memory_attribute {
  u8 write_protect;
  u8 caching;
  u8 range_type;
  u8 translation;
};

struct acpi_io_attribute {
  u8 range_type;
  u8 translation;
  u8 translation_type;
  u8 reserved1;
};

union acpi_resource_attribute {
  struct acpi_memory_attribute mem;
  struct acpi_io_attribute io;
  u8 type_specific;
};

struct acpi_resource_label {
  u16 string_length;
  char* string_ptr;
} __attribute__((packed));

struct acpi_resource_source {
  u8 index;
  u16 string_length;
  char* string_ptr;
} __attribute__((packed));

struct acpi_address16_attribute {
  u16 granularity;
  u16 minimum;
  u16 maximum;
  u16 translation_offset;
  u16 address_length;
};

struct acpi_address32_attribute {
  u32 granularity;
  u32 minimum;
  u32 maximum;
  u32 translation_offset;
  u32 address_length;
};

struct acpi_address64_attribute {
  u64 granularity;
  u64 minimum;
  u64 maximum;
  u64 translation_offset;
  u64 address_length;
};

struct acpi_resource_address {
  u8 resource_type;
  u8 producer_consumer;
  u8 decode;
  u8 min_address_fixed;
  u8 max_address_fixed;
  union acpi_resource_attribute info;
};

struct acpi_resource_address16 {
  u8 resource_type;
  u8 producer_consumer;
  u8 decode;
  u8 min_address_fixed;
  u8 max_address_fixed;
  union acpi_resource_attribute info;
  struct acpi_address16_attribute address;
  struct acpi_resource_source resource_source;
} __attribute__((packed));

struct acpi_resource_address32 {
  u8 resource_type;
  u8 producer_consumer;
  u8 decode;
  u8 min_address_fixed;
  u8 max_address_fixed;
  union acpi_resource_attribute info;
  struct acpi_address32_attribute address;
  struct acpi_resource_source resource_source;
} __attribute__((packed));

struct acpi_resource_address64 {
  u8 resource_type;
  u8 producer_consumer;
  u8 decode;
  u8 min_address_fixed;
  u8 max_address_fixed;
  union acpi_resource_attribute info;
  struct acpi_address64_attribute address;
  struct acpi_resource_source resource_source;
} __attribute__((packed));

struct acpi_resource_extended_address64 {
  u8 resource_type;
  u8 producer_consumer;
  u8 decode;
  u8 min_address_fixed;
  u8 max_address_fixed;
  union acpi_resource_attribute info;
  u8 revision_ID;
  struct acpi_address64_attribute address;
  u64 type_specific;
} __attribute__((packed));

struct acpi_resource_extended_irq {
  u8 producer_consumer;
  u8 triggering;
  u8 polarity;
  u8 shareable;
  u8 wake_capable;
  u8 interrupt_count;
  struct acpi_resource_source resource_source;
  u32 interrupts[1];
} __attribute__((packed));

struct acpi_resource_generic_register {
  u8 space_id;
  u8 bit_width;
  u8 bit_offset;
  u8 access_size;
  u64 address;
} __attribute__((packed));

struct acpi_resource_gpio {
  u8 revision_id;
  u8 connection_type;
  u8 producer_consumer;
  u8 pin_config;
  u8 shareable;
  u8 wake_capable;
  u8 io_restriction;
  u8 triggering;
  u8 polarity;
  u16 drive_strength;
  u16 debounce_timeout;
  u16 pin_table_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u16* pin_table;
  u8* vendor_data;
} __attribute__((packed));

struct acpi_resource_common_serialbus {
  u8 revision_id;
  u8 type;
  u8 producer_consumer;
  u8 slave_mode;
  u8 connection_sharing;
  u8 type_revision_id;
  u16 type_data_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u8* vendor_data;
} __attribute__((packed));

struct acpi_resource_i2c_serialbus {
  u8 revision_id;
  u8 type;
  u8 producer_consumer;
  u8 slave_mode;
  u8 connection_sharing;
  u8 type_revision_id;
  u16 type_data_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u8* vendor_data;
  u8 access_mode;
  u16 slave_address;
  u32 connection_speed;
} __attribute__((packed));

struct acpi_resource_spi_serialbus {
  u8 revision_id;
  u8 type;
  u8 producer_consumer;
  u8 slave_mode;
  u8 connection_sharing;
  u8 type_revision_id;
  u16 type_data_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u8* vendor_data;
  u8 wire_mode;
  u8 device_polarity;
  u8 data_bit_length;
  u8 clock_phase;
  u8 clock_polarity;
  u16 device_selection;
  u32 connection_speed;
} __attribute__((packed));

struct acpi_resource_uart_serialbus {
  u8 revision_id;
  u8 type;
  u8 producer_consumer;
  u8 slave_mode;
  u8 connection_sharing;
  u8 type_revision_id;
  u16 type_data_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u8* vendor_data;
  u8 endian;
  u8 data_bits;
  u8 stop_bits;
  u8 flow_control;
  u8 parity;
  u8 lines_enabled;
  u16 rx_fifo_size;
  u16 tx_fifo_size;
  u32 default_baud_rate;
} __attribute__((packed));

struct acpi_resource_pin_function {
  u8 revision_id;
  u8 pin_config;
  u8 shareable;
  u16 function_number;
  u16 pin_table_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u16* pin_table;
  u8* vendor_data;
} __attribute__((packed));

struct acpi_resource_pin_config {
  u8 revision_id;
  u8 producer_consumer;
  u8 shareable;
  u8 pin_config_type;
  u32 pin_config_value;
  u16 pin_table_length;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  u16* pin_table;
  u8* vendor_data;
} __attribute__((packed));

struct acpi_resource_pin_group {
  u8 revision_id;
  u8 producer_consumer;
  u16 pin_table_length;
  u16 vendor_length;
  u16* pin_table;
  struct acpi_resource_label resource_label;
  u8* vendor_data;
} __attribute__((packed));

struct acpi_resource_pin_group_function {
  u8 revision_id;
  u8 producer_consumer;
  u8 shareable;
  u16 function_number;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  struct acpi_resource_label resource_source_label;
  u8* vendor_data;
} __attribute__((packed));

struct acpi_resource_pin_group_config {
  u8 revision_id;
  u8 producer_consumer;
  u8 shareable;
  u8 pin_config_type;
  u32 pin_config_value;
  u16 vendor_length;
  struct acpi_resource_source resource_source;
  struct acpi_resource_label resource_source_label;
  u8* vendor_data;
} __attribute__((packed));

union acpi_resource_data {
  struct acpi_resource_irq irq;
  struct acpi_resource_dma dma;
  struct acpi_resource_start_dependent start_dpf;
  struct acpi_resource_io io;
  struct acpi_resource_fixed_io fixed_io;
  struct acpi_resource_fixed_dma fixed_dma;
  struct acpi_resource_vendor vendor;
  struct acpi_resource_vendor_typed vendor_typed;
  struct acpi_resource_end_tag end_tag;
  struct acpi_resource_memory24 memory24;
  struct acpi_resource_memory32 memory32;
  struct acpi_resource_fixed_memory32 fixed_memory32;
  struct acpi_resource_address16 address16;
  struct acpi_resource_address32 address32;
  struct acpi_resource_address64 address64;
  struct acpi_resource_extended_address64 ext_address64;
  struct acpi_resource_extended_irq extended_irq;
  struct acpi_resource_generic_register generic_reg;
  struct acpi_resource_gpio gpio;
  struct acpi_resource_i2c_serialbus i2c_serial_bus;
  struct acpi_resource_spi_serialbus spi_serial_bus;
  struct acpi_resource_uart_serialbus uart_serial_bus;
  struct acpi_resource_common_serialbus common_serial_bus;
  struct acpi_resource_pin_function pin_function;
  struct acpi_resource_pin_config pin_config;
  struct acpi_resource_pin_group pin_group;
  struct acpi_resource_pin_group_function pin_group_function;
  struct acpi_resource_pin_group_config pin_group_config;
  struct acpi_resource_address address;
};

struct acpi_resource {
  u32 type;
  u32 length;
  union acpi_resource_data data;
} __attribute__((packed));

enum acpi_reconfig_event {
  ACPI_RECONFIG_DEVICE_ADD = 0,
  ACPI_RECONFIG_DEVICE_REMOVE = 1,
};

struct acpi_probe_entry;

typedef bool (*acpi_probe_entry_validate_subtbl)(
    struct acpi_subtable_header*,
    struct acpi_probe_entry*);

struct acpi_probe_entry {
  __u8 id[5];
  __u8 type;
  acpi_probe_entry_validate_subtbl subtable_valid;
  union {
    acpi_tbl_table_handler probe_table;
    acpi_tbl_entry_handler probe_subtbl;
  };
  kernel_ulong_t driver_data;
};

struct acpi_dep_data {
  struct list_head node;
  acpi_handle supplier;
  acpi_handle consumer;
};

struct acpi_table_events_work {
  struct work_struct work;
  void* table;
  u32 event;
};

struct resource_win {
  struct resource res;
  resource_size_t offset;
};

struct res_proc_context {
  struct list_head* list;
  int (*preproc)(struct acpi_resource*, void*);
  void* preproc_data;
  int count;
  int error;
};

typedef u32 acpi_event_status;

struct acpi_table_ecdt {
  struct acpi_table_header header;
  struct acpi_generic_address control;
  struct acpi_generic_address data;
  u32 uid;
  u8 gpe;
  u8 id[1];
} __attribute__((packed));

struct transaction {
  const u8* wdata;
  u8* rdata;
  short unsigned int irq_count;
  u8 command;
  u8 wi;
  u8 ri;
  u8 wlen;
  u8 rlen;
  u8 flags;
};

typedef int (*acpi_ec_query_func)(void*);

enum ec_command {
  ACPI_EC_COMMAND_READ = 128,
  ACPI_EC_COMMAND_WRITE = 129,
  ACPI_EC_BURST_ENABLE = 130,
  ACPI_EC_BURST_DISABLE = 131,
  ACPI_EC_COMMAND_QUERY = 132,
};

enum {
  EC_FLAGS_QUERY_ENABLED = 0,
  EC_FLAGS_QUERY_PENDING = 1,
  EC_FLAGS_QUERY_GUARDING = 2,
  EC_FLAGS_EVENT_HANDLER_INSTALLED = 3,
  EC_FLAGS_EC_HANDLER_INSTALLED = 4,
  EC_FLAGS_QUERY_METHODS_INSTALLED = 5,
  EC_FLAGS_STARTED = 6,
  EC_FLAGS_STOPPED = 7,
  EC_FLAGS_EVENTS_MASKED = 8,
};

struct acpi_ec_query_handler {
  struct list_head node;
  acpi_ec_query_func func;
  acpi_handle handle;
  void* data;
  u8 query_bit;
  struct kref kref;
};

struct acpi_ec_query {
  struct transaction transaction;
  struct work_struct work;
  struct acpi_ec_query_handler* handler;
};

struct acpi_pci_root_ops;

struct acpi_pci_root_info {
  struct acpi_pci_root* root;
  struct acpi_device* bridge;
  struct acpi_pci_root_ops* ops;
  struct list_head resources;
  char name[16];
};

struct acpi_pci_root_ops {
  struct pci_ops* pci_ops;
  int (*init_info)(struct acpi_pci_root_info*);
  void (*release_info)(struct acpi_pci_root_info*);
  int (*prepare_resources)(struct acpi_pci_root_info*);
};

struct pci_osc_bit_struct {
  u32 bit;
  char* desc;
};

struct acpi_handle_node {
  struct list_head node;
  acpi_handle handle;
};

struct acpi_pci_link_irq {
  u32 active;
  u8 triggering;
  u8 polarity;
  u8 resource_type;
  u8 possible_count;
  u32 possible[16];
  u8 initialized : 1;
  u8 reserved : 7;
};

struct acpi_pci_link {
  struct list_head list;
  struct acpi_device* device;
  struct acpi_pci_link_irq irq;
  int refcnt;
};

struct acpi_pci_routing_table {
  u32 length;
  u32 pin;
  u64 address;
  u32 source_index;
  char source[4];
};

struct acpi_prt_entry {
  struct acpi_pci_id id;
  u8 pin;
  acpi_handle link;
  u32 index;
};

struct prt_quirk {
  const struct dmi_system_id* system;
  unsigned int segment;
  unsigned int bus;
  unsigned int device;
  unsigned char pin;
  const char* source;
  const char* actual_source;
};

struct apd_private_data;

struct apd_device_desc {
  unsigned int fixed_clk_rate;
  struct property_entry* properties;
  int (*setup)(struct apd_private_data*);
};

struct apd_private_data {
  struct clk* clk;
  struct acpi_device* adev;
  const struct apd_device_desc* dev_desc;
};

struct acpi_power_dependent_device {
  struct device* dev;
  struct list_head node;
};

struct acpi_power_resource {
  struct acpi_device device;
  struct list_head list_node;
  char* name;
  u32 system_level;
  u32 order;
  unsigned int ref_count;
  bool wakeup_enabled;
  struct mutex resource_lock;
  struct list_head dependents;
};

struct acpi_power_resource_entry {
  struct list_head node;
  struct acpi_power_resource* resource;
};

struct acpi_bus_event {
  struct list_head node;
  acpi_device_class device_class;
  acpi_bus_id bus_id;
  u32 type;
  u32 data;
};

struct acpi_genl_event {
  acpi_device_class device_class;
  char bus_id[15];
  u32 type;
  u32 data;
};

enum {
  ACPI_GENL_ATTR_UNSPEC = 0,
  ACPI_GENL_ATTR_EVENT = 1,
  __ACPI_GENL_ATTR_MAX = 2,
};

enum {
  ACPI_GENL_CMD_UNSPEC = 0,
  ACPI_GENL_CMD_EVENT = 1,
  __ACPI_GENL_CMD_MAX = 2,
};

struct acpi_ged_device {
  struct device* dev;
  struct list_head event_list;
};

struct acpi_ged_event {
  struct list_head node;
  struct device* dev;
  unsigned int gsi;
  unsigned int irq;
  acpi_handle handle;
};

struct acpi_table_bert {
  struct acpi_table_header header;
  u32 region_length;
  u64 address;
};

struct acpi_table_attr {
  struct bin_attribute attr;
  char name[4];
  int instance;
  char filename[8];
  struct list_head node;
};

struct acpi_data_attr {
  struct bin_attribute attr;
  u64 addr;
};

struct acpi_data_obj {
  char* name;
  int (*fn)(void*, struct acpi_data_attr*);
};

struct event_counter {
  u32 count;
  u32 flags;
};

struct acpi_device_properties {
  const guid_t* guid;
  const union acpi_object* properties;
  struct list_head list;
};

struct always_present_id {
  struct acpi_device_id hid[2];
  struct x86_cpu_id cpu_ids[2];
  struct dmi_system_id dmi_ids[2];
  const char* uid;
};

struct acpi_lpat {
  int temp;
  int raw;
};

struct acpi_lpat_conversion_table {
  struct acpi_lpat* lpat;
  int lpat_count;
};

struct acpi_table_lpit {
  struct acpi_table_header header;
};

struct acpi_lpit_header {
  u32 type;
  u32 length;
  u16 unique_id;
  u16 reserved;
  u32 flags;
};

struct acpi_lpit_native {
  struct acpi_lpit_header header;
  struct acpi_generic_address entry_trigger;
  u32 residency;
  u32 latency;
  struct acpi_generic_address residency_counter;
  u64 counter_frequency;
} __attribute__((packed));

struct lpit_residency_info {
  struct acpi_generic_address gaddr;
  u64 frequency;
  void* iomem_addr;
};

enum {
  ACPI_REFCLASS_LOCAL = 0,
  ACPI_REFCLASS_ARG = 1,
  ACPI_REFCLASS_REFOF = 2,
  ACPI_REFCLASS_INDEX = 3,
  ACPI_REFCLASS_TABLE = 4,
  ACPI_REFCLASS_NAME = 5,
  ACPI_REFCLASS_DEBUG = 6,
  ACPI_REFCLASS_MAX = 6,
};

struct acpi_common_descriptor {
  void* common_pointer;
  u8 descriptor_type;
};

union acpi_descriptor {
  struct acpi_common_descriptor common;
  union acpi_operand_object object;
  struct acpi_namespace_node node;
  union acpi_parse_object op;
};

struct acpi_create_field_info {
  struct acpi_namespace_node* region_node;
  struct acpi_namespace_node* field_node;
  struct acpi_namespace_node* register_node;
  struct acpi_namespace_node* data_register_node;
  struct acpi_namespace_node* connection_node;
  u8* resource_buffer;
  u32 bank_value;
  u32 field_bit_position;
  u32 field_bit_length;
  u16 resource_length;
  u16 pin_number_index;
  u8 field_flags;
  u8 attribute;
  u8 field_type;
  u8 access_length;
};

struct acpi_init_walk_info {
  u32 table_index;
  u32 object_count;
  u32 method_count;
  u32 serial_method_count;
  u32 non_serial_method_count;
  u32 serialized_method_count;
  u32 device_count;
  u32 op_region_count;
  u32 field_count;
  u32 buffer_count;
  u32 package_count;
  u32 op_region_init;
  u32 field_init;
  u32 buffer_init;
  u32 package_init;
  acpi_owner_id owner_id;
};

struct acpi_name_info {
  char name[4];
  u16 argument_list;
  u8 expected_btypes;
} __attribute__((packed));

struct acpi_package_info {
  u8 type;
  u8 object_type1;
  u8 count1;
  u8 object_type2;
  u8 count2;
  u16 reserved;
} __attribute__((packed));

struct acpi_package_info2 {
  u8 type;
  u8 count;
  u8 object_type[4];
  u8 reserved;
};

struct acpi_package_info3 {
  u8 type;
  u8 count;
  u8 object_type[2];
  u8 tail_object_type;
  u16 reserved;
} __attribute__((packed));

struct acpi_package_info4 {
  u8 type;
  u8 object_type1;
  u8 count1;
  u8 sub_object_types;
  u8 pkg_count;
  u16 reserved;
} __attribute__((packed));

union acpi_predefined_info {
  struct acpi_name_info info;
  struct acpi_package_info ret_info;
  struct acpi_package_info2 ret_info2;
  struct acpi_package_info3 ret_info3;
  struct acpi_package_info4 ret_info4;
};

struct acpi_evaluate_info {
  struct acpi_namespace_node* prefix_node;
  const char* relative_pathname;
  union acpi_operand_object** parameters;
  struct acpi_namespace_node* node;
  union acpi_operand_object* obj_desc;
  char* full_pathname;
  const union acpi_predefined_info* predefined;
  union acpi_operand_object* return_object;
  union acpi_operand_object* parent_package;
  u32 return_flags;
  u32 return_btype;
  u16 param_count;
  u16 node_flags;
  u8 pass_number;
  u8 return_object_type;
  u8 flags;
};

enum {
  AML_FIELD_ACCESS_ANY = 0,
  AML_FIELD_ACCESS_BYTE = 1,
  AML_FIELD_ACCESS_WORD = 2,
  AML_FIELD_ACCESS_DWORD = 3,
  AML_FIELD_ACCESS_QWORD = 4,
  AML_FIELD_ACCESS_BUFFER = 5,
};

typedef enum {
  ACPI_IMODE_LOAD_PASS1 = 1,
  ACPI_IMODE_LOAD_PASS2 = 2,
  ACPI_IMODE_EXECUTE = 3,
} acpi_interpreter_mode;

typedef acpi_status (*acpi_execute_op)(struct acpi_walk_state*);

struct acpi_gpe_walk_info {
  struct acpi_namespace_node* gpe_device;
  struct acpi_gpe_block_info* gpe_block;
  u16 count;
  acpi_owner_id owner_id;
  u8 execute_by_owner_id;
};

struct acpi_gpe_device_info {
  u32 index;
  u32 next_block_base_index;
  acpi_status status;
  struct acpi_namespace_node* gpe_device;
};

typedef acpi_status (*acpi_gpe_callback)(
    struct acpi_gpe_xrupt_info*,
    struct acpi_gpe_block_info*,
    void*);

struct acpi_connection_info {
  u8* connection;
  u16 length;
  u8 access_length;
};

struct acpi_reg_walk_info {
  u32 function;
  u32 reg_run_count;
  acpi_adr_space_type space_id;
};

enum {
  AML_FIELD_UPDATE_PRESERVE = 0,
  AML_FIELD_UPDATE_WRITE_AS_ONES = 32,
  AML_FIELD_UPDATE_WRITE_AS_ZEROS = 64,
};

struct acpi_signal_fatal_info {
  u32 type;
  u32 code;
  u32 argument;
};

enum {
  MATCH_MTR = 0,
  MATCH_MEQ = 1,
  MATCH_MLE = 2,
  MATCH_MLT = 3,
  MATCH_MGE = 4,
  MATCH_MGT = 5,
};

enum {
  AML_FIELD_ATTRIB_QUICK = 2,
  AML_FIELD_ATTRIB_SEND_RECEIVE = 4,
  AML_FIELD_ATTRIB_BYTE = 6,
  AML_FIELD_ATTRIB_WORD = 8,
  AML_FIELD_ATTRIB_BLOCK = 10,
  AML_FIELD_ATTRIB_BYTES = 11,
  AML_FIELD_ATTRIB_PROCESS_CALL = 12,
  AML_FIELD_ATTRIB_BLOCK_PROCESS_CALL = 13,
  AML_FIELD_ATTRIB_RAW_BYTES = 14,
  AML_FIELD_ATTRIB_RAW_PROCESS_BYTES = 15,
};

typedef enum {
  ACPI_TRACE_AML_METHOD = 0,
  ACPI_TRACE_AML_OPCODE = 1,
  ACPI_TRACE_AML_REGION = 2,
} acpi_trace_event_type;

struct acpi_gpe_block_status_context {
  struct acpi_gpe_register_info* gpe_skip_register_info;
  u8 gpe_skip_mask;
  u8 retval;
};

struct acpi_port_info {
  char* name;
  u16 start;
  u16 end;
  u8 osi_dependency;
};

struct acpi_pci_device {
  acpi_handle device;
  struct acpi_pci_device* next;
};

struct acpi_device_walk_info {
  struct acpi_table_desc* table_desc;
  struct acpi_evaluate_info* evaluate_info;
  u32 device_count;
  u32 num_STA;
  u32 num_INI;
};

enum acpi_return_package_types {
  ACPI_PTYPE1_FIXED = 1,
  ACPI_PTYPE1_VAR = 2,
  ACPI_PTYPE1_OPTION = 3,
  ACPI_PTYPE2 = 4,
  ACPI_PTYPE2_COUNT = 5,
  ACPI_PTYPE2_PKG_COUNT = 6,
  ACPI_PTYPE2_FIXED = 7,
  ACPI_PTYPE2_MIN = 8,
  ACPI_PTYPE2_REV_FIXED = 9,
  ACPI_PTYPE2_FIX_VAR = 10,
  ACPI_PTYPE2_VAR_VAR = 11,
  ACPI_PTYPE2_UUID_PAIR = 12,
  ACPI_PTYPE_CUSTOM = 13,
};

typedef acpi_status (*acpi_object_converter)(
    struct acpi_namespace_node*,
    union acpi_operand_object*,
    union acpi_operand_object**);

struct acpi_simple_repair_info {
  char name[4];
  u32 unexpected_btypes;
  u32 package_index;
  acpi_object_converter object_converter;
};

typedef acpi_status (*acpi_repair_function)(
    struct acpi_evaluate_info*,
    union acpi_operand_object**);

struct acpi_repair_info {
  char name[4];
  acpi_repair_function repair_function;
};

struct acpi_namestring_info {
  const char* external_name;
  const char* next_external_char;
  char* internal_name;
  u32 length;
  u32 num_segments;
  u32 num_carats;
  u8 fully_qualified;
};

typedef acpi_status (*acpi_walk_callback)(acpi_handle, u32, void*, void**);

struct acpi_get_devices_info {
  acpi_walk_callback user_function;
  void* context;
  const char* hid;
};

struct aml_resource_small_header {
  u8 descriptor_type;
};

struct aml_resource_irq {
  u8 descriptor_type;
  u16 irq_mask;
  u8 flags;
} __attribute__((packed));

struct aml_resource_dma {
  u8 descriptor_type;
  u8 dma_channel_mask;
  u8 flags;
};

struct aml_resource_start_dependent {
  u8 descriptor_type;
  u8 flags;
};

struct aml_resource_end_dependent {
  u8 descriptor_type;
};

struct aml_resource_io {
  u8 descriptor_type;
  u8 flags;
  u16 minimum;
  u16 maximum;
  u8 alignment;
  u8 address_length;
};

struct aml_resource_fixed_io {
  u8 descriptor_type;
  u16 address;
  u8 address_length;
} __attribute__((packed));

struct aml_resource_vendor_small {
  u8 descriptor_type;
};

struct aml_resource_end_tag {
  u8 descriptor_type;
  u8 checksum;
};

struct aml_resource_fixed_dma {
  u8 descriptor_type;
  u16 request_lines;
  u16 channels;
  u8 width;
} __attribute__((packed));

struct aml_resource_large_header {
  u8 descriptor_type;
  u16 resource_length;
} __attribute__((packed));

struct aml_resource_memory24 {
  u8 descriptor_type;
  u16 resource_length;
  u8 flags;
  u16 minimum;
  u16 maximum;
  u16 alignment;
  u16 address_length;
} __attribute__((packed));

struct aml_resource_vendor_large {
  u8 descriptor_type;
  u16 resource_length;
} __attribute__((packed));

struct aml_resource_memory32 {
  u8 descriptor_type;
  u16 resource_length;
  u8 flags;
  u32 minimum;
  u32 maximum;
  u32 alignment;
  u32 address_length;
} __attribute__((packed));

struct aml_resource_fixed_memory32 {
  u8 descriptor_type;
  u16 resource_length;
  u8 flags;
  u32 address;
  u32 address_length;
} __attribute__((packed));

struct aml_resource_address {
  u8 descriptor_type;
  u16 resource_length;
  u8 resource_type;
  u8 flags;
  u8 specific_flags;
} __attribute__((packed));

struct aml_resource_extended_address64 {
  u8 descriptor_type;
  u16 resource_length;
  u8 resource_type;
  u8 flags;
  u8 specific_flags;
  u8 revision_ID;
  u8 reserved;
  u64 granularity;
  u64 minimum;
  u64 maximum;
  u64 translation_offset;
  u64 address_length;
  u64 type_specific;
} __attribute__((packed));

struct aml_resource_address64 {
  u8 descriptor_type;
  u16 resource_length;
  u8 resource_type;
  u8 flags;
  u8 specific_flags;
  u64 granularity;
  u64 minimum;
  u64 maximum;
  u64 translation_offset;
  u64 address_length;
} __attribute__((packed));

struct aml_resource_address32 {
  u8 descriptor_type;
  u16 resource_length;
  u8 resource_type;
  u8 flags;
  u8 specific_flags;
  u32 granularity;
  u32 minimum;
  u32 maximum;
  u32 translation_offset;
  u32 address_length;
} __attribute__((packed));

struct aml_resource_address16 {
  u8 descriptor_type;
  u16 resource_length;
  u8 resource_type;
  u8 flags;
  u8 specific_flags;
  u16 granularity;
  u16 minimum;
  u16 maximum;
  u16 translation_offset;
  u16 address_length;
} __attribute__((packed));

struct aml_resource_extended_irq {
  u8 descriptor_type;
  u16 resource_length;
  u8 flags;
  u8 interrupt_count;
  u32 interrupts[1];
} __attribute__((packed));

struct aml_resource_generic_register {
  u8 descriptor_type;
  u16 resource_length;
  u8 address_space_id;
  u8 bit_width;
  u8 bit_offset;
  u8 access_size;
  u64 address;
} __attribute__((packed));

struct aml_resource_gpio {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u8 connection_type;
  u16 flags;
  u16 int_flags;
  u8 pin_config;
  u16 drive_strength;
  u16 debounce_timeout;
  u16 pin_table_offset;
  u8 res_source_index;
  u16 res_source_offset;
  u16 vendor_offset;
  u16 vendor_length;
} __attribute__((packed));

struct aml_resource_common_serialbus {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u8 res_source_index;
  u8 type;
  u8 flags;
  u16 type_specific_flags;
  u8 type_revision_id;
  u16 type_data_length;
} __attribute__((packed));

struct aml_resource_i2c_serialbus {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u8 res_source_index;
  u8 type;
  u8 flags;
  u16 type_specific_flags;
  u8 type_revision_id;
  u16 type_data_length;
  u32 connection_speed;
  u16 slave_address;
} __attribute__((packed));

struct aml_resource_spi_serialbus {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u8 res_source_index;
  u8 type;
  u8 flags;
  u16 type_specific_flags;
  u8 type_revision_id;
  u16 type_data_length;
  u32 connection_speed;
  u8 data_bit_length;
  u8 clock_phase;
  u8 clock_polarity;
  u16 device_selection;
} __attribute__((packed));

struct aml_resource_uart_serialbus {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u8 res_source_index;
  u8 type;
  u8 flags;
  u16 type_specific_flags;
  u8 type_revision_id;
  u16 type_data_length;
  u32 default_baud_rate;
  u16 rx_fifo_size;
  u16 tx_fifo_size;
  u8 parity;
  u8 lines_enabled;
} __attribute__((packed));

struct aml_resource_pin_function {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u16 flags;
  u8 pin_config;
  u16 function_number;
  u16 pin_table_offset;
  u8 res_source_index;
  u16 res_source_offset;
  u16 vendor_offset;
  u16 vendor_length;
} __attribute__((packed));

struct aml_resource_pin_config {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u16 flags;
  u8 pin_config_type;
  u32 pin_config_value;
  u16 pin_table_offset;
  u8 res_source_index;
  u16 res_source_offset;
  u16 vendor_offset;
  u16 vendor_length;
} __attribute__((packed));

struct aml_resource_pin_group {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u16 flags;
  u16 pin_table_offset;
  u16 label_offset;
  u16 vendor_offset;
  u16 vendor_length;
} __attribute__((packed));

struct aml_resource_pin_group_function {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u16 flags;
  u16 function_number;
  u8 res_source_index;
  u16 res_source_offset;
  u16 res_source_label_offset;
  u16 vendor_offset;
  u16 vendor_length;
} __attribute__((packed));

struct aml_resource_pin_group_config {
  u8 descriptor_type;
  u16 resource_length;
  u8 revision_id;
  u16 flags;
  u8 pin_config_type;
  u32 pin_config_value;
  u8 res_source_index;
  u16 res_source_offset;
  u16 res_source_label_offset;
  u16 vendor_offset;
  u16 vendor_length;
} __attribute__((packed));

union aml_resource {
  u8 descriptor_type;
  struct aml_resource_small_header small_header;
  struct aml_resource_large_header large_header;
  struct aml_resource_irq irq;
  struct aml_resource_dma dma;
  struct aml_resource_start_dependent start_dpf;
  struct aml_resource_end_dependent end_dpf;
  struct aml_resource_io io;
  struct aml_resource_fixed_io fixed_io;
  struct aml_resource_fixed_dma fixed_dma;
  struct aml_resource_vendor_small vendor_small;
  struct aml_resource_end_tag end_tag;
  struct aml_resource_memory24 memory24;
  struct aml_resource_generic_register generic_reg;
  struct aml_resource_vendor_large vendor_large;
  struct aml_resource_memory32 memory32;
  struct aml_resource_fixed_memory32 fixed_memory32;
  struct aml_resource_address16 address16;
  struct aml_resource_address32 address32;
  struct aml_resource_address64 address64;
  struct aml_resource_extended_address64 ext_address64;
  struct aml_resource_extended_irq extended_irq;
  struct aml_resource_gpio gpio;
  struct aml_resource_i2c_serialbus i2c_serial_bus;
  struct aml_resource_spi_serialbus spi_serial_bus;
  struct aml_resource_uart_serialbus uart_serial_bus;
  struct aml_resource_common_serialbus common_serial_bus;
  struct aml_resource_pin_function pin_function;
  struct aml_resource_pin_config pin_config;
  struct aml_resource_pin_group pin_group;
  struct aml_resource_pin_group_function pin_group_function;
  struct aml_resource_pin_group_config pin_group_config;
  struct aml_resource_address address;
  u32 dword_item;
  u16 word_item;
  u8 byte_item;
};

struct acpi_rsconvert_info {
  u8 opcode;
  u8 resource_offset;
  u8 aml_offset;
  u8 value;
};

enum {
  ACPI_RSC_INITGET = 0,
  ACPI_RSC_INITSET = 1,
  ACPI_RSC_FLAGINIT = 2,
  ACPI_RSC_1BITFLAG = 3,
  ACPI_RSC_2BITFLAG = 4,
  ACPI_RSC_3BITFLAG = 5,
  ACPI_RSC_ADDRESS = 6,
  ACPI_RSC_BITMASK = 7,
  ACPI_RSC_BITMASK16 = 8,
  ACPI_RSC_COUNT = 9,
  ACPI_RSC_COUNT16 = 10,
  ACPI_RSC_COUNT_GPIO_PIN = 11,
  ACPI_RSC_COUNT_GPIO_RES = 12,
  ACPI_RSC_COUNT_GPIO_VEN = 13,
  ACPI_RSC_COUNT_SERIAL_RES = 14,
  ACPI_RSC_COUNT_SERIAL_VEN = 15,
  ACPI_RSC_DATA8 = 16,
  ACPI_RSC_EXIT_EQ = 17,
  ACPI_RSC_EXIT_LE = 18,
  ACPI_RSC_EXIT_NE = 19,
  ACPI_RSC_LENGTH = 20,
  ACPI_RSC_MOVE_GPIO_PIN = 21,
  ACPI_RSC_MOVE_GPIO_RES = 22,
  ACPI_RSC_MOVE_SERIAL_RES = 23,
  ACPI_RSC_MOVE_SERIAL_VEN = 24,
  ACPI_RSC_MOVE8 = 25,
  ACPI_RSC_MOVE16 = 26,
  ACPI_RSC_MOVE32 = 27,
  ACPI_RSC_MOVE64 = 28,
  ACPI_RSC_SET8 = 29,
  ACPI_RSC_SOURCE = 30,
  ACPI_RSC_SOURCEX = 31,
};

typedef u16 acpi_rs_length;

typedef u32 acpi_rsdesc_size;

struct acpi_vendor_uuid {
  u8 subtype;
  u8 data[16];
};

typedef acpi_status (
    *acpi_walk_resource_callback)(struct acpi_resource*, void*);

struct acpi_vendor_walk_info {
  struct acpi_vendor_uuid* uuid;
  struct acpi_buffer* buffer;
  acpi_status status;
};

struct acpi_fadt_info {
  const char* name;
  u16 address64;
  u16 address32;
  u16 length;
  u8 default_length;
  u8 flags;
};

struct acpi_fadt_pm_info {
  struct acpi_generic_address* target;
  u16 source;
  u8 register_num;
};

struct acpi_table_rsdp {
  char signature[8];
  u8 checksum;
  char oem_id[6];
  u8 revision;
  u32 rsdt_physical_address;
  u32 length;
  u64 xsdt_physical_address;
  u8 extended_checksum;
  u8 reserved[3];
} __attribute__((packed));

struct acpi_pkg_info {
  u8* free_space;
  acpi_size length;
  u32 object_space;
  u32 num_packages;
};

struct acpi_exception_info {
  char* name;
};

typedef acpi_status (*acpi_pkg_callback)(
    u8,
    union acpi_operand_object*,
    union acpi_generic_state*,
    void*);

typedef u32 acpi_mutex_handle;

typedef acpi_status (*acpi_walk_aml_callback)(u8*, u32, u32, u8, void**);

struct acpi_fan_fps {
  u64 control;
  u64 trip_point;
  u64 speed;
  u64 noise_level;
  u64 power;
  char name[20];
  struct device_attribute dev_attr;
};

struct acpi_fan_fif {
  u64 revision;
  u64 fine_grain_ctrl;
  u64 step_size;
  u64 low_speed_notification;
};

struct acpi_fan {
  bool acpi4;
  struct acpi_fan_fif fif;
  struct acpi_fan_fps* fps;
  int fps_count;
  struct thermal_cooling_device* cdev;
};

struct acpi_lpi_states_array {
  unsigned int size;
  unsigned int composite_states_size;
  struct acpi_lpi_state* entries;
  struct acpi_lpi_state* composite_states[8];
};

struct throttling_tstate {
  unsigned int cpu;
  int target_state;
};

struct acpi_processor_throttling_arg {
  struct acpi_processor* pr;
  int target_state;
  bool force;
};

struct container_dev {
  struct device dev;
  int (*offline)(struct container_dev*);
};

enum thermal_device_mode {
  THERMAL_DEVICE_DISABLED = 0,
  THERMAL_DEVICE_ENABLED = 1,
};

enum thermal_trip_type {
  THERMAL_TRIP_ACTIVE = 0,
  THERMAL_TRIP_PASSIVE = 1,
  THERMAL_TRIP_HOT = 2,
  THERMAL_TRIP_CRITICAL = 3,
};

enum thermal_trend {
  THERMAL_TREND_STABLE = 0,
  THERMAL_TREND_RAISING = 1,
  THERMAL_TREND_DROPPING = 2,
  THERMAL_TREND_RAISE_FULL = 3,
  THERMAL_TREND_DROP_FULL = 4,
};

enum thermal_notify_event {
  THERMAL_EVENT_UNSPECIFIED = 0,
  THERMAL_EVENT_TEMP_SAMPLE = 1,
  THERMAL_TRIP_VIOLATED = 2,
  THERMAL_TRIP_CHANGED = 3,
  THERMAL_DEVICE_DOWN = 4,
  THERMAL_DEVICE_UP = 5,
  THERMAL_DEVICE_POWER_CAPABILITY_CHANGED = 6,
  THERMAL_TABLE_CHANGED = 7,
  THERMAL_EVENT_KEEP_ALIVE = 8,
};

struct thermal_zone_device;

struct thermal_zone_device_ops {
  int (*bind)(struct thermal_zone_device*, struct thermal_cooling_device*);
  int (*unbind)(struct thermal_zone_device*, struct thermal_cooling_device*);
  int (*get_temp)(struct thermal_zone_device*, int*);
  int (*set_trips)(struct thermal_zone_device*, int, int);
  int (*change_mode)(struct thermal_zone_device*, enum thermal_device_mode);
  int (*get_trip_type)(
      struct thermal_zone_device*,
      int,
      enum thermal_trip_type*);
  int (*get_trip_temp)(struct thermal_zone_device*, int, int*);
  int (*set_trip_temp)(struct thermal_zone_device*, int, int);
  int (*get_trip_hyst)(struct thermal_zone_device*, int, int*);
  int (*set_trip_hyst)(struct thermal_zone_device*, int, int);
  int (*get_crit_temp)(struct thermal_zone_device*, int*);
  int (*set_emul_temp)(struct thermal_zone_device*, int);
  int (*get_trend)(struct thermal_zone_device*, int, enum thermal_trend*);
  void (*hot)(struct thermal_zone_device*);
  void (*critical)(struct thermal_zone_device*);
};

struct thermal_attr;

struct thermal_zone_params;

struct thermal_governor;

struct thermal_zone_device {
  int id;
  char type[20];
  struct device device;
  struct attribute_group trips_attribute_group;
  struct thermal_attr* trip_temp_attrs;
  struct thermal_attr* trip_type_attrs;
  struct thermal_attr* trip_hyst_attrs;
  enum thermal_device_mode mode;
  void* devdata;
  int trips;
  long unsigned int trips_disabled;
  long unsigned int passive_delay_jiffies;
  long unsigned int polling_delay_jiffies;
  int temperature;
  int last_temperature;
  int emul_temperature;
  int passive;
  int prev_low_trip;
  int prev_high_trip;
  atomic_t need_update;
  struct thermal_zone_device_ops* ops;
  struct thermal_zone_params* tzp;
  struct thermal_governor* governor;
  void* governor_data;
  struct list_head thermal_instances;
  struct ida ida;
  struct mutex lock;
  struct list_head node;
  struct delayed_work poll_queue;
  enum thermal_notify_event notify_event;
};

struct thermal_bind_params;

struct thermal_zone_params {
  char governor_name[20];
  bool no_hwmon;
  int num_tbps;
  struct thermal_bind_params* tbp;
  u32 sustainable_power;
  s32 k_po;
  s32 k_pu;
  s32 k_i;
  s32 k_d;
  s32 integral_cutoff;
  int slope;
  int offset;
};

struct thermal_governor {
  char name[20];
  int (*bind_to_tz)(struct thermal_zone_device*);
  void (*unbind_from_tz)(struct thermal_zone_device*);
  int (*throttle)(struct thermal_zone_device*, int);
  struct list_head governor_list;
};

struct thermal_bind_params {
  struct thermal_cooling_device* cdev;
  int weight;
  int trip_mask;
  long unsigned int* binding_limits;
  int (*match)(struct thermal_zone_device*, struct thermal_cooling_device*);
};

struct acpi_thermal_state {
  u8 critical : 1;
  u8 hot : 1;
  u8 passive : 1;
  u8 active : 1;
  u8 reserved : 4;
  int active_index;
};

struct acpi_thermal_state_flags {
  u8 valid : 1;
  u8 enabled : 1;
  u8 reserved : 6;
};

struct acpi_thermal_critical {
  struct acpi_thermal_state_flags flags;
  long unsigned int temperature;
};

struct acpi_thermal_hot {
  struct acpi_thermal_state_flags flags;
  long unsigned int temperature;
};

struct acpi_thermal_passive {
  struct acpi_thermal_state_flags flags;
  long unsigned int temperature;
  long unsigned int tc1;
  long unsigned int tc2;
  long unsigned int tsp;
  struct acpi_handle_list devices;
};

struct acpi_thermal_active {
  struct acpi_thermal_state_flags flags;
  long unsigned int temperature;
  struct acpi_handle_list devices;
};

struct acpi_thermal_trips {
  struct acpi_thermal_critical critical;
  struct acpi_thermal_hot hot;
  struct acpi_thermal_passive passive;
  struct acpi_thermal_active active[10];
};

struct acpi_thermal_flags {
  u8 cooling_mode : 1;
  u8 devices : 1;
  u8 reserved : 6;
};

struct acpi_thermal {
  struct acpi_device* device;
  acpi_bus_id name;
  long unsigned int temperature;
  long unsigned int last_temperature;
  long unsigned int polling_frequency;
  volatile u8 zombie;
  struct acpi_thermal_flags flags;
  struct acpi_thermal_state state;
  struct acpi_thermal_trips trips;
  struct acpi_handle_list devices;
  struct thermal_zone_device* thermal_zone;
  int kelvin_offset;
  struct work_struct thermal_check_work;
  struct mutex thermal_check_lock;
  refcount_t thermal_check_count;
};

struct acpi_table_slit {
  struct acpi_table_header header;
  u64 locality_count;
  u8 entry[1];
} __attribute__((packed));

struct acpi_table_srat {
  struct acpi_table_header header;
  u32 table_revision;
  u64 reserved;
};

enum acpi_srat_type {
  ACPI_SRAT_TYPE_CPU_AFFINITY = 0,
  ACPI_SRAT_TYPE_MEMORY_AFFINITY = 1,
  ACPI_SRAT_TYPE_X2APIC_CPU_AFFINITY = 2,
  ACPI_SRAT_TYPE_GICC_AFFINITY = 3,
  ACPI_SRAT_TYPE_GIC_ITS_AFFINITY = 4,
  ACPI_SRAT_TYPE_GENERIC_AFFINITY = 5,
  ACPI_SRAT_TYPE_RESERVED = 6,
};

struct acpi_srat_mem_affinity {
  struct acpi_subtable_header header;
  u32 proximity_domain;
  u16 reserved;
  u64 base_address;
  u64 length;
  u32 reserved1;
  u32 flags;
  u64 reserved2;
} __attribute__((packed));

struct acpi_srat_gicc_affinity {
  struct acpi_subtable_header header;
  u32 proximity_domain;
  u32 acpi_processor_uid;
  u32 flags;
  u32 clock_domain;
} __attribute__((packed));

struct acpi_srat_generic_affinity {
  struct acpi_subtable_header header;
  u8 reserved;
  u8 device_handle_type;
  u32 proximity_domain;
  u8 device_handle[16];
  u32 flags;
  u32 reserved1;
};

struct acpi_pci_ioapic {
  acpi_handle root_handle;
  acpi_handle handle;
  u32 gsi_base;
  struct resource res;
  struct pci_dev* pdev;
  struct list_head list;
};

struct acpi_whea_header {
  u8 action;
  u8 instruction;
  u8 flags;
  u8 reserved;
  struct acpi_generic_address register_region;
  u64 value;
  u64 mask;
} __attribute__((packed));

struct apei_exec_context;

typedef int (
    *apei_exec_ins_func_t)(struct apei_exec_context*, struct acpi_whea_header*);

struct apei_exec_ins_type;

struct apei_exec_context {
  u32 ip;
  u64 value;
  u64 var1;
  u64 var2;
  u64 src_base;
  u64 dst_base;
  struct apei_exec_ins_type* ins_table;
  u32 instructions;
  struct acpi_whea_header* action_table;
  u32 entries;
};

struct apei_exec_ins_type {
  u32 flags;
  apei_exec_ins_func_t run;
};

struct apei_resources {
  struct list_head iomem;
  struct list_head ioport;
};

typedef int (*apei_exec_entry_func_t)(
    struct apei_exec_context*,
    struct acpi_whea_header*,
    void*);

struct apei_res {
  struct list_head list;
  long unsigned int start;
  long unsigned int end;
};

struct acpi_table_hest {
  struct acpi_table_header header;
  u32 error_source_count;
};

enum acpi_hest_types {
  ACPI_HEST_TYPE_IA32_CHECK = 0,
  ACPI_HEST_TYPE_IA32_CORRECTED_CHECK = 1,
  ACPI_HEST_TYPE_IA32_NMI = 2,
  ACPI_HEST_TYPE_NOT_USED3 = 3,
  ACPI_HEST_TYPE_NOT_USED4 = 4,
  ACPI_HEST_TYPE_NOT_USED5 = 5,
  ACPI_HEST_TYPE_AER_ROOT_PORT = 6,
  ACPI_HEST_TYPE_AER_ENDPOINT = 7,
  ACPI_HEST_TYPE_AER_BRIDGE = 8,
  ACPI_HEST_TYPE_GENERIC_ERROR = 9,
  ACPI_HEST_TYPE_GENERIC_ERROR_V2 = 10,
  ACPI_HEST_TYPE_IA32_DEFERRED_CHECK = 11,
  ACPI_HEST_TYPE_RESERVED = 12,
};

struct acpi_hest_ia_machine_check {
  struct acpi_hest_header header;
  u16 reserved1;
  u8 flags;
  u8 enabled;
  u32 records_to_preallocate;
  u32 max_sections_per_record;
  u64 global_capability_data;
  u64 global_control_data;
  u8 num_hardware_banks;
  u8 reserved3[7];
};

struct acpi_hest_generic {
  struct acpi_hest_header header;
  u16 related_source_id;
  u8 reserved;
  u8 enabled;
  u32 records_to_preallocate;
  u32 max_sections_per_record;
  u32 max_raw_data_length;
  struct acpi_generic_address error_status_address;
  struct acpi_hest_notify notify;
  u32 error_block_length;
} __attribute__((packed));

struct acpi_hest_ia_deferred_check {
  struct acpi_hest_header header;
  u16 reserved1;
  u8 flags;
  u8 enabled;
  u32 records_to_preallocate;
  u32 max_sections_per_record;
  struct acpi_hest_notify notify;
  u8 num_hardware_banks;
  u8 reserved2[3];
};

enum hest_status {
  HEST_ENABLED = 0,
  HEST_DISABLED = 1,
  HEST_NOT_FOUND = 2,
};

typedef int (*apei_hest_func_t)(struct acpi_hest_header*, void*);

struct ghes_arr {
  struct platform_device** ghes_devs;
  unsigned int count;
};

struct acpi_table_erst {
  struct acpi_table_header header;
  u32 header_length;
  u32 reserved;
  u32 entries;
};

enum acpi_erst_actions {
  ACPI_ERST_BEGIN_WRITE = 0,
  ACPI_ERST_BEGIN_READ = 1,
  ACPI_ERST_BEGIN_CLEAR = 2,
  ACPI_ERST_END = 3,
  ACPI_ERST_SET_RECORD_OFFSET = 4,
  ACPI_ERST_EXECUTE_OPERATION = 5,
  ACPI_ERST_CHECK_BUSY_STATUS = 6,
  ACPI_ERST_GET_COMMAND_STATUS = 7,
  ACPI_ERST_GET_RECORD_ID = 8,
  ACPI_ERST_SET_RECORD_ID = 9,
  ACPI_ERST_GET_RECORD_COUNT = 10,
  ACPI_ERST_BEGIN_DUMMY_WRIITE = 11,
  ACPI_ERST_NOT_USED = 12,
  ACPI_ERST_GET_ERROR_RANGE = 13,
  ACPI_ERST_GET_ERROR_LENGTH = 14,
  ACPI_ERST_GET_ERROR_ATTRIBUTES = 15,
  ACPI_ERST_EXECUTE_TIMINGS = 16,
  ACPI_ERST_ACTION_RESERVED = 17,
};

enum acpi_erst_instructions {
  ACPI_ERST_READ_REGISTER = 0,
  ACPI_ERST_READ_REGISTER_VALUE = 1,
  ACPI_ERST_WRITE_REGISTER = 2,
  ACPI_ERST_WRITE_REGISTER_VALUE = 3,
  ACPI_ERST_NOOP = 4,
  ACPI_ERST_LOAD_VAR1 = 5,
  ACPI_ERST_LOAD_VAR2 = 6,
  ACPI_ERST_STORE_VAR1 = 7,
  ACPI_ERST_ADD = 8,
  ACPI_ERST_SUBTRACT = 9,
  ACPI_ERST_ADD_VALUE = 10,
  ACPI_ERST_SUBTRACT_VALUE = 11,
  ACPI_ERST_STALL = 12,
  ACPI_ERST_STALL_WHILE_TRUE = 13,
  ACPI_ERST_SKIP_NEXT_IF_TRUE = 14,
  ACPI_ERST_GOTO = 15,
  ACPI_ERST_SET_SRC_ADDRESS_BASE = 16,
  ACPI_ERST_SET_DST_ADDRESS_BASE = 17,
  ACPI_ERST_MOVE_DATA = 18,
  ACPI_ERST_INSTRUCTION_RESERVED = 19,
};

struct erst_erange {
  u64 base;
  u64 size;
  void* vaddr;
  u32 attr;
};

struct erst_record_id_cache {
  struct mutex lock;
  u64* entries;
  int len;
  int size;
  int refcount;
};

struct cper_pstore_record {
  struct cper_record_header hdr;
  struct cper_section_descriptor sec_hdr;
  char data[0];
};

struct acpi_bert_region {
  u32 block_status;
  u32 raw_data_offset;
  u32 raw_data_length;
  u32 data_length;
  u32 error_severity;
};

struct acpi_hest_generic_status {
  u32 block_status;
  u32 raw_data_offset;
  u32 raw_data_length;
  u32 data_length;
  u32 error_severity;
};

enum acpi_hest_notify_types {
  ACPI_HEST_NOTIFY_POLLED = 0,
  ACPI_HEST_NOTIFY_EXTERNAL = 1,
  ACPI_HEST_NOTIFY_LOCAL = 2,
  ACPI_HEST_NOTIFY_SCI = 3,
  ACPI_HEST_NOTIFY_NMI = 4,
  ACPI_HEST_NOTIFY_CMCI = 5,
  ACPI_HEST_NOTIFY_MCE = 6,
  ACPI_HEST_NOTIFY_GPIO = 7,
  ACPI_HEST_NOTIFY_SEA = 8,
  ACPI_HEST_NOTIFY_SEI = 9,
  ACPI_HEST_NOTIFY_GSIV = 10,
  ACPI_HEST_NOTIFY_SOFTWARE_DELEGATED = 11,
  ACPI_HEST_NOTIFY_RESERVED = 12,
};

struct acpi_hest_generic_v2 {
  struct acpi_hest_header header;
  u16 related_source_id;
  u8 reserved;
  u8 enabled;
  u32 records_to_preallocate;
  u32 max_sections_per_record;
  u32 max_raw_data_length;
  struct acpi_generic_address error_status_address;
  struct acpi_hest_notify notify;
  u32 error_block_length;
  struct acpi_generic_address read_ack_register;
  u64 read_ack_preserve;
  u64 read_ack_write;
} __attribute__((packed));

struct acpi_hest_generic_data {
  u8 section_type[16];
  u32 error_severity;
  u16 revision;
  u8 validation_bits;
  u8 flags;
  u32 error_data_length;
  u8 fru_id[16];
  u8 fru_text[20];
};

struct acpi_hest_generic_data_v300 {
  u8 section_type[16];
  u32 error_severity;
  u16 revision;
  u8 validation_bits;
  u8 flags;
  u32 error_data_length;
  u8 fru_id[16];
  u8 fru_text[20];
  u64 time_stamp;
};

struct cper_sec_proc_arm {
  u32 validation_bits;
  u16 err_info_num;
  u16 context_info_num;
  u32 section_length;
  u8 affinity_level;
  u8 reserved[3];
  u64 mpidr;
  u64 midr;
  u32 running_state;
  u32 psci_state;
};

struct cper_sec_pcie {
  u64 validation_bits;
  u32 port_type;
  struct {
    u8 minor;
    u8 major;
    u8 reserved[2];
  } version;
  u16 command;
  u16 status;
  u32 reserved;
  struct {
    u16 vendor_id;
    u16 device_id;
    u8 class_code[3];
    u8 function;
    u8 device;
    u16 segment;
    u8 bus;
    u8 secondary_bus;
    u16 slot;
    u8 reserved;
  } __attribute__((packed)) device_id;
  struct {
    u32 lower;
    u32 upper;
  } serial_number;
  struct {
    u16 secondary_status;
    u16 control;
  } bridge;
  u8 capability[60];
  u8 aer_info[96];
};

struct ghes {
  union {
    struct acpi_hest_generic* generic;
    struct acpi_hest_generic_v2* generic_v2;
  };
  struct acpi_hest_generic_status* estatus;
  long unsigned int flags;
  union {
    struct list_head list;
    struct timer_list timer;
    unsigned int irq;
  };
};

struct ghes_estatus_node {
  struct llist_node llnode;
  struct acpi_hest_generic* generic;
  struct ghes* ghes;
  int task_work_cpu;
  struct callback_head task_work;
};

struct ghes_estatus_cache {
  u32 estatus_len;
  atomic_t count;
  struct acpi_hest_generic* generic;
  long long unsigned int time_in;
  struct callback_head rcu;
};

struct ghes_vendor_record_entry {
  struct work_struct work;
  int error_severity;
  char vendor_record[0];
};

struct acpi_table_einj {
  struct acpi_table_header header;
  u32 header_length;
  u8 flags;
  u8 reserved[3];
  u32 entries;
};

enum acpi_einj_actions {
  ACPI_EINJ_BEGIN_OPERATION = 0,
  ACPI_EINJ_GET_TRIGGER_TABLE = 1,
  ACPI_EINJ_SET_ERROR_TYPE = 2,
  ACPI_EINJ_GET_ERROR_TYPE = 3,
  ACPI_EINJ_END_OPERATION = 4,
  ACPI_EINJ_EXECUTE_OPERATION = 5,
  ACPI_EINJ_CHECK_BUSY_STATUS = 6,
  ACPI_EINJ_GET_COMMAND_STATUS = 7,
  ACPI_EINJ_SET_ERROR_TYPE_WITH_ADDRESS = 8,
  ACPI_EINJ_GET_EXECUTE_TIMINGS = 9,
  ACPI_EINJ_ACTION_RESERVED = 10,
  ACPI_EINJ_TRIGGER_ERROR = 255,
};

enum acpi_einj_instructions {
  ACPI_EINJ_READ_REGISTER = 0,
  ACPI_EINJ_READ_REGISTER_VALUE = 1,
  ACPI_EINJ_WRITE_REGISTER = 2,
  ACPI_EINJ_WRITE_REGISTER_VALUE = 3,
  ACPI_EINJ_NOOP = 4,
  ACPI_EINJ_FLUSH_CACHELINE = 5,
  ACPI_EINJ_INSTRUCTION_RESERVED = 6,
};

struct acpi_einj_trigger {
  u32 header_size;
  u32 revision;
  u32 table_size;
  u32 entry_count;
};

struct set_error_type_with_address {
  u32 type;
  u32 vendor_extension;
  u32 flags;
  u32 apicid;
  u64 memory_address;
  u64 memory_address_range;
  u32 pcie_sbdf;
};

enum {
  SETWA_FLAGS_APICID = 1,
  SETWA_FLAGS_MEM = 2,
  SETWA_FLAGS_PCIE_SBDF = 4,
};

struct vendor_error_type_extension {
  u32 length;
  u32 pcie_sbdf;
  u16 vendor_id;
  u16 device_id;
  u8 rev_id;
  u8 reserved[3];
};

struct einj_parameter {
  u64 type;
  u64 reserved1;
  u64 reserved2;
  u64 param1;
  u64 param2;
};

struct pnp_resource {
  struct list_head list;
  struct resource res;
};

struct pnp_port {
  resource_size_t min;
  resource_size_t max;
  resource_size_t align;
  resource_size_t size;
  unsigned char flags;
};

typedef struct {
  long unsigned int bits[4];
} pnp_irq_mask_t;

struct pnp_irq {
  pnp_irq_mask_t map;
  unsigned char flags;
};

struct pnp_dma {
  unsigned char map;
  unsigned char flags;
};

struct pnp_mem {
  resource_size_t min;
  resource_size_t max;
  resource_size_t align;
  resource_size_t size;
  unsigned char flags;
};

struct pnp_option {
  struct list_head list;
  unsigned int flags;
  long unsigned int type;
  union {
    struct pnp_port port;
    struct pnp_irq irq;
    struct pnp_dma dma;
    struct pnp_mem mem;
  } u;
};

struct pnp_info_buffer {
  char* buffer;
  char* curr;
  long unsigned int size;
  long unsigned int len;
  int stop;
  int error;
};

typedef struct pnp_info_buffer pnp_info_buffer_t;

struct pnp_fixup {
  char id[7];
  void (*quirk_function)(struct pnp_dev*);
};

struct acpipnp_parse_option_s {
  struct pnp_dev* dev;
  unsigned int option_flags;
};

struct clk_bulk_data {
  const char* id;
  struct clk* clk;
};

struct clk_bulk_devres {
  struct clk_bulk_data* clks;
  int num_clks;
};

struct clk_lookup {
  struct list_head node;
  const char* dev_id;
  const char* con_id;
  struct clk* clk;
  struct clk_hw* clk_hw;
};

struct clk_lookup_alloc {
  struct clk_lookup cl;
  char dev_id[20];
  char con_id[16];
};

struct clk_notifier {
  struct clk* clk;
  struct srcu_notifier_head notifier_head;
  struct list_head node;
};

struct clk {
  struct clk_core* core;
  struct device* dev;
  const char* dev_id;
  const char* con_id;
  long unsigned int min_rate;
  long unsigned int max_rate;
  unsigned int exclusive_count;
  struct hlist_node clks_node;
};

struct clk_notifier_data {
  struct clk* clk;
  long unsigned int old_rate;
  long unsigned int new_rate;
};

struct clk_parent_map;

struct clk_core {
  const char* name;
  const struct clk_ops* ops;
  struct clk_hw* hw;
  struct module* owner;
  struct device* dev;
  struct device_node* of_node;
  struct clk_core* parent;
  struct clk_parent_map* parents;
  u8 num_parents;
  u8 new_parent_index;
  long unsigned int rate;
  long unsigned int req_rate;
  long unsigned int new_rate;
  struct clk_core* new_parent;
  struct clk_core* new_child;
  long unsigned int flags;
  bool orphan;
  bool rpm_enabled;
  unsigned int enable_count;
  unsigned int prepare_count;
  unsigned int protect_count;
  long unsigned int min_rate;
  long unsigned int max_rate;
  long unsigned int accuracy;
  int phase;
  struct clk_duty duty;
  struct hlist_head children;
  struct hlist_node child_node;
  struct hlist_head clks;
  unsigned int notifier_count;
  struct dentry* dentry;
  struct hlist_node debug_node;
  struct kref ref;
};

struct clk_parent_map {
  const struct clk_hw* hw;
  struct clk_core* core;
  const char* fw_name;
  const char* name;
  int index;
};

struct trace_event_raw_clk {
  struct trace_entry ent;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_clk_rate {
  struct trace_entry ent;
  u32 __data_loc_name;
  long unsigned int rate;
  char __data[0];
};

struct trace_event_raw_clk_rate_range {
  struct trace_entry ent;
  u32 __data_loc_name;
  long unsigned int min;
  long unsigned int max;
  char __data[0];
};

struct trace_event_raw_clk_parent {
  struct trace_entry ent;
  u32 __data_loc_name;
  u32 __data_loc_pname;
  char __data[0];
};

struct trace_event_raw_clk_phase {
  struct trace_entry ent;
  u32 __data_loc_name;
  int phase;
  char __data[0];
};

struct trace_event_raw_clk_duty_cycle {
  struct trace_entry ent;
  u32 __data_loc_name;
  unsigned int num;
  unsigned int den;
  char __data[0];
};

struct trace_event_data_offsets_clk {
  u32 name;
};

struct trace_event_data_offsets_clk_rate {
  u32 name;
};

struct trace_event_data_offsets_clk_rate_range {
  u32 name;
};

struct trace_event_data_offsets_clk_parent {
  u32 name;
  u32 pname;
};

struct trace_event_data_offsets_clk_phase {
  u32 name;
};

struct trace_event_data_offsets_clk_duty_cycle {
  u32 name;
};

typedef void (*btf_trace_clk_enable)(void*, struct clk_core*);

typedef void (*btf_trace_clk_enable_complete)(void*, struct clk_core*);

typedef void (*btf_trace_clk_disable)(void*, struct clk_core*);

typedef void (*btf_trace_clk_disable_complete)(void*, struct clk_core*);

typedef void (*btf_trace_clk_prepare)(void*, struct clk_core*);

typedef void (*btf_trace_clk_prepare_complete)(void*, struct clk_core*);

typedef void (*btf_trace_clk_unprepare)(void*, struct clk_core*);

typedef void (*btf_trace_clk_unprepare_complete)(void*, struct clk_core*);

typedef void (
    *btf_trace_clk_set_rate)(void*, struct clk_core*, long unsigned int);

typedef void (*btf_trace_clk_set_rate_complete)(
    void*,
    struct clk_core*,
    long unsigned int);

typedef void (
    *btf_trace_clk_set_min_rate)(void*, struct clk_core*, long unsigned int);

typedef void (
    *btf_trace_clk_set_max_rate)(void*, struct clk_core*, long unsigned int);

typedef void (*btf_trace_clk_set_rate_range)(
    void*,
    struct clk_core*,
    long unsigned int,
    long unsigned int);

typedef void (
    *btf_trace_clk_set_parent)(void*, struct clk_core*, struct clk_core*);

typedef void (*btf_trace_clk_set_parent_complete)(
    void*,
    struct clk_core*,
    struct clk_core*);

typedef void (*btf_trace_clk_set_phase)(void*, struct clk_core*, int);

typedef void (*btf_trace_clk_set_phase_complete)(void*, struct clk_core*, int);

typedef void (
    *btf_trace_clk_set_duty_cycle)(void*, struct clk_core*, struct clk_duty*);

typedef void (*btf_trace_clk_set_duty_cycle_complete)(
    void*,
    struct clk_core*,
    struct clk_duty*);

struct clk_notifier_devres {
  struct clk* clk;
  struct notifier_block* nb;
};

struct clk_div_table {
  unsigned int val;
  unsigned int div;
};

struct clk_divider {
  struct clk_hw hw;
  void* reg;
  u8 shift;
  u8 width;
  u8 flags;
  const struct clk_div_table* table;
  spinlock_t* lock;
};

struct clk_fixed_factor {
  struct clk_hw hw;
  unsigned int mult;
  unsigned int div;
};

struct clk_fixed_rate {
  struct clk_hw hw;
  long unsigned int fixed_rate;
  long unsigned int fixed_accuracy;
  long unsigned int flags;
};

struct clk_gate {
  struct clk_hw hw;
  void* reg;
  u8 bit_idx;
  u8 flags;
  spinlock_t* lock;
};

struct clk_multiplier {
  struct clk_hw hw;
  void* reg;
  u8 shift;
  u8 width;
  u8 flags;
  spinlock_t* lock;
};

struct clk_mux {
  struct clk_hw hw;
  void* reg;
  u32* table;
  u32 mask;
  u8 shift;
  u8 flags;
  spinlock_t* lock;
};

struct clk_composite {
  struct clk_hw hw;
  struct clk_ops ops;
  struct clk_hw* mux_hw;
  struct clk_hw* rate_hw;
  struct clk_hw* gate_hw;
  const struct clk_ops* mux_ops;
  const struct clk_ops* rate_ops;
  const struct clk_ops* gate_ops;
};

struct clk_fractional_divider {
  struct clk_hw hw;
  void* reg;
  u8 mshift;
  u8 mwidth;
  u32 mmask;
  u8 nshift;
  u8 nwidth;
  u32 nmask;
  u8 flags;
  void (*approximation)(
      struct clk_hw*,
      long unsigned int,
      long unsigned int*,
      long unsigned int*,
      long unsigned int*);
  spinlock_t* lock;
};

enum gpiod_flags {
  GPIOD_ASIS = 0,
  GPIOD_IN = 1,
  GPIOD_OUT_LOW = 3,
  GPIOD_OUT_HIGH = 7,
  GPIOD_OUT_LOW_OPEN_DRAIN = 11,
  GPIOD_OUT_HIGH_OPEN_DRAIN = 15,
};

struct clk_gpio {
  struct clk_hw hw;
  struct gpio_desc* gpiod;
};

struct pmc_clk {
  const char* name;
  long unsigned int freq;
  const char* parent_name;
};

struct pmc_clk_data {
  void* base;
  const struct pmc_clk* clks;
  bool critical;
};

struct clk_plt_fixed {
  struct clk_hw* clk;
  struct clk_lookup* lookup;
};

struct clk_plt {
  struct clk_hw hw;
  void* reg;
  struct clk_lookup* lookup;
  spinlock_t lock;
};

struct clk_plt_data {
  struct clk_plt_fixed** parents;
  u8 nparents;
  struct clk_plt* clks[6];
  struct clk_lookup* mclk_lookup;
  struct clk_lookup* ether_clk_lookup;
};

typedef s32 dma_cookie_t;

enum dma_status {
  DMA_COMPLETE = 0,
  DMA_IN_PROGRESS = 1,
  DMA_PAUSED = 2,
  DMA_ERROR = 3,
  DMA_OUT_OF_ORDER = 4,
};

enum dma_transaction_type {
  DMA_MEMCPY = 0,
  DMA_XOR = 1,
  DMA_PQ = 2,
  DMA_XOR_VAL = 3,
  DMA_PQ_VAL = 4,
  DMA_MEMSET = 5,
  DMA_MEMSET_SG = 6,
  DMA_INTERRUPT = 7,
  DMA_PRIVATE = 8,
  DMA_ASYNC_TX = 9,
  DMA_SLAVE = 10,
  DMA_CYCLIC = 11,
  DMA_INTERLEAVE = 12,
  DMA_COMPLETION_NO_ORDER = 13,
  DMA_REPEAT = 14,
  DMA_LOAD_EOT = 15,
  DMA_TX_TYPE_END = 16,
};

enum dma_transfer_direction {
  DMA_MEM_TO_MEM = 0,
  DMA_MEM_TO_DEV = 1,
  DMA_DEV_TO_MEM = 2,
  DMA_DEV_TO_DEV = 3,
  DMA_TRANS_NONE = 4,
};

struct data_chunk {
  size_t size;
  size_t icg;
  size_t dst_icg;
  size_t src_icg;
};

struct dma_interleaved_template {
  dma_addr_t src_start;
  dma_addr_t dst_start;
  enum dma_transfer_direction dir;
  bool src_inc;
  bool dst_inc;
  bool src_sgl;
  bool dst_sgl;
  size_t numf;
  size_t frame_size;
  struct data_chunk sgl[0];
};

enum dma_ctrl_flags {
  DMA_PREP_INTERRUPT = 1,
  DMA_CTRL_ACK = 2,
  DMA_PREP_PQ_DISABLE_P = 4,
  DMA_PREP_PQ_DISABLE_Q = 8,
  DMA_PREP_CONTINUE = 16,
  DMA_PREP_FENCE = 32,
  DMA_CTRL_REUSE = 64,
  DMA_PREP_CMD = 128,
  DMA_PREP_REPEAT = 256,
  DMA_PREP_LOAD_EOT = 512,
};

enum sum_check_bits {
  SUM_CHECK_P = 0,
  SUM_CHECK_Q = 1,
};

enum sum_check_flags {
  SUM_CHECK_P_RESULT = 1,
  SUM_CHECK_Q_RESULT = 2,
};

typedef struct {
  long unsigned int bits[1];
} dma_cap_mask_t;

enum dma_desc_metadata_mode {
  DESC_METADATA_NONE = 0,
  DESC_METADATA_CLIENT = 1,
  DESC_METADATA_ENGINE = 2,
};

struct dma_chan_percpu {
  long unsigned int memcpy_count;
  long unsigned int bytes_transferred;
};

struct dma_router {
  struct device* dev;
  void (*route_free)(struct device*, void*);
};

struct dma_device;

struct dma_chan_dev;

struct dma_chan {
  struct dma_device* device;
  struct device* slave;
  dma_cookie_t cookie;
  dma_cookie_t completed_cookie;
  int chan_id;
  struct dma_chan_dev* dev;
  const char* name;
  char* dbg_client_name;
  struct list_head device_node;
  struct dma_chan_percpu* local;
  int client_count;
  int table_count;
  struct dma_router* router;
  void* route_data;
  void* private;
};

typedef bool (*dma_filter_fn)(struct dma_chan*, void*);

struct dma_slave_map;

struct dma_filter {
  dma_filter_fn fn;
  int mapcnt;
  const struct dma_slave_map* map;
};

enum dmaengine_alignment {
  DMAENGINE_ALIGN_1_BYTE = 0,
  DMAENGINE_ALIGN_2_BYTES = 1,
  DMAENGINE_ALIGN_4_BYTES = 2,
  DMAENGINE_ALIGN_8_BYTES = 3,
  DMAENGINE_ALIGN_16_BYTES = 4,
  DMAENGINE_ALIGN_32_BYTES = 5,
  DMAENGINE_ALIGN_64_BYTES = 6,
  DMAENGINE_ALIGN_128_BYTES = 7,
  DMAENGINE_ALIGN_256_BYTES = 8,
};

enum dma_residue_granularity {
  DMA_RESIDUE_GRANULARITY_DESCRIPTOR = 0,
  DMA_RESIDUE_GRANULARITY_SEGMENT = 1,
  DMA_RESIDUE_GRANULARITY_BURST = 2,
};

struct dma_async_tx_descriptor;

struct dma_slave_caps;

struct dma_slave_config;

struct dma_tx_state;

struct dma_device {
  struct kref ref;
  unsigned int chancnt;
  unsigned int privatecnt;
  struct list_head channels;
  struct list_head global_node;
  struct dma_filter filter;
  dma_cap_mask_t cap_mask;
  enum dma_desc_metadata_mode desc_metadata_modes;
  short unsigned int max_xor;
  short unsigned int max_pq;
  enum dmaengine_alignment copy_align;
  enum dmaengine_alignment xor_align;
  enum dmaengine_alignment pq_align;
  enum dmaengine_alignment fill_align;
  int dev_id;
  struct device* dev;
  struct module* owner;
  struct ida chan_ida;
  struct mutex chan_mutex;
  u32 src_addr_widths;
  u32 dst_addr_widths;
  u32 directions;
  u32 min_burst;
  u32 max_burst;
  u32 max_sg_burst;
  bool descriptor_reuse;
  enum dma_residue_granularity residue_granularity;
  int (*device_alloc_chan_resources)(struct dma_chan*);
  int (*device_router_config)(struct dma_chan*);
  void (*device_free_chan_resources)(struct dma_chan*);
  struct dma_async_tx_descriptor* (*device_prep_dma_memcpy)(
      struct dma_chan*,
      dma_addr_t,
      dma_addr_t,
      size_t,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_xor)(
      struct dma_chan*,
      dma_addr_t,
      dma_addr_t*,
      unsigned int,
      size_t,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_xor_val)(
      struct dma_chan*,
      dma_addr_t*,
      unsigned int,
      size_t,
      enum sum_check_flags*,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_pq)(
      struct dma_chan*,
      dma_addr_t*,
      dma_addr_t*,
      unsigned int,
      const unsigned char*,
      size_t,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_pq_val)(
      struct dma_chan*,
      dma_addr_t*,
      dma_addr_t*,
      unsigned int,
      const unsigned char*,
      size_t,
      enum sum_check_flags*,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_memset)(
      struct dma_chan*,
      dma_addr_t,
      int,
      size_t,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_memset_sg)(
      struct dma_chan*,
      struct scatterlist*,
      unsigned int,
      int,
      long unsigned int);
  struct dma_async_tx_descriptor* (
      *device_prep_dma_interrupt)(struct dma_chan*, long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_slave_sg)(
      struct dma_chan*,
      struct scatterlist*,
      unsigned int,
      enum dma_transfer_direction,
      long unsigned int,
      void*);
  struct dma_async_tx_descriptor* (*device_prep_dma_cyclic)(
      struct dma_chan*,
      dma_addr_t,
      size_t,
      size_t,
      enum dma_transfer_direction,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_interleaved_dma)(
      struct dma_chan*,
      struct dma_interleaved_template*,
      long unsigned int);
  struct dma_async_tx_descriptor* (*device_prep_dma_imm_data)(
      struct dma_chan*,
      dma_addr_t,
      u64,
      long unsigned int);
  void (*device_caps)(struct dma_chan*, struct dma_slave_caps*);
  int (*device_config)(struct dma_chan*, struct dma_slave_config*);
  int (*device_pause)(struct dma_chan*);
  int (*device_resume)(struct dma_chan*);
  int (*device_terminate_all)(struct dma_chan*);
  void (*device_synchronize)(struct dma_chan*);
  enum dma_status (
      *device_tx_status)(struct dma_chan*, dma_cookie_t, struct dma_tx_state*);
  void (*device_issue_pending)(struct dma_chan*);
  void (*device_release)(struct dma_device*);
  void (*dbg_summary_show)(struct seq_file*, struct dma_device*);
  struct dentry* dbg_dev_root;
};

struct dma_chan_dev {
  struct dma_chan* chan;
  struct device device;
  int dev_id;
  bool chan_dma_dev;
};

enum dma_slave_buswidth {
  DMA_SLAVE_BUSWIDTH_UNDEFINED = 0,
  DMA_SLAVE_BUSWIDTH_1_BYTE = 1,
  DMA_SLAVE_BUSWIDTH_2_BYTES = 2,
  DMA_SLAVE_BUSWIDTH_3_BYTES = 3,
  DMA_SLAVE_BUSWIDTH_4_BYTES = 4,
  DMA_SLAVE_BUSWIDTH_8_BYTES = 8,
  DMA_SLAVE_BUSWIDTH_16_BYTES = 16,
  DMA_SLAVE_BUSWIDTH_32_BYTES = 32,
  DMA_SLAVE_BUSWIDTH_64_BYTES = 64,
};

struct dma_slave_config {
  enum dma_transfer_direction direction;
  phys_addr_t src_addr;
  phys_addr_t dst_addr;
  enum dma_slave_buswidth src_addr_width;
  enum dma_slave_buswidth dst_addr_width;
  u32 src_maxburst;
  u32 dst_maxburst;
  u32 src_port_window_size;
  u32 dst_port_window_size;
  bool device_fc;
  unsigned int slave_id;
  void* peripheral_config;
  size_t peripheral_size;
};

struct dma_slave_caps {
  u32 src_addr_widths;
  u32 dst_addr_widths;
  u32 directions;
  u32 min_burst;
  u32 max_burst;
  u32 max_sg_burst;
  bool cmd_pause;
  bool cmd_resume;
  bool cmd_terminate;
  enum dma_residue_granularity residue_granularity;
  bool descriptor_reuse;
};

typedef void (*dma_async_tx_callback)(void*);

enum dmaengine_tx_result {
  DMA_TRANS_NOERROR = 0,
  DMA_TRANS_READ_FAILED = 1,
  DMA_TRANS_WRITE_FAILED = 2,
  DMA_TRANS_ABORTED = 3,
};

struct dmaengine_result {
  enum dmaengine_tx_result result;
  u32 residue;
};

typedef void (
    *dma_async_tx_callback_result)(void*, const struct dmaengine_result*);

struct dmaengine_unmap_data {
  u16 map_cnt;
  u8 to_cnt;
  u8 from_cnt;
  u8 bidi_cnt;
  struct device* dev;
  struct kref kref;
  size_t len;
  dma_addr_t addr[0];
};

struct dma_descriptor_metadata_ops {
  int (*attach)(struct dma_async_tx_descriptor*, void*, size_t);
  void* (*get_ptr)(struct dma_async_tx_descriptor*, size_t*, size_t*);
  int (*set_len)(struct dma_async_tx_descriptor*, size_t);
};

struct dma_async_tx_descriptor {
  dma_cookie_t cookie;
  enum dma_ctrl_flags flags;
  dma_addr_t phys;
  struct dma_chan* chan;
  dma_cookie_t (*tx_submit)(struct dma_async_tx_descriptor*);
  int (*desc_free)(struct dma_async_tx_descriptor*);
  dma_async_tx_callback callback;
  dma_async_tx_callback_result callback_result;
  void* callback_param;
  struct dmaengine_unmap_data* unmap;
  enum dma_desc_metadata_mode desc_metadata_mode;
  struct dma_descriptor_metadata_ops* metadata_ops;
};

struct dma_tx_state {
  dma_cookie_t last;
  dma_cookie_t used;
  u32 residue;
  u32 in_flight_bytes;
};

struct dma_slave_map {
  const char* devname;
  const char* slave;
  void* param;
};

struct dma_chan_tbl_ent {
  struct dma_chan* chan;
};

struct dmaengine_unmap_pool {
  struct kmem_cache* cache;
  const char* name;
  mempool_t* pool;
  size_t size;
};

struct acpi_table_csrt {
  struct acpi_table_header header;
};

struct acpi_csrt_group {
  u32 length;
  u32 vendor_id;
  u32 subvendor_id;
  u16 device_id;
  u16 subdevice_id;
  u16 revision;
  u16 reserved;
  u32 shared_info_length;
};

struct acpi_csrt_shared_info {
  u16 major_version;
  u16 minor_version;
  u32 mmio_base_low;
  u32 mmio_base_high;
  u32 gsi_interrupt;
  u8 interrupt_polarity;
  u8 interrupt_mode;
  u8 num_channels;
  u8 dma_address_width;
  u16 base_request_line;
  u16 num_handshake_signals;
  u32 max_block_size;
};

struct acpi_dma_spec {
  int chan_id;
  int slave_id;
  struct device* dev;
};

struct acpi_dma {
  struct list_head dma_controllers;
  struct device* dev;
  struct dma_chan* (*acpi_dma_xlate)(struct acpi_dma_spec*, struct acpi_dma*);
  void* data;
  short unsigned int base_request_line;
  short unsigned int end_request_line;
};

struct acpi_dma_filter_info {
  dma_cap_mask_t dma_cap;
  dma_filter_fn filter_fn;
};

struct acpi_dma_parser_data {
  struct acpi_dma_spec dma_spec;
  size_t index;
  size_t n;
};

struct dca_ops;

struct dca_provider {
  struct list_head node;
  const struct dca_ops* ops;
  struct device* cd;
  int id;
};

struct dca_ops {
  int (*add_requester)(struct dca_provider*, struct device*);
  int (*remove_requester)(struct dca_provider*, struct device*);
  u8 (*get_tag)(struct dca_provider*, struct device*, int);
  int (*dev_managed)(struct dca_provider*, struct device*);
};

struct ioat_dma_descriptor {
  uint32_t size;
  union {
    uint32_t ctl;
    struct {
      unsigned int int_en : 1;
      unsigned int src_snoop_dis : 1;
      unsigned int dest_snoop_dis : 1;
      unsigned int compl_write : 1;
      unsigned int fence : 1;
      unsigned int null : 1;
      unsigned int src_brk : 1;
      unsigned int dest_brk : 1;
      unsigned int bundle : 1;
      unsigned int dest_dca : 1;
      unsigned int hint : 1;
      unsigned int rsvd2 : 13;
      unsigned int op : 8;
    } ctl_f;
  };
  uint64_t src_addr;
  uint64_t dst_addr;
  uint64_t next;
  uint64_t rsv1;
  uint64_t rsv2;
  union {
    uint64_t user1;
    uint64_t tx_cnt;
  };
  uint64_t user2;
};

struct ioat_xor_descriptor {
  uint32_t size;
  union {
    uint32_t ctl;
    struct {
      unsigned int int_en : 1;
      unsigned int src_snoop_dis : 1;
      unsigned int dest_snoop_dis : 1;
      unsigned int compl_write : 1;
      unsigned int fence : 1;
      unsigned int src_cnt : 3;
      unsigned int bundle : 1;
      unsigned int dest_dca : 1;
      unsigned int hint : 1;
      unsigned int rsvd : 13;
      unsigned int op : 8;
    } ctl_f;
  };
  uint64_t src_addr;
  uint64_t dst_addr;
  uint64_t next;
  uint64_t src_addr2;
  uint64_t src_addr3;
  uint64_t src_addr4;
  uint64_t src_addr5;
};

struct ioat_xor_ext_descriptor {
  uint64_t src_addr6;
  uint64_t src_addr7;
  uint64_t src_addr8;
  uint64_t next;
  uint64_t rsvd[4];
};

struct ioat_pq_descriptor {
  union {
    uint32_t size;
    uint32_t dwbes;
    struct {
      unsigned int rsvd : 25;
      unsigned int p_val_err : 1;
      unsigned int q_val_err : 1;
      unsigned int rsvd1 : 4;
      unsigned int wbes : 1;
    } dwbes_f;
  };
  union {
    uint32_t ctl;
    struct {
      unsigned int int_en : 1;
      unsigned int src_snoop_dis : 1;
      unsigned int dest_snoop_dis : 1;
      unsigned int compl_write : 1;
      unsigned int fence : 1;
      unsigned int src_cnt : 3;
      unsigned int bundle : 1;
      unsigned int dest_dca : 1;
      unsigned int hint : 1;
      unsigned int p_disable : 1;
      unsigned int q_disable : 1;
      unsigned int rsvd2 : 2;
      unsigned int wb_en : 1;
      unsigned int prl_en : 1;
      unsigned int rsvd3 : 7;
      unsigned int op : 8;
    } ctl_f;
  };
  uint64_t src_addr;
  uint64_t p_addr;
  uint64_t next;
  uint64_t src_addr2;
  union {
    uint64_t src_addr3;
    uint64_t sed_addr;
  };
  uint8_t coef[8];
  uint64_t q_addr;
};

struct ioat_pq_ext_descriptor {
  uint64_t src_addr4;
  uint64_t src_addr5;
  uint64_t src_addr6;
  uint64_t next;
  uint64_t src_addr7;
  uint64_t src_addr8;
  uint64_t rsvd[2];
};

struct ioat_pq_update_descriptor {
  uint32_t size;
  union {
    uint32_t ctl;
    struct {
      unsigned int int_en : 1;
      unsigned int src_snoop_dis : 1;
      unsigned int dest_snoop_dis : 1;
      unsigned int compl_write : 1;
      unsigned int fence : 1;
      unsigned int src_cnt : 3;
      unsigned int bundle : 1;
      unsigned int dest_dca : 1;
      unsigned int hint : 1;
      unsigned int p_disable : 1;
      unsigned int q_disable : 1;
      unsigned int rsvd : 3;
      unsigned int coef : 8;
      unsigned int op : 8;
    } ctl_f;
  };
  uint64_t src_addr;
  uint64_t p_addr;
  uint64_t next;
  uint64_t src_addr2;
  uint64_t p_src;
  uint64_t q_src;
  uint64_t q_addr;
};

struct ioat_raw_descriptor {
  uint64_t field[8];
};

struct ioat_sed_raw_descriptor {
  uint64_t a[8];
  uint64_t b[8];
  uint64_t c[8];
};

enum ioat_irq_mode {
  IOAT_NOIRQ = 0,
  IOAT_MSIX = 1,
  IOAT_MSI = 2,
  IOAT_INTX = 3,
};

struct dma_pool___2;

struct ioatdma_chan;

struct ioatdma_device {
  struct pci_dev* pdev;
  void* reg_base;
  struct dma_pool___2* completion_pool;
  struct dma_pool___2* sed_hw_pool[5];
  struct dma_device dma_dev;
  u8 version;
  struct msix_entry msix_entries[4];
  struct ioatdma_chan* idx[4];
  struct dca_provider* dca;
  enum ioat_irq_mode irq_mode;
  u32 cap;
  u64 msixtba0;
  u64 msixdata0;
  u32 msixpba;
};

struct ioat_descs {
  void* virt;
  dma_addr_t hw;
};

struct ioat_ring_ent;

struct ioatdma_chan {
  struct dma_chan dma_chan;
  void* reg_base;
  dma_addr_t last_completion;
  spinlock_t cleanup_lock;
  long unsigned int state;
  struct timer_list timer;
  struct ioatdma_device* ioat_dma;
  dma_addr_t completion_dma;
  u64* completion;
  struct tasklet_struct cleanup_task;
  struct kobject kobj;
  size_t xfercap_log;
  u16 head;
  u16 issued;
  u16 tail;
  u16 dmacount;
  u16 alloc_order;
  u16 produce;
  struct ioat_ring_ent** ring;
  spinlock_t prep_lock;
  struct ioat_descs descs[8];
  int desc_chunks;
  int intr_coalesce;
  int prev_intr_coalesce;
};

struct ioat_sed_ent;

struct ioat_ring_ent {
  union {
    struct ioat_dma_descriptor* hw;
    struct ioat_xor_descriptor* xor ;
    struct ioat_xor_ext_descriptor* xor_ex;
    struct ioat_pq_descriptor* pq;
    struct ioat_pq_ext_descriptor* pq_ex;
    struct ioat_pq_update_descriptor* pqu;
    struct ioat_raw_descriptor* raw;
  };
  size_t len;
  struct dma_async_tx_descriptor txd;
  enum sum_check_flags* result;
  struct ioat_sed_ent* sed;
};

struct ioat_sysfs_entry {
  struct attribute attr;
  ssize_t (*show)(struct dma_chan*, char*);
  ssize_t (*store)(struct dma_chan*, const char*, size_t);
};

struct ioat_sed_ent {
  struct ioat_sed_raw_descriptor* hw;
  dma_addr_t dma;
  struct ioat_ring_ent* parent;
  unsigned int hw_pool;
};

struct dmaengine_desc_callback {
  dma_async_tx_callback callback;
  dma_async_tx_callback_result callback_result;
  void* callback_param;
};

struct ioat_pq16a_descriptor {
  uint8_t coef[8];
  uint64_t src_addr3;
  uint64_t src_addr4;
  uint64_t src_addr5;
  uint64_t src_addr6;
  uint64_t src_addr7;
  uint64_t src_addr8;
  uint64_t src_addr9;
};

struct ioat_dca_slot {
  struct pci_dev* pdev;
  u16 rid;
};

struct ioat_dca_priv {
  void* iobase;
  void* dca_base;
  int max_requesters;
  int requester_count;
  u8 tag_map[8];
  struct ioat_dca_slot req_slots[0];
};

struct virtio_driver {
  struct device_driver driver;
  const struct virtio_device_id* id_table;
  const unsigned int* feature_table;
  unsigned int feature_table_size;
  const unsigned int* feature_table_legacy;
  unsigned int feature_table_size_legacy;
  int (*validate)(struct virtio_device*);
  int (*probe)(struct virtio_device*);
  void (*scan)(struct virtio_device*);
  void (*remove)(struct virtio_device*);
  void (*config_changed)(struct virtio_device*);
};

typedef __u16 __virtio16;

typedef __u32 __virtio32;

typedef __u64 __virtio64;

struct vring_desc {
  __virtio64 addr;
  __virtio32 len;
  __virtio16 flags;
  __virtio16 next;
};

struct vring_avail {
  __virtio16 flags;
  __virtio16 idx;
  __virtio16 ring[0];
};

struct vring_used_elem {
  __virtio32 id;
  __virtio32 len;
};

typedef struct vring_used_elem vring_used_elem_t;

struct vring_used {
  __virtio16 flags;
  __virtio16 idx;
  vring_used_elem_t ring[0];
};

typedef struct vring_desc vring_desc_t;

typedef struct vring_avail vring_avail_t;

typedef struct vring_used vring_used_t;

struct vring {
  unsigned int num;
  vring_desc_t* desc;
  vring_avail_t* avail;
  vring_used_t* used;
};

struct vring_packed_desc_event {
  __le16 off_wrap;
  __le16 flags;
};

struct vring_packed_desc {
  __le64 addr;
  __le32 len;
  __le16 id;
  __le16 flags;
};

struct vring_desc_state_split {
  void* data;
  struct vring_desc* indir_desc;
};

struct vring_desc_state_packed {
  void* data;
  struct vring_packed_desc* indir_desc;
  u16 num;
  u16 next;
  u16 last;
};

struct vring_desc_extra_packed {
  dma_addr_t addr;
  u32 len;
  u16 flags;
};

struct vring_virtqueue {
  struct virtqueue vq;
  bool packed_ring;
  bool use_dma_api;
  bool weak_barriers;
  bool broken;
  bool indirect;
  bool event;
  unsigned int free_head;
  unsigned int num_added;
  u16 last_used_idx;
  union {
    struct {
      struct vring vring;
      u16 avail_flags_shadow;
      u16 avail_idx_shadow;
      struct vring_desc_state_split* desc_state;
      dma_addr_t queue_dma_addr;
      size_t queue_size_in_bytes;
    } split;
    struct {
      struct {
        unsigned int num;
        struct vring_packed_desc* desc;
        struct vring_packed_desc_event* driver;
        struct vring_packed_desc_event* device;
      } vring;
      bool avail_wrap_counter;
      bool used_wrap_counter;
      u16 avail_used_flags;
      u16 next_avail_idx;
      u16 event_flags_shadow;
      struct vring_desc_state_packed* desc_state;
      struct vring_desc_extra_packed* desc_extra;
      dma_addr_t ring_dma_addr;
      dma_addr_t driver_event_dma_addr;
      dma_addr_t device_event_dma_addr;
      size_t ring_size_in_bytes;
      size_t event_size_in_bytes;
    } packed;
  };
  bool (*notify)(struct virtqueue*);
  bool we_own_ring;
};

struct virtio_pci_common_cfg {
  __le32 device_feature_select;
  __le32 device_feature;
  __le32 guest_feature_select;
  __le32 guest_feature;
  __le16 msix_config;
  __le16 num_queues;
  __u8 device_status;
  __u8 config_generation;
  __le16 queue_select;
  __le16 queue_size;
  __le16 queue_msix_vector;
  __le16 queue_enable;
  __le16 queue_notify_off;
  __le32 queue_desc_lo;
  __le32 queue_desc_hi;
  __le32 queue_avail_lo;
  __le32 queue_avail_hi;
  __le32 queue_used_lo;
  __le32 queue_used_hi;
};

struct virtio_pci_modern_device {
  struct pci_dev* pci_dev;
  struct virtio_pci_common_cfg* common;
  void* device;
  void* notify_base;
  u8* isr;
  size_t notify_len;
  size_t device_len;
  int notify_map_cap;
  u32 notify_offset_multiplier;
  int modern_bars;
  struct virtio_device_id id;
};

struct virtio_pci_vq_info {
  struct virtqueue* vq;
  struct list_head node;
  unsigned int msix_vector;
};

struct virtio_pci_device {
  struct virtio_device vdev;
  struct pci_dev* pci_dev;
  struct virtio_pci_modern_device mdev;
  u8* isr;
  void* ioaddr;
  spinlock_t lock;
  struct list_head virtqueues;
  struct virtio_pci_vq_info** vqs;
  int msix_enabled;
  int intx_enabled;
  cpumask_var_t* msix_affinity_masks;
  char (*msix_names)[256];
  unsigned int msix_vectors;
  unsigned int msix_used_vectors;
  bool per_vq_vectors;
  struct virtqueue* (*setup_vq)(
      struct virtio_pci_device*,
      struct virtio_pci_vq_info*,
      unsigned int,
      void (*)(struct virtqueue*),
      const char*,
      bool,
      u16);
  void (*del_vq)(struct virtio_pci_vq_info*);
  u16 (*config_vector)(struct virtio_pci_device*, u16);
};

enum {
  VP_MSIX_CONFIG_VECTOR = 0,
  VP_MSIX_VQ_VECTOR = 1,
};

struct serial_struct32 {
  compat_int_t type;
  compat_int_t line;
  compat_uint_t port;
  compat_int_t irq;
  compat_int_t flags;
  compat_int_t xmit_fifo_size;
  compat_int_t custom_divisor;
  compat_int_t baud_base;
  short unsigned int close_delay;
  char io_type;
  char reserved_char;
  compat_int_t hub6;
  short unsigned int closing_wait;
  short unsigned int closing_wait2;
  compat_uint_t iomem_base;
  short unsigned int iomem_reg_shift;
  unsigned int port_high;
  compat_int_t reserved;
};

struct n_tty_data {
  size_t read_head;
  size_t commit_head;
  size_t canon_head;
  size_t echo_head;
  size_t echo_commit;
  size_t echo_mark;
  long unsigned int char_map[4];
  long unsigned int overrun_time;
  int num_overrun;
  bool no_room;
  unsigned char lnext : 1;
  unsigned char erasing : 1;
  unsigned char raw : 1;
  unsigned char real_raw : 1;
  unsigned char icanon : 1;
  unsigned char push : 1;
  char read_buf[4096];
  long unsigned int read_flags[64];
  unsigned char echo_buf[4096];
  size_t read_tail;
  size_t line_start;
  unsigned int column;
  unsigned int canon_column;
  size_t echo_tail;
  struct mutex atomic_read_lock;
  struct mutex output_lock;
};

enum {
  ERASE = 0,
  WERASE = 1,
  KILL = 2,
};

struct termios {
  tcflag_t c_iflag;
  tcflag_t c_oflag;
  tcflag_t c_cflag;
  tcflag_t c_lflag;
  cc_t c_line;
  cc_t c_cc[19];
};

struct termios2 {
  tcflag_t c_iflag;
  tcflag_t c_oflag;
  tcflag_t c_cflag;
  tcflag_t c_lflag;
  cc_t c_line;
  cc_t c_cc[19];
  speed_t c_ispeed;
  speed_t c_ospeed;
};

struct termio {
  short unsigned int c_iflag;
  short unsigned int c_oflag;
  short unsigned int c_cflag;
  short unsigned int c_lflag;
  unsigned char c_line;
  unsigned char c_cc[8];
};

struct ldsem_waiter {
  struct list_head list;
  struct task_struct* task;
};

struct pts_fs_info___2;

struct tty_audit_buf {
  struct mutex mutex;
  dev_t dev;
  unsigned int icanon : 1;
  size_t valid;
  unsigned char* data;
};

struct input_id {
  __u16 bustype;
  __u16 vendor;
  __u16 product;
  __u16 version;
};

struct input_absinfo {
  __s32 value;
  __s32 minimum;
  __s32 maximum;
  __s32 fuzz;
  __s32 flat;
  __s32 resolution;
};

struct input_keymap_entry {
  __u8 flags;
  __u8 len;
  __u16 index;
  __u32 keycode;
  __u8 scancode[32];
};

struct ff_replay {
  __u16 length;
  __u16 delay;
};

struct ff_trigger {
  __u16 button;
  __u16 interval;
};

struct ff_envelope {
  __u16 attack_length;
  __u16 attack_level;
  __u16 fade_length;
  __u16 fade_level;
};

struct ff_constant_effect {
  __s16 level;
  struct ff_envelope envelope;
};

struct ff_ramp_effect {
  __s16 start_level;
  __s16 end_level;
  struct ff_envelope envelope;
};

struct ff_condition_effect {
  __u16 right_saturation;
  __u16 left_saturation;
  __s16 right_coeff;
  __s16 left_coeff;
  __u16 deadband;
  __s16 center;
};

struct ff_periodic_effect {
  __u16 waveform;
  __u16 period;
  __s16 magnitude;
  __s16 offset;
  __u16 phase;
  struct ff_envelope envelope;
  __u32 custom_len;
  __s16* custom_data;
};

struct ff_rumble_effect {
  __u16 strong_magnitude;
  __u16 weak_magnitude;
};

struct ff_effect {
  __u16 type;
  __s16 id;
  __u16 direction;
  struct ff_trigger trigger;
  struct ff_replay replay;
  union {
    struct ff_constant_effect constant;
    struct ff_ramp_effect ramp;
    struct ff_periodic_effect periodic;
    struct ff_condition_effect condition[2];
    struct ff_rumble_effect rumble;
  } u;
};

struct input_device_id {
  kernel_ulong_t flags;
  __u16 bustype;
  __u16 vendor;
  __u16 product;
  __u16 version;
  kernel_ulong_t evbit[1];
  kernel_ulong_t keybit[12];
  kernel_ulong_t relbit[1];
  kernel_ulong_t absbit[1];
  kernel_ulong_t mscbit[1];
  kernel_ulong_t ledbit[1];
  kernel_ulong_t sndbit[1];
  kernel_ulong_t ffbit[2];
  kernel_ulong_t swbit[1];
  kernel_ulong_t propbit[1];
  kernel_ulong_t driver_info;
};

struct input_value {
  __u16 type;
  __u16 code;
  __s32 value;
};

enum input_clock_type {
  INPUT_CLK_REAL = 0,
  INPUT_CLK_MONO = 1,
  INPUT_CLK_BOOT = 2,
  INPUT_CLK_MAX = 3,
};

struct ff_device;

struct input_dev_poller;

struct input_mt;

struct input_handle;

struct input_dev {
  const char* name;
  const char* phys;
  const char* uniq;
  struct input_id id;
  long unsigned int propbit[1];
  long unsigned int evbit[1];
  long unsigned int keybit[12];
  long unsigned int relbit[1];
  long unsigned int absbit[1];
  long unsigned int mscbit[1];
  long unsigned int ledbit[1];
  long unsigned int sndbit[1];
  long unsigned int ffbit[2];
  long unsigned int swbit[1];
  unsigned int hint_events_per_packet;
  unsigned int keycodemax;
  unsigned int keycodesize;
  void* keycode;
  int (*setkeycode)(
      struct input_dev*,
      const struct input_keymap_entry*,
      unsigned int*);
  int (*getkeycode)(struct input_dev*, struct input_keymap_entry*);
  struct ff_device* ff;
  struct input_dev_poller* poller;
  unsigned int repeat_key;
  struct timer_list timer;
  int rep[2];
  struct input_mt* mt;
  struct input_absinfo* absinfo;
  long unsigned int key[12];
  long unsigned int led[1];
  long unsigned int snd[1];
  long unsigned int sw[1];
  int (*open)(struct input_dev*);
  void (*close)(struct input_dev*);
  int (*flush)(struct input_dev*, struct file*);
  int (*event)(struct input_dev*, unsigned int, unsigned int, int);
  struct input_handle* grab;
  spinlock_t event_lock;
  struct mutex mutex;
  unsigned int users;
  bool going_away;
  struct device dev;
  struct list_head h_list;
  struct list_head node;
  unsigned int num_vals;
  unsigned int max_vals;
  struct input_value* vals;
  bool devres_managed;
  ktime_t timestamp[3];
  bool inhibited;
};

struct ff_device {
  int (*upload)(struct input_dev*, struct ff_effect*, struct ff_effect*);
  int (*erase)(struct input_dev*, int);
  int (*playback)(struct input_dev*, int, int);
  void (*set_gain)(struct input_dev*, u16);
  void (*set_autocenter)(struct input_dev*, u16);
  void (*destroy)(struct ff_device*);
  void* private;
  long unsigned int ffbit[2];
  struct mutex mutex;
  int max_effects;
  struct ff_effect* effects;
  struct file* effect_owners[0];
};

struct input_handler;

struct input_handle {
  void* private;
  int open;
  const char* name;
  struct input_dev* dev;
  struct input_handler* handler;
  struct list_head d_node;
  struct list_head h_node;
};

struct input_handler {
  void* private;
  void (*event)(struct input_handle*, unsigned int, unsigned int, int);
  void (*events)(struct input_handle*, const struct input_value*, unsigned int);
  bool (*filter)(struct input_handle*, unsigned int, unsigned int, int);
  bool (*match)(struct input_handler*, struct input_dev*);
  int (*connect)(
      struct input_handler*,
      struct input_dev*,
      const struct input_device_id*);
  void (*disconnect)(struct input_handle*);
  void (*start)(struct input_handle*);
  bool legacy_minors;
  int minor;
  const char* name;
  const struct input_device_id* id_table;
  struct list_head h_list;
  struct list_head node;
};

struct sysrq_state {
  struct input_handle handle;
  struct work_struct reinject_work;
  long unsigned int key_down[12];
  unsigned int alt;
  unsigned int alt_use;
  unsigned int shift;
  unsigned int shift_use;
  bool active;
  bool need_reinject;
  bool reinjecting;
  bool reset_canceled;
  bool reset_requested;
  long unsigned int reset_keybit[12];
  int reset_seq_len;
  int reset_seq_cnt;
  int reset_seq_version;
  struct timer_list keyreset_timer;
};

struct unipair {
  short unsigned int unicode;
  short unsigned int fontpos;
};

struct unimapdesc {
  short unsigned int entry_ct;
  struct unipair* entries;
};

struct kbdiacruc {
  unsigned int diacr;
  unsigned int base;
  unsigned int result;
};

struct kbd_repeat {
  int delay;
  int period;
};

struct console_font_op {
  unsigned int op;
  unsigned int flags;
  unsigned int width;
  unsigned int height;
  unsigned int charcount;
  unsigned char* data;
};

struct vt_stat {
  short unsigned int v_active;
  short unsigned int v_signal;
  short unsigned int v_state;
};

struct vt_sizes {
  short unsigned int v_rows;
  short unsigned int v_cols;
  short unsigned int v_scrollsize;
};

struct vt_consize {
  short unsigned int v_rows;
  short unsigned int v_cols;
  short unsigned int v_vlin;
  short unsigned int v_clin;
  short unsigned int v_vcol;
  short unsigned int v_ccol;
};

struct vt_event {
  unsigned int event;
  unsigned int oldev;
  unsigned int newev;
  unsigned int pad[4];
};

struct vt_setactivate {
  unsigned int console;
  struct vt_mode mode;
};

struct vt_event_wait {
  struct list_head list;
  struct vt_event event;
  int done;
};

struct compat_console_font_op {
  compat_uint_t op;
  compat_uint_t flags;
  compat_uint_t width;
  compat_uint_t height;
  compat_uint_t charcount;
  compat_caddr_t data;
};

struct compat_unimapdesc {
  short unsigned int entry_ct;
  compat_caddr_t entries;
};

struct vt_notifier_param {
  struct vc_data* vc;
  unsigned int c;
};

struct vcs_poll_data {
  struct notifier_block notifier;
  unsigned int cons_num;
  int event;
  wait_queue_head_t waitq;
  struct fasync_struct* fasync;
};

struct tiocl_selection {
  short unsigned int xs;
  short unsigned int ys;
  short unsigned int xe;
  short unsigned int ye;
  short unsigned int sel_mode;
};

struct vc_selection {
  struct mutex lock;
  struct vc_data* cons;
  char* buffer;
  unsigned int buf_len;
  volatile int start;
  int end;
};

struct kbentry {
  unsigned char kb_table;
  unsigned char kb_index;
  short unsigned int kb_value;
};

struct kbsentry {
  unsigned char kb_func;
  unsigned char kb_string[512];
};

struct kbdiacr {
  unsigned char diacr;
  unsigned char base;
  unsigned char result;
};

struct kbdiacrs {
  unsigned int kb_cnt;
  struct kbdiacr kbdiacr[256];
};

struct kbdiacrsuc {
  unsigned int kb_cnt;
  struct kbdiacruc kbdiacruc[256];
};

struct kbkeycode {
  unsigned int scancode;
  unsigned int keycode;
};

struct keyboard_notifier_param {
  struct vc_data* vc;
  int down;
  int shift;
  int ledstate;
  unsigned int value;
};

struct kbd_struct {
  unsigned char lockstate;
  unsigned char slockstate;
  unsigned char ledmode : 1;
  unsigned char ledflagstate : 4;
  char : 3;
  unsigned char default_ledflagstate : 4;
  unsigned char kbdmode : 3;
  char : 1;
  unsigned char modeflags : 5;
};

typedef void k_handler_fn(struct vc_data*, unsigned char, char);

typedef void fn_handler_fn(struct vc_data*);

struct getset_keycode_data {
  struct input_keymap_entry ke;
  int error;
};

typedef short unsigned int u_short;

struct uni_pagedir {
  u16** uni_pgdir[32];
  long unsigned int refcount;
  long unsigned int sum;
  unsigned char* inverse_translations[4];
  u16* inverse_trans_unicode;
};

typedef uint32_t char32_t;

struct uni_screen {
  char32_t* lines[0];
};

struct con_driver {
  const struct consw* con;
  const char* desc;
  struct device* dev;
  int node;
  int first;
  int last;
  int flag;
};

enum {
  blank_off = 0,
  blank_normal_wait = 1,
  blank_vesa_wait = 2,
};

enum {
  EPecma = 0,
  EPdec = 1,
  EPeq = 2,
  EPgt = 3,
  EPlt = 4,
};

struct rgb {
  u8 r;
  u8 g;
  u8 b;
};

enum {
  ESnormal = 0,
  ESesc = 1,
  ESsquare = 2,
  ESgetpars = 3,
  ESfunckey = 4,
  EShash = 5,
  ESsetG0 = 6,
  ESsetG1 = 7,
  ESpercent = 8,
  EScsiignore = 9,
  ESnonstd = 10,
  ESpalette = 11,
  ESosc = 12,
};

struct interval {
  uint32_t first;
  uint32_t last;
};

struct vc_draw_region {
  long unsigned int from;
  long unsigned int to;
  int x;
};

struct hv_ops;

struct hvc_struct {
  struct tty_port port;
  spinlock_t lock;
  int index;
  int do_wakeup;
  char* outbuf;
  int outbuf_size;
  int n_outbuf;
  uint32_t vtermno;
  const struct hv_ops* ops;
  int irq_requested;
  int data;
  struct winsize ws;
  struct work_struct tty_resize;
  struct list_head next;
  long unsigned int flags;
};

struct hv_ops {
  int (*get_chars)(uint32_t, char*, int);
  int (*put_chars)(uint32_t, const char*, int);
  int (*flush)(uint32_t, bool);
  int (*notifier_add)(struct hvc_struct*, int);
  void (*notifier_del)(struct hvc_struct*, int);
  void (*notifier_hangup)(struct hvc_struct*, int);
  int (*tiocmget)(struct hvc_struct*);
  int (*tiocmset)(struct hvc_struct*, unsigned int, unsigned int);
  void (*dtr_rts)(struct hvc_struct*, int);
};

struct uart_driver {
  struct module* owner;
  const char* driver_name;
  const char* dev_name;
  int major;
  int minor;
  int nr;
  struct console* cons;
  struct uart_state* state;
  struct tty_driver* tty_driver;
};

struct uart_match {
  struct uart_port* port;
  struct uart_driver* driver;
};

enum hwparam_type {
  hwparam_ioport = 0,
  hwparam_iomem = 1,
  hwparam_ioport_or_iomem = 2,
  hwparam_irq = 3,
  hwparam_dma = 4,
  hwparam_dma_addr = 5,
  hwparam_other = 6,
};

struct plat_serial8250_port {
  long unsigned int iobase;
  void* membase;
  resource_size_t mapbase;
  unsigned int irq;
  long unsigned int irqflags;
  unsigned int uartclk;
  void* private_data;
  unsigned char regshift;
  unsigned char iotype;
  unsigned char hub6;
  unsigned char has_sysrq;
  upf_t flags;
  unsigned int type;
  unsigned int (*serial_in)(struct uart_port*, int);
  void (*serial_out)(struct uart_port*, int, int);
  void (*set_termios)(struct uart_port*, struct ktermios*, struct ktermios*);
  void (*set_ldisc)(struct uart_port*, struct ktermios*);
  unsigned int (*get_mctrl)(struct uart_port*);
  int (*handle_irq)(struct uart_port*);
  void (*pm)(struct uart_port*, unsigned int, unsigned int);
  void (*handle_break)(struct uart_port*);
};

enum {
  PLAT8250_DEV_LEGACY = 4294967295,
  PLAT8250_DEV_PLATFORM = 0,
  PLAT8250_DEV_PLATFORM1 = 1,
  PLAT8250_DEV_PLATFORM2 = 2,
  PLAT8250_DEV_FOURPORT = 3,
  PLAT8250_DEV_ACCENT = 4,
  PLAT8250_DEV_BOCA = 5,
  PLAT8250_DEV_EXAR_ST16C554 = 6,
  PLAT8250_DEV_HUB6 = 7,
  PLAT8250_DEV_AU1X00 = 8,
  PLAT8250_DEV_SM501 = 9,
};

struct uart_8250_port;

struct uart_8250_ops {
  int (*setup_irq)(struct uart_8250_port*);
  void (*release_irq)(struct uart_8250_port*);
};

struct mctrl_gpios;

struct uart_8250_dma;

struct uart_8250_em485;

struct uart_8250_port {
  struct uart_port port;
  struct timer_list timer;
  struct list_head list;
  u32 capabilities;
  short unsigned int bugs;
  bool fifo_bug;
  unsigned int tx_loadsz;
  unsigned char acr;
  unsigned char fcr;
  unsigned char ier;
  unsigned char lcr;
  unsigned char mcr;
  unsigned char mcr_mask;
  unsigned char mcr_force;
  unsigned char cur_iotype;
  unsigned int rpm_tx_active;
  unsigned char canary;
  unsigned char probe;
  struct mctrl_gpios* gpios;
  unsigned char lsr_saved_flags;
  unsigned char msr_saved_flags;
  struct uart_8250_dma* dma;
  const struct uart_8250_ops* ops;
  int (*dl_read)(struct uart_8250_port*);
  void (*dl_write)(struct uart_8250_port*, int);
  struct uart_8250_em485* em485;
  void (*rs485_start_tx)(struct uart_8250_port*);
  void (*rs485_stop_tx)(struct uart_8250_port*);
  struct delayed_work overrun_backoff;
  u32 overrun_backoff_time_ms;
};

struct uart_8250_em485 {
  struct hrtimer start_tx_timer;
  struct hrtimer stop_tx_timer;
  struct hrtimer* active_timer;
  struct uart_8250_port* port;
  unsigned int tx_stopped : 1;
};

struct uart_8250_dma {
  int (*tx_dma)(struct uart_8250_port*);
  int (*rx_dma)(struct uart_8250_port*);
  dma_filter_fn fn;
  void* rx_param;
  void* tx_param;
  struct dma_slave_config rxconf;
  struct dma_slave_config txconf;
  struct dma_chan* rxchan;
  struct dma_chan* txchan;
  phys_addr_t rx_dma_addr;
  phys_addr_t tx_dma_addr;
  dma_addr_t rx_addr;
  dma_addr_t tx_addr;
  dma_cookie_t rx_cookie;
  dma_cookie_t tx_cookie;
  void* rx_buf;
  size_t rx_size;
  size_t tx_size;
  unsigned char tx_running;
  unsigned char tx_err;
  unsigned char rx_running;
};

struct old_serial_port {
  unsigned int uart;
  unsigned int baud_base;
  unsigned int port;
  unsigned int irq;
  upf_t flags;
  unsigned char io_type;
  unsigned char* iomem_base;
  short unsigned int iomem_reg_shift;
};

struct irq_info {
  struct hlist_node node;
  int irq;
  spinlock_t lock;
  struct list_head* head;
};

struct serial8250_config {
  const char* name;
  short unsigned int fifo_size;
  short unsigned int tx_loadsz;
  unsigned char fcr;
  unsigned char rxtrig_bytes[4];
  unsigned int flags;
};

struct pciserial_board {
  unsigned int flags;
  unsigned int num_ports;
  unsigned int base_baud;
  unsigned int uart_offset;
  unsigned int reg_shift;
  unsigned int first_offset;
};

struct serial_private;

struct pci_serial_quirk {
  u32 vendor;
  u32 device;
  u32 subvendor;
  u32 subdevice;
  int (*probe)(struct pci_dev*);
  int (*init)(struct pci_dev*);
  int (*setup)(
      struct serial_private*,
      const struct pciserial_board*,
      struct uart_8250_port*,
      int);
  void (*exit)(struct pci_dev*);
};

struct serial_private {
  struct pci_dev* dev;
  unsigned int nr;
  struct pci_serial_quirk* quirk;
  const struct pciserial_board* board;
  int line[0];
};

struct f815xxa_data {
  spinlock_t lock;
  int idx;
};

struct timedia_struct {
  int num;
  const short unsigned int* ids;
};

struct quatech_feature {
  u16 devid;
  bool amcc;
};

enum pci_board_num_t {
  pbn_default = 0,
  pbn_b0_1_115200 = 1,
  pbn_b0_2_115200 = 2,
  pbn_b0_4_115200 = 3,
  pbn_b0_5_115200 = 4,
  pbn_b0_8_115200 = 5,
  pbn_b0_1_921600 = 6,
  pbn_b0_2_921600 = 7,
  pbn_b0_4_921600 = 8,
  pbn_b0_2_1130000 = 9,
  pbn_b0_4_1152000 = 10,
  pbn_b0_4_1250000 = 11,
  pbn_b0_2_1843200 = 12,
  pbn_b0_4_1843200 = 13,
  pbn_b0_1_4000000 = 14,
  pbn_b0_bt_1_115200 = 15,
  pbn_b0_bt_2_115200 = 16,
  pbn_b0_bt_4_115200 = 17,
  pbn_b0_bt_8_115200 = 18,
  pbn_b0_bt_1_460800 = 19,
  pbn_b0_bt_2_460800 = 20,
  pbn_b0_bt_4_460800 = 21,
  pbn_b0_bt_1_921600 = 22,
  pbn_b0_bt_2_921600 = 23,
  pbn_b0_bt_4_921600 = 24,
  pbn_b0_bt_8_921600 = 25,
  pbn_b1_1_115200 = 26,
  pbn_b1_2_115200 = 27,
  pbn_b1_4_115200 = 28,
  pbn_b1_8_115200 = 29,
  pbn_b1_16_115200 = 30,
  pbn_b1_1_921600 = 31,
  pbn_b1_2_921600 = 32,
  pbn_b1_4_921600 = 33,
  pbn_b1_8_921600 = 34,
  pbn_b1_2_1250000 = 35,
  pbn_b1_bt_1_115200 = 36,
  pbn_b1_bt_2_115200 = 37,
  pbn_b1_bt_4_115200 = 38,
  pbn_b1_bt_2_921600 = 39,
  pbn_b1_1_1382400 = 40,
  pbn_b1_2_1382400 = 41,
  pbn_b1_4_1382400 = 42,
  pbn_b1_8_1382400 = 43,
  pbn_b2_1_115200 = 44,
  pbn_b2_2_115200 = 45,
  pbn_b2_4_115200 = 46,
  pbn_b2_8_115200 = 47,
  pbn_b2_1_460800 = 48,
  pbn_b2_4_460800 = 49,
  pbn_b2_8_460800 = 50,
  pbn_b2_16_460800 = 51,
  pbn_b2_1_921600 = 52,
  pbn_b2_4_921600 = 53,
  pbn_b2_8_921600 = 54,
  pbn_b2_8_1152000 = 55,
  pbn_b2_bt_1_115200 = 56,
  pbn_b2_bt_2_115200 = 57,
  pbn_b2_bt_4_115200 = 58,
  pbn_b2_bt_2_921600 = 59,
  pbn_b2_bt_4_921600 = 60,
  pbn_b3_2_115200 = 61,
  pbn_b3_4_115200 = 62,
  pbn_b3_8_115200 = 63,
  pbn_b4_bt_2_921600 = 64,
  pbn_b4_bt_4_921600 = 65,
  pbn_b4_bt_8_921600 = 66,
  pbn_panacom = 67,
  pbn_panacom2 = 68,
  pbn_panacom4 = 69,
  pbn_plx_romulus = 70,
  pbn_endrun_2_4000000 = 71,
  pbn_oxsemi = 72,
  pbn_oxsemi_1_4000000 = 73,
  pbn_oxsemi_2_4000000 = 74,
  pbn_oxsemi_4_4000000 = 75,
  pbn_oxsemi_8_4000000 = 76,
  pbn_intel_i960 = 77,
  pbn_sgi_ioc3 = 78,
  pbn_computone_4 = 79,
  pbn_computone_6 = 80,
  pbn_computone_8 = 81,
  pbn_sbsxrsio = 82,
  pbn_pasemi_1682M = 83,
  pbn_ni8430_2 = 84,
  pbn_ni8430_4 = 85,
  pbn_ni8430_8 = 86,
  pbn_ni8430_16 = 87,
  pbn_ADDIDATA_PCIe_1_3906250 = 88,
  pbn_ADDIDATA_PCIe_2_3906250 = 89,
  pbn_ADDIDATA_PCIe_4_3906250 = 90,
  pbn_ADDIDATA_PCIe_8_3906250 = 91,
  pbn_ce4100_1_115200 = 92,
  pbn_omegapci = 93,
  pbn_NETMOS9900_2s_115200 = 94,
  pbn_brcm_trumanage = 95,
  pbn_fintek_4 = 96,
  pbn_fintek_8 = 97,
  pbn_fintek_12 = 98,
  pbn_fintek_F81504A = 99,
  pbn_fintek_F81508A = 100,
  pbn_fintek_F81512A = 101,
  pbn_wch382_2 = 102,
  pbn_wch384_4 = 103,
  pbn_wch384_8 = 104,
  pbn_pericom_PI7C9X7951 = 105,
  pbn_pericom_PI7C9X7952 = 106,
  pbn_pericom_PI7C9X7954 = 107,
  pbn_pericom_PI7C9X7958 = 108,
  pbn_sunix_pci_1s = 109,
  pbn_sunix_pci_2s = 110,
  pbn_sunix_pci_4s = 111,
  pbn_sunix_pci_8s = 112,
  pbn_sunix_pci_16s = 113,
  pbn_moxa8250_2p = 114,
  pbn_moxa8250_4p = 115,
  pbn_moxa8250_8p = 116,
};

struct memdev {
  const char* name;
  umode_t mode;
  const struct file_operations* fops;
  fmode_t fmode;
};

struct timer_rand_state {
  cycles_t last_time;
  long int last_delta;
  long int last_delta2;
};

struct trace_event_raw_add_device_randomness {
  struct trace_entry ent;
  int bytes;
  long unsigned int IP;
  char __data[0];
};

struct trace_event_raw_random__mix_pool_bytes {
  struct trace_entry ent;
  const char* pool_name;
  int bytes;
  long unsigned int IP;
  char __data[0];
};

struct trace_event_raw_credit_entropy_bits {
  struct trace_entry ent;
  const char* pool_name;
  int bits;
  int entropy_count;
  long unsigned int IP;
  char __data[0];
};

struct trace_event_raw_push_to_pool {
  struct trace_entry ent;
  const char* pool_name;
  int pool_bits;
  int input_bits;
  char __data[0];
};

struct trace_event_raw_debit_entropy {
  struct trace_entry ent;
  const char* pool_name;
  int debit_bits;
  char __data[0];
};

struct trace_event_raw_add_input_randomness {
  struct trace_entry ent;
  int input_bits;
  char __data[0];
};

struct trace_event_raw_add_disk_randomness {
  struct trace_entry ent;
  dev_t dev;
  int input_bits;
  char __data[0];
};

struct trace_event_raw_xfer_secondary_pool {
  struct trace_entry ent;
  const char* pool_name;
  int xfer_bits;
  int request_bits;
  int pool_entropy;
  int input_entropy;
  char __data[0];
};

struct trace_event_raw_random__get_random_bytes {
  struct trace_entry ent;
  int nbytes;
  long unsigned int IP;
  char __data[0];
};

struct trace_event_raw_random__extract_entropy {
  struct trace_entry ent;
  const char* pool_name;
  int nbytes;
  int entropy_count;
  long unsigned int IP;
  char __data[0];
};

struct trace_event_raw_random_read {
  struct trace_entry ent;
  int got_bits;
  int need_bits;
  int pool_left;
  int input_left;
  char __data[0];
};

struct trace_event_raw_urandom_read {
  struct trace_entry ent;
  int got_bits;
  int pool_left;
  int input_left;
  char __data[0];
};

struct trace_event_raw_prandom_u32 {
  struct trace_entry ent;
  unsigned int ret;
  char __data[0];
};

struct trace_event_data_offsets_add_device_randomness {};

struct trace_event_data_offsets_random__mix_pool_bytes {};

struct trace_event_data_offsets_credit_entropy_bits {};

struct trace_event_data_offsets_push_to_pool {};

struct trace_event_data_offsets_debit_entropy {};

struct trace_event_data_offsets_add_input_randomness {};

struct trace_event_data_offsets_add_disk_randomness {};

struct trace_event_data_offsets_xfer_secondary_pool {};

struct trace_event_data_offsets_random__get_random_bytes {};

struct trace_event_data_offsets_random__extract_entropy {};

struct trace_event_data_offsets_random_read {};

struct trace_event_data_offsets_urandom_read {};

struct trace_event_data_offsets_prandom_u32 {};

typedef void (*btf_trace_add_device_randomness)(void*, int, long unsigned int);

typedef void (
    *btf_trace_mix_pool_bytes)(void*, const char*, int, long unsigned int);

typedef void (*btf_trace_mix_pool_bytes_nolock)(
    void*,
    const char*,
    int,
    long unsigned int);

typedef void (*btf_trace_credit_entropy_bits)(
    void*,
    const char*,
    int,
    int,
    long unsigned int);

typedef void (*btf_trace_push_to_pool)(void*, const char*, int, int);

typedef void (*btf_trace_debit_entropy)(void*, const char*, int);

typedef void (*btf_trace_add_input_randomness)(void*, int);

typedef void (*btf_trace_add_disk_randomness)(void*, dev_t, int);

typedef void (
    *btf_trace_xfer_secondary_pool)(void*, const char*, int, int, int, int);

typedef void (*btf_trace_get_random_bytes)(void*, int, long unsigned int);

typedef void (*btf_trace_get_random_bytes_arch)(void*, int, long unsigned int);

typedef void (*btf_trace_extract_entropy)(
    void*,
    const char*,
    int,
    int,
    long unsigned int);

typedef void (*btf_trace_extract_entropy_user)(
    void*,
    const char*,
    int,
    int,
    long unsigned int);

typedef void (*btf_trace_random_read)(void*, int, int, int, int);

typedef void (*btf_trace_urandom_read)(void*, int, int, int);

typedef void (*btf_trace_prandom_u32)(void*, unsigned int);

struct poolinfo {
  int poolbitshift;
  int poolwords;
  int poolbytes;
  int poolfracbits;
  int tap1;
  int tap2;
  int tap3;
  int tap4;
  int tap5;
};

struct crng_state {
  __u32 state[16];
  long unsigned int init_time;
  spinlock_t lock;
};

struct entropy_store {
  const struct poolinfo* poolinfo;
  __u32* pool;
  const char* name;
  spinlock_t lock;
  short unsigned int add_ptr;
  short unsigned int input_rotate;
  int entropy_count;
  unsigned int initialized : 1;
  unsigned int last_data_init : 1;
  __u8 last_data[10];
};

struct fast_pool {
  __u32 pool[4];
  long unsigned int last;
  short unsigned int reg_idx;
  unsigned char count;
};

struct batched_entropy {
  union {
    u64 entropy_u64[8];
    u32 entropy_u32[16];
  };
  unsigned int position;
  spinlock_t batch_lock;
};

struct virtio_console_config {
  __virtio16 cols;
  __virtio16 rows;
  __virtio32 max_nr_ports;
  __virtio32 emerg_wr;
};

struct virtio_console_control {
  __virtio32 id;
  __virtio16 event;
  __virtio16 value;
};

struct ports_driver_data {
  struct class* class;
  struct dentry* debugfs_dir;
  struct list_head portdevs;
  unsigned int next_vtermno;
  struct list_head consoles;
};

struct console___2 {
  struct list_head list;
  struct hvc_struct* hvc;
  struct winsize ws;
  u32 vtermno;
};

struct port_buffer {
  char* buf;
  size_t size;
  size_t len;
  size_t offset;
  dma_addr_t dma;
  struct device* dev;
  struct list_head list;
  unsigned int sgpages;
  struct scatterlist sg[0];
};

struct ports_device {
  struct list_head list;
  struct work_struct control_work;
  struct work_struct config_work;
  struct list_head ports;
  spinlock_t ports_lock;
  spinlock_t c_ivq_lock;
  spinlock_t c_ovq_lock;
  u32 max_nr_ports;
  struct virtio_device* vdev;
  struct virtqueue* c_ivq;
  struct virtqueue* c_ovq;
  struct virtio_console_control cpkt;
  struct virtqueue** in_vqs;
  struct virtqueue** out_vqs;
  int chr_major;
};

struct port_stats {
  long unsigned int bytes_sent;
  long unsigned int bytes_received;
  long unsigned int bytes_discarded;
};

struct port {
  struct list_head list;
  struct ports_device* portdev;
  struct port_buffer* inbuf;
  spinlock_t inbuf_lock;
  spinlock_t outvq_lock;
  struct virtqueue* in_vq;
  struct virtqueue* out_vq;
  struct dentry* debugfs_file;
  struct port_stats stats;
  struct console___2 cons;
  struct cdev* cdev;
  struct device* dev;
  struct kref kref;
  wait_queue_head_t waitqueue;
  char* name;
  struct fasync_struct* async_queue;
  u32 id;
  bool outvq_full;
  bool host_connected;
  bool guest_connected;
};

struct sg_list {
  unsigned int n;
  unsigned int size;
  size_t len;
  struct scatterlist* sg;
};

struct hpet_info {
  long unsigned int hi_ireqfreq;
  long unsigned int hi_flags;
  short unsigned int hi_hpet;
  short unsigned int hi_timer;
};

struct hpet_timer {
  u64 hpet_config;
  union {
    u64 _hpet_hc64;
    u32 _hpet_hc32;
    long unsigned int _hpet_compare;
  } _u1;
  u64 hpet_fsb[2];
};

struct hpet {
  u64 hpet_cap;
  u64 res0;
  u64 hpet_config;
  u64 res1;
  u64 hpet_isr;
  u64 res2[25];
  union {
    u64 _hpet_mc64;
    u32 _hpet_mc32;
    long unsigned int _hpet_mc;
  } _u0;
  u64 res3;
  struct hpet_timer hpet_timers[1];
};

struct hpets;

struct hpet_dev {
  struct hpets* hd_hpets;
  struct hpet* hd_hpet;
  struct hpet_timer* hd_timer;
  long unsigned int hd_ireqfreq;
  long unsigned int hd_irqdata;
  wait_queue_head_t hd_waitqueue;
  struct fasync_struct* hd_async_queue;
  unsigned int hd_flags;
  unsigned int hd_irq;
  unsigned int hd_hdwirq;
  char hd_name[7];
};

struct hpets {
  struct hpets* hp_next;
  struct hpet* hp_hpet;
  long unsigned int hp_hpet_phys;
  struct clocksource* hp_clocksource;
  long long unsigned int hp_tick_freq;
  long unsigned int hp_delta;
  unsigned int hp_ntimer;
  unsigned int hp_which;
  struct hpet_dev hp_dev[0];
};

struct compat_hpet_info {
  compat_ulong_t hi_ireqfreq;
  compat_ulong_t hi_flags;
  short unsigned int hi_hpet;
  short unsigned int hi_timer;
};

struct hwrng {
  const char* name;
  int (*init)(struct hwrng*);
  void (*cleanup)(struct hwrng*);
  int (*data_present)(struct hwrng*, int);
  int (*data_read)(struct hwrng*, u32*);
  int (*read)(struct hwrng*, void*, size_t, bool);
  long unsigned int priv;
  short unsigned int quality;
  struct list_head list;
  struct kref ref;
  struct completion cleanup_done;
};

struct intel_rng_hw {
  struct pci_dev* dev;
  void* mem;
  u8 bios_cntl_off;
  u8 bios_cntl_val;
  u8 fwh_dec_en1_off;
  u8 fwh_dec_en1_val;
};

struct amd768_priv {
  void* iobase;
  struct pci_dev* pcidev;
  u32 pmbase;
};

struct tpm_bank_info {
  u16 alg_id;
  u16 digest_size;
  u16 crypto_id;
};

struct tpm_chip;

struct tpm_class_ops {
  unsigned int flags;
  const u8 req_complete_mask;
  const u8 req_complete_val;
  bool (*req_canceled)(struct tpm_chip*, u8);
  int (*recv)(struct tpm_chip*, u8*, size_t);
  int (*send)(struct tpm_chip*, u8*, size_t);
  void (*cancel)(struct tpm_chip*);
  u8 (*status)(struct tpm_chip*);
  void (*update_timeouts)(struct tpm_chip*, long unsigned int*);
  void (*update_durations)(struct tpm_chip*, long unsigned int*);
  int (*go_idle)(struct tpm_chip*);
  int (*cmd_ready)(struct tpm_chip*);
  int (*request_locality)(struct tpm_chip*, int);
  int (*relinquish_locality)(struct tpm_chip*, int);
  void (*clk_enable)(struct tpm_chip*, bool);
};

struct tpm_bios_log {
  void* bios_event_log;
  void* bios_event_log_end;
};

struct tpm_chip_seqops {
  struct tpm_chip* chip;
  const struct seq_operations* seqops;
};

struct tpm_space {
  u32 context_tbl[3];
  u8* context_buf;
  u32 session_tbl[3];
  u8* session_buf;
  u32 buf_size;
};

struct tpm_chip {
  struct device dev;
  struct device devs;
  struct cdev cdev;
  struct cdev cdevs;
  struct rw_semaphore ops_sem;
  const struct tpm_class_ops* ops;
  struct tpm_bios_log log;
  struct tpm_chip_seqops bin_log_seqops;
  struct tpm_chip_seqops ascii_log_seqops;
  unsigned int flags;
  int dev_num;
  long unsigned int is_open;
  char hwrng_name[64];
  struct hwrng hwrng;
  struct mutex tpm_mutex;
  long unsigned int timeout_a;
  long unsigned int timeout_b;
  long unsigned int timeout_c;
  long unsigned int timeout_d;
  bool timeout_adjusted;
  long unsigned int duration[4];
  bool duration_adjusted;
  struct dentry* bios_dir[3];
  const struct attribute_group* groups[8];
  unsigned int groups_cnt;
  u32 nr_allocated_banks;
  struct tpm_bank_info* allocated_banks;
  acpi_handle acpi_dev_handle;
  char ppi_version[4];
  struct tpm_space work_space;
  u32 last_cc;
  u32 nr_commands;
  u32* cc_attrs_tbl;
  int locality;
};

enum tpm_duration {
  TPM_SHORT = 0,
  TPM_MEDIUM = 1,
  TPM_LONG = 2,
  TPM_LONG_LONG = 3,
  TPM_UNDEFINED = 4,
  TPM_NUM_DURATIONS = 4,
};

enum tpm2_startup_types {
  TPM2_SU_CLEAR = 0,
  TPM2_SU_STATE = 1,
};

enum tpm_chip_flags {
  TPM_CHIP_FLAG_TPM2 = 2,
  TPM_CHIP_FLAG_IRQ = 4,
  TPM_CHIP_FLAG_VIRTUAL = 8,
  TPM_CHIP_FLAG_HAVE_TIMEOUTS = 16,
  TPM_CHIP_FLAG_ALWAYS_POWERED = 32,
  TPM_CHIP_FLAG_FIRMWARE_POWER_MANAGED = 64,
};

enum tpm2_structures {
  TPM2_ST_NO_SESSIONS = 32769,
  TPM2_ST_SESSIONS = 32770,
};

enum tpm2_return_codes {
  TPM2_RC_SUCCESS = 0,
  TPM2_RC_HASH = 131,
  TPM2_RC_HANDLE = 139,
  TPM2_RC_INITIALIZE = 256,
  TPM2_RC_FAILURE = 257,
  TPM2_RC_DISABLED = 288,
  TPM2_RC_COMMAND_CODE = 323,
  TPM2_RC_TESTING = 2314,
  TPM2_RC_REFERENCE_H0 = 2320,
  TPM2_RC_RETRY = 2338,
};

struct tpm_header {
  __be16 tag;
  __be32 length;
  union {
    __be32 ordinal;
    __be32 return_code;
  };
} __attribute__((packed));

struct file_priv {
  struct tpm_chip* chip;
  struct tpm_space* space;
  struct mutex buffer_mutex;
  struct timer_list user_read_timer;
  struct work_struct timeout_work;
  struct work_struct async_work;
  wait_queue_head_t async_wait;
  ssize_t response_length;
  bool response_read;
  bool command_enqueued;
  u8 data_buffer[4096];
};

struct tpm_digest {
  u16 alg_id;
  u8 digest[64];
};

enum TPM_OPS_FLAGS {
  TPM_OPS_AUTO_STARTUP = 1,
};

enum tpm2_timeouts {
  TPM2_TIMEOUT_A = 750,
  TPM2_TIMEOUT_B = 2000,
  TPM2_TIMEOUT_C = 200,
  TPM2_TIMEOUT_D = 30,
  TPM2_DURATION_SHORT = 20,
  TPM2_DURATION_MEDIUM = 750,
  TPM2_DURATION_LONG = 2000,
  TPM2_DURATION_LONG_LONG = 300000,
  TPM2_DURATION_DEFAULT = 120000,
};

enum tpm2_command_codes {
  TPM2_CC_FIRST = 287,
  TPM2_CC_HIERARCHY_CONTROL = 289,
  TPM2_CC_HIERARCHY_CHANGE_AUTH = 297,
  TPM2_CC_CREATE_PRIMARY = 305,
  TPM2_CC_SEQUENCE_COMPLETE = 318,
  TPM2_CC_SELF_TEST = 323,
  TPM2_CC_STARTUP = 324,
  TPM2_CC_SHUTDOWN = 325,
  TPM2_CC_NV_READ = 334,
  TPM2_CC_CREATE = 339,
  TPM2_CC_LOAD = 343,
  TPM2_CC_SEQUENCE_UPDATE = 348,
  TPM2_CC_UNSEAL = 350,
  TPM2_CC_CONTEXT_LOAD = 353,
  TPM2_CC_CONTEXT_SAVE = 354,
  TPM2_CC_FLUSH_CONTEXT = 357,
  TPM2_CC_VERIFY_SIGNATURE = 375,
  TPM2_CC_GET_CAPABILITY = 378,
  TPM2_CC_GET_RANDOM = 379,
  TPM2_CC_PCR_READ = 382,
  TPM2_CC_PCR_EXTEND = 386,
  TPM2_CC_EVENT_SEQUENCE_COMPLETE = 389,
  TPM2_CC_HASH_SEQUENCE_START = 390,
  TPM2_CC_CREATE_LOADED = 401,
  TPM2_CC_LAST = 403,
};

struct tpm_buf {
  unsigned int flags;
  u8* data;
};

enum tpm_timeout {
  TPM_TIMEOUT = 5,
  TPM_TIMEOUT_RETRY = 100,
  TPM_TIMEOUT_RANGE_US = 300,
  TPM_TIMEOUT_POLL = 1,
  TPM_TIMEOUT_USECS_MIN = 100,
  TPM_TIMEOUT_USECS_MAX = 500,
};

enum tpm_algorithms {
  TPM_ALG_ERROR = 0,
  TPM_ALG_SHA1 = 4,
  TPM_ALG_KEYEDHASH = 8,
  TPM_ALG_SHA256 = 11,
  TPM_ALG_SHA384 = 12,
  TPM_ALG_SHA512 = 13,
  TPM_ALG_NULL = 16,
  TPM_ALG_SM3_256 = 18,
};

enum tpm_buf_flags {
  TPM_BUF_OVERFLOW = 1,
};

struct stclear_flags_t {
  __be16 tag;
  u8 deactivated;
  u8 disableForceClear;
  u8 physicalPresence;
  u8 physicalPresenceLock;
  u8 bGlobalLock;
} __attribute__((packed));

struct tpm1_version {
  u8 major;
  u8 minor;
  u8 rev_major;
  u8 rev_minor;
};

struct tpm1_version2 {
  __be16 tag;
  struct tpm1_version version;
};

struct timeout_t {
  __be32 a;
  __be32 b;
  __be32 c;
  __be32 d;
};

struct duration_t {
  __be32 tpm_short;
  __be32 tpm_medium;
  __be32 tpm_long;
};

struct permanent_flags_t {
  __be16 tag;
  u8 disable;
  u8 ownership;
  u8 deactivated;
  u8 readPubek;
  u8 disableOwnerClear;
  u8 allowMaintenance;
  u8 physicalPresenceLifetimeLock;
  u8 physicalPresenceHWEnable;
  u8 physicalPresenceCMDEnable;
  u8 CEKPUsed;
  u8 TPMpost;
  u8 TPMpostLock;
  u8 FIPS;
  u8 operator;
  u8 enableRevokeEK;
  u8 nvLocked;
  u8 readSRKPub;
  u8 tpmEstablished;
  u8 maintenanceDone;
  u8 disableFullDALogicInfo;
};

typedef union {
  struct permanent_flags_t perm_flags;
  struct stclear_flags_t stclear_flags;
  __u8 owned;
  __be32 num_pcrs;
  struct tpm1_version version1;
  struct tpm1_version2 version2;
  __be32 manufacturer_id;
  struct timeout_t timeout;
  struct duration_t duration;
} cap_t;

enum tpm_capabilities {
  TPM_CAP_FLAG = 4,
  TPM_CAP_PROP = 5,
  TPM_CAP_VERSION_1_1 = 6,
  TPM_CAP_VERSION_1_2 = 26,
};

enum tpm_sub_capabilities {
  TPM_CAP_PROP_PCR = 257,
  TPM_CAP_PROP_MANUFACTURER = 259,
  TPM_CAP_FLAG_PERM = 264,
  TPM_CAP_FLAG_VOL = 265,
  TPM_CAP_PROP_OWNER = 273,
  TPM_CAP_PROP_TIS_TIMEOUT = 277,
  TPM_CAP_PROP_TIS_DURATION = 288,
};

struct tpm1_get_random_out {
  __be32 rng_data_len;
  u8 rng_data[128];
};

enum tpm2_const {
  TPM2_PLATFORM_PCR = 24,
  TPM2_PCR_SELECT_MIN = 3,
};

enum tpm2_permanent_handles {
  TPM2_RS_PW = 1073741833,
};

enum tpm2_capabilities {
  TPM2_CAP_HANDLES = 1,
  TPM2_CAP_COMMANDS = 2,
  TPM2_CAP_PCRS = 5,
  TPM2_CAP_TPM_PROPERTIES = 6,
};

enum tpm2_properties {
  TPM_PT_TOTAL_COMMANDS = 297,
};

enum tpm2_cc_attrs {
  TPM2_CC_ATTR_CHANDLES = 25,
  TPM2_CC_ATTR_RHANDLE = 28,
};

struct tpm2_hash {
  unsigned int crypto_id;
  unsigned int tpm_id;
};

struct tpm2_pcr_read_out {
  __be32 update_cnt;
  __be32 pcr_selects_cnt;
  __be16 hash_alg;
  u8 pcr_select_size;
  u8 pcr_select[3];
  __be32 digests_cnt;
  __be16 digest_size;
  u8 digest[0];
} __attribute__((packed));

struct tpm2_null_auth_area {
  __be32 handle;
  __be16 nonce_size;
  u8 attributes;
  __be16 auth_size;
} __attribute__((packed));

struct tpm2_get_random_out {
  __be16 size;
  u8 buffer[128];
};

struct tpm2_get_cap_out {
  u8 more_data;
  __be32 subcap_id;
  __be32 property_cnt;
  __be32 property_id;
  __be32 value;
} __attribute__((packed));

struct tpm2_pcr_selection {
  __be16 hash_alg;
  u8 size_of_select;
  u8 pcr_select[3];
};

struct tpmrm_priv {
  struct file_priv priv;
  struct tpm_space space;
};

enum tpm2_handle_types {
  TPM2_HT_HMAC_SESSION = 33554432,
  TPM2_HT_POLICY_SESSION = 50331648,
  TPM2_HT_TRANSIENT = 2147483648,
};

struct tpm2_context {
  __be64 sequence;
  __be32 saved_handle;
  __be32 hierarchy;
  __be16 blob_size;
} __attribute__((packed));

struct tpm2_cap_handles {
  u8 more_data;
  __be32 capability;
  __be32 count;
  __be32 handles[0];
} __attribute__((packed));

struct tpm_readpubek_out {
  u8 algorithm[4];
  u8 encscheme[2];
  u8 sigscheme[2];
  __be32 paramsize;
  u8 parameters[12];
  __be32 keysize;
  u8 modulus[256];
  u8 checksum[20];
};

struct tpm_pcr_attr {
  int alg_id;
  int pcr;
  struct device_attribute attr;
};

struct tcpa_event {
  u32 pcr_index;
  u32 event_type;
  u8 pcr_value[20];
  u32 event_size;
  u8 event_data[0];
};

enum tcpa_event_types {
  PREBOOT = 0,
  POST_CODE = 1,
  UNUSED = 2,
  NO_ACTION = 3,
  SEPARATOR = 4,
  ACTION = 5,
  EVENT_TAG = 6,
  SCRTM_CONTENTS = 7,
  SCRTM_VERSION = 8,
  CPU_MICROCODE = 9,
  PLATFORM_CONFIG_FLAGS = 10,
  TABLE_OF_DEVICES = 11,
  COMPACT_HASH = 12,
  IPL = 13,
  IPL_PARTITION_DATA = 14,
  NONHOST_CODE = 15,
  NONHOST_CONFIG = 16,
  NONHOST_INFO = 17,
};

struct tcpa_pc_event {
  u32 event_id;
  u32 event_size;
  u8 event_data[0];
};

enum tcpa_pc_event_ids {
  SMBIOS = 1,
  BIS_CERT = 2,
  POST_BIOS_ROM = 3,
  ESCD = 4,
  CMOS = 5,
  NVRAM = 6,
  OPTION_ROM_EXEC = 7,
  OPTION_ROM_CONFIG = 8,
  OPTION_ROM_MICROCODE = 10,
  S_CRTM_VERSION = 11,
  S_CRTM_CONTENTS = 12,
  POST_CONTENTS = 13,
  HOST_TABLE_OF_DEVICES = 14,
};

struct tcg_efi_specid_event_algs {
  u16 alg_id;
  u16 digest_size;
};

struct tcg_efi_specid_event_head {
  u8 signature[16];
  u32 platform_class;
  u8 spec_version_minor;
  u8 spec_version_major;
  u8 spec_errata;
  u8 uintnsize;
  u32 num_algs;
  struct tcg_efi_specid_event_algs digest_sizes[0];
};

struct tcg_pcr_event {
  u32 pcr_idx;
  u32 event_type;
  u8 digest[20];
  u32 event_size;
  u8 event[0];
};

struct tcg_event_field {
  u32 event_size;
  u8 event[0];
};

struct tcg_pcr_event2_head {
  u32 pcr_idx;
  u32 event_type;
  u32 count;
  struct tpm_digest digests[0];
};

struct acpi_table_tpm2 {
  struct acpi_table_header header;
  u16 platform_class;
  u16 reserved;
  u64 control_address;
  u32 start_method;
} __attribute__((packed));

struct acpi_tpm2_phy {
  u8 start_method_specific[12];
  u32 log_area_minimum_length;
  u64 log_area_start_address;
};

enum bios_platform_class {
  BIOS_CLIENT = 0,
  BIOS_SERVER = 1,
};

struct client_hdr {
  u32 log_max_len;
  u64 log_start_addr;
} __attribute__((packed));

struct server_hdr {
  u16 reserved;
  u64 log_max_len;
  u64 log_start_addr;
} __attribute__((packed));

struct acpi_tcpa {
  struct acpi_table_header hdr;
  u16 platform_class;
  union {
    struct client_hdr client;
    struct server_hdr server;
  };
} __attribute__((packed));

struct linux_efi_tpm_eventlog {
  u32 size;
  u32 final_events_preboot_size;
  u8 version;
  u8 log[0];
};

struct efi_tcg2_final_events_table {
  u64 version;
  u64 nr_events;
  u8 events[0];
};

enum tis_access {
  TPM_ACCESS_VALID = 128,
  TPM_ACCESS_ACTIVE_LOCALITY = 32,
  TPM_ACCESS_REQUEST_PENDING = 4,
  TPM_ACCESS_REQUEST_USE = 2,
};

enum tis_status {
  TPM_STS_VALID = 128,
  TPM_STS_COMMAND_READY = 64,
  TPM_STS_GO = 32,
  TPM_STS_DATA_AVAIL = 16,
  TPM_STS_DATA_EXPECT = 8,
  TPM_STS_READ_ZERO = 35,
};

enum tis_int_flags {
  TPM_GLOBAL_INT_ENABLE = 2147483648,
  TPM_INTF_BURST_COUNT_STATIC = 256,
  TPM_INTF_CMD_READY_INT = 128,
  TPM_INTF_INT_EDGE_FALLING = 64,
  TPM_INTF_INT_EDGE_RISING = 32,
  TPM_INTF_INT_LEVEL_LOW = 16,
  TPM_INTF_INT_LEVEL_HIGH = 8,
  TPM_INTF_LOCALITY_CHANGE_INT = 4,
  TPM_INTF_STS_VALID_INT = 2,
  TPM_INTF_DATA_AVAIL_INT = 1,
};

enum tis_defaults {
  TIS_MEM_LEN = 20480,
  TIS_SHORT_TIMEOUT = 750,
  TIS_LONG_TIMEOUT = 2000,
};

enum tpm_tis_flags {
  TPM_TIS_ITPM_WORKAROUND = 1,
};

struct tpm_tis_phy_ops;

struct tpm_tis_data {
  u16 manufacturer_id;
  int locality;
  int irq;
  bool irq_tested;
  unsigned int flags;
  void* ilb_base_addr;
  u16 clkrun_enabled;
  wait_queue_head_t int_queue;
  wait_queue_head_t read_queue;
  const struct tpm_tis_phy_ops* phy_ops;
  short unsigned int rng_quality;
};

struct tpm_tis_phy_ops {
  int (*read_bytes)(struct tpm_tis_data*, u32, u16, u8*);
  int (*write_bytes)(struct tpm_tis_data*, u32, u16, const u8*);
  int (*read16)(struct tpm_tis_data*, u32, u16*);
  int (*read32)(struct tpm_tis_data*, u32, u32*);
  int (*write32)(struct tpm_tis_data*, u32, u32);
};

struct tis_vendor_durations_override {
  u32 did_vid;
  struct tpm1_version version;
  long unsigned int durations[3];
};

struct tis_vendor_timeout_override {
  u32 did_vid;
  long unsigned int timeout_us[4];
};

struct tpm_info {
  struct resource res;
  int irq;
};

struct tpm_tis_tcg_phy {
  struct tpm_tis_data priv;
  void* iobase;
};

struct acpi_table_dmar {
  struct acpi_table_header header;
  u8 width;
  u8 flags;
  u8 reserved[10];
};

struct acpi_dmar_header {
  u16 type;
  u16 length;
};

enum acpi_dmar_type {
  ACPI_DMAR_TYPE_HARDWARE_UNIT = 0,
  ACPI_DMAR_TYPE_RESERVED_MEMORY = 1,
  ACPI_DMAR_TYPE_ROOT_ATS = 2,
  ACPI_DMAR_TYPE_HARDWARE_AFFINITY = 3,
  ACPI_DMAR_TYPE_NAMESPACE = 4,
  ACPI_DMAR_TYPE_SATC = 5,
  ACPI_DMAR_TYPE_RESERVED = 6,
};

struct acpi_dmar_device_scope {
  u8 entry_type;
  u8 length;
  u16 reserved;
  u8 enumeration_id;
  u8 bus;
};

enum acpi_dmar_scope_type {
  ACPI_DMAR_SCOPE_TYPE_NOT_USED = 0,
  ACPI_DMAR_SCOPE_TYPE_ENDPOINT = 1,
  ACPI_DMAR_SCOPE_TYPE_BRIDGE = 2,
  ACPI_DMAR_SCOPE_TYPE_IOAPIC = 3,
  ACPI_DMAR_SCOPE_TYPE_HPET = 4,
  ACPI_DMAR_SCOPE_TYPE_NAMESPACE = 5,
  ACPI_DMAR_SCOPE_TYPE_RESERVED = 6,
};

struct acpi_dmar_pci_path {
  u8 device;
  u8 function;
};

struct acpi_dmar_hardware_unit {
  struct acpi_dmar_header header;
  u8 flags;
  u8 reserved;
  u16 segment;
  u64 address;
};

struct acpi_dmar_reserved_memory {
  struct acpi_dmar_header header;
  u16 reserved;
  u16 segment;
  u64 base_address;
  u64 end_address;
};

struct acpi_dmar_atsr {
  struct acpi_dmar_header header;
  u8 flags;
  u8 reserved;
  u16 segment;
};

struct acpi_dmar_rhsa {
  struct acpi_dmar_header header;
  u32 reserved;
  u64 base_address;
  u32 proximity_domain;
} __attribute__((packed));

struct acpi_dmar_andd {
  struct acpi_dmar_header header;
  u8 reserved[3];
  u8 device_number;
  char device_name[1];
} __attribute__((packed));

struct acpi_dmar_satc {
  struct acpi_dmar_header header;
  u8 flags;
  u8 reserved;
  u16 segment;
};

struct dmar_dev_scope {
  struct device* dev;
  u8 bus;
  u8 devfn;
};

struct intel_iommu;

struct dmar_drhd_unit {
  struct list_head list;
  struct acpi_dmar_header* hdr;
  u64 reg_base_addr;
  struct dmar_dev_scope* devices;
  int devices_cnt;
  u16 segment;
  u8 ignored : 1;
  u8 include_all : 1;
  u8 gfx_dedicated : 1;
  struct intel_iommu* iommu;
};

struct iommu_flush {
  void (*flush_context)(struct intel_iommu*, u16, u16, u8, u64);
  void (*flush_iotlb)(struct intel_iommu*, u16, u64, unsigned int, u64);
};

struct dmar_domain;

struct root_entry;

struct q_inval;

struct ir_table;

struct intel_iommu {
  void* reg;
  u64 reg_phys;
  u64 reg_size;
  u64 cap;
  u64 ecap;
  u64 vccap;
  u32 gcmd;
  raw_spinlock_t register_lock;
  int seq_id;
  int agaw;
  int msagaw;
  unsigned int irq;
  unsigned int pr_irq;
  u16 segment;
  unsigned char name[13];
  long unsigned int* domain_ids;
  struct dmar_domain*** domains;
  spinlock_t lock;
  struct root_entry* root_entry;
  struct iommu_flush flush;
  struct q_inval* qi;
  u32* iommu_state;
  struct ir_table* ir_table;
  struct irq_domain* ir_domain;
  struct irq_domain* ir_msi_domain;
  struct iommu_device iommu;
  int node;
  u32 flags;
  struct dmar_drhd_unit* drhd;
};

struct dmar_pci_path {
  u8 bus;
  u8 device;
  u8 function;
};

struct dmar_pci_notify_info {
  struct pci_dev* dev;
  long unsigned int event;
  int bus;
  u16 seg;
  u16 level;
  struct dmar_pci_path path[0];
};

struct irte {
  union {
    struct {
      __u64 present : 1;
      __u64 fpd : 1;
      __u64 __res0 : 6;
      __u64 avail : 4;
      __u64 __res1 : 3;
      __u64 pst : 1;
      __u64 vector : 8;
      __u64 __res2 : 40;
    };
    struct {
      __u64 r_present : 1;
      __u64 r_fpd : 1;
      __u64 dst_mode : 1;
      __u64 redir_hint : 1;
      __u64 trigger_mode : 1;
      __u64 dlvry_mode : 3;
      __u64 r_avail : 4;
      __u64 r_res0 : 4;
      __u64 r_vector : 8;
      __u64 r_res1 : 8;
      __u64 dest_id : 32;
    };
    struct {
      __u64 p_present : 1;
      __u64 p_fpd : 1;
      __u64 p_res0 : 6;
      __u64 p_avail : 4;
      __u64 p_res1 : 2;
      __u64 p_urgent : 1;
      __u64 p_pst : 1;
      __u64 p_vector : 8;
      __u64 p_res2 : 14;
      __u64 pda_l : 26;
    };
    __u64 low;
  };
  union {
    struct {
      __u64 sid : 16;
      __u64 sq : 2;
      __u64 svt : 2;
      __u64 __res3 : 44;
    };
    struct {
      __u64 p_sid : 16;
      __u64 p_sq : 2;
      __u64 p_svt : 2;
      __u64 p_res3 : 12;
      __u64 pda_h : 32;
    };
    __u64 high;
  };
};

struct iova {
  struct rb_node node;
  long unsigned int pfn_hi;
  long unsigned int pfn_lo;
};

struct iova_magazine;

struct iova_cpu_rcache;

struct iova_rcache {
  spinlock_t lock;
  long unsigned int depot_size;
  struct iova_magazine* depot[32];
  struct iova_cpu_rcache* cpu_rcaches;
};

struct iova_domain;

typedef void (*iova_flush_cb)(struct iova_domain*);

typedef void (*iova_entry_dtor)(long unsigned int);

struct iova_fq;

struct iova_domain {
  spinlock_t iova_rbtree_lock;
  struct rb_root rbroot;
  struct rb_node* cached_node;
  struct rb_node* cached32_node;
  long unsigned int granule;
  long unsigned int start_pfn;
  long unsigned int dma_32bit_pfn;
  long unsigned int max32_alloc_size;
  struct iova_fq* fq;
  atomic64_t fq_flush_start_cnt;
  atomic64_t fq_flush_finish_cnt;
  struct iova anchor;
  struct iova_rcache rcaches[6];
  iova_flush_cb flush_cb;
  iova_entry_dtor entry_dtor;
  struct timer_list fq_timer;
  atomic_t fq_timer_on;
};

struct iova_fq_entry {
  long unsigned int iova_pfn;
  long unsigned int pages;
  long unsigned int data;
  u64 counter;
};

struct iova_fq {
  struct iova_fq_entry entries[256];
  unsigned int head;
  unsigned int tail;
  spinlock_t lock;
};

enum {
  QI_FREE = 0,
  QI_IN_USE = 1,
  QI_DONE = 2,
  QI_ABORT = 3,
};

struct qi_desc {
  u64 qw0;
  u64 qw1;
  u64 qw2;
  u64 qw3;
};

struct q_inval {
  raw_spinlock_t q_lock;
  void* desc;
  int* desc_status;
  int free_head;
  int free_tail;
  int free_cnt;
};

struct ir_table {
  struct irte* base;
  long unsigned int* bitmap;
};

struct root_entry {
  u64 lo;
  u64 hi;
};

struct dma_pte;

struct dmar_domain {
  int nid;
  unsigned int iommu_refcnt[128];
  u16 iommu_did[128];
  bool has_iotlb_device;
  struct list_head devices;
  struct list_head subdevices;
  struct iova_domain iovad;
  struct dma_pte* pgd;
  int gaw;
  int agaw;
  int flags;
  int iommu_coherency;
  int iommu_snooping;
  int iommu_count;
  int iommu_superpage;
  u64 max_addr;
  u32 default_pasid;
  struct iommu_domain domain;
};

struct dma_pte {
  u64 val;
};

struct irq_remap_ops {
  int capability;
  int (*prepare)();
  int (*enable)();
  void (*disable)();
  int (*reenable)(int);
  int (*enable_faulting)();
};

typedef int (*dmar_res_handler_t)(struct acpi_dmar_header*, void*);

struct dmar_res_callback {
  dmar_res_handler_t cb[6];
  void* arg[6];
  bool ignore_unhandled;
  bool print_entry;
};

enum faulttype {
  DMA_REMAP = 0,
  INTR_REMAP = 1,
  UNKNOWN = 2,
};

typedef unsigned int ioasid_t;

struct context_entry {
  u64 lo;
  u64 hi;
};

struct subdev_domain_info {
  struct list_head link_phys;
  struct list_head link_domain;
  struct device* pdev;
  struct dmar_domain* domain;
  int users;
};

struct pasid_table;

struct device_domain_info {
  struct list_head link;
  struct list_head global;
  struct list_head table;
  struct list_head subdevices;
  u32 segment;
  u8 bus;
  u8 devfn;
  u16 pfsid;
  u8 pasid_supported : 3;
  u8 pasid_enabled : 1;
  u8 pri_supported : 1;
  u8 pri_enabled : 1;
  u8 ats_supported : 1;
  u8 ats_enabled : 1;
  u8 auxd_enabled : 1;
  u8 ats_qdep;
  struct device* dev;
  struct intel_iommu* iommu;
  struct dmar_domain* domain;
  struct pasid_table* pasid_table;
};

struct pasid_table {
  void* table;
  int order;
  u32 max_pasid;
  struct list_head dev;
};

enum cap_audit_type {
  CAP_AUDIT_STATIC_DMAR = 0,
  CAP_AUDIT_STATIC_IRQR = 1,
  CAP_AUDIT_HOTPLUG_DMAR = 2,
  CAP_AUDIT_HOTPLUG_IRQR = 3,
};

struct dmar_rmrr_unit {
  struct list_head list;
  struct acpi_dmar_header* hdr;
  u64 base_address;
  u64 end_address;
  struct dmar_dev_scope* devices;
  int devices_cnt;
};

struct dmar_atsr_unit {
  struct list_head list;
  struct acpi_dmar_header* hdr;
  struct dmar_dev_scope* devices;
  int devices_cnt;
  u8 include_all : 1;
};

struct dmar_satc_unit {
  struct list_head list;
  struct acpi_dmar_header* hdr;
  struct dmar_dev_scope* devices;
  struct intel_iommu* iommu;
  int devices_cnt;
  u8 atc_required : 1;
};

struct domain_context_mapping_data {
  struct dmar_domain* domain;
  struct intel_iommu* iommu;
  struct pasid_table* table;
};

struct pasid_dir_entry {
  u64 val;
};

struct pasid_entry {
  u64 val[8];
};

struct pasid_table_opaque {
  struct pasid_table** pasid_table;
  int segment;
  int bus;
  int devfn;
};

struct trace_event_raw_dma_map {
  struct trace_entry ent;
  u32 __data_loc_dev_name;
  dma_addr_t dev_addr;
  phys_addr_t phys_addr;
  size_t size;
  char __data[0];
};

struct trace_event_raw_dma_unmap {
  struct trace_entry ent;
  u32 __data_loc_dev_name;
  dma_addr_t dev_addr;
  size_t size;
  char __data[0];
};

struct trace_event_raw_dma_map_sg {
  struct trace_entry ent;
  u32 __data_loc_dev_name;
  dma_addr_t dev_addr;
  phys_addr_t phys_addr;
  size_t size;
  int index;
  int total;
  char __data[0];
};

struct trace_event_raw_qi_submit {
  struct trace_entry ent;
  u64 qw0;
  u64 qw1;
  u64 qw2;
  u64 qw3;
  u32 __data_loc_iommu;
  char __data[0];
};

struct trace_event_data_offsets_dma_map {
  u32 dev_name;
};

struct trace_event_data_offsets_dma_unmap {
  u32 dev_name;
};

struct trace_event_data_offsets_dma_map_sg {
  u32 dev_name;
};

struct trace_event_data_offsets_qi_submit {
  u32 iommu;
};

typedef void (*btf_trace_map_single)(
    void*,
    struct device*,
    dma_addr_t,
    phys_addr_t,
    size_t);

typedef void (*btf_trace_bounce_map_single)(
    void*,
    struct device*,
    dma_addr_t,
    phys_addr_t,
    size_t);

typedef void (
    *btf_trace_unmap_single)(void*, struct device*, dma_addr_t, size_t);

typedef void (*btf_trace_unmap_sg)(void*, struct device*, dma_addr_t, size_t);

typedef void (
    *btf_trace_bounce_unmap_single)(void*, struct device*, dma_addr_t, size_t);

typedef void (
    *btf_trace_map_sg)(void*, struct device*, int, int, struct scatterlist*);

typedef void (*btf_trace_bounce_map_sg)(
    void*,
    struct device*,
    int,
    int,
    struct scatterlist*);

typedef void (
    *btf_trace_qi_submit)(void*, struct intel_iommu*, u64, u64, u64, u64);

enum irq_remap_cap {
  IRQ_POSTING_CAP = 0,
};

struct vcpu_data {
  u64 pi_desc_addr;
  u32 vector;
};

enum irq_mode {
  IRQ_REMAPPING = 0,
  IRQ_POSTING = 1,
};

struct ioapic_scope {
  struct intel_iommu* iommu;
  unsigned int id;
  unsigned int bus;
  unsigned int devfn;
};

struct hpet_scope {
  struct intel_iommu* iommu;
  u8 id;
  unsigned int bus;
  unsigned int devfn;
};

struct irq_2_iommu {
  struct intel_iommu* iommu;
  u16 irte_index;
  u16 sub_handle;
  u8 irte_mask;
  enum irq_mode mode;
};

struct intel_ir_data {
  struct irq_2_iommu irq_2_iommu;
  struct irte irte_entry;
  union {
    struct msi_msg msi_entry;
  };
};

struct set_msi_sid_data {
  struct pci_dev* pdev;
  u16 alias;
  int count;
  int busmatch_count;
};

enum device_link_state {
  DL_STATE_NONE = 4294967295,
  DL_STATE_DORMANT = 0,
  DL_STATE_AVAILABLE = 1,
  DL_STATE_CONSUMER_PROBE = 2,
  DL_STATE_ACTIVE = 3,
  DL_STATE_SUPPLIER_UNBIND = 4,
};

struct iommu_group {
  struct kobject kobj;
  struct kobject* devices_kobj;
  struct list_head devices;
  struct mutex mutex;
  struct blocking_notifier_head notifier;
  void* iommu_data;
  void (*iommu_data_release)(void*);
  char* name;
  int id;
  struct iommu_domain* default_domain;
  struct iommu_domain* domain;
  struct list_head entry;
};

struct device_link {
  struct device* supplier;
  struct list_head s_node;
  struct device* consumer;
  struct list_head c_node;
  struct device link_dev;
  enum device_link_state status;
  u32 flags;
  refcount_t rpm_active;
  struct kref kref;
  struct work_struct rm_work;
  bool supplier_preactivated;
};

enum iommu_fault_type {
  IOMMU_FAULT_DMA_UNRECOV = 1,
  IOMMU_FAULT_PAGE_REQ = 2,
};

enum iommu_inv_granularity {
  IOMMU_INV_GRANU_DOMAIN = 0,
  IOMMU_INV_GRANU_PASID = 1,
  IOMMU_INV_GRANU_ADDR = 2,
  IOMMU_INV_GRANU_NR = 3,
};

struct fsl_mc_obj_desc {
  char type[16];
  int id;
  u16 vendor;
  u16 ver_major;
  u16 ver_minor;
  u8 irq_count;
  u8 region_count;
  u32 state;
  char label[16];
  u16 flags;
};

struct fsl_mc_io;

struct fsl_mc_device_irq;

struct fsl_mc_resource;

struct fsl_mc_device {
  struct device dev;
  u64 dma_mask;
  u16 flags;
  u32 icid;
  u16 mc_handle;
  struct fsl_mc_io* mc_io;
  struct fsl_mc_obj_desc obj_desc;
  struct resource* regions;
  struct fsl_mc_device_irq** irqs;
  struct fsl_mc_resource* resource;
  struct device_link* consumer_link;
  char* driver_override;
};

enum fsl_mc_pool_type {
  FSL_MC_POOL_DPMCP = 0,
  FSL_MC_POOL_DPBP = 1,
  FSL_MC_POOL_DPCON = 2,
  FSL_MC_POOL_IRQ = 3,
  FSL_MC_NUM_POOL_TYPES = 4,
};

struct fsl_mc_resource_pool;

struct fsl_mc_resource {
  enum fsl_mc_pool_type type;
  s32 id;
  void* data;
  struct fsl_mc_resource_pool* parent_pool;
  struct list_head node;
};

struct fsl_mc_device_irq {
  struct msi_desc* msi_desc;
  struct fsl_mc_device* mc_dev;
  u8 dev_irq_index;
  struct fsl_mc_resource resource;
};

struct fsl_mc_io {
  struct device* dev;
  u16 flags;
  u32 portal_size;
  phys_addr_t portal_phys_addr;
  void* portal_virt_addr;
  struct fsl_mc_device* dpmcp_dev;
  union {
    struct mutex mutex;
    raw_spinlock_t spinlock;
  };
};

struct group_device {
  struct list_head list;
  struct device* dev;
  char* name;
};

struct iommu_group_attribute {
  struct attribute attr;
  ssize_t (*show)(struct iommu_group*, char*);
  ssize_t (*store)(struct iommu_group*, const char*, size_t);
};

struct group_for_pci_data {
  struct pci_dev* pdev;
  struct iommu_group* group;
};

struct __group_domain_type {
  struct device* dev;
  unsigned int type;
};

struct trace_event_raw_iommu_group_event {
  struct trace_entry ent;
  int gid;
  u32 __data_loc_device;
  char __data[0];
};

struct trace_event_raw_iommu_device_event {
  struct trace_entry ent;
  u32 __data_loc_device;
  char __data[0];
};

struct trace_event_raw_map {
  struct trace_entry ent;
  u64 iova;
  u64 paddr;
  size_t size;
  char __data[0];
};

struct trace_event_raw_unmap {
  struct trace_entry ent;
  u64 iova;
  size_t size;
  size_t unmapped_size;
  char __data[0];
};

struct trace_event_raw_iommu_error {
  struct trace_entry ent;
  u32 __data_loc_device;
  u32 __data_loc_driver;
  u64 iova;
  int flags;
  char __data[0];
};

struct trace_event_data_offsets_iommu_group_event {
  u32 device;
};

struct trace_event_data_offsets_iommu_device_event {
  u32 device;
};

struct trace_event_data_offsets_map {};

struct trace_event_data_offsets_unmap {};

struct trace_event_data_offsets_iommu_error {
  u32 device;
  u32 driver;
};

typedef void (*btf_trace_add_device_to_group)(void*, int, struct device*);

typedef void (*btf_trace_remove_device_from_group)(void*, int, struct device*);

typedef void (*btf_trace_attach_device_to_domain)(void*, struct device*);

typedef void (*btf_trace_detach_device_from_domain)(void*, struct device*);

typedef void (*btf_trace_map)(void*, long unsigned int, phys_addr_t, size_t);

typedef void (*btf_trace_unmap)(void*, long unsigned int, size_t, size_t);

typedef void (
    *btf_trace_io_page_fault)(void*, struct device*, long unsigned int, int);

struct iommu_dma_msi_page {
  struct list_head list;
  dma_addr_t iova;
  phys_addr_t phys;
};

enum iommu_dma_cookie_type {
  IOMMU_DMA_IOVA_COOKIE = 0,
  IOMMU_DMA_MSI_COOKIE = 1,
};

struct iommu_dma_cookie {
  enum iommu_dma_cookie_type type;
  union {
    struct iova_domain iovad;
    dma_addr_t msi_iova;
  };
  struct list_head msi_page_list;
  struct iommu_domain* fq_domain;
};

typedef ioasid_t (*ioasid_alloc_fn_t)(ioasid_t, ioasid_t, void*);

typedef void (*ioasid_free_fn_t)(ioasid_t, void*);

struct ioasid_set {
  int dummy;
};

struct ioasid_allocator_ops {
  ioasid_alloc_fn_t alloc;
  ioasid_free_fn_t free;
  struct list_head list;
  void* pdata;
};

struct ioasid_data {
  ioasid_t id;
  struct ioasid_set* set;
  void* private;
  struct callback_head rcu;
  refcount_t refs;
};

struct ioasid_allocator_data {
  struct ioasid_allocator_ops* ops;
  struct list_head list;
  struct list_head slist;
  long unsigned int flags;
  struct xarray xa;
  struct callback_head rcu;
};

struct iova_magazine {
  long unsigned int size;
  long unsigned int pfns[128];
};

struct iova_cpu_rcache {
  spinlock_t lock;
  struct iova_magazine* loaded;
  struct iova_magazine* prev;
};

struct component_ops {
  int (*bind)(struct device*, struct device*, void*);
  void (*unbind)(struct device*, struct device*, void*);
};

struct component_master_ops {
  int (*bind)(struct device*);
  void (*unbind)(struct device*);
};

struct component;

struct component_match_array {
  void* data;
  int (*compare)(struct device*, void*);
  int (*compare_typed)(struct device*, int, void*);
  void (*release)(struct device*, void*);
  struct component* component;
  bool duplicate;
};

struct master;

struct component {
  struct list_head node;
  struct master* master;
  bool bound;
  const struct component_ops* ops;
  int subcomponent;
  struct device* dev;
};

struct component_match {
  size_t alloc;
  size_t num;
  struct component_match_array* compare;
};

struct master {
  struct list_head node;
  bool bound;
  const struct component_master_ops* ops;
  struct device* dev;
  struct component_match* match;
  struct dentry* dentry;
};

struct fwnode_link {
  struct fwnode_handle* supplier;
  struct list_head s_hook;
  struct fwnode_handle* consumer;
  struct list_head c_hook;
};

enum dpm_order {
  DPM_ORDER_NONE = 0,
  DPM_ORDER_DEV_AFTER_PARENT = 1,
  DPM_ORDER_PARENT_BEFORE_DEV = 2,
  DPM_ORDER_DEV_LAST = 3,
};

struct subsys_private {
  struct kset subsys;
  struct kset* devices_kset;
  struct list_head interfaces;
  struct mutex mutex;
  struct kset* drivers_kset;
  struct klist klist_devices;
  struct klist klist_drivers;
  struct blocking_notifier_head bus_notifier;
  unsigned int drivers_autoprobe : 1;
  struct bus_type* bus;
  struct kset glue_dirs;
  struct class* class;
};

struct driver_private {
  struct kobject kobj;
  struct klist klist_devices;
  struct klist_node knode_bus;
  struct module_kobject* mkobj;
  struct device_driver* driver;
};

struct device_private {
  struct klist klist_children;
  struct klist_node knode_parent;
  struct klist_node knode_driver;
  struct klist_node knode_bus;
  struct klist_node knode_class;
  struct list_head deferred_probe;
  struct device_driver* async_driver;
  char* deferred_probe_reason;
  struct device* device;
  u8 dead : 1;
};

union device_attr_group_devres {
  const struct attribute_group* group;
  const struct attribute_group** groups;
};

struct class_dir {
  struct kobject kobj;
  struct class* class;
};

struct root_device {
  struct device dev;
  struct module* owner;
};

struct subsys_dev_iter {
  struct klist_iter ki;
  const struct device_type* type;
};

struct device_attach_data {
  struct device* dev;
  bool check_async;
  bool want_async;
  bool have_async;
};

struct class_attribute {
  struct attribute attr;
  ssize_t (*show)(struct class*, struct class_attribute*, char*);
  ssize_t (*store)(struct class*, struct class_attribute*, const char*, size_t);
};

struct class_attribute_string {
  struct class_attribute attr;
  char* str;
};

struct class_compat {
  struct kobject* kobj;
};

struct irq_affinity_devres {
  unsigned int count;
  unsigned int irq[0];
};

struct platform_object {
  struct platform_device pdev;
  char name[0];
};

struct cpu_attr {
  struct device_attribute attr;
  const struct cpumask* const map;
};

typedef struct kobject* kobj_probe_t(dev_t, int*, void*);

struct probe {
  struct probe* next;
  dev_t dev;
  long unsigned int range;
  struct module* owner;
  kobj_probe_t* get;
  int (*lock)(dev_t, void*);
  void* data;
};

struct kobj_map___2 {
  struct probe* probes[255];
  struct mutex* lock;
};

typedef int (*dr_match_t)(struct device*, void*, void*);

struct devres_node {
  struct list_head entry;
  dr_release_t release;
};

struct devres {
  struct devres_node node;
  u8 data[0];
};

struct devres_group {
  struct devres_node node[2];
  void* id;
  int color;
};

struct action_devres {
  void* data;
  void (*action)(void*);
};

struct pages_devres {
  long unsigned int addr;
  unsigned int order;
};

struct attribute_container {
  struct list_head node;
  struct klist containers;
  struct class* class;
  const struct attribute_group* grp;
  struct device_attribute** attrs;
  int (*match)(struct attribute_container*, struct device*);
  long unsigned int flags;
};

struct internal_container {
  struct klist_node node;
  struct attribute_container* cont;
  struct device classdev;
};

struct transport_container;

struct transport_class {
  struct class class;
  int (*setup)(struct transport_container*, struct device*, struct device*);
  int (*configure)(struct transport_container*, struct device*, struct device*);
  int (*remove)(struct transport_container*, struct device*, struct device*);
};

struct transport_container {
  struct attribute_container ac;
  const struct attribute_group* statistics;
};

struct anon_transport_class {
  struct transport_class tclass;
  struct attribute_container container;
};

typedef void* (*devcon_match_fn_t)(struct fwnode_handle*, const char*, void*);

struct reset_control;

struct mii_bus;

struct mdio_device {
  struct device dev;
  struct mii_bus* bus;
  char modalias[32];
  int (*bus_match)(struct device*, struct device_driver*);
  void (*device_free)(struct mdio_device*);
  void (*device_remove)(struct mdio_device*);
  int addr;
  int flags;
  struct gpio_desc* reset_gpio;
  struct reset_control* reset_ctrl;
  unsigned int reset_assert_delay;
  unsigned int reset_deassert_delay;
};

struct phy_c45_device_ids {
  u32 devices_in_package;
  u32 mmds_present;
  u32 device_ids[32];
};

enum phy_state {
  PHY_DOWN = 0,
  PHY_READY = 1,
  PHY_HALTED = 2,
  PHY_UP = 3,
  PHY_RUNNING = 4,
  PHY_NOLINK = 5,
  PHY_CABLETEST = 6,
};

typedef enum {
  PHY_INTERFACE_MODE_NA = 0,
  PHY_INTERFACE_MODE_INTERNAL = 1,
  PHY_INTERFACE_MODE_MII = 2,
  PHY_INTERFACE_MODE_GMII = 3,
  PHY_INTERFACE_MODE_SGMII = 4,
  PHY_INTERFACE_MODE_TBI = 5,
  PHY_INTERFACE_MODE_REVMII = 6,
  PHY_INTERFACE_MODE_RMII = 7,
  PHY_INTERFACE_MODE_RGMII = 8,
  PHY_INTERFACE_MODE_RGMII_ID = 9,
  PHY_INTERFACE_MODE_RGMII_RXID = 10,
  PHY_INTERFACE_MODE_RGMII_TXID = 11,
  PHY_INTERFACE_MODE_RTBI = 12,
  PHY_INTERFACE_MODE_SMII = 13,
  PHY_INTERFACE_MODE_XGMII = 14,
  PHY_INTERFACE_MODE_XLGMII = 15,
  PHY_INTERFACE_MODE_MOCA = 16,
  PHY_INTERFACE_MODE_QSGMII = 17,
  PHY_INTERFACE_MODE_TRGMII = 18,
  PHY_INTERFACE_MODE_100BASEX = 19,
  PHY_INTERFACE_MODE_1000BASEX = 20,
  PHY_INTERFACE_MODE_2500BASEX = 21,
  PHY_INTERFACE_MODE_5GBASER = 22,
  PHY_INTERFACE_MODE_RXAUI = 23,
  PHY_INTERFACE_MODE_XAUI = 24,
  PHY_INTERFACE_MODE_10GBASER = 25,
  PHY_INTERFACE_MODE_USXGMII = 26,
  PHY_INTERFACE_MODE_10GKR = 27,
  PHY_INTERFACE_MODE_MAX = 28,
} phy_interface_t;

struct phylink;

struct phy_driver;

struct phy_package_shared;

struct mii_timestamper;

struct phy_device {
  struct mdio_device mdio;
  struct phy_driver* drv;
  u32 phy_id;
  struct phy_c45_device_ids c45_ids;
  unsigned int is_c45 : 1;
  unsigned int is_internal : 1;
  unsigned int is_pseudo_fixed_link : 1;
  unsigned int is_gigabit_capable : 1;
  unsigned int has_fixups : 1;
  unsigned int suspended : 1;
  unsigned int suspended_by_mdio_bus : 1;
  unsigned int sysfs_links : 1;
  unsigned int loopback_enabled : 1;
  unsigned int downshifted_rate : 1;
  unsigned int is_on_sfp_module : 1;
  unsigned int autoneg : 1;
  unsigned int link : 1;
  unsigned int autoneg_complete : 1;
  unsigned int interrupts : 1;
  enum phy_state state;
  u32 dev_flags;
  phy_interface_t interface;
  int speed;
  int duplex;
  int port;
  int pause;
  int asym_pause;
  u8 master_slave_get;
  u8 master_slave_set;
  u8 master_slave_state;
  long unsigned int supported[2];
  long unsigned int advertising[2];
  long unsigned int lp_advertising[2];
  long unsigned int adv_old[2];
  u32 eee_broken_modes;
  int irq;
  void* priv;
  struct phy_package_shared* shared;
  struct sk_buff* skb;
  void* ehdr;
  struct nlattr* nest;
  struct delayed_work state_queue;
  struct mutex lock;
  bool sfp_bus_attached;
  struct sfp_bus* sfp_bus;
  struct phylink* phylink;
  struct net_device* attached_dev;
  struct mii_timestamper* mii_ts;
  u8 mdix;
  u8 mdix_ctrl;
  void (*phy_link_change)(struct phy_device*, bool);
  void (*adjust_link)(struct net_device*);
};

struct phy_tdr_config {
  u32 first;
  u32 last;
  u32 step;
  s8 pair;
};

struct mdio_bus_stats {
  u64_stats_t transfers;
  u64_stats_t errors;
  u64_stats_t writes;
  u64_stats_t reads;
  struct u64_stats_sync syncp;
};

struct mii_bus {
  struct module* owner;
  const char* name;
  char id[61];
  void* priv;
  int (*read)(struct mii_bus*, int, int);
  int (*write)(struct mii_bus*, int, int, u16);
  int (*reset)(struct mii_bus*);
  struct mdio_bus_stats stats[32];
  struct mutex mdio_lock;
  struct device* parent;
  enum {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4,
  } state;
  struct device dev;
  struct mdio_device* mdio_map[32];
  u32 phy_mask;
  u32 phy_ignore_ta_mask;
  int irq[32];
  int reset_delay_us;
  int reset_post_delay_us;
  struct gpio_desc* reset_gpiod;
  enum {
    MDIOBUS_NO_CAP = 0,
    MDIOBUS_C22 = 1,
    MDIOBUS_C45 = 2,
    MDIOBUS_C22_C45 = 3,
  } probe_capabilities;
  struct mutex shared_lock;
  struct phy_package_shared* shared[32];
};

struct mdio_driver_common {
  struct device_driver driver;
  int flags;
};

struct mii_timestamper {
  bool (*rxtstamp)(struct mii_timestamper*, struct sk_buff*, int);
  void (*txtstamp)(struct mii_timestamper*, struct sk_buff*, int);
  int (*hwtstamp)(struct mii_timestamper*, struct ifreq*);
  void (*link_state)(struct mii_timestamper*, struct phy_device*);
  int (*ts_info)(struct mii_timestamper*, struct ethtool_ts_info*);
  struct device* device;
};

struct phy_package_shared {
  int addr;
  refcount_t refcnt;
  long unsigned int flags;
  size_t priv_size;
  void* priv;
};

struct phy_driver {
  struct mdio_driver_common mdiodrv;
  u32 phy_id;
  char* name;
  u32 phy_id_mask;
  const long unsigned int* const features;
  u32 flags;
  const void* driver_data;
  int (*soft_reset)(struct phy_device*);
  int (*config_init)(struct phy_device*);
  int (*probe)(struct phy_device*);
  int (*get_features)(struct phy_device*);
  int (*suspend)(struct phy_device*);
  int (*resume)(struct phy_device*);
  int (*config_aneg)(struct phy_device*);
  int (*aneg_done)(struct phy_device*);
  int (*read_status)(struct phy_device*);
  int (*config_intr)(struct phy_device*);
  irqreturn_t (*handle_interrupt)(struct phy_device*);
  void (*remove)(struct phy_device*);
  int (*match_phy_device)(struct phy_device*);
  int (*set_wol)(struct phy_device*, struct ethtool_wolinfo*);
  void (*get_wol)(struct phy_device*, struct ethtool_wolinfo*);
  void (*link_change_notify)(struct phy_device*);
  int (*read_mmd)(struct phy_device*, int, u16);
  int (*write_mmd)(struct phy_device*, int, u16, u16);
  int (*read_page)(struct phy_device*);
  int (*write_page)(struct phy_device*, int);
  int (*module_info)(struct phy_device*, struct ethtool_modinfo*);
  int (*module_eeprom)(struct phy_device*, struct ethtool_eeprom*, u8*);
  int (*cable_test_start)(struct phy_device*);
  int (*cable_test_tdr_start)(struct phy_device*, const struct phy_tdr_config*);
  int (*cable_test_get_status)(struct phy_device*, bool*);
  int (*get_sset_count)(struct phy_device*);
  void (*get_strings)(struct phy_device*, u8*);
  void (*get_stats)(struct phy_device*, struct ethtool_stats*, u64*);
  int (*get_tunable)(struct phy_device*, struct ethtool_tunable*, void*);
  int (*set_tunable)(struct phy_device*, struct ethtool_tunable*, const void*);
  int (*set_loopback)(struct phy_device*, bool);
  int (*get_sqi)(struct phy_device*);
  int (*get_sqi_max)(struct phy_device*);
};

struct software_node;

struct software_node_ref_args {
  const struct software_node* node;
  unsigned int nargs;
  u64 args[8];
};

struct software_node {
  const char* name;
  const struct software_node* parent;
  const struct property_entry* properties;
};

struct swnode {
  int id;
  struct kobject kobj;
  struct fwnode_handle fwnode;
  const struct software_node* node;
  struct ida child_ids;
  struct list_head entry;
  struct list_head children;
  struct swnode* parent;
  unsigned int allocated : 1;
  unsigned int managed : 1;
};

struct auxiliary_device_id {
  char name[32];
  kernel_ulong_t driver_data;
};

struct auxiliary_device {
  struct device dev;
  const char* name;
  u32 id;
};

struct auxiliary_driver {
  int (*probe)(struct auxiliary_device*, const struct auxiliary_device_id*);
  void (*remove)(struct auxiliary_device*);
  void (*shutdown)(struct auxiliary_device*);
  int (*suspend)(struct auxiliary_device*, pm_message_t);
  int (*resume)(struct auxiliary_device*);
  const char* name;
  struct device_driver driver;
  const struct auxiliary_device_id* id_table;
};

struct req {
  struct req* next;
  struct completion done;
  int err;
  const char* name;
  umode_t mode;
  kuid_t uid;
  kgid_t gid;
  struct device* dev;
};

struct pm_clk_notifier_block {
  struct notifier_block nb;
  struct dev_pm_domain* pm_domain;
  char* con_ids[0];
};

enum fw_opt {
  FW_OPT_UEVENT = 1,
  FW_OPT_NOWAIT = 2,
  FW_OPT_USERHELPER = 4,
  FW_OPT_NO_WARN = 8,
  FW_OPT_NOCACHE = 16,
  FW_OPT_NOFALLBACK_SYSFS = 32,
  FW_OPT_FALLBACK_PLATFORM = 64,
  FW_OPT_PARTIAL = 128,
};

enum fw_status {
  FW_STATUS_UNKNOWN = 0,
  FW_STATUS_LOADING = 1,
  FW_STATUS_DONE = 2,
  FW_STATUS_ABORTED = 3,
};

struct fw_state {
  struct completion completion;
  enum fw_status status;
};

struct firmware_cache;

struct fw_priv {
  struct kref ref;
  struct list_head list;
  struct firmware_cache* fwc;
  struct fw_state fw_st;
  void* data;
  size_t size;
  size_t allocated_size;
  size_t offset;
  u32 opt_flags;
  bool is_paged_buf;
  struct page** pages;
  int nr_pages;
  int page_array_size;
  const char* fw_name;
};

struct firmware_cache {
  spinlock_t lock;
  struct list_head head;
  int state;
};

struct firmware_work {
  struct work_struct work;
  struct module* module;
  const char* name;
  struct device* device;
  void* context;
  void (*cont)(const struct firmware*, void*);
  u32 opt_flags;
};

typedef void (*node_registration_func_t)(struct node*);

typedef int (*walk_memory_blocks_func_t)(struct memory_block*, void*);

struct node_access_nodes {
  struct device dev;
  struct list_head list_node;
  unsigned int access;
};

struct node_attr {
  struct device_attribute attr;
  enum node_states state;
};

struct for_each_memory_block_cb_data {
  walk_memory_blocks_func_t func;
  void* arg;
};

enum regcache_type {
  REGCACHE_NONE = 0,
  REGCACHE_RBTREE = 1,
  REGCACHE_COMPRESSED = 2,
  REGCACHE_FLAT = 3,
};

struct reg_default {
  unsigned int reg;
  unsigned int def;
};

struct reg_sequence {
  unsigned int reg;
  unsigned int def;
  unsigned int delay_us;
};

enum regmap_endian {
  REGMAP_ENDIAN_DEFAULT = 0,
  REGMAP_ENDIAN_BIG = 1,
  REGMAP_ENDIAN_LITTLE = 2,
  REGMAP_ENDIAN_NATIVE = 3,
};

struct regmap_range {
  unsigned int range_min;
  unsigned int range_max;
};

struct regmap_access_table {
  const struct regmap_range* yes_ranges;
  unsigned int n_yes_ranges;
  const struct regmap_range* no_ranges;
  unsigned int n_no_ranges;
};

typedef void (*regmap_lock)(void*);

typedef void (*regmap_unlock)(void*);

struct regmap_range_cfg;

struct regmap_config {
  const char* name;
  int reg_bits;
  int reg_stride;
  int pad_bits;
  int val_bits;
  bool (*writeable_reg)(struct device*, unsigned int);
  bool (*readable_reg)(struct device*, unsigned int);
  bool (*volatile_reg)(struct device*, unsigned int);
  bool (*precious_reg)(struct device*, unsigned int);
  bool (*writeable_noinc_reg)(struct device*, unsigned int);
  bool (*readable_noinc_reg)(struct device*, unsigned int);
  bool disable_locking;
  regmap_lock lock;
  regmap_unlock unlock;
  void* lock_arg;
  int (*reg_read)(void*, unsigned int, unsigned int*);
  int (*reg_write)(void*, unsigned int, unsigned int);
  bool fast_io;
  unsigned int max_register;
  const struct regmap_access_table* wr_table;
  const struct regmap_access_table* rd_table;
  const struct regmap_access_table* volatile_table;
  const struct regmap_access_table* precious_table;
  const struct regmap_access_table* wr_noinc_table;
  const struct regmap_access_table* rd_noinc_table;
  const struct reg_default* reg_defaults;
  unsigned int num_reg_defaults;
  enum regcache_type cache_type;
  const void* reg_defaults_raw;
  unsigned int num_reg_defaults_raw;
  long unsigned int read_flag_mask;
  long unsigned int write_flag_mask;
  bool zero_flag_mask;
  bool use_single_read;
  bool use_single_write;
  bool use_relaxed_mmio;
  bool can_multi_write;
  enum regmap_endian reg_format_endian;
  enum regmap_endian val_format_endian;
  const struct regmap_range_cfg* ranges;
  unsigned int num_ranges;
  bool use_hwlock;
  unsigned int hwlock_id;
  unsigned int hwlock_mode;
  bool can_sleep;
};

struct regmap_range_cfg {
  const char* name;
  unsigned int range_min;
  unsigned int range_max;
  unsigned int selector_reg;
  unsigned int selector_mask;
  int selector_shift;
  unsigned int window_start;
  unsigned int window_len;
};

typedef int (*regmap_hw_write)(void*, const void*, size_t);

typedef int (
    *regmap_hw_gather_write)(void*, const void*, size_t, const void*, size_t);

struct regmap_async;

typedef int (*regmap_hw_async_write)(
    void*,
    const void*,
    size_t,
    const void*,
    size_t,
    struct regmap_async*);

struct regmap;

struct regmap_async {
  struct list_head list;
  struct regmap* map;
  void* work_buf;
};

typedef int (*regmap_hw_read)(void*, const void*, size_t, void*, size_t);

typedef int (*regmap_hw_reg_read)(void*, unsigned int, unsigned int*);

typedef int (*regmap_hw_reg_write)(void*, unsigned int, unsigned int);

typedef int (*regmap_hw_reg_update_bits)(
    void*,
    unsigned int,
    unsigned int,
    unsigned int);

typedef struct regmap_async* (*regmap_hw_async_alloc)();

typedef void (*regmap_hw_free_context)(void*);

struct regmap_bus {
  bool fast_io;
  regmap_hw_write write;
  regmap_hw_gather_write gather_write;
  regmap_hw_async_write async_write;
  regmap_hw_reg_write reg_write;
  regmap_hw_reg_update_bits reg_update_bits;
  regmap_hw_read read;
  regmap_hw_reg_read reg_read;
  regmap_hw_free_context free_context;
  regmap_hw_async_alloc async_alloc;
  u8 read_flag_mask;
  enum regmap_endian reg_format_endian_default;
  enum regmap_endian val_format_endian_default;
  size_t max_raw_read;
  size_t max_raw_write;
};

struct reg_field {
  unsigned int reg;
  unsigned int lsb;
  unsigned int msb;
  unsigned int id_size;
  unsigned int id_offset;
};

struct regmap_format {
  size_t buf_size;
  size_t reg_bytes;
  size_t pad_bytes;
  size_t val_bytes;
  void (*format_write)(struct regmap*, unsigned int, unsigned int);
  void (*format_reg)(void*, unsigned int, unsigned int);
  void (*format_val)(void*, unsigned int, unsigned int);
  unsigned int (*parse_val)(const void*);
  void (*parse_inplace)(void*);
};

struct hwspinlock;

struct regcache_ops;

struct regmap {
  union {
    struct mutex mutex;
    struct {
      spinlock_t spinlock;
      long unsigned int spinlock_flags;
    };
  };
  regmap_lock lock;
  regmap_unlock unlock;
  void* lock_arg;
  gfp_t alloc_flags;
  struct device* dev;
  void* work_buf;
  struct regmap_format format;
  const struct regmap_bus* bus;
  void* bus_context;
  const char* name;
  bool async;
  spinlock_t async_lock;
  wait_queue_head_t async_waitq;
  struct list_head async_list;
  struct list_head async_free;
  int async_ret;
  bool debugfs_disable;
  struct dentry* debugfs;
  const char* debugfs_name;
  unsigned int debugfs_reg_len;
  unsigned int debugfs_val_len;
  unsigned int debugfs_tot_len;
  struct list_head debugfs_off_cache;
  struct mutex cache_lock;
  unsigned int max_register;
  bool (*writeable_reg)(struct device*, unsigned int);
  bool (*readable_reg)(struct device*, unsigned int);
  bool (*volatile_reg)(struct device*, unsigned int);
  bool (*precious_reg)(struct device*, unsigned int);
  bool (*writeable_noinc_reg)(struct device*, unsigned int);
  bool (*readable_noinc_reg)(struct device*, unsigned int);
  const struct regmap_access_table* wr_table;
  const struct regmap_access_table* rd_table;
  const struct regmap_access_table* volatile_table;
  const struct regmap_access_table* precious_table;
  const struct regmap_access_table* wr_noinc_table;
  const struct regmap_access_table* rd_noinc_table;
  int (*reg_read)(void*, unsigned int, unsigned int*);
  int (*reg_write)(void*, unsigned int, unsigned int);
  int (*reg_update_bits)(void*, unsigned int, unsigned int, unsigned int);
  bool defer_caching;
  long unsigned int read_flag_mask;
  long unsigned int write_flag_mask;
  int reg_shift;
  int reg_stride;
  int reg_stride_order;
  const struct regcache_ops* cache_ops;
  enum regcache_type cache_type;
  unsigned int cache_size_raw;
  unsigned int cache_word_size;
  unsigned int num_reg_defaults;
  unsigned int num_reg_defaults_raw;
  bool cache_only;
  bool cache_bypass;
  bool cache_free;
  struct reg_default* reg_defaults;
  const void* reg_defaults_raw;
  void* cache;
  bool cache_dirty;
  bool no_sync_defaults;
  struct reg_sequence* patch;
  int patch_regs;
  bool use_single_read;
  bool use_single_write;
  bool can_multi_write;
  size_t max_raw_read;
  size_t max_raw_write;
  struct rb_root range_tree;
  void* selector_work_buf;
  struct hwspinlock* hwlock;
  bool can_sleep;
};

struct regcache_ops {
  const char* name;
  enum regcache_type type;
  int (*init)(struct regmap*);
  int (*exit)(struct regmap*);
  void (*debugfs_init)(struct regmap*);
  int (*read)(struct regmap*, unsigned int, unsigned int*);
  int (*write)(struct regmap*, unsigned int, unsigned int);
  int (*sync)(struct regmap*, unsigned int, unsigned int);
  int (*drop)(struct regmap*, unsigned int, unsigned int);
};

struct regmap_range_node {
  struct rb_node node;
  const char* name;
  struct regmap* map;
  unsigned int range_min;
  unsigned int range_max;
  unsigned int selector_reg;
  unsigned int selector_mask;
  int selector_shift;
  unsigned int window_start;
  unsigned int window_len;
};

struct regmap_field {
  struct regmap* regmap;
  unsigned int mask;
  unsigned int shift;
  unsigned int reg;
  unsigned int id_size;
  unsigned int id_offset;
};

struct trace_event_raw_regmap_reg {
  struct trace_entry ent;
  u32 __data_loc_name;
  unsigned int reg;
  unsigned int val;
  char __data[0];
};

struct trace_event_raw_regmap_block {
  struct trace_entry ent;
  u32 __data_loc_name;
  unsigned int reg;
  int count;
  char __data[0];
};

struct trace_event_raw_regcache_sync {
  struct trace_entry ent;
  u32 __data_loc_name;
  u32 __data_loc_status;
  u32 __data_loc_type;
  char __data[0];
};

struct trace_event_raw_regmap_bool {
  struct trace_entry ent;
  u32 __data_loc_name;
  int flag;
  char __data[0];
};

struct trace_event_raw_regmap_async {
  struct trace_entry ent;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_regcache_drop_region {
  struct trace_entry ent;
  u32 __data_loc_name;
  unsigned int from;
  unsigned int to;
  char __data[0];
};

struct trace_event_data_offsets_regmap_reg {
  u32 name;
};

struct trace_event_data_offsets_regmap_block {
  u32 name;
};

struct trace_event_data_offsets_regcache_sync {
  u32 name;
  u32 status;
  u32 type;
};

struct trace_event_data_offsets_regmap_bool {
  u32 name;
};

struct trace_event_data_offsets_regmap_async {
  u32 name;
};

struct trace_event_data_offsets_regcache_drop_region {
  u32 name;
};

typedef void (*btf_trace_regmap_reg_write)(
    void*,
    struct regmap*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_regmap_reg_read)(
    void*,
    struct regmap*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_regmap_reg_read_cache)(
    void*,
    struct regmap*,
    unsigned int,
    unsigned int);

typedef void (
    *btf_trace_regmap_hw_read_start)(void*, struct regmap*, unsigned int, int);

typedef void (
    *btf_trace_regmap_hw_read_done)(void*, struct regmap*, unsigned int, int);

typedef void (
    *btf_trace_regmap_hw_write_start)(void*, struct regmap*, unsigned int, int);

typedef void (
    *btf_trace_regmap_hw_write_done)(void*, struct regmap*, unsigned int, int);

typedef void (
    *btf_trace_regcache_sync)(void*, struct regmap*, const char*, const char*);

typedef void (*btf_trace_regmap_cache_only)(void*, struct regmap*, bool);

typedef void (*btf_trace_regmap_cache_bypass)(void*, struct regmap*, bool);

typedef void (*btf_trace_regmap_async_write_start)(
    void*,
    struct regmap*,
    unsigned int,
    int);

typedef void (*btf_trace_regmap_async_io_complete)(void*, struct regmap*);

typedef void (*btf_trace_regmap_async_complete_start)(void*, struct regmap*);

typedef void (*btf_trace_regmap_async_complete_done)(void*, struct regmap*);

typedef void (*btf_trace_regcache_drop_region)(
    void*,
    struct regmap*,
    unsigned int,
    unsigned int);

struct regcache_rbtree_node {
  void* block;
  long int* cache_present;
  unsigned int base_reg;
  unsigned int blklen;
  struct rb_node node;
};

struct regcache_rbtree_ctx {
  struct rb_root root;
  struct regcache_rbtree_node* cached_rbnode;
};

struct regmap_debugfs_off_cache {
  struct list_head list;
  off_t min;
  off_t max;
  unsigned int base_reg;
  unsigned int max_reg;
};

struct regmap_debugfs_node {
  struct regmap* map;
  struct list_head link;
};

typedef void (*irq_write_msi_msg_t)(struct msi_desc*, struct msi_msg*);

struct platform_msi_priv_data {
  struct device* dev;
  void* host_data;
  msi_alloc_info_t arg;
  irq_write_msi_msg_t write_msg;
  int devid;
};

struct brd_device {
  int brd_number;
  struct request_queue* brd_queue;
  struct gendisk* brd_disk;
  struct list_head brd_list;
  spinlock_t brd_lock;
  struct xarray brd_pages;
  u64 brd_nr_pages;
};

struct virtio_blk_geometry {
  __virtio16 cylinders;
  __u8 heads;
  __u8 sectors;
};

struct virtio_blk_config {
  __virtio64 capacity;
  __virtio32 size_max;
  __virtio32 seg_max;
  struct virtio_blk_geometry geometry;
  __virtio32 blk_size;
  __u8 physical_block_exp;
  __u8 alignment_offset;
  __virtio16 min_io_size;
  __virtio32 opt_io_size;
  __u8 wce;
  __u8 unused;
  __virtio16 num_queues;
  __virtio32 max_discard_sectors;
  __virtio32 max_discard_seg;
  __virtio32 discard_sector_alignment;
  __virtio32 max_write_zeroes_sectors;
  __virtio32 max_write_zeroes_seg;
  __u8 write_zeroes_may_unmap;
  __u8 unused1[3];
} __attribute__((packed));

struct virtio_blk_outhdr {
  __virtio32 type;
  __virtio32 ioprio;
  __virtio64 sector;
};

struct virtio_blk_discard_write_zeroes {
  __le64 sector;
  __le32 num_sectors;
  __le32 flags;
};

struct virtio_blk_vq {
  struct virtqueue* vq;
  spinlock_t lock;
  char name[16];
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct virtio_blk {
  struct mutex vdev_mutex;
  struct virtio_device* vdev;
  struct gendisk* disk;
  struct blk_mq_tag_set tag_set;
  struct work_struct config_work;
  refcount_t refs;
  unsigned int sg_elems;
  int index;
  int num_vqs;
  struct virtio_blk_vq* vqs;
};

struct virtblk_req {
  struct virtio_blk_outhdr out_hdr;
  u8 status;
  struct scatterlist sg[0];
};

struct dax_operations {
  long int (*direct_access)(
      struct dax_device*,
      long unsigned int,
      long int,
      void**,
      pfn_t*);
  bool (*dax_supported)(
      struct dax_device*,
      struct block_device*,
      int,
      sector_t,
      sector_t);
  size_t (*copy_from_iter)(
      struct dax_device*,
      long unsigned int,
      void*,
      size_t,
      struct iov_iter*);
  size_t (*copy_to_iter)(
      struct dax_device*,
      long unsigned int,
      void*,
      size_t,
      struct iov_iter*);
  int (*zero_page_range)(struct dax_device*, long unsigned int, size_t);
};

struct dax_device {
  struct hlist_node list;
  struct inode inode;
  struct cdev cdev;
  const char* host;
  void* private;
  long unsigned int flags;
  const struct dax_operations* ops;
};

enum dax_device_flags {
  DAXDEV_ALIVE = 0,
  DAXDEV_WRITE_CACHE = 1,
  DAXDEV_SYNC = 2,
};

struct dax_region {
  int id;
  int target_node;
  struct kref kref;
  struct device* dev;
  unsigned int align;
  struct ida ida;
  struct resource res;
  struct device* seed;
  struct device* youngest;
};

struct dax_mapping {
  struct device dev;
  int range_id;
  int id;
};

struct dev_dax_range {
  long unsigned int pgoff;
  struct range range;
  struct dax_mapping* mapping;
};

struct dev_dax {
  struct dax_region* region;
  struct dax_device* dax_dev;
  unsigned int align;
  int target_node;
  int id;
  struct ida ida;
  struct device dev;
  struct dev_pagemap* pgmap;
  int nr_range;
  struct dev_dax_range* ranges;
};

enum dev_dax_subsys {
  DEV_DAX_BUS = 0,
  DEV_DAX_CLASS = 1,
};

struct dev_dax_data {
  struct dax_region* dax_region;
  struct dev_pagemap* pgmap;
  enum dev_dax_subsys subsys;
  resource_size_t size;
  int id;
};

struct dax_device_driver {
  struct device_driver drv;
  struct list_head ids;
  int match_always;
  int (*probe)(struct dev_dax*);
  void (*remove)(struct dev_dax*);
};

struct dax_id {
  struct list_head list;
  char dev_name[30];
};

enum id_action {
  ID_REMOVE = 0,
  ID_ADD = 1,
};

typedef __u64 blist_flags_t;

enum scsi_device_state {
  SDEV_CREATED = 1,
  SDEV_RUNNING = 2,
  SDEV_CANCEL = 3,
  SDEV_DEL = 4,
  SDEV_QUIESCE = 5,
  SDEV_OFFLINE = 6,
  SDEV_TRANSPORT_OFFLINE = 7,
  SDEV_BLOCK = 8,
  SDEV_CREATED_BLOCK = 9,
};

struct scsi_vpd {
  struct callback_head rcu;
  int len;
  unsigned char data[0];
};

struct Scsi_Host;

struct scsi_target;

struct scsi_device_handler;

struct scsi_device {
  struct Scsi_Host* host;
  struct request_queue* request_queue;
  struct list_head siblings;
  struct list_head same_target_siblings;
  atomic_t device_busy;
  atomic_t device_blocked;
  atomic_t restarts;
  spinlock_t list_lock;
  struct list_head starved_entry;
  short unsigned int queue_depth;
  short unsigned int max_queue_depth;
  short unsigned int last_queue_full_depth;
  short unsigned int last_queue_full_count;
  long unsigned int last_queue_full_time;
  long unsigned int queue_ramp_up_period;
  long unsigned int last_queue_ramp_up;
  unsigned int id;
  unsigned int channel;
  u64 lun;
  unsigned int manufacturer;
  unsigned int sector_size;
  void* hostdata;
  unsigned char type;
  char scsi_level;
  char inq_periph_qual;
  struct mutex inquiry_mutex;
  unsigned char inquiry_len;
  unsigned char* inquiry;
  const char* vendor;
  const char* model;
  const char* rev;
  struct scsi_vpd* vpd_pg0;
  struct scsi_vpd* vpd_pg83;
  struct scsi_vpd* vpd_pg80;
  struct scsi_vpd* vpd_pg89;
  unsigned char current_tag;
  struct scsi_target* sdev_target;
  blist_flags_t sdev_bflags;
  unsigned int eh_timeout;
  unsigned int removable : 1;
  unsigned int changed : 1;
  unsigned int busy : 1;
  unsigned int lockable : 1;
  unsigned int locked : 1;
  unsigned int borken : 1;
  unsigned int disconnect : 1;
  unsigned int soft_reset : 1;
  unsigned int sdtr : 1;
  unsigned int wdtr : 1;
  unsigned int ppr : 1;
  unsigned int tagged_supported : 1;
  unsigned int simple_tags : 1;
  unsigned int was_reset : 1;
  unsigned int expecting_cc_ua : 1;
  unsigned int use_10_for_rw : 1;
  unsigned int use_10_for_ms : 1;
  unsigned int set_dbd_for_ms : 1;
  unsigned int no_report_opcodes : 1;
  unsigned int no_write_same : 1;
  unsigned int use_16_for_rw : 1;
  unsigned int skip_ms_page_8 : 1;
  unsigned int skip_ms_page_3f : 1;
  unsigned int skip_vpd_pages : 1;
  unsigned int try_vpd_pages : 1;
  unsigned int use_192_bytes_for_3f : 1;
  unsigned int no_start_on_add : 1;
  unsigned int allow_restart : 1;
  unsigned int manage_start_stop : 1;
  unsigned int start_stop_pwr_cond : 1;
  unsigned int no_uld_attach : 1;
  unsigned int select_no_atn : 1;
  unsigned int fix_capacity : 1;
  unsigned int guess_capacity : 1;
  unsigned int retry_hwerror : 1;
  unsigned int last_sector_bug : 1;
  unsigned int no_read_disc_info : 1;
  unsigned int no_read_capacity_16 : 1;
  unsigned int try_rc_10_first : 1;
  unsigned int security_supported : 1;
  unsigned int is_visible : 1;
  unsigned int wce_default_on : 1;
  unsigned int no_dif : 1;
  unsigned int broken_fua : 1;
  unsigned int lun_in_cdb : 1;
  unsigned int unmap_limit_for_ws : 1;
  unsigned int rpm_autosuspend : 1;
  bool offline_already;
  atomic_t disk_events_disable_depth;
  long unsigned int supported_events[1];
  long unsigned int pending_events[1];
  struct list_head event_list;
  struct work_struct event_work;
  unsigned int max_device_blocked;
  atomic_t iorequest_cnt;
  atomic_t iodone_cnt;
  atomic_t ioerr_cnt;
  struct device sdev_gendev;
  struct device sdev_dev;
  struct execute_work ew;
  struct work_struct requeue_work;
  struct scsi_device_handler* handler;
  void* handler_data;
  size_t dma_drain_len;
  void* dma_drain_buf;
  unsigned char access_state;
  struct mutex state_mutex;
  enum scsi_device_state sdev_state;
  struct task_struct* quiesced_by;
  long unsigned int sdev_data[0];
};

enum scsi_host_state {
  SHOST_CREATED = 1,
  SHOST_RUNNING = 2,
  SHOST_CANCEL = 3,
  SHOST_DEL = 4,
  SHOST_RECOVERY = 5,
  SHOST_CANCEL_RECOVERY = 6,
  SHOST_DEL_RECOVERY = 7,
};

struct scsi_host_template;

struct scsi_transport_template;

struct Scsi_Host {
  struct list_head __devices;
  struct list_head __targets;
  struct list_head starved_list;
  spinlock_t default_lock;
  spinlock_t* host_lock;
  struct mutex scan_mutex;
  struct list_head eh_cmd_q;
  struct task_struct* ehandler;
  struct completion* eh_action;
  wait_queue_head_t host_wait;
  struct scsi_host_template* hostt;
  struct scsi_transport_template* transportt;
  struct blk_mq_tag_set tag_set;
  atomic_t host_blocked;
  unsigned int host_failed;
  unsigned int host_eh_scheduled;
  unsigned int host_no;
  int eh_deadline;
  long unsigned int last_reset;
  unsigned int max_channel;
  unsigned int max_id;
  u64 max_lun;
  unsigned int unique_id;
  short unsigned int max_cmd_len;
  int this_id;
  int can_queue;
  short int cmd_per_lun;
  short unsigned int sg_tablesize;
  short unsigned int sg_prot_tablesize;
  unsigned int max_sectors;
  unsigned int max_segment_size;
  long unsigned int dma_boundary;
  long unsigned int virt_boundary_mask;
  unsigned int nr_hw_queues;
  unsigned int active_mode : 2;
  unsigned int unchecked_isa_dma : 1;
  unsigned int host_self_blocked : 1;
  unsigned int reverse_ordering : 1;
  unsigned int tmf_in_progress : 1;
  unsigned int async_scan : 1;
  unsigned int eh_noresume : 1;
  unsigned int no_write_same : 1;
  unsigned int host_tagset : 1;
  unsigned int short_inquiry : 1;
  unsigned int no_scsi2_lun_in_cdb : 1;
  char work_q_name[20];
  struct workqueue_struct* work_q;
  struct workqueue_struct* tmf_work_q;
  unsigned int max_host_blocked;
  unsigned int prot_capabilities;
  unsigned char prot_guard_type;
  long unsigned int base;
  long unsigned int io_port;
  unsigned char n_io_port;
  unsigned char dma_channel;
  unsigned int irq;
  enum scsi_host_state shost_state;
  struct device shost_gendev;
  struct device shost_dev;
  void* shost_data;
  struct device* dma_dev;
  long unsigned int hostdata[0];
};

enum scsi_target_state {
  STARGET_CREATED = 1,
  STARGET_RUNNING = 2,
  STARGET_REMOVE = 3,
  STARGET_CREATED_REMOVE = 4,
  STARGET_DEL = 5,
};

struct scsi_target {
  struct scsi_device* starget_sdev_user;
  struct list_head siblings;
  struct list_head devices;
  struct device dev;
  struct kref reap_ref;
  unsigned int channel;
  unsigned int id;
  unsigned int create : 1;
  unsigned int single_lun : 1;
  unsigned int pdt_1f_for_no_lun : 1;
  unsigned int no_report_luns : 1;
  unsigned int expecting_lun_change : 1;
  atomic_t target_busy;
  atomic_t target_blocked;
  unsigned int can_queue;
  unsigned int max_target_blocked;
  char scsi_level;
  enum scsi_target_state state;
  void* hostdata;
  long unsigned int starget_data[0];
};

struct scsi_data_buffer {
  struct sg_table table;
  unsigned int length;
};

struct scsi_pointer {
  char* ptr;
  int this_residual;
  struct scatterlist* buffer;
  int buffers_residual;
  dma_addr_t dma_handle;
  volatile int Status;
  volatile int Message;
  volatile int have_data_in;
  volatile int sent_command;
  volatile int phase;
};

struct scsi_cmnd {
  struct scsi_request req;
  struct scsi_device* device;
  struct list_head eh_entry;
  struct delayed_work abort_work;
  struct callback_head rcu;
  int eh_eflags;
  long unsigned int jiffies_at_alloc;
  int retries;
  int allowed;
  unsigned char prot_op;
  unsigned char prot_type;
  unsigned char prot_flags;
  short unsigned int cmd_len;
  enum dma_data_direction sc_data_direction;
  unsigned char* cmnd;
  struct scsi_data_buffer sdb;
  struct scsi_data_buffer* prot_sdb;
  unsigned int underflow;
  unsigned int transfersize;
  struct request* request;
  unsigned char* sense_buffer;
  void (*scsi_done)(struct scsi_cmnd*);
  struct scsi_pointer SCp;
  unsigned char* host_scribble;
  int result;
  int flags;
  long unsigned int state;
  unsigned char tag;
  unsigned int extra_len;
};

enum scsi_prot_operations {
  SCSI_PROT_NORMAL = 0,
  SCSI_PROT_READ_INSERT = 1,
  SCSI_PROT_WRITE_STRIP = 2,
  SCSI_PROT_READ_STRIP = 3,
  SCSI_PROT_WRITE_INSERT = 4,
  SCSI_PROT_READ_PASS = 5,
  SCSI_PROT_WRITE_PASS = 6,
};

struct scsi_driver {
  struct device_driver gendrv;
  void (*rescan)(struct device*);
  blk_status_t (*init_command)(struct scsi_cmnd*);
  void (*uninit_command)(struct scsi_cmnd*);
  int (*done)(struct scsi_cmnd*);
  int (*eh_action)(struct scsi_cmnd*, int);
  void (*eh_reset)(struct scsi_cmnd*);
};

struct scsi_host_cmd_pool;

struct scsi_host_template {
  struct module* module;
  const char* name;
  const char* (*info)(struct Scsi_Host*);
  int (*ioctl)(struct scsi_device*, unsigned int, void*);
  int (*compat_ioctl)(struct scsi_device*, unsigned int, void*);
  int (*init_cmd_priv)(struct Scsi_Host*, struct scsi_cmnd*);
  int (*exit_cmd_priv)(struct Scsi_Host*, struct scsi_cmnd*);
  int (*queuecommand)(struct Scsi_Host*, struct scsi_cmnd*);
  void (*commit_rqs)(struct Scsi_Host*, u16);
  int (*eh_abort_handler)(struct scsi_cmnd*);
  int (*eh_device_reset_handler)(struct scsi_cmnd*);
  int (*eh_target_reset_handler)(struct scsi_cmnd*);
  int (*eh_bus_reset_handler)(struct scsi_cmnd*);
  int (*eh_host_reset_handler)(struct scsi_cmnd*);
  int (*slave_alloc)(struct scsi_device*);
  int (*slave_configure)(struct scsi_device*);
  void (*slave_destroy)(struct scsi_device*);
  int (*target_alloc)(struct scsi_target*);
  void (*target_destroy)(struct scsi_target*);
  int (*scan_finished)(struct Scsi_Host*, long unsigned int);
  void (*scan_start)(struct Scsi_Host*);
  int (*change_queue_depth)(struct scsi_device*, int);
  int (*map_queues)(struct Scsi_Host*);
  bool (*dma_need_drain)(struct request*);
  int (*bios_param)(struct scsi_device*, struct block_device*, sector_t, int*);
  void (*unlock_native_capacity)(struct scsi_device*);
  int (*show_info)(struct seq_file*, struct Scsi_Host*);
  int (*write_info)(struct Scsi_Host*, char*, int);
  enum blk_eh_timer_return (*eh_timed_out)(struct scsi_cmnd*);
  bool (*eh_should_retry_cmd)(struct scsi_cmnd*);
  int (*host_reset)(struct Scsi_Host*, int);
  const char* proc_name;
  struct proc_dir_entry* proc_dir;
  int can_queue;
  int this_id;
  short unsigned int sg_tablesize;
  short unsigned int sg_prot_tablesize;
  unsigned int max_sectors;
  unsigned int max_segment_size;
  long unsigned int dma_boundary;
  long unsigned int virt_boundary_mask;
  short int cmd_per_lun;
  unsigned char present;
  int tag_alloc_policy;
  unsigned int track_queue_depth : 1;
  unsigned int supported_mode : 2;
  unsigned int unchecked_isa_dma : 1;
  unsigned int emulated : 1;
  unsigned int skip_settle_delay : 1;
  unsigned int no_write_same : 1;
  unsigned int host_tagset : 1;
  unsigned int max_host_blocked;
  struct device_attribute** shost_attrs;
  struct device_attribute** sdev_attrs;
  const struct attribute_group** sdev_groups;
  u64 vendor_id;
  unsigned int cmd_size;
  struct scsi_host_cmd_pool* cmd_pool;
  int rpm_autosuspend_delay;
};

struct trace_event_raw_scsi_dispatch_cmd_start {
  struct trace_entry ent;
  unsigned int host_no;
  unsigned int channel;
  unsigned int id;
  unsigned int lun;
  unsigned int opcode;
  unsigned int cmd_len;
  unsigned int data_sglen;
  unsigned int prot_sglen;
  unsigned char prot_op;
  u32 __data_loc_cmnd;
  char __data[0];
};

struct trace_event_raw_scsi_dispatch_cmd_error {
  struct trace_entry ent;
  unsigned int host_no;
  unsigned int channel;
  unsigned int id;
  unsigned int lun;
  int rtn;
  unsigned int opcode;
  unsigned int cmd_len;
  unsigned int data_sglen;
  unsigned int prot_sglen;
  unsigned char prot_op;
  u32 __data_loc_cmnd;
  char __data[0];
};

struct trace_event_raw_scsi_cmd_done_timeout_template {
  struct trace_entry ent;
  unsigned int host_no;
  unsigned int channel;
  unsigned int id;
  unsigned int lun;
  int result;
  unsigned int opcode;
  unsigned int cmd_len;
  unsigned int data_sglen;
  unsigned int prot_sglen;
  unsigned char prot_op;
  u32 __data_loc_cmnd;
  char __data[0];
};

struct trace_event_raw_scsi_eh_wakeup {
  struct trace_entry ent;
  unsigned int host_no;
  char __data[0];
};

struct trace_event_data_offsets_scsi_dispatch_cmd_start {
  u32 cmnd;
};

struct trace_event_data_offsets_scsi_dispatch_cmd_error {
  u32 cmnd;
};

struct trace_event_data_offsets_scsi_cmd_done_timeout_template {
  u32 cmnd;
};

struct trace_event_data_offsets_scsi_eh_wakeup {};

typedef void (*btf_trace_scsi_dispatch_cmd_start)(void*, struct scsi_cmnd*);

typedef void (
    *btf_trace_scsi_dispatch_cmd_error)(void*, struct scsi_cmnd*, int);

typedef void (*btf_trace_scsi_dispatch_cmd_done)(void*, struct scsi_cmnd*);

typedef void (*btf_trace_scsi_dispatch_cmd_timeout)(void*, struct scsi_cmnd*);

typedef void (*btf_trace_scsi_eh_wakeup)(void*, struct Scsi_Host*);

struct scsi_transport_template {
  struct transport_container host_attrs;
  struct transport_container target_attrs;
  struct transport_container device_attrs;
  int (*user_scan)(struct Scsi_Host*, uint, uint, u64);
  int device_size;
  int device_private_offset;
  int target_size;
  int target_private_offset;
  int host_size;
  unsigned int create_work_queue : 1;
  void (*eh_strategy_handler)(struct Scsi_Host*);
};

struct scsi_host_busy_iter_data {
  bool (*fn)(struct scsi_cmnd*, void*, bool);
  void* priv;
};

struct scsi_idlun {
  __u32 dev_id;
  __u32 host_unique_id;
};

typedef void (*activate_complete)(void*, int);

struct scsi_device_handler {
  struct list_head list;
  struct module* module;
  const char* name;
  int (*check_sense)(struct scsi_device*, struct scsi_sense_hdr*);
  int (*attach)(struct scsi_device*);
  void (*detach)(struct scsi_device*);
  int (*activate)(struct scsi_device*, activate_complete, void*);
  blk_status_t (*prep_fn)(struct scsi_device*, struct request*);
  int (*set_params)(struct scsi_device*, const char*);
  void (*rescan)(struct scsi_device*);
};

struct scsi_eh_save {
  int result;
  unsigned int resid_len;
  int eh_eflags;
  enum dma_data_direction data_direction;
  unsigned int underflow;
  unsigned char cmd_len;
  unsigned char prot_op;
  unsigned char* cmnd;
  struct scsi_data_buffer sdb;
  unsigned char eh_cmnd[16];
  struct scatterlist sense_sgl;
};

struct scsi_varlen_cdb_hdr {
  __u8 opcode;
  __u8 control;
  __u8 misc[5];
  __u8 additional_cdb_length;
  __be16 service_action;
};

struct scsi_mode_data {
  __u32 length;
  __u16 block_descriptor_length;
  __u8 medium_type;
  __u8 device_specific;
  __u8 header_length;
  __u8 longlba : 1;
};

struct scsi_event {
  enum scsi_device_event evt_type;
  struct list_head node;
};

enum scsi_host_prot_capabilities {
  SHOST_DIF_TYPE1_PROTECTION = 1,
  SHOST_DIF_TYPE2_PROTECTION = 2,
  SHOST_DIF_TYPE3_PROTECTION = 4,
  SHOST_DIX_TYPE0_PROTECTION = 8,
  SHOST_DIX_TYPE1_PROTECTION = 16,
  SHOST_DIX_TYPE2_PROTECTION = 32,
  SHOST_DIX_TYPE3_PROTECTION = 64,
};

enum {
  ACTION_FAIL = 0,
  ACTION_REPREP = 1,
  ACTION_RETRY = 2,
  ACTION_DELAYED_RETRY = 3,
};

struct value_name_pair;

struct sa_name_list {
  int opcode;
  const struct value_name_pair* arr;
  int arr_sz;
};

struct value_name_pair {
  int value;
  const char* name;
};

struct error_info {
  short unsigned int code12;
  short unsigned int size;
};

struct error_info2 {
  unsigned char code1;
  unsigned char code2_min;
  unsigned char code2_max;
  const char* str;
  const char* fmt;
};

struct scsi_lun {
  __u8 scsi_lun[8];
};

enum scsi_timeouts {
  SCSI_DEFAULT_EH_TIMEOUT = 10000,
};

enum scsi_scan_mode {
  SCSI_SCAN_INITIAL = 0,
  SCSI_SCAN_RESCAN = 1,
  SCSI_SCAN_MANUAL = 2,
};

struct async_scan_data {
  struct list_head list;
  struct Scsi_Host* shost;
  struct completion prev_finished;
};

enum scsi_devinfo_key {
  SCSI_DEVINFO_GLOBAL = 0,
  SCSI_DEVINFO_SPI = 1,
};

struct scsi_dev_info_list {
  struct list_head dev_info_list;
  char vendor[8];
  char model[16];
  blist_flags_t flags;
  unsigned int compatible;
};

struct scsi_dev_info_list_table {
  struct list_head node;
  struct list_head scsi_dev_info_list;
  const char* name;
  int key;
};

struct double_list {
  struct list_head* top;
  struct list_head* bottom;
};

struct scsi_nl_hdr {
  __u8 version;
  __u8 transport;
  __u16 magic;
  __u16 msgtype;
  __u16 msglen;
};

struct virtio_scsi_cmd_req {
  __u8 lun[8];
  __virtio64 tag;
  __u8 task_attr;
  __u8 prio;
  __u8 crn;
  __u8 cdb[32];
} __attribute__((packed));

struct virtio_scsi_cmd_req_pi {
  __u8 lun[8];
  __virtio64 tag;
  __u8 task_attr;
  __u8 prio;
  __u8 crn;
  __virtio32 pi_bytesout;
  __virtio32 pi_bytesin;
  __u8 cdb[32];
} __attribute__((packed));

struct virtio_scsi_cmd_resp {
  __virtio32 sense_len;
  __virtio32 resid;
  __virtio16 status_qualifier;
  __u8 status;
  __u8 response;
  __u8 sense[96];
};

struct virtio_scsi_ctrl_tmf_req {
  __virtio32 type;
  __virtio32 subtype;
  __u8 lun[8];
  __virtio64 tag;
};

struct virtio_scsi_ctrl_tmf_resp {
  __u8 response;
};

struct virtio_scsi_ctrl_an_req {
  __virtio32 type;
  __u8 lun[8];
  __virtio32 event_requested;
};

struct virtio_scsi_ctrl_an_resp {
  __virtio32 event_actual;
  __u8 response;
} __attribute__((packed));

struct virtio_scsi_event {
  __virtio32 event;
  __u8 lun[8];
  __virtio32 reason;
};

struct virtio_scsi_config {
  __virtio32 num_queues;
  __virtio32 seg_max;
  __virtio32 max_sectors;
  __virtio32 cmd_per_lun;
  __virtio32 event_info_size;
  __virtio32 sense_size;
  __virtio32 cdb_size;
  __virtio16 max_channel;
  __virtio16 max_target;
  __virtio32 max_lun;
};

struct virtio_scsi_cmd {
  struct scsi_cmnd* sc;
  struct completion* comp;
  union {
    struct virtio_scsi_cmd_req cmd;
    struct virtio_scsi_cmd_req_pi cmd_pi;
    struct virtio_scsi_ctrl_tmf_req tmf;
    struct virtio_scsi_ctrl_an_req an;
  } req;
  union {
    struct virtio_scsi_cmd_resp cmd;
    struct virtio_scsi_ctrl_tmf_resp tmf;
    struct virtio_scsi_ctrl_an_resp an;
    struct virtio_scsi_event evt;
  } resp;
  long : 8;
  long : 64;
} __attribute__((packed));

struct virtio_scsi;

struct virtio_scsi_event_node {
  struct virtio_scsi* vscsi;
  struct virtio_scsi_event event;
  struct work_struct work;
};

struct virtio_scsi_vq {
  spinlock_t vq_lock;
  struct virtqueue* vq;
};

struct virtio_scsi {
  struct virtio_device* vdev;
  struct virtio_scsi_event_node event_list[8];
  u32 num_queues;
  struct hlist_node node;
  bool stop_events;
  struct virtio_scsi_vq ctrl_vq;
  struct virtio_scsi_vq event_vq;
  struct virtio_scsi_vq req_vqs[0];
};

enum bip_flags {
  BIP_BLOCK_INTEGRITY = 1,
  BIP_MAPPED_INTEGRITY = 2,
  BIP_CTRL_NOCHECK = 4,
  BIP_DISK_NOCHECK = 8,
  BIP_IP_CHECKSUM = 16,
};

enum t10_dif_type {
  T10_PI_TYPE0_PROTECTION = 0,
  T10_PI_TYPE1_PROTECTION = 1,
  T10_PI_TYPE2_PROTECTION = 2,
  T10_PI_TYPE3_PROTECTION = 3,
};

enum scsi_prot_flags {
  SCSI_PROT_TRANSFER_PI = 1,
  SCSI_PROT_GUARD_CHECK = 2,
  SCSI_PROT_REF_CHECK = 4,
  SCSI_PROT_REF_INCREMENT = 8,
  SCSI_PROT_IP_CHECKSUM = 16,
};

enum {
  SD_EXT_CDB_SIZE = 32,
  SD_MEMPOOL_SIZE = 2,
};

enum {
  SD_DEF_XFER_BLOCKS = 65535,
  SD_MAX_XFER_BLOCKS = 4294967295,
  SD_MAX_WS10_BLOCKS = 65535,
  SD_MAX_WS16_BLOCKS = 8388607,
};

enum {
  SD_LBP_FULL = 0,
  SD_LBP_UNMAP = 1,
  SD_LBP_WS16 = 2,
  SD_LBP_WS10 = 3,
  SD_LBP_ZERO = 4,
  SD_LBP_DISABLE = 5,
};

enum {
  SD_ZERO_WRITE = 0,
  SD_ZERO_WS = 1,
  SD_ZERO_WS16_UNMAP = 2,
  SD_ZERO_WS10_UNMAP = 3,
};

struct opal_dev;

struct scsi_disk {
  struct scsi_driver* driver;
  struct scsi_device* device;
  struct device dev;
  struct gendisk* disk;
  struct opal_dev* opal_dev;
  atomic_t openers;
  sector_t capacity;
  int max_retries;
  u32 max_xfer_blocks;
  u32 opt_xfer_blocks;
  u32 max_ws_blocks;
  u32 max_unmap_blocks;
  u32 unmap_granularity;
  u32 unmap_alignment;
  u32 index;
  unsigned int physical_block_size;
  unsigned int max_medium_access_timeouts;
  unsigned int medium_access_timed_out;
  u8 media_present;
  u8 write_prot;
  u8 protection_type;
  u8 provisioning_mode;
  u8 zeroing_mode;
  unsigned int ATO : 1;
  unsigned int cache_override : 1;
  unsigned int WCE : 1;
  unsigned int RCD : 1;
  unsigned int DPOFUA : 1;
  unsigned int first_scan : 1;
  unsigned int lbpme : 1;
  unsigned int lbprz : 1;
  unsigned int lbpu : 1;
  unsigned int lbpws : 1;
  unsigned int lbpws10 : 1;
  unsigned int lbpvpd : 1;
  unsigned int ws10 : 1;
  unsigned int ws16 : 1;
  unsigned int rc_basis : 2;
  unsigned int zoned : 2;
  unsigned int urswrz : 1;
  unsigned int security : 1;
  unsigned int ignore_medium_access_errors : 1;
};

enum {
  ATA_MAX_DEVICES = 2,
  ATA_MAX_PRD = 256,
  ATA_SECT_SIZE = 512,
  ATA_MAX_SECTORS_128 = 128,
  ATA_MAX_SECTORS = 256,
  ATA_MAX_SECTORS_1024 = 1024,
  ATA_MAX_SECTORS_LBA48 = 65535,
  ATA_MAX_SECTORS_TAPE = 65535,
  ATA_MAX_TRIM_RNUM = 64,
  ATA_ID_WORDS = 256,
  ATA_ID_CONFIG = 0,
  ATA_ID_CYLS = 1,
  ATA_ID_HEADS = 3,
  ATA_ID_SECTORS = 6,
  ATA_ID_SERNO = 10,
  ATA_ID_BUF_SIZE = 21,
  ATA_ID_FW_REV = 23,
  ATA_ID_PROD = 27,
  ATA_ID_MAX_MULTSECT = 47,
  ATA_ID_DWORD_IO = 48,
  ATA_ID_TRUSTED = 48,
  ATA_ID_CAPABILITY = 49,
  ATA_ID_OLD_PIO_MODES = 51,
  ATA_ID_OLD_DMA_MODES = 52,
  ATA_ID_FIELD_VALID = 53,
  ATA_ID_CUR_CYLS = 54,
  ATA_ID_CUR_HEADS = 55,
  ATA_ID_CUR_SECTORS = 56,
  ATA_ID_MULTSECT = 59,
  ATA_ID_LBA_CAPACITY = 60,
  ATA_ID_SWDMA_MODES = 62,
  ATA_ID_MWDMA_MODES = 63,
  ATA_ID_PIO_MODES = 64,
  ATA_ID_EIDE_DMA_MIN = 65,
  ATA_ID_EIDE_DMA_TIME = 66,
  ATA_ID_EIDE_PIO = 67,
  ATA_ID_EIDE_PIO_IORDY = 68,
  ATA_ID_ADDITIONAL_SUPP = 69,
  ATA_ID_QUEUE_DEPTH = 75,
  ATA_ID_SATA_CAPABILITY = 76,
  ATA_ID_SATA_CAPABILITY_2 = 77,
  ATA_ID_FEATURE_SUPP = 78,
  ATA_ID_MAJOR_VER = 80,
  ATA_ID_COMMAND_SET_1 = 82,
  ATA_ID_COMMAND_SET_2 = 83,
  ATA_ID_CFSSE = 84,
  ATA_ID_CFS_ENABLE_1 = 85,
  ATA_ID_CFS_ENABLE_2 = 86,
  ATA_ID_CSF_DEFAULT = 87,
  ATA_ID_UDMA_MODES = 88,
  ATA_ID_HW_CONFIG = 93,
  ATA_ID_SPG = 98,
  ATA_ID_LBA_CAPACITY_2 = 100,
  ATA_ID_SECTOR_SIZE = 106,
  ATA_ID_WWN = 108,
  ATA_ID_LOGICAL_SECTOR_SIZE = 117,
  ATA_ID_COMMAND_SET_3 = 119,
  ATA_ID_COMMAND_SET_4 = 120,
  ATA_ID_LAST_LUN = 126,
  ATA_ID_DLF = 128,
  ATA_ID_CSFO = 129,
  ATA_ID_CFA_POWER = 160,
  ATA_ID_CFA_KEY_MGMT = 162,
  ATA_ID_CFA_MODES = 163,
  ATA_ID_DATA_SET_MGMT = 169,
  ATA_ID_SCT_CMD_XPORT = 206,
  ATA_ID_ROT_SPEED = 217,
  ATA_ID_PIO4 = 2,
  ATA_ID_SERNO_LEN = 20,
  ATA_ID_FW_REV_LEN = 8,
  ATA_ID_PROD_LEN = 40,
  ATA_ID_WWN_LEN = 8,
  ATA_PCI_CTL_OFS = 2,
  ATA_PIO0 = 1,
  ATA_PIO1 = 3,
  ATA_PIO2 = 7,
  ATA_PIO3 = 15,
  ATA_PIO4 = 31,
  ATA_PIO5 = 63,
  ATA_PIO6 = 127,
  ATA_PIO4_ONLY = 16,
  ATA_SWDMA0 = 1,
  ATA_SWDMA1 = 3,
  ATA_SWDMA2 = 7,
  ATA_SWDMA2_ONLY = 4,
  ATA_MWDMA0 = 1,
  ATA_MWDMA1 = 3,
  ATA_MWDMA2 = 7,
  ATA_MWDMA3 = 15,
  ATA_MWDMA4 = 31,
  ATA_MWDMA12_ONLY = 6,
  ATA_MWDMA2_ONLY = 4,
  ATA_UDMA0 = 1,
  ATA_UDMA1 = 3,
  ATA_UDMA2 = 7,
  ATA_UDMA3 = 15,
  ATA_UDMA4 = 31,
  ATA_UDMA5 = 63,
  ATA_UDMA6 = 127,
  ATA_UDMA7 = 255,
  ATA_UDMA24_ONLY = 20,
  ATA_UDMA_MASK_40C = 7,
  ATA_PRD_SZ = 8,
  ATA_PRD_TBL_SZ = 2048,
  ATA_PRD_EOT = 2147483648,
  ATA_DMA_TABLE_OFS = 4,
  ATA_DMA_STATUS = 2,
  ATA_DMA_CMD = 0,
  ATA_DMA_WR = 8,
  ATA_DMA_START = 1,
  ATA_DMA_INTR = 4,
  ATA_DMA_ERR = 2,
  ATA_DMA_ACTIVE = 1,
  ATA_HOB = 128,
  ATA_NIEN = 2,
  ATA_LBA = 64,
  ATA_DEV1 = 16,
  ATA_DEVICE_OBS = 160,
  ATA_DEVCTL_OBS = 8,
  ATA_BUSY = 128,
  ATA_DRDY = 64,
  ATA_DF = 32,
  ATA_DSC = 16,
  ATA_DRQ = 8,
  ATA_CORR = 4,
  ATA_SENSE = 2,
  ATA_ERR = 1,
  ATA_SRST = 4,
  ATA_ICRC = 128,
  ATA_BBK = 128,
  ATA_UNC = 64,
  ATA_MC = 32,
  ATA_IDNF = 16,
  ATA_MCR = 8,
  ATA_ABORTED = 4,
  ATA_TRK0NF = 2,
  ATA_AMNF = 1,
  ATAPI_LFS = 240,
  ATAPI_EOM = 2,
  ATAPI_ILI = 1,
  ATAPI_IO = 2,
  ATAPI_COD = 1,
  ATA_REG_DATA = 0,
  ATA_REG_ERR = 1,
  ATA_REG_NSECT = 2,
  ATA_REG_LBAL = 3,
  ATA_REG_LBAM = 4,
  ATA_REG_LBAH = 5,
  ATA_REG_DEVICE = 6,
  ATA_REG_STATUS = 7,
  ATA_REG_FEATURE = 1,
  ATA_REG_CMD = 7,
  ATA_REG_BYTEL = 4,
  ATA_REG_BYTEH = 5,
  ATA_REG_DEVSEL = 6,
  ATA_REG_IRQ = 2,
  ATA_CMD_DEV_RESET = 8,
  ATA_CMD_CHK_POWER = 229,
  ATA_CMD_STANDBY = 226,
  ATA_CMD_IDLE = 227,
  ATA_CMD_EDD = 144,
  ATA_CMD_DOWNLOAD_MICRO = 146,
  ATA_CMD_DOWNLOAD_MICRO_DMA = 147,
  ATA_CMD_NOP = 0,
  ATA_CMD_FLUSH = 231,
  ATA_CMD_FLUSH_EXT = 234,
  ATA_CMD_ID_ATA = 236,
  ATA_CMD_ID_ATAPI = 161,
  ATA_CMD_SERVICE = 162,
  ATA_CMD_READ = 200,
  ATA_CMD_READ_EXT = 37,
  ATA_CMD_READ_QUEUED = 38,
  ATA_CMD_READ_STREAM_EXT = 43,
  ATA_CMD_READ_STREAM_DMA_EXT = 42,
  ATA_CMD_WRITE = 202,
  ATA_CMD_WRITE_EXT = 53,
  ATA_CMD_WRITE_QUEUED = 54,
  ATA_CMD_WRITE_STREAM_EXT = 59,
  ATA_CMD_WRITE_STREAM_DMA_EXT = 58,
  ATA_CMD_WRITE_FUA_EXT = 61,
  ATA_CMD_WRITE_QUEUED_FUA_EXT = 62,
  ATA_CMD_FPDMA_READ = 96,
  ATA_CMD_FPDMA_WRITE = 97,
  ATA_CMD_NCQ_NON_DATA = 99,
  ATA_CMD_FPDMA_SEND = 100,
  ATA_CMD_FPDMA_RECV = 101,
  ATA_CMD_PIO_READ = 32,
  ATA_CMD_PIO_READ_EXT = 36,
  ATA_CMD_PIO_WRITE = 48,
  ATA_CMD_PIO_WRITE_EXT = 52,
  ATA_CMD_READ_MULTI = 196,
  ATA_CMD_READ_MULTI_EXT = 41,
  ATA_CMD_WRITE_MULTI = 197,
  ATA_CMD_WRITE_MULTI_EXT = 57,
  ATA_CMD_WRITE_MULTI_FUA_EXT = 206,
  ATA_CMD_SET_FEATURES = 239,
  ATA_CMD_SET_MULTI = 198,
  ATA_CMD_PACKET = 160,
  ATA_CMD_VERIFY = 64,
  ATA_CMD_VERIFY_EXT = 66,
  ATA_CMD_WRITE_UNCORR_EXT = 69,
  ATA_CMD_STANDBYNOW1 = 224,
  ATA_CMD_IDLEIMMEDIATE = 225,
  ATA_CMD_SLEEP = 230,
  ATA_CMD_INIT_DEV_PARAMS = 145,
  ATA_CMD_READ_NATIVE_MAX = 248,
  ATA_CMD_READ_NATIVE_MAX_EXT = 39,
  ATA_CMD_SET_MAX = 249,
  ATA_CMD_SET_MAX_EXT = 55,
  ATA_CMD_READ_LOG_EXT = 47,
  ATA_CMD_WRITE_LOG_EXT = 63,
  ATA_CMD_READ_LOG_DMA_EXT = 71,
  ATA_CMD_WRITE_LOG_DMA_EXT = 87,
  ATA_CMD_TRUSTED_NONDATA = 91,
  ATA_CMD_TRUSTED_RCV = 92,
  ATA_CMD_TRUSTED_RCV_DMA = 93,
  ATA_CMD_TRUSTED_SND = 94,
  ATA_CMD_TRUSTED_SND_DMA = 95,
  ATA_CMD_PMP_READ = 228,
  ATA_CMD_PMP_READ_DMA = 233,
  ATA_CMD_PMP_WRITE = 232,
  ATA_CMD_PMP_WRITE_DMA = 235,
  ATA_CMD_CONF_OVERLAY = 177,
  ATA_CMD_SEC_SET_PASS = 241,
  ATA_CMD_SEC_UNLOCK = 242,
  ATA_CMD_SEC_ERASE_PREP = 243,
  ATA_CMD_SEC_ERASE_UNIT = 244,
  ATA_CMD_SEC_FREEZE_LOCK = 245,
  ATA_CMD_SEC_DISABLE_PASS = 246,
  ATA_CMD_CONFIG_STREAM = 81,
  ATA_CMD_SMART = 176,
  ATA_CMD_MEDIA_LOCK = 222,
  ATA_CMD_MEDIA_UNLOCK = 223,
  ATA_CMD_DSM = 6,
  ATA_CMD_CHK_MED_CRD_TYP = 209,
  ATA_CMD_CFA_REQ_EXT_ERR = 3,
  ATA_CMD_CFA_WRITE_NE = 56,
  ATA_CMD_CFA_TRANS_SECT = 135,
  ATA_CMD_CFA_ERASE = 192,
  ATA_CMD_CFA_WRITE_MULT_NE = 205,
  ATA_CMD_REQ_SENSE_DATA = 11,
  ATA_CMD_SANITIZE_DEVICE = 180,
  ATA_CMD_ZAC_MGMT_IN = 74,
  ATA_CMD_ZAC_MGMT_OUT = 159,
  ATA_CMD_RESTORE = 16,
  ATA_SUBCMD_FPDMA_RECV_RD_LOG_DMA_EXT = 1,
  ATA_SUBCMD_FPDMA_RECV_ZAC_MGMT_IN = 2,
  ATA_SUBCMD_FPDMA_SEND_DSM = 0,
  ATA_SUBCMD_FPDMA_SEND_WR_LOG_DMA_EXT = 2,
  ATA_SUBCMD_NCQ_NON_DATA_ABORT_QUEUE = 0,
  ATA_SUBCMD_NCQ_NON_DATA_SET_FEATURES = 5,
  ATA_SUBCMD_NCQ_NON_DATA_ZERO_EXT = 6,
  ATA_SUBCMD_NCQ_NON_DATA_ZAC_MGMT_OUT = 7,
  ATA_SUBCMD_ZAC_MGMT_IN_REPORT_ZONES = 0,
  ATA_SUBCMD_ZAC_MGMT_OUT_CLOSE_ZONE = 1,
  ATA_SUBCMD_ZAC_MGMT_OUT_FINISH_ZONE = 2,
  ATA_SUBCMD_ZAC_MGMT_OUT_OPEN_ZONE = 3,
  ATA_SUBCMD_ZAC_MGMT_OUT_RESET_WRITE_POINTER = 4,
  ATA_LOG_DIRECTORY = 0,
  ATA_LOG_SATA_NCQ = 16,
  ATA_LOG_NCQ_NON_DATA = 18,
  ATA_LOG_NCQ_SEND_RECV = 19,
  ATA_LOG_IDENTIFY_DEVICE = 48,
  ATA_LOG_SECURITY = 6,
  ATA_LOG_SATA_SETTINGS = 8,
  ATA_LOG_ZONED_INFORMATION = 9,
  ATA_LOG_DEVSLP_OFFSET = 48,
  ATA_LOG_DEVSLP_SIZE = 8,
  ATA_LOG_DEVSLP_MDAT = 0,
  ATA_LOG_DEVSLP_MDAT_MASK = 31,
  ATA_LOG_DEVSLP_DETO = 1,
  ATA_LOG_DEVSLP_VALID = 7,
  ATA_LOG_DEVSLP_VALID_MASK = 128,
  ATA_LOG_NCQ_PRIO_OFFSET = 9,
  ATA_LOG_NCQ_SEND_RECV_SUBCMDS_OFFSET = 0,
  ATA_LOG_NCQ_SEND_RECV_SUBCMDS_DSM = 1,
  ATA_LOG_NCQ_SEND_RECV_DSM_OFFSET = 4,
  ATA_LOG_NCQ_SEND_RECV_DSM_TRIM = 1,
  ATA_LOG_NCQ_SEND_RECV_RD_LOG_OFFSET = 8,
  ATA_LOG_NCQ_SEND_RECV_RD_LOG_SUPPORTED = 1,
  ATA_LOG_NCQ_SEND_RECV_WR_LOG_OFFSET = 12,
  ATA_LOG_NCQ_SEND_RECV_WR_LOG_SUPPORTED = 1,
  ATA_LOG_NCQ_SEND_RECV_ZAC_MGMT_OFFSET = 16,
  ATA_LOG_NCQ_SEND_RECV_ZAC_MGMT_OUT_SUPPORTED = 1,
  ATA_LOG_NCQ_SEND_RECV_ZAC_MGMT_IN_SUPPORTED = 2,
  ATA_LOG_NCQ_SEND_RECV_SIZE = 20,
  ATA_LOG_NCQ_NON_DATA_SUBCMDS_OFFSET = 0,
  ATA_LOG_NCQ_NON_DATA_ABORT_OFFSET = 0,
  ATA_LOG_NCQ_NON_DATA_ABORT_NCQ = 1,
  ATA_LOG_NCQ_NON_DATA_ABORT_ALL = 2,
  ATA_LOG_NCQ_NON_DATA_ABORT_STREAMING = 4,
  ATA_LOG_NCQ_NON_DATA_ABORT_NON_STREAMING = 8,
  ATA_LOG_NCQ_NON_DATA_ABORT_SELECTED = 16,
  ATA_LOG_NCQ_NON_DATA_ZAC_MGMT_OFFSET = 28,
  ATA_LOG_NCQ_NON_DATA_ZAC_MGMT_OUT = 1,
  ATA_LOG_NCQ_NON_DATA_SIZE = 64,
  ATA_CMD_READ_LONG = 34,
  ATA_CMD_READ_LONG_ONCE = 35,
  ATA_CMD_WRITE_LONG = 50,
  ATA_CMD_WRITE_LONG_ONCE = 51,
  SETFEATURES_XFER = 3,
  XFER_UDMA_7 = 71,
  XFER_UDMA_6 = 70,
  XFER_UDMA_5 = 69,
  XFER_UDMA_4 = 68,
  XFER_UDMA_3 = 67,
  XFER_UDMA_2 = 66,
  XFER_UDMA_1 = 65,
  XFER_UDMA_0 = 64,
  XFER_MW_DMA_4 = 36,
  XFER_MW_DMA_3 = 35,
  XFER_MW_DMA_2 = 34,
  XFER_MW_DMA_1 = 33,
  XFER_MW_DMA_0 = 32,
  XFER_SW_DMA_2 = 18,
  XFER_SW_DMA_1 = 17,
  XFER_SW_DMA_0 = 16,
  XFER_PIO_6 = 14,
  XFER_PIO_5 = 13,
  XFER_PIO_4 = 12,
  XFER_PIO_3 = 11,
  XFER_PIO_2 = 10,
  XFER_PIO_1 = 9,
  XFER_PIO_0 = 8,
  XFER_PIO_SLOW = 0,
  SETFEATURES_WC_ON = 2,
  SETFEATURES_WC_OFF = 130,
  SETFEATURES_RA_ON = 170,
  SETFEATURES_RA_OFF = 85,
  SETFEATURES_AAM_ON = 66,
  SETFEATURES_AAM_OFF = 194,
  SETFEATURES_SPINUP = 7,
  SETFEATURES_SPINUP_TIMEOUT = 30000,
  SETFEATURES_SATA_ENABLE = 16,
  SETFEATURES_SATA_DISABLE = 144,
  SATA_FPDMA_OFFSET = 1,
  SATA_FPDMA_AA = 2,
  SATA_DIPM = 3,
  SATA_FPDMA_IN_ORDER = 4,
  SATA_AN = 5,
  SATA_SSP = 6,
  SATA_DEVSLP = 9,
  SETFEATURE_SENSE_DATA = 195,
  ATA_SET_MAX_ADDR = 0,
  ATA_SET_MAX_PASSWD = 1,
  ATA_SET_MAX_LOCK = 2,
  ATA_SET_MAX_UNLOCK = 3,
  ATA_SET_MAX_FREEZE_LOCK = 4,
  ATA_SET_MAX_PASSWD_DMA = 5,
  ATA_SET_MAX_UNLOCK_DMA = 6,
  ATA_DCO_RESTORE = 192,
  ATA_DCO_FREEZE_LOCK = 193,
  ATA_DCO_IDENTIFY = 194,
  ATA_DCO_SET = 195,
  ATA_SMART_ENABLE = 216,
  ATA_SMART_READ_VALUES = 208,
  ATA_SMART_READ_THRESHOLDS = 209,
  ATA_DSM_TRIM = 1,
  ATA_SMART_LBAM_PASS = 79,
  ATA_SMART_LBAH_PASS = 194,
  ATAPI_PKT_DMA = 1,
  ATAPI_DMADIR = 4,
  ATAPI_CDB_LEN = 16,
  SATA_PMP_MAX_PORTS = 15,
  SATA_PMP_CTRL_PORT = 15,
  SATA_PMP_GSCR_DWORDS = 128,
  SATA_PMP_GSCR_PROD_ID = 0,
  SATA_PMP_GSCR_REV = 1,
  SATA_PMP_GSCR_PORT_INFO = 2,
  SATA_PMP_GSCR_ERROR = 32,
  SATA_PMP_GSCR_ERROR_EN = 33,
  SATA_PMP_GSCR_FEAT = 64,
  SATA_PMP_GSCR_FEAT_EN = 96,
  SATA_PMP_PSCR_STATUS = 0,
  SATA_PMP_PSCR_ERROR = 1,
  SATA_PMP_PSCR_CONTROL = 2,
  SATA_PMP_FEAT_BIST = 1,
  SATA_PMP_FEAT_PMREQ = 2,
  SATA_PMP_FEAT_DYNSSC = 4,
  SATA_PMP_FEAT_NOTIFY = 8,
  ATA_CBL_NONE = 0,
  ATA_CBL_PATA40 = 1,
  ATA_CBL_PATA80 = 2,
  ATA_CBL_PATA40_SHORT = 3,
  ATA_CBL_PATA_UNK = 4,
  ATA_CBL_PATA_IGN = 5,
  ATA_CBL_SATA = 6,
  SCR_STATUS = 0,
  SCR_ERROR = 1,
  SCR_CONTROL = 2,
  SCR_ACTIVE = 3,
  SCR_NOTIFICATION = 4,
  SERR_DATA_RECOVERED = 1,
  SERR_COMM_RECOVERED = 2,
  SERR_DATA = 256,
  SERR_PERSISTENT = 512,
  SERR_PROTOCOL = 1024,
  SERR_INTERNAL = 2048,
  SERR_PHYRDY_CHG = 65536,
  SERR_PHY_INT_ERR = 131072,
  SERR_COMM_WAKE = 262144,
  SERR_10B_8B_ERR = 524288,
  SERR_DISPARITY = 1048576,
  SERR_CRC = 2097152,
  SERR_HANDSHAKE = 4194304,
  SERR_LINK_SEQ_ERR = 8388608,
  SERR_TRANS_ST_ERROR = 16777216,
  SERR_UNRECOG_FIS = 33554432,
  SERR_DEV_XCHG = 67108864,
};

enum ata_prot_flags {
  ATA_PROT_FLAG_PIO = 1,
  ATA_PROT_FLAG_DMA = 2,
  ATA_PROT_FLAG_NCQ = 4,
  ATA_PROT_FLAG_ATAPI = 8,
  ATA_PROT_UNKNOWN = 255,
  ATA_PROT_NODATA = 0,
  ATA_PROT_PIO = 1,
  ATA_PROT_DMA = 2,
  ATA_PROT_NCQ_NODATA = 4,
  ATA_PROT_NCQ = 6,
  ATAPI_PROT_NODATA = 8,
  ATAPI_PROT_PIO = 9,
  ATAPI_PROT_DMA = 10,
};

enum {
  ATA_MSG_DRV = 1,
  ATA_MSG_INFO = 2,
  ATA_MSG_PROBE = 4,
  ATA_MSG_WARN = 8,
  ATA_MSG_MALLOC = 16,
  ATA_MSG_CTL = 32,
  ATA_MSG_INTR = 64,
  ATA_MSG_ERR = 128,
};

enum {
  LIBATA_MAX_PRD = 128,
  LIBATA_DUMB_MAX_PRD = 64,
  ATA_DEF_QUEUE = 1,
  ATA_MAX_QUEUE = 32,
  ATA_TAG_INTERNAL = 32,
  ATA_SHORT_PAUSE = 16,
  ATAPI_MAX_DRAIN = 16384,
  ATA_ALL_DEVICES = 3,
  ATA_SHT_EMULATED = 1,
  ATA_SHT_THIS_ID = 4294967295,
  ATA_TFLAG_LBA48 = 1,
  ATA_TFLAG_ISADDR = 2,
  ATA_TFLAG_DEVICE = 4,
  ATA_TFLAG_WRITE = 8,
  ATA_TFLAG_LBA = 16,
  ATA_TFLAG_FUA = 32,
  ATA_TFLAG_POLLING = 64,
  ATA_DFLAG_LBA = 1,
  ATA_DFLAG_LBA48 = 2,
  ATA_DFLAG_CDB_INTR = 4,
  ATA_DFLAG_NCQ = 8,
  ATA_DFLAG_FLUSH_EXT = 16,
  ATA_DFLAG_ACPI_PENDING = 32,
  ATA_DFLAG_ACPI_FAILED = 64,
  ATA_DFLAG_AN = 128,
  ATA_DFLAG_TRUSTED = 256,
  ATA_DFLAG_DMADIR = 1024,
  ATA_DFLAG_CFG_MASK = 4095,
  ATA_DFLAG_PIO = 4096,
  ATA_DFLAG_NCQ_OFF = 8192,
  ATA_DFLAG_SLEEPING = 32768,
  ATA_DFLAG_DUBIOUS_XFER = 65536,
  ATA_DFLAG_NO_UNLOAD = 131072,
  ATA_DFLAG_UNLOCK_HPA = 262144,
  ATA_DFLAG_NCQ_SEND_RECV = 524288,
  ATA_DFLAG_NCQ_PRIO = 1048576,
  ATA_DFLAG_NCQ_PRIO_ENABLE = 2097152,
  ATA_DFLAG_INIT_MASK = 16777215,
  ATA_DFLAG_DETACH = 16777216,
  ATA_DFLAG_DETACHED = 33554432,
  ATA_DFLAG_DA = 67108864,
  ATA_DFLAG_DEVSLP = 134217728,
  ATA_DFLAG_ACPI_DISABLED = 268435456,
  ATA_DFLAG_D_SENSE = 536870912,
  ATA_DFLAG_ZAC = 1073741824,
  ATA_DEV_UNKNOWN = 0,
  ATA_DEV_ATA = 1,
  ATA_DEV_ATA_UNSUP = 2,
  ATA_DEV_ATAPI = 3,
  ATA_DEV_ATAPI_UNSUP = 4,
  ATA_DEV_PMP = 5,
  ATA_DEV_PMP_UNSUP = 6,
  ATA_DEV_SEMB = 7,
  ATA_DEV_SEMB_UNSUP = 8,
  ATA_DEV_ZAC = 9,
  ATA_DEV_ZAC_UNSUP = 10,
  ATA_DEV_NONE = 11,
  ATA_LFLAG_NO_HRST = 2,
  ATA_LFLAG_NO_SRST = 4,
  ATA_LFLAG_ASSUME_ATA = 8,
  ATA_LFLAG_ASSUME_SEMB = 16,
  ATA_LFLAG_ASSUME_CLASS = 24,
  ATA_LFLAG_NO_RETRY = 32,
  ATA_LFLAG_DISABLED = 64,
  ATA_LFLAG_SW_ACTIVITY = 128,
  ATA_LFLAG_NO_LPM = 256,
  ATA_LFLAG_RST_ONCE = 512,
  ATA_LFLAG_CHANGED = 1024,
  ATA_LFLAG_NO_DB_DELAY = 2048,
  ATA_FLAG_SLAVE_POSS = 1,
  ATA_FLAG_SATA = 2,
  ATA_FLAG_NO_LPM = 4,
  ATA_FLAG_NO_LOG_PAGE = 32,
  ATA_FLAG_NO_ATAPI = 64,
  ATA_FLAG_PIO_DMA = 128,
  ATA_FLAG_PIO_LBA48 = 256,
  ATA_FLAG_PIO_POLLING = 512,
  ATA_FLAG_NCQ = 1024,
  ATA_FLAG_NO_POWEROFF_SPINDOWN = 2048,
  ATA_FLAG_NO_HIBERNATE_SPINDOWN = 4096,
  ATA_FLAG_DEBUGMSG = 8192,
  ATA_FLAG_FPDMA_AA = 16384,
  ATA_FLAG_IGN_SIMPLEX = 32768,
  ATA_FLAG_NO_IORDY = 65536,
  ATA_FLAG_ACPI_SATA = 131072,
  ATA_FLAG_AN = 262144,
  ATA_FLAG_PMP = 524288,
  ATA_FLAG_FPDMA_AUX = 1048576,
  ATA_FLAG_EM = 2097152,
  ATA_FLAG_SW_ACTIVITY = 4194304,
  ATA_FLAG_NO_DIPM = 8388608,
  ATA_FLAG_SAS_HOST = 16777216,
  ATA_PFLAG_EH_PENDING = 1,
  ATA_PFLAG_EH_IN_PROGRESS = 2,
  ATA_PFLAG_FROZEN = 4,
  ATA_PFLAG_RECOVERED = 8,
  ATA_PFLAG_LOADING = 16,
  ATA_PFLAG_SCSI_HOTPLUG = 64,
  ATA_PFLAG_INITIALIZING = 128,
  ATA_PFLAG_RESETTING = 256,
  ATA_PFLAG_UNLOADING = 512,
  ATA_PFLAG_UNLOADED = 1024,
  ATA_PFLAG_SUSPENDED = 131072,
  ATA_PFLAG_PM_PENDING = 262144,
  ATA_PFLAG_INIT_GTM_VALID = 524288,
  ATA_PFLAG_PIO32 = 1048576,
  ATA_PFLAG_PIO32CHANGE = 2097152,
  ATA_PFLAG_EXTERNAL = 4194304,
  ATA_QCFLAG_ACTIVE = 1,
  ATA_QCFLAG_DMAMAP = 2,
  ATA_QCFLAG_IO = 8,
  ATA_QCFLAG_RESULT_TF = 16,
  ATA_QCFLAG_CLEAR_EXCL = 32,
  ATA_QCFLAG_QUIET = 64,
  ATA_QCFLAG_RETRY = 128,
  ATA_QCFLAG_FAILED = 65536,
  ATA_QCFLAG_SENSE_VALID = 131072,
  ATA_QCFLAG_EH_SCHEDULED = 262144,
  ATA_HOST_SIMPLEX = 1,
  ATA_HOST_STARTED = 2,
  ATA_HOST_PARALLEL_SCAN = 4,
  ATA_HOST_IGNORE_ATA = 8,
  ATA_TMOUT_BOOT = 30000,
  ATA_TMOUT_BOOT_QUICK = 7000,
  ATA_TMOUT_INTERNAL_QUICK = 5000,
  ATA_TMOUT_MAX_PARK = 30000,
  ATA_TMOUT_FF_WAIT_LONG = 2000,
  ATA_TMOUT_FF_WAIT = 800,
  ATA_WAIT_AFTER_RESET = 150,
  ATA_TMOUT_PMP_SRST_WAIT = 5000,
  ATA_TMOUT_SPURIOUS_PHY = 10000,
  BUS_UNKNOWN = 0,
  BUS_DMA = 1,
  BUS_IDLE = 2,
  BUS_NOINTR = 3,
  BUS_NODATA = 4,
  BUS_TIMER = 5,
  BUS_PIO = 6,
  BUS_EDD = 7,
  BUS_IDENTIFY = 8,
  BUS_PACKET = 9,
  PORT_UNKNOWN = 0,
  PORT_ENABLED = 1,
  PORT_DISABLED = 2,
  ATA_NR_PIO_MODES = 7,
  ATA_NR_MWDMA_MODES = 5,
  ATA_NR_UDMA_MODES = 8,
  ATA_SHIFT_PIO = 0,
  ATA_SHIFT_MWDMA = 7,
  ATA_SHIFT_UDMA = 12,
  ATA_SHIFT_PRIO = 6,
  ATA_PRIO_HIGH = 2,
  ATA_DMA_PAD_SZ = 4,
  ATA_ERING_SIZE = 32,
  ATA_DEFER_LINK = 1,
  ATA_DEFER_PORT = 2,
  ATA_EH_DESC_LEN = 80,
  ATA_EH_REVALIDATE = 1,
  ATA_EH_SOFTRESET = 2,
  ATA_EH_HARDRESET = 4,
  ATA_EH_RESET = 6,
  ATA_EH_ENABLE_LINK = 8,
  ATA_EH_PARK = 32,
  ATA_EH_PERDEV_MASK = 33,
  ATA_EH_ALL_ACTIONS = 15,
  ATA_EHI_HOTPLUGGED = 1,
  ATA_EHI_NO_AUTOPSY = 4,
  ATA_EHI_QUIET = 8,
  ATA_EHI_NO_RECOVERY = 16,
  ATA_EHI_DID_SOFTRESET = 65536,
  ATA_EHI_DID_HARDRESET = 131072,
  ATA_EHI_PRINTINFO = 262144,
  ATA_EHI_SETMODE = 524288,
  ATA_EHI_POST_SETMODE = 1048576,
  ATA_EHI_DID_RESET = 196608,
  ATA_EHI_TO_SLAVE_MASK = 12,
  ATA_EH_MAX_TRIES = 5,
  ATA_LINK_RESUME_TRIES = 5,
  ATA_PROBE_MAX_TRIES = 3,
  ATA_EH_DEV_TRIES = 3,
  ATA_EH_PMP_TRIES = 5,
  ATA_EH_PMP_LINK_TRIES = 3,
  SATA_PMP_RW_TIMEOUT = 3000,
  ATA_EH_CMD_TIMEOUT_TABLE_SIZE = 6,
  ATA_HORKAGE_DIAGNOSTIC = 1,
  ATA_HORKAGE_NODMA = 2,
  ATA_HORKAGE_NONCQ = 4,
  ATA_HORKAGE_MAX_SEC_128 = 8,
  ATA_HORKAGE_BROKEN_HPA = 16,
  ATA_HORKAGE_DISABLE = 32,
  ATA_HORKAGE_HPA_SIZE = 64,
  ATA_HORKAGE_IVB = 256,
  ATA_HORKAGE_STUCK_ERR = 512,
  ATA_HORKAGE_BRIDGE_OK = 1024,
  ATA_HORKAGE_ATAPI_MOD16_DMA = 2048,
  ATA_HORKAGE_FIRMWARE_WARN = 4096,
  ATA_HORKAGE_1_5_GBPS = 8192,
  ATA_HORKAGE_NOSETXFER = 16384,
  ATA_HORKAGE_BROKEN_FPDMA_AA = 32768,
  ATA_HORKAGE_DUMP_ID = 65536,
  ATA_HORKAGE_MAX_SEC_LBA48 = 131072,
  ATA_HORKAGE_ATAPI_DMADIR = 262144,
  ATA_HORKAGE_NO_NCQ_TRIM = 524288,
  ATA_HORKAGE_NOLPM = 1048576,
  ATA_HORKAGE_WD_BROKEN_LPM = 2097152,
  ATA_HORKAGE_ZERO_AFTER_TRIM = 4194304,
  ATA_HORKAGE_NO_DMA_LOG = 8388608,
  ATA_HORKAGE_NOTRIM = 16777216,
  ATA_HORKAGE_MAX_SEC_1024 = 33554432,
  ATA_HORKAGE_MAX_TRIM_128M = 67108864,
  ATA_DMA_MASK_ATA = 1,
  ATA_DMA_MASK_ATAPI = 2,
  ATA_DMA_MASK_CFA = 4,
  ATAPI_READ = 0,
  ATAPI_WRITE = 1,
  ATAPI_READ_CD = 2,
  ATAPI_PASS_THRU = 3,
  ATAPI_MISC = 4,
  ATA_TIMING_SETUP = 1,
  ATA_TIMING_ACT8B = 2,
  ATA_TIMING_REC8B = 4,
  ATA_TIMING_CYC8B = 8,
  ATA_TIMING_8BIT = 14,
  ATA_TIMING_ACTIVE = 16,
  ATA_TIMING_RECOVER = 32,
  ATA_TIMING_DMACK_HOLD = 64,
  ATA_TIMING_CYCLE = 128,
  ATA_TIMING_UDMA = 256,
  ATA_TIMING_ALL = 511,
  ATA_ACPI_FILTER_SETXFER = 1,
  ATA_ACPI_FILTER_LOCK = 2,
  ATA_ACPI_FILTER_DIPM = 4,
  ATA_ACPI_FILTER_FPDMA_OFFSET = 8,
  ATA_ACPI_FILTER_FPDMA_AA = 16,
  ATA_ACPI_FILTER_DEFAULT = 7,
};

enum ata_xfer_mask {
  ATA_MASK_PIO = 127,
  ATA_MASK_MWDMA = 3968,
  ATA_MASK_UDMA = 1044480,
};

enum ata_completion_errors {
  AC_ERR_OK = 0,
  AC_ERR_DEV = 1,
  AC_ERR_HSM = 2,
  AC_ERR_TIMEOUT = 4,
  AC_ERR_MEDIA = 8,
  AC_ERR_ATA_BUS = 16,
  AC_ERR_HOST_BUS = 32,
  AC_ERR_SYSTEM = 64,
  AC_ERR_INVALID = 128,
  AC_ERR_OTHER = 256,
  AC_ERR_NODEV_HINT = 512,
  AC_ERR_NCQ = 1024,
};

enum ata_lpm_policy {
  ATA_LPM_UNKNOWN = 0,
  ATA_LPM_MAX_POWER = 1,
  ATA_LPM_MED_POWER = 2,
  ATA_LPM_MED_POWER_WITH_DIPM = 3,
  ATA_LPM_MIN_POWER_WITH_PARTIAL = 4,
  ATA_LPM_MIN_POWER = 5,
};

struct ata_queued_cmd;

typedef void (*ata_qc_cb_t)(struct ata_queued_cmd*);

struct ata_taskfile {
  long unsigned int flags;
  u8 protocol;
  u8 ctl;
  u8 hob_feature;
  u8 hob_nsect;
  u8 hob_lbal;
  u8 hob_lbam;
  u8 hob_lbah;
  u8 feature;
  u8 nsect;
  u8 lbal;
  u8 lbam;
  u8 lbah;
  u8 device;
  u8 command;
  u32 auxiliary;
};

struct ata_port;

struct ata_device;

struct ata_queued_cmd {
  struct ata_port* ap;
  struct ata_device* dev;
  struct scsi_cmnd* scsicmd;
  void (*scsidone)(struct scsi_cmnd*);
  struct ata_taskfile tf;
  u8 cdb[16];
  long unsigned int flags;
  unsigned int tag;
  unsigned int hw_tag;
  unsigned int n_elem;
  unsigned int orig_n_elem;
  int dma_dir;
  unsigned int sect_size;
  unsigned int nbytes;
  unsigned int extrabytes;
  unsigned int curbytes;
  struct scatterlist sgent;
  struct scatterlist* sg;
  struct scatterlist* cursg;
  unsigned int cursg_ofs;
  unsigned int err_mask;
  struct ata_taskfile result_tf;
  ata_qc_cb_t complete_fn;
  void* private_data;
  void* lldd_task;
};

struct ata_link;

typedef int (*ata_prereset_fn_t)(struct ata_link*, long unsigned int);

struct ata_eh_info {
  struct ata_device* dev;
  u32 serror;
  unsigned int err_mask;
  unsigned int action;
  unsigned int dev_action[2];
  unsigned int flags;
  unsigned int probe_mask;
  char desc[80];
  int desc_len;
};

struct ata_eh_context {
  struct ata_eh_info i;
  int tries[2];
  int cmd_timeout_idx[12];
  unsigned int classes[2];
  unsigned int did_probe_mask;
  unsigned int unloaded_mask;
  unsigned int saved_ncq_enabled;
  u8 saved_xfer_mode[2];
  long unsigned int last_reset;
};

struct ata_ering_entry {
  unsigned int eflags;
  unsigned int err_mask;
  u64 timestamp;
};

struct ata_ering {
  int cursor;
  struct ata_ering_entry ring[32];
};

struct ata_device {
  struct ata_link* link;
  unsigned int devno;
  unsigned int horkage;
  long unsigned int flags;
  struct scsi_device* sdev;
  void* private_data;
  union acpi_object* gtf_cache;
  unsigned int gtf_filter;
  struct device tdev;
  u64 n_sectors;
  u64 n_native_sectors;
  unsigned int class;
  long unsigned int unpark_deadline;
  u8 pio_mode;
  u8 dma_mode;
  u8 xfer_mode;
  unsigned int xfer_shift;
  unsigned int multi_count;
  unsigned int max_sectors;
  unsigned int cdb_len;
  long unsigned int pio_mask;
  long unsigned int mwdma_mask;
  long unsigned int udma_mask;
  u16 cylinders;
  u16 heads;
  u16 sectors;
  long : 16;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  union {
    u16 id[256];
    u32 gscr[128];
  };
  u8 devslp_timing[8];
  u8 ncq_send_recv_cmds[20];
  u8 ncq_non_data_cmds[64];
  u32 zac_zoned_cap;
  u32 zac_zones_optimal_open;
  u32 zac_zones_optimal_nonseq;
  u32 zac_zones_max_open;
  int spdn_cnt;
  struct ata_ering ering;
  long : 64;
};

struct ata_link {
  struct ata_port* ap;
  int pmp;
  struct device tdev;
  unsigned int active_tag;
  u32 sactive;
  unsigned int flags;
  u32 saved_scontrol;
  unsigned int hw_sata_spd_limit;
  unsigned int sata_spd_limit;
  unsigned int sata_spd;
  enum ata_lpm_policy lpm_policy;
  struct ata_eh_info eh_info;
  struct ata_eh_context eh_context;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct ata_device device[2];
  long unsigned int last_lpm_change;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

typedef int (
    *ata_reset_fn_t)(struct ata_link*, unsigned int*, long unsigned int);

typedef void (*ata_postreset_fn_t)(struct ata_link*, unsigned int*);

enum sw_activity {
  OFF = 0,
  BLINK_ON = 1,
  BLINK_OFF = 2,
};

struct ata_port_operations;

struct ata_host {
  spinlock_t lock;
  struct device* dev;
  void* const* iomap;
  unsigned int n_ports;
  unsigned int n_tags;
  void* private_data;
  struct ata_port_operations* ops;
  long unsigned int flags;
  struct kref kref;
  struct mutex eh_mutex;
  struct task_struct* eh_owner;
  struct ata_port* simplex_claimed;
  struct ata_port* ports[0];
};

struct ata_port_operations {
  int (*qc_defer)(struct ata_queued_cmd*);
  int (*check_atapi_dma)(struct ata_queued_cmd*);
  enum ata_completion_errors (*qc_prep)(struct ata_queued_cmd*);
  unsigned int (*qc_issue)(struct ata_queued_cmd*);
  bool (*qc_fill_rtf)(struct ata_queued_cmd*);
  int (*cable_detect)(struct ata_port*);
  long unsigned int (*mode_filter)(struct ata_device*, long unsigned int);
  void (*set_piomode)(struct ata_port*, struct ata_device*);
  void (*set_dmamode)(struct ata_port*, struct ata_device*);
  int (*set_mode)(struct ata_link*, struct ata_device**);
  unsigned int (*read_id)(struct ata_device*, struct ata_taskfile*, u16*);
  void (*dev_config)(struct ata_device*);
  void (*freeze)(struct ata_port*);
  void (*thaw)(struct ata_port*);
  ata_prereset_fn_t prereset;
  ata_reset_fn_t softreset;
  ata_reset_fn_t hardreset;
  ata_postreset_fn_t postreset;
  ata_prereset_fn_t pmp_prereset;
  ata_reset_fn_t pmp_softreset;
  ata_reset_fn_t pmp_hardreset;
  ata_postreset_fn_t pmp_postreset;
  void (*error_handler)(struct ata_port*);
  void (*lost_interrupt)(struct ata_port*);
  void (*post_internal_cmd)(struct ata_queued_cmd*);
  void (*sched_eh)(struct ata_port*);
  void (*end_eh)(struct ata_port*);
  int (*scr_read)(struct ata_link*, unsigned int, u32*);
  int (*scr_write)(struct ata_link*, unsigned int, u32);
  void (*pmp_attach)(struct ata_port*);
  void (*pmp_detach)(struct ata_port*);
  int (*set_lpm)(struct ata_link*, enum ata_lpm_policy, unsigned int);
  int (*port_suspend)(struct ata_port*, pm_message_t);
  int (*port_resume)(struct ata_port*);
  int (*port_start)(struct ata_port*);
  void (*port_stop)(struct ata_port*);
  void (*host_stop)(struct ata_host*);
  ssize_t (*em_show)(struct ata_port*, char*);
  ssize_t (*em_store)(struct ata_port*, const char*, size_t);
  ssize_t (*sw_activity_show)(struct ata_device*, char*);
  ssize_t (*sw_activity_store)(struct ata_device*, enum sw_activity);
  ssize_t (*transmit_led_message)(struct ata_port*, u32, ssize_t);
  void (*phy_reset)(struct ata_port*);
  void (*eng_timeout)(struct ata_port*);
  const struct ata_port_operations* inherits;
};

struct ata_port_stats {
  long unsigned int unhandled_irq;
  long unsigned int idle_irq;
  long unsigned int rw_reqbuf;
};

struct ata_acpi_drive {
  u32 pio;
  u32 dma;
};

struct ata_acpi_gtm {
  struct ata_acpi_drive drive[2];
  u32 flags;
};

struct ata_port {
  struct Scsi_Host* scsi_host;
  struct ata_port_operations* ops;
  spinlock_t* lock;
  long unsigned int flags;
  unsigned int pflags;
  unsigned int print_id;
  unsigned int local_port_no;
  unsigned int port_no;
  unsigned int pio_mask;
  unsigned int mwdma_mask;
  unsigned int udma_mask;
  unsigned int cbl;
  struct ata_queued_cmd qcmd[33];
  long unsigned int sas_tag_allocated;
  u64 qc_active;
  int nr_active_links;
  unsigned int sas_last_tag;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct ata_link link;
  struct ata_link* slave_link;
  int nr_pmp_links;
  struct ata_link* pmp_link;
  struct ata_link* excl_link;
  struct ata_port_stats stats;
  struct ata_host* host;
  struct device* dev;
  struct device tdev;
  struct mutex scsi_scan_mutex;
  struct delayed_work hotplug_task;
  struct work_struct scsi_rescan_task;
  unsigned int hsm_task_state;
  u32 msg_enable;
  struct list_head eh_done_q;
  wait_queue_head_t eh_wait_q;
  int eh_tries;
  struct completion park_req_pending;
  pm_message_t pm_mesg;
  enum ata_lpm_policy target_lpm_policy;
  struct timer_list fastdrain_timer;
  long unsigned int fastdrain_cnt;
  async_cookie_t cookie;
  int em_message_type;
  void* private_data;
  struct ata_acpi_gtm __acpi_init_gtm;
  long : 32;
  long : 64;
  long : 64;
  u8 sector_buf[512];
};

struct ata_port_info {
  long unsigned int flags;
  long unsigned int link_flags;
  long unsigned int pio_mask;
  long unsigned int mwdma_mask;
  long unsigned int udma_mask;
  struct ata_port_operations* port_ops;
  void* private_data;
};

struct ata_timing {
  short unsigned int mode;
  short unsigned int setup;
  short unsigned int act8b;
  short unsigned int rec8b;
  short unsigned int cyc8b;
  short unsigned int active;
  short unsigned int recover;
  short unsigned int dmack_hold;
  short unsigned int cycle;
  short unsigned int udma;
};

struct pci_bits {
  unsigned int reg;
  unsigned int width;
  long unsigned int mask;
  long unsigned int val;
};

enum ata_link_iter_mode {
  ATA_LITER_EDGE = 0,
  ATA_LITER_HOST_FIRST = 1,
  ATA_LITER_PMP_FIRST = 2,
};

enum ata_dev_iter_mode {
  ATA_DITER_ENABLED = 0,
  ATA_DITER_ENABLED_REVERSE = 1,
  ATA_DITER_ALL = 2,
  ATA_DITER_ALL_REVERSE = 3,
};

struct trace_event_raw_ata_qc_issue {
  struct trace_entry ent;
  unsigned int ata_port;
  unsigned int ata_dev;
  unsigned int tag;
  unsigned char cmd;
  unsigned char dev;
  unsigned char lbal;
  unsigned char lbam;
  unsigned char lbah;
  unsigned char nsect;
  unsigned char feature;
  unsigned char hob_lbal;
  unsigned char hob_lbam;
  unsigned char hob_lbah;
  unsigned char hob_nsect;
  unsigned char hob_feature;
  unsigned char ctl;
  unsigned char proto;
  long unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ata_qc_complete_template {
  struct trace_entry ent;
  unsigned int ata_port;
  unsigned int ata_dev;
  unsigned int tag;
  unsigned char status;
  unsigned char dev;
  unsigned char lbal;
  unsigned char lbam;
  unsigned char lbah;
  unsigned char nsect;
  unsigned char error;
  unsigned char hob_lbal;
  unsigned char hob_lbam;
  unsigned char hob_lbah;
  unsigned char hob_nsect;
  unsigned char hob_feature;
  unsigned char ctl;
  long unsigned int flags;
  char __data[0];
};

struct trace_event_raw_ata_eh_link_autopsy {
  struct trace_entry ent;
  unsigned int ata_port;
  unsigned int ata_dev;
  unsigned int eh_action;
  unsigned int eh_err_mask;
  char __data[0];
};

struct trace_event_raw_ata_eh_link_autopsy_qc {
  struct trace_entry ent;
  unsigned int ata_port;
  unsigned int ata_dev;
  unsigned int tag;
  unsigned int qc_flags;
  unsigned int eh_err_mask;
  char __data[0];
};

struct trace_event_data_offsets_ata_qc_issue {};

struct trace_event_data_offsets_ata_qc_complete_template {};

struct trace_event_data_offsets_ata_eh_link_autopsy {};

struct trace_event_data_offsets_ata_eh_link_autopsy_qc {};

typedef void (*btf_trace_ata_qc_issue)(void*, struct ata_queued_cmd*);

typedef void (
    *btf_trace_ata_qc_complete_internal)(void*, struct ata_queued_cmd*);

typedef void (*btf_trace_ata_qc_complete_failed)(void*, struct ata_queued_cmd*);

typedef void (*btf_trace_ata_qc_complete_done)(void*, struct ata_queued_cmd*);

typedef void (*btf_trace_ata_eh_link_autopsy)(
    void*,
    struct ata_device*,
    unsigned int,
    unsigned int);

typedef void (*btf_trace_ata_eh_link_autopsy_qc)(void*, struct ata_queued_cmd*);

enum {
  ATA_READID_POSTRESET = 1,
  ATA_DNXFER_PIO = 0,
  ATA_DNXFER_DMA = 1,
  ATA_DNXFER_40C = 2,
  ATA_DNXFER_FORCE_PIO = 3,
  ATA_DNXFER_FORCE_PIO0 = 4,
  ATA_DNXFER_QUIET = 2147483648,
};

struct ata_force_param {
  const char* name;
  u8 cbl;
  u8 spd_limit;
  long unsigned int xfer_mask;
  unsigned int horkage_on;
  unsigned int horkage_off;
  u16 lflags;
};

struct ata_force_ent {
  int port;
  int device;
  struct ata_force_param param;
};

struct ata_xfer_ent {
  int shift;
  int bits;
  u8 base;
};

struct ata_blacklist_entry {
  const char* model_num;
  const char* model_rev;
  long unsigned int horkage;
};

typedef unsigned int (*ata_xlat_func_t)(struct ata_queued_cmd*);

struct ata_scsi_args {
  struct ata_device* dev;
  u16* id;
  struct scsi_cmnd* cmd;
};

enum ata_lpm_hints {
  ATA_LPM_EMPTY = 1,
  ATA_LPM_HIPM = 2,
  ATA_LPM_WAKE_ONLY = 4,
};

enum {
  ATA_EH_SPDN_NCQ_OFF = 1,
  ATA_EH_SPDN_SPEED_DOWN = 2,
  ATA_EH_SPDN_FALLBACK_TO_PIO = 4,
  ATA_EH_SPDN_KEEP_ERRORS = 8,
  ATA_EFLAG_IS_IO = 1,
  ATA_EFLAG_DUBIOUS_XFER = 2,
  ATA_EFLAG_OLD_ER = 2147483648,
  ATA_ECAT_NONE = 0,
  ATA_ECAT_ATA_BUS = 1,
  ATA_ECAT_TOUT_HSM = 2,
  ATA_ECAT_UNK_DEV = 3,
  ATA_ECAT_DUBIOUS_NONE = 4,
  ATA_ECAT_DUBIOUS_ATA_BUS = 5,
  ATA_ECAT_DUBIOUS_TOUT_HSM = 6,
  ATA_ECAT_DUBIOUS_UNK_DEV = 7,
  ATA_ECAT_NR = 8,
  ATA_EH_CMD_DFL_TIMEOUT = 5000,
  ATA_EH_RESET_COOL_DOWN = 5000,
  ATA_EH_PRERESET_TIMEOUT = 10000,
  ATA_EH_FASTDRAIN_INTERVAL = 3000,
  ATA_EH_UA_TRIES = 5,
  ATA_EH_PROBE_TRIAL_INTERVAL = 60000,
  ATA_EH_PROBE_TRIALS = 2,
};

struct ata_eh_cmd_timeout_ent {
  const u8* commands;
  const long unsigned int* timeouts;
};

struct speed_down_verdict_arg {
  u64 since;
  int xfer_ok;
  int nr_errors[8];
};

struct ata_internal {
  struct scsi_transport_template t;
  struct device_attribute private_port_attrs[3];
  struct device_attribute private_link_attrs[3];
  struct device_attribute private_dev_attrs[9];
  struct transport_container link_attr_cont;
  struct transport_container dev_attr_cont;
  struct device_attribute* link_attrs[4];
  struct device_attribute* port_attrs[4];
  struct device_attribute* dev_attrs[10];
};

struct ata_show_ering_arg {
  char* buf;
  int written;
};

struct ata_acpi_gtf {
  u8 tf[7];
};

struct ata_acpi_hotplug_context {
  struct acpi_hotplug_context hp;
  union {
    struct ata_port* ap;
    struct ata_device* dev;
  } data;
};

struct regulator;

struct phy_configure_opts_dp {
  unsigned int link_rate;
  unsigned int lanes;
  unsigned int voltage[4];
  unsigned int pre[4];
  u8 ssc : 1;
  u8 set_rate : 1;
  u8 set_lanes : 1;
  u8 set_voltages : 1;
};

struct phy_configure_opts_mipi_dphy {
  unsigned int clk_miss;
  unsigned int clk_post;
  unsigned int clk_pre;
  unsigned int clk_prepare;
  unsigned int clk_settle;
  unsigned int clk_term_en;
  unsigned int clk_trail;
  unsigned int clk_zero;
  unsigned int d_term_en;
  unsigned int eot;
  unsigned int hs_exit;
  unsigned int hs_prepare;
  unsigned int hs_settle;
  unsigned int hs_skip;
  unsigned int hs_trail;
  unsigned int hs_zero;
  unsigned int init;
  unsigned int lpx;
  unsigned int ta_get;
  unsigned int ta_go;
  unsigned int ta_sure;
  unsigned int wakeup;
  long unsigned int hs_clk_rate;
  long unsigned int lp_clk_rate;
  unsigned char lanes;
};

enum phy_mode {
  PHY_MODE_INVALID = 0,
  PHY_MODE_USB_HOST = 1,
  PHY_MODE_USB_HOST_LS = 2,
  PHY_MODE_USB_HOST_FS = 3,
  PHY_MODE_USB_HOST_HS = 4,
  PHY_MODE_USB_HOST_SS = 5,
  PHY_MODE_USB_DEVICE = 6,
  PHY_MODE_USB_DEVICE_LS = 7,
  PHY_MODE_USB_DEVICE_FS = 8,
  PHY_MODE_USB_DEVICE_HS = 9,
  PHY_MODE_USB_DEVICE_SS = 10,
  PHY_MODE_USB_OTG = 11,
  PHY_MODE_UFS_HS_A = 12,
  PHY_MODE_UFS_HS_B = 13,
  PHY_MODE_PCIE = 14,
  PHY_MODE_ETHERNET = 15,
  PHY_MODE_MIPI_DPHY = 16,
  PHY_MODE_SATA = 17,
  PHY_MODE_LVDS = 18,
  PHY_MODE_DP = 19,
};

union phy_configure_opts {
  struct phy_configure_opts_mipi_dphy mipi_dphy;
  struct phy_configure_opts_dp dp;
};

struct phy;

struct phy_ops {
  int (*init)(struct phy*);
  int (*exit)(struct phy*);
  int (*power_on)(struct phy*);
  int (*power_off)(struct phy*);
  int (*set_mode)(struct phy*, enum phy_mode, int);
  int (*configure)(struct phy*, union phy_configure_opts*);
  int (*validate)(struct phy*, enum phy_mode, int, union phy_configure_opts*);
  int (*reset)(struct phy*);
  int (*calibrate)(struct phy*);
  void (*release)(struct phy*);
  struct module* owner;
};

struct phy_attrs {
  u32 bus_width;
  u32 max_link_rate;
  enum phy_mode mode;
};

struct phy {
  struct device dev;
  int id;
  const struct phy_ops* ops;
  struct mutex mutex;
  int init_count;
  int power_count;
  struct phy_attrs attrs;
  struct regulator* pwr;
};

enum {
  AHCI_MAX_PORTS = 32,
  AHCI_MAX_CLKS = 5,
  AHCI_MAX_SG = 168,
  AHCI_DMA_BOUNDARY = 4294967295,
  AHCI_MAX_CMDS = 32,
  AHCI_CMD_SZ = 32,
  AHCI_CMD_SLOT_SZ = 1024,
  AHCI_RX_FIS_SZ = 256,
  AHCI_CMD_TBL_CDB = 64,
  AHCI_CMD_TBL_HDR_SZ = 128,
  AHCI_CMD_TBL_SZ = 2816,
  AHCI_CMD_TBL_AR_SZ = 90112,
  AHCI_PORT_PRIV_DMA_SZ = 91392,
  AHCI_PORT_PRIV_FBS_DMA_SZ = 95232,
  AHCI_IRQ_ON_SG = 2147483648,
  AHCI_CMD_ATAPI = 32,
  AHCI_CMD_WRITE = 64,
  AHCI_CMD_PREFETCH = 128,
  AHCI_CMD_RESET = 256,
  AHCI_CMD_CLR_BUSY = 1024,
  RX_FIS_PIO_SETUP = 32,
  RX_FIS_D2H_REG = 64,
  RX_FIS_SDB = 88,
  RX_FIS_UNK = 96,
  HOST_CAP = 0,
  HOST_CTL = 4,
  HOST_IRQ_STAT = 8,
  HOST_PORTS_IMPL = 12,
  HOST_VERSION = 16,
  HOST_EM_LOC = 28,
  HOST_EM_CTL = 32,
  HOST_CAP2 = 36,
  HOST_RESET = 1,
  HOST_IRQ_EN = 2,
  HOST_MRSM = 4,
  HOST_AHCI_EN = 2147483648,
  HOST_CAP_SXS = 32,
  HOST_CAP_EMS = 64,
  HOST_CAP_CCC = 128,
  HOST_CAP_PART = 8192,
  HOST_CAP_SSC = 16384,
  HOST_CAP_PIO_MULTI = 32768,
  HOST_CAP_FBS = 65536,
  HOST_CAP_PMP = 131072,
  HOST_CAP_ONLY = 262144,
  HOST_CAP_CLO = 16777216,
  HOST_CAP_LED = 33554432,
  HOST_CAP_ALPM = 67108864,
  HOST_CAP_SSS = 134217728,
  HOST_CAP_MPS = 268435456,
  HOST_CAP_SNTF = 536870912,
  HOST_CAP_NCQ = 1073741824,
  HOST_CAP_64 = 2147483648,
  HOST_CAP2_BOH = 1,
  HOST_CAP2_NVMHCI = 2,
  HOST_CAP2_APST = 4,
  HOST_CAP2_SDS = 8,
  HOST_CAP2_SADM = 16,
  HOST_CAP2_DESO = 32,
  PORT_LST_ADDR = 0,
  PORT_LST_ADDR_HI = 4,
  PORT_FIS_ADDR = 8,
  PORT_FIS_ADDR_HI = 12,
  PORT_IRQ_STAT = 16,
  PORT_IRQ_MASK = 20,
  PORT_CMD = 24,
  PORT_TFDATA = 32,
  PORT_SIG = 36,
  PORT_CMD_ISSUE = 56,
  PORT_SCR_STAT = 40,
  PORT_SCR_CTL = 44,
  PORT_SCR_ERR = 48,
  PORT_SCR_ACT = 52,
  PORT_SCR_NTF = 60,
  PORT_FBS = 64,
  PORT_DEVSLP = 68,
  PORT_IRQ_COLD_PRES = 2147483648,
  PORT_IRQ_TF_ERR = 1073741824,
  PORT_IRQ_HBUS_ERR = 536870912,
  PORT_IRQ_HBUS_DATA_ERR = 268435456,
  PORT_IRQ_IF_ERR = 134217728,
  PORT_IRQ_IF_NONFATAL = 67108864,
  PORT_IRQ_OVERFLOW = 16777216,
  PORT_IRQ_BAD_PMP = 8388608,
  PORT_IRQ_PHYRDY = 4194304,
  PORT_IRQ_DEV_ILCK = 128,
  PORT_IRQ_CONNECT = 64,
  PORT_IRQ_SG_DONE = 32,
  PORT_IRQ_UNK_FIS = 16,
  PORT_IRQ_SDB_FIS = 8,
  PORT_IRQ_DMAS_FIS = 4,
  PORT_IRQ_PIOS_FIS = 2,
  PORT_IRQ_D2H_REG_FIS = 1,
  PORT_IRQ_FREEZE = 683671632,
  PORT_IRQ_ERROR = 2025848912,
  DEF_PORT_IRQ = 2025848959,
  PORT_CMD_ASP = 134217728,
  PORT_CMD_ALPE = 67108864,
  PORT_CMD_ATAPI = 16777216,
  PORT_CMD_FBSCP = 4194304,
  PORT_CMD_ESP = 2097152,
  PORT_CMD_HPCP = 262144,
  PORT_CMD_PMP = 131072,
  PORT_CMD_LIST_ON = 32768,
  PORT_CMD_FIS_ON = 16384,
  PORT_CMD_FIS_RX = 16,
  PORT_CMD_CLO = 8,
  PORT_CMD_POWER_ON = 4,
  PORT_CMD_SPIN_UP = 2,
  PORT_CMD_START = 1,
  PORT_CMD_ICC_MASK = 4026531840,
  PORT_CMD_ICC_ACTIVE = 268435456,
  PORT_CMD_ICC_PARTIAL = 536870912,
  PORT_CMD_ICC_SLUMBER = 1610612736,
  PORT_FBS_DWE_OFFSET = 16,
  PORT_FBS_ADO_OFFSET = 12,
  PORT_FBS_DEV_OFFSET = 8,
  PORT_FBS_DEV_MASK = 3840,
  PORT_FBS_SDE = 4,
  PORT_FBS_DEC = 2,
  PORT_FBS_EN = 1,
  PORT_DEVSLP_DM_OFFSET = 25,
  PORT_DEVSLP_DM_MASK = 503316480,
  PORT_DEVSLP_DITO_OFFSET = 15,
  PORT_DEVSLP_MDAT_OFFSET = 10,
  PORT_DEVSLP_DETO_OFFSET = 2,
  PORT_DEVSLP_DSP = 2,
  PORT_DEVSLP_ADSE = 1,
  AHCI_HFLAG_NO_NCQ = 1,
  AHCI_HFLAG_IGN_IRQ_IF_ERR = 2,
  AHCI_HFLAG_IGN_SERR_INTERNAL = 4,
  AHCI_HFLAG_32BIT_ONLY = 8,
  AHCI_HFLAG_MV_PATA = 16,
  AHCI_HFLAG_NO_MSI = 32,
  AHCI_HFLAG_NO_PMP = 64,
  AHCI_HFLAG_SECT255 = 256,
  AHCI_HFLAG_YES_NCQ = 512,
  AHCI_HFLAG_NO_SUSPEND = 1024,
  AHCI_HFLAG_SRST_TOUT_IS_OFFLINE = 2048,
  AHCI_HFLAG_NO_SNTF = 4096,
  AHCI_HFLAG_NO_FPDMA_AA = 8192,
  AHCI_HFLAG_YES_FBS = 16384,
  AHCI_HFLAG_DELAY_ENGINE = 32768,
  AHCI_HFLAG_NO_DEVSLP = 131072,
  AHCI_HFLAG_NO_FBS = 262144,
  AHCI_HFLAG_MULTI_MSI = 1048576,
  AHCI_HFLAG_WAKE_BEFORE_STOP = 4194304,
  AHCI_HFLAG_YES_ALPM = 8388608,
  AHCI_HFLAG_NO_WRITE_TO_RO = 16777216,
  AHCI_HFLAG_IS_MOBILE = 33554432,
  AHCI_HFLAG_SUSPEND_PHYS = 67108864,
  AHCI_HFLAG_IGN_NOTSUPP_POWER_ON = 134217728,
  AHCI_FLAG_COMMON = 393346,
  ICH_MAP = 144,
  PCS_6 = 146,
  PCS_7 = 148,
  EM_MAX_SLOTS = 8,
  EM_MAX_RETRY = 5,
  EM_CTL_RST = 512,
  EM_CTL_TM = 256,
  EM_CTL_MR = 1,
  EM_CTL_ALHD = 67108864,
  EM_CTL_XMT = 33554432,
  EM_CTL_SMB = 16777216,
  EM_CTL_SGPIO = 524288,
  EM_CTL_SES = 262144,
  EM_CTL_SAFTE = 131072,
  EM_CTL_LED = 65536,
  EM_MSG_TYPE_LED = 1,
  EM_MSG_TYPE_SAFTE = 2,
  EM_MSG_TYPE_SES2 = 4,
  EM_MSG_TYPE_SGPIO = 8,
};

struct ahci_cmd_hdr {
  __le32 opts;
  __le32 status;
  __le32 tbl_addr;
  __le32 tbl_addr_hi;
  __le32 reserved[4];
};

struct ahci_em_priv {
  enum sw_activity blink_policy;
  struct timer_list timer;
  long unsigned int saved_activity;
  long unsigned int activity;
  long unsigned int led_state;
  struct ata_link* link;
};

struct ahci_port_priv {
  struct ata_link* active_link;
  struct ahci_cmd_hdr* cmd_slot;
  dma_addr_t cmd_slot_dma;
  void* cmd_tbl;
  dma_addr_t cmd_tbl_dma;
  void* rx_fis;
  dma_addr_t rx_fis_dma;
  unsigned int ncq_saw_d2h : 1;
  unsigned int ncq_saw_dmas : 1;
  unsigned int ncq_saw_sdb : 1;
  spinlock_t lock;
  u32 intr_mask;
  bool fbs_supported;
  bool fbs_enabled;
  int fbs_last_dev;
  struct ahci_em_priv em_priv[8];
  char* irq_desc;
};

struct ahci_host_priv {
  unsigned int flags;
  u32 force_port_map;
  u32 mask_port_map;
  void* mmio;
  u32 cap;
  u32 cap2;
  u32 version;
  u32 port_map;
  u32 saved_cap;
  u32 saved_cap2;
  u32 saved_port_map;
  u32 em_loc;
  u32 em_buf_sz;
  u32 em_msg_type;
  u32 remapped_nvme;
  bool got_runtime_pm;
  struct clk* clks[5];
  struct reset_control* rsts;
  struct regulator** target_pwrs;
  struct regulator* ahci_regulator;
  struct regulator* phy_regulator;
  struct phy** phys;
  unsigned int nports;
  void* plat_data;
  unsigned int irq;
  void (*start_engine)(struct ata_port*);
  int (*stop_engine)(struct ata_port*);
  irqreturn_t (*irq_handler)(int, void*);
  int (*get_irq_vector)(struct ata_host*, int);
};

enum {
  AHCI_PCI_BAR_STA2X11 = 0,
  AHCI_PCI_BAR_CAVIUM = 0,
  AHCI_PCI_BAR_LOONGSON = 0,
  AHCI_PCI_BAR_ENMOTUS = 2,
  AHCI_PCI_BAR_CAVIUM_GEN5 = 4,
  AHCI_PCI_BAR_STANDARD = 5,
};

enum board_ids {
  board_ahci = 0,
  board_ahci_ign_iferr = 1,
  board_ahci_mobile = 2,
  board_ahci_nomsi = 3,
  board_ahci_noncq = 4,
  board_ahci_nosntf = 5,
  board_ahci_yes_fbs = 6,
  board_ahci_al = 7,
  board_ahci_avn = 8,
  board_ahci_mcp65 = 9,
  board_ahci_mcp77 = 10,
  board_ahci_mcp89 = 11,
  board_ahci_mv = 12,
  board_ahci_sb600 = 13,
  board_ahci_sb700 = 14,
  board_ahci_vt8251 = 15,
  board_ahci_pcs7 = 16,
  board_ahci_mcp_linux = 9,
  board_ahci_mcp67 = 9,
  board_ahci_mcp73 = 9,
  board_ahci_mcp79 = 10,
};

struct ahci_sg {
  __le32 addr;
  __le32 addr_hi;
  __le32 reserved;
  __le32 flags_size;
};

struct spi_device_id {
  char name[32];
  kernel_ulong_t driver_data;
};

struct ptp_system_timestamp {
  struct timespec64 pre_ts;
  struct timespec64 post_ts;
};

struct spi_statistics {
  spinlock_t lock;
  long unsigned int messages;
  long unsigned int transfers;
  long unsigned int errors;
  long unsigned int timedout;
  long unsigned int spi_sync;
  long unsigned int spi_sync_immediate;
  long unsigned int spi_async;
  long long unsigned int bytes;
  long long unsigned int bytes_rx;
  long long unsigned int bytes_tx;
  long unsigned int transfer_bytes_histo[17];
  long unsigned int transfers_split_maxsize;
};

struct spi_delay {
  u16 value;
  u8 unit;
};

struct spi_controller;

struct spi_device {
  struct device dev;
  struct spi_controller* controller;
  struct spi_controller* master;
  u32 max_speed_hz;
  u8 chip_select;
  u8 bits_per_word;
  bool rt;
  u32 mode;
  int irq;
  void* controller_state;
  void* controller_data;
  char modalias[32];
  const char* driver_override;
  int cs_gpio;
  struct gpio_desc* cs_gpiod;
  struct spi_delay word_delay;
  struct spi_statistics statistics;
};

struct spi_message;

struct spi_transfer;

struct spi_controller_mem_ops;

struct spi_controller {
  struct device dev;
  struct list_head list;
  s16 bus_num;
  u16 num_chipselect;
  u16 dma_alignment;
  u32 mode_bits;
  u32 buswidth_override_bits;
  u32 bits_per_word_mask;
  u32 min_speed_hz;
  u32 max_speed_hz;
  u16 flags;
  bool slave;
  size_t (*max_transfer_size)(struct spi_device*);
  size_t (*max_message_size)(struct spi_device*);
  struct mutex io_mutex;
  spinlock_t bus_lock_spinlock;
  struct mutex bus_lock_mutex;
  bool bus_lock_flag;
  int (*setup)(struct spi_device*);
  int (*set_cs_timing)(
      struct spi_device*,
      struct spi_delay*,
      struct spi_delay*,
      struct spi_delay*);
  int (*transfer)(struct spi_device*, struct spi_message*);
  void (*cleanup)(struct spi_device*);
  bool (*can_dma)(
      struct spi_controller*,
      struct spi_device*,
      struct spi_transfer*);
  bool queued;
  struct kthread_worker* kworker;
  struct kthread_work pump_messages;
  spinlock_t queue_lock;
  struct list_head queue;
  struct spi_message* cur_msg;
  bool idling;
  bool busy;
  bool running;
  bool rt;
  bool auto_runtime_pm;
  bool cur_msg_prepared;
  bool cur_msg_mapped;
  bool last_cs_enable;
  bool last_cs_mode_high;
  bool fallback;
  struct completion xfer_completion;
  size_t max_dma_len;
  int (*prepare_transfer_hardware)(struct spi_controller*);
  int (*transfer_one_message)(struct spi_controller*, struct spi_message*);
  int (*unprepare_transfer_hardware)(struct spi_controller*);
  int (*prepare_message)(struct spi_controller*, struct spi_message*);
  int (*unprepare_message)(struct spi_controller*, struct spi_message*);
  int (*slave_abort)(struct spi_controller*);
  void (*set_cs)(struct spi_device*, bool);
  int (*transfer_one)(
      struct spi_controller*,
      struct spi_device*,
      struct spi_transfer*);
  void (*handle_err)(struct spi_controller*, struct spi_message*);
  const struct spi_controller_mem_ops* mem_ops;
  struct spi_delay cs_setup;
  struct spi_delay cs_hold;
  struct spi_delay cs_inactive;
  int* cs_gpios;
  struct gpio_desc** cs_gpiods;
  bool use_gpio_descriptors;
  u8 unused_native_cs;
  u8 max_native_cs;
  struct spi_statistics statistics;
  struct dma_chan* dma_tx;
  struct dma_chan* dma_rx;
  void* dummy_rx;
  void* dummy_tx;
  int (*fw_translate_cs)(struct spi_controller*, unsigned int);
  bool ptp_sts_supported;
  long unsigned int irq_flags;
};

struct spi_driver {
  const struct spi_device_id* id_table;
  int (*probe)(struct spi_device*);
  int (*remove)(struct spi_device*);
  void (*shutdown)(struct spi_device*);
  struct device_driver driver;
};

struct spi_message {
  struct list_head transfers;
  struct spi_device* spi;
  unsigned int is_dma_mapped : 1;
  void (*complete)(void*);
  void* context;
  unsigned int frame_length;
  unsigned int actual_length;
  int status;
  struct list_head queue;
  void* state;
  struct list_head resources;
};

struct spi_transfer {
  const void* tx_buf;
  void* rx_buf;
  unsigned int len;
  dma_addr_t tx_dma;
  dma_addr_t rx_dma;
  struct sg_table tx_sg;
  struct sg_table rx_sg;
  unsigned int dummy_data : 1;
  unsigned int cs_change : 1;
  unsigned int tx_nbits : 3;
  unsigned int rx_nbits : 3;
  u8 bits_per_word;
  u16 delay_usecs;
  struct spi_delay delay;
  struct spi_delay cs_change_delay;
  struct spi_delay word_delay;
  u32 speed_hz;
  u32 effective_speed_hz;
  unsigned int ptp_sts_word_pre;
  unsigned int ptp_sts_word_post;
  struct ptp_system_timestamp* ptp_sts;
  bool timestamped;
  struct list_head transfer_list;
  u16 error;
};

struct spi_mem;

struct spi_mem_op;

struct spi_mem_dirmap_desc;

struct spi_controller_mem_ops {
  int (*adjust_op_size)(struct spi_mem*, struct spi_mem_op*);
  bool (*supports_op)(struct spi_mem*, const struct spi_mem_op*);
  int (*exec_op)(struct spi_mem*, const struct spi_mem_op*);
  const char* (*get_name)(struct spi_mem*);
  int (*dirmap_create)(struct spi_mem_dirmap_desc*);
  void (*dirmap_destroy)(struct spi_mem_dirmap_desc*);
  ssize_t (*dirmap_read)(struct spi_mem_dirmap_desc*, u64, size_t, void*);
  ssize_t (
      *dirmap_write)(struct spi_mem_dirmap_desc*, u64, size_t, const void*);
};

typedef void (
    *spi_res_release_t)(struct spi_controller*, struct spi_message*, void*);

struct spi_res {
  struct list_head entry;
  spi_res_release_t release;
  long long unsigned int data[0];
};

struct spi_replaced_transfers;

typedef void (*spi_replaced_release_t)(
    struct spi_controller*,
    struct spi_message*,
    struct spi_replaced_transfers*);

struct spi_replaced_transfers {
  spi_replaced_release_t release;
  void* extradata;
  struct list_head replaced_transfers;
  struct list_head* replaced_after;
  size_t inserted;
  struct spi_transfer inserted_transfers[0];
};

struct spi_board_info {
  char modalias[32];
  const void* platform_data;
  const struct property_entry* properties;
  void* controller_data;
  int irq;
  u32 max_speed_hz;
  u16 bus_num;
  u16 chip_select;
  u32 mode;
};

enum spi_mem_data_dir {
  SPI_MEM_NO_DATA = 0,
  SPI_MEM_DATA_IN = 1,
  SPI_MEM_DATA_OUT = 2,
};

struct spi_mem_op {
  struct {
    u8 nbytes;
    u8 buswidth;
    u8 dtr : 1;
    u16 opcode;
  } cmd;
  struct {
    u8 nbytes;
    u8 buswidth;
    u8 dtr : 1;
    u64 val;
  } addr;
  struct {
    u8 nbytes;
    u8 buswidth;
    u8 dtr : 1;
  } dummy;
  struct {
    u8 buswidth;
    u8 dtr : 1;
    enum spi_mem_data_dir dir;
    unsigned int nbytes;
    union {
      void* in;
      const void* out;
    } buf;
  } data;
};

struct spi_mem_dirmap_info {
  struct spi_mem_op op_tmpl;
  u64 offset;
  u64 length;
};

struct spi_mem_dirmap_desc {
  struct spi_mem* mem;
  struct spi_mem_dirmap_info info;
  unsigned int nodirmap;
  void* priv;
};

struct spi_mem {
  struct spi_device* spi;
  void* drvpriv;
  const char* name;
};

struct trace_event_raw_spi_controller {
  struct trace_entry ent;
  int bus_num;
  char __data[0];
};

struct trace_event_raw_spi_message {
  struct trace_entry ent;
  int bus_num;
  int chip_select;
  struct spi_message* msg;
  char __data[0];
};

struct trace_event_raw_spi_message_done {
  struct trace_entry ent;
  int bus_num;
  int chip_select;
  struct spi_message* msg;
  unsigned int frame;
  unsigned int actual;
  char __data[0];
};

struct trace_event_raw_spi_transfer {
  struct trace_entry ent;
  int bus_num;
  int chip_select;
  struct spi_transfer* xfer;
  int len;
  u32 __data_loc_rx_buf;
  u32 __data_loc_tx_buf;
  char __data[0];
};

struct trace_event_data_offsets_spi_controller {};

struct trace_event_data_offsets_spi_message {};

struct trace_event_data_offsets_spi_message_done {};

struct trace_event_data_offsets_spi_transfer {
  u32 rx_buf;
  u32 tx_buf;
};

typedef void (*btf_trace_spi_controller_idle)(void*, struct spi_controller*);

typedef void (*btf_trace_spi_controller_busy)(void*, struct spi_controller*);

typedef void (*btf_trace_spi_message_submit)(void*, struct spi_message*);

typedef void (*btf_trace_spi_message_start)(void*, struct spi_message*);

typedef void (*btf_trace_spi_message_done)(void*, struct spi_message*);

typedef void (*btf_trace_spi_transfer_start)(
    void*,
    struct spi_message*,
    struct spi_transfer*);

typedef void (*btf_trace_spi_transfer_stop)(
    void*,
    struct spi_message*,
    struct spi_transfer*);

struct boardinfo {
  struct list_head list;
  struct spi_board_info board_info;
};

struct acpi_spi_lookup {
  struct spi_controller* ctlr;
  u32 max_speed_hz;
  u32 mode;
  int irq;
  u8 bits_per_word;
  u8 chip_select;
};

struct spi_mem_driver {
  struct spi_driver spidrv;
  int (*probe)(struct spi_mem*);
  int (*remove)(struct spi_mem*);
  void (*shutdown)(struct spi_mem*);
};

struct ethtool_cmd {
  __u32 cmd;
  __u32 supported;
  __u32 advertising;
  __u16 speed;
  __u8 duplex;
  __u8 port;
  __u8 phy_address;
  __u8 transceiver;
  __u8 autoneg;
  __u8 mdio_support;
  __u32 maxtxpkt;
  __u32 maxrxpkt;
  __u16 speed_hi;
  __u8 eth_tp_mdix;
  __u8 eth_tp_mdix_ctrl;
  __u32 lp_advertising;
  __u32 reserved[2];
};

struct mii_ioctl_data {
  __u16 phy_id;
  __u16 reg_num;
  __u16 val_in;
  __u16 val_out;
};

struct mdio_if_info {
  int prtad;
  u32 mmds;
  unsigned int mode_support;
  struct net_device* dev;
  int (*mdio_read)(struct net_device*, int, int, u16);
  int (*mdio_write)(struct net_device*, int, int, u16, u16);
};

struct devprobe2 {
  struct net_device* (*probe)(int);
  int status;
};

enum {
  NETIF_F_SG_BIT = 0,
  NETIF_F_IP_CSUM_BIT = 1,
  __UNUSED_NETIF_F_1 = 2,
  NETIF_F_HW_CSUM_BIT = 3,
  NETIF_F_IPV6_CSUM_BIT = 4,
  NETIF_F_HIGHDMA_BIT = 5,
  NETIF_F_FRAGLIST_BIT = 6,
  NETIF_F_HW_VLAN_CTAG_TX_BIT = 7,
  NETIF_F_HW_VLAN_CTAG_RX_BIT = 8,
  NETIF_F_HW_VLAN_CTAG_FILTER_BIT = 9,
  NETIF_F_VLAN_CHALLENGED_BIT = 10,
  NETIF_F_GSO_BIT = 11,
  NETIF_F_LLTX_BIT = 12,
  NETIF_F_NETNS_LOCAL_BIT = 13,
  NETIF_F_GRO_BIT = 14,
  NETIF_F_LRO_BIT = 15,
  NETIF_F_GSO_SHIFT = 16,
  NETIF_F_TSO_BIT = 16,
  NETIF_F_GSO_ROBUST_BIT = 17,
  NETIF_F_TSO_ECN_BIT = 18,
  NETIF_F_TSO_MANGLEID_BIT = 19,
  NETIF_F_TSO6_BIT = 20,
  NETIF_F_FSO_BIT = 21,
  NETIF_F_GSO_GRE_BIT = 22,
  NETIF_F_GSO_GRE_CSUM_BIT = 23,
  NETIF_F_GSO_IPXIP4_BIT = 24,
  NETIF_F_GSO_IPXIP6_BIT = 25,
  NETIF_F_GSO_UDP_TUNNEL_BIT = 26,
  NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT = 27,
  NETIF_F_GSO_PARTIAL_BIT = 28,
  NETIF_F_GSO_TUNNEL_REMCSUM_BIT = 29,
  NETIF_F_GSO_SCTP_BIT = 30,
  NETIF_F_GSO_ESP_BIT = 31,
  NETIF_F_GSO_UDP_BIT = 32,
  NETIF_F_GSO_UDP_L4_BIT = 33,
  NETIF_F_GSO_FRAGLIST_BIT = 34,
  NETIF_F_GSO_LAST = 34,
  NETIF_F_FCOE_CRC_BIT = 35,
  NETIF_F_SCTP_CRC_BIT = 36,
  NETIF_F_FCOE_MTU_BIT = 37,
  NETIF_F_NTUPLE_BIT = 38,
  NETIF_F_RXHASH_BIT = 39,
  NETIF_F_RXCSUM_BIT = 40,
  NETIF_F_NOCACHE_COPY_BIT = 41,
  NETIF_F_LOOPBACK_BIT = 42,
  NETIF_F_RXFCS_BIT = 43,
  NETIF_F_RXALL_BIT = 44,
  NETIF_F_HW_VLAN_STAG_TX_BIT = 45,
  NETIF_F_HW_VLAN_STAG_RX_BIT = 46,
  NETIF_F_HW_VLAN_STAG_FILTER_BIT = 47,
  NETIF_F_HW_L2FW_DOFFLOAD_BIT = 48,
  NETIF_F_HW_TC_BIT = 49,
  NETIF_F_HW_ESP_BIT = 50,
  NETIF_F_HW_ESP_TX_CSUM_BIT = 51,
  NETIF_F_RX_UDP_TUNNEL_PORT_BIT = 52,
  NETIF_F_HW_TLS_TX_BIT = 53,
  NETIF_F_HW_TLS_RX_BIT = 54,
  NETIF_F_GRO_HW_BIT = 55,
  NETIF_F_HW_TLS_RECORD_BIT = 56,
  NETIF_F_GRO_FRAGLIST_BIT = 57,
  NETIF_F_HW_MACSEC_BIT = 58,
  NETIF_F_GRO_UDP_FWD_BIT = 59,
  NETIF_F_HW_HSR_TAG_INS_BIT = 60,
  NETIF_F_HW_HSR_TAG_RM_BIT = 61,
  NETIF_F_HW_HSR_FWD_BIT = 62,
  NETIF_F_HW_HSR_DUP_BIT = 63,
  NETDEV_FEATURE_COUNT = 64,
};

typedef struct bio_vec skb_frag_t;

struct skb_shared_hwtstamps {
  ktime_t hwtstamp;
};

enum {
  SKBTX_HW_TSTAMP = 1,
  SKBTX_SW_TSTAMP = 2,
  SKBTX_IN_PROGRESS = 4,
  SKBTX_WIFI_STATUS = 16,
  SKBTX_SCHED_TSTAMP = 64,
};

struct skb_shared_info {
  __u8 flags;
  __u8 meta_len;
  __u8 nr_frags;
  __u8 tx_flags;
  short unsigned int gso_size;
  short unsigned int gso_segs;
  struct sk_buff* frag_list;
  struct skb_shared_hwtstamps hwtstamps;
  unsigned int gso_type;
  u32 tskey;
  atomic_t dataref;
  void* destructor_arg;
  skb_frag_t frags[17];
};

enum netdev_state_t {
  __LINK_STATE_START = 0,
  __LINK_STATE_PRESENT = 1,
  __LINK_STATE_NOCARRIER = 2,
  __LINK_STATE_LINKWATCH_PENDING = 3,
  __LINK_STATE_DORMANT = 4,
  __LINK_STATE_TESTING = 5,
};

struct netpoll;

struct netpoll_info {
  refcount_t refcnt;
  struct semaphore dev_lock;
  struct sk_buff_head txq;
  struct delayed_work tx_work;
  struct netpoll* netpoll;
  struct callback_head rcu;
};

union inet_addr {
  __u32 all[4];
  __be32 ip;
  __be32 ip6[4];
  struct in_addr in;
  struct in6_addr in6;
};

struct netpoll {
  struct net_device* dev;
  char dev_name[16];
  const char* name;
  union inet_addr local_ip;
  union inet_addr remote_ip;
  bool ipv6;
  u16 local_port;
  u16 remote_port;
  u8 remote_mac[6];
};

struct netconsole_target {
  struct list_head list;
  struct config_item item;
  bool enabled;
  bool extended;
  struct netpoll np;
};

struct mdio_board_info {
  const char* bus_id;
  char modalias[32];
  int mdio_addr;
  const void* platform_data;
};

struct mdio_board_entry {
  struct list_head list;
  struct mdio_board_info board_info;
};

struct mdiobus_devres {
  struct mii_bus* mii;
};

enum {
  ETHTOOL_MSG_KERNEL_NONE = 0,
  ETHTOOL_MSG_STRSET_GET_REPLY = 1,
  ETHTOOL_MSG_LINKINFO_GET_REPLY = 2,
  ETHTOOL_MSG_LINKINFO_NTF = 3,
  ETHTOOL_MSG_LINKMODES_GET_REPLY = 4,
  ETHTOOL_MSG_LINKMODES_NTF = 5,
  ETHTOOL_MSG_LINKSTATE_GET_REPLY = 6,
  ETHTOOL_MSG_DEBUG_GET_REPLY = 7,
  ETHTOOL_MSG_DEBUG_NTF = 8,
  ETHTOOL_MSG_WOL_GET_REPLY = 9,
  ETHTOOL_MSG_WOL_NTF = 10,
  ETHTOOL_MSG_FEATURES_GET_REPLY = 11,
  ETHTOOL_MSG_FEATURES_SET_REPLY = 12,
  ETHTOOL_MSG_FEATURES_NTF = 13,
  ETHTOOL_MSG_PRIVFLAGS_GET_REPLY = 14,
  ETHTOOL_MSG_PRIVFLAGS_NTF = 15,
  ETHTOOL_MSG_RINGS_GET_REPLY = 16,
  ETHTOOL_MSG_RINGS_NTF = 17,
  ETHTOOL_MSG_CHANNELS_GET_REPLY = 18,
  ETHTOOL_MSG_CHANNELS_NTF = 19,
  ETHTOOL_MSG_COALESCE_GET_REPLY = 20,
  ETHTOOL_MSG_COALESCE_NTF = 21,
  ETHTOOL_MSG_PAUSE_GET_REPLY = 22,
  ETHTOOL_MSG_PAUSE_NTF = 23,
  ETHTOOL_MSG_EEE_GET_REPLY = 24,
  ETHTOOL_MSG_EEE_NTF = 25,
  ETHTOOL_MSG_TSINFO_GET_REPLY = 26,
  ETHTOOL_MSG_CABLE_TEST_NTF = 27,
  ETHTOOL_MSG_CABLE_TEST_TDR_NTF = 28,
  ETHTOOL_MSG_TUNNEL_INFO_GET_REPLY = 29,
  ETHTOOL_MSG_FEC_GET_REPLY = 30,
  ETHTOOL_MSG_FEC_NTF = 31,
  ETHTOOL_MSG_MODULE_EEPROM_GET_REPLY = 32,
  ETHTOOL_MSG_STATS_GET_REPLY = 33,
  __ETHTOOL_MSG_KERNEL_CNT = 34,
  ETHTOOL_MSG_KERNEL_MAX = 33,
};

enum {
  ETHTOOL_A_STATS_UNSPEC = 0,
  ETHTOOL_A_STATS_PAD = 1,
  ETHTOOL_A_STATS_HEADER = 2,
  ETHTOOL_A_STATS_GROUPS = 3,
  ETHTOOL_A_STATS_GRP = 4,
  __ETHTOOL_A_STATS_CNT = 5,
  ETHTOOL_A_STATS_MAX = 4,
};

struct phy_setting {
  u32 speed;
  u8 duplex;
  u8 bit;
};

struct ethtool_phy_ops {
  int (*get_sset_count)(struct phy_device*);
  int (*get_strings)(struct phy_device*, u8*);
  int (*get_stats)(struct phy_device*, struct ethtool_stats*, u64*);
  int (*start_cable_test)(struct phy_device*, struct netlink_ext_ack*);
  int (*start_cable_test_tdr)(
      struct phy_device*,
      struct netlink_ext_ack*,
      const struct phy_tdr_config*);
};

struct phy_fixup {
  struct list_head list;
  char bus_id[64];
  u32 phy_uid;
  u32 phy_uid_mask;
  int (*run)(struct phy_device*);
};

struct sfp_eeprom_base {
  u8 phys_id;
  u8 phys_ext_id;
  u8 connector;
  u8 if_1x_copper_passive : 1;
  u8 if_1x_copper_active : 1;
  u8 if_1x_lx : 1;
  u8 if_1x_sx : 1;
  u8 e10g_base_sr : 1;
  u8 e10g_base_lr : 1;
  u8 e10g_base_lrm : 1;
  u8 e10g_base_er : 1;
  u8 sonet_oc3_short_reach : 1;
  u8 sonet_oc3_smf_intermediate_reach : 1;
  u8 sonet_oc3_smf_long_reach : 1;
  u8 unallocated_5_3 : 1;
  u8 sonet_oc12_short_reach : 1;
  u8 sonet_oc12_smf_intermediate_reach : 1;
  u8 sonet_oc12_smf_long_reach : 1;
  u8 unallocated_5_7 : 1;
  u8 sonet_oc48_short_reach : 1;
  u8 sonet_oc48_intermediate_reach : 1;
  u8 sonet_oc48_long_reach : 1;
  u8 sonet_reach_bit2 : 1;
  u8 sonet_reach_bit1 : 1;
  u8 sonet_oc192_short_reach : 1;
  u8 escon_smf_1310_laser : 1;
  u8 escon_mmf_1310_led : 1;
  u8 e1000_base_sx : 1;
  u8 e1000_base_lx : 1;
  u8 e1000_base_cx : 1;
  u8 e1000_base_t : 1;
  u8 e100_base_lx : 1;
  u8 e100_base_fx : 1;
  u8 e_base_bx10 : 1;
  u8 e_base_px : 1;
  u8 fc_tech_electrical_inter_enclosure : 1;
  u8 fc_tech_lc : 1;
  u8 fc_tech_sa : 1;
  u8 fc_ll_m : 1;
  u8 fc_ll_l : 1;
  u8 fc_ll_i : 1;
  u8 fc_ll_s : 1;
  u8 fc_ll_v : 1;
  u8 unallocated_8_0 : 1;
  u8 unallocated_8_1 : 1;
  u8 sfp_ct_passive : 1;
  u8 sfp_ct_active : 1;
  u8 fc_tech_ll : 1;
  u8 fc_tech_sl : 1;
  u8 fc_tech_sn : 1;
  u8 fc_tech_electrical_intra_enclosure : 1;
  u8 fc_media_sm : 1;
  u8 unallocated_9_1 : 1;
  u8 fc_media_m5 : 1;
  u8 fc_media_m6 : 1;
  u8 fc_media_tv : 1;
  u8 fc_media_mi : 1;
  u8 fc_media_tp : 1;
  u8 fc_media_tw : 1;
  u8 fc_speed_100 : 1;
  u8 unallocated_10_1 : 1;
  u8 fc_speed_200 : 1;
  u8 fc_speed_3200 : 1;
  u8 fc_speed_400 : 1;
  u8 fc_speed_1600 : 1;
  u8 fc_speed_800 : 1;
  u8 fc_speed_1200 : 1;
  u8 encoding;
  u8 br_nominal;
  u8 rate_id;
  u8 link_len[6];
  char vendor_name[16];
  u8 extended_cc;
  char vendor_oui[3];
  char vendor_pn[16];
  char vendor_rev[4];
  union {
    __be16 optical_wavelength;
    __be16 cable_compliance;
    struct {
      u8 sff8431_app_e : 1;
      u8 fc_pi_4_app_h : 1;
      u8 reserved60_2 : 6;
      u8 reserved61 : 8;
    } passive;
    struct {
      u8 sff8431_app_e : 1;
      u8 fc_pi_4_app_h : 1;
      u8 sff8431_lim : 1;
      u8 fc_pi_4_lim : 1;
      u8 reserved60_4 : 4;
      u8 reserved61 : 8;
    } active;
  };
  u8 reserved62;
  u8 cc_base;
};

struct sfp_eeprom_ext {
  __be16 options;
  u8 br_max;
  u8 br_min;
  char vendor_sn[16];
  char datecode[8];
  u8 diagmon;
  u8 enhopts;
  u8 sff8472_compliance;
  u8 cc_ext;
};

struct sfp_eeprom_id {
  struct sfp_eeprom_base base;
  struct sfp_eeprom_ext ext;
};

struct sfp_upstream_ops {
  void (*attach)(void*, struct sfp_bus*);
  void (*detach)(void*, struct sfp_bus*);
  int (*module_insert)(void*, const struct sfp_eeprom_id*);
  void (*module_remove)(void*);
  int (*module_start)(void*);
  void (*module_stop)(void*);
  void (*link_down)(void*);
  void (*link_up)(void*);
  int (*connect_phy)(void*, struct phy_device*);
  void (*disconnect_phy)(void*);
};

struct trace_event_raw_mdio_access {
  struct trace_entry ent;
  char busid[61];
  char read;
  u8 addr;
  u16 val;
  unsigned int regnum;
  char __data[0];
};

struct trace_event_data_offsets_mdio_access {};

typedef void (*btf_trace_mdio_access)(
    void*,
    struct mii_bus*,
    char,
    u8,
    unsigned int,
    u16,
    int);

struct mdio_bus_stat_attr {
  int addr;
  unsigned int field_offset;
};

struct mdio_driver {
  struct mdio_driver_common mdiodrv;
  int (*probe)(struct mdio_device*);
  void (*remove)(struct mdio_device*);
};

struct mdio_device_id {
  __u32 phy_id;
  __u32 phy_id_mask;
};

enum {
  MDIO_AN_C22 = 65504,
};

struct flow_dissector_key_control {
  u16 thoff;
  u16 addr_type;
  u32 flags;
};

struct flow_dissector_key_basic {
  __be16 n_proto;
  u8 ip_proto;
  u8 padding;
};

struct flow_dissector_key_tags {
  u32 flow_label;
};

struct flow_dissector_key_vlan {
  union {
    struct {
      u16 vlan_id : 12;
      u16 vlan_dei : 1;
      u16 vlan_priority : 3;
    };
    __be16 vlan_tci;
  };
  __be16 vlan_tpid;
};

struct flow_dissector_key_keyid {
  __be32 keyid;
};

struct flow_dissector_key_ipv4_addrs {
  __be32 src;
  __be32 dst;
};

struct flow_dissector_key_ipv6_addrs {
  struct in6_addr src;
  struct in6_addr dst;
};

struct flow_dissector_key_tipc {
  __be32 key;
};

struct flow_dissector_key_addrs {
  union {
    struct flow_dissector_key_ipv4_addrs v4addrs;
    struct flow_dissector_key_ipv6_addrs v6addrs;
    struct flow_dissector_key_tipc tipckey;
  };
};

struct flow_dissector_key_ports {
  union {
    __be32 ports;
    struct {
      __be16 src;
      __be16 dst;
    };
  };
};

struct flow_dissector_key_icmp {
  struct {
    u8 type;
    u8 code;
  };
  u16 id;
};

struct flow_keys {
  struct flow_dissector_key_control control;
  struct flow_dissector_key_basic basic;
  struct flow_dissector_key_tags tags;
  struct flow_dissector_key_vlan vlan;
  struct flow_dissector_key_vlan cvlan;
  struct flow_dissector_key_keyid keyid;
  struct flow_dissector_key_ports ports;
  struct flow_dissector_key_icmp icmp;
  struct flow_dissector_key_addrs addrs;
  int : 32;
};

struct rt6key {
  struct in6_addr addr;
  int plen;
};

struct rtable;

struct fnhe_hash_bucket;

struct fib_nh_common {
  struct net_device* nhc_dev;
  int nhc_oif;
  unsigned char nhc_scope;
  u8 nhc_family;
  u8 nhc_gw_family;
  unsigned char nhc_flags;
  struct lwtunnel_state* nhc_lwtstate;
  union {
    __be32 ipv4;
    struct in6_addr ipv6;
  } nhc_gw;
  int nhc_weight;
  atomic_t nhc_upper_bound;
  struct rtable** nhc_pcpu_rth_output;
  struct rtable* nhc_rth_input;
  struct fnhe_hash_bucket* nhc_exceptions;
};

struct rt6_exception_bucket;

struct fib6_nh {
  struct fib_nh_common nh_common;
  long unsigned int last_probe;
  struct rt6_info** rt6i_pcpu;
  struct rt6_exception_bucket* rt6i_exception_bucket;
};

struct fib6_node;

struct nexthop;

struct fib6_info {
  struct fib6_table* fib6_table;
  struct fib6_info* fib6_next;
  struct fib6_node* fib6_node;
  union {
    struct list_head fib6_siblings;
    struct list_head nh_list;
  };
  unsigned int fib6_nsiblings;
  refcount_t fib6_ref;
  long unsigned int expires;
  struct dst_metrics* fib6_metrics;
  struct rt6key fib6_dst;
  u32 fib6_flags;
  struct rt6key fib6_src;
  struct rt6key fib6_prefsrc;
  u32 fib6_metric;
  u8 fib6_protocol;
  u8 fib6_type;
  u8 should_flush : 1;
  u8 dst_nocount : 1;
  u8 dst_nopolicy : 1;
  u8 fib6_destroying : 1;
  u8 offload : 1;
  u8 trap : 1;
  u8 offload_failed : 1;
  u8 unused : 1;
  struct callback_head rcu;
  struct nexthop* nh;
  struct fib6_nh fib6_nh[0];
};

struct uncached_list;

struct rt6_info {
  struct dst_entry dst;
  struct fib6_info* from;
  int sernum;
  struct rt6key rt6i_dst;
  struct rt6key rt6i_src;
  struct in6_addr rt6i_gateway;
  struct inet6_dev* rt6i_idev;
  u32 rt6i_flags;
  struct list_head rt6i_uncached;
  struct uncached_list* rt6i_uncached_list;
  short unsigned int rt6i_nfheader_len;
};

struct rt6_statistics {
  __u32 fib_nodes;
  __u32 fib_route_nodes;
  __u32 fib_rt_entries;
  __u32 fib_rt_cache;
  __u32 fib_discarded_routes;
  atomic_t fib_rt_alloc;
  atomic_t fib_rt_uncache;
};

struct fib6_node {
  struct fib6_node* parent;
  struct fib6_node* left;
  struct fib6_node* right;
  struct fib6_node* subtree;
  struct fib6_info* leaf;
  __u16 fn_bit;
  __u16 fn_flags;
  int fn_sernum;
  struct fib6_info* rr_ptr;
  struct callback_head rcu;
};

struct fib6_table {
  struct hlist_node tb6_hlist;
  u32 tb6_id;
  spinlock_t tb6_lock;
  struct fib6_node tb6_root;
  struct inet_peer_base tb6_peers;
  unsigned int flags;
  unsigned int fib_seq;
};

enum {
  SKB_GSO_TCPV4 = 1,
  SKB_GSO_DODGY = 2,
  SKB_GSO_TCP_ECN = 4,
  SKB_GSO_TCP_FIXEDID = 8,
  SKB_GSO_TCPV6 = 16,
  SKB_GSO_FCOE = 32,
  SKB_GSO_GRE = 64,
  SKB_GSO_GRE_CSUM = 128,
  SKB_GSO_IPXIP4 = 256,
  SKB_GSO_IPXIP6 = 512,
  SKB_GSO_UDP_TUNNEL = 1024,
  SKB_GSO_UDP_TUNNEL_CSUM = 2048,
  SKB_GSO_PARTIAL = 4096,
  SKB_GSO_TUNNEL_REMCSUM = 8192,
  SKB_GSO_SCTP = 16384,
  SKB_GSO_ESP = 32768,
  SKB_GSO_UDP = 65536,
  SKB_GSO_UDP_L4 = 131072,
  SKB_GSO_FRAGLIST = 262144,
};

enum pkt_hash_types {
  PKT_HASH_TYPE_NONE = 0,
  PKT_HASH_TYPE_L2 = 1,
  PKT_HASH_TYPE_L3 = 2,
  PKT_HASH_TYPE_L4 = 3,
};

enum {
  IFLA_UNSPEC = 0,
  IFLA_ADDRESS = 1,
  IFLA_BROADCAST = 2,
  IFLA_IFNAME = 3,
  IFLA_MTU = 4,
  IFLA_LINK = 5,
  IFLA_QDISC = 6,
  IFLA_STATS = 7,
  IFLA_COST = 8,
  IFLA_PRIORITY = 9,
  IFLA_MASTER = 10,
  IFLA_WIRELESS = 11,
  IFLA_PROTINFO = 12,
  IFLA_TXQLEN = 13,
  IFLA_MAP = 14,
  IFLA_WEIGHT = 15,
  IFLA_OPERSTATE = 16,
  IFLA_LINKMODE = 17,
  IFLA_LINKINFO = 18,
  IFLA_NET_NS_PID = 19,
  IFLA_IFALIAS = 20,
  IFLA_NUM_VF = 21,
  IFLA_VFINFO_LIST = 22,
  IFLA_STATS64 = 23,
  IFLA_VF_PORTS = 24,
  IFLA_PORT_SELF = 25,
  IFLA_AF_SPEC = 26,
  IFLA_GROUP = 27,
  IFLA_NET_NS_FD = 28,
  IFLA_EXT_MASK = 29,
  IFLA_PROMISCUITY = 30,
  IFLA_NUM_TX_QUEUES = 31,
  IFLA_NUM_RX_QUEUES = 32,
  IFLA_CARRIER = 33,
  IFLA_PHYS_PORT_ID = 34,
  IFLA_CARRIER_CHANGES = 35,
  IFLA_PHYS_SWITCH_ID = 36,
  IFLA_LINK_NETNSID = 37,
  IFLA_PHYS_PORT_NAME = 38,
  IFLA_PROTO_DOWN = 39,
  IFLA_GSO_MAX_SEGS = 40,
  IFLA_GSO_MAX_SIZE = 41,
  IFLA_PAD = 42,
  IFLA_XDP = 43,
  IFLA_EVENT = 44,
  IFLA_NEW_NETNSID = 45,
  IFLA_IF_NETNSID = 46,
  IFLA_TARGET_NETNSID = 46,
  IFLA_CARRIER_UP_COUNT = 47,
  IFLA_CARRIER_DOWN_COUNT = 48,
  IFLA_NEW_IFINDEX = 49,
  IFLA_MIN_MTU = 50,
  IFLA_MAX_MTU = 51,
  IFLA_PROP_LIST = 52,
  IFLA_ALT_IFNAME = 53,
  IFLA_PERM_ADDRESS = 54,
  IFLA_PROTO_DOWN_REASON = 55,
  __IFLA_MAX = 56,
};

enum {
  TC_MQPRIO_HW_OFFLOAD_NONE = 0,
  TC_MQPRIO_HW_OFFLOAD_TCS = 1,
  __TC_MQPRIO_HW_OFFLOAD_MAX = 2,
};

struct tc_mqprio_qopt {
  __u8 num_tc;
  __u8 prio_tc_map[16];
  __u8 hw;
  __u16 count[16];
  __u16 offset[16];
};

struct netdev_hw_addr {
  struct list_head list;
  unsigned char addr[32];
  unsigned char type;
  bool global_use;
  int sync_cnt;
  int refcount;
  int synced;
  struct callback_head callback_head;
};

enum netdev_queue_state_t {
  __QUEUE_STATE_DRV_XOFF = 0,
  __QUEUE_STATE_STACK_XOFF = 1,
  __QUEUE_STATE_FROZEN = 2,
};

enum devlink_port_type {
  DEVLINK_PORT_TYPE_NOTSET = 0,
  DEVLINK_PORT_TYPE_AUTO = 1,
  DEVLINK_PORT_TYPE_ETH = 2,
  DEVLINK_PORT_TYPE_IB = 3,
};

enum devlink_port_flavour {
  DEVLINK_PORT_FLAVOUR_PHYSICAL = 0,
  DEVLINK_PORT_FLAVOUR_CPU = 1,
  DEVLINK_PORT_FLAVOUR_DSA = 2,
  DEVLINK_PORT_FLAVOUR_PCI_PF = 3,
  DEVLINK_PORT_FLAVOUR_PCI_VF = 4,
  DEVLINK_PORT_FLAVOUR_VIRTUAL = 5,
  DEVLINK_PORT_FLAVOUR_UNUSED = 6,
  DEVLINK_PORT_FLAVOUR_PCI_SF = 7,
};

struct devlink_port_phys_attrs {
  u32 port_number;
  u32 split_subport_number;
};

struct devlink_port_pci_pf_attrs {
  u32 controller;
  u16 pf;
  u8 external : 1;
};

struct devlink_port_pci_vf_attrs {
  u32 controller;
  u16 pf;
  u16 vf;
  u8 external : 1;
};

struct devlink_port_pci_sf_attrs {
  u32 controller;
  u32 sf;
  u16 pf;
};

struct devlink_port_attrs {
  u8 split : 1;
  u8 splittable : 1;
  u32 lanes;
  enum devlink_port_flavour flavour;
  struct netdev_phys_item_id switch_id;
  union {
    struct devlink_port_phys_attrs phys;
    struct devlink_port_pci_pf_attrs pci_pf;
    struct devlink_port_pci_vf_attrs pci_vf;
    struct devlink_port_pci_sf_attrs pci_sf;
  };
};

struct devlink;

struct devlink_port {
  struct list_head list;
  struct list_head param_list;
  struct list_head region_list;
  struct devlink* devlink;
  unsigned int index;
  bool registered;
  spinlock_t type_lock;
  enum devlink_port_type type;
  enum devlink_port_type desired_type;
  void* type_dev;
  struct devlink_port_attrs attrs;
  u8 attrs_set : 1;
  u8 switch_port : 1;
  struct delayed_work type_warn_dw;
  struct list_head reporter_list;
  struct mutex reporters_lock;
};

struct ip_tunnel_parm {
  char name[16];
  int link;
  __be16 i_flags;
  __be16 o_flags;
  __be32 i_key;
  __be32 o_key;
  struct iphdr iph;
};

struct napi_gro_cb {
  void* frag0;
  unsigned int frag0_len;
  int data_offset;
  u16 flush;
  u16 flush_id;
  u16 count;
  u16 gro_remcsum_start;
  long unsigned int age;
  u16 proto;
  u8 same_flow : 1;
  u8 encap_mark : 1;
  u8 csum_valid : 1;
  u8 csum_cnt : 3;
  u8 free : 2;
  u8 is_ipv6 : 1;
  u8 is_fou : 1;
  u8 is_atomic : 1;
  u8 recursion_counter : 4;
  u8 is_flist : 1;
  __wsum csum;
  struct sk_buff* last;
};

enum skb_free_reason {
  SKB_REASON_CONSUMED = 0,
  SKB_REASON_DROPPED = 1,
};

struct flow_match {
  struct flow_dissector* dissector;
  void* mask;
  void* key;
};

enum flow_action_id {
  FLOW_ACTION_ACCEPT = 0,
  FLOW_ACTION_DROP = 1,
  FLOW_ACTION_TRAP = 2,
  FLOW_ACTION_GOTO = 3,
  FLOW_ACTION_REDIRECT = 4,
  FLOW_ACTION_MIRRED = 5,
  FLOW_ACTION_REDIRECT_INGRESS = 6,
  FLOW_ACTION_MIRRED_INGRESS = 7,
  FLOW_ACTION_VLAN_PUSH = 8,
  FLOW_ACTION_VLAN_POP = 9,
  FLOW_ACTION_VLAN_MANGLE = 10,
  FLOW_ACTION_TUNNEL_ENCAP = 11,
  FLOW_ACTION_TUNNEL_DECAP = 12,
  FLOW_ACTION_MANGLE = 13,
  FLOW_ACTION_ADD = 14,
  FLOW_ACTION_CSUM = 15,
  FLOW_ACTION_MARK = 16,
  FLOW_ACTION_PTYPE = 17,
  FLOW_ACTION_PRIORITY = 18,
  FLOW_ACTION_WAKE = 19,
  FLOW_ACTION_QUEUE = 20,
  FLOW_ACTION_SAMPLE = 21,
  FLOW_ACTION_POLICE = 22,
  FLOW_ACTION_CT = 23,
  FLOW_ACTION_CT_METADATA = 24,
  FLOW_ACTION_MPLS_PUSH = 25,
  FLOW_ACTION_MPLS_POP = 26,
  FLOW_ACTION_MPLS_MANGLE = 27,
  FLOW_ACTION_GATE = 28,
  NUM_FLOW_ACTIONS = 29,
};

enum flow_action_hw_stats {
  FLOW_ACTION_HW_STATS_IMMEDIATE = 1,
  FLOW_ACTION_HW_STATS_DELAYED = 2,
  FLOW_ACTION_HW_STATS_ANY = 3,
  FLOW_ACTION_HW_STATS_DISABLED = 4,
  FLOW_ACTION_HW_STATS_DONT_CARE = 7,
};

typedef void (*action_destr)(void*);

enum flow_action_mangle_base {
  FLOW_ACT_MANGLE_UNSPEC = 0,
  FLOW_ACT_MANGLE_HDR_TYPE_ETH = 1,
  FLOW_ACT_MANGLE_HDR_TYPE_IP4 = 2,
  FLOW_ACT_MANGLE_HDR_TYPE_IP6 = 3,
  FLOW_ACT_MANGLE_HDR_TYPE_TCP = 4,
  FLOW_ACT_MANGLE_HDR_TYPE_UDP = 5,
};

struct nf_flowtable;

struct ip_tunnel_info;

struct psample_group;

struct action_gate_entry;

struct flow_action_cookie;

struct flow_action_entry {
  enum flow_action_id id;
  enum flow_action_hw_stats hw_stats;
  action_destr destructor;
  void* destructor_priv;
  union {
    u32 chain_index;
    struct net_device* dev;
    struct {
      u16 vid;
      __be16 proto;
      u8 prio;
    } vlan;
    struct {
      enum flow_action_mangle_base htype;
      u32 offset;
      u32 mask;
      u32 val;
    } mangle;
    struct ip_tunnel_info* tunnel;
    u32 csum_flags;
    u32 mark;
    u16 ptype;
    u32 priority;
    struct {
      u32 ctx;
      u32 index;
      u8 vf;
    } queue;
    struct {
      struct psample_group* psample_group;
      u32 rate;
      u32 trunc_size;
      bool truncate;
    } sample;
    struct {
      u32 index;
      u32 burst;
      u64 rate_bytes_ps;
      u32 mtu;
    } police;
    struct {
      int action;
      u16 zone;
      struct nf_flowtable* flow_table;
    } ct;
    struct {
      long unsigned int cookie;
      u32 mark;
      u32 labels[4];
      bool orig_dir;
    } ct_metadata;
    struct {
      u32 label;
      __be16 proto;
      u8 tc;
      u8 bos;
      u8 ttl;
    } mpls_push;
    struct {
      __be16 proto;
    } mpls_pop;
    struct {
      u32 label;
      u8 tc;
      u8 bos;
      u8 ttl;
    } mpls_mangle;
    struct {
      u32 index;
      s32 prio;
      u64 basetime;
      u64 cycletime;
      u64 cycletimeext;
      u32 num_entries;
      struct action_gate_entry* entries;
    } gate;
  };
  struct flow_action_cookie* cookie;
};

struct flow_action {
  unsigned int num_entries;
  struct flow_action_entry entries[0];
};

struct flow_rule {
  struct flow_match match;
  struct flow_action action;
};

struct vlan_hdr {
  __be16 h_vlan_TCI;
  __be16 h_vlan_encapsulated_proto;
};

struct vlan_ethhdr {
  unsigned char h_dest[6];
  unsigned char h_source[6];
  __be16 h_vlan_proto;
  __be16 h_vlan_TCI;
  __be16 h_vlan_encapsulated_proto;
};

enum {
  IFLA_BRIDGE_FLAGS = 0,
  IFLA_BRIDGE_MODE = 1,
  IFLA_BRIDGE_VLAN_INFO = 2,
  IFLA_BRIDGE_VLAN_TUNNEL_INFO = 3,
  IFLA_BRIDGE_MRP = 4,
  IFLA_BRIDGE_CFM = 5,
  __IFLA_BRIDGE_MAX = 6,
};

enum {
  BR_MCAST_DIR_RX = 0,
  BR_MCAST_DIR_TX = 1,
  BR_MCAST_DIR_SIZE = 2,
};

struct flow_action_cookie {
  u32 cookie_len;
  u8 cookie[0];
};

struct ip_tunnel_key {
  __be64 tun_id;
  union {
    struct {
      __be32 src;
      __be32 dst;
    } ipv4;
    struct {
      struct in6_addr src;
      struct in6_addr dst;
    } ipv6;
  } u;
  __be16 tun_flags;
  u8 tos;
  u8 ttl;
  __be32 label;
  __be16 tp_src;
  __be16 tp_dst;
};

struct dst_cache_pcpu;

struct dst_cache {
  struct dst_cache_pcpu* cache;
  long unsigned int reset_ts;
};

struct ip_tunnel_info {
  struct ip_tunnel_key key;
  struct dst_cache dst_cache;
  u8 options_len;
  u8 mode;
};

struct flow_stats {
  u64 pkts;
  u64 bytes;
  u64 drops;
  u64 lastused;
  enum flow_action_hw_stats used_hw_stats;
  bool used_hw_stats_valid;
};

enum flow_cls_command {
  FLOW_CLS_REPLACE = 0,
  FLOW_CLS_DESTROY = 1,
  FLOW_CLS_STATS = 2,
  FLOW_CLS_TMPLT_CREATE = 3,
  FLOW_CLS_TMPLT_DESTROY = 4,
};

struct flow_cls_common_offload {
  u32 chain_index;
  __be16 protocol;
  u32 prio;
  struct netlink_ext_ack* extack;
};

struct flow_cls_offload {
  struct flow_cls_common_offload common;
  enum flow_cls_command command;
  long unsigned int cookie;
  struct flow_rule* rule;
  struct flow_stats stats;
  u32 classid;
};

struct qdisc_walker {
  int stop;
  int skip;
  int count;
  int (*fn)(struct Qdisc*, long unsigned int, struct qdisc_walker*);
};

struct tcf_walker {
  int stop;
  int skip;
  int count;
  bool nonempty;
  long unsigned int cookie;
  int (*fn)(struct tcf_proto*, void*, struct tcf_walker*);
};

struct udp_hslot;

struct udp_table {
  struct udp_hslot* hash;
  struct udp_hslot* hash2;
  unsigned int mask;
  unsigned int log;
};

struct fib6_config {
  u32 fc_table;
  u32 fc_metric;
  int fc_dst_len;
  int fc_src_len;
  int fc_ifindex;
  u32 fc_flags;
  u32 fc_protocol;
  u16 fc_type;
  u16 fc_delete_all_nh : 1;
  u16 fc_ignore_dev_down : 1;
  u16 __unused : 14;
  u32 fc_nh_id;
  struct in6_addr fc_dst;
  struct in6_addr fc_src;
  struct in6_addr fc_prefsrc;
  struct in6_addr fc_gateway;
  long unsigned int fc_expires;
  struct nlattr* fc_mx;
  int fc_mx_len;
  int fc_mp_len;
  struct nlattr* fc_mp;
  struct nl_info fc_nlinfo;
  struct nlattr* fc_encap;
  u16 fc_encap_type;
  bool fc_is_fdb;
};

struct fib_nh_exception {
  struct fib_nh_exception* fnhe_next;
  int fnhe_genid;
  __be32 fnhe_daddr;
  u32 fnhe_pmtu;
  bool fnhe_mtu_locked;
  __be32 fnhe_gw;
  long unsigned int fnhe_expires;
  struct rtable* fnhe_rth_input;
  struct rtable* fnhe_rth_output;
  long unsigned int fnhe_stamp;
  struct callback_head rcu;
};

struct rtable {
  struct dst_entry dst;
  int rt_genid;
  unsigned int rt_flags;
  __u16 rt_type;
  __u8 rt_is_input;
  __u8 rt_uses_gateway;
  int rt_iif;
  u8 rt_gw_family;
  union {
    __be32 rt_gw4;
    struct in6_addr rt_gw6;
  };
  u32 rt_mtu_locked : 1;
  u32 rt_pmtu : 31;
  struct list_head rt_uncached;
  struct uncached_list* rt_uncached_list;
};

struct fnhe_hash_bucket {
  struct fib_nh_exception* chain;
};

struct fib_info;

struct fib_nh {
  struct fib_nh_common nh_common;
  struct hlist_node nh_hash;
  struct fib_info* nh_parent;
  __u32 nh_tclassid;
  __be32 nh_saddr;
  int nh_saddr_genid;
};

struct fib_info {
  struct hlist_node fib_hash;
  struct hlist_node fib_lhash;
  struct list_head nh_list;
  struct net* fib_net;
  int fib_treeref;
  refcount_t fib_clntref;
  unsigned int fib_flags;
  unsigned char fib_dead;
  unsigned char fib_protocol;
  unsigned char fib_scope;
  unsigned char fib_type;
  __be32 fib_prefsrc;
  u32 fib_tb_id;
  u32 fib_priority;
  struct dst_metrics* fib_metrics;
  int fib_nhs;
  bool fib_nh_is_v6;
  bool nh_updated;
  struct nexthop* nh;
  struct callback_head rcu;
  struct fib_nh fib_nh[0];
};

struct nh_info;

struct nh_group;

struct nexthop {
  struct rb_node rb_node;
  struct list_head fi_list;
  struct list_head f6i_list;
  struct list_head fdb_list;
  struct list_head grp_list;
  struct net* net;
  u32 id;
  u8 protocol;
  u8 nh_flags;
  bool is_group;
  refcount_t refcnt;
  struct callback_head rcu;
  union {
    struct nh_info* nh_info;
    struct nh_group* nh_grp;
  };
};

struct udp_hslot {
  struct hlist_head head;
  int count;
  spinlock_t lock;
};

struct rt6_exception_bucket {
  struct hlist_head chain;
  int depth;
};

struct nh_info {
  struct hlist_node dev_hash;
  struct nexthop* nh_parent;
  u8 family;
  bool reject_nh;
  bool fdb_nh;
  union {
    struct fib_nh_common fib_nhc;
    struct fib_nh fib_nh;
    struct fib6_nh fib6_nh;
  };
};

struct nh_grp_entry {
  struct nexthop* nh;
  u8 weight;
  union {
    struct {
      atomic_t upper_bound;
    } mpath;
  };
  struct list_head nh_list;
  struct nexthop* nh_parent;
};

struct nh_group {
  struct nh_group* spare;
  u16 num_nh;
  bool mpath;
  bool fdb_nh;
  bool has_v4;
  struct nh_grp_entry nh_entries[0];
};

struct ip_tunnel_encap {
  u16 type;
  u16 flags;
  __be16 sport;
  __be16 dport;
};

struct ip_tunnel_encap_ops {
  size_t (*encap_hlen)(struct ip_tunnel_encap*);
  int (*build_header)(
      struct sk_buff*,
      struct ip_tunnel_encap*,
      u8*,
      struct flowi4*);
  int (*err_handler)(struct sk_buff*, u32);
};

enum udp_parsable_tunnel_type {
  UDP_TUNNEL_TYPE_VXLAN = 1,
  UDP_TUNNEL_TYPE_GENEVE = 2,
  UDP_TUNNEL_TYPE_VXLAN_GPE = 4,
};

struct udp_tunnel_info {
  short unsigned int type;
  sa_family_t sa_family;
  __be16 port;
  u8 hw_priv;
};

enum udp_tunnel_nic_info_flags {
  UDP_TUNNEL_NIC_INFO_MAY_SLEEP = 1,
  UDP_TUNNEL_NIC_INFO_OPEN_ONLY = 2,
  UDP_TUNNEL_NIC_INFO_IPV4_ONLY = 4,
  UDP_TUNNEL_NIC_INFO_STATIC_IANA_VXLAN = 8,
};

struct udp_tunnel_nic_shared {
  struct udp_tunnel_nic* udp_tunnel_nic_info;
  struct list_head devices;
};

struct udp_tunnel_nic_ops {
  void (*get_port)(
      struct net_device*,
      unsigned int,
      unsigned int,
      struct udp_tunnel_info*);
  void (*set_port_priv)(struct net_device*, unsigned int, unsigned int, u8);
  void (*add_port)(struct net_device*, struct udp_tunnel_info*);
  void (*del_port)(struct net_device*, struct udp_tunnel_info*);
  void (*reset_ntf)(struct net_device*);
  size_t (*dump_size)(struct net_device*, unsigned int);
  int (*dump_write)(struct net_device*, unsigned int, struct sk_buff*);
};

struct ptp_clock_time {
  __s64 sec;
  __u32 nsec;
  __u32 reserved;
};

struct ptp_extts_request {
  unsigned int index;
  unsigned int flags;
  unsigned int rsv[2];
};

struct ptp_perout_request {
  union {
    struct ptp_clock_time start;
    struct ptp_clock_time phase;
  };
  struct ptp_clock_time period;
  unsigned int index;
  unsigned int flags;
  union {
    struct ptp_clock_time on;
    unsigned int rsv[4];
  };
};

enum ptp_pin_function {
  PTP_PF_NONE = 0,
  PTP_PF_EXTTS = 1,
  PTP_PF_PEROUT = 2,
  PTP_PF_PHYSYNC = 3,
};

struct ptp_pin_desc {
  char name[64];
  unsigned int index;
  unsigned int func;
  unsigned int chan;
  unsigned int rsv[5];
};

struct ptp_clock_request {
  enum {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2,
  } type;
  union {
    struct ptp_extts_request extts;
    struct ptp_perout_request perout;
  };
};

struct ptp_clock_info {
  struct module* owner;
  char name[16];
  s32 max_adj;
  int n_alarm;
  int n_ext_ts;
  int n_per_out;
  int n_pins;
  int pps;
  struct ptp_pin_desc* pin_config;
  int (*adjfine)(struct ptp_clock_info*, long int);
  int (*adjfreq)(struct ptp_clock_info*, s32);
  int (*adjphase)(struct ptp_clock_info*, s32);
  int (*adjtime)(struct ptp_clock_info*, s64);
  int (*gettime64)(struct ptp_clock_info*, struct timespec64*);
  int (*gettimex64)(
      struct ptp_clock_info*,
      struct timespec64*,
      struct ptp_system_timestamp*);
  int (*getcrosststamp)(
      struct ptp_clock_info*,
      struct system_device_crosststamp*);
  int (*settime64)(struct ptp_clock_info*, const struct timespec64*);
  int (*enable)(struct ptp_clock_info*, struct ptp_clock_request*, int);
  int (*verify)(
      struct ptp_clock_info*,
      unsigned int,
      enum ptp_pin_function,
      unsigned int);
  long int (*do_aux_work)(struct ptp_clock_info*);
};

struct sensor_device_attribute {
  struct device_attribute dev_attr;
  int index;
};

struct pp_alloc_cache {
  u32 count;
  void* cache[128];
};

struct page_pool_params {
  unsigned int flags;
  unsigned int order;
  unsigned int pool_size;
  int nid;
  struct device* dev;
  enum dma_data_direction dma_dir;
  unsigned int max_len;
  unsigned int offset;
};

struct page_pool {
  struct page_pool_params p;
  struct delayed_work release_dw;
  void (*disconnect)(void*);
  long unsigned int defer_start;
  long unsigned int defer_warn;
  u32 pages_state_hold_cnt;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct pp_alloc_cache alloc;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct ptr_ring ring;
  atomic_t pages_state_release_cnt;
  refcount_t user_cnt;
  u64 destroy_cnt;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct hwrm_ver_get_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 hwrm_intf_maj;
  u8 hwrm_intf_min;
  u8 hwrm_intf_upd;
  u8 unused_0[5];
};

struct hwrm_ver_get_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 hwrm_intf_maj_8b;
  u8 hwrm_intf_min_8b;
  u8 hwrm_intf_upd_8b;
  u8 hwrm_intf_rsvd_8b;
  u8 hwrm_fw_maj_8b;
  u8 hwrm_fw_min_8b;
  u8 hwrm_fw_bld_8b;
  u8 hwrm_fw_rsvd_8b;
  u8 mgmt_fw_maj_8b;
  u8 mgmt_fw_min_8b;
  u8 mgmt_fw_bld_8b;
  u8 mgmt_fw_rsvd_8b;
  u8 netctrl_fw_maj_8b;
  u8 netctrl_fw_min_8b;
  u8 netctrl_fw_bld_8b;
  u8 netctrl_fw_rsvd_8b;
  __le32 dev_caps_cfg;
  u8 roce_fw_maj_8b;
  u8 roce_fw_min_8b;
  u8 roce_fw_bld_8b;
  u8 roce_fw_rsvd_8b;
  char hwrm_fw_name[16];
  char mgmt_fw_name[16];
  char netctrl_fw_name[16];
  char active_pkg_name[16];
  char roce_fw_name[16];
  __le16 chip_num;
  u8 chip_rev;
  u8 chip_metal;
  u8 chip_bond_id;
  u8 chip_platform_type;
  __le16 max_req_win_len;
  __le16 max_resp_len;
  __le16 def_req_timeout;
  u8 flags;
  u8 unused_0[2];
  u8 always_1;
  __le16 hwrm_intf_major;
  __le16 hwrm_intf_minor;
  __le16 hwrm_intf_build;
  __le16 hwrm_intf_patch;
  __le16 hwrm_fw_major;
  __le16 hwrm_fw_minor;
  __le16 hwrm_fw_build;
  __le16 hwrm_fw_patch;
  __le16 mgmt_fw_major;
  __le16 mgmt_fw_minor;
  __le16 mgmt_fw_build;
  __le16 mgmt_fw_patch;
  __le16 netctrl_fw_major;
  __le16 netctrl_fw_minor;
  __le16 netctrl_fw_build;
  __le16 netctrl_fw_patch;
  __le16 roce_fw_major;
  __le16 roce_fw_minor;
  __le16 roce_fw_build;
  __le16 roce_fw_patch;
  __le16 max_ext_req_len;
  __le16 max_req_timeout;
  u8 unused_1[3];
  u8 valid;
};

struct hwrm_cmpl {
  __le16 type;
  __le16 sequence_id;
  __le32 unused_1;
  __le32 v;
  __le32 unused_3;
};

struct hwrm_fwd_req_cmpl {
  __le16 req_len_type;
  __le16 source_id;
  __le32 unused0;
  __le32 req_buf_addr_v[2];
};

struct hwrm_async_event_cmpl {
  __le16 type;
  __le16 event_id;
  __le32 event_data2;
  u8 opaque_v;
  u8 timestamp_lo;
  __le16 timestamp_hi;
  __le32 event_data1;
};

struct hwrm_func_reset_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  __le16 vf_id;
  u8 func_reset_level;
  u8 unused_0;
};

struct hwrm_func_vf_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  __le16 mtu;
  __le16 guest_vlan;
  __le16 async_event_cr;
  u8 dflt_mac_addr[6];
  __le32 flags;
  __le16 num_rsscos_ctxs;
  __le16 num_cmpl_rings;
  __le16 num_tx_rings;
  __le16 num_rx_rings;
  __le16 num_l2_ctxs;
  __le16 num_vnics;
  __le16 num_stat_ctxs;
  __le16 num_hw_ring_grps;
  __le16 num_tx_key_ctxs;
  __le16 num_rx_key_ctxs;
};

struct hwrm_func_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 fid;
  u8 unused_0[6];
};

struct hwrm_func_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 fid;
  __le16 port_id;
  __le32 flags;
  u8 mac_address[6];
  __le16 max_rsscos_ctx;
  __le16 max_cmpl_rings;
  __le16 max_tx_rings;
  __le16 max_rx_rings;
  __le16 max_l2_ctxs;
  __le16 max_vnics;
  __le16 first_vf_id;
  __le16 max_vfs;
  __le16 max_stat_ctx;
  __le32 max_encap_records;
  __le32 max_decap_records;
  __le32 max_tx_em_flows;
  __le32 max_tx_wm_flows;
  __le32 max_rx_em_flows;
  __le32 max_rx_wm_flows;
  __le32 max_mcast_filters;
  __le32 max_flow_id;
  __le32 max_hw_ring_grps;
  __le16 max_sp_tx_rings;
  __le16 max_msix_vfs;
  __le32 flags_ext;
  u8 max_schqs;
  u8 mpc_chnls_cap;
  __le16 max_key_ctxs_alloc;
  u8 unused_1[7];
  u8 valid;
};

struct hwrm_func_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 fid;
  u8 unused_0[6];
};

struct hwrm_func_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 fid;
  __le16 port_id;
  __le16 vlan;
  __le16 flags;
  u8 mac_address[6];
  __le16 pci_id;
  __le16 alloc_rsscos_ctx;
  __le16 alloc_cmpl_rings;
  __le16 alloc_tx_rings;
  __le16 alloc_rx_rings;
  __le16 alloc_l2_ctx;
  __le16 alloc_vnics;
  __le16 admin_mtu;
  __le16 mru;
  __le16 stat_ctx_id;
  u8 port_partition_type;
  u8 port_pf_cnt;
  __le16 dflt_vnic_id;
  __le16 max_mtu_configured;
  __le32 min_bw;
  __le32 max_bw;
  u8 evb_mode;
  u8 options;
  __le16 alloc_vfs;
  __le32 alloc_mcast_filters;
  __le32 alloc_hw_ring_grps;
  __le16 alloc_sp_tx_rings;
  __le16 alloc_stat_ctx;
  __le16 alloc_msix;
  __le16 registered_vfs;
  __le16 l2_doorbell_bar_size_kb;
  u8 unused_1;
  u8 always_1;
  __le32 reset_addr_poll;
  __le16 legacy_l2_db_size_kb;
  __le16 svif_info;
  u8 mpc_chnls;
  u8 unused_2[3];
  __le32 partition_min_bw;
  __le32 partition_max_bw;
  __le16 host_mtu;
  __le16 alloc_tx_key_ctxs;
  __le16 alloc_rx_key_ctxs;
  u8 unused_3[5];
  u8 valid;
};

struct hwrm_func_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 fid;
  __le16 num_msix;
  __le32 flags;
  __le32 enables;
  __le16 admin_mtu;
  __le16 mru;
  __le16 num_rsscos_ctxs;
  __le16 num_cmpl_rings;
  __le16 num_tx_rings;
  __le16 num_rx_rings;
  __le16 num_l2_ctxs;
  __le16 num_vnics;
  __le16 num_stat_ctxs;
  __le16 num_hw_ring_grps;
  u8 dflt_mac_addr[6];
  __le16 dflt_vlan;
  __be32 dflt_ip_addr[4];
  __le32 min_bw;
  __le32 max_bw;
  __le16 async_event_cr;
  u8 vlan_antispoof_mode;
  u8 allowed_vlan_pris;
  u8 evb_mode;
  u8 options;
  __le16 num_mcast_filters;
  __le16 schq_id;
  __le16 mpc_chnls;
  __le32 partition_min_bw;
  __le32 partition_max_bw;
  __be16 tpid;
  __le16 host_mtu;
  __le16 num_tx_key_ctxs;
  __le16 num_rx_key_ctxs;
  u8 unused_0[4];
};

struct hwrm_func_qstats_ext_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 fid;
  u8 flags;
  u8 unused_0[1];
  __le32 enables;
  __le16 schq_id;
  __le16 traffic_class;
  u8 unused_1[4];
};

struct hwrm_func_qstats_ext_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le64 rx_ucast_pkts;
  __le64 rx_mcast_pkts;
  __le64 rx_bcast_pkts;
  __le64 rx_discard_pkts;
  __le64 rx_error_pkts;
  __le64 rx_ucast_bytes;
  __le64 rx_mcast_bytes;
  __le64 rx_bcast_bytes;
  __le64 tx_ucast_pkts;
  __le64 tx_mcast_pkts;
  __le64 tx_bcast_pkts;
  __le64 tx_error_pkts;
  __le64 tx_discard_pkts;
  __le64 tx_ucast_bytes;
  __le64 tx_mcast_bytes;
  __le64 tx_bcast_bytes;
  __le64 rx_tpa_eligible_pkt;
  __le64 rx_tpa_eligible_bytes;
  __le64 rx_tpa_pkt;
  __le64 rx_tpa_bytes;
  __le64 rx_tpa_errors;
  __le64 rx_tpa_events;
  u8 unused_0[7];
  u8 valid;
};

struct hwrm_func_drv_rgtr_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 os_type;
  u8 ver_maj_8b;
  u8 ver_min_8b;
  u8 ver_upd_8b;
  u8 unused_0[3];
  __le32 timestamp;
  u8 unused_1[4];
  __le32 vf_req_fwd[8];
  __le32 async_event_fwd[8];
  __le16 ver_maj;
  __le16 ver_min;
  __le16 ver_upd;
  __le16 ver_patch;
};

struct hwrm_func_drv_rgtr_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 flags;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_func_drv_unrgtr_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  u8 unused_0[4];
};

struct hwrm_func_resource_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 fid;
  u8 unused_0[6];
};

struct hwrm_func_resource_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 max_vfs;
  __le16 max_msix;
  __le16 vf_reservation_strategy;
  __le16 min_rsscos_ctx;
  __le16 max_rsscos_ctx;
  __le16 min_cmpl_rings;
  __le16 max_cmpl_rings;
  __le16 min_tx_rings;
  __le16 max_tx_rings;
  __le16 min_rx_rings;
  __le16 max_rx_rings;
  __le16 min_l2_ctxs;
  __le16 max_l2_ctxs;
  __le16 min_vnics;
  __le16 max_vnics;
  __le16 min_stat_ctx;
  __le16 max_stat_ctx;
  __le16 min_hw_ring_grps;
  __le16 max_hw_ring_grps;
  __le16 max_tx_scheduler_inputs;
  __le16 flags;
  __le16 min_tx_key_ctxs;
  __le16 max_tx_key_ctxs;
  __le16 min_rx_key_ctxs;
  __le16 max_rx_key_ctxs;
  u8 unused_0[5];
  u8 valid;
};

struct hwrm_func_backing_store_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_func_backing_store_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 qp_max_entries;
  __le16 qp_min_qp1_entries;
  __le16 qp_max_l2_entries;
  __le16 qp_entry_size;
  __le16 srq_max_l2_entries;
  __le32 srq_max_entries;
  __le16 srq_entry_size;
  __le16 cq_max_l2_entries;
  __le32 cq_max_entries;
  __le16 cq_entry_size;
  __le16 vnic_max_vnic_entries;
  __le16 vnic_max_ring_table_entries;
  __le16 vnic_entry_size;
  __le32 stat_max_entries;
  __le16 stat_entry_size;
  __le16 tqm_entry_size;
  __le32 tqm_min_entries_per_ring;
  __le32 tqm_max_entries_per_ring;
  __le32 mrav_max_entries;
  __le16 mrav_entry_size;
  __le16 tim_entry_size;
  __le32 tim_max_entries;
  __le16 mrav_num_entries_units;
  u8 tqm_entries_multiple;
  u8 ctx_kind_initializer;
  __le16 ctx_init_mask;
  u8 qp_init_offset;
  u8 srq_init_offset;
  u8 cq_init_offset;
  u8 vnic_init_offset;
  u8 tqm_fp_rings_count;
  u8 stat_init_offset;
  u8 mrav_init_offset;
  u8 tqm_fp_rings_count_ext;
  u8 tkc_init_offset;
  u8 rkc_init_offset;
  __le16 tkc_entry_size;
  __le16 rkc_entry_size;
  __le32 tkc_max_entries;
  __le32 rkc_max_entries;
  u8 rsvd[7];
  u8 valid;
};

struct hwrm_func_backing_store_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  u8 qpc_pg_size_qpc_lvl;
  u8 srq_pg_size_srq_lvl;
  u8 cq_pg_size_cq_lvl;
  u8 vnic_pg_size_vnic_lvl;
  u8 stat_pg_size_stat_lvl;
  u8 tqm_sp_pg_size_tqm_sp_lvl;
  u8 tqm_ring0_pg_size_tqm_ring0_lvl;
  u8 tqm_ring1_pg_size_tqm_ring1_lvl;
  u8 tqm_ring2_pg_size_tqm_ring2_lvl;
  u8 tqm_ring3_pg_size_tqm_ring3_lvl;
  u8 tqm_ring4_pg_size_tqm_ring4_lvl;
  u8 tqm_ring5_pg_size_tqm_ring5_lvl;
  u8 tqm_ring6_pg_size_tqm_ring6_lvl;
  u8 tqm_ring7_pg_size_tqm_ring7_lvl;
  u8 mrav_pg_size_mrav_lvl;
  u8 tim_pg_size_tim_lvl;
  __le64 qpc_page_dir;
  __le64 srq_page_dir;
  __le64 cq_page_dir;
  __le64 vnic_page_dir;
  __le64 stat_page_dir;
  __le64 tqm_sp_page_dir;
  __le64 tqm_ring0_page_dir;
  __le64 tqm_ring1_page_dir;
  __le64 tqm_ring2_page_dir;
  __le64 tqm_ring3_page_dir;
  __le64 tqm_ring4_page_dir;
  __le64 tqm_ring5_page_dir;
  __le64 tqm_ring6_page_dir;
  __le64 tqm_ring7_page_dir;
  __le64 mrav_page_dir;
  __le64 tim_page_dir;
  __le32 qp_num_entries;
  __le32 srq_num_entries;
  __le32 cq_num_entries;
  __le32 stat_num_entries;
  __le32 tqm_sp_num_entries;
  __le32 tqm_ring0_num_entries;
  __le32 tqm_ring1_num_entries;
  __le32 tqm_ring2_num_entries;
  __le32 tqm_ring3_num_entries;
  __le32 tqm_ring4_num_entries;
  __le32 tqm_ring5_num_entries;
  __le32 tqm_ring6_num_entries;
  __le32 tqm_ring7_num_entries;
  __le32 mrav_num_entries;
  __le32 tim_num_entries;
  __le16 qp_num_qp1_entries;
  __le16 qp_num_l2_entries;
  __le16 qp_entry_size;
  __le16 srq_num_l2_entries;
  __le16 srq_entry_size;
  __le16 cq_num_l2_entries;
  __le16 cq_entry_size;
  __le16 vnic_num_vnic_entries;
  __le16 vnic_num_ring_table_entries;
  __le16 vnic_entry_size;
  __le16 stat_entry_size;
  __le16 tqm_entry_size;
  __le16 mrav_entry_size;
  __le16 tim_entry_size;
  u8 tqm_ring8_pg_size_tqm_ring_lvl;
  u8 ring8_unused[3];
  __le32 tqm_ring8_num_entries;
  __le64 tqm_ring8_page_dir;
  u8 tqm_ring9_pg_size_tqm_ring_lvl;
  u8 ring9_unused[3];
  __le32 tqm_ring9_num_entries;
  __le64 tqm_ring9_page_dir;
  u8 tqm_ring10_pg_size_tqm_ring_lvl;
  u8 ring10_unused[3];
  __le32 tqm_ring10_num_entries;
  __le64 tqm_ring10_page_dir;
  __le32 tkc_num_entries;
  __le32 rkc_num_entries;
  __le64 tkc_page_dir;
  __le64 rkc_page_dir;
  __le16 tkc_entry_size;
  __le16 rkc_entry_size;
  u8 tkc_pg_size_tkc_lvl;
  u8 rkc_pg_size_rkc_lvl;
  u8 rsvd[2];
};

struct hwrm_error_recovery_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 unused_0[8];
};

struct hwrm_error_recovery_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 flags;
  __le32 driver_polling_freq;
  __le32 master_func_wait_period;
  __le32 normal_func_wait_period;
  __le32 master_func_wait_period_after_reset;
  __le32 max_bailout_time_after_reset;
  __le32 fw_health_status_reg;
  __le32 fw_heartbeat_reg;
  __le32 fw_reset_cnt_reg;
  __le32 reset_inprogress_reg;
  __le32 reset_inprogress_reg_mask;
  u8 unused_0[3];
  u8 reg_array_cnt;
  __le32 reset_reg[16];
  __le32 reset_reg_val[16];
  u8 delay_after_reset[16];
  __le32 err_recovery_cnt_reg;
  u8 unused_1[3];
  u8 valid;
};

struct hwrm_func_echo_response_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 event_data1;
  __le32 event_data2;
};

struct hwrm_func_drv_if_change_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 unused;
};

struct hwrm_func_drv_if_change_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 flags;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_port_phy_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 port_id;
  __le16 force_link_speed;
  u8 auto_mode;
  u8 auto_duplex;
  u8 auto_pause;
  u8 unused_0;
  __le16 auto_link_speed;
  __le16 auto_link_speed_mask;
  u8 wirespeed;
  u8 lpbk;
  u8 force_pause;
  u8 unused_1;
  __le32 preemphasis;
  __le16 eee_link_speed_mask;
  __le16 force_pam4_link_speed;
  __le32 tx_lpi_timer;
  __le16 auto_link_pam4_speed_mask;
  u8 unused_2[2];
};

struct hwrm_port_phy_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  u8 unused_0[6];
};

struct hwrm_port_phy_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 link;
  u8 active_fec_signal_mode;
  __le16 link_speed;
  u8 duplex_cfg;
  u8 pause;
  __le16 support_speeds;
  __le16 force_link_speed;
  u8 auto_mode;
  u8 auto_pause;
  __le16 auto_link_speed;
  __le16 auto_link_speed_mask;
  u8 wirespeed;
  u8 lpbk;
  u8 force_pause;
  u8 module_status;
  __le32 preemphasis;
  u8 phy_maj;
  u8 phy_min;
  u8 phy_bld;
  u8 phy_type;
  u8 media_type;
  u8 xcvr_pkg_type;
  u8 eee_config_phy_addr;
  u8 parallel_detect;
  __le16 link_partner_adv_speeds;
  u8 link_partner_adv_auto_mode;
  u8 link_partner_adv_pause;
  __le16 adv_eee_link_speed_mask;
  __le16 link_partner_adv_eee_link_speed_mask;
  __le32 xcvr_identifier_type_tx_lpi_timer;
  __le16 fec_cfg;
  u8 duplex_state;
  u8 option_flags;
  char phy_vendor_name[16];
  char phy_vendor_partnumber[16];
  __le16 support_pam4_speeds;
  __le16 force_pam4_link_speed;
  __le16 auto_pam4_link_speed_mask;
  u8 link_partner_pam4_adv_speeds;
  u8 valid;
};

struct hwrm_port_mac_ptp_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  u8 unused_0[6];
};

struct hwrm_port_mac_ptp_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 flags;
  u8 unused_0[3];
  __le32 rx_ts_reg_off_lower;
  __le32 rx_ts_reg_off_upper;
  __le32 rx_ts_reg_off_seq_id;
  __le32 rx_ts_reg_off_src_id_0;
  __le32 rx_ts_reg_off_src_id_1;
  __le32 rx_ts_reg_off_src_id_2;
  __le32 rx_ts_reg_off_domain_id;
  __le32 rx_ts_reg_off_fifo;
  __le32 rx_ts_reg_off_fifo_adv;
  __le32 rx_ts_reg_off_granularity;
  __le32 tx_ts_reg_off_lower;
  __le32 tx_ts_reg_off_upper;
  __le32 tx_ts_reg_off_seq_id;
  __le32 tx_ts_reg_off_fifo;
  __le32 tx_ts_reg_off_granularity;
  __le32 ts_ref_clock_reg_lower;
  __le32 ts_ref_clock_reg_upper;
  u8 unused_1[7];
  u8 valid;
};

struct hwrm_port_qstats_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  u8 flags;
  u8 unused_0[5];
  __le64 tx_stat_host_addr;
  __le64 rx_stat_host_addr;
};

struct hwrm_port_qstats_ext_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  __le16 tx_stat_size;
  __le16 rx_stat_size;
  u8 flags;
  u8 unused_0;
  __le64 tx_stat_host_addr;
  __le64 rx_stat_host_addr;
};

struct hwrm_port_qstats_ext_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 tx_stat_size;
  __le16 rx_stat_size;
  __le16 total_active_cos_queues;
  u8 flags;
  u8 valid;
};

struct hwrm_port_phy_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  u8 unused_0[6];
};

struct hwrm_port_phy_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 flags;
  u8 port_cnt;
  __le16 supported_speeds_force_mode;
  __le16 supported_speeds_auto_mode;
  __le16 supported_speeds_eee_mode;
  __le32 tx_lpi_timer_low;
  __le32 valid_tx_lpi_timer_high;
  __le16 supported_pam4_speeds_auto_mode;
  __le16 supported_pam4_speeds_force_mode;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_port_phy_mdio_write_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 unused_0[2];
  __le16 port_id;
  u8 phy_addr;
  u8 dev_addr;
  __le16 reg_addr;
  __le16 reg_data;
  u8 cl45_mdio;
  u8 unused_1[7];
};

struct hwrm_port_phy_mdio_read_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 unused_0[2];
  __le16 port_id;
  u8 phy_addr;
  u8 dev_addr;
  __le16 reg_addr;
  u8 cl45_mdio;
  u8 unused_1;
};

struct hwrm_port_phy_mdio_read_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 reg_data;
  u8 unused_0[5];
  u8 valid;
};

struct hwrm_port_led_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  u8 unused_0[6];
};

struct hwrm_port_led_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 num_leds;
  u8 unused[3];
  u8 led0_id;
  u8 led0_type;
  u8 led0_group_id;
  u8 unused_0;
  __le16 led0_state_caps;
  __le16 led0_color_caps;
  u8 led1_id;
  u8 led1_type;
  u8 led1_group_id;
  u8 unused_1;
  __le16 led1_state_caps;
  __le16 led1_color_caps;
  u8 led2_id;
  u8 led2_type;
  u8 led2_group_id;
  u8 unused_2;
  __le16 led2_state_caps;
  __le16 led2_color_caps;
  u8 led3_id;
  u8 led3_type;
  u8 led3_group_id;
  u8 unused_3;
  __le16 led3_state_caps;
  __le16 led3_color_caps;
  u8 unused_4[3];
  u8 valid;
};

struct hwrm_queue_qportcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le16 port_id;
  u8 drv_qmap_cap;
  u8 unused_0;
};

struct hwrm_queue_qportcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 max_configurable_queues;
  u8 max_configurable_lossless_queues;
  u8 queue_cfg_allowed;
  u8 queue_cfg_info;
  u8 queue_pfcenable_cfg_allowed;
  u8 queue_pri2cos_cfg_allowed;
  u8 queue_cos2bw_cfg_allowed;
  u8 queue_id0;
  u8 queue_id0_service_profile;
  u8 queue_id1;
  u8 queue_id1_service_profile;
  u8 queue_id2;
  u8 queue_id2_service_profile;
  u8 queue_id3;
  u8 queue_id3_service_profile;
  u8 queue_id4;
  u8 queue_id4_service_profile;
  u8 queue_id5;
  u8 queue_id5_service_profile;
  u8 queue_id6;
  u8 queue_id6_service_profile;
  u8 queue_id7;
  u8 queue_id7_service_profile;
  u8 queue_id0_service_profile_type;
  char qid0_name[16];
  char qid1_name[16];
  char qid2_name[16];
  char qid3_name[16];
  char qid4_name[16];
  char qid5_name[16];
  char qid6_name[16];
  char qid7_name[16];
  u8 queue_id1_service_profile_type;
  u8 queue_id2_service_profile_type;
  u8 queue_id3_service_profile_type;
  u8 queue_id4_service_profile_type;
  u8 queue_id5_service_profile_type;
  u8 queue_id6_service_profile_type;
  u8 queue_id7_service_profile_type;
  u8 valid;
};

struct hwrm_queue_pri2cos_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  u8 port_id;
  u8 unused_0[3];
};

struct hwrm_queue_pri2cos_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 pri0_cos_queue_id;
  u8 pri1_cos_queue_id;
  u8 pri2_cos_queue_id;
  u8 pri3_cos_queue_id;
  u8 pri4_cos_queue_id;
  u8 pri5_cos_queue_id;
  u8 pri6_cos_queue_id;
  u8 pri7_cos_queue_id;
  u8 queue_cfg_info;
  u8 unused_0[6];
  u8 valid;
};

struct hwrm_vnic_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le16 virtio_net_fid;
  u8 unused_0[2];
};

struct hwrm_vnic_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 vnic_id;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_vnic_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 vnic_id;
  u8 unused_0[4];
};

struct hwrm_vnic_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 vnic_id;
  __le16 dflt_ring_grp;
  __le16 rss_rule;
  __le16 cos_rule;
  __le16 lb_rule;
  __le16 mru;
  __le16 default_rx_ring_id;
  __le16 default_cmpl_ring_id;
  __le16 queue_id;
  u8 rx_csum_v2_mode;
  u8 unused0[5];
};

struct hwrm_vnic_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  u8 unused_0[4];
};

struct hwrm_vnic_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 mru;
  u8 unused_0[2];
  __le32 flags;
  __le16 max_aggs_supported;
  u8 unused_1[5];
  u8 valid;
};

struct hwrm_vnic_tpa_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 vnic_id;
  __le16 max_agg_segs;
  __le16 max_aggs;
  u8 unused_0[2];
  __le32 max_agg_timer;
  __le32 min_agg_len;
};

struct hwrm_vnic_rss_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 hash_type;
  __le16 vnic_id;
  u8 ring_table_pair_index;
  u8 hash_mode_flags;
  __le64 ring_grp_tbl_addr;
  __le64 hash_key_tbl_addr;
  __le16 rss_ctx_idx;
  u8 unused_1[6];
};

struct hwrm_vnic_plcmodes_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le32 vnic_id;
  __le16 jumbo_thresh;
  __le16 hds_offset;
  __le16 hds_threshold;
  __le16 max_bds;
  u8 unused_0[4];
};

struct hwrm_vnic_rss_cos_lb_ctx_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_vnic_rss_cos_lb_ctx_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 rss_cos_lb_ctx_id;
  u8 unused_0[5];
  u8 valid;
};

struct hwrm_vnic_rss_cos_lb_ctx_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 rss_cos_lb_ctx_id;
  u8 unused_0[6];
};

struct hwrm_ring_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  u8 ring_type;
  u8 unused_0;
  __le16 flags;
  __le64 page_tbl_addr;
  __le32 fbo;
  u8 page_size;
  u8 page_tbl_depth;
  __le16 schq_id;
  __le32 length;
  __le16 logical_id;
  __le16 cmpl_ring_id;
  __le16 queue_id;
  __le16 rx_buf_size;
  __le16 rx_ring_id;
  __le16 nq_ring_id;
  __le16 ring_arb_cfg;
  __le16 unused_3;
  __le32 reserved3;
  __le32 stat_ctx_id;
  __le32 reserved4;
  __le32 max_bw;
  u8 int_mode;
  u8 mpc_chnls_type;
  u8 unused_4[2];
  __le64 cq_handle;
};

struct hwrm_ring_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 ring_id;
  __le16 logical_ring_id;
  u8 push_buffer_index;
  u8 unused_0[2];
  u8 valid;
};

struct hwrm_ring_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 ring_type;
  u8 flags;
  __le16 ring_id;
  __le32 prod_idx;
  __le32 opaque;
  __le32 unused_1;
};

struct hwrm_ring_free_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 unused_0[7];
  u8 valid;
};

struct hwrm_ring_reset_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 ring_type;
  u8 unused_0;
  __le16 ring_id;
  u8 unused_1[4];
};

struct hwrm_ring_aggint_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_ring_aggint_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 cmpl_params;
  __le32 nq_params;
  __le16 num_cmpl_dma_aggr_min;
  __le16 num_cmpl_dma_aggr_max;
  __le16 num_cmpl_dma_aggr_during_int_min;
  __le16 num_cmpl_dma_aggr_during_int_max;
  __le16 cmpl_aggr_dma_tmr_min;
  __le16 cmpl_aggr_dma_tmr_max;
  __le16 cmpl_aggr_dma_tmr_during_int_min;
  __le16 cmpl_aggr_dma_tmr_during_int_max;
  __le16 int_lat_tmr_min_min;
  __le16 int_lat_tmr_min_max;
  __le16 int_lat_tmr_max_min;
  __le16 int_lat_tmr_max_max;
  __le16 num_cmpl_aggr_int_min;
  __le16 num_cmpl_aggr_int_max;
  __le16 timer_units;
  u8 unused_0[1];
  u8 valid;
};

struct hwrm_ring_cmpl_ring_cfg_aggint_params_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 ring_id;
  __le16 flags;
  __le16 num_cmpl_dma_aggr;
  __le16 num_cmpl_dma_aggr_during_int;
  __le16 cmpl_aggr_dma_tmr;
  __le16 cmpl_aggr_dma_tmr_during_int;
  __le16 int_lat_tmr_min;
  __le16 int_lat_tmr_max;
  __le16 num_cmpl_aggr_int;
  __le16 enables;
  u8 unused_0[4];
};

struct hwrm_ring_grp_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 cr;
  __le16 rr;
  __le16 ar;
  __le16 sc;
};

struct hwrm_ring_grp_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 ring_group_id;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_ring_grp_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 ring_group_id;
  u8 unused_0[4];
};

struct hwrm_cfa_l2_filter_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  u8 l2_addr[6];
  u8 num_vlans;
  u8 t_num_vlans;
  u8 l2_addr_mask[6];
  __le16 l2_ovlan;
  __le16 l2_ovlan_mask;
  __le16 l2_ivlan;
  __le16 l2_ivlan_mask;
  u8 unused_1[2];
  u8 t_l2_addr[6];
  u8 unused_2[2];
  u8 t_l2_addr_mask[6];
  __le16 t_l2_ovlan;
  __le16 t_l2_ovlan_mask;
  __le16 t_l2_ivlan;
  __le16 t_l2_ivlan_mask;
  u8 src_type;
  u8 unused_3;
  __le32 src_id;
  u8 tunnel_type;
  u8 unused_4;
  __le16 dst_id;
  __le16 mirror_vnic_id;
  u8 pri_hint;
  u8 unused_5;
  __le32 unused_6;
  __le64 l2_filter_id_hint;
};

struct hwrm_cfa_l2_filter_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le64 l2_filter_id;
  __le32 flow_id;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_cfa_l2_filter_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 l2_filter_id;
};

struct hwrm_cfa_l2_set_rx_mask_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 vnic_id;
  __le32 mask;
  __le64 mc_tbl_addr;
  __le32 num_mc_entries;
  u8 unused_0[4];
  __le64 vlan_tag_tbl_addr;
  __le32 num_vlan_tags;
  u8 unused_1[4];
};

struct hwrm_cfa_ntuple_filter_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le64 l2_filter_id;
  u8 src_macaddr[6];
  __be16 ethertype;
  u8 ip_addr_type;
  u8 ip_protocol;
  __le16 dst_id;
  __le16 mirror_vnic_id;
  u8 tunnel_type;
  u8 pri_hint;
  __be32 src_ipaddr[4];
  __be32 src_ipaddr_mask[4];
  __be32 dst_ipaddr[4];
  __be32 dst_ipaddr_mask[4];
  __be16 src_port;
  __be16 src_port_mask;
  __be16 dst_port;
  __be16 dst_port_mask;
  __le64 ntuple_filter_id_hint;
};

struct hwrm_cfa_ntuple_filter_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le64 ntuple_filter_id;
  __le32 flow_id;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_cfa_ntuple_filter_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 ntuple_filter_id;
};

struct hwrm_cfa_adv_flow_mgnt_qcaps_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 unused_0[4];
};

struct hwrm_cfa_adv_flow_mgnt_qcaps_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 flags;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_tunnel_dst_port_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 tunnel_type;
  u8 unused_0;
  __be16 tunnel_dst_port_val;
  u8 unused_1[4];
};

struct hwrm_tunnel_dst_port_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 tunnel_dst_port_id;
  u8 unused_0[5];
  u8 valid;
};

struct hwrm_tunnel_dst_port_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 tunnel_type;
  u8 unused_0;
  __le16 tunnel_dst_port_id;
  u8 unused_1[4];
};

struct hwrm_stat_ctx_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 stats_dma_addr;
  __le32 update_period_ms;
  u8 stat_ctx_flags;
  u8 unused_0;
  __le16 stats_dma_length;
};

struct hwrm_stat_ctx_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 stat_ctx_id;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_stat_ctx_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 stat_ctx_id;
  u8 unused_0[4];
};

struct hwrm_stat_ctx_clr_stats_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 stat_ctx_id;
  u8 unused_0[4];
};

struct hwrm_fw_reset_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 embedded_proc_type;
  u8 selfrst_status;
  u8 host_idx;
  u8 flags;
  u8 unused_0[4];
};

struct hwrm_fw_set_time_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 year;
  u8 month;
  u8 day;
  u8 hour;
  u8 minute;
  u8 second;
  u8 unused_0;
  __le16 millisecond;
  __le16 zone;
  u8 unused_1[4];
};

struct hwrm_temp_monitor_query_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_temp_monitor_query_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 temp;
  u8 phy_temp;
  u8 om_temp;
  u8 flags;
  u8 temp2;
  u8 phy_temp2;
  u8 om_temp2;
  u8 valid;
};

struct hwrm_wol_filter_alloc_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 port_id;
  u8 wol_type;
  u8 unused_0[5];
  u8 mac_address[6];
  __le16 pattern_offset;
  __le16 pattern_buf_size;
  __le16 pattern_mask_size;
  u8 unused_1[4];
  __le64 pattern_buf_addr;
  __le64 pattern_mask_addr;
};

struct hwrm_wol_filter_alloc_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 wol_filter_id;
  u8 unused_0[6];
  u8 valid;
};

struct hwrm_wol_filter_free_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 port_id;
  u8 wol_filter_id;
  u8 unused_0[5];
};

struct hwrm_wol_filter_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 port_id;
  __le16 handle;
  u8 unused_0[4];
  __le64 pattern_buf_addr;
  __le16 pattern_buf_size;
  u8 unused_1[6];
  __le64 pattern_mask_addr;
  __le16 pattern_mask_size;
  u8 unused_2[6];
};

struct hwrm_wol_filter_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 next_handle;
  u8 wol_filter_id;
  u8 wol_type;
  __le32 unused_0;
  u8 mac_address[6];
  __le16 pattern_offset;
  __le16 pattern_size;
  __le16 pattern_mask_size;
  u8 unused_1[3];
  u8 valid;
};

struct hwrm_dbg_read_direct_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_dest_addr;
  __le32 read_addr;
  __le32 read_len32;
};

struct hwrm_dbg_read_direct_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 crc32;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_dbg_ring_info_get_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 ring_type;
  u8 unused_0[3];
  __le32 fw_ring_id;
};

struct hwrm_dbg_ring_info_get_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 producer_index;
  __le32 consumer_index;
  __le32 cag_vector_ctrl;
  u8 unused_0[3];
  u8 valid;
};

struct hwrm_nvm_get_dev_info_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le16 manufacturer_id;
  __le16 device_id;
  __le32 sector_size;
  __le32 nvram_size;
  __le32 reserved_size;
  __le32 available_size;
  u8 nvm_cfg_ver_maj;
  u8 nvm_cfg_ver_min;
  u8 nvm_cfg_ver_upd;
  u8 flags;
  char pkg_name[16];
  __le16 hwrm_fw_major;
  __le16 hwrm_fw_minor;
  __le16 hwrm_fw_build;
  __le16 hwrm_fw_patch;
  __le16 mgmt_fw_major;
  __le16 mgmt_fw_minor;
  __le16 mgmt_fw_build;
  __le16 mgmt_fw_patch;
  __le16 roce_fw_major;
  __le16 roce_fw_minor;
  __le16 roce_fw_build;
  __le16 roce_fw_patch;
  u8 unused_0[7];
  u8 valid;
};

enum devlink_sb_pool_type {
  DEVLINK_SB_POOL_TYPE_INGRESS = 0,
  DEVLINK_SB_POOL_TYPE_EGRESS = 1,
};

enum devlink_sb_threshold_type {
  DEVLINK_SB_THRESHOLD_TYPE_STATIC = 0,
  DEVLINK_SB_THRESHOLD_TYPE_DYNAMIC = 1,
};

enum devlink_eswitch_mode {
  DEVLINK_ESWITCH_MODE_LEGACY = 0,
  DEVLINK_ESWITCH_MODE_SWITCHDEV = 1,
};

enum devlink_eswitch_encap_mode {
  DEVLINK_ESWITCH_ENCAP_MODE_NONE = 0,
  DEVLINK_ESWITCH_ENCAP_MODE_BASIC = 1,
};

enum devlink_trap_action {
  DEVLINK_TRAP_ACTION_DROP = 0,
  DEVLINK_TRAP_ACTION_TRAP = 1,
  DEVLINK_TRAP_ACTION_MIRROR = 2,
};

enum devlink_trap_type {
  DEVLINK_TRAP_TYPE_DROP = 0,
  DEVLINK_TRAP_TYPE_EXCEPTION = 1,
  DEVLINK_TRAP_TYPE_CONTROL = 2,
};

enum devlink_reload_action {
  DEVLINK_RELOAD_ACTION_UNSPEC = 0,
  DEVLINK_RELOAD_ACTION_DRIVER_REINIT = 1,
  DEVLINK_RELOAD_ACTION_FW_ACTIVATE = 2,
  __DEVLINK_RELOAD_ACTION_MAX = 3,
  DEVLINK_RELOAD_ACTION_MAX = 2,
};

enum devlink_reload_limit {
  DEVLINK_RELOAD_LIMIT_UNSPEC = 0,
  DEVLINK_RELOAD_LIMIT_NO_RESET = 1,
  __DEVLINK_RELOAD_LIMIT_MAX = 2,
  DEVLINK_RELOAD_LIMIT_MAX = 1,
};

enum devlink_dpipe_field_mapping_type {
  DEVLINK_DPIPE_FIELD_MAPPING_TYPE_NONE = 0,
  DEVLINK_DPIPE_FIELD_MAPPING_TYPE_IFINDEX = 1,
};

enum devlink_port_fn_state {
  DEVLINK_PORT_FN_STATE_INACTIVE = 0,
  DEVLINK_PORT_FN_STATE_ACTIVE = 1,
};

enum devlink_port_fn_opstate {
  DEVLINK_PORT_FN_OPSTATE_DETACHED = 0,
  DEVLINK_PORT_FN_OPSTATE_ATTACHED = 1,
};

struct devlink_dev_stats {
  u32 reload_stats[6];
  u32 remote_reload_stats[6];
};

struct devlink_dpipe_headers;

struct devlink_ops;

struct devlink {
  struct list_head list;
  struct list_head port_list;
  struct list_head sb_list;
  struct list_head dpipe_table_list;
  struct list_head resource_list;
  struct list_head param_list;
  struct list_head region_list;
  struct list_head reporter_list;
  struct mutex reporters_lock;
  struct devlink_dpipe_headers* dpipe_headers;
  struct list_head trap_list;
  struct list_head trap_group_list;
  struct list_head trap_policer_list;
  const struct devlink_ops* ops;
  struct xarray snapshot_ids;
  struct devlink_dev_stats stats;
  struct device* dev;
  possible_net_t _net;
  struct mutex lock;
  u8 reload_failed : 1;
  u8 reload_enabled : 1;
  u8 registered : 1;
  long : 61;
  long : 64;
  char priv[0];
};

struct devlink_dpipe_header;

struct devlink_dpipe_headers {
  struct devlink_dpipe_header** headers;
  unsigned int headers_count;
};

struct devlink_sb_pool_info;

struct devlink_info_req;

struct devlink_flash_update_params;

struct devlink_trap;

struct devlink_trap_group;

struct devlink_trap_policer;

struct devlink_port_new_attrs;

struct devlink_ops {
  u32 supported_flash_update_params;
  long unsigned int reload_actions;
  long unsigned int reload_limits;
  int (*reload_down)(
      struct devlink*,
      bool,
      enum devlink_reload_action,
      enum devlink_reload_limit,
      struct netlink_ext_ack*);
  int (*reload_up)(
      struct devlink*,
      enum devlink_reload_action,
      enum devlink_reload_limit,
      u32*,
      struct netlink_ext_ack*);
  int (*port_type_set)(struct devlink_port*, enum devlink_port_type);
  int (*port_split)(
      struct devlink*,
      unsigned int,
      unsigned int,
      struct netlink_ext_ack*);
  int (*port_unsplit)(struct devlink*, unsigned int, struct netlink_ext_ack*);
  int (*sb_pool_get)(
      struct devlink*,
      unsigned int,
      u16,
      struct devlink_sb_pool_info*);
  int (*sb_pool_set)(
      struct devlink*,
      unsigned int,
      u16,
      u32,
      enum devlink_sb_threshold_type,
      struct netlink_ext_ack*);
  int (*sb_port_pool_get)(struct devlink_port*, unsigned int, u16, u32*);
  int (*sb_port_pool_set)(
      struct devlink_port*,
      unsigned int,
      u16,
      u32,
      struct netlink_ext_ack*);
  int (*sb_tc_pool_bind_get)(
      struct devlink_port*,
      unsigned int,
      u16,
      enum devlink_sb_pool_type,
      u16*,
      u32*);
  int (*sb_tc_pool_bind_set)(
      struct devlink_port*,
      unsigned int,
      u16,
      enum devlink_sb_pool_type,
      u16,
      u32,
      struct netlink_ext_ack*);
  int (*sb_occ_snapshot)(struct devlink*, unsigned int);
  int (*sb_occ_max_clear)(struct devlink*, unsigned int);
  int (*sb_occ_port_pool_get)(
      struct devlink_port*,
      unsigned int,
      u16,
      u32*,
      u32*);
  int (*sb_occ_tc_port_bind_get)(
      struct devlink_port*,
      unsigned int,
      u16,
      enum devlink_sb_pool_type,
      u32*,
      u32*);
  int (*eswitch_mode_get)(struct devlink*, u16*);
  int (*eswitch_mode_set)(struct devlink*, u16, struct netlink_ext_ack*);
  int (*eswitch_inline_mode_get)(struct devlink*, u8*);
  int (*eswitch_inline_mode_set)(struct devlink*, u8, struct netlink_ext_ack*);
  int (*eswitch_encap_mode_get)(
      struct devlink*,
      enum devlink_eswitch_encap_mode*);
  int (*eswitch_encap_mode_set)(
      struct devlink*,
      enum devlink_eswitch_encap_mode,
      struct netlink_ext_ack*);
  int (*info_get)(
      struct devlink*,
      struct devlink_info_req*,
      struct netlink_ext_ack*);
  int (*flash_update)(
      struct devlink*,
      struct devlink_flash_update_params*,
      struct netlink_ext_ack*);
  int (*trap_init)(struct devlink*, const struct devlink_trap*, void*);
  void (*trap_fini)(struct devlink*, const struct devlink_trap*, void*);
  int (*trap_action_set)(
      struct devlink*,
      const struct devlink_trap*,
      enum devlink_trap_action,
      struct netlink_ext_ack*);
  int (*trap_group_init)(struct devlink*, const struct devlink_trap_group*);
  int (*trap_group_set)(
      struct devlink*,
      const struct devlink_trap_group*,
      const struct devlink_trap_policer*,
      struct netlink_ext_ack*);
  int (*trap_group_action_set)(
      struct devlink*,
      const struct devlink_trap_group*,
      enum devlink_trap_action,
      struct netlink_ext_ack*);
  int (*trap_policer_init)(struct devlink*, const struct devlink_trap_policer*);
  void (
      *trap_policer_fini)(struct devlink*, const struct devlink_trap_policer*);
  int (*trap_policer_set)(
      struct devlink*,
      const struct devlink_trap_policer*,
      u64,
      u64,
      struct netlink_ext_ack*);
  int (*trap_policer_counter_get)(
      struct devlink*,
      const struct devlink_trap_policer*,
      u64*);
  int (*port_function_hw_addr_get)(
      struct devlink*,
      struct devlink_port*,
      u8*,
      int*,
      struct netlink_ext_ack*);
  int (*port_function_hw_addr_set)(
      struct devlink*,
      struct devlink_port*,
      const u8*,
      int,
      struct netlink_ext_ack*);
  int (*port_new)(
      struct devlink*,
      const struct devlink_port_new_attrs*,
      struct netlink_ext_ack*,
      unsigned int*);
  int (*port_del)(struct devlink*, unsigned int, struct netlink_ext_ack*);
  int (*port_fn_state_get)(
      struct devlink*,
      struct devlink_port*,
      enum devlink_port_fn_state*,
      enum devlink_port_fn_opstate*,
      struct netlink_ext_ack*);
  int (*port_fn_state_set)(
      struct devlink*,
      struct devlink_port*,
      enum devlink_port_fn_state,
      struct netlink_ext_ack*);
};

struct devlink_port_new_attrs {
  enum devlink_port_flavour flavour;
  unsigned int port_index;
  u32 controller;
  u32 sfnum;
  u16 pfnum;
  u8 port_index_valid : 1;
  u8 controller_valid : 1;
  u8 sfnum_valid : 1;
};

struct devlink_sb_pool_info {
  enum devlink_sb_pool_type pool_type;
  u32 size;
  enum devlink_sb_threshold_type threshold_type;
  u32 cell_size;
};

struct devlink_dpipe_field {
  const char* name;
  unsigned int id;
  unsigned int bitwidth;
  enum devlink_dpipe_field_mapping_type mapping_type;
};

struct devlink_dpipe_header {
  const char* name;
  unsigned int id;
  struct devlink_dpipe_field* fields;
  unsigned int fields_count;
  bool global;
};

struct devlink_flash_update_params {
  const struct firmware* fw;
  const char* component;
  u32 overwrite_mask;
};

struct devlink_trap_policer {
  u32 id;
  u64 init_rate;
  u64 init_burst;
  u64 max_rate;
  u64 min_rate;
  u64 max_burst;
  u64 min_burst;
};

struct devlink_trap_group {
  const char* name;
  u16 id;
  bool generic;
  u32 init_policer_id;
};

struct devlink_trap {
  enum devlink_trap_type type;
  enum devlink_trap_action init_action;
  bool generic;
  u16 id;
  const char* name;
  u16 init_group_id;
  u32 metadata_cap;
};

enum metadata_type {
  METADATA_IP_TUNNEL = 0,
  METADATA_HW_PORT_MUX = 1,
};

struct hw_port_info {
  struct net_device* lower_dev;
  u32 port_id;
};

struct metadata_dst {
  struct dst_entry dst;
  enum metadata_type type;
  union {
    struct ip_tunnel_info tun_info;
    struct hw_port_info port_info;
  } u;
};

struct tx_bd {
  __le32 tx_bd_len_flags_type;
  u32 tx_bd_opaque;
  __le64 tx_bd_haddr;
};

struct tx_bd_ext {
  __le32 tx_bd_hsize_lflags;
  __le32 tx_bd_mss;
  __le32 tx_bd_cfa_action;
  __le32 tx_bd_cfa_meta;
};

struct rx_bd {
  __le32 rx_bd_len_flags_type;
  u32 rx_bd_opaque;
  __le64 rx_bd_haddr;
};

struct tx_cmp {
  __le32 tx_cmp_flags_type;
  u32 tx_cmp_opaque;
  __le32 tx_cmp_errors_v;
  __le32 tx_cmp_unsed_3;
};

struct rx_cmp {
  __le32 rx_cmp_len_flags_type;
  u32 rx_cmp_opaque;
  __le32 rx_cmp_misc_v1;
  __le32 rx_cmp_rss_hash;
};

struct rx_cmp_ext {
  __le32 rx_cmp_flags2;
  __le32 rx_cmp_meta_data;
  __le32 rx_cmp_cfa_code_errors_v2;
  __le32 rx_cmp_timestamp;
};

struct rx_agg_cmp {
  __le32 rx_agg_cmp_len_flags_type;
  u32 rx_agg_cmp_opaque;
  __le32 rx_agg_cmp_v;
  __le32 rx_agg_cmp_unused;
};

struct rx_tpa_start_cmp {
  __le32 rx_tpa_start_cmp_len_flags_type;
  u32 rx_tpa_start_cmp_opaque;
  __le32 rx_tpa_start_cmp_misc_v1;
  __le32 rx_tpa_start_cmp_rss_hash;
};

struct rx_tpa_start_cmp_ext {
  __le32 rx_tpa_start_cmp_flags2;
  __le32 rx_tpa_start_cmp_metadata;
  __le32 rx_tpa_start_cmp_cfa_code_v2;
  __le32 rx_tpa_start_cmp_hdr_info;
};

struct rx_tpa_end_cmp {
  __le32 rx_tpa_end_cmp_len_flags_type;
  u32 rx_tpa_end_cmp_opaque;
  __le32 rx_tpa_end_cmp_misc_v1;
  __le32 rx_tpa_end_cmp_tsdelta;
};

struct rx_tpa_end_cmp_ext {
  __le32 rx_tpa_end_cmp_dup_acks;
  __le32 rx_tpa_end_cmp_seg_len;
  __le32 rx_tpa_end_cmp_errors_v2;
  u32 rx_tpa_end_cmp_start_opaque;
};

struct nqe_cn {
  __le16 type;
  __le16 reserved16;
  __le32 cq_handle_low;
  __le32 v;
  __le32 cq_handle_high;
};

struct bnxt_sw_tx_bd {
  union {
    struct sk_buff* skb;
    struct xdp_frame* xdpf;
  };
  dma_addr_t mapping;
  __u32 len;
  u8 is_gso;
  u8 is_push;
  u8 action;
  union {
    short unsigned int nr_frags;
    u16 rx_prod;
  };
};

struct bnxt_sw_rx_bd {
  void* data;
  u8* data_ptr;
  dma_addr_t mapping;
};

struct bnxt_sw_rx_agg_bd {
  struct page* page;
  unsigned int offset;
  dma_addr_t mapping;
};

struct bnxt_mem_init {
  u8 init_val;
  u16 offset;
  u16 size;
};

struct bnxt_ring_mem_info {
  int nr_pages;
  int page_size;
  u16 flags;
  u16 depth;
  struct bnxt_mem_init* mem_init;
  void** pg_arr;
  dma_addr_t* dma_arr;
  __le64* pg_tbl;
  dma_addr_t pg_tbl_map;
  int vmem_size;
  void** vmem;
};

struct bnxt_ring_struct {
  struct bnxt_ring_mem_info ring_mem;
  u16 fw_ring_id;
  union {
    u16 grp_idx;
    u16 map_idx;
  };
  u32 handle;
  u8 queue_id;
};

struct tx_push_bd {
  __le32 doorbell;
  __le32 tx_bd_len_flags_type;
  u32 tx_bd_opaque;
  struct tx_bd_ext txbd2;
};

struct tx_push_buffer {
  struct tx_push_bd push_bd;
  u32 data[25];
};

struct bnxt_db_info {
  void* doorbell;
  union {
    u64 db_key64;
    u32 db_key32;
  };
};

struct bnxt_napi;

struct bnxt_tx_ring_info {
  struct bnxt_napi* bnapi;
  u16 tx_prod;
  u16 tx_cons;
  u16 txq_index;
  u8 kick_pending;
  struct bnxt_db_info tx_db;
  struct tx_bd* tx_desc_ring[8];
  struct bnxt_sw_tx_bd* tx_buf_ring;
  dma_addr_t tx_desc_mapping[8];
  struct tx_push_buffer* tx_push;
  dma_addr_t tx_push_mapping;
  __le64 data_mapping;
  u32 dev_state;
  struct bnxt_ring_struct tx_ring_struct;
};

struct bnxt_coal {
  u16 coal_ticks;
  u16 coal_ticks_irq;
  u16 coal_bufs;
  u16 coal_bufs_irq;
  u16 idle_thresh;
  u8 bufs_per_record;
  u8 budget;
};

struct bnxt_stats_mem {
  u64* sw_stats;
  u64* hw_masks;
  void* hw_stats;
  dma_addr_t hw_stats_map;
  int len;
};

struct bnxt_rx_sw_stats {
  u64 rx_l4_csum_errors;
  u64 rx_resets;
  u64 rx_buf_errors;
  u64 rx_oom_discards;
  u64 rx_netpoll_discards;
};

struct bnxt_cmn_sw_stats {
  u64 missed_irqs;
};

struct bnxt_sw_stats {
  struct bnxt_rx_sw_stats rx;
  struct bnxt_cmn_sw_stats cmn;
};

struct bnxt_cp_ring_info {
  struct bnxt_napi* bnapi;
  u32 cp_raw_cons;
  struct bnxt_db_info cp_db;
  u8 had_work_done : 1;
  u8 has_more_work : 1;
  u32 last_cp_raw_cons;
  struct bnxt_coal rx_ring_coal;
  u64 rx_packets;
  u64 rx_bytes;
  u64 event_ctr;
  struct dim dim;
  union {
    struct tx_cmp** cp_desc_ring;
    struct nqe_cn** nq_desc_ring;
  };
  dma_addr_t* cp_desc_mapping;
  struct bnxt_stats_mem stats;
  u32 hw_stats_ctx_id;
  struct bnxt_sw_stats sw_stats;
  struct bnxt_ring_struct cp_ring_struct;
  struct bnxt_cp_ring_info* cp_ring_arr[2];
};

struct bnxt;

struct bnxt_rx_ring_info;

struct bnxt_napi {
  struct napi_struct napi;
  struct bnxt* bp;
  int index;
  struct bnxt_cp_ring_info cp_ring;
  struct bnxt_rx_ring_info* rx_ring;
  struct bnxt_tx_ring_info* tx_ring;
  void (*tx_int)(struct bnxt*, struct bnxt_napi*, int);
  int tx_pkts;
  u8 events;
  u32 flags;
  bool in_reset;
};

struct bnxt_coal_cap {
  u32 cmpl_params;
  u32 nq_params;
  u16 num_cmpl_dma_aggr_max;
  u16 num_cmpl_dma_aggr_during_int_max;
  u16 cmpl_aggr_dma_tmr_max;
  u16 cmpl_aggr_dma_tmr_during_int_max;
  u16 int_lat_tmr_min_max;
  u16 int_lat_tmr_max_max;
  u16 num_cmpl_aggr_int_max;
  u16 timer_units;
};

struct bnxt_tpa_info {
  void* data;
  u8* data_ptr;
  dma_addr_t mapping;
  u16 len;
  short unsigned int gso_type;
  u32 flags2;
  u32 metadata;
  enum pkt_hash_types hash_type;
  u32 rss_hash;
  u32 hdr_info;
  u16 cfa_code;
  u8 agg_count;
  struct rx_agg_cmp* agg_arr;
};

struct bnxt_tpa_idx_map {
  u16 agg_id_tbl[1024];
  long unsigned int agg_idx_bmap[4];
};

struct bnxt_rx_ring_info {
  struct bnxt_napi* bnapi;
  u16 rx_prod;
  u16 rx_agg_prod;
  u16 rx_sw_agg_prod;
  u16 rx_next_cons;
  struct bnxt_db_info rx_db;
  struct bnxt_db_info rx_agg_db;
  struct bpf_prog* xdp_prog;
  struct rx_bd* rx_desc_ring[32];
  struct bnxt_sw_rx_bd* rx_buf_ring;
  struct rx_bd* rx_agg_desc_ring[32];
  struct bnxt_sw_rx_agg_bd* rx_agg_ring;
  long unsigned int* rx_agg_bmap;
  u16 rx_agg_bmap_size;
  struct page* rx_page;
  unsigned int rx_page_offset;
  dma_addr_t rx_desc_mapping[32];
  dma_addr_t rx_agg_desc_mapping[32];
  struct bnxt_tpa_info* rx_tpa;
  struct bnxt_tpa_idx_map* rx_tpa_idx_map;
  struct bnxt_ring_struct rx_ring_struct;
  struct bnxt_ring_struct rx_agg_ring_struct;
  long : 64;
  long : 64;
  long : 64;
  struct xdp_rxq_info xdp_rxq;
  struct page_pool* page_pool;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct bnxt_queue_info {
  u8 queue_id;
  u8 queue_profile;
};

struct bnxt_hw_resc {
  u16 min_rsscos_ctxs;
  u16 max_rsscos_ctxs;
  u16 min_cp_rings;
  u16 max_cp_rings;
  u16 resv_cp_rings;
  u16 min_tx_rings;
  u16 max_tx_rings;
  u16 resv_tx_rings;
  u16 max_tx_sch_inputs;
  u16 min_rx_rings;
  u16 max_rx_rings;
  u16 resv_rx_rings;
  u16 min_hw_ring_grps;
  u16 max_hw_ring_grps;
  u16 resv_hw_ring_grps;
  u16 min_l2_ctxs;
  u16 max_l2_ctxs;
  u16 min_vnics;
  u16 max_vnics;
  u16 resv_vnics;
  u16 min_stat_ctxs;
  u16 max_stat_ctxs;
  u16 resv_stat_ctxs;
  u16 max_nqs;
  u16 max_irqs;
  u16 resv_irqs;
};

struct bnxt_vf_info;

struct bnxt_pf_info {
  u16 fw_fid;
  u16 port_id;
  u8 mac_addr[6];
  u32 first_vf_id;
  u16 active_vfs;
  u16 registered_vfs;
  u16 max_vfs;
  u32 max_encap_records;
  u32 max_decap_records;
  u32 max_tx_em_flows;
  u32 max_tx_wm_flows;
  u32 max_rx_em_flows;
  u32 max_rx_wm_flows;
  long unsigned int* vf_event_bmap;
  u16 hwrm_cmd_req_pages;
  u8 vf_resv_strategy;
  void* hwrm_cmd_req_addr[4];
  dma_addr_t hwrm_cmd_req_dma_addr[4];
  struct bnxt_vf_info* vf;
};

struct bnxt_link_info {
  u8 phy_type;
  u8 media_type;
  u8 transceiver;
  u8 phy_addr;
  u8 phy_link_status;
  u8 wire_speed;
  u8 phy_state;
  u8 link_up;
  u8 duplex;
  u8 pause;
  u8 lp_pause;
  u8 auto_pause_setting;
  u8 force_pause_setting;
  u8 duplex_setting;
  u8 auto_mode;
  u8 phy_ver[3];
  u16 link_speed;
  u16 support_speeds;
  u16 support_pam4_speeds;
  u16 auto_link_speeds;
  u16 auto_pam4_link_speeds;
  u16 support_auto_speeds;
  u16 support_pam4_auto_speeds;
  u16 lp_auto_link_speeds;
  u16 lp_auto_pam4_link_speeds;
  u16 force_link_speed;
  u16 force_pam4_link_speed;
  u32 preemphasis;
  u8 module_status;
  u8 active_fec_sig_mode;
  u16 fec_cfg;
  u8 autoneg;
  u8 req_signal_mode;
  u8 req_duplex;
  u8 req_flow_ctrl;
  u16 req_link_speed;
  u16 advertising;
  u16 advertising_pam4;
  bool force_link_chng;
  bool phy_retry;
  long unsigned int phy_retry_expires;
  struct hwrm_port_phy_qcfg_output phy_qcfg_resp;
};

struct bnxt_led_info {
  u8 led_id;
  u8 led_type;
  u8 led_group_id;
  u8 unused;
  __le16 led_state_caps;
  __le16 led_color_caps;
};

struct bnxt_en_dev;

struct bnxt_ring_grp_info;

struct bnxt_vnic_info;

struct bnxt_irq;

struct bnxt_fw_health;

struct bnxt_ctx_mem_info;

struct bnxt_test_info;

struct bnxt_ptp_cfg;

struct bnxt_vf_rep;

struct bnxt_tc_info;

struct bnxt {
  void* bar0;
  void* bar1;
  void* bar2;
  u32 reg_base;
  u16 chip_num;
  u8 chip_rev;
  char board_partno[32];
  char board_serialno[32];
  struct net_device* dev;
  struct pci_dev* pdev;
  atomic_t intr_sem;
  u32 flags;
  struct bnxt_en_dev* edev;
  struct bnxt_en_dev* (*ulp_probe)(struct net_device*);
  struct bnxt_napi** bnapi;
  struct bnxt_rx_ring_info* rx_ring;
  struct bnxt_tx_ring_info* tx_ring;
  u16* tx_ring_map;
  struct sk_buff* (*gro_func)(struct bnxt_tpa_info*, int, int, struct sk_buff*);
  struct sk_buff* (*rx_skb_func)(
      struct bnxt*,
      struct bnxt_rx_ring_info*,
      u16,
      void*,
      u8*,
      dma_addr_t,
      unsigned int);
  u16 max_tpa_v2;
  u16 max_tpa;
  u32 rx_buf_size;
  u32 rx_buf_use_size;
  u16 rx_offset;
  u16 rx_dma_offset;
  enum dma_data_direction rx_dir;
  u32 rx_ring_size;
  u32 rx_agg_ring_size;
  u32 rx_copy_thresh;
  u32 rx_ring_mask;
  u32 rx_agg_ring_mask;
  int rx_nr_pages;
  int rx_agg_nr_pages;
  int rx_nr_rings;
  int rsscos_nr_ctxs;
  u32 tx_ring_size;
  u32 tx_ring_mask;
  int tx_nr_pages;
  int tx_nr_rings;
  int tx_nr_rings_per_tc;
  int tx_nr_rings_xdp;
  int tx_wake_thresh;
  int tx_push_thresh;
  int tx_push_size;
  u32 cp_ring_size;
  u32 cp_ring_mask;
  u32 cp_bit;
  int cp_nr_pages;
  int cp_nr_rings;
  struct bnxt_ring_grp_info* grp_info;
  struct bnxt_vnic_info* vnic_info;
  int nr_vnics;
  u16* rss_indir_tbl;
  u16 rss_indir_tbl_entries;
  u32 rss_hash_cfg;
  u16 max_mtu;
  u8 max_tc;
  u8 max_lltc;
  struct bnxt_queue_info q_info[8];
  u8 tc_to_qidx[8];
  u8 q_ids[8];
  u8 max_q;
  unsigned int current_interval;
  struct timer_list timer;
  long unsigned int state;
  struct bnxt_irq* irq_tbl;
  int total_irqs;
  u8 mac_addr[6];
  u32 msg_enable;
  u32 fw_cap;
  u32 hwrm_spec_code;
  u16 hwrm_cmd_seq;
  u16 hwrm_cmd_kong_seq;
  struct dma_pool___2* hwrm_dma_pool;
  struct hlist_head hwrm_pending_list;
  struct rtnl_link_stats64 net_stats_prev;
  struct bnxt_stats_mem port_stats;
  struct bnxt_stats_mem rx_port_stats_ext;
  struct bnxt_stats_mem tx_port_stats_ext;
  u16 fw_rx_stats_ext_size;
  u16 fw_tx_stats_ext_size;
  u16 hw_ring_stats_size;
  u8 pri2cos_idx[8];
  u8 pri2cos_valid;
  u16 hwrm_max_req_len;
  u16 hwrm_max_ext_req_len;
  int hwrm_cmd_timeout;
  struct mutex hwrm_cmd_lock;
  struct hwrm_ver_get_output ver_resp;
  char fw_ver_str[32];
  char hwrm_ver_supp[32];
  char nvm_cfg_ver[32];
  u64 fw_ver_code;
  u16 vxlan_fw_dst_port_id;
  u16 nge_fw_dst_port_id;
  __be16 vxlan_port;
  __be16 nge_port;
  u8 port_partition_type;
  u8 port_count;
  u16 br_mode;
  struct bnxt_coal_cap coal_cap;
  struct bnxt_coal rx_coal;
  struct bnxt_coal tx_coal;
  u32 stats_coal_ticks;
  struct work_struct sp_task;
  long unsigned int sp_event;
  struct delayed_work fw_reset_task;
  int fw_reset_state;
  u16 fw_reset_min_dsecs;
  u16 fw_reset_max_dsecs;
  long unsigned int fw_reset_timestamp;
  struct bnxt_fw_health* fw_health;
  struct bnxt_hw_resc hw_resc;
  struct bnxt_pf_info pf;
  struct bnxt_ctx_mem_info* ctx;
  int db_size;
  struct hlist_head ntp_fltr_hash_tbl[512];
  spinlock_t ntp_fltr_lock;
  long unsigned int* ntp_fltr_bmap;
  int ntp_fltr_count;
  struct mutex link_lock;
  struct bnxt_link_info link_info;
  struct ethtool_eee eee;
  u32 lpi_tmr_lo;
  u32 lpi_tmr_hi;
  u8 phy_flags;
  u8 num_tests;
  struct bnxt_test_info* test_info;
  u8 wol_filter_id;
  u8 wol;
  u8 num_leds;
  struct bnxt_led_info leds[4];
  u16 dump_flag;
  struct bpf_prog* xdp_prog;
  struct bnxt_ptp_cfg* ptp_cfg;
  struct devlink* dl;
  struct devlink_port dl_port;
  enum devlink_eswitch_mode eswitch_mode;
  struct bnxt_vf_rep** vf_reps;
  u16* cfa_code_map;
  u8 dsn[8];
  struct bnxt_tc_info* tc_info;
  struct list_head tc_indr_block_list;
  struct dentry* debugfs_pdev;
  struct device* hwmon_dev;
};

struct bnxt_irq {
  irq_handler_t handler;
  unsigned int vector;
  u8 requested : 1;
  u8 have_cpumask : 1;
  char name[18];
  cpumask_var_t cpu_mask;
};

struct bnxt_ring_grp_info {
  u16 fw_stats_ctx;
  u16 fw_grp_id;
  u16 rx_fw_ring_id;
  u16 agg_fw_ring_id;
  u16 cp_fw_ring_id;
};

struct bnxt_vnic_info {
  u16 fw_vnic_id;
  u16 fw_rss_cos_lb_ctx[8];
  u16 fw_l2_ctx_id;
  __le64 fw_l2_filter_id[4];
  u16 uc_filter_count;
  u8* uc_list;
  u16* fw_grp_ids;
  dma_addr_t rss_table_dma_addr;
  __le16* rss_table;
  dma_addr_t rss_hash_key_dma_addr;
  u64* rss_hash_key;
  int rss_table_size;
  u32 rx_mask;
  u8* mc_list;
  int mc_list_size;
  int mc_list_count;
  dma_addr_t mc_list_mapping;
  u32 flags;
};

struct bnxt_ntuple_filter {
  struct hlist_node hash;
  u8 dst_mac_addr[6];
  u8 src_mac_addr[6];
  int : 32;
  struct flow_keys fkeys;
  __le64 filter_id;
  u16 sw_id;
  u8 l2_fltr_idx;
  u16 rxq;
  u32 flow_id;
  long unsigned int state;
};

struct bnxt_test_info {
  u8 offline_mask;
  u16 timeout;
  char string[256];
};

struct bnxt_tc_flow_stats {
  u64 packets;
  u64 bytes;
};

struct bnxt_tc_stats_batch {
  void* flow_node;
  struct bnxt_tc_flow_stats hw_stats;
};

struct bnxt_tc_info {
  bool enabled;
  struct rhashtable flow_table;
  struct rhashtable_params flow_ht_params;
  struct rhashtable l2_table;
  struct rhashtable_params l2_ht_params;
  struct rhashtable decap_l2_table;
  struct rhashtable_params decap_l2_ht_params;
  struct rhashtable decap_table;
  struct rhashtable_params decap_ht_params;
  struct rhashtable encap_table;
  struct rhashtable_params encap_ht_params;
  struct mutex lock;
  struct rhashtable_iter iter;
  struct bnxt_tc_stats_batch stats_batch[10];
  u64 bytes_mask;
  u64 packets_mask;
};

struct bnxt_vf_rep_stats {
  u64 packets;
  u64 bytes;
  u64 dropped;
};

struct bnxt_vf_rep {
  struct bnxt* bp;
  struct net_device* dev;
  struct metadata_dst* dst;
  u16 vf_idx;
  u16 tx_cfa_action;
  u16 rx_cfa_code;
  struct bnxt_vf_rep_stats rx_stats;
  struct bnxt_vf_rep_stats tx_stats;
};

struct bnxt_ctx_pg_info {
  u32 entries;
  u32 nr_pages;
  void* ctx_pg_arr[512];
  dma_addr_t ctx_dma_arr[512];
  struct bnxt_ring_mem_info ring_mem;
  struct bnxt_ctx_pg_info** ctx_pg_tbl;
};

struct bnxt_ctx_mem_info {
  u32 qp_max_entries;
  u16 qp_min_qp1_entries;
  u16 qp_max_l2_entries;
  u16 qp_entry_size;
  u16 srq_max_l2_entries;
  u32 srq_max_entries;
  u16 srq_entry_size;
  u16 cq_max_l2_entries;
  u32 cq_max_entries;
  u16 cq_entry_size;
  u16 vnic_max_vnic_entries;
  u16 vnic_max_ring_table_entries;
  u16 vnic_entry_size;
  u32 stat_max_entries;
  u16 stat_entry_size;
  u16 tqm_entry_size;
  u32 tqm_min_entries_per_ring;
  u32 tqm_max_entries_per_ring;
  u32 mrav_max_entries;
  u16 mrav_entry_size;
  u16 tim_entry_size;
  u32 tim_max_entries;
  u16 mrav_num_entries_units;
  u8 tqm_entries_multiple;
  u8 tqm_fp_rings_count;
  u32 flags;
  struct bnxt_ctx_pg_info qp_mem;
  struct bnxt_ctx_pg_info srq_mem;
  struct bnxt_ctx_pg_info cq_mem;
  struct bnxt_ctx_pg_info vnic_mem;
  struct bnxt_ctx_pg_info stat_mem;
  struct bnxt_ctx_pg_info mrav_mem;
  struct bnxt_ctx_pg_info tim_mem;
  struct bnxt_ctx_pg_info* tqm_mem[9];
  struct bnxt_mem_init mem_init[6];
};

struct devlink_health_reporter;

struct bnxt_fw_health {
  u32 flags;
  u32 polling_dsecs;
  u32 master_func_wait_dsecs;
  u32 normal_func_wait_dsecs;
  u32 post_reset_wait_dsecs;
  u32 post_reset_max_wait_dsecs;
  u32 regs[4];
  u32 mapped_regs[4];
  u32 fw_reset_inprog_reg_mask;
  u32 last_fw_heartbeat;
  u32 last_fw_reset_cnt;
  u8 enabled : 1;
  u8 master : 1;
  u8 fatal : 1;
  u8 status_reliable : 1;
  u8 tmr_multiplier;
  u8 tmr_counter;
  u8 fw_reset_seq_cnt;
  u32 fw_reset_seq_regs[16];
  u32 fw_reset_seq_vals[16];
  u32 fw_reset_seq_delay_msec[16];
  u32 echo_req_data1;
  u32 echo_req_data2;
  struct devlink_health_reporter* fw_reporter;
  struct devlink_health_reporter* fw_reset_reporter;
  struct devlink_health_reporter* fw_fatal_reporter;
};

struct bnxt_ulp_ops;

struct bnxt_ulp {
  void* handle;
  struct bnxt_ulp_ops* ulp_ops;
  long unsigned int* async_events_bmap;
  u16 max_async_event_id;
  u16 msix_requested;
  u16 msix_base;
  atomic_t ref_count;
};

struct bnxt_en_ops;

struct bnxt_en_dev {
  struct net_device* net;
  struct pci_dev* pdev;
  u32 flags;
  const struct bnxt_en_ops* en_ops;
  struct bnxt_ulp ulp_tbl[2];
  int l2_db_size;
  int l2_db_size_nc;
};

struct ptp_clock;

struct pps_pin {
  u8 event;
  u8 usage;
  u8 state;
};

struct bnxt_pps {
  u8 num_pins;
  struct pps_pin pins[4];
};

struct bnxt_ptp_cfg {
  struct ptp_clock_info ptp_info;
  struct ptp_clock* ptp_clock;
  struct cyclecounter cc;
  struct timecounter tc;
  struct bnxt_pps pps_info;
  spinlock_t ptp_lock;
  struct sk_buff* tx_skb;
  u64 current_time;
  u64 old_time;
  long unsigned int next_period;
  long unsigned int next_overflow_check;
  u16 tx_seqid;
  u16 tx_hdr_off;
  struct bnxt* bp;
  atomic_t tx_avail;
  u16 rxctl;
  u8 tx_tstamp_en : 1;
  int rx_filter;
  u32 refclk_regs[2];
  u32 refclk_mapped_regs[2];
};

enum bnxt_hwrm_ctx_flags {
  BNXT_HWRM_INTERNAL_CTX_OWNED = 1,
  BNXT_HWRM_INTERNAL_RESP_DIRTY = 2,
  BNXT_HWRM_CTX_SILENT = 4,
  BNXT_HWRM_FULL_WAIT = 8,
};

enum bnxt_hwrm_wait_state {
  BNXT_HWRM_PENDING = 0,
  BNXT_HWRM_DEFERRED = 1,
  BNXT_HWRM_COMPLETE = 2,
  BNXT_HWRM_CANCELLED = 3,
};

enum bnxt_hwrm_chnl {
  BNXT_HWRM_CHNL_CHIMP = 0,
  BNXT_HWRM_CHNL_KONG = 1,
};

struct bnxt_hwrm_wait_token {
  struct callback_head rcu;
  struct hlist_node node;
  enum bnxt_hwrm_wait_state state;
  enum bnxt_hwrm_chnl dst;
  u16 seq_id;
};

struct bnxt_msix_entry {
  u32 vector;
  u32 ring_idx;
  u32 db_offset;
};

struct bnxt_ulp_ops {
  void (*ulp_async_notifier)(void*, struct hwrm_async_event_cmpl*);
  void (*ulp_stop)(void*);
  void (*ulp_start)(void*);
  void (*ulp_sriov_config)(void*, int);
  void (*ulp_shutdown)(void*);
  void (*ulp_irq_stop)(void*);
  void (*ulp_irq_restart)(void*, struct bnxt_msix_entry*);
};

struct bnxt_fw_msg {
  void* msg;
  int msg_len;
  void* resp;
  int resp_max_len;
  int timeout;
};

struct bnxt_en_ops {
  int (*bnxt_register_device)(
      struct bnxt_en_dev*,
      int,
      struct bnxt_ulp_ops*,
      void*);
  int (*bnxt_unregister_device)(struct bnxt_en_dev*, int);
  int (*bnxt_request_msix)(
      struct bnxt_en_dev*,
      int,
      struct bnxt_msix_entry*,
      int);
  int (*bnxt_free_msix)(struct bnxt_en_dev*, int);
  int (*bnxt_send_fw_msg)(struct bnxt_en_dev*, int, struct bnxt_fw_msg*);
  int (*bnxt_register_fw_async_events)(
      struct bnxt_en_dev*,
      int,
      long unsigned int*,
      u16);
};

enum board_idx {
  BCM57301 = 0,
  BCM57302 = 1,
  BCM57304 = 2,
  BCM57417_NPAR = 3,
  BCM58700 = 4,
  BCM57311 = 5,
  BCM57312 = 6,
  BCM57402 = 7,
  BCM57404 = 8,
  BCM57406 = 9,
  BCM57402_NPAR = 10,
  BCM57407 = 11,
  BCM57412 = 12,
  BCM57414 = 13,
  BCM57416 = 14,
  BCM57417 = 15,
  BCM57412_NPAR = 16,
  BCM57314 = 17,
  BCM57417_SFP = 18,
  BCM57416_SFP = 19,
  BCM57404_NPAR = 20,
  BCM57406_NPAR = 21,
  BCM57407_SFP = 22,
  BCM57407_NPAR = 23,
  BCM57414_NPAR = 24,
  BCM57416_NPAR = 25,
  BCM57452 = 26,
  BCM57454 = 27,
  BCM5745x_NPAR = 28,
  BCM57508 = 29,
  BCM57504 = 30,
  BCM57502 = 31,
  BCM57508_NPAR = 32,
  BCM57504_NPAR = 33,
  BCM57502_NPAR = 34,
  BCM58802 = 35,
  BCM58804 = 36,
  BCM58808 = 37,
  NETXTREME_E_VF = 38,
  NETXTREME_C_VF = 39,
  NETXTREME_S_VF = 40,
  NETXTREME_C_VF_HV = 41,
  NETXTREME_E_VF_HV = 42,
  NETXTREME_E_P5_VF = 43,
  NETXTREME_E_P5_VF_HV = 44,
};

struct input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
};

struct hwrm_short_input {
  __le16 req_type;
  __le16 signature;
  __le16 target_id;
  __le16 size;
  __le64 req_addr;
};

struct bnxt_hwrm_ctx {
  u64 sentinel;
  dma_addr_t dma_handle;
  struct output* resp;
  struct input* req;
  dma_addr_t slice_handle;
  void* slice_addr;
  u32 slice_size;
  u32 req_len;
  enum bnxt_hwrm_ctx_flags flags;
  unsigned int timeout;
  u32 allocated;
  gfp_t gfp;
};

enum ethtool_stringset {
  ETH_SS_TEST = 0,
  ETH_SS_STATS = 1,
  ETH_SS_PRIV_FLAGS = 2,
  ETH_SS_NTUPLE_FILTERS = 3,
  ETH_SS_FEATURES = 4,
  ETH_SS_RSS_HASH_FUNCS = 5,
  ETH_SS_TUNABLES = 6,
  ETH_SS_PHY_STATS = 7,
  ETH_SS_PHY_TUNABLES = 8,
  ETH_SS_LINK_MODES = 9,
  ETH_SS_MSG_CLASSES = 10,
  ETH_SS_WOL_MODES = 11,
  ETH_SS_SOF_TIMESTAMPING = 12,
  ETH_SS_TS_TX_TYPES = 13,
  ETH_SS_TS_RX_FILTERS = 14,
  ETH_SS_UDP_TUNNEL_TYPES = 15,
  ETH_SS_STATS_STD = 16,
  ETH_SS_STATS_ETH_PHY = 17,
  ETH_SS_STATS_ETH_MAC = 18,
  ETH_SS_STATS_ETH_CTRL = 19,
  ETH_SS_STATS_RMON = 20,
  ETH_SS_COUNT = 21,
};

enum ethtool_test_flags {
  ETH_TEST_FL_OFFLINE = 1,
  ETH_TEST_FL_FAILED = 2,
  ETH_TEST_FL_EXTERNAL_LB = 4,
  ETH_TEST_FL_EXTERNAL_LB_DONE = 8,
};

enum ethtool_flash_op_type {
  ETHTOOL_FLASH_ALL_REGIONS = 0,
};

enum ethtool_fec_config_bits {
  ETHTOOL_FEC_NONE_BIT = 0,
  ETHTOOL_FEC_AUTO_BIT = 1,
  ETHTOOL_FEC_OFF_BIT = 2,
  ETHTOOL_FEC_RS_BIT = 3,
  ETHTOOL_FEC_BASER_BIT = 4,
  ETHTOOL_FEC_LLRS_BIT = 5,
};

enum ethtool_reset_flags {
  ETH_RESET_MGMT = 1,
  ETH_RESET_IRQ = 2,
  ETH_RESET_DMA = 4,
  ETH_RESET_FILTER = 8,
  ETH_RESET_OFFLOAD = 16,
  ETH_RESET_MAC = 32,
  ETH_RESET_PHY = 64,
  ETH_RESET_RAM = 128,
  ETH_RESET_AP = 256,
  ETH_RESET_DEDICATED = 65535,
  ETH_RESET_ALL = 4294967295,
};

enum {
  ETH_RSS_HASH_TOP_BIT = 0,
  ETH_RSS_HASH_XOR_BIT = 1,
  ETH_RSS_HASH_CRC32_BIT = 2,
  ETH_RSS_HASH_FUNCS_COUNT = 3,
};

enum {
  SOF_TIMESTAMPING_TX_HARDWARE = 1,
  SOF_TIMESTAMPING_TX_SOFTWARE = 2,
  SOF_TIMESTAMPING_RX_HARDWARE = 4,
  SOF_TIMESTAMPING_RX_SOFTWARE = 8,
  SOF_TIMESTAMPING_SOFTWARE = 16,
  SOF_TIMESTAMPING_SYS_HARDWARE = 32,
  SOF_TIMESTAMPING_RAW_HARDWARE = 64,
  SOF_TIMESTAMPING_OPT_ID = 128,
  SOF_TIMESTAMPING_TX_SCHED = 256,
  SOF_TIMESTAMPING_TX_ACK = 512,
  SOF_TIMESTAMPING_OPT_CMSG = 1024,
  SOF_TIMESTAMPING_OPT_TSONLY = 2048,
  SOF_TIMESTAMPING_OPT_STATS = 4096,
  SOF_TIMESTAMPING_OPT_PKTINFO = 8192,
  SOF_TIMESTAMPING_OPT_TX_SWHW = 16384,
  SOF_TIMESTAMPING_LAST = 16384,
  SOF_TIMESTAMPING_MASK = 32767,
};

enum hwtstamp_tx_types {
  HWTSTAMP_TX_OFF = 0,
  HWTSTAMP_TX_ON = 1,
  HWTSTAMP_TX_ONESTEP_SYNC = 2,
  HWTSTAMP_TX_ONESTEP_P2P = 3,
  __HWTSTAMP_TX_CNT = 4,
};

enum hwtstamp_rx_filters {
  HWTSTAMP_FILTER_NONE = 0,
  HWTSTAMP_FILTER_ALL = 1,
  HWTSTAMP_FILTER_SOME = 2,
  HWTSTAMP_FILTER_PTP_V1_L4_EVENT = 3,
  HWTSTAMP_FILTER_PTP_V1_L4_SYNC = 4,
  HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ = 5,
  HWTSTAMP_FILTER_PTP_V2_L4_EVENT = 6,
  HWTSTAMP_FILTER_PTP_V2_L4_SYNC = 7,
  HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ = 8,
  HWTSTAMP_FILTER_PTP_V2_L2_EVENT = 9,
  HWTSTAMP_FILTER_PTP_V2_L2_SYNC = 10,
  HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ = 11,
  HWTSTAMP_FILTER_PTP_V2_EVENT = 12,
  HWTSTAMP_FILTER_PTP_V2_SYNC = 13,
  HWTSTAMP_FILTER_PTP_V2_DELAY_REQ = 14,
  HWTSTAMP_FILTER_NTP_ALL = 15,
  __HWTSTAMP_FILTER_CNT = 16,
};

struct hwrm_err_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 opaque_0;
  __le16 opaque_1;
  u8 cmd_err;
  u8 valid;
};

struct hwrm_port_mac_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 port_id;
  u8 ipg;
  u8 lpbk;
  u8 vlan_pri2cos_map_pri;
  u8 reserved1;
  u8 tunnel_pri2cos_map_pri;
  u8 dscp2pri_map_pri;
  __le16 rx_ts_capture_ptp_msg_type;
  __le16 tx_ts_capture_ptp_msg_type;
  u8 cos_field_cfg;
  u8 unused_0[3];
  __le32 ptp_freq_adj_ppb;
  __le32 ptp_adj_phase;
};

struct hwrm_port_phy_i2c_read_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le32 enables;
  __le16 port_id;
  u8 i2c_slave_addr;
  u8 unused_0;
  __le16 page_number;
  __le16 page_offset;
  u8 data_length;
  u8 unused_1[7];
};

struct hwrm_port_phy_i2c_read_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 data[16];
  u8 unused_0[7];
  u8 valid;
};

struct hwrm_port_led_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  __le16 port_id;
  u8 num_leds;
  u8 rsvd;
  u8 led0_id;
  u8 led0_state;
  u8 led0_color;
  u8 unused_0;
  __le16 led0_blink_on;
  __le16 led0_blink_off;
  u8 led0_group_id;
  u8 rsvd0;
  u8 led1_id;
  u8 led1_state;
  u8 led1_color;
  u8 unused_1;
  __le16 led1_blink_on;
  __le16 led1_blink_off;
  u8 led1_group_id;
  u8 rsvd1;
  u8 led2_id;
  u8 led2_state;
  u8 led2_color;
  u8 unused_2;
  __le16 led2_blink_on;
  __le16 led2_blink_off;
  u8 led2_group_id;
  u8 rsvd2;
  u8 led3_id;
  u8 led3_state;
  u8 led3_color;
  u8 unused_3;
  __le16 led3_blink_on;
  __le16 led3_blink_off;
  u8 led3_group_id;
  u8 rsvd3;
};

struct hwrm_pcie_qstats_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 pcie_stat_size;
  u8 unused_0[6];
  __le64 pcie_stat_host_addr;
};

struct pcie_ctx_hw_stats {
  __le64 pcie_pl_signal_integrity;
  __le64 pcie_dl_signal_integrity;
  __le64 pcie_tl_signal_integrity;
  __le64 pcie_link_integrity;
  __le64 pcie_tx_traffic_rate;
  __le64 pcie_rx_traffic_rate;
  __le64 pcie_tx_dllp_statistics;
  __le64 pcie_rx_dllp_statistics;
  __le64 pcie_equalization_time;
  __le32 pcie_ltssm_histogram[4];
  __le64 pcie_recovery_histogram;
};

struct coredump_segment_record {
  __le16 component_id;
  __le16 segment_id;
  __le16 max_instances;
  u8 version_hi;
  u8 version_low;
  u8 seg_flags;
  u8 compress_flags;
  u8 unused_0[2];
  __le32 segment_len;
};

struct hwrm_dbg_coredump_list_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_dest_addr;
  __le32 host_buf_len;
  __le16 seq_no;
  u8 flags;
  u8 unused_0[1];
};

struct hwrm_dbg_coredump_initiate_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 component_id;
  __le16 segment_id;
  __le16 instance;
  __le16 unused_0;
  u8 seg_flags;
  u8 unused_1[7];
};

struct hwrm_dbg_coredump_retrieve_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_dest_addr;
  __le32 host_buf_len;
  __le32 unused_0;
  __le16 component_id;
  __le16 segment_id;
  __le16 instance;
  __le16 unused_1;
  u8 seg_flags;
  u8 unused_2;
  __le16 unused_3;
  __le32 unused_4;
  __le32 seq_no;
  __le32 unused_5;
};

struct hwrm_nvm_read_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_dest_addr;
  __le16 dir_idx;
  u8 unused_0[2];
  __le32 offset;
  __le32 len;
  u8 unused_1[4];
};

struct hwrm_nvm_get_dir_entries_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_dest_addr;
};

struct hwrm_nvm_get_dir_info_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_nvm_get_dir_info_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 entries;
  __le32 entry_length;
  u8 unused_0[7];
  u8 valid;
};

struct hwrm_nvm_write_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_src_addr;
  __le16 dir_type;
  __le16 dir_ordinal;
  __le16 dir_ext;
  __le16 dir_attr;
  __le32 dir_data_length;
  __le16 option;
  __le16 flags;
  __le32 dir_item_length;
  __le32 offset;
  __le32 len;
  __le32 unused_0;
};

struct hwrm_nvm_modify_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_src_addr;
  __le16 dir_idx;
  __le16 flags;
  __le32 offset;
  __le32 len;
  u8 unused_1[4];
};

struct hwrm_nvm_find_dir_entry_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  __le16 dir_idx;
  __le16 dir_type;
  __le16 dir_ordinal;
  __le16 dir_ext;
  u8 opt_ordinal;
  u8 unused_0[3];
};

struct hwrm_nvm_find_dir_entry_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le32 dir_item_length;
  __le32 dir_data_length;
  __le32 fw_ver;
  __le16 dir_ordinal;
  __le16 dir_idx;
  u8 unused_0[7];
  u8 valid;
};

struct hwrm_nvm_erase_dir_entry_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 dir_idx;
  u8 unused_0[6];
};

struct hwrm_nvm_get_dev_info_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_nvm_install_update_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 install_type;
  __le16 flags;
  u8 unused_0[2];
};

struct hwrm_nvm_install_update_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le64 installed_items;
  u8 result;
  u8 problem_item;
  u8 reset_required;
  u8 unused_0[4];
  u8 valid;
};

struct hwrm_selftest_qlist_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct hwrm_selftest_qlist_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 num_tests;
  u8 available_tests;
  u8 offline_tests;
  u8 unused_0;
  __le16 test_timeout;
  u8 unused_1[2];
  char test0_name[32];
  char test1_name[32];
  char test2_name[32];
  char test3_name[32];
  char test4_name[32];
  char test5_name[32];
  char test6_name[32];
  char test7_name[32];
  u8 eyescope_target_BER_support;
  u8 unused_2[6];
  u8 valid;
};

struct hwrm_selftest_exec_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 flags;
  u8 unused_0[7];
};

struct hwrm_selftest_exec_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 requested_tests;
  u8 test_success;
  u8 unused_0[5];
  u8 valid;
};

struct hwrm_selftest_irq_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
};

struct bnxt_led_cfg {
  u8 led_id;
  u8 led_state;
  u8 led_color;
  u8 unused;
  __le16 led_blink_on;
  __le16 led_blink_off;
  u8 led_group_id;
  u8 rsvd;
};

struct bnxt_coredump {
  void* data;
  int data_size;
  u16 total_segs;
};

struct bnxt_hwrm_dbg_dma_info {
  void* dest_buf;
  int dest_buf_size;
  u16 dma_len;
  u16 seq_off;
  u16 data_len_off;
  u16 segs;
  u32 seg_start;
  u32 buf_len;
};

struct hwrm_dbg_cmn_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 host_dest_addr;
  __le32 host_buf_len;
};

struct hwrm_dbg_cmn_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 flags;
};

enum bnxt_nvm_directory_type {
  BNX_DIR_TYPE_UNUSED = 0,
  BNX_DIR_TYPE_PKG_LOG = 1,
  BNX_DIR_TYPE_UPDATE = 2,
  BNX_DIR_TYPE_CHIMP_PATCH = 3,
  BNX_DIR_TYPE_BOOTCODE = 4,
  BNX_DIR_TYPE_VPD = 5,
  BNX_DIR_TYPE_EXP_ROM_MBA = 6,
  BNX_DIR_TYPE_AVS = 7,
  BNX_DIR_TYPE_PCIE = 8,
  BNX_DIR_TYPE_PORT_MACRO = 9,
  BNX_DIR_TYPE_APE_FW = 10,
  BNX_DIR_TYPE_APE_PATCH = 11,
  BNX_DIR_TYPE_KONG_FW = 12,
  BNX_DIR_TYPE_KONG_PATCH = 13,
  BNX_DIR_TYPE_BONO_FW = 14,
  BNX_DIR_TYPE_BONO_PATCH = 15,
  BNX_DIR_TYPE_TANG_FW = 16,
  BNX_DIR_TYPE_TANG_PATCH = 17,
  BNX_DIR_TYPE_BOOTCODE_2 = 18,
  BNX_DIR_TYPE_CCM = 19,
  BNX_DIR_TYPE_PCI_CFG = 20,
  BNX_DIR_TYPE_TSCF_UCODE = 21,
  BNX_DIR_TYPE_ISCSI_BOOT = 22,
  BNX_DIR_TYPE_ISCSI_BOOT_IPV6 = 24,
  BNX_DIR_TYPE_ISCSI_BOOT_IPV4N6 = 25,
  BNX_DIR_TYPE_ISCSI_BOOT_CFG6 = 26,
  BNX_DIR_TYPE_EXT_PHY = 27,
  BNX_DIR_TYPE_SHARED_CFG = 40,
  BNX_DIR_TYPE_PORT_CFG = 41,
  BNX_DIR_TYPE_FUNC_CFG = 42,
  BNX_DIR_TYPE_MGMT_CFG = 48,
  BNX_DIR_TYPE_MGMT_DATA = 49,
  BNX_DIR_TYPE_MGMT_WEB_DATA = 50,
  BNX_DIR_TYPE_MGMT_WEB_META = 51,
  BNX_DIR_TYPE_MGMT_EVENT_LOG = 52,
  BNX_DIR_TYPE_MGMT_AUDIT_LOG = 53,
};

enum bnxnvm_pkglog_field_index {
  BNX_PKG_LOG_FIELD_IDX_INSTALLED_TIMESTAMP = 0,
  BNX_PKG_LOG_FIELD_IDX_PKG_DESCRIPTION = 1,
  BNX_PKG_LOG_FIELD_IDX_PKG_VERSION = 2,
  BNX_PKG_LOG_FIELD_IDX_PKG_TIMESTAMP = 3,
  BNX_PKG_LOG_FIELD_IDX_PKG_CHECKSUM = 4,
  BNX_PKG_LOG_FIELD_IDX_INSTALLED_ITEMS = 5,
  BNX_PKG_LOG_FIELD_IDX_INSTALLED_MASK = 6,
};

enum SUPPORTED_FAMILY {
  DEVICE_5702_3_4_FAMILY = 0,
  DEVICE_5705_FAMILY = 1,
  DEVICE_SHASTA_FAMILY = 2,
  DEVICE_5706_FAMILY = 3,
  DEVICE_5714_FAMILY = 4,
  DEVICE_STANFORD_FAMILY = 5,
  DEVICE_STANFORD_ME_FAMILY = 6,
  DEVICE_SOLEDAD_FAMILY = 7,
  DEVICE_CILAI_FAMILY = 8,
  DEVICE_ASPEN_FAMILY = 9,
  DEVICE_ASPEN_PLUS_FAMILY = 10,
  DEVICE_LOGAN_FAMILY = 11,
  DEVICE_LOGAN_5762 = 12,
  DEVICE_LOGAN_57767 = 13,
  DEVICE_LOGAN_57787 = 14,
  DEVICE_LOGAN_5725 = 15,
  DEVICE_SAWTOOTH_FAMILY = 16,
  DEVICE_COTOPAXI_FAMILY = 17,
  DEVICE_SNAGGLETOOTH_FAMILY = 18,
  DEVICE_CUMULUS_FAMILY = 19,
  MAX_DEVICE_FAMILY = 20,
};

enum SUPPORTED_CODE {
  CODE_ASF1 = 0,
  CODE_ASF2 = 1,
  CODE_PASSTHRU = 2,
  CODE_PT_SEC = 3,
  CODE_UMP = 4,
  CODE_BOOT = 5,
  CODE_DASH = 6,
  CODE_MCTP_PASSTHRU = 7,
  CODE_PM_OFFLOAD = 8,
  CODE_MDNS_SD_OFFLOAD = 9,
  CODE_DISC_OFFLOAD = 10,
  CODE_MUSTANG = 11,
  CODE_ARP_BATCH = 12,
  CODE_SMASH = 13,
  CODE_APE_DIAG = 14,
  CODE_APE_PATCH = 15,
  CODE_TANG_PATCH = 16,
  CODE_KONG_FW = 17,
  CODE_KONG_PATCH = 18,
  CODE_BONO_FW = 19,
  CODE_BONO_PATCH = 20,
  CODE_CHIMP_PATCH = 21,
  MAX_CODE_TYPE = 22,
};

struct bnxt_fw_header {
  __le32 signature;
  u8 flags;
  u8 code_type;
  u8 device;
  u8 media;
  u8 version[16];
  u8 build;
  u8 revision;
  u8 minor_ver;
  u8 major_ver;
};

struct bnxt_ucode_trailer {
  u8 rsa_sig[256];
  __le16 flags;
  u8 version_format;
  u8 version_length;
  u8 version[16];
  __le16 dir_type;
  __le16 trailer_length;
  __le32 sig;
  __le32 chksum;
};

struct bnxt_coredump_segment_hdr {
  __u8 signature[4];
  __le32 component_id;
  __le32 segment_id;
  __le32 flags;
  __u8 low_version;
  __u8 high_version;
  __le16 function_id;
  __le32 offset;
  __le32 length;
  __le32 status;
  __le32 duration;
  __le32 data_offset;
  __le32 instance;
  __le32 rsvd[5];
};

struct bnxt_coredump_record {
  __u8 signature[4];
  __le32 flags;
  __u8 low_version;
  __u8 high_version;
  __u8 asic_state;
  __u8 rsvd0[5];
  char system_name[32];
  __le16 year;
  __le16 month;
  __le16 day;
  __le16 hour;
  __le16 minute;
  __le16 second;
  __le16 utc_bias;
  __le16 rsvd1;
  char commandline[256];
  __le32 total_segments;
  __le32 os_ver_major;
  __le32 os_ver_minor;
  __le32 rsvd2;
  char os_name[32];
  __le16 end_year;
  __le16 end_month;
  __le16 end_day;
  __le16 end_hour;
  __le16 end_minute;
  __le16 end_second;
  __le16 end_utc_bias;
  __le32 asic_id1;
  __le32 asic_id2;
  __le32 coredump_status;
  __u8 ioctl_low_version;
  __u8 ioctl_high_version;
  __le16 rsvd3[313];
};

enum {
  RX_TOTAL_DISCARDS = 0,
  TX_TOTAL_DISCARDS = 1,
  RX_NETPOLL_DISCARDS = 2,
};

struct pps_event_time {
  struct timespec64 ts_real;
};

enum ptp_clock_events {
  PTP_CLOCK_ALARM = 0,
  PTP_CLOCK_EXTTS = 1,
  PTP_CLOCK_PPS = 2,
  PTP_CLOCK_PPSUSR = 3,
};

struct ptp_clock_event {
  int type;
  int index;
  union {
    u64 timestamp;
    struct pps_event_time pps_times;
  };
};

struct hwtstamp_config {
  int flags;
  int tx_type;
  int rx_filter;
};

struct clock_identity {
  u8 id[8];
};

struct port_identity {
  struct clock_identity clock_identity;
  __be16 port_number;
};

struct ptp_header {
  u8 tsmt;
  u8 ver;
  __be16 message_length;
  u8 domain_number;
  u8 reserved1;
  u8 flag_field[2];
  __be64 correction;
  __be32 reserved2;
  struct port_identity source_port_identity;
  __be16 sequence_id;
  u8 control;
  u8 log_message_interval;
} __attribute__((packed));

struct hwrm_func_ptp_pin_qcfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  u8 unused_0[8];
};

struct hwrm_func_ptp_pin_qcfg_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  u8 num_pins;
  u8 state;
  u8 pin0_usage;
  u8 pin1_usage;
  u8 pin2_usage;
  u8 pin3_usage;
  u8 unused_0;
  u8 valid;
};

struct hwrm_func_ptp_pin_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 enables;
  u8 pin0_state;
  u8 pin0_usage;
  u8 pin1_state;
  u8 pin1_usage;
  u8 pin2_state;
  u8 pin2_usage;
  u8 pin3_state;
  u8 pin3_usage;
  u8 unused_0[4];
};

struct hwrm_func_ptp_cfg_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le16 enables;
  u8 ptp_pps_event;
  u8 ptp_freq_adj_dll_source;
  u8 ptp_freq_adj_dll_phase;
  u8 unused_0[3];
  __le32 ptp_freq_adj_ext_period;
  __le32 ptp_freq_adj_ext_up;
  __le32 ptp_freq_adj_ext_phase_lower;
  __le32 ptp_freq_adj_ext_phase_upper;
};

struct hwrm_port_ts_query_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le32 flags;
  __le16 port_id;
  u8 unused_0[2];
  __le16 enables;
  __le16 ts_req_timeout;
  __le32 ptp_seq_id;
  __le16 ptp_hdr_offset;
  u8 unused_1[6];
};

struct hwrm_port_ts_query_output {
  __le16 error_code;
  __le16 req_type;
  __le16 seq_id;
  __le16 resp_len;
  __le64 ptp_msg_ts;
  __le16 ptp_msg_seqid;
  u8 unused_0[5];
  u8 valid;
};

enum devlink_param_cmode {
  DEVLINK_PARAM_CMODE_RUNTIME = 0,
  DEVLINK_PARAM_CMODE_DRIVERINIT = 1,
  DEVLINK_PARAM_CMODE_PERMANENT = 2,
  __DEVLINK_PARAM_CMODE_MAX = 3,
  DEVLINK_PARAM_CMODE_MAX = 2,
};

enum devlink_param_type {
  DEVLINK_PARAM_TYPE_U8 = 0,
  DEVLINK_PARAM_TYPE_U16 = 1,
  DEVLINK_PARAM_TYPE_U32 = 2,
  DEVLINK_PARAM_TYPE_STRING = 3,
  DEVLINK_PARAM_TYPE_BOOL = 4,
};

union devlink_param_value {
  u8 vu8;
  u16 vu16;
  u32 vu32;
  char vstr[32];
  bool vbool;
};

struct devlink_param_gset_ctx {
  union devlink_param_value val;
  enum devlink_param_cmode cmode;
};

struct devlink_param {
  u32 id;
  const char* name;
  bool generic;
  enum devlink_param_type type;
  long unsigned int supported_cmodes;
  int (*get)(struct devlink*, u32, struct devlink_param_gset_ctx*);
  int (*set)(struct devlink*, u32, struct devlink_param_gset_ctx*);
  int (*validate)(
      struct devlink*,
      u32,
      union devlink_param_value,
      struct netlink_ext_ack*);
};

enum devlink_param_generic_id {
  DEVLINK_PARAM_GENERIC_ID_INT_ERR_RESET = 0,
  DEVLINK_PARAM_GENERIC_ID_MAX_MACS = 1,
  DEVLINK_PARAM_GENERIC_ID_ENABLE_SRIOV = 2,
  DEVLINK_PARAM_GENERIC_ID_REGION_SNAPSHOT = 3,
  DEVLINK_PARAM_GENERIC_ID_IGNORE_ARI = 4,
  DEVLINK_PARAM_GENERIC_ID_MSIX_VEC_PER_PF_MAX = 5,
  DEVLINK_PARAM_GENERIC_ID_MSIX_VEC_PER_PF_MIN = 6,
  DEVLINK_PARAM_GENERIC_ID_FW_LOAD_POLICY = 7,
  DEVLINK_PARAM_GENERIC_ID_RESET_DEV_ON_DRV_PROBE = 8,
  DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE = 9,
  DEVLINK_PARAM_GENERIC_ID_ENABLE_REMOTE_DEV_RESET = 10,
  __DEVLINK_PARAM_GENERIC_ID_MAX = 11,
  DEVLINK_PARAM_GENERIC_ID_MAX = 10,
};

enum devlink_health_reporter_state {
  DEVLINK_HEALTH_REPORTER_STATE_HEALTHY = 0,
  DEVLINK_HEALTH_REPORTER_STATE_ERROR = 1,
};

struct devlink_fmsg;

struct devlink_health_reporter_ops {
  char* name;
  int (*recover)(
      struct devlink_health_reporter*,
      void*,
      struct netlink_ext_ack*);
  int (*dump)(
      struct devlink_health_reporter*,
      struct devlink_fmsg*,
      void*,
      struct netlink_ext_ack*);
  int (*diagnose)(
      struct devlink_health_reporter*,
      struct devlink_fmsg*,
      struct netlink_ext_ack*);
  int (*test)(struct devlink_health_reporter*, struct netlink_ext_ack*);
};

struct hwrm_nvm_get_variable_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 dest_data_addr;
  __le16 data_len;
  __le16 option_num;
  __le16 dimensions;
  __le16 index_0;
  __le16 index_1;
  __le16 index_2;
  __le16 index_3;
  u8 flags;
  u8 unused_0;
};

struct hwrm_nvm_set_variable_input {
  __le16 req_type;
  __le16 cmpl_ring;
  __le16 seq_id;
  __le16 target_id;
  __le64 resp_addr;
  __le64 src_data_addr;
  __le16 data_len;
  __le16 option_num;
  __le16 dimensions;
  __le16 index_0;
  __le16 index_1;
  __le16 index_2;
  __le16 index_3;
  u8 flags;
  u8 unused_0;
};

struct bnxt_fw_reporter_ctx {
  long unsigned int sp_event;
};

struct bnxt_dl {
  struct bnxt* bp;
};

enum bnxt_nvm_dir_type {
  BNXT_NVM_SHARED_CFG = 40,
  BNXT_NVM_PORT_CFG = 41,
  BNXT_NVM_FUNC_CFG = 42,
};

struct bnxt_dl_nvm_param {
  u16 id;
  u16 offset;
  u16 dir_type;
  u16 nvm_num_bits;
  u8 dl_num_bytes;
};

enum bnxt_dl_version_type {
  BNXT_VERSION_FIXED = 0,
  BNXT_VERSION_RUNNING = 1,
  BNXT_VERSION_STORED = 2,
};

enum bnxt_dl_param_id {
  BNXT_DEVLINK_PARAM_ID_BASE = 10,
  BNXT_DEVLINK_PARAM_ID_GRE_VER_CHECK = 11,
};

union bnxt_nvm_data {
  u8 val8;
  __le32 val32;
};

struct flow_dissector_key_eth_addrs {
  unsigned char dst[6];
  unsigned char src[6];
};

struct flow_match_basic {
  struct flow_dissector_key_basic* key;
  struct flow_dissector_key_basic* mask;
};

struct flow_match_eth_addrs {
  struct flow_dissector_key_eth_addrs* key;
  struct flow_dissector_key_eth_addrs* mask;
};

struct flow_match_vlan {
  struct flow_dissector_key_vlan* key;
  struct flow_dissector_key_vlan* mask;
};

struct tc_cbs_qopt_offload {
  u8 enable;
  s32 queue;
  s32 hicredit;
  s32 locredit;
  s32 idleslope;
  s32 sendslope;
};

struct tc_etf_qopt_offload {
  u8 enable;
  s32 queue;
};

struct i2c_msg {
  __u16 addr;
  __u16 flags;
  __u16 len;
  __u8* buf;
};

union i2c_smbus_data {
  __u8 byte;
  __u16 word;
  __u8 block[34];
};

struct i2c_adapter;

struct i2c_client {
  short unsigned int flags;
  short unsigned int addr;
  char name[20];
  struct i2c_adapter* adapter;
  struct device dev;
  int init_irq;
  int irq;
  struct list_head detected;
};

struct i2c_algorithm;

struct i2c_lock_operations;

struct i2c_bus_recovery_info;

struct i2c_adapter_quirks;

struct i2c_adapter {
  struct module* owner;
  unsigned int class;
  const struct i2c_algorithm* algo;
  void* algo_data;
  const struct i2c_lock_operations* lock_ops;
  struct rt_mutex bus_lock;
  struct rt_mutex mux_lock;
  int timeout;
  int retries;
  struct device dev;
  long unsigned int locked_flags;
  int nr;
  char name[48];
  struct completion dev_released;
  struct mutex userspace_clients_lock;
  struct list_head userspace_clients;
  struct i2c_bus_recovery_info* bus_recovery_info;
  const struct i2c_adapter_quirks* quirks;
  struct irq_domain* host_notify_domain;
};

struct i2c_algorithm {
  int (*master_xfer)(struct i2c_adapter*, struct i2c_msg*, int);
  int (*master_xfer_atomic)(struct i2c_adapter*, struct i2c_msg*, int);
  int (*smbus_xfer)(
      struct i2c_adapter*,
      u16,
      short unsigned int,
      char,
      u8,
      int,
      union i2c_smbus_data*);
  int (*smbus_xfer_atomic)(
      struct i2c_adapter*,
      u16,
      short unsigned int,
      char,
      u8,
      int,
      union i2c_smbus_data*);
  u32 (*functionality)(struct i2c_adapter*);
};

struct i2c_lock_operations {
  void (*lock_bus)(struct i2c_adapter*, unsigned int);
  int (*trylock_bus)(struct i2c_adapter*, unsigned int);
  void (*unlock_bus)(struct i2c_adapter*, unsigned int);
};

struct pinctrl;

struct pinctrl_state;

struct i2c_bus_recovery_info {
  int (*recover_bus)(struct i2c_adapter*);
  int (*get_scl)(struct i2c_adapter*);
  void (*set_scl)(struct i2c_adapter*, int);
  int (*get_sda)(struct i2c_adapter*);
  void (*set_sda)(struct i2c_adapter*, int);
  int (*get_bus_free)(struct i2c_adapter*);
  void (*prepare_recovery)(struct i2c_adapter*);
  void (*unprepare_recovery)(struct i2c_adapter*);
  struct gpio_desc* scl_gpiod;
  struct gpio_desc* sda_gpiod;
  struct pinctrl* pinctrl;
  struct pinctrl_state* pins_default;
  struct pinctrl_state* pins_gpio;
};

struct i2c_adapter_quirks {
  u64 flags;
  int max_num_msgs;
  u16 max_write_len;
  u16 max_read_len;
  u16 max_comb_1st_msg_len;
  u16 max_comb_2nd_msg_len;
};

enum e1000_mac_type {
  e1000_undefined = 0,
  e1000_82575 = 1,
  e1000_82576 = 2,
  e1000_82580 = 3,
  e1000_i350 = 4,
  e1000_i354 = 5,
  e1000_i210 = 6,
  e1000_i211 = 7,
  e1000_num_macs = 8,
};

enum e1000_media_type {
  e1000_media_type_unknown = 0,
  e1000_media_type_copper = 1,
  e1000_media_type_fiber = 2,
  e1000_media_type_internal_serdes = 3,
  e1000_num_media_types = 4,
};

enum e1000_nvm_type {
  e1000_nvm_unknown = 0,
  e1000_nvm_none = 1,
  e1000_nvm_eeprom_spi = 2,
  e1000_nvm_flash_hw = 3,
  e1000_nvm_invm = 4,
  e1000_nvm_flash_sw = 5,
};

enum e1000_nvm_override {
  e1000_nvm_override_none = 0,
  e1000_nvm_override_spi_small = 1,
  e1000_nvm_override_spi_large = 2,
};

enum e1000_phy_type {
  e1000_phy_unknown = 0,
  e1000_phy_none = 1,
  e1000_phy_m88 = 2,
  e1000_phy_igp = 3,
  e1000_phy_igp_2 = 4,
  e1000_phy_gg82563 = 5,
  e1000_phy_igp_3 = 6,
  e1000_phy_ife = 7,
  e1000_phy_82580 = 8,
  e1000_phy_i210 = 9,
  e1000_phy_bcm54616 = 10,
};

enum e1000_bus_type {
  e1000_bus_type_unknown = 0,
  e1000_bus_type_pci = 1,
  e1000_bus_type_pcix = 2,
  e1000_bus_type_pci_express = 3,
  e1000_bus_type_reserved = 4,
};

enum e1000_bus_speed {
  e1000_bus_speed_unknown = 0,
  e1000_bus_speed_33 = 1,
  e1000_bus_speed_66 = 2,
  e1000_bus_speed_100 = 3,
  e1000_bus_speed_120 = 4,
  e1000_bus_speed_133 = 5,
  e1000_bus_speed_2500 = 6,
  e1000_bus_speed_5000 = 7,
  e1000_bus_speed_reserved = 8,
};

enum e1000_bus_width {
  e1000_bus_width_unknown = 0,
  e1000_bus_width_pcie_x1 = 1,
  e1000_bus_width_pcie_x2 = 2,
  e1000_bus_width_pcie_x4 = 4,
  e1000_bus_width_pcie_x8 = 8,
  e1000_bus_width_32 = 9,
  e1000_bus_width_64 = 10,
  e1000_bus_width_reserved = 11,
};

enum e1000_1000t_rx_status {
  e1000_1000t_rx_status_not_ok = 0,
  e1000_1000t_rx_status_ok = 1,
  e1000_1000t_rx_status_undefined = 255,
};

enum e1000_rev_polarity {
  e1000_rev_polarity_normal = 0,
  e1000_rev_polarity_reversed = 1,
  e1000_rev_polarity_undefined = 255,
};

enum e1000_fc_mode {
  e1000_fc_none = 0,
  e1000_fc_rx_pause = 1,
  e1000_fc_tx_pause = 2,
  e1000_fc_full = 3,
  e1000_fc_default = 255,
};

struct e1000_hw_stats {
  u64 crcerrs;
  u64 algnerrc;
  u64 symerrs;
  u64 rxerrc;
  u64 mpc;
  u64 scc;
  u64 ecol;
  u64 mcc;
  u64 latecol;
  u64 colc;
  u64 dc;
  u64 tncrs;
  u64 sec;
  u64 cexterr;
  u64 rlec;
  u64 xonrxc;
  u64 xontxc;
  u64 xoffrxc;
  u64 xofftxc;
  u64 fcruc;
  u64 prc64;
  u64 prc127;
  u64 prc255;
  u64 prc511;
  u64 prc1023;
  u64 prc1522;
  u64 gprc;
  u64 bprc;
  u64 mprc;
  u64 gptc;
  u64 gorc;
  u64 gotc;
  u64 rnbc;
  u64 ruc;
  u64 rfc;
  u64 roc;
  u64 rjc;
  u64 mgprc;
  u64 mgpdc;
  u64 mgptc;
  u64 tor;
  u64 tot;
  u64 tpr;
  u64 tpt;
  u64 ptc64;
  u64 ptc127;
  u64 ptc255;
  u64 ptc511;
  u64 ptc1023;
  u64 ptc1522;
  u64 mptc;
  u64 bptc;
  u64 tsctc;
  u64 tsctfc;
  u64 iac;
  u64 icrxptc;
  u64 icrxatc;
  u64 ictxptc;
  u64 ictxatc;
  u64 ictxqec;
  u64 ictxqmtc;
  u64 icrxdmtc;
  u64 icrxoc;
  u64 cbtmpc;
  u64 htdpmc;
  u64 cbrdpc;
  u64 cbrmpc;
  u64 rpthc;
  u64 hgptc;
  u64 htcbdpc;
  u64 hgorc;
  u64 hgotc;
  u64 lenerrs;
  u64 scvpc;
  u64 hrmpc;
  u64 doosync;
  u64 o2bgptc;
  u64 o2bspc;
  u64 b2ospc;
  u64 b2ogprc;
};

struct e1000_host_mng_dhcp_cookie {
  u32 signature;
  u8 status;
  u8 reserved0;
  u16 vlan_id;
  u32 reserved1;
  u16 reserved2;
  u8 reserved3;
  u8 checksum;
};

enum e1000_ms_type {
  e1000_ms_hw_default = 0,
  e1000_ms_force_master = 1,
  e1000_ms_force_slave = 2,
  e1000_ms_auto = 3,
};

enum e1000_smart_speed {
  e1000_smart_speed_default = 0,
  e1000_smart_speed_on = 1,
  e1000_smart_speed_off = 2,
};

struct e1000_sfp_flags {
  u8 e1000_base_sx : 1;
  u8 e1000_base_lx : 1;
  u8 e1000_base_cx : 1;
  u8 e1000_base_t : 1;
  u8 e100_base_lx : 1;
  u8 e100_base_fx : 1;
  u8 e10_base_bx10 : 1;
  u8 e10_base_px : 1;
};

struct e1000_fw_version {
  u32 etrack_id;
  u16 eep_major;
  u16 eep_minor;
  u16 eep_build;
  u8 invm_major;
  u8 invm_minor;
  u8 invm_img_type;
  bool or_valid;
  u16 or_major;
  u16 or_build;
  u16 or_patch;
};

struct e1000_hw;

struct e1000_mac_operations {
  s32 (*check_for_link)(struct e1000_hw*);
  s32 (*reset_hw)(struct e1000_hw*);
  s32 (*init_hw)(struct e1000_hw*);
  bool (*check_mng_mode)(struct e1000_hw*);
  s32 (*setup_physical_interface)(struct e1000_hw*);
  void (*rar_set)(struct e1000_hw*, u8*, u32);
  s32 (*read_mac_addr)(struct e1000_hw*);
  s32 (*get_speed_and_duplex)(struct e1000_hw*, u16*, u16*);
  s32 (*acquire_swfw_sync)(struct e1000_hw*, u16);
  void (*release_swfw_sync)(struct e1000_hw*, u16);
  s32 (*get_thermal_sensor_data)(struct e1000_hw*);
  s32 (*init_thermal_sensor_thresh)(struct e1000_hw*);
  void (*write_vfta)(struct e1000_hw*, u32, u32);
};

struct e1000_thermal_diode_data {
  u8 location;
  u8 temp;
  u8 caution_thresh;
  u8 max_op_thresh;
};

struct e1000_thermal_sensor_data {
  struct e1000_thermal_diode_data sensor[3];
};

struct e1000_mac_info {
  struct e1000_mac_operations ops;
  u8 addr[6];
  u8 perm_addr[6];
  enum e1000_mac_type type;
  u32 ledctl_default;
  u32 ledctl_mode1;
  u32 ledctl_mode2;
  u32 mc_filter_type;
  u32 txcw;
  u16 mta_reg_count;
  u16 uta_reg_count;
  u32 mta_shadow[128];
  u16 rar_entry_count;
  u8 forced_speed_duplex;
  bool adaptive_ifs;
  bool arc_subsystem_valid;
  bool asf_firmware_present;
  bool autoneg;
  bool autoneg_failed;
  bool disable_hw_init_bits;
  bool get_link_status;
  bool ifs_params_forced;
  bool in_ifs_mode;
  bool report_tx_early;
  bool serdes_has_link;
  bool tx_pkt_filtering;
  struct e1000_thermal_sensor_data thermal_sensor_data;
};

struct e1000_fc_info {
  u32 high_water;
  u32 low_water;
  u16 pause_time;
  bool send_xon;
  bool strict_ieee;
  enum e1000_fc_mode current_mode;
  enum e1000_fc_mode requested_mode;
};

struct e1000_phy_operations {
  s32 (*acquire)(struct e1000_hw*);
  s32 (*check_polarity)(struct e1000_hw*);
  s32 (*check_reset_block)(struct e1000_hw*);
  s32 (*force_speed_duplex)(struct e1000_hw*);
  s32 (*get_cfg_done)(struct e1000_hw*);
  s32 (*get_cable_length)(struct e1000_hw*);
  s32 (*get_phy_info)(struct e1000_hw*);
  s32 (*read_reg)(struct e1000_hw*, u32, u16*);
  void (*release)(struct e1000_hw*);
  s32 (*reset)(struct e1000_hw*);
  s32 (*set_d0_lplu_state)(struct e1000_hw*, bool);
  s32 (*set_d3_lplu_state)(struct e1000_hw*, bool);
  s32 (*write_reg)(struct e1000_hw*, u32, u16);
  s32 (*read_i2c_byte)(struct e1000_hw*, u8, u8, u8*);
  s32 (*write_i2c_byte)(struct e1000_hw*, u8, u8, u8);
};

struct e1000_phy_info {
  struct e1000_phy_operations ops;
  enum e1000_phy_type type;
  enum e1000_1000t_rx_status local_rx;
  enum e1000_1000t_rx_status remote_rx;
  enum e1000_ms_type ms_type;
  enum e1000_ms_type original_ms_type;
  enum e1000_rev_polarity cable_polarity;
  enum e1000_smart_speed smart_speed;
  u32 addr;
  u32 id;
  u32 reset_delay_us;
  u32 revision;
  enum e1000_media_type media_type;
  u16 autoneg_advertised;
  u16 autoneg_mask;
  u16 cable_length;
  u16 max_cable_length;
  u16 min_cable_length;
  u16 pair_length[4];
  u8 mdix;
  bool disable_polarity_correction;
  bool is_mdix;
  bool polarity_correction;
  bool reset_disable;
  bool speed_downgraded;
  bool autoneg_wait_to_complete;
};

struct e1000_nvm_operations {
  s32 (*acquire)(struct e1000_hw*);
  s32 (*read)(struct e1000_hw*, u16, u16, u16*);
  void (*release)(struct e1000_hw*);
  s32 (*write)(struct e1000_hw*, u16, u16, u16*);
  s32 (*update)(struct e1000_hw*);
  s32 (*validate)(struct e1000_hw*);
  s32 (*valid_led_default)(struct e1000_hw*, u16*);
};

struct e1000_nvm_info {
  struct e1000_nvm_operations ops;
  enum e1000_nvm_type type;
  enum e1000_nvm_override override;
  u32 flash_bank_size;
  u32 flash_base_addr;
  u16 word_size;
  u16 delay_usec;
  u16 address_bits;
  u16 opcode_bits;
  u16 page_size;
};

struct e1000_bus_info {
  enum e1000_bus_type type;
  enum e1000_bus_speed speed;
  enum e1000_bus_width width;
  u32 snoop;
  u16 func;
  u16 pci_cmd_word;
};

struct e1000_mbx_operations {
  s32 (*init_params)(struct e1000_hw*);
  s32 (*read)(struct e1000_hw*, u32*, u16, u16, bool);
  s32 (*write)(struct e1000_hw*, u32*, u16, u16);
  s32 (*read_posted)(struct e1000_hw*, u32*, u16, u16);
  s32 (*write_posted)(struct e1000_hw*, u32*, u16, u16);
  s32 (*check_for_msg)(struct e1000_hw*, u16);
  s32 (*check_for_ack)(struct e1000_hw*, u16);
  s32 (*check_for_rst)(struct e1000_hw*, u16);
  s32 (*unlock)(struct e1000_hw*, u16);
};

struct e1000_mbx_stats {
  u32 msgs_tx;
  u32 msgs_rx;
  u32 acks;
  u32 reqs;
  u32 rsts;
};

struct e1000_mbx_info {
  struct e1000_mbx_operations ops;
  struct e1000_mbx_stats stats;
  u32 timeout;
  u32 usec_delay;
  u16 size;
};

struct e1000_dev_spec_82575 {
  bool sgmii_active;
  bool global_device_reset;
  bool eee_disable;
  bool clear_semaphore_once;
  struct e1000_sfp_flags eth_flags;
  bool module_plugged;
  u8 media_port;
  bool media_changed;
  bool mas_capable;
};

struct e1000_hw {
  void* back;
  u8* hw_addr;
  u8* flash_address;
  long unsigned int io_base;
  struct e1000_mac_info mac;
  struct e1000_fc_info fc;
  struct e1000_phy_info phy;
  struct e1000_nvm_info nvm;
  struct e1000_bus_info bus;
  struct e1000_mbx_info mbx;
  struct e1000_host_mng_dhcp_cookie mng_cookie;
  union {
    struct e1000_dev_spec_82575 _82575;
  } dev_spec;
  u16 device_id;
  u16 subsystem_vendor_id;
  u16 subsystem_device_id;
  u16 vendor_id;
  u8 revision_id;
};

struct e1000_info {
  s32 (*get_invariants)(struct e1000_hw*);
  struct e1000_mac_operations* mac_ops;
  const struct e1000_phy_operations* phy_ops;
  struct e1000_nvm_operations* nvm_ops;
};

union e1000_adv_rx_desc {
  struct {
    __le64 pkt_addr;
    __le64 hdr_addr;
  } read;
  struct {
    struct {
      struct {
        __le16 pkt_info;
        __le16 hdr_info;
      } lo_dword;
      union {
        __le32 rss;
        struct {
          __le16 ip_id;
          __le16 csum;
        } csum_ip;
      } hi_dword;
    } lower;
    struct {
      __le32 status_error;
      __le16 length;
      __le16 vlan;
    } upper;
  } wb;
};

union e1000_adv_tx_desc {
  struct {
    __le64 buffer_addr;
    __le32 cmd_type_len;
    __le32 olinfo_status;
  } read;
  struct {
    __le64 rsvd;
    __le32 nxtseq_seed;
    __le32 status;
  } wb;
};

struct e1000_adv_tx_context_desc {
  __le32 vlan_macip_lens;
  __le32 seqnum_seed;
  __le32 type_tucmd_mlhl;
  __le32 mss_l4len_idx;
};

struct i2c_algo_bit_data {
  void* data;
  void (*setsda)(void*, int);
  void (*setscl)(void*, int);
  int (*getsda)(void*);
  int (*getscl)(void*);
  int (*pre_xfer)(struct i2c_adapter*);
  void (*post_xfer)(struct i2c_adapter*);
  int udelay;
  int timeout;
  bool can_do_atomic;
};

struct vf_data_storage {
  unsigned char vf_mac_addresses[6];
  u16 vf_mc_hashes[30];
  u16 num_vf_mc_hashes;
  u32 flags;
  long unsigned int last_nack;
  u16 pf_vlan;
  u16 pf_qos;
  u16 tx_rate;
  bool spoofchk_enabled;
  bool trusted;
};

struct vf_mac_filter {
  struct list_head l;
  int vf;
  bool free;
  u8 vf_mac[6];
};

enum igb_tx_flags {
  IGB_TX_FLAGS_VLAN = 1,
  IGB_TX_FLAGS_TSO = 2,
  IGB_TX_FLAGS_TSTAMP = 4,
  IGB_TX_FLAGS_IPV4 = 16,
  IGB_TX_FLAGS_CSUM = 32,
};

enum igb_tx_buf_type {
  IGB_TYPE_SKB = 0,
  IGB_TYPE_XDP = 1,
};

struct igb_tx_buffer {
  union e1000_adv_tx_desc* next_to_watch;
  long unsigned int time_stamp;
  enum igb_tx_buf_type type;
  union {
    struct sk_buff* skb;
    struct xdp_frame* xdpf;
  };
  unsigned int bytecount;
  u16 gso_segs;
  __be16 protocol;
  dma_addr_t dma;
  __u32 len;
  u32 tx_flags;
};

struct igb_rx_buffer {
  dma_addr_t dma;
  struct page* page;
  __u32 page_offset;
  __u16 pagecnt_bias;
};

struct igb_tx_queue_stats {
  u64 packets;
  u64 bytes;
  u64 restart_queue;
  u64 restart_queue2;
};

struct igb_rx_queue_stats {
  u64 packets;
  u64 bytes;
  u64 drops;
  u64 csum_err;
  u64 alloc_failed;
};

struct igb_ring;

struct igb_ring_container {
  struct igb_ring* ring;
  unsigned int total_bytes;
  unsigned int total_packets;
  u16 work_limit;
  u8 count;
  u8 itr;
};

struct igb_q_vector;

struct igb_ring {
  struct igb_q_vector* q_vector;
  struct net_device* netdev;
  struct bpf_prog* xdp_prog;
  struct device* dev;
  union {
    struct igb_tx_buffer* tx_buffer_info;
    struct igb_rx_buffer* rx_buffer_info;
  };
  void* desc;
  long unsigned int flags;
  void* tail;
  dma_addr_t dma;
  unsigned int size;
  u16 count;
  u8 queue_index;
  u8 reg_idx;
  bool launchtime_enable;
  bool cbs_enable;
  s32 idleslope;
  s32 sendslope;
  s32 hicredit;
  s32 locredit;
  u16 next_to_clean;
  u16 next_to_use;
  u16 next_to_alloc;
  union {
    struct {
      struct igb_tx_queue_stats tx_stats;
      struct u64_stats_sync tx_syncp;
      struct u64_stats_sync tx_syncp2;
    };
    struct {
      struct sk_buff* skb;
      struct igb_rx_queue_stats rx_stats;
      struct u64_stats_sync rx_syncp;
    };
  };
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct xdp_rxq_info xdp_rxq;
};

struct igb_adapter;

struct igb_q_vector {
  struct igb_adapter* adapter;
  int cpu;
  u32 eims_value;
  u16 itr_val;
  u8 set_itr;
  void* itr_register;
  struct igb_ring_container rx;
  struct igb_ring_container tx;
  struct napi_struct napi;
  struct callback_head rcu;
  char name[25];
  long : 56;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct igb_ring ring[0];
};

struct hwmon_buff;

struct igb_mac_addr;

struct igb_adapter {
  long unsigned int active_vlans[64];
  struct net_device* netdev;
  struct bpf_prog* xdp_prog;
  long unsigned int state;
  unsigned int flags;
  unsigned int num_q_vectors;
  struct msix_entry msix_entries[10];
  u32 rx_itr_setting;
  u32 tx_itr_setting;
  u16 tx_itr;
  u16 rx_itr;
  u16 tx_work_limit;
  u32 tx_timeout_count;
  int num_tx_queues;
  struct igb_ring* tx_ring[16];
  int num_rx_queues;
  struct igb_ring* rx_ring[16];
  u32 max_frame_size;
  u32 min_frame_size;
  struct timer_list watchdog_timer;
  struct timer_list phy_info_timer;
  u16 mng_vlan_id;
  u32 bd_number;
  u32 wol;
  u32 en_mng_pt;
  u16 link_speed;
  u16 link_duplex;
  u8* io_addr;
  struct work_struct reset_task;
  struct work_struct watchdog_task;
  bool fc_autoneg;
  u8 tx_timeout_factor;
  struct timer_list blink_timer;
  long unsigned int led_status;
  struct pci_dev* pdev;
  spinlock_t stats64_lock;
  struct rtnl_link_stats64 stats64;
  struct e1000_hw hw;
  struct e1000_hw_stats stats;
  struct e1000_phy_info phy_info;
  u32 test_icr;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct igb_ring test_tx_ring;
  struct igb_ring test_rx_ring;
  int msg_enable;
  struct igb_q_vector* q_vector[8];
  u32 eims_enable_mask;
  u32 eims_other;
  u16 tx_ring_count;
  u16 rx_ring_count;
  unsigned int vfs_allocated_count;
  struct vf_data_storage* vf_data;
  int vf_rate_link_speed;
  u32 rss_queues;
  u32 wvbr;
  u32* shadow_vfta;
  struct ptp_clock* ptp_clock;
  struct ptp_clock_info ptp_caps;
  struct delayed_work ptp_overflow_work;
  struct work_struct ptp_tx_work;
  struct sk_buff* ptp_tx_skb;
  struct hwtstamp_config tstamp_config;
  long unsigned int ptp_tx_start;
  long unsigned int last_rx_ptp_check;
  long unsigned int last_rx_timestamp;
  unsigned int ptp_flags;
  spinlock_t tmreg_lock;
  struct cyclecounter cc;
  struct timecounter tc;
  u32 tx_hwtstamp_timeouts;
  u32 tx_hwtstamp_skipped;
  u32 rx_hwtstamp_cleared;
  bool pps_sys_wrap_on;
  struct ptp_pin_desc sdp_config[4];
  struct {
    struct timespec64 start;
    struct timespec64 period;
  } perout[2];
  char fw_version[32];
  struct hwmon_buff* igb_hwmon_buff;
  bool ets;
  struct i2c_algo_bit_data i2c_algo;
  struct i2c_adapter i2c_adap;
  struct i2c_client* i2c_client;
  u32 rss_indir_tbl_init;
  u8 rss_indir_tbl[128];
  long unsigned int link_check_timeout;
  int copper_tries;
  struct e1000_info ei;
  u16 eee_advert;
  struct hlist_head nfc_filter_list;
  struct hlist_head cls_flower_list;
  unsigned int nfc_filter_count;
  spinlock_t nfc_lock;
  bool etype_bitmap[3];
  struct igb_mac_addr* mac_table;
  struct vf_mac_filter vf_macs;
  struct vf_mac_filter* vf_mac_list;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum e1000_ring_flags_t {
  IGB_RING_FLAG_RX_3K_BUFFER = 0,
  IGB_RING_FLAG_RX_BUILD_SKB_ENABLED = 1,
  IGB_RING_FLAG_RX_SCTP_CSUM = 2,
  IGB_RING_FLAG_RX_LB_VLAN_BSWAP = 3,
  IGB_RING_FLAG_TX_CTX_IDX = 4,
  IGB_RING_FLAG_TX_DETECT_HANG = 5,
};

struct hwmon_attr {
  struct device_attribute dev_attr;
  struct e1000_hw* hw;
  struct e1000_thermal_diode_data* sensor;
  char name[12];
};

struct hwmon_buff {
  struct attribute_group group;
  const struct attribute_group* groups[2];
  struct attribute* attrs[13];
  struct hwmon_attr hwmon_list[12];
  unsigned int n_hwmon;
};

enum igb_filter_match_flags {
  IGB_FILTER_FLAG_ETHER_TYPE = 1,
  IGB_FILTER_FLAG_VLAN_TCI = 2,
  IGB_FILTER_FLAG_SRC_MAC_ADDR = 4,
  IGB_FILTER_FLAG_DST_MAC_ADDR = 8,
};

struct igb_nfc_input {
  u8 match_flags;
  __be16 etype;
  __be16 vlan_tci;
  u8 src_addr[6];
  u8 dst_addr[6];
};

struct igb_nfc_filter {
  struct hlist_node nfc_node;
  struct igb_nfc_input filter;
  long unsigned int cookie;
  u16 etype_reg_index;
  u16 sw_idx;
  u16 action;
};

struct igb_mac_addr {
  u8 addr[6];
  u8 queue;
  u8 state;
};

enum e1000_state_t {
  __IGB_TESTING = 0,
  __IGB_RESETTING = 1,
  __IGB_DOWN = 2,
  __IGB_PTP_TX_IN_PROGRESS = 3,
};

enum igb_boards {
  board_82575 = 0,
};

enum queue_mode {
  QUEUE_MODE_STRICT_PRIORITY = 0,
  QUEUE_MODE_STREAM_RESERVATION = 1,
};

enum tx_queue_prio {
  TX_QUEUE_PRIO_HIGH = 0,
  TX_QUEUE_PRIO_LOW = 1,
};

struct igb_reg_info {
  u32 ofs;
  char* name;
};

enum latency_range {
  lowest_latency = 0,
  low_latency = 1,
  bulk_latency = 2,
  latency_invalid = 255,
};

struct my_u0 {
  u64 a;
  u64 b;
};

struct igb_stats {
  char stat_string[32];
  int sizeof_stat;
  int stat_offset;
};

enum igb_diagnostics_results {
  TEST_REG = 0,
  TEST_EEP = 1,
  TEST_IRQ = 2,
  TEST_LOOP = 3,
  TEST_LINK = 4,
};

struct igb_reg_test {
  u16 reg;
  u16 reg_offset;
  u16 array_len;
  u16 test_type;
  u32 mask;
  u32 write;
};

enum e1000_mng_mode {
  e1000_mng_mode_none = 0,
  e1000_mng_mode_asf = 1,
  e1000_mng_mode_pt = 2,
  e1000_mng_mode_ipmi = 3,
  e1000_mng_mode_host_if_only = 4,
};

enum E1000_INVM_STRUCTURE_TYPE {
  E1000_INVM_UNINITIALIZED_STRUCTURE = 0,
  E1000_INVM_WORD_AUTOLOAD_STRUCTURE = 1,
  E1000_INVM_CSR_AUTOLOAD_STRUCTURE = 2,
  E1000_INVM_PHY_REGISTER_AUTOLOAD_STRUCTURE = 3,
  E1000_INVM_RSA_KEY_SHA256_STRUCTURE = 4,
  E1000_INVM_INVALIDATED_STRUCTURE = 15,
};

struct i2c_board_info {
  char type[20];
  short unsigned int flags;
  short unsigned int addr;
  const char* dev_name;
  void* platform_data;
  struct device_node* of_node;
  struct fwnode_handle* fwnode;
  const struct property_entry* properties;
  const struct resource* resources;
  unsigned int num_resources;
  int irq;
};

typedef union {
  __be32 a4;
  __be32 a6[4];
  struct in6_addr in6;
} xfrm_address_t;

struct xfrm_id {
  xfrm_address_t daddr;
  __be32 spi;
  __u8 proto;
};

struct xfrm_sec_ctx {
  __u8 ctx_doi;
  __u8 ctx_alg;
  __u16 ctx_len;
  __u32 ctx_sid;
  char ctx_str[0];
};

struct xfrm_selector {
  xfrm_address_t daddr;
  xfrm_address_t saddr;
  __be16 dport;
  __be16 dport_mask;
  __be16 sport;
  __be16 sport_mask;
  __u16 family;
  __u8 prefixlen_d;
  __u8 prefixlen_s;
  __u8 proto;
  int ifindex;
  __kernel_uid32_t user;
};

struct xfrm_lifetime_cfg {
  __u64 soft_byte_limit;
  __u64 hard_byte_limit;
  __u64 soft_packet_limit;
  __u64 hard_packet_limit;
  __u64 soft_add_expires_seconds;
  __u64 hard_add_expires_seconds;
  __u64 soft_use_expires_seconds;
  __u64 hard_use_expires_seconds;
};

struct xfrm_lifetime_cur {
  __u64 bytes;
  __u64 packets;
  __u64 add_time;
  __u64 use_time;
};

struct xfrm_replay_state {
  __u32 oseq;
  __u32 seq;
  __u32 bitmap;
};

struct xfrm_replay_state_esn {
  unsigned int bmp_len;
  __u32 oseq;
  __u32 seq;
  __u32 oseq_hi;
  __u32 seq_hi;
  __u32 replay_window;
  __u32 bmp[0];
};

struct xfrm_algo {
  char alg_name[64];
  unsigned int alg_key_len;
  char alg_key[0];
};

struct xfrm_algo_auth {
  char alg_name[64];
  unsigned int alg_key_len;
  unsigned int alg_trunc_len;
  char alg_key[0];
};

struct xfrm_algo_aead {
  char alg_name[64];
  unsigned int alg_key_len;
  unsigned int alg_icv_len;
  char alg_key[0];
};

struct xfrm_stats {
  __u32 replay_window;
  __u32 replay;
  __u32 integrity_failed;
};

enum {
  XFRM_POLICY_TYPE_MAIN = 0,
  XFRM_POLICY_TYPE_SUB = 1,
  XFRM_POLICY_TYPE_MAX = 2,
  XFRM_POLICY_TYPE_ANY = 255,
};

struct xfrm_encap_tmpl {
  __u16 encap_type;
  __be16 encap_sport;
  __be16 encap_dport;
  xfrm_address_t encap_oa;
};

enum xfrm_attr_type_t {
  XFRMA_UNSPEC = 0,
  XFRMA_ALG_AUTH = 1,
  XFRMA_ALG_CRYPT = 2,
  XFRMA_ALG_COMP = 3,
  XFRMA_ENCAP = 4,
  XFRMA_TMPL = 5,
  XFRMA_SA = 6,
  XFRMA_POLICY = 7,
  XFRMA_SEC_CTX = 8,
  XFRMA_LTIME_VAL = 9,
  XFRMA_REPLAY_VAL = 10,
  XFRMA_REPLAY_THRESH = 11,
  XFRMA_ETIMER_THRESH = 12,
  XFRMA_SRCADDR = 13,
  XFRMA_COADDR = 14,
  XFRMA_LASTUSED = 15,
  XFRMA_POLICY_TYPE = 16,
  XFRMA_MIGRATE = 17,
  XFRMA_ALG_AEAD = 18,
  XFRMA_KMADDRESS = 19,
  XFRMA_ALG_AUTH_TRUNC = 20,
  XFRMA_MARK = 21,
  XFRMA_TFCPAD = 22,
  XFRMA_REPLAY_ESN_VAL = 23,
  XFRMA_SA_EXTRA_FLAGS = 24,
  XFRMA_PROTO = 25,
  XFRMA_ADDRESS_FILTER = 26,
  XFRMA_PAD = 27,
  XFRMA_OFFLOAD_DEV = 28,
  XFRMA_SET_MARK = 29,
  XFRMA_SET_MARK_MASK = 30,
  XFRMA_IF_ID = 31,
  __XFRMA_MAX = 32,
};

struct xfrm_mark {
  __u32 v;
  __u32 m;
};

struct xfrm_address_filter {
  xfrm_address_t saddr;
  xfrm_address_t daddr;
  __u16 family;
  __u8 splen;
  __u8 dplen;
};

enum macvlan_mode {
  MACVLAN_MODE_PRIVATE = 1,
  MACVLAN_MODE_VEPA = 2,
  MACVLAN_MODE_BRIDGE = 4,
  MACVLAN_MODE_PASSTHRU = 8,
  MACVLAN_MODE_SOURCE = 16,
};

enum tca_id {
  TCA_ID_UNSPEC = 0,
  TCA_ID_POLICE = 1,
  TCA_ID_GACT = 5,
  TCA_ID_IPT = 6,
  TCA_ID_PEDIT = 7,
  TCA_ID_MIRRED = 8,
  TCA_ID_NAT = 9,
  TCA_ID_XT = 10,
  TCA_ID_SKBEDIT = 11,
  TCA_ID_VLAN = 12,
  TCA_ID_BPF = 13,
  TCA_ID_CONNMARK = 14,
  TCA_ID_SKBMOD = 15,
  TCA_ID_CSUM = 16,
  TCA_ID_TUNNEL_KEY = 17,
  TCA_ID_SIMP = 22,
  TCA_ID_IFE = 25,
  TCA_ID_SAMPLE = 26,
  TCA_ID_CTINFO = 27,
  TCA_ID_MPLS = 28,
  TCA_ID_CT = 29,
  TCA_ID_GATE = 30,
  __TCA_ID_MAX = 255,
};

struct tcf_t {
  __u64 install;
  __u64 lastuse;
  __u64 expires;
  __u64 firstuse;
};

struct tc_u32_key {
  __be32 mask;
  __be32 val;
  int off;
  int offmask;
};

struct tc_u32_sel {
  unsigned char flags;
  unsigned char offshift;
  unsigned char nkeys;
  __be16 offmask;
  __u16 off;
  short int offoff;
  short int hoff;
  __be32 hmask;
  struct tc_u32_key keys[0];
};

struct xdp_umem;

struct xsk_queue;

struct xdp_buff_xsk;

struct xsk_buff_pool {
  struct device* dev;
  struct net_device* netdev;
  struct list_head xsk_tx_list;
  spinlock_t xsk_tx_list_lock;
  refcount_t users;
  struct xdp_umem* umem;
  struct work_struct work;
  struct list_head free_list;
  u32 heads_cnt;
  u16 queue_id;
  long : 16;
  long : 64;
  long : 64;
  long : 64;
  struct xsk_queue* fq;
  struct xsk_queue* cq;
  dma_addr_t* dma_pages;
  struct xdp_buff_xsk* heads;
  u64 chunk_mask;
  u64 addrs_cnt;
  u32 free_list_cnt;
  u32 dma_pages_cnt;
  u32 free_heads_cnt;
  u32 headroom;
  u32 chunk_size;
  u32 chunk_shift;
  u32 frame_len;
  u8 cached_need_wakeup;
  bool uses_need_wakeup;
  bool dma_need_sync;
  bool unaligned;
  void* addrs;
  spinlock_t cq_lock;
  struct xdp_buff_xsk* free_heads[0];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct netdev_nested_priv {
  unsigned char flags;
  void* data;
};

struct vlan_pcpu_stats {
  u64 rx_packets;
  u64 rx_bytes;
  u64 rx_multicast;
  u64 tx_packets;
  u64 tx_bytes;
  struct u64_stats_sync syncp;
  u32 rx_errors;
  u32 tx_dropped;
};

struct netpoll___2;

struct xfrm_state_walk {
  struct list_head all;
  u8 state;
  u8 dying;
  u8 proto;
  u32 seq;
  struct xfrm_address_filter* filter;
};

struct xfrm_state_offload {
  struct net_device* dev;
  struct net_device* real_dev;
  long unsigned int offload_handle;
  unsigned int num_exthdrs;
  u8 flags;
};

struct xfrm_mode {
  u8 encap;
  u8 family;
  u8 flags;
};

struct xfrm_replay;

struct xfrm_type;

struct xfrm_type_offload;

struct xfrm_state {
  possible_net_t xs_net;
  union {
    struct hlist_node gclist;
    struct hlist_node bydst;
  };
  struct hlist_node bysrc;
  struct hlist_node byspi;
  refcount_t refcnt;
  spinlock_t lock;
  struct xfrm_id id;
  struct xfrm_selector sel;
  struct xfrm_mark mark;
  u32 if_id;
  u32 tfcpad;
  u32 genid;
  struct xfrm_state_walk km;
  struct {
    u32 reqid;
    u8 mode;
    u8 replay_window;
    u8 aalgo;
    u8 ealgo;
    u8 calgo;
    u8 flags;
    u16 family;
    xfrm_address_t saddr;
    int header_len;
    int trailer_len;
    u32 extra_flags;
    struct xfrm_mark smark;
  } props;
  struct xfrm_lifetime_cfg lft;
  struct xfrm_algo_auth* aalg;
  struct xfrm_algo* ealg;
  struct xfrm_algo* calg;
  struct xfrm_algo_aead* aead;
  const char* geniv;
  struct xfrm_encap_tmpl* encap;
  struct sock* encap_sk;
  xfrm_address_t* coaddr;
  struct xfrm_state* tunnel;
  atomic_t tunnel_users;
  struct xfrm_replay_state replay;
  struct xfrm_replay_state_esn* replay_esn;
  struct xfrm_replay_state preplay;
  struct xfrm_replay_state_esn* preplay_esn;
  const struct xfrm_replay* repl;
  u32 xflags;
  u32 replay_maxage;
  u32 replay_maxdiff;
  struct timer_list rtimer;
  struct xfrm_stats stats;
  struct xfrm_lifetime_cur curlft;
  struct hrtimer mtimer;
  struct xfrm_state_offload xso;
  long int saved_tmo;
  time64_t lastused;
  struct page_frag xfrag;
  const struct xfrm_type* type;
  struct xfrm_mode inner_mode;
  struct xfrm_mode inner_mode_iaf;
  struct xfrm_mode outer_mode;
  const struct xfrm_type_offload* type_offload;
  struct xfrm_sec_ctx* security;
  void* data;
};

struct xfrm_policy_walk_entry {
  struct list_head all;
  u8 dead;
};

struct xfrm_policy_queue {
  struct sk_buff_head hold_queue;
  struct timer_list hold_timer;
  long unsigned int timeout;
};

struct xfrm_tmpl {
  struct xfrm_id id;
  xfrm_address_t saddr;
  short unsigned int encap_family;
  u32 reqid;
  u8 mode;
  u8 share;
  u8 optional;
  u8 allalgs;
  u32 aalgos;
  u32 ealgos;
  u32 calgos;
};

struct xfrm_policy {
  possible_net_t xp_net;
  struct hlist_node bydst;
  struct hlist_node byidx;
  rwlock_t lock;
  refcount_t refcnt;
  u32 pos;
  struct timer_list timer;
  atomic_t genid;
  u32 priority;
  u32 index;
  u32 if_id;
  struct xfrm_mark mark;
  struct xfrm_selector selector;
  struct xfrm_lifetime_cfg lft;
  struct xfrm_lifetime_cur curlft;
  struct xfrm_policy_walk_entry walk;
  struct xfrm_policy_queue polq;
  bool bydst_reinsert;
  u8 type;
  u8 action;
  u8 flags;
  u8 xfrm_nr;
  u16 family;
  struct xfrm_sec_ctx* security;
  struct xfrm_tmpl xfrm_vec[6];
  struct hlist_node bydst_inexact_list;
  struct callback_head rcu;
};

struct macvlan_port;

struct macvlan_dev {
  struct net_device* dev;
  struct list_head list;
  struct hlist_node hlist;
  struct macvlan_port* port;
  struct net_device* lowerdev;
  void* accel_priv;
  struct vlan_pcpu_stats* pcpu_stats;
  long unsigned int mc_filter[4];
  netdev_features_t set_features;
  enum macvlan_mode mode;
  u16 flags;
  unsigned int macaddr_count;
  u32 bc_queue_len_req;
  struct netpoll___2* netpoll;
};

struct tcf_idrinfo {
  struct mutex lock;
  struct idr action_idr;
  struct net* net;
};

struct tc_action_ops;

struct tc_cookie;

struct tc_action {
  const struct tc_action_ops* ops;
  __u32 type;
  struct tcf_idrinfo* idrinfo;
  u32 tcfa_index;
  refcount_t tcfa_refcnt;
  atomic_t tcfa_bindcnt;
  int tcfa_action;
  struct tcf_t tcfa_tm;
  struct gnet_stats_basic_packed tcfa_bstats;
  struct gnet_stats_basic_packed tcfa_bstats_hw;
  struct gnet_stats_queue tcfa_qstats;
  struct net_rate_estimator* tcfa_rate_est;
  spinlock_t tcfa_lock;
  struct gnet_stats_basic_cpu* cpu_bstats;
  struct gnet_stats_basic_cpu* cpu_bstats_hw;
  struct gnet_stats_queue* cpu_qstats;
  struct tc_cookie* act_cookie;
  struct tcf_chain* goto_chain;
  u32 tcfa_flags;
  u8 hw_stats;
  u8 used_hw_stats;
  bool used_hw_stats_valid;
};

typedef void (*tc_action_priv_destructor)(void*);

struct tc_action_ops {
  struct list_head head;
  char kind[16];
  enum tca_id id;
  size_t size;
  struct module* owner;
  int (*act)(struct sk_buff*, const struct tc_action*, struct tcf_result*);
  int (*dump)(struct sk_buff*, struct tc_action*, int, int);
  void (*cleanup)(struct tc_action*);
  int (*lookup)(struct net*, struct tc_action**, u32);
  int (*init)(
      struct net*,
      struct nlattr*,
      struct nlattr*,
      struct tc_action**,
      struct tcf_proto*,
      u32,
      struct netlink_ext_ack*);
  int (*walk)(
      struct net*,
      struct sk_buff*,
      struct netlink_callback*,
      int,
      const struct tc_action_ops*,
      struct netlink_ext_ack*);
  void (*stats_update)(struct tc_action*, u64, u64, u64, u64, bool);
  size_t (*get_fill_size)(const struct tc_action*);
  struct net_device* (
      *get_dev)(const struct tc_action*, tc_action_priv_destructor*);
  struct psample_group* (
      *get_psample_group)(const struct tc_action*, tc_action_priv_destructor*);
};

struct tc_cookie {
  u8* data;
  u32 len;
  struct callback_head rcu;
};

struct tcf_exts {
  __u32 type;
  int nr_actions;
  struct tc_action** actions;
  struct net* net;
  int action;
  int police;
};

struct tc_cls_u32_knode {
  struct tcf_exts* exts;
  struct tcf_result* res;
  struct tc_u32_sel* sel;
  u32 handle;
  u32 val;
  u32 mask;
  u32 link_handle;
  u8 fshift;
};

struct tc_cls_u32_hnode {
  u32 handle;
  u32 prio;
  unsigned int divisor;
};

enum tc_clsu32_command {
  TC_CLSU32_NEW_KNODE = 0,
  TC_CLSU32_REPLACE_KNODE = 1,
  TC_CLSU32_DELETE_KNODE = 2,
  TC_CLSU32_NEW_HNODE = 3,
  TC_CLSU32_REPLACE_HNODE = 4,
  TC_CLSU32_DELETE_HNODE = 5,
};

struct tc_cls_u32_offload {
  struct flow_cls_common_offload common;
  enum tc_clsu32_command command;
  union {
    struct tc_cls_u32_knode knode;
    struct tc_cls_u32_hnode hnode;
  };
};

struct tcf_gact {
  struct tc_action common;
};

struct tcf_mirred {
  struct tc_action common;
  int tcfm_eaction;
  bool tcfm_mac_header_xmit;
  struct net_device* tcfm_dev;
  struct list_head tcfm_list;
};

struct xdp_umem {
  void* addrs;
  u64 size;
  u32 headroom;
  u32 chunk_size;
  u32 chunks;
  u32 npgs;
  struct user_struct* user;
  refcount_t users;
  u8 flags;
  bool zc;
  struct page** pgs;
  int id;
  struct list_head xsk_dma_list;
  struct work_struct work;
};

struct xdp_buff_xsk {
  struct xdp_buff xdp;
  dma_addr_t dma;
  dma_addr_t frame_dma;
  struct xsk_buff_pool* pool;
  u64 orig_addr;
  struct list_head free_list_node;
};

struct xfrm_replay {
  void (*advance)(struct xfrm_state*, __be32);
  int (*check)(struct xfrm_state*, struct sk_buff*, __be32);
  int (*recheck)(struct xfrm_state*, struct sk_buff*, __be32);
  void (*notify)(struct xfrm_state*, int);
  int (*overflow)(struct xfrm_state*, struct sk_buff*);
};

struct xfrm_type {
  char* description;
  struct module* owner;
  u8 proto;
  u8 flags;
  int (*init_state)(struct xfrm_state*);
  void (*destructor)(struct xfrm_state*);
  int (*input)(struct xfrm_state*, struct sk_buff*);
  int (*output)(struct xfrm_state*, struct sk_buff*);
  int (*reject)(struct xfrm_state*, struct sk_buff*, const struct flowi*);
  int (*hdr_offset)(struct xfrm_state*, struct sk_buff*, u8**);
};

struct xfrm_type_offload {
  char* description;
  struct module* owner;
  u8 proto;
  void (*encap)(struct xfrm_state*, struct sk_buff*);
  int (*input_tail)(struct xfrm_state*, struct sk_buff*);
  int (*xmit)(struct xfrm_state*, struct sk_buff*, netdev_features_t);
};

struct ixgbe_thermal_diode_data {
  u8 location;
  u8 temp;
  u8 caution_thresh;
  u8 max_op_thresh;
};

struct ixgbe_thermal_sensor_data {
  struct ixgbe_thermal_diode_data sensor[3];
};

struct ixgbe_nvm_version {
  u32 etk_id;
  u8 nvm_major;
  u16 nvm_minor;
  u8 nvm_id;
  bool oem_valid;
  u8 oem_major;
  u8 oem_minor;
  u16 oem_release;
  bool or_valid;
  u8 or_major;
  u16 or_build;
  u8 or_patch;
};

enum {
  PBA_STRATEGY_EQUAL = 0,
  PBA_STRATEGY_WEIGHTED = 1,
};

enum ixgbe_fdir_pballoc_type {
  IXGBE_FDIR_PBALLOC_NONE = 0,
  IXGBE_FDIR_PBALLOC_64K = 1,
  IXGBE_FDIR_PBALLOC_128K = 2,
  IXGBE_FDIR_PBALLOC_256K = 3,
};

union ixgbe_adv_tx_desc {
  struct {
    __le64 buffer_addr;
    __le32 cmd_type_len;
    __le32 olinfo_status;
  } read;
  struct {
    __le64 rsvd;
    __le32 nxtseq_seed;
    __le32 status;
  } wb;
};

union ixgbe_adv_rx_desc {
  struct {
    __le64 pkt_addr;
    __le64 hdr_addr;
  } read;
  struct {
    struct {
      union {
        __le32 data;
        struct {
          __le16 pkt_info;
          __le16 hdr_info;
        } hs_rss;
      } lo_dword;
      union {
        __le32 rss;
        struct {
          __le16 ip_id;
          __le16 csum;
        } csum_ip;
      } hi_dword;
    } lower;
    struct {
      __le32 status_error;
      __le16 length;
      __le16 vlan;
    } upper;
  } wb;
};

typedef u32 ixgbe_autoneg_advertised;

typedef u32 ixgbe_link_speed;

enum ixgbe_atr_flow_type {
  IXGBE_ATR_FLOW_TYPE_IPV4 = 0,
  IXGBE_ATR_FLOW_TYPE_UDPV4 = 1,
  IXGBE_ATR_FLOW_TYPE_TCPV4 = 2,
  IXGBE_ATR_FLOW_TYPE_SCTPV4 = 3,
  IXGBE_ATR_FLOW_TYPE_IPV6 = 4,
  IXGBE_ATR_FLOW_TYPE_UDPV6 = 5,
  IXGBE_ATR_FLOW_TYPE_TCPV6 = 6,
  IXGBE_ATR_FLOW_TYPE_SCTPV6 = 7,
};

union ixgbe_atr_input {
  struct {
    u8 vm_pool;
    u8 flow_type;
    __be16 vlan_id;
    __be32 dst_ip[4];
    __be32 src_ip[4];
    __be16 src_port;
    __be16 dst_port;
    __be16 flex_bytes;
    __be16 bkt_hash;
  } formatted;
  __be32 dword_stream[11];
};

union ixgbe_atr_hash_dword {
  struct {
    u8 vm_pool;
    u8 flow_type;
    __be16 vlan_id;
  } formatted;
  __be32 ip;
  struct {
    __be16 src;
    __be16 dst;
  } port;
  __be16 flex_bytes;
  __be32 dword;
};

enum ixgbe_mvals {
  IXGBE_EEC_IDX = 0,
  IXGBE_FLA_IDX = 1,
  IXGBE_GRC_IDX = 2,
  IXGBE_FACTPS_IDX = 3,
  IXGBE_SWSM_IDX = 4,
  IXGBE_SWFW_SYNC_IDX = 5,
  IXGBE_FWSM_IDX = 6,
  IXGBE_SDP0_GPIEN_IDX = 7,
  IXGBE_SDP1_GPIEN_IDX = 8,
  IXGBE_SDP2_GPIEN_IDX = 9,
  IXGBE_EICR_GPI_SDP0_IDX = 10,
  IXGBE_EICR_GPI_SDP1_IDX = 11,
  IXGBE_EICR_GPI_SDP2_IDX = 12,
  IXGBE_CIAA_IDX = 13,
  IXGBE_CIAD_IDX = 14,
  IXGBE_I2C_CLK_IN_IDX = 15,
  IXGBE_I2C_CLK_OUT_IDX = 16,
  IXGBE_I2C_DATA_IN_IDX = 17,
  IXGBE_I2C_DATA_OUT_IDX = 18,
  IXGBE_I2C_DATA_OE_N_EN_IDX = 19,
  IXGBE_I2C_BB_EN_IDX = 20,
  IXGBE_I2C_CLK_OE_N_EN_IDX = 21,
  IXGBE_I2CCTL_IDX = 22,
  IXGBE_MVALS_IDX_LIMIT = 23,
};

enum ixgbe_eeprom_type {
  ixgbe_eeprom_uninitialized = 0,
  ixgbe_eeprom_spi = 1,
  ixgbe_flash = 2,
  ixgbe_eeprom_none = 3,
};

enum ixgbe_mac_type {
  ixgbe_mac_unknown = 0,
  ixgbe_mac_82598EB = 1,
  ixgbe_mac_82599EB = 2,
  ixgbe_mac_X540 = 3,
  ixgbe_mac_X550 = 4,
  ixgbe_mac_X550EM_x = 5,
  ixgbe_mac_x550em_a = 6,
  ixgbe_num_macs = 7,
};

enum ixgbe_phy_type {
  ixgbe_phy_unknown = 0,
  ixgbe_phy_none = 1,
  ixgbe_phy_tn = 2,
  ixgbe_phy_aq = 3,
  ixgbe_phy_x550em_kr = 4,
  ixgbe_phy_x550em_kx4 = 5,
  ixgbe_phy_x550em_xfi = 6,
  ixgbe_phy_x550em_ext_t = 7,
  ixgbe_phy_ext_1g_t = 8,
  ixgbe_phy_cu_unknown = 9,
  ixgbe_phy_qt = 10,
  ixgbe_phy_xaui = 11,
  ixgbe_phy_nl = 12,
  ixgbe_phy_sfp_passive_tyco = 13,
  ixgbe_phy_sfp_passive_unknown = 14,
  ixgbe_phy_sfp_active_unknown = 15,
  ixgbe_phy_sfp_avago = 16,
  ixgbe_phy_sfp_ftl = 17,
  ixgbe_phy_sfp_ftl_active = 18,
  ixgbe_phy_sfp_unknown = 19,
  ixgbe_phy_sfp_intel = 20,
  ixgbe_phy_qsfp_passive_unknown = 21,
  ixgbe_phy_qsfp_active_unknown = 22,
  ixgbe_phy_qsfp_intel = 23,
  ixgbe_phy_qsfp_unknown = 24,
  ixgbe_phy_sfp_unsupported = 25,
  ixgbe_phy_sgmii = 26,
  ixgbe_phy_fw = 27,
  ixgbe_phy_generic = 28,
};

enum ixgbe_sfp_type {
  ixgbe_sfp_type_da_cu = 0,
  ixgbe_sfp_type_sr = 1,
  ixgbe_sfp_type_lr = 2,
  ixgbe_sfp_type_da_cu_core0 = 3,
  ixgbe_sfp_type_da_cu_core1 = 4,
  ixgbe_sfp_type_srlr_core0 = 5,
  ixgbe_sfp_type_srlr_core1 = 6,
  ixgbe_sfp_type_da_act_lmt_core0 = 7,
  ixgbe_sfp_type_da_act_lmt_core1 = 8,
  ixgbe_sfp_type_1g_cu_core0 = 9,
  ixgbe_sfp_type_1g_cu_core1 = 10,
  ixgbe_sfp_type_1g_sx_core0 = 11,
  ixgbe_sfp_type_1g_sx_core1 = 12,
  ixgbe_sfp_type_1g_lx_core0 = 13,
  ixgbe_sfp_type_1g_lx_core1 = 14,
  ixgbe_sfp_type_not_present = 65534,
  ixgbe_sfp_type_unknown = 65535,
};

enum ixgbe_media_type {
  ixgbe_media_type_unknown = 0,
  ixgbe_media_type_fiber = 1,
  ixgbe_media_type_fiber_qsfp = 2,
  ixgbe_media_type_fiber_lco = 3,
  ixgbe_media_type_copper = 4,
  ixgbe_media_type_backplane = 5,
  ixgbe_media_type_cx4 = 6,
  ixgbe_media_type_virtual = 7,
};

enum ixgbe_fc_mode {
  ixgbe_fc_none = 0,
  ixgbe_fc_rx_pause = 1,
  ixgbe_fc_tx_pause = 2,
  ixgbe_fc_full = 3,
  ixgbe_fc_default = 4,
};

enum ixgbe_smart_speed {
  ixgbe_smart_speed_auto = 0,
  ixgbe_smart_speed_on = 1,
  ixgbe_smart_speed_off = 2,
};

enum ixgbe_bus_type {
  ixgbe_bus_type_unknown = 0,
  ixgbe_bus_type_pci_express = 1,
  ixgbe_bus_type_internal = 2,
  ixgbe_bus_type_reserved = 3,
};

enum ixgbe_bus_speed {
  ixgbe_bus_speed_unknown = 0,
  ixgbe_bus_speed_33 = 33,
  ixgbe_bus_speed_66 = 66,
  ixgbe_bus_speed_100 = 100,
  ixgbe_bus_speed_120 = 120,
  ixgbe_bus_speed_133 = 133,
  ixgbe_bus_speed_2500 = 2500,
  ixgbe_bus_speed_5000 = 5000,
  ixgbe_bus_speed_8000 = 8000,
  ixgbe_bus_speed_reserved = 8001,
};

enum ixgbe_bus_width {
  ixgbe_bus_width_unknown = 0,
  ixgbe_bus_width_pcie_x1 = 1,
  ixgbe_bus_width_pcie_x2 = 2,
  ixgbe_bus_width_pcie_x4 = 4,
  ixgbe_bus_width_pcie_x8 = 8,
  ixgbe_bus_width_32 = 32,
  ixgbe_bus_width_64 = 64,
  ixgbe_bus_width_reserved = 65,
};

struct ixgbe_addr_filter_info {
  u32 num_mc_addrs;
  u32 rar_used_count;
  u32 mta_in_use;
  u32 overflow_promisc;
  bool uc_set_promisc;
  bool user_set_promisc;
};

struct ixgbe_bus_info {
  enum ixgbe_bus_speed speed;
  enum ixgbe_bus_width width;
  enum ixgbe_bus_type type;
  u8 func;
  u8 lan_id;
  u8 instance_id;
};

struct ixgbe_fc_info {
  u32 high_water[8];
  u32 low_water[8];
  u16 pause_time;
  bool send_xon;
  bool strict_ieee;
  bool disable_fc_autoneg;
  bool fc_was_autonegged;
  enum ixgbe_fc_mode current_mode;
  enum ixgbe_fc_mode requested_mode;
};

struct ixgbe_hw_stats {
  u64 crcerrs;
  u64 illerrc;
  u64 errbc;
  u64 mspdc;
  u64 mpctotal;
  u64 mpc[8];
  u64 mlfc;
  u64 mrfc;
  u64 rlec;
  u64 lxontxc;
  u64 lxonrxc;
  u64 lxofftxc;
  u64 lxoffrxc;
  u64 pxontxc[8];
  u64 pxonrxc[8];
  u64 pxofftxc[8];
  u64 pxoffrxc[8];
  u64 prc64;
  u64 prc127;
  u64 prc255;
  u64 prc511;
  u64 prc1023;
  u64 prc1522;
  u64 gprc;
  u64 bprc;
  u64 mprc;
  u64 gptc;
  u64 gorc;
  u64 gotc;
  u64 rnbc[8];
  u64 ruc;
  u64 rfc;
  u64 roc;
  u64 rjc;
  u64 mngprc;
  u64 mngpdc;
  u64 mngptc;
  u64 tor;
  u64 tpr;
  u64 tpt;
  u64 ptc64;
  u64 ptc127;
  u64 ptc255;
  u64 ptc511;
  u64 ptc1023;
  u64 ptc1522;
  u64 mptc;
  u64 bptc;
  u64 xec;
  u64 rqsmr[16];
  u64 tqsmr[8];
  u64 qprc[16];
  u64 qptc[16];
  u64 qbrc[16];
  u64 qbtc[16];
  u64 qprdc[16];
  u64 pxon2offc[8];
  u64 fdirustat_add;
  u64 fdirustat_remove;
  u64 fdirfstat_fadd;
  u64 fdirfstat_fremove;
  u64 fdirmatch;
  u64 fdirmiss;
  u64 fccrc;
  u64 fcoerpdc;
  u64 fcoeprc;
  u64 fcoeptc;
  u64 fcoedwrc;
  u64 fcoedwtc;
  u64 fcoe_noddp;
  u64 fcoe_noddp_ext_buff;
  u64 b2ospc;
  u64 b2ogprc;
  u64 o2bgptc;
  u64 o2bspc;
};

struct ixgbe_hw;

struct ixgbe_mac_operations {
  s32 (*init_hw)(struct ixgbe_hw*);
  s32 (*reset_hw)(struct ixgbe_hw*);
  s32 (*start_hw)(struct ixgbe_hw*);
  s32 (*clear_hw_cntrs)(struct ixgbe_hw*);
  enum ixgbe_media_type (*get_media_type)(struct ixgbe_hw*);
  s32 (*get_mac_addr)(struct ixgbe_hw*, u8*);
  s32 (*get_san_mac_addr)(struct ixgbe_hw*, u8*);
  s32 (*get_device_caps)(struct ixgbe_hw*, u16*);
  s32 (*get_wwn_prefix)(struct ixgbe_hw*, u16*, u16*);
  s32 (*stop_adapter)(struct ixgbe_hw*);
  s32 (*get_bus_info)(struct ixgbe_hw*);
  void (*set_lan_id)(struct ixgbe_hw*);
  s32 (*read_analog_reg8)(struct ixgbe_hw*, u32, u8*);
  s32 (*write_analog_reg8)(struct ixgbe_hw*, u32, u8);
  s32 (*setup_sfp)(struct ixgbe_hw*);
  s32 (*disable_rx_buff)(struct ixgbe_hw*);
  s32 (*enable_rx_buff)(struct ixgbe_hw*);
  s32 (*enable_rx_dma)(struct ixgbe_hw*, u32);
  s32 (*acquire_swfw_sync)(struct ixgbe_hw*, u32);
  void (*release_swfw_sync)(struct ixgbe_hw*, u32);
  void (*init_swfw_sync)(struct ixgbe_hw*);
  s32 (*prot_autoc_read)(struct ixgbe_hw*, bool*, u32*);
  s32 (*prot_autoc_write)(struct ixgbe_hw*, u32, bool);
  void (*disable_tx_laser)(struct ixgbe_hw*);
  void (*enable_tx_laser)(struct ixgbe_hw*);
  void (*flap_tx_laser)(struct ixgbe_hw*);
  void (*stop_link_on_d3)(struct ixgbe_hw*);
  s32 (*setup_link)(struct ixgbe_hw*, ixgbe_link_speed, bool);
  s32 (*setup_mac_link)(struct ixgbe_hw*, ixgbe_link_speed, bool);
  s32 (*check_link)(struct ixgbe_hw*, ixgbe_link_speed*, bool*, bool);
  s32 (*get_link_capabilities)(struct ixgbe_hw*, ixgbe_link_speed*, bool*);
  void (*set_rate_select_speed)(struct ixgbe_hw*, ixgbe_link_speed);
  void (*set_rxpba)(struct ixgbe_hw*, int, u32, int);
  s32 (*led_on)(struct ixgbe_hw*, u32);
  s32 (*led_off)(struct ixgbe_hw*, u32);
  s32 (*blink_led_start)(struct ixgbe_hw*, u32);
  s32 (*blink_led_stop)(struct ixgbe_hw*, u32);
  s32 (*init_led_link_act)(struct ixgbe_hw*);
  s32 (*set_rar)(struct ixgbe_hw*, u32, u8*, u32, u32);
  s32 (*clear_rar)(struct ixgbe_hw*, u32);
  s32 (*set_vmdq)(struct ixgbe_hw*, u32, u32);
  s32 (*set_vmdq_san_mac)(struct ixgbe_hw*, u32);
  s32 (*clear_vmdq)(struct ixgbe_hw*, u32, u32);
  s32 (*init_rx_addrs)(struct ixgbe_hw*);
  s32 (*update_mc_addr_list)(struct ixgbe_hw*, struct net_device*);
  s32 (*enable_mc)(struct ixgbe_hw*);
  s32 (*disable_mc)(struct ixgbe_hw*);
  s32 (*clear_vfta)(struct ixgbe_hw*);
  s32 (*set_vfta)(struct ixgbe_hw*, u32, u32, bool, bool);
  s32 (*init_uta_tables)(struct ixgbe_hw*);
  void (*set_mac_anti_spoofing)(struct ixgbe_hw*, bool, int);
  void (*set_vlan_anti_spoofing)(struct ixgbe_hw*, bool, int);
  s32 (*fc_enable)(struct ixgbe_hw*);
  s32 (*setup_fc)(struct ixgbe_hw*);
  void (*fc_autoneg)(struct ixgbe_hw*);
  s32 (*set_fw_drv_ver)(struct ixgbe_hw*, u8, u8, u8, u8, u16, const char*);
  s32 (*get_thermal_sensor_data)(struct ixgbe_hw*);
  s32 (*init_thermal_sensor_thresh)(struct ixgbe_hw*);
  bool (*fw_recovery_mode)(struct ixgbe_hw*);
  void (*disable_rx)(struct ixgbe_hw*);
  void (*enable_rx)(struct ixgbe_hw*);
  void (*set_source_address_pruning)(struct ixgbe_hw*, bool, unsigned int);
  void (*set_ethertype_anti_spoofing)(struct ixgbe_hw*, bool, int);
  s32 (*dmac_config)(struct ixgbe_hw*);
  s32 (*dmac_update_tcs)(struct ixgbe_hw*);
  s32 (*dmac_config_tcs)(struct ixgbe_hw*);
  s32 (*read_iosf_sb_reg)(struct ixgbe_hw*, u32, u32, u32*);
  s32 (*write_iosf_sb_reg)(struct ixgbe_hw*, u32, u32, u32);
};

struct ixgbe_mac_info {
  struct ixgbe_mac_operations ops;
  enum ixgbe_mac_type type;
  u8 addr[6];
  u8 perm_addr[6];
  u8 san_addr[6];
  u16 wwnn_prefix;
  u16 wwpn_prefix;
  u16 max_msix_vectors;
  u32 mta_shadow[128];
  s32 mc_filter_type;
  u32 mcft_size;
  u32 vft_size;
  u32 num_rar_entries;
  u32 rar_highwater;
  u32 rx_pb_size;
  u32 max_tx_queues;
  u32 max_rx_queues;
  u32 orig_autoc;
  u32 orig_autoc2;
  bool orig_link_settings_stored;
  bool autotry_restart;
  u8 flags;
  u8 san_mac_rar_index;
  struct ixgbe_thermal_sensor_data thermal_sensor_data;
  bool set_lben;
  u8 led_link_act;
};

struct ixgbe_phy_operations {
  s32 (*identify)(struct ixgbe_hw*);
  s32 (*identify_sfp)(struct ixgbe_hw*);
  s32 (*init)(struct ixgbe_hw*);
  s32 (*reset)(struct ixgbe_hw*);
  s32 (*read_reg)(struct ixgbe_hw*, u32, u32, u16*);
  s32 (*write_reg)(struct ixgbe_hw*, u32, u32, u16);
  s32 (*read_reg_mdi)(struct ixgbe_hw*, u32, u32, u16*);
  s32 (*write_reg_mdi)(struct ixgbe_hw*, u32, u32, u16);
  s32 (*setup_link)(struct ixgbe_hw*);
  s32 (*setup_internal_link)(struct ixgbe_hw*);
  s32 (*setup_link_speed)(struct ixgbe_hw*, ixgbe_link_speed, bool);
  s32 (*check_link)(struct ixgbe_hw*, ixgbe_link_speed*, bool*);
  s32 (*read_i2c_byte)(struct ixgbe_hw*, u8, u8, u8*);
  s32 (*write_i2c_byte)(struct ixgbe_hw*, u8, u8, u8);
  s32 (*read_i2c_sff8472)(struct ixgbe_hw*, u8, u8*);
  s32 (*read_i2c_eeprom)(struct ixgbe_hw*, u8, u8*);
  s32 (*write_i2c_eeprom)(struct ixgbe_hw*, u8, u8);
  s32 (*check_overtemp)(struct ixgbe_hw*);
  s32 (*set_phy_power)(struct ixgbe_hw*, bool);
  s32 (*enter_lplu)(struct ixgbe_hw*);
  s32 (*handle_lasi)(struct ixgbe_hw*);
  s32 (*read_i2c_byte_unlocked)(struct ixgbe_hw*, u8, u8, u8*);
  s32 (*write_i2c_byte_unlocked)(struct ixgbe_hw*, u8, u8, u8);
};

struct ixgbe_phy_info {
  struct ixgbe_phy_operations ops;
  struct mdio_if_info mdio;
  enum ixgbe_phy_type type;
  u32 id;
  enum ixgbe_sfp_type sfp_type;
  bool sfp_setup_needed;
  u32 revision;
  enum ixgbe_media_type media_type;
  u32 phy_semaphore_mask;
  bool reset_disable;
  ixgbe_autoneg_advertised autoneg_advertised;
  ixgbe_link_speed speeds_supported;
  ixgbe_link_speed eee_speeds_supported;
  ixgbe_link_speed eee_speeds_advertised;
  enum ixgbe_smart_speed smart_speed;
  bool smart_speed_active;
  bool multispeed_fiber;
  bool reset_if_overtemp;
  bool qsfp_shared_i2c_bus;
  u32 nw_mng_if_sel;
};

struct ixgbe_link_operations {
  s32 (*read_link)(struct ixgbe_hw*, u8, u16, u16*);
  s32 (*read_link_unlocked)(struct ixgbe_hw*, u8, u16, u16*);
  s32 (*write_link)(struct ixgbe_hw*, u8, u16, u16);
  s32 (*write_link_unlocked)(struct ixgbe_hw*, u8, u16, u16);
};

struct ixgbe_link_info {
  struct ixgbe_link_operations ops;
  u8 addr;
};

struct ixgbe_eeprom_operations {
  s32 (*init_params)(struct ixgbe_hw*);
  s32 (*read)(struct ixgbe_hw*, u16, u16*);
  s32 (*read_buffer)(struct ixgbe_hw*, u16, u16, u16*);
  s32 (*write)(struct ixgbe_hw*, u16, u16);
  s32 (*write_buffer)(struct ixgbe_hw*, u16, u16, u16*);
  s32 (*validate_checksum)(struct ixgbe_hw*, u16*);
  s32 (*update_checksum)(struct ixgbe_hw*);
  s32 (*calc_checksum)(struct ixgbe_hw*);
};

struct ixgbe_eeprom_info {
  struct ixgbe_eeprom_operations ops;
  enum ixgbe_eeprom_type type;
  u32 semaphore_delay;
  u16 word_size;
  u16 address_bits;
  u16 word_page_size;
  u16 ctrl_word_3;
};

struct ixgbe_mbx_stats {
  u32 msgs_tx;
  u32 msgs_rx;
  u32 acks;
  u32 reqs;
  u32 rsts;
};

struct ixgbe_mbx_operations;

struct ixgbe_mbx_info {
  const struct ixgbe_mbx_operations* ops;
  struct ixgbe_mbx_stats stats;
  u32 timeout;
  u32 usec_delay;
  u32 v2p_mailbox;
  u16 size;
};

struct ixgbe_hw {
  u8* hw_addr;
  void* back;
  struct ixgbe_mac_info mac;
  struct ixgbe_addr_filter_info addr_ctrl;
  struct ixgbe_fc_info fc;
  struct ixgbe_phy_info phy;
  struct ixgbe_link_info link;
  struct ixgbe_eeprom_info eeprom;
  struct ixgbe_bus_info bus;
  struct ixgbe_mbx_info mbx;
  const u32* mvals;
  u16 device_id;
  u16 vendor_id;
  u16 subsystem_device_id;
  u16 subsystem_vendor_id;
  u8 revision_id;
  bool adapter_stopped;
  bool force_full_reset;
  bool allow_unsupported_sfp;
  bool wol_enabled;
  bool need_crosstalk_fix;
};

struct ixgbe_mbx_operations {
  s32 (*init_params)(struct ixgbe_hw*);
  s32 (*read)(struct ixgbe_hw*, u32*, u16, u16);
  s32 (*write)(struct ixgbe_hw*, u32*, u16, u16);
  s32 (*read_posted)(struct ixgbe_hw*, u32*, u16, u16);
  s32 (*write_posted)(struct ixgbe_hw*, u32*, u16, u16);
  s32 (*check_for_msg)(struct ixgbe_hw*, u16);
  s32 (*check_for_ack)(struct ixgbe_hw*, u16);
  s32 (*check_for_rst)(struct ixgbe_hw*, u16);
};

struct ixgbe_info {
  enum ixgbe_mac_type mac;
  s32 (*get_invariants)(struct ixgbe_hw*);
  const struct ixgbe_mac_operations* mac_ops;
  const struct ixgbe_eeprom_operations* eeprom_ops;
  const struct ixgbe_phy_operations* phy_ops;
  const struct ixgbe_mbx_operations* mbx_ops;
  const struct ixgbe_link_operations* link_ops;
  const u32* mvals;
};

enum strict_prio_type {
  prio_none = 0,
  prio_group = 1,
  prio_link = 2,
};

struct dcb_support {
  u32 capabilities;
  u8 traffic_classes;
  u8 pfc_traffic_classes;
};

struct tc_bw_alloc {
  u8 bwg_id;
  u8 bwg_percent;
  u8 link_percent;
  u8 up_to_tc_bitmap;
  u16 data_credits_refill;
  u16 data_credits_max;
  enum strict_prio_type prio_type;
};

enum dcb_pfc_type {
  pfc_disabled = 0,
  pfc_enabled_full = 1,
  pfc_enabled_tx = 2,
  pfc_enabled_rx = 3,
};

struct tc_configuration {
  struct tc_bw_alloc path[2];
  enum dcb_pfc_type dcb_pfc;
  u16 desc_credits_max;
  u8 tc;
};

struct dcb_num_tcs {
  u8 pg_tcs;
  u8 pfc_tcs;
};

struct ixgbe_dcb_config {
  struct dcb_support support;
  struct dcb_num_tcs num_tcs;
  struct tc_configuration tc_config[8];
  u8 bw_percentage[16];
  bool pfc_mode_enable;
  u32 dcb_cfg_version;
  u32 link_speed;
};

struct ixgbe_ipsec_tx_data {
  u32 flags;
  u16 trailer_len;
  u16 sa_idx;
};

enum ixgbe_tx_flags {
  IXGBE_TX_FLAGS_HW_VLAN = 1,
  IXGBE_TX_FLAGS_TSO = 2,
  IXGBE_TX_FLAGS_TSTAMP = 4,
  IXGBE_TX_FLAGS_CC = 8,
  IXGBE_TX_FLAGS_IPV4 = 16,
  IXGBE_TX_FLAGS_CSUM = 32,
  IXGBE_TX_FLAGS_IPSEC = 64,
  IXGBE_TX_FLAGS_SW_VLAN = 128,
  IXGBE_TX_FLAGS_FCOE = 256,
};

struct vf_data_storage___2 {
  struct pci_dev* vfdev;
  unsigned char vf_mac_addresses[6];
  u16 vf_mc_hashes[30];
  u16 num_vf_mc_hashes;
  bool clear_to_send;
  bool pf_set_mac;
  u16 pf_vlan;
  u16 pf_qos;
  u16 tx_rate;
  u8 spoofchk_enabled;
  bool rss_query_enabled;
  u8 trusted;
  int xcast_mode;
  unsigned int vf_api;
};

struct vf_macvlans {
  struct list_head l;
  int vf;
  bool free;
  bool is_macvlan;
  u8 vf_macvlan[6];
};

struct ixgbe_tx_buffer {
  union ixgbe_adv_tx_desc* next_to_watch;
  long unsigned int time_stamp;
  union {
    struct sk_buff* skb;
    struct xdp_frame* xdpf;
  };
  unsigned int bytecount;
  short unsigned int gso_segs;
  __be16 protocol;
  dma_addr_t dma;
  __u32 len;
  u32 tx_flags;
};

struct ixgbe_rx_buffer {
  union {
    struct {
      struct sk_buff* skb;
      dma_addr_t dma;
      struct page* page;
      __u32 page_offset;
      __u16 pagecnt_bias;
    };
    struct {
      bool discard;
      struct xdp_buff* xdp;
    };
  };
};

struct ixgbe_queue_stats {
  u64 packets;
  u64 bytes;
};

struct ixgbe_tx_queue_stats {
  u64 restart_queue;
  u64 tx_busy;
  u64 tx_done_old;
};

struct ixgbe_rx_queue_stats {
  u64 rsc_count;
  u64 rsc_flush;
  u64 non_eop_descs;
  u64 alloc_rx_page;
  u64 alloc_rx_page_failed;
  u64 alloc_rx_buff_failed;
  u64 csum_err;
};

enum ixgbe_ring_state_t {
  __IXGBE_RX_3K_BUFFER = 0,
  __IXGBE_RX_BUILD_SKB_ENABLED = 1,
  __IXGBE_RX_RSC_ENABLED = 2,
  __IXGBE_RX_CSUM_UDP_ZERO_ERR = 3,
  __IXGBE_RX_FCOE = 4,
  __IXGBE_TX_FDIR_INIT_DONE = 5,
  __IXGBE_TX_XPS_INIT_DONE = 6,
  __IXGBE_TX_DETECT_HANG = 7,
  __IXGBE_HANG_CHECK_ARMED = 8,
  __IXGBE_TX_XDP_RING = 9,
  __IXGBE_TX_DISABLED = 10,
};

struct ixgbe_fwd_adapter {
  long unsigned int active_vlans[64];
  struct net_device* netdev;
  unsigned int tx_base_queue;
  unsigned int rx_base_queue;
  int pool;
};

struct ixgbe_q_vector;

struct ixgbe_ring {
  struct ixgbe_ring* next;
  struct ixgbe_q_vector* q_vector;
  struct net_device* netdev;
  struct bpf_prog* xdp_prog;
  struct device* dev;
  void* desc;
  union {
    struct ixgbe_tx_buffer* tx_buffer_info;
    struct ixgbe_rx_buffer* rx_buffer_info;
  };
  long unsigned int state;
  u8* tail;
  dma_addr_t dma;
  unsigned int size;
  u16 count;
  u8 queue_index;
  u8 reg_idx;
  u16 next_to_use;
  u16 next_to_clean;
  long unsigned int last_rx_timestamp;
  union {
    u16 next_to_alloc;
    struct {
      u8 atr_sample_rate;
      u8 atr_count;
    };
  };
  u8 dcb_tc;
  struct ixgbe_queue_stats stats;
  struct u64_stats_sync syncp;
  union {
    struct ixgbe_tx_queue_stats tx_stats;
    struct ixgbe_rx_queue_stats rx_stats;
  };
  u16 rx_offset;
  struct xdp_rxq_info xdp_rxq;
  struct xsk_buff_pool* xsk_pool;
  u16 ring_idx;
  u16 rx_buf_len;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct ixgbe_ring_container {
  struct ixgbe_ring* ring;
  long unsigned int next_update;
  unsigned int total_bytes;
  unsigned int total_packets;
  u16 work_limit;
  u8 count;
  u8 itr;
};

struct ixgbe_adapter;

struct ixgbe_q_vector {
  struct ixgbe_adapter* adapter;
  int cpu;
  u16 v_idx;
  u16 itr;
  struct ixgbe_ring_container rx;
  struct ixgbe_ring_container tx;
  struct napi_struct napi;
  cpumask_t affinity_mask;
  int numa_node;
  struct callback_head rcu;
  char name[25];
  long : 56;
  long : 64;
  long : 64;
  long : 64;
  struct ixgbe_ring ring[0];
};

enum ixgbe_ring_f_enum {
  RING_F_NONE = 0,
  RING_F_VMDQ = 1,
  RING_F_RSS = 2,
  RING_F_FDIR = 3,
  RING_F_ARRAY_SIZE = 4,
};

struct ixgbe_ring_feature {
  u16 limit;
  u16 indices;
  u16 mask;
  u16 offset;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct ixgbe_mac_addr;

struct hwmon_buff___2;

struct ixgbe_jump_table;

struct ixgbe_adapter {
  long unsigned int active_vlans[64];
  struct net_device* netdev;
  struct bpf_prog* xdp_prog;
  struct pci_dev* pdev;
  struct mii_bus* mii_bus;
  long unsigned int state;
  u32 flags;
  u32 flags2;
  int num_tx_queues;
  u16 tx_itr_setting;
  u16 tx_work_limit;
  u64 tx_ipsec;
  int num_rx_queues;
  u16 rx_itr_setting;
  u64 rx_ipsec;
  __be16 vxlan_port;
  __be16 geneve_port;
  int num_xdp_queues;
  struct ixgbe_ring* xdp_ring[64];
  long unsigned int* af_xdp_zc_qps;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct ixgbe_ring* tx_ring[64];
  u64 restart_queue;
  u64 lsc_int;
  u32 tx_timeout_count;
  struct ixgbe_ring* rx_ring[64];
  int num_rx_pools;
  int num_rx_queues_per_pool;
  u64 hw_csum_rx_error;
  u64 hw_rx_no_dma_resources;
  u64 rsc_total_count;
  u64 rsc_total_flush;
  u64 non_eop_descs;
  u32 alloc_rx_page;
  u32 alloc_rx_page_failed;
  u32 alloc_rx_buff_failed;
  struct ixgbe_q_vector* q_vector[64];
  struct ieee_pfc* ixgbe_ieee_pfc;
  struct ieee_ets* ixgbe_ieee_ets;
  struct ixgbe_dcb_config dcb_cfg;
  struct ixgbe_dcb_config temp_dcb_cfg;
  u8 hw_tcs;
  u8 dcb_set_bitmap;
  u8 dcbx_cap;
  enum ixgbe_fc_mode last_lfc_mode;
  int num_q_vectors;
  int max_q_vectors;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct ixgbe_ring_feature ring_feature[4];
  struct msix_entry* msix_entries;
  u32 test_icr;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct ixgbe_ring test_tx_ring;
  struct ixgbe_ring test_rx_ring;
  struct ixgbe_hw hw;
  u16 msg_enable;
  struct ixgbe_hw_stats stats;
  u64 tx_busy;
  unsigned int tx_ring_count;
  unsigned int xdp_ring_count;
  unsigned int rx_ring_count;
  u32 link_speed;
  bool link_up;
  long unsigned int sfp_poll_time;
  long unsigned int link_check_timeout;
  struct timer_list service_timer;
  struct work_struct service_task;
  struct hlist_head fdir_filter_list;
  long unsigned int fdir_overflow;
  union ixgbe_atr_input fdir_mask;
  int fdir_filter_count;
  u32 fdir_pballoc;
  u32 atr_sample_rate;
  spinlock_t fdir_perfect_lock;
  u8* io_addr;
  u32 wol;
  u16 bridge_mode;
  char eeprom_id[32];
  u16 eeprom_cap;
  u32 interrupt_event;
  u32 led_reg;
  struct ptp_clock* ptp_clock;
  struct ptp_clock_info ptp_caps;
  struct work_struct ptp_tx_work;
  struct sk_buff* ptp_tx_skb;
  struct hwtstamp_config tstamp_config;
  long unsigned int ptp_tx_start;
  long unsigned int last_overflow_check;
  long unsigned int last_rx_ptp_check;
  long unsigned int last_rx_timestamp;
  spinlock_t tmreg_lock;
  struct cyclecounter hw_cc;
  struct timecounter hw_tc;
  u32 base_incval;
  u32 tx_hwtstamp_timeouts;
  u32 tx_hwtstamp_skipped;
  u32 rx_hwtstamp_cleared;
  void (*ptp_setup_sdp)(struct ixgbe_adapter*);
  long unsigned int active_vfs[1];
  unsigned int num_vfs;
  struct vf_data_storage___2* vfinfo;
  int vf_rate_link_speed;
  struct vf_macvlans vf_mvs;
  struct vf_macvlans* mv_list;
  u32 timer_event_accumulator;
  u32 vferr_refcount;
  struct ixgbe_mac_addr* mac_table;
  struct kobject* info_kobj;
  struct hwmon_buff___2* ixgbe_hwmon_buff;
  struct dentry* ixgbe_dbg_adapter;
  u8 default_up;
  long unsigned int fwd_bitmask[1];
  struct ixgbe_jump_table* jump_tables[10];
  long unsigned int tables;
  u8 rss_indir_tbl[512];
  u32* rss_key;
};

struct hwmon_attr___2 {
  struct device_attribute dev_attr;
  struct ixgbe_hw* hw;
  struct ixgbe_thermal_diode_data* sensor;
  char name[12];
};

struct hwmon_buff___2 {
  struct attribute_group group;
  const struct attribute_group* groups[2];
  struct attribute* attrs[13];
  struct hwmon_attr___2 hwmon_list[12];
  unsigned int n_hwmon;
};

struct ixgbe_mac_addr {
  u8 addr[6];
  u16 pool;
  u16 state;
};

struct ixgbe_mat_field;

struct ixgbe_fdir_filter;

struct ixgbe_jump_table {
  struct ixgbe_mat_field* mat;
  struct ixgbe_fdir_filter* input;
  union ixgbe_atr_input* mask;
  u32 link_hdl;
  long unsigned int child_loc_map[32];
};

struct ixgbe_fdir_filter {
  struct hlist_node fdir_node;
  union ixgbe_atr_input filter;
  u16 sw_idx;
  u64 action;
};

enum ixgbe_state_t {
  __IXGBE_TESTING = 0,
  __IXGBE_RESETTING = 1,
  __IXGBE_DOWN = 2,
  __IXGBE_DISABLED = 3,
  __IXGBE_REMOVING = 4,
  __IXGBE_SERVICE_SCHED = 5,
  __IXGBE_SERVICE_INITED = 6,
  __IXGBE_IN_SFP_INIT = 7,
  __IXGBE_PTP_RUNNING = 8,
  __IXGBE_PTP_TX_IN_PROGRESS = 9,
  __IXGBE_RESET_REQUESTED = 10,
};

struct ixgbe_cb {
  union {
    struct sk_buff* head;
    struct sk_buff* tail;
  };
  dma_addr_t dma;
  u16 append_cnt;
  bool page_released;
};

enum ixgbe_boards {
  board_82598 = 0,
  board_82599 = 1,
  board_X540 = 2,
  board_X550 = 3,
  board_X550EM_x = 4,
  board_x550em_x_fw = 5,
  board_x550em_a = 6,
  board_x550em_a_fw = 7,
};

struct ixgbe_mat_field {
  unsigned int off;
  int (*val)(struct ixgbe_fdir_filter*, union ixgbe_atr_input*, u32, u32);
  unsigned int type;
};

struct ixgbe_nexthdr {
  unsigned int o;
  u32 s;
  u32 m;
  unsigned int off;
  u32 val;
  u32 mask;
  struct ixgbe_mat_field* jump;
};

struct ixgbe_reg_info {
  u32 ofs;
  char* name;
};

struct upper_walk_data {
  struct ixgbe_adapter* adapter;
  u64 action;
  int ifindex;
  u8 queue;
};

struct ixgbe_hic_hdr {
  u8 cmd;
  u8 buf_len;
  union {
    u8 cmd_resv;
    u8 ret_status;
  } cmd_or_resp;
  u8 checksum;
};

struct ixgbe_hic_drv_info {
  struct ixgbe_hic_hdr hdr;
  u8 port_num;
  u8 ver_sub;
  u8 ver_build;
  u8 ver_min;
  u8 ver_maj;
  u8 pad;
  u16 pad2;
};

enum {
  NETDEV_STATS = 0,
  IXGBE_STATS = 1,
};

struct ixgbe_stats {
  char stat_string[32];
  int type;
  int sizeof_stat;
  int stat_offset;
};

struct ixgbe_reg_test {
  u16 reg;
  u8 array_len;
  u8 test_type;
  u32 mask;
  u32 write;
};

enum ixgbe_pfvf_api_rev {
  ixgbe_mbox_api_10 = 0,
  ixgbe_mbox_api_20 = 1,
  ixgbe_mbox_api_11 = 2,
  ixgbe_mbox_api_12 = 3,
  ixgbe_mbox_api_13 = 4,
  ixgbe_mbox_api_14 = 5,
  ixgbe_mbox_api_unknown = 6,
};

enum ixgbevf_xcast_modes {
  IXGBEVF_XCAST_MODE_NONE = 0,
  IXGBEVF_XCAST_MODE_MULTI = 1,
  IXGBEVF_XCAST_MODE_ALLMULTI = 2,
  IXGBEVF_XCAST_MODE_PROMISC = 3,
};

struct ixgbe_hic_hdr2_req {
  u8 cmd;
  u8 buf_lenh;
  u8 buf_lenl;
  u8 checksum;
};

struct ixgbe_hic_hdr2_rsp {
  u8 cmd;
  u8 buf_lenl;
  u8 buf_lenh_status;
  u8 checksum;
};

union ixgbe_hic_hdr2 {
  struct ixgbe_hic_hdr2_req req;
  struct ixgbe_hic_hdr2_rsp rsp;
};

struct ixgbe_hic_drv_info2 {
  struct ixgbe_hic_hdr hdr;
  u8 port_num;
  u8 ver_sub;
  u8 ver_build;
  u8 ver_min;
  u8 ver_maj;
  char driver_string[39];
};

struct ixgbe_hic_read_shadow_ram {
  union ixgbe_hic_hdr2 hdr;
  u32 address;
  u16 length;
  u16 pad2;
  u16 data;
  u16 pad3;
};

struct ixgbe_hic_write_shadow_ram {
  union ixgbe_hic_hdr2 hdr;
  __be32 address;
  __be16 length;
  u16 pad2;
  u16 data;
  u16 pad3;
};

struct ixgbe_hic_disable_rxen {
  struct ixgbe_hic_hdr hdr;
  u8 port_number;
  u8 pad2;
  u16 pad3;
};

struct ixgbe_hic_phy_token_req {
  struct ixgbe_hic_hdr hdr;
  u8 port_number;
  u8 command_type;
  u16 pad;
};

struct ixgbe_hic_internal_phy_req {
  struct ixgbe_hic_hdr hdr;
  u8 port_number;
  u8 command_type;
  __be16 address;
  u16 rsv1;
  __be32 write_data;
  u16 pad;
} __attribute__((packed));

struct ixgbe_hic_internal_phy_resp {
  struct ixgbe_hic_hdr hdr;
  __be32 read_data;
};

struct ixgbe_hic_phy_activity_req {
  struct ixgbe_hic_hdr hdr;
  u8 port_number;
  u8 pad;
  __le16 activity_id;
  __be32 data[4];
};

struct ixgbe_hic_phy_activity_resp {
  struct ixgbe_hic_hdr hdr;
  __be32 data[4];
};

struct ixgbe_adv_tx_context_desc {
  __le32 vlan_macip_lens;
  __le32 fceof_saidx;
  __le32 type_tucmd_mlhl;
  __le32 mss_l4len_idx;
};

enum {
  NAPIF_STATE_SCHED = 1,
  NAPIF_STATE_MISSED = 2,
  NAPIF_STATE_DISABLE = 4,
  NAPIF_STATE_NPSVC = 8,
  NAPIF_STATE_LISTED = 16,
  NAPIF_STATE_NO_BUSY_POLL = 32,
  NAPIF_STATE_IN_BUSY_POLL = 64,
  NAPIF_STATE_PREFER_BUSY_POLL = 128,
  NAPIF_STATE_THREADED = 256,
  NAPIF_STATE_SCHED_THREADED = 512,
};

struct xdp_desc {
  __u64 addr;
  __u32 len;
  __u32 options;
};

enum dcbnl_pfc_up_attrs {
  DCB_PFC_UP_ATTR_UNDEFINED = 0,
  DCB_PFC_UP_ATTR_0 = 1,
  DCB_PFC_UP_ATTR_1 = 2,
  DCB_PFC_UP_ATTR_2 = 3,
  DCB_PFC_UP_ATTR_3 = 4,
  DCB_PFC_UP_ATTR_4 = 5,
  DCB_PFC_UP_ATTR_5 = 6,
  DCB_PFC_UP_ATTR_6 = 7,
  DCB_PFC_UP_ATTR_7 = 8,
  DCB_PFC_UP_ATTR_ALL = 9,
  __DCB_PFC_UP_ATTR_ENUM_MAX = 10,
  DCB_PFC_UP_ATTR_MAX = 9,
};

enum dcbnl_pg_attrs {
  DCB_PG_ATTR_UNDEFINED = 0,
  DCB_PG_ATTR_TC_0 = 1,
  DCB_PG_ATTR_TC_1 = 2,
  DCB_PG_ATTR_TC_2 = 3,
  DCB_PG_ATTR_TC_3 = 4,
  DCB_PG_ATTR_TC_4 = 5,
  DCB_PG_ATTR_TC_5 = 6,
  DCB_PG_ATTR_TC_6 = 7,
  DCB_PG_ATTR_TC_7 = 8,
  DCB_PG_ATTR_TC_MAX = 9,
  DCB_PG_ATTR_TC_ALL = 10,
  DCB_PG_ATTR_BW_ID_0 = 11,
  DCB_PG_ATTR_BW_ID_1 = 12,
  DCB_PG_ATTR_BW_ID_2 = 13,
  DCB_PG_ATTR_BW_ID_3 = 14,
  DCB_PG_ATTR_BW_ID_4 = 15,
  DCB_PG_ATTR_BW_ID_5 = 16,
  DCB_PG_ATTR_BW_ID_6 = 17,
  DCB_PG_ATTR_BW_ID_7 = 18,
  DCB_PG_ATTR_BW_ID_MAX = 19,
  DCB_PG_ATTR_BW_ID_ALL = 20,
  __DCB_PG_ATTR_ENUM_MAX = 21,
  DCB_PG_ATTR_MAX = 20,
};

enum dcbnl_cap_attrs {
  DCB_CAP_ATTR_UNDEFINED = 0,
  DCB_CAP_ATTR_ALL = 1,
  DCB_CAP_ATTR_PG = 2,
  DCB_CAP_ATTR_PFC = 3,
  DCB_CAP_ATTR_UP2TC = 4,
  DCB_CAP_ATTR_PG_TCS = 5,
  DCB_CAP_ATTR_PFC_TCS = 6,
  DCB_CAP_ATTR_GSP = 7,
  DCB_CAP_ATTR_BCN = 8,
  DCB_CAP_ATTR_DCBX = 9,
  __DCB_CAP_ATTR_ENUM_MAX = 10,
  DCB_CAP_ATTR_MAX = 9,
};

enum dcbnl_numtcs_attrs {
  DCB_NUMTCS_ATTR_UNDEFINED = 0,
  DCB_NUMTCS_ATTR_ALL = 1,
  DCB_NUMTCS_ATTR_PG = 2,
  DCB_NUMTCS_ATTR_PFC = 3,
  __DCB_NUMTCS_ATTR_ENUM_MAX = 4,
  DCB_NUMTCS_ATTR_MAX = 3,
};

enum dcb_general_attr_values {
  DCB_ATTR_VALUE_UNDEFINED = 255,
};

enum {
  MLX4_MAX_PORTS = 2,
  MLX4_MAX_PORT_PKEYS = 128,
  MLX4_MAX_PORT_GIDS = 128,
};

enum {
  MLX4_BOARD_ID_LEN = 64,
};

enum {
  MLX4_MAX_NUM_PF = 16,
  MLX4_MAX_NUM_VF = 126,
  MLX4_MAX_NUM_VF_P_PORT = 64,
  MLX4_MFUNC_MAX = 128,
  MLX4_MAX_EQ_NUM = 1024,
  MLX4_MFUNC_EQ_NUM = 4,
  MLX4_MFUNC_MAX_EQES = 8,
  MLX4_MFUNC_EQE_MASK = 7,
};

enum {
  MLX4_BMME_FLAG_WIN_TYPE_2B = 2,
  MLX4_BMME_FLAG_LOCAL_INV = 64,
  MLX4_BMME_FLAG_REMOTE_INV = 128,
  MLX4_BMME_FLAG_TYPE_2_WIN = 512,
  MLX4_BMME_FLAG_RESERVED_LKEY = 1024,
  MLX4_BMME_FLAG_FAST_REG_WR = 2048,
  MLX4_BMME_FLAG_ROCE_V1_V2 = 524288,
  MLX4_BMME_FLAG_PORT_REMAP = 16777216,
  MLX4_BMME_FLAG_VSD_INIT2RTR = 268435456,
};

enum slave_port_state {
  SLAVE_PORT_DOWN = 0,
  SLAVE_PENDING_UP = 1,
  SLAVE_PORT_UP = 2,
};

enum mlx4_qp_region {
  MLX4_QP_REGION_FW = 0,
  MLX4_QP_REGION_RSS_RAW_ETH = 1,
  MLX4_QP_REGION_BOTTOM = 1,
  MLX4_QP_REGION_ETH_ADDR = 2,
  MLX4_QP_REGION_FC_ADDR = 3,
  MLX4_QP_REGION_FC_EXCH = 4,
  MLX4_NUM_QP_REGION = 5,
};

enum mlx4_port_type {
  MLX4_PORT_TYPE_NONE = 0,
  MLX4_PORT_TYPE_IB = 1,
  MLX4_PORT_TYPE_ETH = 2,
  MLX4_PORT_TYPE_AUTO = 3,
};

enum mlx4_steer_type {
  MLX4_MC_STEER = 0,
  MLX4_UC_STEER = 1,
  MLX4_NUM_STEERS = 2,
};

struct mlx4_rate_limit_caps {
  u16 num_rates;
  u8 min_unit;
  u16 min_val;
  u8 max_unit;
  u16 max_val;
};

struct mlx4_phys_caps {
  u32 gid_phys_table_len[3];
  u32 pkey_phys_table_len[3];
  u32 num_phys_eqs;
  u32 base_sqpn;
  u32 base_proxy_sqpn;
  u32 base_tunnel_sqpn;
};

struct mlx4_spec_qps {
  u32 qp0_qkey;
  u32 qp0_proxy;
  u32 qp0_tunnel;
  u32 qp1_proxy;
  u32 qp1_tunnel;
};

struct mlx4_caps {
  u64 fw_ver;
  u32 function;
  int num_ports;
  int vl_cap[3];
  int ib_mtu_cap[3];
  __be32 ib_port_def_cap[3];
  u64 def_mac[3];
  int eth_mtu_cap[3];
  int gid_table_len[3];
  int pkey_table_len[3];
  int trans_type[3];
  int vendor_oui[3];
  int wavelength[3];
  u64 trans_code[3];
  int local_ca_ack_delay;
  int num_uars;
  u32 uar_page_size;
  int bf_reg_size;
  int bf_regs_per_page;
  int max_sq_sg;
  int max_rq_sg;
  int num_qps;
  int max_wqes;
  int max_sq_desc_sz;
  int max_rq_desc_sz;
  int max_qp_init_rdma;
  int max_qp_dest_rdma;
  int max_tc_eth;
  struct mlx4_spec_qps* spec_qps;
  int num_srqs;
  int max_srq_wqes;
  int max_srq_sge;
  int reserved_srqs;
  int num_cqs;
  int max_cqes;
  int reserved_cqs;
  int num_sys_eqs;
  int num_eqs;
  int reserved_eqs;
  int num_comp_vectors;
  int num_mpts;
  int num_mtts;
  int fmr_reserved_mtts;
  int reserved_mtts;
  int reserved_mrws;
  int reserved_uars;
  int num_mgms;
  int num_amgms;
  int reserved_mcgs;
  int num_qp_per_mgm;
  int steering_mode;
  int dmfs_high_steer_mode;
  int fs_log_max_ucast_qp_range_size;
  int num_pds;
  int reserved_pds;
  int max_xrcds;
  int reserved_xrcds;
  int mtt_entry_sz;
  u32 max_msg_sz;
  u32 page_size_cap;
  u64 flags;
  u64 flags2;
  u32 bmme_flags;
  u32 reserved_lkey;
  u16 stat_rate_support;
  u8 port_width_cap[3];
  int max_gso_sz;
  int max_rss_tbl_sz;
  int reserved_qps_cnt[5];
  int reserved_qps;
  int reserved_qps_base[5];
  int log_num_macs;
  int log_num_vlans;
  enum mlx4_port_type port_type[3];
  u8 supported_type[3];
  u8 suggested_type[3];
  u8 default_sense[3];
  u32 port_mask[3];
  enum mlx4_port_type possible_type[3];
  u32 max_counters;
  u8 port_ib_mtu[3];
  u16 sqp_demux;
  u32 eqe_size;
  u32 cqe_size;
  u8 eqe_factor;
  u32 userspace_caps;
  u32 function_caps;
  u16 hca_core_clock;
  u64 phys_port_id[3];
  int tunnel_offload_mode;
  u8 rx_checksum_flags_port[3];
  u8 phv_bit[3];
  u8 alloc_res_qp_mask;
  u32 dmfs_high_rate_qpn_base;
  u32 dmfs_high_rate_qpn_range;
  u32 vf_caps;
  bool wol_port[3];
  struct mlx4_rate_limit_caps rl_caps;
  u32 health_buffer_addrs;
};

struct mlx4_buf_list {
  void* buf;
  dma_addr_t map;
};

struct mlx4_buf {
  struct mlx4_buf_list direct;
  struct mlx4_buf_list* page_list;
  int nbufs;
  int npages;
  int page_shift;
};

struct mlx4_mtt {
  u32 offset;
  int order;
  int page_shift;
};

enum {
  MLX4_DB_PER_PAGE = 1024,
};

struct mlx4_db_pgdir {
  struct list_head list;
  long unsigned int order0[16];
  long unsigned int order1[8];
  long unsigned int* bits[2];
  __be32* db_page;
  dma_addr_t db_dma;
};

struct mlx4_ib_user_db_page;

struct mlx4_db {
  __be32* db;
  union {
    struct mlx4_db_pgdir* pgdir;
    struct mlx4_ib_user_db_page* user_page;
  } u;
  dma_addr_t dma;
  int index;
  int order;
};

struct mlx4_hwq_resources {
  struct mlx4_db db;
  struct mlx4_mtt mtt;
  struct mlx4_buf buf;
};

struct mlx4_uar {
  long unsigned int pfn;
  int index;
  struct list_head bf_list;
  unsigned int free_bf_bmap;
  void* map;
  void* bf_map;
};

struct mlx4_quotas {
  int qp;
  int cq;
  int srq;
  int mpt;
  int mtt;
  int counter;
  int xrcd;
};

struct mlx4_vf_dev {
  u8 min_port;
  u8 n_ports;
};

struct devlink_region;

struct mlx4_fw_crdump {
  bool snapshot_enable;
  struct devlink_region* region_crspace;
  struct devlink_region* region_fw_health;
};

enum mlx4_pci_status {
  MLX4_PCI_STATUS_DISABLED = 0,
  MLX4_PCI_STATUS_ENABLED = 1,
};

struct mlx4_dev;

struct mlx4_dev_persistent {
  struct pci_dev* pdev;
  struct mlx4_dev* dev;
  int nvfs[3];
  int num_vfs;
  enum mlx4_port_type curr_port_type[3];
  enum mlx4_port_type curr_port_poss_type[3];
  struct work_struct catas_work;
  struct workqueue_struct* catas_wq;
  struct mutex device_state_mutex;
  u8 state;
  struct mutex interface_state_mutex;
  u8 interface_state;
  struct mutex pci_status_mutex;
  enum mlx4_pci_status pci_status;
  struct mlx4_fw_crdump crdump;
};

struct mlx4_dev {
  struct mlx4_dev_persistent* persist;
  long unsigned int flags;
  long unsigned int num_slaves;
  struct mlx4_caps caps;
  struct mlx4_phys_caps phys_caps;
  struct mlx4_quotas quotas;
  struct xarray qp_table_tree;
  u8 rev_id;
  u8 port_random_macs;
  char board_id[64];
  int numa_node;
  int oper_log_mgm_entry_size;
  u64 regid_promisc_array[3];
  u64 regid_allmulti_array[3];
  struct mlx4_vf_dev* dev_vfs;
  u8 uar_page_shift;
};

struct mlx4_eqe {
  u8 reserved1;
  u8 type;
  u8 reserved2;
  u8 subtype;
  union {
    u32 raw[6];
    struct {
      __be32 cqn;
    } comp;
    struct {
      u16 reserved1;
      __be16 token;
      u32 reserved2;
      u8 reserved3[3];
      u8 status;
      __be64 out_param;
    } __attribute__((packed)) cmd;
    struct {
      __be32 qpn;
    } qp;
    struct {
      __be32 srqn;
    } srq;
    struct {
      __be32 cqn;
      u32 reserved1;
      u8 reserved2[3];
      u8 syndrome;
    } cq_err;
    struct {
      u32 reserved1[2];
      __be32 port;
    } port_change;
    struct {
      u32 reserved;
      u32 bit_vec[4];
    } comm_channel_arm;
    struct {
      u8 port;
      u8 reserved[3];
      __be64 mac;
    } __attribute__((packed)) mac_update;
    struct {
      __be32 slave_id;
    } flr_event;
    struct {
      __be16 current_temperature;
      __be16 warning_threshold;
    } warming;
    struct {
      u8 reserved[3];
      u8 port;
      union {
        struct {
          __be16 mstr_sm_lid;
          __be16 port_lid;
          __be32 changed_attr;
          u8 reserved[3];
          u8 mstr_sm_sl;
          __be64 gid_prefix;
        } __attribute__((packed)) port_info;
        struct {
          __be32 block_ptr;
          __be32 tbl_entries_mask;
        } tbl_change_info;
        struct {
          u8 sl2vl_table[8];
        } sl2vl_tbl_change_info;
      } params;
    } __attribute__((packed)) port_mgmt_change;
    struct {
      u8 reserved[3];
      u8 port;
      u32 reserved1[5];
    } bad_cable;
  } event;
  u8 slave_id;
  u8 reserved3[2];
  u8 owner;
} __attribute__((packed));

struct mlx4_active_ports {
  long unsigned int ports[1];
};

struct mlx4_port_map {
  u8 port1;
  u8 port2;
};

enum {
  MLX4_DEFAULT_MGM_LOG_ENTRY_SIZE = 10,
  MLX4_MIN_MGM_LOG_ENTRY_SIZE = 7,
  MLX4_MAX_MGM_LOG_ENTRY_SIZE = 12,
  MLX4_MAX_QP_PER_MGM = 1016,
};

enum {
  MLX4_CMPT_TYPE_QP = 0,
  MLX4_CMPT_TYPE_SRQ = 1,
  MLX4_CMPT_TYPE_CQ = 2,
  MLX4_CMPT_TYPE_EQ = 3,
  MLX4_CMPT_NUM_TYPE = 4,
};

enum mlx4_resource {
  RES_QP = 0,
  RES_CQ = 1,
  RES_SRQ = 2,
  RES_XRCD = 3,
  RES_MPT = 4,
  RES_MTT = 5,
  RES_MAC = 6,
  RES_VLAN = 7,
  RES_NPORT_ID = 8,
  RES_COUNTER = 9,
  RES_FS_RULE = 10,
  RES_EQ = 11,
  MLX4_NUM_OF_RESOURCE_TYPE = 12,
};

struct mlx4_vhcr_cmd {
  __be64 in_param;
  __be32 in_modifier;
  u32 reserved1;
  __be64 out_param;
  __be16 token;
  u16 reserved;
  u8 status;
  u8 flags;
  __be16 opcode;
};

struct mlx4_bitmap {
  u32 last;
  u32 top;
  u32 max;
  u32 reserved_top;
  u32 mask;
  u32 avail;
  u32 effective_len;
  spinlock_t lock;
  long unsigned int* table;
};

struct mlx4_buddy {
  long unsigned int** bits;
  unsigned int* num_free;
  u32 max_order;
  spinlock_t lock;
};

struct mlx4_icm;

struct mlx4_icm_table {
  u64 virt;
  int num_icm;
  u32 num_obj;
  int obj_size;
  int lowmem;
  int coherent;
  struct mutex mutex;
  struct mlx4_icm** icm;
};

struct mlx4_eq_tasklet {
  struct list_head list;
  struct list_head process_list;
  struct tasklet_struct task;
  spinlock_t lock;
};

struct mlx4_eq {
  struct mlx4_dev* dev;
  void* doorbell;
  int eqn;
  u32 cons_index;
  u16 irq;
  u16 have_irq;
  int nent;
  struct mlx4_buf_list* page_list;
  struct mlx4_mtt mtt;
  struct mlx4_eq_tasklet tasklet_ctx;
  struct mlx4_active_ports actv_ports;
  u32 ref_count;
  cpumask_var_t affinity_mask;
};

struct mlx4_slave_eqe {
  u8 type;
  u8 port;
  u32 param;
};

struct mlx4_slave_event_eq_info {
  int eqn;
  u16 token;
};

struct mlx4_fw {
  u64 clr_int_base;
  u64 catas_offset;
  u64 comm_base;
  u64 clock_offset;
  struct mlx4_icm* fw_icm;
  struct mlx4_icm* aux_icm;
  u32 catas_size;
  u16 fw_pages;
  u8 clr_int_bar;
  u8 catas_bar;
  u8 comm_bar;
  u8 clock_bar;
};

struct mlx4_comm {
  u32 slave_write;
  u32 slave_read;
};

struct mlx4_vlan_fltr {
  __be32 entry[128];
};

struct mlx4_slave_state {
  u8 comm_toggle;
  u8 last_cmd;
  u8 init_port_mask;
  bool active;
  bool old_vlan_api;
  bool vst_qinq_supported;
  u8 function;
  dma_addr_t vhcr_dma;
  u16 user_mtu[3];
  u16 mtu[3];
  __be32 ib_cap_mask[3];
  struct mlx4_slave_eqe eq[8];
  struct list_head mcast_filters[3];
  struct mlx4_vlan_fltr* vlan_filter[3];
  struct mlx4_slave_event_eq_info event_eq[64];
  u16 eq_pi;
  u16 eq_ci;
  spinlock_t lock;
  u8 is_slave_going_down;
  u32 cookie;
  enum slave_port_state port_state[3];
};

struct mlx4_vport_state {
  u64 mac;
  u16 default_vlan;
  u8 default_qos;
  __be16 vlan_proto;
  u32 tx_rate;
  bool spoofchk;
  u32 link_state;
  u8 qos_vport;
  __be64 guid;
};

struct mlx4_vf_admin_state {
  struct mlx4_vport_state vport[3];
  u8 enable_smi[3];
};

struct mlx4_vport_oper_state {
  struct mlx4_vport_state state;
  int mac_idx;
  int vlan_idx;
};

struct mlx4_vf_oper_state {
  struct mlx4_vport_oper_state vport[3];
  u8 smi_enabled[3];
};

struct slave_list {
  struct mutex mutex;
  struct list_head res_list[12];
};

struct resource_allocator {
  spinlock_t alloc_lock;
  union {
    unsigned int res_reserved;
    unsigned int res_port_rsvd[2];
  };
  union {
    int res_free;
    int res_port_free[2];
  };
  int* quota;
  int* allocated;
  int* guaranteed;
};

struct mlx4_resource_tracker {
  spinlock_t lock;
  struct rb_root res_tree[12];
  struct slave_list* slave_list;
  struct resource_allocator res_alloc[12];
};

struct mlx4_slave_event_eq {
  u32 eqn;
  u32 cons;
  u32 prod;
  spinlock_t event_lock;
  struct mlx4_eqe event_eqe[128];
};

struct mlx4_qos_manager {
  int num_of_qos_vfs;
  long unsigned int priority_bm[1];
};

struct mlx4_master_qp0_state {
  int proxy_qp0_active;
  int qp0_active;
  int port_active;
};

struct mlx4_mfunc_master_ctx {
  struct mlx4_slave_state* slave_state;
  struct mlx4_vf_admin_state* vf_admin;
  struct mlx4_vf_oper_state* vf_oper;
  struct mlx4_master_qp0_state qp0_state[3];
  int init_port_ref[3];
  u16 max_mtu[3];
  u16 max_user_mtu[3];
  u8 pptx;
  u8 pprx;
  short : 16;
  int disable_mcast_ref[3];
  int : 32;
  struct mlx4_resource_tracker res_tracker;
  struct workqueue_struct* comm_wq;
  struct work_struct comm_work;
  struct work_struct slave_event_work;
  struct work_struct slave_flr_event_work;
  spinlock_t slave_state_lock;
  __be32 comm_arm_bit_vector[4];
  struct mlx4_eqe cmd_eqe;
  struct mlx4_slave_event_eq slave_eq;
  int : 32;
  struct mutex gen_eqe_mutex[128];
  struct mlx4_qos_manager qos_ctl[3];
} __attribute__((packed));

struct mlx4_mfunc {
  struct mlx4_comm* comm;
  struct mlx4_vhcr_cmd* vhcr;
  dma_addr_t vhcr_dma;
  struct mlx4_mfunc_master_ctx master;
};

struct mlx4_cmd_context;

struct mlx4_cmd {
  struct dma_pool___2* pool;
  void* hcr;
  struct mutex slave_cmd_mutex;
  struct semaphore poll_sem;
  struct semaphore event_sem;
  struct rw_semaphore switch_sem;
  int max_cmds;
  spinlock_t context_lock;
  int free_head;
  struct mlx4_cmd_context* context;
  u16 token_mask;
  u8 use_events;
  u8 toggle;
  u8 comm_toggle;
  u8 initialized;
};

struct mlx4_uar_table {
  struct mlx4_bitmap bitmap;
};

struct mlx4_mr_table {
  struct mlx4_bitmap mpt_bitmap;
  struct mlx4_buddy mtt_buddy;
  u64 mtt_base;
  u64 mpt_base;
  struct mlx4_icm_table mtt_table;
  struct mlx4_icm_table dmpt_table;
};

struct mlx4_cq_table {
  struct mlx4_bitmap bitmap;
  spinlock_t lock;
  struct xarray tree;
  struct mlx4_icm_table table;
  struct mlx4_icm_table cmpt_table;
};

struct mlx4_eq_table {
  struct mlx4_bitmap bitmap;
  char* irq_names;
  void* clr_int;
  void** uar_map;
  u32 clr_mask;
  struct mlx4_eq* eq;
  struct mlx4_icm_table table;
  struct mlx4_icm_table cmpt_table;
  int have_irq;
  u8 inta_pin;
};

struct mlx4_srq_table {
  struct mlx4_bitmap bitmap;
  spinlock_t lock;
  struct xarray tree;
  struct mlx4_icm_table table;
  struct mlx4_icm_table cmpt_table;
};

struct mlx4_zone_allocator;

struct mlx4_qp_table {
  struct mlx4_bitmap* bitmap_gen;
  struct mlx4_zone_allocator* zones;
  u32 zones_uids[3];
  u32 rdmarc_base;
  int rdmarc_shift;
  spinlock_t lock;
  struct mlx4_icm_table qp_table;
  struct mlx4_icm_table auxc_table;
  struct mlx4_icm_table altc_table;
  struct mlx4_icm_table rdmarc_table;
  struct mlx4_icm_table cmpt_table;
};

struct mlx4_mcg_table {
  struct mutex mutex;
  struct mlx4_bitmap bitmap;
  struct mlx4_icm_table table;
};

struct mlx4_catas_err {
  u32* map;
  struct timer_list timer;
  struct list_head list;
};

struct mlx4_mac_table {
  __be64 entries[128];
  int refs[128];
  bool is_dup[128];
  struct mutex mutex;
  int total;
  int max;
};

struct mlx4_vlan_table {
  __be32 entries[128];
  int refs[128];
  int is_dup[128];
  struct mutex mutex;
  int total;
  int max;
};

struct mlx4_roce_gid_entry {
  u8 raw[16];
};

struct mlx4_roce_gid_table {
  struct mlx4_roce_gid_entry roce_gids[128];
  struct mutex mutex;
};

struct mlx4_port_info {
  struct mlx4_dev* dev;
  int port;
  char dev_name[16];
  struct device_attribute port_attr;
  enum mlx4_port_type tmp_type;
  char dev_mtu_name[16];
  struct device_attribute port_mtu_attr;
  struct mlx4_mac_table mac_table;
  struct mlx4_vlan_table vlan_table;
  struct mlx4_roce_gid_table gid_table;
  int base_qpn;
  struct cpu_rmap* rmap;
  struct devlink_port devlink_port;
};

struct mlx4_sense {
  struct mlx4_dev* dev;
  u8 do_sense_port[3];
  u8 sense_allowed[3];
  struct delayed_work sense_poll;
};

struct mlx4_msix_ctl {
  long unsigned int pool_bm[2];
  struct mutex pool_lock;
};

struct mlx4_steer;

struct io_mapping;

struct mlx4_priv {
  struct mlx4_dev dev;
  struct list_head dev_list;
  struct list_head ctx_list;
  spinlock_t ctx_lock;
  int pci_dev_data;
  int removed;
  struct list_head pgdir_list;
  struct mutex pgdir_mutex;
  struct mlx4_fw fw;
  struct mlx4_cmd cmd;
  struct mlx4_mfunc mfunc;
  struct mlx4_bitmap pd_bitmap;
  struct mlx4_bitmap xrcd_bitmap;
  struct mlx4_uar_table uar_table;
  struct mlx4_mr_table mr_table;
  struct mlx4_cq_table cq_table;
  struct mlx4_eq_table eq_table;
  struct mlx4_srq_table srq_table;
  struct mlx4_qp_table qp_table;
  struct mlx4_mcg_table mcg_table;
  struct mlx4_bitmap counters_bitmap;
  int def_counter[2];
  struct mlx4_catas_err catas_err;
  void* clr_base;
  struct mlx4_uar driver_uar;
  void* kar;
  struct mlx4_port_info port[3];
  struct mlx4_sense sense;
  struct mutex port_mutex;
  struct mlx4_msix_ctl msix_ctl;
  struct mlx4_steer* steer;
  struct list_head bf_list;
  struct mutex bf_mutex;
  struct io_mapping* bf_mapping;
  void* clock_mapping;
  int reserved_mtts;
  int fs_hash_mode;
  u8 virt2phys_pkey[32768];
  struct mlx4_port_map v2p;
  struct mutex bond_mutex;
  __be64 slave_node_guids[128];
  atomic_t opreq_count;
  struct work_struct opreq_task;
};

enum mlx4_qp_table_zones {
  MLX4_QP_TABLE_ZONE_GENERAL = 0,
  MLX4_QP_TABLE_ZONE_RSS = 1,
  MLX4_QP_TABLE_ZONE_RAW_ETH = 2,
  MLX4_QP_TABLE_ZONE_NUM = 3,
};

enum mlx4_zone_alloc_flags {
  MLX4_ZONE_ALLOC_FLAGS_NO_OVERLAP = 1,
};

struct mlx4_zone_allocator {
  struct list_head entries;
  struct list_head prios;
  u32 last_uid;
  u32 mask;
  spinlock_t lock;
  enum mlx4_zone_alloc_flags flags;
};

struct mlx4_steer {
  struct list_head promisc_qps[2];
  struct list_head steer_entries[2];
};

enum {
  MLX4_NO_RR = 0,
  MLX4_USE_RR = 1,
};

enum mlx4_zone_flags {
  MLX4_ZONE_ALLOW_ALLOC_FROM_LOWER_PRIO = 1,
  MLX4_ZONE_ALLOW_ALLOC_FROM_EQ_PRIO = 2,
  MLX4_ZONE_FALLBACK_TO_HIGHER_PRIO = 4,
  MLX4_ZONE_USE_RR = 8,
};

struct mlx4_zone_entry {
  struct list_head list;
  struct list_head prio_list;
  u32 uid;
  struct mlx4_zone_allocator* allocator;
  struct mlx4_bitmap* bitmap;
  int use_rr;
  int priority;
  int offset;
  enum mlx4_zone_flags flags;
};

enum {
  MLX4_FLAG_MSI_X = 1,
  MLX4_FLAG_OLD_PORT_CMDS = 2,
  MLX4_FLAG_MASTER = 4,
  MLX4_FLAG_SLAVE = 8,
  MLX4_FLAG_SRIOV = 16,
  MLX4_FLAG_OLD_REG_MAC = 64,
  MLX4_FLAG_BONDED = 128,
  MLX4_FLAG_SECURE_HOST = 256,
};

enum {
  MLX4_VF_CAP_FLAG_RESET = 1,
};

enum {
  MLX4_DEVICE_STATE_UP = 1,
  MLX4_DEVICE_STATE_INTERNAL_ERROR = 2,
};

enum {
  MLX4_INTERFACE_STATE_UP = 1,
  MLX4_INTERFACE_STATE_DELETION = 2,
  MLX4_INTERFACE_STATE_NOWAIT = 4,
};

enum mlx4_dev_event {
  MLX4_DEV_EVENT_CATASTROPHIC_ERROR = 0,
  MLX4_DEV_EVENT_PORT_UP = 1,
  MLX4_DEV_EVENT_PORT_DOWN = 2,
  MLX4_DEV_EVENT_PORT_REINIT = 3,
  MLX4_DEV_EVENT_PORT_MGMT_CHANGE = 4,
  MLX4_DEV_EVENT_SLAVE_INIT = 5,
  MLX4_DEV_EVENT_SLAVE_SHUTDOWN = 6,
};

enum {
  MLX4_HCR_BASE = 525952,
  MLX4_HCR_SIZE = 28,
  MLX4_CLR_INT_SIZE = 8,
  MLX4_SLAVE_COMM_BASE = 0,
  MLX4_COMM_PAGESIZE = 4096,
  MLX4_CLOCK_SIZE = 8,
  MLX4_COMM_CHAN_CAPS = 8,
  MLX4_COMM_CHAN_FLAGS = 12,
};

enum {
  MLX4_CATAS_POLL_INTERVAL = 5000,
};

enum {
  IFLA_VF_LINK_STATE_AUTO = 0,
  IFLA_VF_LINK_STATE_ENABLE = 1,
  IFLA_VF_LINK_STATE_DISABLE = 2,
  __IFLA_VF_LINK_STATE_MAX = 3,
};

enum {
  MLX4_DEV_CAP_FLAG2_RSS = 1,
  MLX4_DEV_CAP_FLAG2_RSS_TOP = 2,
  MLX4_DEV_CAP_FLAG2_RSS_XOR = 4,
  MLX4_DEV_CAP_FLAG2_FS_EN = 8,
  MLX4_DEV_CAP_FLAG2_REASSIGN_MAC_EN = 16,
  MLX4_DEV_CAP_FLAG2_TS = 32,
  MLX4_DEV_CAP_FLAG2_VLAN_CONTROL = 64,
  MLX4_DEV_CAP_FLAG2_FSM = 128,
  MLX4_DEV_CAP_FLAG2_UPDATE_QP = 256,
  MLX4_DEV_CAP_FLAG2_DMFS_IPOIB = 512,
  MLX4_DEV_CAP_FLAG2_VXLAN_OFFLOADS = 1024,
  MLX4_DEV_CAP_FLAG2_MAD_DEMUX = 2048,
  MLX4_DEV_CAP_FLAG2_CQE_STRIDE = 4096,
  MLX4_DEV_CAP_FLAG2_EQE_STRIDE = 8192,
  MLX4_DEV_CAP_FLAG2_ETH_PROT_CTRL = 16384,
  MLX4_DEV_CAP_FLAG2_ETH_BACKPL_AN_REP = 32768,
  MLX4_DEV_CAP_FLAG2_CONFIG_DEV = 65536,
  MLX4_DEV_CAP_FLAG2_SYS_EQS = 131072,
  MLX4_DEV_CAP_FLAG2_80_VFS = 262144,
  MLX4_DEV_CAP_FLAG2_FS_A0 = 524288,
  MLX4_DEV_CAP_FLAG2_RECOVERABLE_ERROR_EVENT = 1048576,
  MLX4_DEV_CAP_FLAG2_PORT_REMAP = 2097152,
  MLX4_DEV_CAP_FLAG2_QCN = 4194304,
  MLX4_DEV_CAP_FLAG2_QP_RATE_LIMIT = 8388608,
  MLX4_DEV_CAP_FLAG2_FLOWSTATS_EN = 16777216,
  MLX4_DEV_CAP_FLAG2_QOS_VPP = 33554432,
  MLX4_DEV_CAP_FLAG2_ETS_CFG = 67108864,
  MLX4_DEV_CAP_FLAG2_PORT_BEACON = 134217728,
  MLX4_DEV_CAP_FLAG2_IGNORE_FCS = 268435456,
  MLX4_DEV_CAP_FLAG2_PHV_EN = 536870912,
  MLX4_DEV_CAP_FLAG2_SKIP_OUTER_VLAN = 1073741824,
  MLX4_DEV_CAP_FLAG2_UPDATE_QP_SRC_CHECK_LB = 2147483648,
  MLX4_DEV_CAP_FLAG2_LB_SRC_CHK = 0,
  MLX4_DEV_CAP_FLAG2_ROCE_V1_V2 = 0,
  MLX4_DEV_CAP_FLAG2_DMFS_UC_MC_SNIFFER = 0,
  MLX4_DEV_CAP_FLAG2_DIAG_PER_PORT = 0,
  MLX4_DEV_CAP_FLAG2_SVLAN_BY_QP = 0,
  MLX4_DEV_CAP_FLAG2_SL_TO_VL_CHANGE_EVENT = 0,
  MLX4_DEV_CAP_FLAG2_USER_MAC_EN = 0,
  MLX4_DEV_CAP_FLAG2_DRIVER_VERSION_TO_FW = 0,
  MLX4_DEV_CAP_FLAG2_SW_CQ_INIT = 0,
};

enum mlx4_event {
  MLX4_EVENT_TYPE_COMP = 0,
  MLX4_EVENT_TYPE_PATH_MIG = 1,
  MLX4_EVENT_TYPE_COMM_EST = 2,
  MLX4_EVENT_TYPE_SQ_DRAINED = 3,
  MLX4_EVENT_TYPE_SRQ_QP_LAST_WQE = 19,
  MLX4_EVENT_TYPE_SRQ_LIMIT = 20,
  MLX4_EVENT_TYPE_CQ_ERROR = 4,
  MLX4_EVENT_TYPE_WQ_CATAS_ERROR = 5,
  MLX4_EVENT_TYPE_EEC_CATAS_ERROR = 6,
  MLX4_EVENT_TYPE_PATH_MIG_FAILED = 7,
  MLX4_EVENT_TYPE_WQ_INVAL_REQ_ERROR = 16,
  MLX4_EVENT_TYPE_WQ_ACCESS_ERROR = 17,
  MLX4_EVENT_TYPE_SRQ_CATAS_ERROR = 18,
  MLX4_EVENT_TYPE_LOCAL_CATAS_ERROR = 8,
  MLX4_EVENT_TYPE_PORT_CHANGE = 9,
  MLX4_EVENT_TYPE_EQ_OVERFLOW = 15,
  MLX4_EVENT_TYPE_ECC_DETECT = 14,
  MLX4_EVENT_TYPE_CMD = 10,
  MLX4_EVENT_TYPE_VEP_UPDATE = 25,
  MLX4_EVENT_TYPE_COMM_CHANNEL = 24,
  MLX4_EVENT_TYPE_OP_REQUIRED = 26,
  MLX4_EVENT_TYPE_FATAL_WARNING = 27,
  MLX4_EVENT_TYPE_FLR_EVENT = 28,
  MLX4_EVENT_TYPE_PORT_MNG_CHG_EVENT = 29,
  MLX4_EVENT_TYPE_RECOVERABLE_ERROR_EVENT = 62,
  MLX4_EVENT_TYPE_NONE = 255,
};

enum {
  MLX4_PORT_CHANGE_SUBTYPE_DOWN = 1,
  MLX4_PORT_CHANGE_SUBTYPE_ACTIVE = 4,
};

struct mlx4_counter {
  u8 reserved1[3];
  u8 counter_mode;
  __be32 num_ifc;
  u32 reserved2[2];
  __be64 rx_frames;
  __be64 rx_bytes;
  __be64 tx_frames;
  __be64 tx_bytes;
};

struct mlx4_slaves_pport {
  long unsigned int slaves[2];
};

enum {
  MLX4_CMD_SYS_EN = 1,
  MLX4_CMD_SYS_DIS = 2,
  MLX4_CMD_MAP_FA = 4095,
  MLX4_CMD_UNMAP_FA = 4094,
  MLX4_CMD_RUN_FW = 4086,
  MLX4_CMD_MOD_STAT_CFG = 52,
  MLX4_CMD_QUERY_DEV_CAP = 3,
  MLX4_CMD_QUERY_FW = 4,
  MLX4_CMD_ENABLE_LAM = 4088,
  MLX4_CMD_DISABLE_LAM = 4087,
  MLX4_CMD_QUERY_DDR = 5,
  MLX4_CMD_QUERY_ADAPTER = 6,
  MLX4_CMD_INIT_HCA = 7,
  MLX4_CMD_CLOSE_HCA = 8,
  MLX4_CMD_INIT_PORT = 9,
  MLX4_CMD_CLOSE_PORT = 10,
  MLX4_CMD_QUERY_HCA = 11,
  MLX4_CMD_QUERY_PORT = 67,
  MLX4_CMD_SENSE_PORT = 77,
  MLX4_CMD_HW_HEALTH_CHECK = 80,
  MLX4_CMD_SET_PORT = 12,
  MLX4_CMD_SET_NODE = 90,
  MLX4_CMD_QUERY_FUNC = 86,
  MLX4_CMD_ACCESS_DDR = 46,
  MLX4_CMD_MAP_ICM = 4090,
  MLX4_CMD_UNMAP_ICM = 4089,
  MLX4_CMD_MAP_ICM_AUX = 4092,
  MLX4_CMD_UNMAP_ICM_AUX = 4091,
  MLX4_CMD_SET_ICM_SIZE = 4093,
  MLX4_CMD_ACCESS_REG = 59,
  MLX4_CMD_ALLOCATE_VPP = 128,
  MLX4_CMD_SET_VPORT_QOS = 129,
  MLX4_CMD_INFORM_FLR_DONE = 91,
  MLX4_CMD_VIRT_PORT_MAP = 92,
  MLX4_CMD_GET_OP_REQ = 89,
  MLX4_CMD_SW2HW_MPT = 13,
  MLX4_CMD_QUERY_MPT = 14,
  MLX4_CMD_HW2SW_MPT = 15,
  MLX4_CMD_READ_MTT = 16,
  MLX4_CMD_WRITE_MTT = 17,
  MLX4_CMD_SYNC_TPT = 47,
  MLX4_CMD_MAP_EQ = 18,
  MLX4_CMD_SW2HW_EQ = 19,
  MLX4_CMD_HW2SW_EQ = 20,
  MLX4_CMD_QUERY_EQ = 21,
  MLX4_CMD_SW2HW_CQ = 22,
  MLX4_CMD_HW2SW_CQ = 23,
  MLX4_CMD_QUERY_CQ = 24,
  MLX4_CMD_MODIFY_CQ = 44,
  MLX4_CMD_SW2HW_SRQ = 53,
  MLX4_CMD_HW2SW_SRQ = 54,
  MLX4_CMD_QUERY_SRQ = 55,
  MLX4_CMD_ARM_SRQ = 64,
  MLX4_CMD_RST2INIT_QP = 25,
  MLX4_CMD_INIT2RTR_QP = 26,
  MLX4_CMD_RTR2RTS_QP = 27,
  MLX4_CMD_RTS2RTS_QP = 28,
  MLX4_CMD_SQERR2RTS_QP = 29,
  MLX4_CMD_2ERR_QP = 30,
  MLX4_CMD_RTS2SQD_QP = 31,
  MLX4_CMD_SQD2SQD_QP = 56,
  MLX4_CMD_SQD2RTS_QP = 32,
  MLX4_CMD_2RST_QP = 33,
  MLX4_CMD_QUERY_QP = 34,
  MLX4_CMD_INIT2INIT_QP = 45,
  MLX4_CMD_SUSPEND_QP = 50,
  MLX4_CMD_UNSUSPEND_QP = 51,
  MLX4_CMD_UPDATE_QP = 97,
  MLX4_CMD_CONF_SPECIAL_QP = 35,
  MLX4_CMD_MAD_IFC = 36,
  MLX4_CMD_MAD_DEMUX = 515,
  MLX4_CMD_READ_MCG = 37,
  MLX4_CMD_WRITE_MCG = 38,
  MLX4_CMD_MGID_HASH = 39,
  MLX4_CMD_DIAG_RPRT = 48,
  MLX4_CMD_NOP = 49,
  MLX4_CMD_CONFIG_DEV = 58,
  MLX4_CMD_ACCESS_MEM = 46,
  MLX4_CMD_SET_VEP = 82,
  MLX4_CMD_SET_VLAN_FLTR = 71,
  MLX4_CMD_SET_MCAST_FLTR = 72,
  MLX4_CMD_DUMP_ETH_STATS = 73,
  MLX4_CMD_ARM_COMM_CHANNEL = 87,
  MLX4_CMD_GEN_EQE = 88,
  MLX4_CMD_ALLOC_RES = 3840,
  MLX4_CMD_FREE_RES = 3841,
  MLX4_CMD_MCAST_ATTACH = 3845,
  MLX4_CMD_UCAST_ATTACH = 3846,
  MLX4_CMD_PROMISC = 3848,
  MLX4_CMD_QUERY_FUNC_CAP = 3850,
  MLX4_CMD_QP_ATTACH = 3851,
  MLX4_CMD_QUERY_DEBUG_MSG = 42,
  MLX4_CMD_SET_DEBUG_MSG = 43,
  MLX4_CMD_QUERY_IF_STAT = 84,
  MLX4_CMD_SET_IF_STAT = 85,
  MLX4_QP_FLOW_STEERING_ATTACH = 101,
  MLX4_QP_FLOW_STEERING_DETACH = 102,
  MLX4_FLOW_STEERING_IB_UC_QP_RANGE = 100,
  MLX4_CMD_CONGESTION_CTRL_OPCODE = 104,
};

enum {
  MLX4_CMD_TIME_CLASS_A = 60000,
  MLX4_CMD_TIME_CLASS_B = 60000,
  MLX4_CMD_TIME_CLASS_C = 60000,
};

enum {
  MLX4_MAILBOX_SIZE = 4096,
  MLX4_ACCESS_MEM_ALIGN = 256,
};

enum {
  MLX4_SET_PORT_IB_OPCODE = 0,
  MLX4_SET_PORT_ETH_OPCODE = 1,
  MLX4_SET_PORT_BEACON_OPCODE = 4,
};

enum {
  MLX4_CMD_WRAPPED = 0,
  MLX4_CMD_NATIVE = 1,
};

struct mlx4_cmd_mailbox {
  void* buf;
  dma_addr_t dma;
};

enum {
  IB_USER_MAD_USER_RMPP = 1,
};

enum ib_port_state {
  IB_PORT_NOP = 0,
  IB_PORT_DOWN = 1,
  IB_PORT_INIT = 2,
  IB_PORT_ARMED = 3,
  IB_PORT_ACTIVE = 4,
  IB_PORT_ACTIVE_DEFER = 5,
};

enum {
  IB_MGMT_MAD_HDR = 24,
  IB_MGMT_MAD_DATA = 232,
  IB_MGMT_RMPP_HDR = 36,
  IB_MGMT_RMPP_DATA = 220,
  IB_MGMT_VENDOR_HDR = 40,
  IB_MGMT_VENDOR_DATA = 216,
  IB_MGMT_SA_HDR = 56,
  IB_MGMT_SA_DATA = 200,
  IB_MGMT_DEVICE_HDR = 64,
  IB_MGMT_DEVICE_DATA = 192,
  IB_MGMT_MAD_SIZE = 256,
  OPA_MGMT_MAD_DATA = 2024,
  OPA_MGMT_RMPP_DATA = 2012,
  OPA_MGMT_MAD_SIZE = 2048,
};

struct ib_smp {
  u8 base_version;
  u8 mgmt_class;
  u8 class_version;
  u8 method;
  __be16 status;
  u8 hop_ptr;
  u8 hop_cnt;
  __be64 tid;
  __be16 attr_id;
  __be16 resv;
  __be32 attr_mod;
  __be64 mkey;
  __be16 dr_slid;
  __be16 dr_dlid;
  u8 reserved[28];
  u8 data[64];
  u8 initial_path[64];
  u8 return_path[64];
};

struct mlx4_vport_qos_param {
  u32 bw_share;
  u32 max_avg_bw;
  u8 enable;
};

enum {
  MLX4_COMM_CMD_RESET = 0,
  MLX4_COMM_CMD_VHCR0 = 1,
  MLX4_COMM_CMD_VHCR1 = 2,
  MLX4_COMM_CMD_VHCR2 = 3,
  MLX4_COMM_CMD_VHCR_EN = 4,
  MLX4_COMM_CMD_VHCR_POST = 5,
  MLX4_COMM_CMD_FLR = 254,
};

enum {
  MLX4_VF_SMI_DISABLED = 0,
  MLX4_VF_SMI_ENABLED = 1,
};

struct mlx4_vhcr {
  u64 in_param;
  u64 out_param;
  u32 in_modifier;
  u32 errno;
  u16 op;
  u16 token;
  u8 op_modifier;
  u8 e_bit;
};

struct mlx4_cmd_info {
  u16 opcode;
  bool has_inbox;
  bool has_outbox;
  bool out_is_imm;
  bool encode_slave_id;
  int (*verify)(
      struct mlx4_dev*,
      int,
      struct mlx4_vhcr*,
      struct mlx4_cmd_mailbox*);
  int (*wrapper)(
      struct mlx4_dev*,
      int,
      struct mlx4_vhcr*,
      struct mlx4_cmd_mailbox*,
      struct mlx4_cmd_mailbox*,
      struct mlx4_cmd_info*);
};

struct mlx4_icm {
  struct list_head chunk_list;
  int refcount;
};

struct mlx4_cmd_context {
  struct completion done;
  int result;
  int next;
  u64 out_param;
  u16 token;
  u8 fw_status;
};

enum {
  MLX4_VF_IMMED_VLAN_FLAG_VLAN = 1,
  MLX4_VF_IMMED_VLAN_FLAG_QOS = 2,
  MLX4_VF_IMMED_VLAN_FLAG_LINK_DISABLE = 4,
};

struct mlx4_vf_immed_vlan_work {
  struct work_struct work;
  struct mlx4_priv* priv;
  int flags;
  int slave;
  int vlan_ix;
  int orig_vlan_ix;
  u8 port;
  u8 qos;
  u8 qos_vport;
  u16 vlan_id;
  u16 orig_vlan_id;
  __be16 vlan_proto;
};

enum {
  MLX4_CMD_CLEANUP_STRUCT = 1,
  MLX4_CMD_CLEANUP_POOL = 2,
  MLX4_CMD_CLEANUP_HCR = 4,
  MLX4_CMD_CLEANUP_VHCR = 8,
  MLX4_CMD_CLEANUP_ALL = 15,
};

enum {
  CMD_STAT_OK = 0,
  CMD_STAT_INTERNAL_ERR = 1,
  CMD_STAT_BAD_OP = 2,
  CMD_STAT_BAD_PARAM = 3,
  CMD_STAT_BAD_SYS_STATE = 4,
  CMD_STAT_BAD_RESOURCE = 5,
  CMD_STAT_RESOURCE_BUSY = 6,
  CMD_STAT_EXCEED_LIM = 8,
  CMD_STAT_BAD_RES_STATE = 9,
  CMD_STAT_BAD_INDEX = 10,
  CMD_STAT_BAD_NVMEM = 11,
  CMD_STAT_ICM_ERROR = 12,
  CMD_STAT_BAD_QP_STATE = 16,
  CMD_STAT_BAD_SEG_PARAM = 32,
  CMD_STAT_REG_BOUND = 33,
  CMD_STAT_LAM_NOT_PRE = 34,
  CMD_STAT_BAD_PKT = 48,
  CMD_STAT_BAD_SIZE = 64,
  CMD_STAT_MULTI_FUNC_REQ = 80,
};

enum {
  HCR_IN_PARAM_OFFSET = 0,
  HCR_IN_MODIFIER_OFFSET = 8,
  HCR_OUT_PARAM_OFFSET = 12,
  HCR_TOKEN_OFFSET = 20,
  HCR_STATUS_OFFSET = 24,
  HCR_OPMOD_SHIFT = 12,
  HCR_T_BIT = 21,
  HCR_E_BIT = 22,
  HCR_GO_BIT = 23,
};

enum {
  GO_BIT_TIMEOUT_MSECS = 10000,
};

struct mlx4_cq {
  void (*comp)(struct mlx4_cq*);
  void (*event)(struct mlx4_cq*, enum mlx4_event);
  struct mlx4_uar* uar;
  u32 cons_index;
  u16 irq;
  __be32* set_ci_db;
  __be32* arm_db;
  int arm_sn;
  int cqn;
  unsigned int vector;
  refcount_t refcount;
  struct completion free;
  struct {
    struct list_head list;
    void (*comp)(struct mlx4_cq*);
    void* priv;
  } tasklet_ctx;
  int reset_notify_added;
  struct list_head reset_notify;
  u8 usage;
};

enum mlx4_alloc_mode {
  RES_OP_RESERVE = 0,
  RES_OP_RESERVE_AND_MAP = 1,
  RES_OP_MAP_ICM = 2,
};

struct mlx4_cq_context {
  __be32 flags;
  u16 reserved1[3];
  __be16 page_offset;
  __be32 logsize_usrpage;
  __be16 cq_period;
  __be16 cq_max_count;
  u8 reserved2[3];
  u8 comp_eqn;
  u8 log_page_size;
  u8 reserved3[2];
  u8 mtt_base_addr_h;
  __be32 mtt_base_addr_l;
  __be32 last_notified_index;
  __be32 solicit_producer_index;
  __be32 consumer_index;
  __be32 producer_index;
  u32 reserved4[2];
  __be64 db_rec_addr;
};

enum {
  MLX4_ICM_PAGE_SHIFT = 12,
  MLX4_ICM_PAGE_SIZE = 4096,
};

enum {
  MLX4_DEV_CAP_FLAG_RC = 1,
  MLX4_DEV_CAP_FLAG_UC = 2,
  MLX4_DEV_CAP_FLAG_UD = 4,
  MLX4_DEV_CAP_FLAG_XRC = 8,
  MLX4_DEV_CAP_FLAG_SRQ = 64,
  MLX4_DEV_CAP_FLAG_IPOIB_CSUM = 128,
  MLX4_DEV_CAP_FLAG_BAD_PKEY_CNTR = 256,
  MLX4_DEV_CAP_FLAG_BAD_QKEY_CNTR = 512,
  MLX4_DEV_CAP_FLAG_DPDP = 4096,
  MLX4_DEV_CAP_FLAG_BLH = 32768,
  MLX4_DEV_CAP_FLAG_MEM_WINDOW = 65536,
  MLX4_DEV_CAP_FLAG_APM = 131072,
  MLX4_DEV_CAP_FLAG_ATOMIC = 262144,
  MLX4_DEV_CAP_FLAG_RAW_MCAST = 524288,
  MLX4_DEV_CAP_FLAG_UD_AV_PORT = 1048576,
  MLX4_DEV_CAP_FLAG_UD_MCAST = 2097152,
  MLX4_DEV_CAP_FLAG_IBOE = 1073741824,
  MLX4_DEV_CAP_FLAG_UC_LOOPBACK = 0,
  MLX4_DEV_CAP_FLAG_FCS_KEEP = 0,
  MLX4_DEV_CAP_FLAG_WOL_PORT1 = 0,
  MLX4_DEV_CAP_FLAG_WOL_PORT2 = 0,
  MLX4_DEV_CAP_FLAG_UDP_RSS = 0,
  MLX4_DEV_CAP_FLAG_VEP_UC_STEER = 0,
  MLX4_DEV_CAP_FLAG_VEP_MC_STEER = 0,
  MLX4_DEV_CAP_FLAG_COUNTERS = 0,
  MLX4_DEV_CAP_FLAG_RSS_IP_FRAG = 0,
  MLX4_DEV_CAP_FLAG_SET_ETH_SCHED = 0,
  MLX4_DEV_CAP_FLAG_SENSE_SUPPORT = 0,
  MLX4_DEV_CAP_FLAG_PORT_MNG_CHG_EV = 0,
  MLX4_DEV_CAP_FLAG_64B_EQE = 0,
  MLX4_DEV_CAP_FLAG_64B_CQE = 0,
};

enum {
  MLX4_RECOVERABLE_ERROR_EVENT_SUBTYPE_BAD_CABLE = 1,
  MLX4_RECOVERABLE_ERROR_EVENT_SUBTYPE_UNSUPPORTED_CABLE = 2,
};

enum {
  MLX4_FATAL_WARNING_SUBTYPE_WARMING = 0,
};

enum slave_port_gen_event {
  SLAVE_PORT_GEN_EVENT_DOWN = 0,
  SLAVE_PORT_GEN_EVENT_UP = 1,
  SLAVE_PORT_GEN_EVENT_NONE = 2,
};

enum slave_port_state_event {
  MLX4_PORT_STATE_DEV_EVENT_PORT_DOWN = 0,
  MLX4_PORT_STATE_DEV_EVENT_PORT_UP = 1,
  MLX4_PORT_STATE_IB_PORT_STATE_EVENT_GID_VALID = 2,
  MLX4_PORT_STATE_IB_EVENT_GID_INVALID = 3,
};

enum {
  MLX4_DEV_PMC_SUBTYPE_GUID_INFO = 20,
  MLX4_DEV_PMC_SUBTYPE_PORT_INFO = 21,
  MLX4_DEV_PMC_SUBTYPE_PKEY_TABLE = 22,
  MLX4_DEV_PMC_SUBTYPE_SL_TO_VL_MAP = 23,
};

struct mlx4_eq_context {
  __be32 flags;
  u16 reserved1[3];
  __be16 page_offset;
  u8 log_eq_size;
  u8 reserved2[4];
  u8 eq_period;
  u8 reserved3;
  u8 eq_max_count;
  u8 reserved4[3];
  u8 intr;
  u8 log_page_size;
  u8 reserved5[2];
  u8 mtt_base_addr_h;
  __be32 mtt_base_addr_l;
  u32 reserved6[2];
  __be32 consumer_index;
  __be32 producer_index;
  u32 reserved7[4];
};

struct mlx4_port_cap {
  u8 link_state;
  u8 supported_port_types;
  u8 suggested_type;
  u8 default_sense;
  u8 log_max_macs;
  u8 log_max_vlans;
  int ib_mtu;
  int max_port_width;
  int max_vl;
  int max_tc_eth;
  int max_gids;
  int max_pkeys;
  u64 def_mac;
  u16 eth_mtu;
  int trans_type;
  int vendor_oui;
  u16 wavelength;
  u64 trans_code;
  u8 dmfs_optimized_state;
};

enum {
  MLX4_IRQNAME_SIZE = 32,
};

enum {
  MLX4_NUM_ASYNC_EQE = 256,
  MLX4_NUM_SPARE_EQE = 128,
  MLX4_EQ_ENTRY_SIZE = 32,
};

enum {
  MLX4_STEERING_MODE_A0 = 0,
  MLX4_STEERING_MODE_B0 = 1,
  MLX4_STEERING_MODE_DEVICE_MANAGED = 2,
};

enum {
  MLX4_STEERING_DMFS_A0_DEFAULT = 0,
  MLX4_STEERING_DMFS_A0_DYNAMIC = 1,
  MLX4_STEERING_DMFS_A0_STATIC = 2,
  MLX4_STEERING_DMFS_A0_DISABLE = 3,
  MLX4_STEERING_DMFS_A0_NOT_SUPPORTED = 4,
};

enum {
  MLX4_QUERY_FUNC_FLAGS_BF_RES_QP = 1,
  MLX4_QUERY_FUNC_FLAGS_A0_RES_QP = 2,
};

enum {
  MLX4_DEV_CAP_64B_EQE_ENABLED = 1,
  MLX4_DEV_CAP_64B_CQE_ENABLED = 2,
  MLX4_DEV_CAP_CQE_STRIDE_ENABLED = 4,
  MLX4_DEV_CAP_EQE_STRIDE_ENABLED = 8,
};

enum {
  MLX4_FLAG_PORT_REMAP = 16777216,
  MLX4_FLAG_ROCE_V1_V2 = 524288,
};

struct mlx4_qp {
  void (*event)(struct mlx4_qp*, enum mlx4_event);
  int qpn;
  refcount_t refcount;
  struct completion free;
  u8 usage;
};

enum mlx4_access_reg_method {
  MLX4_ACCESS_REG_QUERY = 1,
  MLX4_ACCESS_REG_WRITE = 2,
};

struct mlx4_ptys_reg {
  u8 flags;
  u8 local_port;
  u8 resrvd2;
  u8 proto_mask;
  __be32 resrvd3[2];
  __be32 eth_proto_cap;
  __be16 ib_width_cap;
  __be16 ib_speed_cap;
  __be32 resrvd4;
  __be32 eth_proto_admin;
  __be16 ib_width_admin;
  __be16 ib_speed_admin;
  __be32 resrvd5;
  __be32 eth_proto_oper;
  __be16 ib_width_oper;
  __be16 ib_speed_oper;
  __be32 resrvd6;
  __be32 eth_proto_lp_adv;
};

enum {
  MLX4_GET_PORT_VIRT2PHY = 0,
  MLX4_SET_PORT_VIRT2PHY = 1,
};

enum {
  MLX4_SET_PORT_GENERAL = 0,
  MLX4_SET_PORT_RQP_CALC = 1,
  MLX4_SET_PORT_MAC_TABLE = 2,
  MLX4_SET_PORT_VLAN_TABLE = 3,
  MLX4_SET_PORT_PRIO_MAP = 4,
  MLX4_SET_PORT_GID_TABLE = 5,
  MLX4_SET_PORT_PRIO2TC = 8,
  MLX4_SET_PORT_SCHEDULER = 9,
  MLX4_SET_PORT_VXLAN = 11,
  MLX4_SET_PORT_ROCE_ADDR = 13,
};

enum {
  MLX4_CMD_MAD_DEMUX_CONFIG = 0,
  MLX4_CMD_MAD_DEMUX_QUERY_STATE = 1,
  MLX4_CMD_MAD_DEMUX_QUERY_RESTR = 2,
};

enum mlx4_rx_csum_mode {
  MLX4_RX_CSUM_MODE_VAL_NON_TCP_UDP = 1,
  MLX4_RX_CSUM_MODE_L4 = 2,
  MLX4_RX_CSUM_MODE_IP_OK_IP_NON_TCP_UDP = 4,
  MLX4_RX_CSUM_MODE_MULTI_VLAN = 8,
};

struct mlx4_config_dev_params {
  u16 vxlan_udp_dport;
  u8 rx_csum_flags_port_1;
  u8 rx_csum_flags_port_2;
};

enum {
  MLX4_USER_DEV_CAP_LARGE_CQE = 1,
};

struct mlx4_mgm {
  __be32 next_gid_index;
  __be32 members_count;
  u32 reserved[2];
  u8 gid[16];
  __be32 qp[1016];
};

struct mlx4_set_port_general_context {
  u16 reserved1;
  u8 flags2;
  u8 flags;
  union {
    u8 ignore_fcs;
    u8 roce_mode;
  };
  u8 reserved2;
  __be16 mtu;
  u8 pptx;
  u8 pfctx;
  u16 reserved3;
  u8 pprx;
  u8 pfcrx;
  u16 reserved4;
  u32 reserved5;
  u8 phv_en;
  u8 reserved6[5];
  __be16 user_mtu;
  u16 reserved7;
  u8 user_mac[6];
};

struct mlx4_icm_buf {
  void* addr;
  size_t size;
  dma_addr_t dma_addr;
};

struct mlx4_icm_chunk {
  struct list_head list;
  int npages;
  int nsg;
  bool coherent;
  union {
    struct scatterlist sg[7];
    struct mlx4_icm_buf buf[7];
  };
};

struct mlx4_icm_iter {
  struct mlx4_icm* icm;
  struct mlx4_icm_chunk* chunk;
  int page_idx;
};

struct mlx4_mod_stat_cfg {
  u8 log_pg_sz;
  u8 log_pg_sz_m;
};

struct mlx4_dev_cap {
  int max_srq_sz;
  int max_qp_sz;
  int reserved_qps;
  int max_qps;
  int reserved_srqs;
  int max_srqs;
  int max_cq_sz;
  int reserved_cqs;
  int max_cqs;
  int max_mpts;
  int reserved_eqs;
  int max_eqs;
  int num_sys_eqs;
  int reserved_mtts;
  int reserved_mrws;
  int max_requester_per_qp;
  int max_responder_per_qp;
  int max_rdma_global;
  int local_ca_ack_delay;
  int num_ports;
  u32 max_msg_sz;
  u16 stat_rate_support;
  int fs_log_max_ucast_qp_range_size;
  int fs_max_num_qp_per_entry;
  u64 flags;
  u64 flags2;
  int reserved_uars;
  int uar_size;
  int min_page_sz;
  int bf_reg_size;
  int bf_regs_per_page;
  int max_sq_sg;
  int max_sq_desc_sz;
  int max_rq_sg;
  int max_rq_desc_sz;
  int max_qp_per_mcg;
  int reserved_mgms;
  int max_mcgs;
  int reserved_pds;
  int max_pds;
  int reserved_xrcds;
  int max_xrcds;
  int qpc_entry_sz;
  int rdmarc_entry_sz;
  int altc_entry_sz;
  int aux_entry_sz;
  int srq_entry_sz;
  int cqc_entry_sz;
  int eqc_entry_sz;
  int dmpt_entry_sz;
  int cmpt_entry_sz;
  int mtt_entry_sz;
  int resize_srq;
  u32 bmme_flags;
  u32 reserved_lkey;
  u64 max_icm_sz;
  int max_gso_sz;
  int max_rss_tbl_sz;
  u32 max_counters;
  u32 dmfs_high_rate_qpn_base;
  u32 dmfs_high_rate_qpn_range;
  struct mlx4_rate_limit_caps rl_caps;
  u32 health_buffer_addrs;
  struct mlx4_port_cap port_cap[3];
  bool wol_port[3];
};

struct mlx4_func_cap {
  u8 num_ports;
  u8 flags;
  u32 pf_context_behaviour;
  int qp_quota;
  int cq_quota;
  int srq_quota;
  int mpt_quota;
  int mtt_quota;
  int max_eq;
  int reserved_eq;
  int mcg_quota;
  struct mlx4_spec_qps spec_qps;
  u32 reserved_lkey;
  u8 physical_port;
  u8 flags0;
  u8 flags1;
  u64 phys_port_id;
  u32 extra_flags;
};

struct mlx4_func {
  int bus;
  int device;
  int function;
  int physical_function;
  int rsvd_eqs;
  int max_eq;
  int rsvd_uars;
};

struct mlx4_adapter {
  char board_id[64];
  u8 inta_pin;
};

struct mlx4_init_hca_param {
  u64 qpc_base;
  u64 rdmarc_base;
  u64 auxc_base;
  u64 altc_base;
  u64 srqc_base;
  u64 cqc_base;
  u64 eqc_base;
  u64 mc_base;
  u64 dmpt_base;
  u64 cmpt_base;
  u64 mtt_base;
  u64 global_caps;
  u8 log_mc_entry_sz;
  u8 log_mc_hash_sz;
  u16 hca_core_clock;
  u8 log_num_qps;
  u8 log_num_srqs;
  u8 log_num_cqs;
  u8 log_num_eqs;
  u16 num_sys_eqs;
  u8 log_rd_per_qp;
  u8 log_mc_table_sz;
  u8 log_mpt_sz;
  u8 log_uar_sz;
  u8 mw_enabled;
  u8 uar_page_sz;
  u8 steering_mode;
  u8 dmfs_high_steer_mode;
  u64 dev_cap_enabled;
  u16 cqe_size;
  u16 eqe_size;
  u8 rss_ip_frags;
  u8 phv_check_en;
};

enum {
  MLX4_COMMAND_INTERFACE_MIN_REV = 2,
  MLX4_COMMAND_INTERFACE_MAX_REV = 3,
  MLX4_COMMAND_INTERFACE_NEW_PORT_CMDS = 3,
};

struct mlx4_config_dev {
  __be32 update_flags;
  __be32 rsvd1[3];
  __be16 vxlan_udp_dport;
  __be16 rsvd2;
  __be16 roce_v2_entropy;
  __be16 roce_v2_udp_dport;
  __be32 roce_flags;
  __be32 rsvd4[25];
  __be16 rsvd5;
  u8 rsvd6;
  u8 rx_checksum_val;
};

enum {
  ADD_TO_MCG = 38,
};

enum mlx4_access_reg_masks {
  MLX4_ACCESS_REG_STATUS_MASK = 127,
  MLX4_ACCESS_REG_METHOD_MASK = 127,
  MLX4_ACCESS_REG_LEN_MASK = 2047,
};

struct mlx4_access_reg {
  __be16 constant1;
  u8 status;
  u8 resrvd1;
  __be16 reg_id;
  u8 method;
  u8 constant2;
  __be32 resrvd2[2];
  __be16 len_const;
  __be16 resrvd3;
  u8 reg_data[4076];
};

enum mlx4_reg_id {
  MLX4_REG_ID_PTYS = 20484,
};

enum {
  MLX4_ALLOCATE_VPP_ALLOCATE = 0,
  MLX4_ALLOCATE_VPP_QUERY = 1,
};

enum {
  MLX4_SET_VPORT_QOS_SET = 0,
  MLX4_SET_VPORT_QOS_QUERY = 1,
};

struct mlx4_set_port_prio2tc_context {
  u8 prio2tc[4];
};

struct mlx4_port_scheduler_tc_cfg_be {
  __be16 pg;
  __be16 bw_precentage;
  __be16 max_bw_units;
  __be16 max_bw_value;
};

struct mlx4_set_port_scheduler_context {
  struct mlx4_port_scheduler_tc_cfg_be tc[8];
};

struct mlx4_alloc_vpp_param {
  __be32 available_vpp;
  __be32 vpp_p_up[8];
};

struct mlx4_prio_qos_param {
  __be32 bw_share;
  __be32 max_avg_bw;
  __be32 reserved;
  __be32 enable;
  __be32 reserved1[4];
};

struct mlx4_set_vport_context {
  __be32 reserved[8];
  struct mlx4_prio_qos_param qos_p_up[8];
};

enum {
  MLX4_ICM_ALLOC_SIZE = 262144,
  MLX4_TABLE_CHUNK_SIZE = 262144,
};

enum mlx4_protocol {
  MLX4_PROT_IB_IPV6 = 0,
  MLX4_PROT_ETH = 1,
  MLX4_PROT_IB_IPV4 = 2,
  MLX4_PROT_FCOE = 3,
};

enum {
  MLX4_INTFF_BONDING = 1,
};

struct mlx4_interface {
  void* (*add)(struct mlx4_dev*);
  void (*remove)(struct mlx4_dev*, void*);
  void (
      *event)(struct mlx4_dev*, void*, enum mlx4_dev_event, long unsigned int);
  void* (*get_dev)(struct mlx4_dev*, void*, u8);
  void (*activate)(struct mlx4_dev*, void*);
  struct list_head list;
  enum mlx4_protocol protocol;
  int flags;
};

struct mlx4_device_context {
  struct list_head list;
  struct list_head bond_list;
  struct mlx4_interface* intf;
  void* context;
};

struct io_mapping {
  resource_size_t base;
  long unsigned int size;
  pgprot_t prot;
  void* iomem;
};

enum {
  MLX4_TUNNEL_OFFLOAD_MODE_NONE = 0,
  MLX4_TUNNEL_OFFLOAD_MODE_VXLAN = 1,
};

enum {
  MLX4_RESERVE_A0_QP = 64,
  MLX4_RESERVE_ETH_BF_QP = 128,
};

enum {
  MLX4_FUNC_CAP_64B_EQE_CQE = 1,
  MLX4_FUNC_CAP_EQE_CQE_STRIDE = 2,
  MLX4_FUNC_CAP_DMFS_A0_STATIC = 4,
};

enum mlx4_resource_usage {
  MLX4_RES_USAGE_NONE = 0,
  MLX4_RES_USAGE_DRIVER = 1,
  MLX4_RES_USAGE_USER_VERBS = 2,
};

enum {
  MLX4_NUM_FEXCH = 65536,
};

struct mlx4_clock_params {
  u64 offset;
  u8 bar;
  u8 size;
};

enum {
  MLX4_DOMAIN_UVERBS = 4096,
  MLX4_DOMAIN_ETHTOOL = 8192,
  MLX4_DOMAIN_RFS = 12288,
  MLX4_DOMAIN_NIC = 20480,
};

struct mlx4_net_trans_rule_hw_ctrl {
  __be16 prio;
  u8 type;
  u8 flags;
  u8 rsvd1;
  u8 funcid;
  u8 vep;
  u8 port;
  __be32 qpn;
  __be32 rsvd2;
};

struct mlx4_net_trans_rule_hw_ib {
  u8 size;
  u8 rsvd1;
  __be16 id;
  u32 rsvd2;
  __be32 l3_qpn;
  __be32 qpn_mask;
  u8 dst_gid[16];
  u8 dst_gid_msk[16];
};

struct mlx4_net_trans_rule_hw_eth {
  u8 size;
  u8 rsvd;
  __be16 id;
  u8 rsvd1[6];
  u8 dst_mac[6];
  u16 rsvd2;
  u8 dst_mac_msk[6];
  u16 rsvd3;
  u8 src_mac[6];
  u16 rsvd4;
  u8 src_mac_msk[6];
  u8 rsvd5;
  u8 ether_type_enable;
  __be16 ether_type;
  __be16 vlan_tag_msk;
  __be16 vlan_tag;
};

struct mlx4_net_trans_rule_hw_tcp_udp {
  u8 size;
  u8 rsvd;
  __be16 id;
  __be16 rsvd1[3];
  __be16 dst_port;
  __be16 rsvd2;
  __be16 dst_port_msk;
  __be16 rsvd3;
  __be16 src_port;
  __be16 rsvd4;
  __be16 src_port_msk;
};

struct mlx4_net_trans_rule_hw_ipv4 {
  u8 size;
  u8 rsvd;
  __be16 id;
  __be32 rsvd1;
  __be32 dst_ip;
  __be32 dst_ip_msk;
  __be32 src_ip;
  __be32 src_ip_msk;
};

struct mlx4_net_trans_rule_hw_vxlan {
  u8 size;
  u8 rsvd;
  __be16 id;
  __be32 rsvd1;
  __be32 vni;
  __be32 vni_mask;
};

struct _rule_hw {
  union {
    struct {
      u8 size;
      u8 rsvd;
      __be16 id;
    };
    struct mlx4_net_trans_rule_hw_eth eth;
    struct mlx4_net_trans_rule_hw_ib ib;
    struct mlx4_net_trans_rule_hw_ipv4 ipv4;
    struct mlx4_net_trans_rule_hw_tcp_udp tcp_udp;
    struct mlx4_net_trans_rule_hw_vxlan vxlan;
  };
};

enum {
  MLX4_NUM_PDS = 32768,
};

enum {
  MLX4_CMPT_SHIFT = 24,
  MLX4_NUM_CMPTS = 67108864,
};

enum mlx4_res_tracker_free_type {
  RES_TR_FREE_ALL = 0,
  RES_TR_FREE_SLAVES_ONLY = 1,
  RES_TR_FREE_STRUCTS_ONLY = 2,
};

struct mlx4_profile {
  int num_qp;
  int rdmarc_per_qp;
  int num_srq;
  int num_cq;
  int num_mcg;
  int num_mpt;
  unsigned int num_mtt;
};

struct mlx4_promisc_qp {
  struct list_head list;
  u32 qpn;
};

struct mlx4_steer_index {
  struct list_head list;
  unsigned int index;
  struct list_head duplicates;
};

enum {
  MLX4_PCI_DEV_IS_VF = 1,
  MLX4_PCI_DEV_FORCE_SENSE_PORT = 2,
};

enum mlx4_devlink_param_id {
  MLX4_DEVLINK_PARAM_ID_BASE = 10,
  MLX4_DEVLINK_PARAM_ID_ENABLE_64B_CQE_EQE = 11,
  MLX4_DEVLINK_PARAM_ID_ENABLE_4K_UAR = 12,
};

enum {
  MLX4_QUERY_FUNC_NUM_SYS_EQS = 1,
};

enum ibta_mtu {
  IB_MTU_256 = 1,
  IB_MTU_512 = 2,
  IB_MTU_1024 = 3,
  IB_MTU_2048 = 4,
  IB_MTU_4096 = 5,
};

enum {
  MLX4_DEV_CAP_CHECK_NUM_VFS_ABOVE_64 = 4294967295,
};

enum mlx4_net_trans_rule_id {
  MLX4_NET_TRANS_RULE_ID_ETH = 0,
  MLX4_NET_TRANS_RULE_ID_IB = 1,
  MLX4_NET_TRANS_RULE_ID_IPV6 = 2,
  MLX4_NET_TRANS_RULE_ID_IPV4 = 3,
  MLX4_NET_TRANS_RULE_ID_TCP = 4,
  MLX4_NET_TRANS_RULE_ID_UDP = 5,
  MLX4_NET_TRANS_RULE_ID_VXLAN = 6,
  MLX4_NET_TRANS_RULE_NUM = 7,
};

enum mlx4_net_trans_promisc_mode {
  MLX4_FS_REGULAR = 1,
  MLX4_FS_ALL_DEFAULT = 2,
  MLX4_FS_MC_DEFAULT = 3,
  MLX4_FS_MIRROR_RX_PORT = 4,
  MLX4_FS_MIRROR_SX_PORT = 5,
  MLX4_FS_UC_SNIFFER = 6,
  MLX4_FS_MC_SNIFFER = 7,
  MLX4_FS_MODE_NUM = 8,
};

struct mlx4_spec_eth {
  u8 dst_mac[6];
  u8 dst_mac_msk[6];
  u8 src_mac[6];
  u8 src_mac_msk[6];
  u8 ether_type_enable;
  __be16 ether_type;
  __be16 vlan_id_msk;
  __be16 vlan_id;
};

struct mlx4_spec_tcp_udp {
  __be16 dst_port;
  __be16 dst_port_msk;
  __be16 src_port;
  __be16 src_port_msk;
};

struct mlx4_spec_ipv4 {
  __be32 dst_ip;
  __be32 dst_ip_msk;
  __be32 src_ip;
  __be32 src_ip_msk;
};

struct mlx4_spec_ib {
  __be32 l3_qpn;
  __be32 qpn_msk;
  u8 dst_gid[16];
  u8 dst_gid_msk[16];
};

struct mlx4_spec_vxlan {
  __be32 vni;
  __be32 vni_mask;
};

struct mlx4_spec_list {
  struct list_head list;
  enum mlx4_net_trans_rule_id id;
  union {
    struct mlx4_spec_eth eth;
    struct mlx4_spec_ib ib;
    struct mlx4_spec_ipv4 ipv4;
    struct mlx4_spec_tcp_udp tcp_udp;
    struct mlx4_spec_vxlan vxlan;
  };
};

enum mlx4_net_trans_hw_rule_queue {
  MLX4_NET_TRANS_Q_FIFO = 0,
  MLX4_NET_TRANS_Q_LIFO = 1,
};

struct mlx4_net_trans_rule {
  struct list_head list;
  enum mlx4_net_trans_hw_rule_queue queue_mode;
  bool exclusive;
  bool allow_loopback;
  enum mlx4_net_trans_promisc_mode promisc_mode;
  u8 port;
  u16 priority;
  u32 qpn;
};

enum {
  MLX4_PERM_LOCAL_READ = 1024,
  MLX4_PERM_LOCAL_WRITE = 2048,
  MLX4_PERM_REMOTE_READ = 4096,
  MLX4_PERM_REMOTE_WRITE = 8192,
  MLX4_PERM_ATOMIC = 16384,
  MLX4_PERM_BIND_MW = 32768,
  MLX4_PERM_MASK = 64512,
};

enum {
  MLX4_MTT_FLAG_PRESENT = 1,
};

struct mlx4_mr {
  struct mlx4_mtt mtt;
  u64 iova;
  u64 size;
  u32 key;
  u32 pd;
  u32 access;
  int enabled;
};

enum mlx4_mw_type {
  MLX4_MW_TYPE_1 = 1,
  MLX4_MW_TYPE_2 = 2,
};

struct mlx4_mw {
  u32 key;
  u32 pd;
  enum mlx4_mw_type type;
  int enabled;
};

enum mlx4_mpt_state {
  MLX4_MPT_DISABLED = 0,
  MLX4_MPT_EN_HW = 1,
  MLX4_MPT_EN_SW = 2,
};

struct mlx4_mpt_entry {
  __be32 flags;
  __be32 qpn;
  __be32 key;
  __be32 pd_flags;
  __be64 start;
  __be64 length;
  __be32 lkey;
  __be32 win_cnt;
  u8 reserved1[3];
  u8 mtt_rep;
  __be64 mtt_addr;
  __be32 mtt_sz;
  __be32 entity_size;
  __be32 first_byte_offset;
} __attribute__((packed));

struct mlx4_bf {
  unsigned int offset;
  int buf_size;
  struct mlx4_uar* uar;
  void* reg;
};

enum {
  MLX4_NUM_RESERVED_UARS = 8,
};

enum {
  MLX4_PORT_CAP_IS_SM = 2,
  MLX4_PORT_CAP_DEV_MGMT_SUP = 524288,
};

enum mlx4_special_vlan_idx {
  MLX4_NO_VLAN_IDX = 0,
  MLX4_VLAN_MISS_IDX = 1,
  MLX4_VLAN_REGULAR = 2,
};

enum mlx4_module_id {
  MLX4_MODULE_ID_SFP = 3,
  MLX4_MODULE_ID_QSFP = 12,
  MLX4_MODULE_ID_QSFP_PLUS = 13,
  MLX4_MODULE_ID_QSFP28 = 17,
};

struct mlx4_mad_ifc {
  u8 base_version;
  u8 mgmt_class;
  u8 class_version;
  u8 method;
  __be16 status;
  __be16 class_specific;
  __be64 tid;
  __be16 attr_id;
  __be16 resv;
  __be32 attr_mod;
  __be64 mkey;
  __be16 dr_slid;
  __be16 dr_dlid;
  u8 reserved[28];
  u8 data[192];
};

enum {
  MCAST_DIRECT_ONLY = 0,
  MCAST_DIRECT = 1,
  MCAST_DEFAULT = 2,
};

struct mlx4_set_port_rqp_calc_context {
  __be32 base_qpn;
  u8 rererved;
  u8 n_mac;
  u8 n_vlan;
  u8 n_prio;
  u8 reserved2[3];
  u8 mac_miss;
  u8 intra_no_vlan;
  u8 no_vlan;
  u8 intra_vlan_miss;
  u8 vlan_miss;
  u8 reserved3[3];
  u8 no_vlan_prio;
  __be32 promisc;
  __be32 mcast;
};

enum {
  MLX4_SET_PORT_VL_CAP = 4,
  MLX4_SET_PORT_MTU_CAP = 12,
  MLX4_CHANGE_PORT_PKEY_TBL_SZ = 20,
  MLX4_CHANGE_PORT_VL_CAP = 21,
  MLX4_CHANGE_PORT_MTU_CAP = 22,
};

enum {
  VXLAN_ENABLE_MODIFY = 128,
  VXLAN_STEERING_MODIFY = 64,
  VXLAN_ENABLE = 128,
};

struct mlx4_set_port_vxlan_context {
  u32 reserved1;
  u8 modify_flags;
  u8 reserved2;
  u8 enable_flags;
  u8 steering;
};

struct mlx4_cable_info {
  u8 i2c_addr;
  u8 page_num;
  __be16 dev_mem_address;
  __be16 reserved1;
  __be16 size;
  __be32 reserved2[2];
  u8 data[48];
};

enum cable_info_err {
  CABLE_INF_INV_PORT = 1,
  CABLE_INF_OP_NOSUP = 2,
  CABLE_INF_NOT_CONN = 3,
  CABLE_INF_NO_EEPRM = 4,
  CABLE_INF_PAGE_ERR = 5,
  CABLE_INF_INV_ADDR = 6,
  CABLE_INF_I2C_ADDR = 7,
  CABLE_INF_QSFP_VIO = 8,
  CABLE_INF_I2C_BUSY = 9,
};

enum {
  MLX4_RES_QP = 0,
  MLX4_RES_RDMARC = 1,
  MLX4_RES_ALTC = 2,
  MLX4_RES_AUXC = 3,
  MLX4_RES_SRQ = 4,
  MLX4_RES_CQ = 5,
  MLX4_RES_EQ = 6,
  MLX4_RES_DMPT = 7,
  MLX4_RES_CMPT = 8,
  MLX4_RES_MTT = 9,
  MLX4_RES_MCG = 10,
  MLX4_RES_NUM = 11,
};

struct mlx4_resource___2 {
  u64 size;
  u64 start;
  int type;
  u32 num;
  int log_num;
};

enum mlx4_qp_optpar {
  MLX4_QP_OPTPAR_ALT_ADDR_PATH = 1,
  MLX4_QP_OPTPAR_RRE = 2,
  MLX4_QP_OPTPAR_RAE = 4,
  MLX4_QP_OPTPAR_RWE = 8,
  MLX4_QP_OPTPAR_PKEY_INDEX = 16,
  MLX4_QP_OPTPAR_Q_KEY = 32,
  MLX4_QP_OPTPAR_RNR_TIMEOUT = 64,
  MLX4_QP_OPTPAR_PRIMARY_ADDR_PATH = 128,
  MLX4_QP_OPTPAR_SRA_MAX = 256,
  MLX4_QP_OPTPAR_RRA_MAX = 512,
  MLX4_QP_OPTPAR_PM_STATE = 1024,
  MLX4_QP_OPTPAR_RETRY_COUNT = 4096,
  MLX4_QP_OPTPAR_RNR_RETRY = 8192,
  MLX4_QP_OPTPAR_ACK_TIMEOUT = 16384,
  MLX4_QP_OPTPAR_SCHED_QUEUE = 65536,
  MLX4_QP_OPTPAR_COUNTER_INDEX = 1048576,
  MLX4_QP_OPTPAR_VLAN_STRIPPING = 2097152,
};

enum mlx4_qp_state {
  MLX4_QP_STATE_RST = 0,
  MLX4_QP_STATE_INIT = 1,
  MLX4_QP_STATE_RTR = 2,
  MLX4_QP_STATE_RTS = 3,
  MLX4_QP_STATE_SQER = 4,
  MLX4_QP_STATE_SQD = 5,
  MLX4_QP_STATE_ERR = 6,
  MLX4_QP_STATE_SQ_DRAINING = 7,
  MLX4_QP_NUM_STATE = 8,
};

enum {
  MLX4_QP_BIT_SRE = 32768,
  MLX4_QP_BIT_SWE = 16384,
  MLX4_QP_BIT_SAE = 8192,
  MLX4_QP_BIT_RRE = 32768,
  MLX4_QP_BIT_RWE = 16384,
  MLX4_QP_BIT_RAE = 8192,
  MLX4_QP_BIT_FPP = 8,
  MLX4_QP_BIT_RIC = 16,
};

struct mlx4_qp_path {
  u8 fl;
  union {
    u8 vlan_control;
    u8 control;
  };
  u8 disable_pkey_check;
  u8 pkey_index;
  u8 counter_index;
  u8 grh_mylmc;
  __be16 rlid;
  u8 ackto;
  u8 mgid_index;
  u8 static_rate;
  u8 hop_limit;
  __be32 tclass_flowlabel;
  u8 rgid[16];
  u8 sched_queue;
  u8 vlan_index;
  u8 feup;
  u8 fvl_rx;
  u8 reserved4[2];
  u8 dmac[6];
};

enum {
  MLX4_FL_CV = 64,
  MLX4_FL_SV = 32,
  MLX4_FL_ETH_HIDE_CQE_VLAN = 4,
  MLX4_FL_ETH_SRC_CHECK_MC_LB = 2,
  MLX4_FL_ETH_SRC_CHECK_UC_LB = 1,
};

struct mlx4_qp_context {
  __be32 flags;
  __be32 pd;
  u8 mtu_msgmax;
  u8 rq_size_stride;
  u8 sq_size_stride;
  u8 rlkey_roce_mode;
  __be32 usr_page;
  __be32 local_qpn;
  __be32 remote_qpn;
  struct mlx4_qp_path pri_path;
  struct mlx4_qp_path alt_path;
  __be32 params1;
  u32 reserved1;
  __be32 next_send_psn;
  __be32 cqn_send;
  __be16 roce_entropy;
  __be16 reserved2[3];
  __be32 last_acked_psn;
  __be32 ssn;
  __be32 params2;
  __be32 rnr_nextrecvpsn;
  __be32 xrcd;
  __be32 cqn_recv;
  __be64 db_rec_addr;
  __be32 qkey;
  __be32 srqn;
  __be32 msn;
  __be16 rq_wqe_counter;
  __be16 sq_wqe_counter;
  u32 reserved3;
  __be16 rate_limit_params;
  u8 reserved4;
  u8 qos_vport;
  __be32 param3;
  __be32 nummmcpeers_basemkey;
  u8 log_page_size;
  u8 reserved5[2];
  u8 mtt_base_addr_h;
  __be32 mtt_base_addr_l;
  u32 reserved6[10];
};

struct mlx4_update_qp_context {
  __be64 qp_mask;
  __be64 primary_addr_path_mask;
  __be64 secondary_addr_path_mask;
  u64 reserved1;
  struct mlx4_qp_context qp_context;
  u64 reserved2[58];
};

enum {
  MLX4_UPD_QP_MASK_PM_STATE = 32,
  MLX4_UPD_QP_MASK_VSD = 33,
  MLX4_UPD_QP_MASK_QOS_VPP = 34,
  MLX4_UPD_QP_MASK_RATE_LIMIT = 35,
};

enum {
  MLX4_UPD_QP_PATH_MASK_PKEY_INDEX = 32,
  MLX4_UPD_QP_PATH_MASK_FSM = 33,
  MLX4_UPD_QP_PATH_MASK_MAC_INDEX = 34,
  MLX4_UPD_QP_PATH_MASK_FVL = 35,
  MLX4_UPD_QP_PATH_MASK_CV = 36,
  MLX4_UPD_QP_PATH_MASK_VLAN_INDEX = 37,
  MLX4_UPD_QP_PATH_MASK_ETH_HIDE_CQE_VLAN = 38,
  MLX4_UPD_QP_PATH_MASK_ETH_TX_BLOCK_UNTAGGED = 39,
  MLX4_UPD_QP_PATH_MASK_ETH_TX_BLOCK_1P = 40,
  MLX4_UPD_QP_PATH_MASK_ETH_TX_BLOCK_TAGGED = 41,
  MLX4_UPD_QP_PATH_MASK_ETH_RX_BLOCK_UNTAGGED = 42,
  MLX4_UPD_QP_PATH_MASK_ETH_RX_BLOCK_1P = 43,
  MLX4_UPD_QP_PATH_MASK_ETH_RX_BLOCK_TAGGED = 44,
  MLX4_UPD_QP_PATH_MASK_FEUP = 45,
  MLX4_UPD_QP_PATH_MASK_SCHED_QUEUE = 46,
  MLX4_UPD_QP_PATH_MASK_IF_COUNTER_INDEX = 47,
  MLX4_UPD_QP_PATH_MASK_FVL_RX = 48,
  MLX4_UPD_QP_PATH_MASK_ETH_SRC_CHECK_UC_LB = 50,
  MLX4_UPD_QP_PATH_MASK_ETH_SRC_CHECK_MC_LB = 51,
  MLX4_UPD_QP_PATH_MASK_SV = 54,
};

enum {
  MLX4_STRIP_VLAN = 1073741824,
};

enum mlx4_update_qp_attr {
  MLX4_UPDATE_QP_SMAC = 1,
  MLX4_UPDATE_QP_VSD = 2,
  MLX4_UPDATE_QP_RATE_LIMIT = 4,
  MLX4_UPDATE_QP_QOS_VPORT = 8,
  MLX4_UPDATE_QP_ETH_SRC_CHECK_MC_LB = 16,
  MLX4_UPDATE_QP_SUPPORTED_ATTRS = 31,
};

enum mlx4_update_qp_params_flags {
  MLX4_UPDATE_QP_PARAMS_FLAGS_ETH_CHECK_MC_LB = 1,
  MLX4_UPDATE_QP_PARAMS_FLAGS_VSD_ENABLE = 2,
};

struct mlx4_update_qp_params {
  u8 smac_index;
  u8 qos_vport;
  u32 flags;
  u16 rate_unit;
  u16 rate_val;
};

struct mlx4_srq {
  void (*event)(struct mlx4_srq*, enum mlx4_event);
  int srqn;
  int max;
  int max_gs;
  int wqe_shift;
  refcount_t refcount;
  struct completion free;
};

struct mlx4_srq_context {
  __be32 state_logsize_srqn;
  u8 logstride;
  u8 reserved1;
  __be16 xrcd;
  __be32 pg_offset_cqn;
  u32 reserved2;
  u8 log_page_size;
  u8 reserved3[2];
  u8 mtt_base_addr_h;
  __be32 mtt_base_addr_l;
  __be32 pd;
  __be16 limit_watermark;
  __be16 wqe_cnt;
  u16 reserved4;
  __be16 wqe_counter;
  u32 reserved5;
  __be64 db_rec_addr;
};

enum {
  MLX4_QP_ST_RC = 0,
  MLX4_QP_ST_UC = 1,
  MLX4_QP_ST_RD = 2,
  MLX4_QP_ST_UD = 3,
  MLX4_QP_ST_XRC = 6,
  MLX4_QP_ST_MLX = 7,
};

enum {
  MLX4_RSS_HASH_XOR = 0,
  MLX4_RSS_HASH_TOP = 1,
  MLX4_RSS_UDP_IPV6 = 1,
  MLX4_RSS_UDP_IPV4 = 2,
  MLX4_RSS_TCP_IPV6 = 4,
  MLX4_RSS_IPV6 = 8,
  MLX4_RSS_TCP_IPV4 = 16,
  MLX4_RSS_IPV4 = 32,
  MLX4_RSS_BY_OUTER_HEADERS = 0,
  MLX4_RSS_BY_INNER_HEADERS = 128,
  MLX4_RSS_BY_INNER_HEADERS_IPONLY = 192,
  MLX4_RSS_OFFSET_IN_QPC_PRI_PATH = 36,
  MLX4_RSS_QPC_FLAG_OFFSET = 13,
};

enum {
  MLX4_CTRL_ETH_SRC_CHECK_IF_COUNTER = 128,
};

enum {
  MLX4_VLAN_CTRL_ETH_TX_BLOCK_TAGGED = 64,
  MLX4_VLAN_CTRL_ETH_TX_BLOCK_PRIO_TAGGED = 32,
  MLX4_VLAN_CTRL_ETH_TX_BLOCK_UNTAGGED = 16,
  MLX4_VLAN_CTRL_ETH_RX_BLOCK_TAGGED = 4,
  MLX4_VLAN_CTRL_ETH_RX_BLOCK_PRIO_TAGGED = 2,
  MLX4_VLAN_CTRL_ETH_RX_BLOCK_UNTAGGED = 1,
};

enum {
  MLX4_FEUP_FORCE_ETH_UP = 64,
  MLX4_FSM_FORCE_ETH_SRC_MAC = 32,
  MLX4_FVL_FORCE_ETH_VLAN = 8,
};

enum {
  MLX4_FVL_RX_FORCE_ETH_VLAN = 1,
};

struct mac_res {
  struct list_head list;
  u64 mac;
  int ref_count;
  u8 smac_index;
  u8 port;
};

struct vlan_res {
  struct list_head list;
  u16 vlan;
  int ref_count;
  int vlan_index;
  u8 port;
};

struct res_common {
  struct list_head list;
  struct rb_node node;
  u64 res_id;
  int owner;
  int state;
  int from_state;
  int to_state;
  int removing;
  const char* func_name;
};

enum {
  RES_ANY_BUSY = 1,
};

struct res_gid {
  struct list_head list;
  u8 gid[16];
  enum mlx4_protocol prot;
  enum mlx4_steer_type steer;
  u64 reg_id;
};

enum res_qp_states {
  RES_QP_BUSY = 1,
  RES_QP_RESERVED = 2,
  RES_QP_MAPPED = 3,
  RES_QP_HW = 4,
};

struct res_mtt;

struct res_cq;

struct res_srq;

struct res_qp {
  struct res_common com;
  struct res_mtt* mtt;
  struct res_cq* rcq;
  struct res_cq* scq;
  struct res_srq* srq;
  struct list_head mcg_list;
  spinlock_t mcg_spl;
  int local_qpn;
  atomic_t ref_count;
  u32 qpc_flags;
  u8 sched_queue;
  __be32 param3;
  u8 vlan_control;
  u8 fvl_rx;
  u8 pri_path_fl;
  u8 vlan_index;
  u8 feup;
};

struct res_mtt {
  struct res_common com;
  int order;
  atomic_t ref_count;
};

struct res_cq {
  struct res_common com;
  struct res_mtt* mtt;
  atomic_t ref_count;
};

struct res_srq {
  struct res_common com;
  struct res_mtt* mtt;
  struct res_cq* cq;
  atomic_t ref_count;
};

enum res_mtt_states {
  RES_MTT_BUSY = 1,
  RES_MTT_ALLOCATED = 2,
};

enum res_mpt_states {
  RES_MPT_BUSY = 1,
  RES_MPT_RESERVED = 2,
  RES_MPT_MAPPED = 3,
  RES_MPT_HW = 4,
};

struct res_mpt {
  struct res_common com;
  struct res_mtt* mtt;
  int key;
};

enum res_eq_states {
  RES_EQ_BUSY = 1,
  RES_EQ_RESERVED = 2,
  RES_EQ_HW = 3,
};

struct res_eq {
  struct res_common com;
  struct res_mtt* mtt;
};

enum res_cq_states {
  RES_CQ_BUSY = 1,
  RES_CQ_ALLOCATED = 2,
  RES_CQ_HW = 3,
};

enum res_srq_states {
  RES_SRQ_BUSY = 1,
  RES_SRQ_ALLOCATED = 2,
  RES_SRQ_HW = 3,
};

enum res_counter_states {
  RES_COUNTER_BUSY = 1,
  RES_COUNTER_ALLOCATED = 2,
};

struct res_counter {
  struct res_common com;
  int port;
};

enum res_xrcdn_states {
  RES_XRCD_BUSY = 1,
  RES_XRCD_ALLOCATED = 2,
};

struct res_xrcdn {
  struct res_common com;
  int port;
};

enum res_fs_rule_states {
  RES_FS_RULE_BUSY = 1,
  RES_FS_RULE_ALLOCATED = 2,
};

struct res_fs_rule {
  struct res_common com;
  int qpn;
  void* mirr_mbox;
  u32 mirr_mbox_size;
  struct list_head mirr_list;
  u64 mirr_rule_id;
};

enum qp_transition {
  QP_TRANS_INIT2RTR = 0,
  QP_TRANS_RTR2RTS = 1,
  QP_TRANS_RTS2RTS = 2,
  QP_TRANS_SQERR2RTS = 3,
  QP_TRANS_SQD2SQD = 4,
  QP_TRANS_SQD2RTS = 5,
};

struct devlink_region_ops {
  const char* name;
  void (*destructor)(const void*);
  int (*snapshot)(
      struct devlink*,
      const struct devlink_region_ops*,
      struct netlink_ext_ack*,
      u8**);
  void* priv;
};

enum dcbnl_cndd_states {
  DCB_CNDD_RESET = 0,
  DCB_CNDD_EDGE = 1,
  DCB_CNDD_INTERIOR = 2,
  DCB_CNDD_INTERIOR_READY = 3,
};

enum {
  MLX4_WQE_CTRL_NEC = 536870912,
  MLX4_WQE_CTRL_IIP = 268435456,
  MLX4_WQE_CTRL_ILP = 134217728,
  MLX4_WQE_CTRL_FENCE = 64,
  MLX4_WQE_CTRL_CQ_UPDATE = 12,
  MLX4_WQE_CTRL_SOLICITED = 2,
  MLX4_WQE_CTRL_IP_CSUM = 16,
  MLX4_WQE_CTRL_TCP_UDP_CSUM = 32,
  MLX4_WQE_CTRL_INS_CVLAN = 64,
  MLX4_WQE_CTRL_INS_SVLAN = 128,
  MLX4_WQE_CTRL_STRONG_ORDER = 128,
  MLX4_WQE_CTRL_FORCE_LOOPBACK = 1,
};

struct mlx4_cqe {
  __be32 vlan_my_qpn;
  __be32 immed_rss_invalid;
  __be32 g_mlpath_rqpn;
  __be16 sl_vid;
  union {
    struct {
      __be16 rlid;
      __be16 status;
      u8 ipv6_ext_mask;
      u8 badfcs_enc;
    };
    u8 smac[6];
  };
  __be32 byte_cnt;
  __be16 wqe_index;
  __be16 checksum;
  u8 reserved[3];
  u8 owner_sr_opcode;
};

struct mlx4_en_stat_out_mbox {
  __be64 R64_prio_0;
  __be64 R64_prio_1;
  __be64 R64_prio_2;
  __be64 R64_prio_3;
  __be64 R64_prio_4;
  __be64 R64_prio_5;
  __be64 R64_prio_6;
  __be64 R64_prio_7;
  __be64 R64_novlan;
  __be64 R127_prio_0;
  __be64 R127_prio_1;
  __be64 R127_prio_2;
  __be64 R127_prio_3;
  __be64 R127_prio_4;
  __be64 R127_prio_5;
  __be64 R127_prio_6;
  __be64 R127_prio_7;
  __be64 R127_novlan;
  __be64 R255_prio_0;
  __be64 R255_prio_1;
  __be64 R255_prio_2;
  __be64 R255_prio_3;
  __be64 R255_prio_4;
  __be64 R255_prio_5;
  __be64 R255_prio_6;
  __be64 R255_prio_7;
  __be64 R255_novlan;
  __be64 R511_prio_0;
  __be64 R511_prio_1;
  __be64 R511_prio_2;
  __be64 R511_prio_3;
  __be64 R511_prio_4;
  __be64 R511_prio_5;
  __be64 R511_prio_6;
  __be64 R511_prio_7;
  __be64 R511_novlan;
  __be64 R1023_prio_0;
  __be64 R1023_prio_1;
  __be64 R1023_prio_2;
  __be64 R1023_prio_3;
  __be64 R1023_prio_4;
  __be64 R1023_prio_5;
  __be64 R1023_prio_6;
  __be64 R1023_prio_7;
  __be64 R1023_novlan;
  __be64 R1518_prio_0;
  __be64 R1518_prio_1;
  __be64 R1518_prio_2;
  __be64 R1518_prio_3;
  __be64 R1518_prio_4;
  __be64 R1518_prio_5;
  __be64 R1518_prio_6;
  __be64 R1518_prio_7;
  __be64 R1518_novlan;
  __be64 R1522_prio_0;
  __be64 R1522_prio_1;
  __be64 R1522_prio_2;
  __be64 R1522_prio_3;
  __be64 R1522_prio_4;
  __be64 R1522_prio_5;
  __be64 R1522_prio_6;
  __be64 R1522_prio_7;
  __be64 R1522_novlan;
  __be64 R1548_prio_0;
  __be64 R1548_prio_1;
  __be64 R1548_prio_2;
  __be64 R1548_prio_3;
  __be64 R1548_prio_4;
  __be64 R1548_prio_5;
  __be64 R1548_prio_6;
  __be64 R1548_prio_7;
  __be64 R1548_novlan;
  __be64 R2MTU_prio_0;
  __be64 R2MTU_prio_1;
  __be64 R2MTU_prio_2;
  __be64 R2MTU_prio_3;
  __be64 R2MTU_prio_4;
  __be64 R2MTU_prio_5;
  __be64 R2MTU_prio_6;
  __be64 R2MTU_prio_7;
  __be64 R2MTU_novlan;
  __be64 RGIANT_prio_0;
  __be64 RGIANT_prio_1;
  __be64 RGIANT_prio_2;
  __be64 RGIANT_prio_3;
  __be64 RGIANT_prio_4;
  __be64 RGIANT_prio_5;
  __be64 RGIANT_prio_6;
  __be64 RGIANT_prio_7;
  __be64 RGIANT_novlan;
  __be64 RBCAST_prio_0;
  __be64 RBCAST_prio_1;
  __be64 RBCAST_prio_2;
  __be64 RBCAST_prio_3;
  __be64 RBCAST_prio_4;
  __be64 RBCAST_prio_5;
  __be64 RBCAST_prio_6;
  __be64 RBCAST_prio_7;
  __be64 RBCAST_novlan;
  __be64 MCAST_prio_0;
  __be64 MCAST_prio_1;
  __be64 MCAST_prio_2;
  __be64 MCAST_prio_3;
  __be64 MCAST_prio_4;
  __be64 MCAST_prio_5;
  __be64 MCAST_prio_6;
  __be64 MCAST_prio_7;
  __be64 MCAST_novlan;
  __be64 RTOTG_prio_0;
  __be64 RTOTG_prio_1;
  __be64 RTOTG_prio_2;
  __be64 RTOTG_prio_3;
  __be64 RTOTG_prio_4;
  __be64 RTOTG_prio_5;
  __be64 RTOTG_prio_6;
  __be64 RTOTG_prio_7;
  __be64 RTOTG_novlan;
  __be64 RTTLOCT_prio_0;
  __be64 RTTLOCT_NOFRM_prio_0;
  __be64 ROCT_prio_0;
  __be64 RTTLOCT_prio_1;
  __be64 RTTLOCT_NOFRM_prio_1;
  __be64 ROCT_prio_1;
  __be64 RTTLOCT_prio_2;
  __be64 RTTLOCT_NOFRM_prio_2;
  __be64 ROCT_prio_2;
  __be64 RTTLOCT_prio_3;
  __be64 RTTLOCT_NOFRM_prio_3;
  __be64 ROCT_prio_3;
  __be64 RTTLOCT_prio_4;
  __be64 RTTLOCT_NOFRM_prio_4;
  __be64 ROCT_prio_4;
  __be64 RTTLOCT_prio_5;
  __be64 RTTLOCT_NOFRM_prio_5;
  __be64 ROCT_prio_5;
  __be64 RTTLOCT_prio_6;
  __be64 RTTLOCT_NOFRM_prio_6;
  __be64 ROCT_prio_6;
  __be64 RTTLOCT_prio_7;
  __be64 RTTLOCT_NOFRM_prio_7;
  __be64 ROCT_prio_7;
  __be64 RTTLOCT_novlan;
  __be64 RTTLOCT_NOFRM_novlan;
  __be64 ROCT_novlan;
  __be64 RTOT_prio_0;
  __be64 R1Q_prio_0;
  __be64 reserved1;
  __be64 RTOT_prio_1;
  __be64 R1Q_prio_1;
  __be64 reserved2;
  __be64 RTOT_prio_2;
  __be64 R1Q_prio_2;
  __be64 reserved3;
  __be64 RTOT_prio_3;
  __be64 R1Q_prio_3;
  __be64 reserved4;
  __be64 RTOT_prio_4;
  __be64 R1Q_prio_4;
  __be64 reserved5;
  __be64 RTOT_prio_5;
  __be64 R1Q_prio_5;
  __be64 reserved6;
  __be64 RTOT_prio_6;
  __be64 R1Q_prio_6;
  __be64 reserved7;
  __be64 RTOT_prio_7;
  __be64 R1Q_prio_7;
  __be64 reserved8;
  __be64 RTOT_novlan;
  __be64 R1Q_novlan;
  __be64 reserved9;
  __be64 RCNTL;
  __be64 reserved10;
  __be64 reserved11;
  __be64 reserved12;
  __be64 RInRangeLengthErr;
  __be64 ROutRangeLengthErr;
  __be64 RFrmTooLong;
  __be64 PCS;
  __be64 T64_prio_0;
  __be64 T64_prio_1;
  __be64 T64_prio_2;
  __be64 T64_prio_3;
  __be64 T64_prio_4;
  __be64 T64_prio_5;
  __be64 T64_prio_6;
  __be64 T64_prio_7;
  __be64 T64_novlan;
  __be64 T64_loopbk;
  __be64 T127_prio_0;
  __be64 T127_prio_1;
  __be64 T127_prio_2;
  __be64 T127_prio_3;
  __be64 T127_prio_4;
  __be64 T127_prio_5;
  __be64 T127_prio_6;
  __be64 T127_prio_7;
  __be64 T127_novlan;
  __be64 T127_loopbk;
  __be64 T255_prio_0;
  __be64 T255_prio_1;
  __be64 T255_prio_2;
  __be64 T255_prio_3;
  __be64 T255_prio_4;
  __be64 T255_prio_5;
  __be64 T255_prio_6;
  __be64 T255_prio_7;
  __be64 T255_novlan;
  __be64 T255_loopbk;
  __be64 T511_prio_0;
  __be64 T511_prio_1;
  __be64 T511_prio_2;
  __be64 T511_prio_3;
  __be64 T511_prio_4;
  __be64 T511_prio_5;
  __be64 T511_prio_6;
  __be64 T511_prio_7;
  __be64 T511_novlan;
  __be64 T511_loopbk;
  __be64 T1023_prio_0;
  __be64 T1023_prio_1;
  __be64 T1023_prio_2;
  __be64 T1023_prio_3;
  __be64 T1023_prio_4;
  __be64 T1023_prio_5;
  __be64 T1023_prio_6;
  __be64 T1023_prio_7;
  __be64 T1023_novlan;
  __be64 T1023_loopbk;
  __be64 T1518_prio_0;
  __be64 T1518_prio_1;
  __be64 T1518_prio_2;
  __be64 T1518_prio_3;
  __be64 T1518_prio_4;
  __be64 T1518_prio_5;
  __be64 T1518_prio_6;
  __be64 T1518_prio_7;
  __be64 T1518_novlan;
  __be64 T1518_loopbk;
  __be64 T1522_prio_0;
  __be64 T1522_prio_1;
  __be64 T1522_prio_2;
  __be64 T1522_prio_3;
  __be64 T1522_prio_4;
  __be64 T1522_prio_5;
  __be64 T1522_prio_6;
  __be64 T1522_prio_7;
  __be64 T1522_novlan;
  __be64 T1522_loopbk;
  __be64 T1548_prio_0;
  __be64 T1548_prio_1;
  __be64 T1548_prio_2;
  __be64 T1548_prio_3;
  __be64 T1548_prio_4;
  __be64 T1548_prio_5;
  __be64 T1548_prio_6;
  __be64 T1548_prio_7;
  __be64 T1548_novlan;
  __be64 T1548_loopbk;
  __be64 T2MTU_prio_0;
  __be64 T2MTU_prio_1;
  __be64 T2MTU_prio_2;
  __be64 T2MTU_prio_3;
  __be64 T2MTU_prio_4;
  __be64 T2MTU_prio_5;
  __be64 T2MTU_prio_6;
  __be64 T2MTU_prio_7;
  __be64 T2MTU_novlan;
  __be64 T2MTU_loopbk;
  __be64 TGIANT_prio_0;
  __be64 TGIANT_prio_1;
  __be64 TGIANT_prio_2;
  __be64 TGIANT_prio_3;
  __be64 TGIANT_prio_4;
  __be64 TGIANT_prio_5;
  __be64 TGIANT_prio_6;
  __be64 TGIANT_prio_7;
  __be64 TGIANT_novlan;
  __be64 TGIANT_loopbk;
  __be64 TBCAST_prio_0;
  __be64 TBCAST_prio_1;
  __be64 TBCAST_prio_2;
  __be64 TBCAST_prio_3;
  __be64 TBCAST_prio_4;
  __be64 TBCAST_prio_5;
  __be64 TBCAST_prio_6;
  __be64 TBCAST_prio_7;
  __be64 TBCAST_novlan;
  __be64 TBCAST_loopbk;
  __be64 TMCAST_prio_0;
  __be64 TMCAST_prio_1;
  __be64 TMCAST_prio_2;
  __be64 TMCAST_prio_3;
  __be64 TMCAST_prio_4;
  __be64 TMCAST_prio_5;
  __be64 TMCAST_prio_6;
  __be64 TMCAST_prio_7;
  __be64 TMCAST_novlan;
  __be64 TMCAST_loopbk;
  __be64 TTOTG_prio_0;
  __be64 TTOTG_prio_1;
  __be64 TTOTG_prio_2;
  __be64 TTOTG_prio_3;
  __be64 TTOTG_prio_4;
  __be64 TTOTG_prio_5;
  __be64 TTOTG_prio_6;
  __be64 TTOTG_prio_7;
  __be64 TTOTG_novlan;
  __be64 TTOTG_loopbk;
  __be64 TTTLOCT_prio_0;
  __be64 TTTLOCT_NOFRM_prio_0;
  __be64 TOCT_prio_0;
  __be64 TTTLOCT_prio_1;
  __be64 TTTLOCT_NOFRM_prio_1;
  __be64 TOCT_prio_1;
  __be64 TTTLOCT_prio_2;
  __be64 TTTLOCT_NOFRM_prio_2;
  __be64 TOCT_prio_2;
  __be64 TTTLOCT_prio_3;
  __be64 TTTLOCT_NOFRM_prio_3;
  __be64 TOCT_prio_3;
  __be64 TTTLOCT_prio_4;
  __be64 TTTLOCT_NOFRM_prio_4;
  __be64 TOCT_prio_4;
  __be64 TTTLOCT_prio_5;
  __be64 TTTLOCT_NOFRM_prio_5;
  __be64 TOCT_prio_5;
  __be64 TTTLOCT_prio_6;
  __be64 TTTLOCT_NOFRM_prio_6;
  __be64 TOCT_prio_6;
  __be64 TTTLOCT_prio_7;
  __be64 TTTLOCT_NOFRM_prio_7;
  __be64 TOCT_prio_7;
  __be64 TTTLOCT_novlan;
  __be64 TTTLOCT_NOFRM_novlan;
  __be64 TOCT_novlan;
  __be64 TTTLOCT_loopbk;
  __be64 TTTLOCT_NOFRM_loopbk;
  __be64 TOCT_loopbk;
  __be64 TTOT_prio_0;
  __be64 T1Q_prio_0;
  __be64 reserved13;
  __be64 TTOT_prio_1;
  __be64 T1Q_prio_1;
  __be64 reserved14;
  __be64 TTOT_prio_2;
  __be64 T1Q_prio_2;
  __be64 reserved15;
  __be64 TTOT_prio_3;
  __be64 T1Q_prio_3;
  __be64 reserved16;
  __be64 TTOT_prio_4;
  __be64 T1Q_prio_4;
  __be64 reserved17;
  __be64 TTOT_prio_5;
  __be64 T1Q_prio_5;
  __be64 reserved18;
  __be64 TTOT_prio_6;
  __be64 T1Q_prio_6;
  __be64 reserved19;
  __be64 TTOT_prio_7;
  __be64 T1Q_prio_7;
  __be64 reserved20;
  __be64 TTOT_novlan;
  __be64 T1Q_novlan;
  __be64 reserved21;
  __be64 TTOT_loopbk;
  __be64 T1Q_loopbk;
  __be64 reserved22;
  __be32 RJBBR;
  __be32 RCRC;
  __be32 RRUNT;
  __be32 RSHORT;
  __be32 RDROP;
  __be32 RdropOvflw;
  __be32 RdropLength;
  __be32 RTOTFRMS;
  __be32 TDROP;
};

struct mlx4_en_pkt_stats {
  long unsigned int rx_multicast_packets;
  long unsigned int rx_broadcast_packets;
  long unsigned int rx_jabbers;
  long unsigned int rx_in_range_length_error;
  long unsigned int rx_out_range_length_error;
  long unsigned int tx_multicast_packets;
  long unsigned int tx_broadcast_packets;
  long unsigned int rx_prio[18];
  long unsigned int tx_prio[18];
};

struct mlx4_en_counter_stats {
  long unsigned int rx_packets;
  long unsigned int rx_bytes;
  long unsigned int tx_packets;
  long unsigned int tx_bytes;
};

struct mlx4_en_port_stats {
  long unsigned int tso_packets;
  long unsigned int xmit_more;
  long unsigned int queue_stopped;
  long unsigned int wake_queue;
  long unsigned int tx_timeout;
  long unsigned int rx_alloc_pages;
  long unsigned int rx_chksum_good;
  long unsigned int rx_chksum_none;
  long unsigned int rx_chksum_complete;
  long unsigned int tx_chksum_offload;
};

struct mlx4_en_xdp_stats {
  long unsigned int rx_xdp_drop;
  long unsigned int rx_xdp_tx;
  long unsigned int rx_xdp_tx_full;
};

struct mlx4_en_phy_stats {
  long unsigned int rx_packets_phy;
  long unsigned int rx_bytes_phy;
  long unsigned int tx_packets_phy;
  long unsigned int tx_bytes_phy;
};

struct mlx4_en_flow_stats_rx {
  u64 rx_pause;
  u64 rx_pause_duration;
  u64 rx_pause_transition;
};

struct mlx4_en_flow_stats_tx {
  u64 tx_pause;
  u64 tx_pause_duration;
  u64 tx_pause_transition;
};

enum {
  MAX_INLINE = 104,
  MAX_BF = 256,
  MIN_PKT_LEN = 17,
};

enum cq_type {
  TX = 0,
  TX_XDP = 1,
  RX = 2,
};

struct mlx4_en_tx_info {
  union {
    struct sk_buff* skb;
    struct page* page;
  };
  dma_addr_t map0_dma;
  u32 map0_byte_count;
  u32 nr_txbb;
  u32 nr_bytes;
  u8 linear;
  u8 data_offset;
  u8 inl;
  u8 ts_requested;
  u8 nr_maps;
  long : 56;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx4_en_page_cache {
  u32 index;
  struct {
    struct page* page;
    dma_addr_t dma;
  } buf[128];
};

struct mlx4_en_priv;

struct mlx4_en_rx_ring;

struct mlx4_en_tx_ring {
  u32 last_nr_txbb;
  u32 cons;
  long unsigned int wake_queue;
  struct netdev_queue* tx_queue;
  u32 (*free_tx_desc)(
      struct mlx4_en_priv*,
      struct mlx4_en_tx_ring*,
      int,
      u64,
      int);
  struct mlx4_en_rx_ring* recycle_ring;
  long : 64;
  long : 64;
  long : 64;
  u32 prod;
  unsigned int tx_dropped;
  long unsigned int bytes;
  long unsigned int packets;
  long unsigned int tx_csum;
  long unsigned int tso_packets;
  long unsigned int xmit_more;
  struct mlx4_bf bf;
  __be32 doorbell_qpn;
  __be32 mr_key;
  u32 size;
  u32 size_mask;
  u32 full_size;
  u32 buf_size;
  void* buf;
  struct mlx4_en_tx_info* tx_info;
  int qpn;
  u8 queue_index;
  bool bf_enabled;
  bool bf_alloced;
  u8 hwtstamp_tx_type;
  u8* bounce_buf;
  long unsigned int queue_stopped;
  long unsigned int state;
  struct mlx4_hwq_resources sp_wqres;
  struct mlx4_qp sp_qp;
  struct mlx4_qp_context sp_context;
  cpumask_t sp_affinity_mask;
  enum mlx4_qp_state sp_qp_state;
  u16 sp_stride;
  u16 sp_cqn;
  long : 64;
  long : 64;
};

struct mlx4_en_port_state {
  int link_state;
  int link_speed;
  int transceiver;
  u32 flags;
};

struct ethtool_flow_id {
  struct list_head list;
  struct ethtool_rx_flow_spec flow_spec;
  u64 id;
};

struct mlx4_en_rss_map {
  int base_qpn;
  struct mlx4_qp qps[128];
  enum mlx4_qp_state state[128];
  struct mlx4_qp* indir_qp;
  enum mlx4_qp_state indir_state;
};

struct mlx4_en_frag_info {
  u16 frag_size;
  u32 frag_stride;
};

struct mlx4_en_stats_bitmap {
  long unsigned int bitmap[3];
  struct mutex mutex;
};

struct mlx4_en_cee_config {
  bool pfc_state;
  enum dcb_pfc_type dcb_pfc[8];
};

struct mlx4_en_dev;

struct mlx4_en_port_profile;

struct mlx4_en_cq;

struct mlx4_en_priv {
  struct mlx4_en_dev* mdev;
  struct mlx4_en_port_profile* prof;
  struct net_device* dev;
  long unsigned int active_vlans[64];
  struct mlx4_en_port_state port_state;
  spinlock_t stats_lock;
  struct ethtool_flow_id ethtool_rules[256];
  struct list_head ethtool_list;
  long unsigned int last_moder_packets[128];
  long unsigned int last_moder_tx_packets;
  long unsigned int last_moder_bytes[128];
  long unsigned int last_moder_jiffies;
  int last_moder_time[128];
  u16 rx_usecs;
  u16 rx_frames;
  u16 tx_usecs;
  u16 tx_frames;
  u32 pkt_rate_low;
  u16 rx_usecs_low;
  u32 pkt_rate_high;
  u16 rx_usecs_high;
  u32 sample_interval;
  u32 adaptive_rx_coal;
  u32 msg_enable;
  u32 loopback_ok;
  u32 validate_loopback;
  struct mlx4_hwq_resources res;
  int link_state;
  bool port_up;
  int port;
  int registered;
  int allocated;
  int stride;
  unsigned char current_mac[8];
  int mac_index;
  unsigned int max_mtu;
  int base_qpn;
  int cqe_factor;
  int cqe_size;
  struct mlx4_en_rss_map rss_map;
  __be32 ctrl_flags;
  u32 flags;
  u8 num_tx_rings_p_up;
  u32 tx_work_limit;
  u32 tx_ring_num[2];
  u32 rx_ring_num;
  u32 rx_skb_size;
  struct mlx4_en_frag_info frag_info[4];
  u8 num_frags;
  u8 log_rx_info;
  u8 dma_dir;
  u16 rx_headroom;
  struct mlx4_en_tx_ring** tx_ring[2];
  struct mlx4_en_rx_ring* rx_ring[128];
  struct mlx4_en_cq** tx_cq[2];
  struct mlx4_en_cq* rx_cq[128];
  struct mlx4_qp drop_qp;
  struct work_struct rx_mode_task;
  struct work_struct restart_task;
  struct work_struct linkstate_task;
  struct delayed_work stats_task;
  struct delayed_work service_task;
  struct mlx4_en_pkt_stats pkstats;
  struct mlx4_en_counter_stats pf_stats;
  struct mlx4_en_flow_stats_rx rx_priority_flowstats[8];
  struct mlx4_en_flow_stats_tx tx_priority_flowstats[8];
  struct mlx4_en_flow_stats_rx rx_flowstats;
  struct mlx4_en_flow_stats_tx tx_flowstats;
  struct mlx4_en_port_stats port_stats;
  struct mlx4_en_xdp_stats xdp_stats;
  struct mlx4_en_phy_stats phy_stats;
  struct mlx4_en_stats_bitmap stats_bitmap;
  struct list_head mc_list;
  struct list_head curr_list;
  u64 broadcast_id;
  struct mlx4_en_stat_out_mbox hw_stats;
  int vids[128];
  bool wol;
  struct device* ddev;
  struct hlist_head mac_hash[256];
  struct hwtstamp_config hwtstamp_config;
  u32 counter_index;
  struct ieee_ets ets;
  u16 maxrate[8];
  enum dcbnl_cndd_states cndd_state[8];
  struct mlx4_en_cee_config cee_config;
  u8 dcbx_cap;
  spinlock_t filters_lock;
  int last_filter_id;
  struct list_head filters;
  struct hlist_head filter_hash[16];
  u64 tunnel_reg_id;
  __be16 vxlan_port;
  u32 pflags;
  u8 rss_key[40];
  u8 rss_hash_fn;
  long unsigned int state;
};

struct mlx4_en_rx_ring {
  struct mlx4_hwq_resources wqres;
  u32 size;
  u32 actual_size;
  u32 size_mask;
  u16 stride;
  u16 log_stride;
  u16 cqn;
  u32 prod;
  u32 cons;
  u32 buf_size;
  u8 fcs_del;
  void* buf;
  void* rx_info;
  struct bpf_prog* xdp_prog;
  struct mlx4_en_page_cache page_cache;
  long unsigned int bytes;
  long unsigned int packets;
  long unsigned int csum_ok;
  long unsigned int csum_none;
  long unsigned int csum_complete;
  long unsigned int rx_alloc_pages;
  long unsigned int xdp_drop;
  long unsigned int xdp_tx;
  long unsigned int xdp_tx_full;
  long unsigned int dropped;
  int hwtstamp_rx_filter;
  cpumask_var_t affinity_mask;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct xdp_rxq_info xdp_rxq;
};

struct mlx4_en_cq {
  struct mlx4_cq mcq;
  struct mlx4_hwq_resources wqres;
  int ring;
  struct net_device* dev;
  union {
    struct napi_struct napi;
    bool xdp_busy;
  };
  int size;
  int buf_size;
  int vector;
  enum cq_type type;
  u16 moder_time;
  u16 moder_cnt;
  struct mlx4_cqe* buf;
  const struct cpumask* aff_mask;
};

struct mlx4_en_port_profile {
  u32 flags;
  u32 tx_ring_num[2];
  u32 rx_ring_num;
  u32 tx_ring_size;
  u32 rx_ring_size;
  u8 num_tx_rings_p_up;
  u8 rx_pause;
  u8 rx_ppp;
  u8 tx_pause;
  u8 tx_ppp;
  u8 num_up;
  int rss_rings;
  int inline_thold;
  struct hwtstamp_config hwtstamp_config;
};

struct mlx4_en_profile {
  int udp_rss;
  u8 rss_mask;
  u32 active_ports;
  u32 small_pkt_int;
  u8 no_reset;
  u8 max_num_tx_rings_p_up;
  struct mlx4_en_port_profile prof[3];
};

struct mlx4_en_dev {
  struct mlx4_dev* dev;
  struct pci_dev* pdev;
  struct mutex state_lock;
  struct net_device* pndev[3];
  struct net_device* upper[3];
  u32 port_cnt;
  bool device_up;
  struct mlx4_en_profile profile;
  u32 LSO_support;
  struct workqueue_struct* workqueue;
  struct device* dma_device;
  void* uar_map;
  struct mlx4_uar priv_uar;
  struct mlx4_mr mr;
  u32 priv_pdn;
  spinlock_t uar_lock;
  u8 mac_removed[3];
  u32 nominal_c_mult;
  struct cyclecounter cycles;
  seqlock_t clock_lock;
  struct timecounter clock;
  long unsigned int last_overflow_check;
  struct ptp_clock* ptp_clock;
  struct ptp_clock_info ptp_clock_info;
  struct notifier_block nb;
};

enum {
  MLX4_EN_FLAG_PROMISC = 1,
  MLX4_EN_FLAG_MC_PROMISC = 2,
  MLX4_EN_FLAG_ENABLE_HW_LOOPBACK = 4,
  MLX4_EN_FLAG_RX_FILTER_NEEDED = 8,
  MLX4_EN_FLAG_FORCE_PROMISC = 16,
  MLX4_EN_FLAG_RX_CSUM_NON_TCP_UDP = 32,
  MLX4_EN_FLAG_DCB_ENABLED = 64,
};

enum {
  MLX4_OPCODE_NOP = 0,
  MLX4_OPCODE_SEND_INVAL = 1,
  MLX4_OPCODE_RDMA_WRITE = 8,
  MLX4_OPCODE_RDMA_WRITE_IMM = 9,
  MLX4_OPCODE_SEND = 10,
  MLX4_OPCODE_SEND_IMM = 11,
  MLX4_OPCODE_LSO = 14,
  MLX4_OPCODE_RDMA_READ = 16,
  MLX4_OPCODE_ATOMIC_CS = 17,
  MLX4_OPCODE_ATOMIC_FA = 18,
  MLX4_OPCODE_MASKED_ATOMIC_CS = 20,
  MLX4_OPCODE_MASKED_ATOMIC_FA = 21,
  MLX4_OPCODE_BIND_MW = 24,
  MLX4_OPCODE_FMR = 25,
  MLX4_OPCODE_LOCAL_INVAL = 27,
  MLX4_OPCODE_CONFIG_CMD = 31,
  MLX4_RECV_OPCODE_RDMA_WRITE_IMM = 0,
  MLX4_RECV_OPCODE_SEND = 1,
  MLX4_RECV_OPCODE_SEND_IMM = 2,
  MLX4_RECV_OPCODE_SEND_INVAL = 3,
  MLX4_CQE_OPCODE_ERROR = 30,
  MLX4_CQE_OPCODE_RESIZE = 22,
};

struct mlx4_err_cqe {
  __be32 my_qpn;
  u32 reserved1[5];
  __be16 wqe_index;
  u8 vendor_err_syndrome;
  u8 syndrome;
  u8 reserved2[3];
  u8 owner_sr_opcode;
};

enum {
  MLX4_CQE_OWNER_MASK = 128,
  MLX4_CQE_IS_SEND_MASK = 64,
  MLX4_CQE_OPCODE_MASK = 31,
};

union mlx4_wqe_qpn_vlan {
  struct {
    __be16 vlan_tag;
    u8 ins_vlan;
    u8 fence_size;
  };
  __be32 bf_qpn;
};

struct mlx4_wqe_ctrl_seg {
  __be32 owner_opcode;
  union mlx4_wqe_qpn_vlan qpn_vlan;
  union {
    __be32 srcrb_flags;
    __be16 srcrb_flags16[2];
  };
  __be32 imm;
};

struct mlx4_wqe_lso_seg {
  __be32 mss_hdr_size;
  __be32 header[0];
};

struct mlx4_wqe_data_seg {
  __be32 byte_count;
  __be32 lkey;
  __be64 addr;
};

enum {
  MLX4_INLINE_ALIGN = 64,
  MLX4_INLINE_SEG = 2147483648,
};

struct mlx4_wqe_inline_seg {
  __be32 byte_count;
};

struct mlx4_en_tx_desc {
  struct mlx4_wqe_ctrl_seg ctrl;
  union {
    struct mlx4_wqe_data_seg data;
    struct mlx4_wqe_lso_seg lso;
    struct mlx4_wqe_inline_seg inl;
  };
};

struct mlx4_en_rx_alloc {
  struct page* page;
  dma_addr_t dma;
  u32 page_offset;
};

enum {
  MLX4_EN_TX_RING_STATE_RECOVERING = 0,
};

enum {
  MLX4_EN_STATE_FLAG_RESTARTING = 0,
};

enum {
  MLX4_CQE_L2_TUNNEL_IPOK = 2147483648,
  MLX4_CQE_CVLAN_PRESENT_MASK = 536870912,
  MLX4_CQE_SVLAN_PRESENT_MASK = 1073741824,
  MLX4_CQE_L2_TUNNEL = 134217728,
  MLX4_CQE_L2_TUNNEL_CSUM = 67108864,
  MLX4_CQE_L2_TUNNEL_IPV4 = 33554432,
  MLX4_CQE_QPN_MASK = 16777215,
  MLX4_CQE_VID_MASK = 4095,
};

enum {
  MLX4_CQE_STATUS_IPV4 = 64,
  MLX4_CQE_STATUS_IPV4F = 128,
  MLX4_CQE_STATUS_IPV6 = 256,
  MLX4_CQE_STATUS_IPV4OPT = 512,
  MLX4_CQE_STATUS_TCP = 1024,
  MLX4_CQE_STATUS_UDP = 2048,
  MLX4_CQE_STATUS_IPOK = 4096,
};

enum {
  MLX4_CQE_LLC = 1,
  MLX4_CQE_SNAP = 2,
  MLX4_CQE_BAD_FCS = 16,
};

struct mlx4_rss_context {
  __be32 base_qpn;
  __be32 default_qpn;
  u16 reserved;
  u8 hash_fn;
  u8 flags;
  __be32 rss_key[10];
  __be32 base_qpn_udp;
};

struct mlx4_en_rx_desc {
  struct mlx4_wqe_data_seg data[0];
};

struct mlx4_mac_entry {
  struct hlist_node hlist;
  unsigned char mac[8];
  u64 reg_id;
  struct callback_head rcu;
};

enum tunable_id {
  ETHTOOL_ID_UNSPEC = 0,
  ETHTOOL_RX_COPYBREAK = 1,
  ETHTOOL_TX_COPYBREAK = 2,
  ETHTOOL_PFC_PREVENTION_TOUT = 3,
  __ETHTOOL_TUNABLE_COUNT = 4,
};

enum mlx4_ptys_proto {
  MLX4_PTYS_IB = 1,
  MLX4_PTYS_EN = 4,
};

enum mlx4_ptys_flags {
  MLX4_PTYS_AN_DISABLE_CAP = 32,
  MLX4_PTYS_AN_DISABLE_ADMIN = 64,
};

enum mlx4_link_mode {
  MLX4_1000BASE_CX_SGMII = 0,
  MLX4_1000BASE_KX = 1,
  MLX4_10GBASE_CX4 = 2,
  MLX4_10GBASE_KX4 = 3,
  MLX4_10GBASE_KR = 4,
  MLX4_20GBASE_KR2 = 5,
  MLX4_40GBASE_CR4 = 6,
  MLX4_40GBASE_KR4 = 7,
  MLX4_56GBASE_KR4 = 8,
  MLX4_10GBASE_CR = 12,
  MLX4_10GBASE_SR = 13,
  MLX4_40GBASE_SR4 = 15,
  MLX4_56GBASE_CR4 = 17,
  MLX4_56GBASE_SR4 = 18,
  MLX4_100BASE_TX = 24,
  MLX4_1000BASE_T = 25,
  MLX4_10GBASE_T = 26,
};

enum mlx4_en_port_flag {
  MLX4_EN_PORT_ANC = 1,
  MLX4_EN_PORT_ANE = 2,
};

enum mlx4_en_wol {
  MLX4_EN_WOL_MAGIC = 0,
  MLX4_EN_WOL_ENABLED = 0,
};

struct bitmap_iterator {
  long unsigned int* stats_bitmap;
  unsigned int count;
  unsigned int iterator;
  bool advance_array;
};

enum ethtool_report {
  SUPPORTED = 0,
  ADVERTISED = 1,
};

struct ptys2ethtool_config {
  long unsigned int supported[2];
  long unsigned int advertised[2];
  u32 speed;
};

struct mlx4_set_vlan_fltr_mbox {
  __be32 entry[128];
};

enum {
  MLX4_EN_100M_SPEED = 4,
  MLX4_EN_10G_SPEED_XAUI = 0,
  MLX4_EN_10G_SPEED_XFI = 1,
  MLX4_EN_1G_SPEED = 2,
  MLX4_EN_20G_SPEED = 8,
  MLX4_EN_40G_SPEED = 64,
  MLX4_EN_56G_SPEED = 32,
  MLX4_EN_OTHER_SPEED = 15,
};

struct mlx4_en_query_port_context {
  u8 link_up;
  u8 autoneg;
  __be16 mtu;
  u8 reserved2;
  u8 link_speed;
  u16 reserved3[5];
  __be64 mac;
  u8 transceiver;
};

struct mlx4_en_stat_out_flow_control_mbox {
  __be64 rx_pause;
  __be64 rx_pause_duration;
  __be64 rx_pause_transition;
  __be64 tx_pause;
  __be64 tx_pause_duration;
  __be64 tx_pause_transition;
  __be64 reserved[2];
};

enum {
  MLX4_DUMP_ETH_STATS_FLOW_CONTROL = 4096,
};

enum {
  MLX4_CQ_DB_REQ_NOT_SOL = 16777216,
  MLX4_CQ_DB_REQ_NOT = 33554432,
};

struct ifbond {
  __s32 bond_mode;
  __s32 num_slaves;
  __s32 miimon;
};

typedef struct ifbond ifbond;

struct ifslave {
  __s32 slave_id;
  char slave_name[16];
  __s8 link;
  __s8 state;
  __u32 link_failure_count;
};

typedef struct ifslave ifslave;

struct netdev_bonding_info {
  ifslave slave;
  ifbond master;
};

struct netdev_notifier_bonding_info {
  struct netdev_notifier_info info;
  struct netdev_bonding_info bonding_info;
};

enum {
  MLX4_QP_RATE_LIMIT_NONE = 0,
  MLX4_QP_RATE_LIMIT_KBS = 1,
  MLX4_QP_RATE_LIMIT_MBS = 2,
  MLX4_QP_RATE_LIMIT_GBS = 3,
};

enum {
  VXLAN_STEER_BY_OUTER_MAC = 1,
  VXLAN_STEER_BY_OUTER_VLAN = 2,
  VXLAN_STEER_BY_VSID_VNI = 4,
  VXLAN_STEER_BY_INNER_MAC = 8,
  VXLAN_STEER_BY_INNER_VLAN = 16,
};

enum {
  MLX4_MCAST_CONFIG = 0,
  MLX4_MCAST_DISABLE = 1,
  MLX4_MCAST_ENABLE = 2,
};

enum mlx4_en_mclist_act {
  MCLIST_NONE = 0,
  MCLIST_REM = 1,
  MCLIST_ADD = 2,
};

struct mlx4_en_mc_list {
  struct list_head list;
  enum mlx4_en_mclist_act action;
  u8 addr[6];
  u64 reg_id;
  u64 tunnel_reg_id;
};

struct mlx4_en_filter {
  struct list_head next;
  struct work_struct work;
  u8 ip_proto;
  __be32 src_ip;
  __be32 dst_ip;
  __be16 src_port;
  __be16 dst_port;
  int rxq_index;
  struct mlx4_en_priv* priv;
  u32 flow_id;
  int id;
  u64 reg_id;
  u8 activated;
  struct hlist_node filter_chain;
};

struct mlx4_en_bond {
  struct work_struct work;
  struct mlx4_en_priv* priv;
  int is_bonded;
  struct mlx4_port_map port_map;
};

struct mlx4_ts_cqe {
  __be32 vlan_my_qpn;
  __be32 immed_rss_invalid;
  __be32 g_mlpath_rqpn;
  __be32 timestamp_hi;
  __be16 status;
  u8 ipv6_ext_mask;
  u8 badfcs_enc;
  __be32 byte_cnt;
  __be16 wqe_index;
  __be16 checksum;
  u8 reserved;
  __be16 timestamp_lo;
  u8 owner_sr_opcode;
} __attribute__((packed));

enum mlx4_en_congestion_control_algorithm {
  MLX4_CTRL_ALGO_802_1_QAU_REACTION_POINT = 0,
};

enum mlx4_en_congestion_control_opmod {
  MLX4_CONGESTION_CONTROL_GET_PARAMS = 0,
  MLX4_CONGESTION_CONTROL_GET_STATISTICS = 1,
  MLX4_CONGESTION_CONTROL_SET_PARAMS = 4,
};

enum {
  MLX4_CEE_STATE_DOWN = 0,
  MLX4_CEE_STATE_UP = 1,
};

struct mlx4_congestion_control_mb_prio_802_1_qau_params {
  __be32 modify_enable_high;
  __be32 modify_enable_low;
  __be32 reserved1;
  __be32 extended_enable;
  __be32 rppp_max_rps;
  __be32 rpg_time_reset;
  __be32 rpg_byte_reset;
  __be32 rpg_threshold;
  __be32 rpg_max_rate;
  __be32 rpg_ai_rate;
  __be32 rpg_hai_rate;
  __be32 rpg_gd;
  __be32 rpg_min_dec_fac;
  __be32 rpg_min_rate;
  __be32 max_time_rise;
  __be32 max_byte_rise;
  __be32 max_qdelta;
  __be32 min_qoffset;
  __be32 gd_coefficient;
  __be32 reserved2[5];
  __be32 cp_sample_base;
  __be32 reserved3[39];
};

struct mlx4_congestion_control_mb_prio_802_1_qau_statistics {
  __be64 rppp_rp_centiseconds;
  __be32 reserved1;
  __be32 ignored_cnm;
  __be32 rppp_created_rps;
  __be32 estimated_total_rate;
  __be32 max_active_rate_limiter_index;
  __be32 dropped_cnms_busy_fw;
  __be32 reserved2;
  __be32 cnms_handled_successfully;
  __be32 min_total_limiters_rate;
  __be32 max_total_limiters_rate;
  __be32 reserved3[4];
};

struct xt_table_info;

struct xt_table {
  struct list_head list;
  unsigned int valid_hooks;
  struct xt_table_info* private;
  struct module* me;
  u_int8_t af;
  int priority;
  int (*table_init)(struct net*);
  const char name[32];
};

struct netdev_net_notifier {
  struct list_head list;
  struct notifier_block* nb;
};

enum rdma_nl_counter_mode {
  RDMA_COUNTER_MODE_NONE = 0,
  RDMA_COUNTER_MODE_AUTO = 1,
  RDMA_COUNTER_MODE_MANUAL = 2,
  RDMA_COUNTER_MODE_MAX = 3,
};

enum rdma_nl_counter_mask {
  RDMA_COUNTER_MASK_QP_TYPE = 1,
  RDMA_COUNTER_MASK_PID = 2,
};

enum rdma_restrack_type {
  RDMA_RESTRACK_PD = 0,
  RDMA_RESTRACK_CQ = 1,
  RDMA_RESTRACK_QP = 2,
  RDMA_RESTRACK_CM_ID = 3,
  RDMA_RESTRACK_MR = 4,
  RDMA_RESTRACK_CTX = 5,
  RDMA_RESTRACK_COUNTER = 6,
  RDMA_RESTRACK_MAX = 7,
};

struct rdma_restrack_entry {
  bool valid;
  u8 no_track : 1;
  struct kref kref;
  struct completion comp;
  struct task_struct* task;
  const char* kern_name;
  enum rdma_restrack_type type;
  bool user;
  u32 id;
};

struct rdma_link_ops {
  struct list_head list;
  const char* type;
  int (*newlink)(const char*, struct net_device*);
};

struct auto_mode_param {
  int qp_type;
};

struct rdma_counter_mode {
  enum rdma_nl_counter_mode mode;
  enum rdma_nl_counter_mask mask;
  struct auto_mode_param param;
};

struct rdma_hw_stats;

struct rdma_port_counter {
  struct rdma_counter_mode mode;
  struct rdma_hw_stats* hstats;
  unsigned int num_counters;
  struct mutex lock;
};

struct rdma_hw_stats {
  struct mutex lock;
  long unsigned int timestamp;
  long unsigned int lifespan;
  const char* const* names;
  int num_counters;
  u64 value[0];
};

struct ib_device;

struct rdma_counter {
  struct rdma_restrack_entry res;
  struct ib_device* device;
  uint32_t id;
  struct kref kref;
  struct rdma_counter_mode mode;
  struct mutex lock;
  struct rdma_hw_stats* stats;
  u8 port;
};

enum rdma_driver_id {
  RDMA_DRIVER_UNKNOWN = 0,
  RDMA_DRIVER_MLX5 = 1,
  RDMA_DRIVER_MLX4 = 2,
  RDMA_DRIVER_CXGB3 = 3,
  RDMA_DRIVER_CXGB4 = 4,
  RDMA_DRIVER_MTHCA = 5,
  RDMA_DRIVER_BNXT_RE = 6,
  RDMA_DRIVER_OCRDMA = 7,
  RDMA_DRIVER_NES = 8,
  RDMA_DRIVER_I40IW = 9,
  RDMA_DRIVER_VMW_PVRDMA = 10,
  RDMA_DRIVER_QEDR = 11,
  RDMA_DRIVER_HNS = 12,
  RDMA_DRIVER_USNIC = 13,
  RDMA_DRIVER_RXE = 14,
  RDMA_DRIVER_HFI1 = 15,
  RDMA_DRIVER_QIB = 16,
  RDMA_DRIVER_EFA = 17,
  RDMA_DRIVER_SIW = 18,
};

enum ib_cq_notify_flags {
  IB_CQ_SOLICITED = 1,
  IB_CQ_NEXT_COMP = 2,
  IB_CQ_SOLICITED_MASK = 3,
  IB_CQ_REPORT_MISSED_EVENTS = 4,
};

struct ib_mad;

enum rdma_link_layer {
  IB_LINK_LAYER_UNSPECIFIED = 0,
  IB_LINK_LAYER_INFINIBAND = 1,
  IB_LINK_LAYER_ETHERNET = 2,
};

enum rdma_netdev_t {
  RDMA_NETDEV_OPA_VNIC = 0,
  RDMA_NETDEV_IPOIB = 1,
};

enum ib_srq_attr_mask {
  IB_SRQ_MAX_WR = 1,
  IB_SRQ_LIMIT = 2,
};

enum ib_mr_type {
  IB_MR_TYPE_MEM_REG = 0,
  IB_MR_TYPE_SG_GAPS = 1,
  IB_MR_TYPE_DM = 2,
  IB_MR_TYPE_USER = 3,
  IB_MR_TYPE_DMA = 4,
  IB_MR_TYPE_INTEGRITY = 5,
};

enum ib_uverbs_advise_mr_advice {
  IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH = 0,
  IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_WRITE = 1,
  IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_NO_FAULT = 2,
};

struct uverbs_attr_bundle;

struct rdma_cm_id;

struct iw_cm_id;

struct iw_cm_conn_param;

struct ib_qp;

struct ib_send_wr;

struct ib_recv_wr;

struct ib_cq;

struct ib_wc;

struct ib_srq;

struct ib_grh;

struct ib_device_attr;

struct ib_udata;

struct ib_device_modify;

struct ib_port_attr;

struct ib_port_modify;

struct ib_port_immutable;

struct rdma_netdev_alloc_params;

struct ib_gid_attr;

struct ib_ucontext;

struct rdma_user_mmap_entry;

struct ib_pd;

struct ib_ah;

struct rdma_ah_init_attr;

struct rdma_ah_attr;

struct ib_srq_init_attr;

struct ib_srq_attr;

struct ib_qp_init_attr;

struct ib_qp_attr;

struct ib_cq_init_attr;

struct ib_mr;

struct ib_sge;

struct ib_mr_status;

struct ib_mw;

struct ib_xrcd;

struct ib_flow;

struct ib_flow_attr;

struct ib_flow_action;

struct ib_flow_action_attrs_esp;

struct ib_wq;

struct ib_wq_init_attr;

struct ib_wq_attr;

struct ib_rwq_ind_table;

struct ib_rwq_ind_table_init_attr;

struct ib_dm;

struct ib_dm_alloc_attr;

struct ib_dm_mr_attr;

struct ib_counters;

struct ib_counters_read_attr;

struct ib_device_ops {
  struct module* owner;
  enum rdma_driver_id driver_id;
  u32 uverbs_abi_ver;
  unsigned int uverbs_no_driver_id_binding : 1;
  int (*post_send)(
      struct ib_qp*,
      const struct ib_send_wr*,
      const struct ib_send_wr**);
  int (*post_recv)(
      struct ib_qp*,
      const struct ib_recv_wr*,
      const struct ib_recv_wr**);
  void (*drain_rq)(struct ib_qp*);
  void (*drain_sq)(struct ib_qp*);
  int (*poll_cq)(struct ib_cq*, int, struct ib_wc*);
  int (*peek_cq)(struct ib_cq*, int);
  int (*req_notify_cq)(struct ib_cq*, enum ib_cq_notify_flags);
  int (*req_ncomp_notif)(struct ib_cq*, int);
  int (*post_srq_recv)(
      struct ib_srq*,
      const struct ib_recv_wr*,
      const struct ib_recv_wr**);
  int (*process_mad)(
      struct ib_device*,
      int,
      u8,
      const struct ib_wc*,
      const struct ib_grh*,
      const struct ib_mad*,
      struct ib_mad*,
      size_t*,
      u16*);
  int (*query_device)(
      struct ib_device*,
      struct ib_device_attr*,
      struct ib_udata*);
  int (*modify_device)(struct ib_device*, int, struct ib_device_modify*);
  void (*get_dev_fw_str)(struct ib_device*, char*);
  const struct cpumask* (*get_vector_affinity)(struct ib_device*, int);
  int (*query_port)(struct ib_device*, u8, struct ib_port_attr*);
  int (*modify_port)(struct ib_device*, u8, int, struct ib_port_modify*);
  int (*get_port_immutable)(struct ib_device*, u8, struct ib_port_immutable*);
  enum rdma_link_layer (*get_link_layer)(struct ib_device*, u8);
  struct net_device* (*get_netdev)(struct ib_device*, u8);
  struct net_device* (*alloc_rdma_netdev)(
      struct ib_device*,
      u8,
      enum rdma_netdev_t,
      const char*,
      unsigned char,
      void (*)(struct net_device*));
  int (*rdma_netdev_get_params)(
      struct ib_device*,
      u8,
      enum rdma_netdev_t,
      struct rdma_netdev_alloc_params*);
  int (*query_gid)(struct ib_device*, u8, int, union ib_gid*);
  int (*add_gid)(const struct ib_gid_attr*, void**);
  int (*del_gid)(const struct ib_gid_attr*, void**);
  int (*query_pkey)(struct ib_device*, u8, u16, u16*);
  int (*alloc_ucontext)(struct ib_ucontext*, struct ib_udata*);
  void (*dealloc_ucontext)(struct ib_ucontext*);
  int (*mmap)(struct ib_ucontext*, struct vm_area_struct*);
  void (*mmap_free)(struct rdma_user_mmap_entry*);
  void (*disassociate_ucontext)(struct ib_ucontext*);
  int (*alloc_pd)(struct ib_pd*, struct ib_udata*);
  int (*dealloc_pd)(struct ib_pd*, struct ib_udata*);
  int (*create_ah)(struct ib_ah*, struct rdma_ah_init_attr*, struct ib_udata*);
  int (*create_user_ah)(
      struct ib_ah*,
      struct rdma_ah_init_attr*,
      struct ib_udata*);
  int (*modify_ah)(struct ib_ah*, struct rdma_ah_attr*);
  int (*query_ah)(struct ib_ah*, struct rdma_ah_attr*);
  int (*destroy_ah)(struct ib_ah*, u32);
  int (*create_srq)(struct ib_srq*, struct ib_srq_init_attr*, struct ib_udata*);
  int (*modify_srq)(
      struct ib_srq*,
      struct ib_srq_attr*,
      enum ib_srq_attr_mask,
      struct ib_udata*);
  int (*query_srq)(struct ib_srq*, struct ib_srq_attr*);
  int (*destroy_srq)(struct ib_srq*, struct ib_udata*);
  struct ib_qp* (
      *create_qp)(struct ib_pd*, struct ib_qp_init_attr*, struct ib_udata*);
  int (*modify_qp)(struct ib_qp*, struct ib_qp_attr*, int, struct ib_udata*);
  int (*query_qp)(
      struct ib_qp*,
      struct ib_qp_attr*,
      int,
      struct ib_qp_init_attr*);
  int (*destroy_qp)(struct ib_qp*, struct ib_udata*);
  int (*create_cq)(
      struct ib_cq*,
      const struct ib_cq_init_attr*,
      struct ib_udata*);
  int (*modify_cq)(struct ib_cq*, u16, u16);
  int (*destroy_cq)(struct ib_cq*, struct ib_udata*);
  int (*resize_cq)(struct ib_cq*, int, struct ib_udata*);
  struct ib_mr* (*get_dma_mr)(struct ib_pd*, int);
  struct ib_mr* (
      *reg_user_mr)(struct ib_pd*, u64, u64, u64, int, struct ib_udata*);
  struct ib_mr* (*reg_user_mr_dmabuf)(
      struct ib_pd*,
      u64,
      u64,
      u64,
      int,
      int,
      struct ib_udata*);
  struct ib_mr* (*rereg_user_mr)(
      struct ib_mr*,
      int,
      u64,
      u64,
      u64,
      int,
      struct ib_pd*,
      struct ib_udata*);
  int (*dereg_mr)(struct ib_mr*, struct ib_udata*);
  struct ib_mr* (*alloc_mr)(struct ib_pd*, enum ib_mr_type, u32);
  struct ib_mr* (*alloc_mr_integrity)(struct ib_pd*, u32, u32);
  int (*advise_mr)(
      struct ib_pd*,
      enum ib_uverbs_advise_mr_advice,
      u32,
      struct ib_sge*,
      u32,
      struct uverbs_attr_bundle*);
  int (*map_mr_sg)(struct ib_mr*, struct scatterlist*, int, unsigned int*);
  int (*check_mr_status)(struct ib_mr*, u32, struct ib_mr_status*);
  int (*alloc_mw)(struct ib_mw*, struct ib_udata*);
  int (*dealloc_mw)(struct ib_mw*);
  int (*attach_mcast)(struct ib_qp*, union ib_gid*, u16);
  int (*detach_mcast)(struct ib_qp*, union ib_gid*, u16);
  int (*alloc_xrcd)(struct ib_xrcd*, struct ib_udata*);
  int (*dealloc_xrcd)(struct ib_xrcd*, struct ib_udata*);
  struct ib_flow* (
      *create_flow)(struct ib_qp*, struct ib_flow_attr*, struct ib_udata*);
  int (*destroy_flow)(struct ib_flow*);
  struct ib_flow_action* (*create_flow_action_esp)(
      struct ib_device*,
      const struct ib_flow_action_attrs_esp*,
      struct uverbs_attr_bundle*);
  int (*destroy_flow_action)(struct ib_flow_action*);
  int (*modify_flow_action_esp)(
      struct ib_flow_action*,
      const struct ib_flow_action_attrs_esp*,
      struct uverbs_attr_bundle*);
  int (*set_vf_link_state)(struct ib_device*, int, u8, int);
  int (*get_vf_config)(struct ib_device*, int, u8, struct ifla_vf_info*);
  int (*get_vf_stats)(struct ib_device*, int, u8, struct ifla_vf_stats*);
  int (*get_vf_guid)(
      struct ib_device*,
      int,
      u8,
      struct ifla_vf_guid*,
      struct ifla_vf_guid*);
  int (*set_vf_guid)(struct ib_device*, int, u8, u64, int);
  struct ib_wq* (
      *create_wq)(struct ib_pd*, struct ib_wq_init_attr*, struct ib_udata*);
  int (*destroy_wq)(struct ib_wq*, struct ib_udata*);
  int (*modify_wq)(struct ib_wq*, struct ib_wq_attr*, u32, struct ib_udata*);
  int (*create_rwq_ind_table)(
      struct ib_rwq_ind_table*,
      struct ib_rwq_ind_table_init_attr*,
      struct ib_udata*);
  int (*destroy_rwq_ind_table)(struct ib_rwq_ind_table*);
  struct ib_dm* (*alloc_dm)(
      struct ib_device*,
      struct ib_ucontext*,
      struct ib_dm_alloc_attr*,
      struct uverbs_attr_bundle*);
  int (*dealloc_dm)(struct ib_dm*, struct uverbs_attr_bundle*);
  struct ib_mr* (*reg_dm_mr)(
      struct ib_pd*,
      struct ib_dm*,
      struct ib_dm_mr_attr*,
      struct uverbs_attr_bundle*);
  int (*create_counters)(struct ib_counters*, struct uverbs_attr_bundle*);
  int (*destroy_counters)(struct ib_counters*);
  int (*read_counters)(
      struct ib_counters*,
      struct ib_counters_read_attr*,
      struct uverbs_attr_bundle*);
  int (*map_mr_sg_pi)(
      struct ib_mr*,
      struct scatterlist*,
      int,
      unsigned int*,
      struct scatterlist*,
      int,
      unsigned int*);
  struct rdma_hw_stats* (*alloc_hw_stats)(struct ib_device*, u8);
  int (*get_hw_stats)(struct ib_device*, struct rdma_hw_stats*, u8, int);
  int (*init_port)(struct ib_device*, u8, struct kobject*);
  int (*fill_res_mr_entry)(struct sk_buff*, struct ib_mr*);
  int (*fill_res_mr_entry_raw)(struct sk_buff*, struct ib_mr*);
  int (*fill_res_cq_entry)(struct sk_buff*, struct ib_cq*);
  int (*fill_res_cq_entry_raw)(struct sk_buff*, struct ib_cq*);
  int (*fill_res_qp_entry)(struct sk_buff*, struct ib_qp*);
  int (*fill_res_qp_entry_raw)(struct sk_buff*, struct ib_qp*);
  int (*fill_res_cm_id_entry)(struct sk_buff*, struct rdma_cm_id*);
  int (*enable_driver)(struct ib_device*);
  void (*dealloc_driver)(struct ib_device*);
  void (*iw_add_ref)(struct ib_qp*);
  void (*iw_rem_ref)(struct ib_qp*);
  struct ib_qp* (*iw_get_qp)(struct ib_device*, int);
  int (*iw_connect)(struct iw_cm_id*, struct iw_cm_conn_param*);
  int (*iw_accept)(struct iw_cm_id*, struct iw_cm_conn_param*);
  int (*iw_reject)(struct iw_cm_id*, const void*, u8);
  int (*iw_create_listen)(struct iw_cm_id*, int);
  int (*iw_destroy_listen)(struct iw_cm_id*);
  int (*counter_bind_qp)(struct rdma_counter*, struct ib_qp*);
  int (*counter_unbind_qp)(struct ib_qp*);
  int (*counter_dealloc)(struct rdma_counter*);
  struct rdma_hw_stats* (*counter_alloc_stats)(struct rdma_counter*);
  int (*counter_update_stats)(struct rdma_counter*);
  int (*fill_stat_mr_entry)(struct sk_buff*, struct ib_mr*);
  int (*query_ucontext)(struct ib_ucontext*, struct uverbs_attr_bundle*);
  size_t size_ib_ah;
  size_t size_ib_counters;
  size_t size_ib_cq;
  size_t size_ib_mw;
  size_t size_ib_pd;
  size_t size_ib_rwq_ind_table;
  size_t size_ib_srq;
  size_t size_ib_ucontext;
  size_t size_ib_xrcd;
};

struct ib_core_device {
  struct device dev;
  possible_net_t rdma_net;
  struct kobject* ports_kobj;
  struct list_head port_list;
  struct ib_device* owner;
};

enum ib_atomic_cap {
  IB_ATOMIC_NONE = 0,
  IB_ATOMIC_HCA = 1,
  IB_ATOMIC_GLOB = 2,
};

struct ib_odp_caps {
  uint64_t general_caps;
  struct {
    uint32_t rc_odp_caps;
    uint32_t uc_odp_caps;
    uint32_t ud_odp_caps;
    uint32_t xrc_odp_caps;
  } per_transport_caps;
};

struct ib_rss_caps {
  u32 supported_qpts;
  u32 max_rwq_indirection_tables;
  u32 max_rwq_indirection_table_size;
};

struct ib_tm_caps {
  u32 max_rndv_hdr_size;
  u32 max_num_tags;
  u32 flags;
  u32 max_ops;
  u32 max_sge;
};

struct ib_cq_caps {
  u16 max_cq_moderation_count;
  u16 max_cq_moderation_period;
};

struct ib_device_attr {
  u64 fw_ver;
  __be64 sys_image_guid;
  u64 max_mr_size;
  u64 page_size_cap;
  u32 vendor_id;
  u32 vendor_part_id;
  u32 hw_ver;
  int max_qp;
  int max_qp_wr;
  u64 device_cap_flags;
  int max_send_sge;
  int max_recv_sge;
  int max_sge_rd;
  int max_cq;
  int max_cqe;
  int max_mr;
  int max_pd;
  int max_qp_rd_atom;
  int max_ee_rd_atom;
  int max_res_rd_atom;
  int max_qp_init_rd_atom;
  int max_ee_init_rd_atom;
  enum ib_atomic_cap atomic_cap;
  enum ib_atomic_cap masked_atomic_cap;
  int max_ee;
  int max_rdd;
  int max_mw;
  int max_raw_ipv6_qp;
  int max_raw_ethy_qp;
  int max_mcast_grp;
  int max_mcast_qp_attach;
  int max_total_mcast_qp_attach;
  int max_ah;
  int max_srq;
  int max_srq_wr;
  int max_srq_sge;
  unsigned int max_fast_reg_page_list_len;
  unsigned int max_pi_fast_reg_page_list_len;
  u16 max_pkeys;
  u8 local_ca_ack_delay;
  int sig_prot_cap;
  int sig_guard_cap;
  struct ib_odp_caps odp_caps;
  uint64_t timestamp_mask;
  uint64_t hca_core_clock;
  struct ib_rss_caps rss_caps;
  u32 max_wq_type_rq;
  u32 raw_packet_caps;
  struct ib_tm_caps tm_caps;
  struct ib_cq_caps cq_caps;
  u64 max_dm_size;
  u32 max_sgl_rd;
};

struct rdma_restrack_root;

struct uapi_definition;

struct ib_port_data;

struct ib_device {
  struct device* dma_device;
  struct ib_device_ops ops;
  char name[64];
  struct callback_head callback_head;
  struct list_head event_handler_list;
  struct rw_semaphore event_handler_rwsem;
  spinlock_t qp_open_list_lock;
  struct rw_semaphore client_data_rwsem;
  struct xarray client_data;
  struct mutex unregistration_lock;
  rwlock_t cache_lock;
  struct ib_port_data* port_data;
  int num_comp_vectors;
  union {
    struct device dev;
    struct ib_core_device coredev;
  };
  const struct attribute_group* groups[3];
  u64 uverbs_cmd_mask;
  char node_desc[64];
  __be64 node_guid;
  u32 local_dma_lkey;
  u16 is_switch : 1;
  u16 kverbs_provider : 1;
  u16 use_cq_dim : 1;
  u8 node_type;
  u8 phys_port_cnt;
  struct ib_device_attr attrs;
  struct attribute_group* hw_stats_ag;
  struct rdma_hw_stats* hw_stats;
  u32 index;
  spinlock_t cq_pools_lock;
  struct list_head cq_pools[3];
  struct rdma_restrack_root* res;
  const struct uapi_definition* driver_def;
  refcount_t refcount;
  struct completion unreg_completion;
  struct work_struct unregistration_work;
  const struct rdma_link_ops* link_ops;
  struct mutex compat_devs_mutex;
  struct xarray compat_devs;
  char iw_ifname[16];
  u32 iw_driver_flags;
  u32 lag_flags;
};

enum ib_signature_type {
  IB_SIG_TYPE_NONE = 0,
  IB_SIG_TYPE_T10_DIF = 1,
};

enum ib_t10_dif_bg_type {
  IB_T10DIF_CRC = 0,
  IB_T10DIF_CSUM = 1,
};

struct ib_t10_dif_domain {
  enum ib_t10_dif_bg_type bg_type;
  u16 pi_interval;
  u16 bg;
  u16 app_tag;
  u32 ref_tag;
  bool ref_remap;
  bool app_escape;
  bool ref_escape;
  u16 apptag_check_mask;
};

struct ib_sig_domain {
  enum ib_signature_type sig_type;
  union {
    struct ib_t10_dif_domain dif;
  } sig;
};

struct ib_sig_attrs {
  u8 check_mask;
  struct ib_sig_domain mem;
  struct ib_sig_domain wire;
  int meta_length;
};

enum ib_sig_err_type {
  IB_SIG_BAD_GUARD = 0,
  IB_SIG_BAD_REFTAG = 1,
  IB_SIG_BAD_APPTAG = 2,
};

struct ib_sig_err {
  enum ib_sig_err_type err_type;
  u32 expected;
  u32 actual;
  u64 sig_err_offset;
  u32 key;
};

enum ib_uverbs_flow_action_esp_keymat {
  IB_UVERBS_FLOW_ACTION_ESP_KEYMAT_AES_GCM = 0,
};

struct ib_uverbs_flow_action_esp_keymat_aes_gcm {
  __u64 iv;
  __u32 iv_algo;
  __u32 salt;
  __u32 icv_len;
  __u32 key_len;
  __u32 aes_key[8];
};

enum ib_uverbs_flow_action_esp_replay {
  IB_UVERBS_FLOW_ACTION_ESP_REPLAY_NONE = 0,
  IB_UVERBS_FLOW_ACTION_ESP_REPLAY_BMP = 1,
};

struct ib_uverbs_flow_action_esp_replay_bmp {
  __u32 size;
};

enum ib_gid_type {
  IB_GID_TYPE_IB = 0,
  IB_GID_TYPE_ROCE = 1,
  IB_GID_TYPE_ROCE_UDP_ENCAP = 2,
  IB_GID_TYPE_SIZE = 3,
};

struct ib_gid_attr {
  struct net_device* ndev;
  struct ib_device* device;
  union ib_gid gid;
  enum ib_gid_type gid_type;
  u16 index;
  u8 port_num;
};

struct ib_cq_init_attr {
  unsigned int cqe;
  u32 comp_vector;
  u32 flags;
};

struct ib_dm_mr_attr {
  u64 length;
  u64 offset;
  u32 access_flags;
};

struct ib_dm_alloc_attr {
  u64 length;
  u32 alignment;
  u32 flags;
};

enum ib_mtu {
  IB_MTU_256___2 = 1,
  IB_MTU_512___2 = 2,
  IB_MTU_1024___2 = 3,
  IB_MTU_2048___2 = 4,
  IB_MTU_4096___2 = 5,
};

struct ib_port_attr {
  u64 subnet_prefix;
  enum ib_port_state state;
  enum ib_mtu max_mtu;
  enum ib_mtu active_mtu;
  u32 phys_mtu;
  int gid_tbl_len;
  unsigned int ip_gids : 1;
  u32 port_cap_flags;
  u32 max_msg_sz;
  u32 bad_pkey_cntr;
  u32 qkey_viol_cntr;
  u16 pkey_tbl_len;
  u32 sm_lid;
  u32 lid;
  u8 lmc;
  u8 max_vl_num;
  u8 sm_sl;
  u8 subnet_timeout;
  u8 init_type_reply;
  u8 active_width;
  u16 active_speed;
  u8 phys_state;
  u16 port_cap_flags2;
};

struct ib_device_modify {
  u64 sys_image_guid;
  char node_desc[64];
};

struct ib_port_modify {
  u32 set_port_cap_mask;
  u32 clr_port_cap_mask;
  u8 init_type;
};

enum ib_event_type {
  IB_EVENT_CQ_ERR = 0,
  IB_EVENT_QP_FATAL = 1,
  IB_EVENT_QP_REQ_ERR = 2,
  IB_EVENT_QP_ACCESS_ERR = 3,
  IB_EVENT_COMM_EST = 4,
  IB_EVENT_SQ_DRAINED = 5,
  IB_EVENT_PATH_MIG = 6,
  IB_EVENT_PATH_MIG_ERR = 7,
  IB_EVENT_DEVICE_FATAL = 8,
  IB_EVENT_PORT_ACTIVE = 9,
  IB_EVENT_PORT_ERR = 10,
  IB_EVENT_LID_CHANGE = 11,
  IB_EVENT_PKEY_CHANGE = 12,
  IB_EVENT_SM_CHANGE = 13,
  IB_EVENT_SRQ_ERR = 14,
  IB_EVENT_SRQ_LIMIT_REACHED = 15,
  IB_EVENT_QP_LAST_WQE_REACHED = 16,
  IB_EVENT_CLIENT_REREGISTER = 17,
  IB_EVENT_GID_CHANGE = 18,
  IB_EVENT_WQ_FATAL = 19,
};

struct ib_ucq_object;

typedef void (*ib_comp_handler)(struct ib_cq*, void*);

struct ib_event;

struct ib_cq {
  struct ib_device* device;
  struct ib_ucq_object* uobject;
  ib_comp_handler comp_handler;
  void (*event_handler)(struct ib_event*, void*);
  void* cq_context;
  int cqe;
  unsigned int cqe_used;
  atomic_t usecnt;
  enum ib_poll_context poll_ctx;
  struct ib_wc* wc;
  struct list_head pool_entry;
  union {
    struct irq_poll iop;
    struct work_struct work;
  };
  struct workqueue_struct* comp_wq;
  struct dim* dim;
  ktime_t timestamp;
  u8 interrupt : 1;
  u8 shared : 1;
  unsigned int comp_vector;
  struct rdma_restrack_entry res;
};

struct ib_uqp_object;

enum ib_qp_type {
  IB_QPT_SMI = 0,
  IB_QPT_GSI = 1,
  IB_QPT_RC = 2,
  IB_QPT_UC = 3,
  IB_QPT_UD = 4,
  IB_QPT_RAW_IPV6 = 5,
  IB_QPT_RAW_ETHERTYPE = 6,
  IB_QPT_RAW_PACKET = 8,
  IB_QPT_XRC_INI = 9,
  IB_QPT_XRC_TGT = 10,
  IB_QPT_MAX = 11,
  IB_QPT_DRIVER = 255,
  IB_QPT_RESERVED1 = 4096,
  IB_QPT_RESERVED2 = 4097,
  IB_QPT_RESERVED3 = 4098,
  IB_QPT_RESERVED4 = 4099,
  IB_QPT_RESERVED5 = 4100,
  IB_QPT_RESERVED6 = 4101,
  IB_QPT_RESERVED7 = 4102,
  IB_QPT_RESERVED8 = 4103,
  IB_QPT_RESERVED9 = 4104,
  IB_QPT_RESERVED10 = 4105,
};

struct ib_qp_security;

struct ib_qp {
  struct ib_device* device;
  struct ib_pd* pd;
  struct ib_cq* send_cq;
  struct ib_cq* recv_cq;
  spinlock_t mr_lock;
  int mrs_used;
  struct list_head rdma_mrs;
  struct list_head sig_mrs;
  struct ib_srq* srq;
  struct ib_xrcd* xrcd;
  struct list_head xrcd_list;
  atomic_t usecnt;
  struct list_head open_list;
  struct ib_qp* real_qp;
  struct ib_uqp_object* uobject;
  void (*event_handler)(struct ib_event*, void*);
  void* qp_context;
  const struct ib_gid_attr* av_sgid_attr;
  const struct ib_gid_attr* alt_path_sgid_attr;
  u32 qp_num;
  u32 max_write_sge;
  u32 max_read_sge;
  enum ib_qp_type qp_type;
  struct ib_rwq_ind_table* rwq_ind_tbl;
  struct ib_qp_security* qp_sec;
  u8 port;
  bool integrity_en;
  struct rdma_restrack_entry res;
  struct rdma_counter* counter;
};

struct ib_usrq_object;

enum ib_srq_type {
  IB_SRQT_BASIC = 0,
  IB_SRQT_XRC = 1,
  IB_SRQT_TM = 2,
};

struct ib_srq {
  struct ib_device* device;
  struct ib_pd* pd;
  struct ib_usrq_object* uobject;
  void (*event_handler)(struct ib_event*, void*);
  void* srq_context;
  enum ib_srq_type srq_type;
  atomic_t usecnt;
  struct {
    struct ib_cq* cq;
    union {
      struct {
        struct ib_xrcd* xrcd;
        u32 srq_num;
      } xrc;
    };
  } ext;
};

struct ib_uwq_object;

enum ib_wq_state {
  IB_WQS_RESET = 0,
  IB_WQS_RDY = 1,
  IB_WQS_ERR = 2,
};

enum ib_wq_type {
  IB_WQT_RQ = 0,
};

struct ib_wq {
  struct ib_device* device;
  struct ib_uwq_object* uobject;
  void* wq_context;
  void (*event_handler)(struct ib_event*, void*);
  struct ib_pd* pd;
  struct ib_cq* cq;
  u32 wq_num;
  enum ib_wq_state state;
  enum ib_wq_type wq_type;
  atomic_t usecnt;
};

struct ib_event {
  struct ib_device* device;
  union {
    struct ib_cq* cq;
    struct ib_qp* qp;
    struct ib_srq* srq;
    struct ib_wq* wq;
    u8 port_num;
  } element;
  enum ib_event_type event;
};

struct ib_global_route {
  const struct ib_gid_attr* sgid_attr;
  union ib_gid dgid;
  u32 flow_label;
  u8 sgid_index;
  u8 hop_limit;
  u8 traffic_class;
};

struct ib_grh {
  __be32 version_tclass_flow;
  __be16 paylen;
  u8 next_hdr;
  u8 hop_limit;
  union ib_gid sgid;
  union ib_gid dgid;
};

struct ib_mr_status {
  u32 fail_status;
  struct ib_sig_err sig_err;
};

struct rdma_ah_init_attr {
  struct rdma_ah_attr* ah_attr;
  u32 flags;
  struct net_device* xmit_slave;
};

enum rdma_ah_attr_type {
  RDMA_AH_ATTR_TYPE_UNDEFINED = 0,
  RDMA_AH_ATTR_TYPE_IB = 1,
  RDMA_AH_ATTR_TYPE_ROCE = 2,
  RDMA_AH_ATTR_TYPE_OPA = 3,
};

struct ib_ah_attr {
  u16 dlid;
  u8 src_path_bits;
};

struct roce_ah_attr {
  u8 dmac[6];
};

struct opa_ah_attr {
  u32 dlid;
  u8 src_path_bits;
  bool make_grd;
};

struct rdma_ah_attr {
  struct ib_global_route grh;
  u8 sl;
  u8 static_rate;
  u8 port_num;
  u8 ah_flags;
  enum rdma_ah_attr_type type;
  union {
    struct ib_ah_attr ib;
    struct roce_ah_attr roce;
    struct opa_ah_attr opa;
  };
};

enum ib_wc_status {
  IB_WC_SUCCESS = 0,
  IB_WC_LOC_LEN_ERR = 1,
  IB_WC_LOC_QP_OP_ERR = 2,
  IB_WC_LOC_EEC_OP_ERR = 3,
  IB_WC_LOC_PROT_ERR = 4,
  IB_WC_WR_FLUSH_ERR = 5,
  IB_WC_MW_BIND_ERR = 6,
  IB_WC_BAD_RESP_ERR = 7,
  IB_WC_LOC_ACCESS_ERR = 8,
  IB_WC_REM_INV_REQ_ERR = 9,
  IB_WC_REM_ACCESS_ERR = 10,
  IB_WC_REM_OP_ERR = 11,
  IB_WC_RETRY_EXC_ERR = 12,
  IB_WC_RNR_RETRY_EXC_ERR = 13,
  IB_WC_LOC_RDD_VIOL_ERR = 14,
  IB_WC_REM_INV_RD_REQ_ERR = 15,
  IB_WC_REM_ABORT_ERR = 16,
  IB_WC_INV_EECN_ERR = 17,
  IB_WC_INV_EEC_STATE_ERR = 18,
  IB_WC_FATAL_ERR = 19,
  IB_WC_RESP_TIMEOUT_ERR = 20,
  IB_WC_GENERAL_ERR = 21,
};

enum ib_wc_opcode {
  IB_WC_SEND = 0,
  IB_WC_RDMA_WRITE = 1,
  IB_WC_RDMA_READ = 2,
  IB_WC_COMP_SWAP = 3,
  IB_WC_FETCH_ADD = 4,
  IB_WC_BIND_MW = 5,
  IB_WC_LOCAL_INV = 6,
  IB_WC_LSO = 7,
  IB_WC_REG_MR = 8,
  IB_WC_MASKED_COMP_SWAP = 9,
  IB_WC_MASKED_FETCH_ADD = 10,
  IB_WC_RECV = 128,
  IB_WC_RECV_RDMA_WITH_IMM = 129,
};

struct ib_cqe {
  void (*done)(struct ib_cq*, struct ib_wc*);
};

struct ib_wc {
  union {
    u64 wr_id;
    struct ib_cqe* wr_cqe;
  };
  enum ib_wc_status status;
  enum ib_wc_opcode opcode;
  u32 vendor_err;
  u32 byte_len;
  struct ib_qp* qp;
  union {
    __be32 imm_data;
    u32 invalidate_rkey;
  } ex;
  u32 src_qp;
  u32 slid;
  int wc_flags;
  u16 pkey_index;
  u8 sl;
  u8 dlid_path_bits;
  u8 port_num;
  u8 smac[6];
  u16 vlan_id;
  u8 network_hdr_type;
};

struct ib_srq_attr {
  u32 max_wr;
  u32 max_sge;
  u32 srq_limit;
};

struct ib_xrcd {
  struct ib_device* device;
  atomic_t usecnt;
  struct inode* inode;
  struct rw_semaphore tgt_qps_rwsem;
  struct xarray tgt_qps;
};

struct ib_srq_init_attr {
  void (*event_handler)(struct ib_event*, void*);
  void* srq_context;
  struct ib_srq_attr attr;
  enum ib_srq_type srq_type;
  struct {
    struct ib_cq* cq;
    union {
      struct {
        struct ib_xrcd* xrcd;
      } xrc;
      struct {
        u32 max_num_tags;
      } tag_matching;
    };
  } ext;
};

struct ib_qp_cap {
  u32 max_send_wr;
  u32 max_recv_wr;
  u32 max_send_sge;
  u32 max_recv_sge;
  u32 max_inline_data;
  u32 max_rdma_ctxs;
};

enum ib_sig_type {
  IB_SIGNAL_ALL_WR = 0,
  IB_SIGNAL_REQ_WR = 1,
};

struct ib_qp_init_attr {
  void (*event_handler)(struct ib_event*, void*);
  void* qp_context;
  struct ib_cq* send_cq;
  struct ib_cq* recv_cq;
  struct ib_srq* srq;
  struct ib_xrcd* xrcd;
  struct ib_qp_cap cap;
  enum ib_sig_type sq_sig_type;
  enum ib_qp_type qp_type;
  u32 create_flags;
  u8 port_num;
  struct ib_rwq_ind_table* rwq_ind_tbl;
  u32 source_qpn;
};

struct ib_uobject;

struct ib_rwq_ind_table {
  struct ib_device* device;
  struct ib_uobject* uobject;
  atomic_t usecnt;
  u32 ind_tbl_num;
  u32 log_ind_tbl_size;
  struct ib_wq** ind_tbl;
};

enum ib_qp_state {
  IB_QPS_RESET = 0,
  IB_QPS_INIT = 1,
  IB_QPS_RTR = 2,
  IB_QPS_RTS = 3,
  IB_QPS_SQD = 4,
  IB_QPS_SQE = 5,
  IB_QPS_ERR = 6,
};

enum ib_mig_state {
  IB_MIG_MIGRATED = 0,
  IB_MIG_REARM = 1,
  IB_MIG_ARMED = 2,
};

enum ib_mw_type {
  IB_MW_TYPE_1 = 1,
  IB_MW_TYPE_2 = 2,
};

struct ib_qp_attr {
  enum ib_qp_state qp_state;
  enum ib_qp_state cur_qp_state;
  enum ib_mtu path_mtu;
  enum ib_mig_state path_mig_state;
  u32 qkey;
  u32 rq_psn;
  u32 sq_psn;
  u32 dest_qp_num;
  int qp_access_flags;
  struct ib_qp_cap cap;
  struct rdma_ah_attr ah_attr;
  struct rdma_ah_attr alt_ah_attr;
  u16 pkey_index;
  u16 alt_pkey_index;
  u8 en_sqd_async_notify;
  u8 sq_draining;
  u8 max_rd_atomic;
  u8 max_dest_rd_atomic;
  u8 min_rnr_timer;
  u8 port_num;
  u8 timeout;
  u8 retry_cnt;
  u8 rnr_retry;
  u8 alt_port_num;
  u8 alt_timeout;
  u32 rate_limit;
  struct net_device* xmit_slave;
};

enum ib_wr_opcode {
  IB_WR_RDMA_WRITE = 0,
  IB_WR_RDMA_WRITE_WITH_IMM = 1,
  IB_WR_SEND = 2,
  IB_WR_SEND_WITH_IMM = 3,
  IB_WR_RDMA_READ = 4,
  IB_WR_ATOMIC_CMP_AND_SWP = 5,
  IB_WR_ATOMIC_FETCH_AND_ADD = 6,
  IB_WR_BIND_MW = 8,
  IB_WR_LSO = 10,
  IB_WR_SEND_WITH_INV = 9,
  IB_WR_RDMA_READ_WITH_INV = 11,
  IB_WR_LOCAL_INV = 7,
  IB_WR_MASKED_ATOMIC_CMP_AND_SWP = 12,
  IB_WR_MASKED_ATOMIC_FETCH_AND_ADD = 13,
  IB_WR_REG_MR = 32,
  IB_WR_REG_MR_INTEGRITY = 33,
  IB_WR_RESERVED1 = 240,
  IB_WR_RESERVED2 = 241,
  IB_WR_RESERVED3 = 242,
  IB_WR_RESERVED4 = 243,
  IB_WR_RESERVED5 = 244,
  IB_WR_RESERVED6 = 245,
  IB_WR_RESERVED7 = 246,
  IB_WR_RESERVED8 = 247,
  IB_WR_RESERVED9 = 248,
  IB_WR_RESERVED10 = 249,
};

struct ib_sge {
  u64 addr;
  u32 length;
  u32 lkey;
};

struct ib_send_wr {
  struct ib_send_wr* next;
  union {
    u64 wr_id;
    struct ib_cqe* wr_cqe;
  };
  struct ib_sge* sg_list;
  int num_sge;
  enum ib_wr_opcode opcode;
  int send_flags;
  union {
    __be32 imm_data;
    u32 invalidate_rkey;
  } ex;
};

struct ib_ah {
  struct ib_device* device;
  struct ib_pd* pd;
  struct ib_uobject* uobject;
  const struct ib_gid_attr* sgid_attr;
  enum rdma_ah_attr_type type;
};

struct ib_mr {
  struct ib_device* device;
  struct ib_pd* pd;
  u32 lkey;
  u32 rkey;
  u64 iova;
  u64 length;
  unsigned int page_size;
  enum ib_mr_type type;
  bool need_inval;
  union {
    struct ib_uobject* uobject;
    struct list_head qp_entry;
  };
  struct ib_dm* dm;
  struct ib_sig_attrs* sig_attrs;
  struct rdma_restrack_entry res;
};

struct ib_recv_wr {
  struct ib_recv_wr* next;
  union {
    u64 wr_id;
    struct ib_cqe* wr_cqe;
  };
  struct ib_sge* sg_list;
  int num_sge;
};

struct ib_rdmacg_object {};

struct ib_uverbs_file;

struct ib_ucontext {
  struct ib_device* device;
  struct ib_uverbs_file* ufile;
  struct ib_rdmacg_object cg_obj;
  struct rdma_restrack_entry res;
  struct xarray mmap_xa;
};

struct uverbs_api_object;

struct ib_uobject {
  u64 user_handle;
  struct ib_uverbs_file* ufile;
  struct ib_ucontext* context;
  void* object;
  struct list_head list;
  struct ib_rdmacg_object cg_obj;
  int id;
  struct kref ref;
  atomic_t usecnt;
  struct callback_head rcu;
  const struct uverbs_api_object* uapi_object;
};

struct ib_udata {
  const void* inbuf;
  void* outbuf;
  size_t inlen;
  size_t outlen;
};

struct ib_pd {
  u32 local_dma_lkey;
  u32 flags;
  struct ib_device* device;
  struct ib_uobject* uobject;
  atomic_t usecnt;
  u32 unsafe_global_rkey;
  struct ib_mr* __internal_mr;
  struct rdma_restrack_entry res;
};

struct ib_wq_init_attr {
  void* wq_context;
  enum ib_wq_type wq_type;
  u32 max_wr;
  u32 max_sge;
  struct ib_cq* cq;
  void (*event_handler)(struct ib_event*, void*);
  u32 create_flags;
};

struct ib_wq_attr {
  enum ib_wq_state wq_state;
  enum ib_wq_state curr_wq_state;
  u32 flags;
  u32 flags_mask;
};

struct ib_rwq_ind_table_init_attr {
  u32 log_ind_tbl_size;
  struct ib_wq** ind_tbl;
};

enum port_pkey_state {
  IB_PORT_PKEY_NOT_VALID = 0,
  IB_PORT_PKEY_VALID = 1,
  IB_PORT_PKEY_LISTED = 2,
};

struct ib_port_pkey {
  enum port_pkey_state state;
  u16 pkey_index;
  u8 port_num;
  struct list_head qp_list;
  struct list_head to_error_list;
  struct ib_qp_security* sec;
};

struct ib_ports_pkeys;

struct ib_qp_security {
  struct ib_qp* qp;
  struct ib_device* dev;
  struct mutex mutex;
  struct ib_ports_pkeys* ports_pkeys;
  struct list_head shared_qp_list;
  void* security;
  bool destroying;
  atomic_t error_list_count;
  struct completion error_complete;
  int error_comps_pending;
};

struct ib_ports_pkeys {
  struct ib_port_pkey main;
  struct ib_port_pkey alt;
};

struct ib_dm {
  struct ib_device* device;
  u32 length;
  u32 flags;
  struct ib_uobject* uobject;
  atomic_t usecnt;
};

struct ib_mw {
  struct ib_device* device;
  struct ib_pd* pd;
  struct ib_uobject* uobject;
  u32 rkey;
  enum ib_mw_type type;
};

enum ib_flow_attr_type {
  IB_FLOW_ATTR_NORMAL = 0,
  IB_FLOW_ATTR_ALL_DEFAULT = 1,
  IB_FLOW_ATTR_MC_DEFAULT = 2,
  IB_FLOW_ATTR_SNIFFER = 3,
};

enum ib_flow_spec_type {
  IB_FLOW_SPEC_ETH = 32,
  IB_FLOW_SPEC_IB = 34,
  IB_FLOW_SPEC_IPV4 = 48,
  IB_FLOW_SPEC_IPV6 = 49,
  IB_FLOW_SPEC_ESP = 52,
  IB_FLOW_SPEC_TCP = 64,
  IB_FLOW_SPEC_UDP = 65,
  IB_FLOW_SPEC_VXLAN_TUNNEL = 80,
  IB_FLOW_SPEC_GRE = 81,
  IB_FLOW_SPEC_MPLS = 96,
  IB_FLOW_SPEC_INNER = 256,
  IB_FLOW_SPEC_ACTION_TAG = 4096,
  IB_FLOW_SPEC_ACTION_DROP = 4097,
  IB_FLOW_SPEC_ACTION_HANDLE = 4098,
  IB_FLOW_SPEC_ACTION_COUNT = 4099,
};

struct ib_flow_eth_filter {
  u8 dst_mac[6];
  u8 src_mac[6];
  __be16 ether_type;
  __be16 vlan_tag;
  u8 real_sz[0];
};

struct ib_flow_spec_eth {
  u32 type;
  u16 size;
  struct ib_flow_eth_filter val;
  struct ib_flow_eth_filter mask;
};

struct ib_flow_ib_filter {
  __be16 dlid;
  __u8 sl;
  u8 real_sz[0];
};

struct ib_flow_spec_ib {
  u32 type;
  u16 size;
  struct ib_flow_ib_filter val;
  struct ib_flow_ib_filter mask;
};

struct ib_flow_ipv4_filter {
  __be32 src_ip;
  __be32 dst_ip;
  u8 proto;
  u8 tos;
  u8 ttl;
  u8 flags;
  u8 real_sz[0];
};

struct ib_flow_spec_ipv4 {
  u32 type;
  u16 size;
  struct ib_flow_ipv4_filter val;
  struct ib_flow_ipv4_filter mask;
};

struct ib_flow_ipv6_filter {
  u8 src_ip[16];
  u8 dst_ip[16];
  __be32 flow_label;
  u8 next_hdr;
  u8 traffic_class;
  u8 hop_limit;
  u8 real_sz[0];
};

struct ib_flow_spec_ipv6 {
  u32 type;
  u16 size;
  struct ib_flow_ipv6_filter val;
  struct ib_flow_ipv6_filter mask;
};

struct ib_flow_tcp_udp_filter {
  __be16 dst_port;
  __be16 src_port;
  u8 real_sz[0];
};

struct ib_flow_spec_tcp_udp {
  u32 type;
  u16 size;
  struct ib_flow_tcp_udp_filter val;
  struct ib_flow_tcp_udp_filter mask;
};

struct ib_flow_tunnel_filter {
  __be32 tunnel_id;
  u8 real_sz[0];
};

struct ib_flow_spec_tunnel {
  u32 type;
  u16 size;
  struct ib_flow_tunnel_filter val;
  struct ib_flow_tunnel_filter mask;
};

struct ib_flow_esp_filter {
  __be32 spi;
  __be32 seq;
  u8 real_sz[0];
};

struct ib_flow_spec_esp {
  u32 type;
  u16 size;
  struct ib_flow_esp_filter val;
  struct ib_flow_esp_filter mask;
};

struct ib_flow_gre_filter {
  __be16 c_ks_res0_ver;
  __be16 protocol;
  __be32 key;
  u8 real_sz[0];
};

struct ib_flow_spec_gre {
  u32 type;
  u16 size;
  struct ib_flow_gre_filter val;
  struct ib_flow_gre_filter mask;
};

struct ib_flow_mpls_filter {
  __be32 tag;
  u8 real_sz[0];
};

struct ib_flow_spec_mpls {
  u32 type;
  u16 size;
  struct ib_flow_mpls_filter val;
  struct ib_flow_mpls_filter mask;
};

struct ib_flow_spec_action_tag {
  enum ib_flow_spec_type type;
  u16 size;
  u32 tag_id;
};

struct ib_flow_spec_action_drop {
  enum ib_flow_spec_type type;
  u16 size;
};

struct ib_flow_spec_action_handle {
  enum ib_flow_spec_type type;
  u16 size;
  struct ib_flow_action* act;
};

enum ib_flow_action_type {
  IB_FLOW_ACTION_UNSPECIFIED = 0,
  IB_FLOW_ACTION_ESP = 1,
};

struct ib_flow_action {
  struct ib_device* device;
  struct ib_uobject* uobject;
  enum ib_flow_action_type type;
  atomic_t usecnt;
};

struct ib_flow_spec_action_count {
  enum ib_flow_spec_type type;
  u16 size;
  struct ib_counters* counters;
};

struct ib_counters {
  struct ib_device* device;
  struct ib_uobject* uobject;
  atomic_t usecnt;
};

union ib_flow_spec {
  struct {
    u32 type;
    u16 size;
  };
  struct ib_flow_spec_eth eth;
  struct ib_flow_spec_ib ib;
  struct ib_flow_spec_ipv4 ipv4;
  struct ib_flow_spec_tcp_udp tcp_udp;
  struct ib_flow_spec_ipv6 ipv6;
  struct ib_flow_spec_tunnel tunnel;
  struct ib_flow_spec_esp esp;
  struct ib_flow_spec_gre gre;
  struct ib_flow_spec_mpls mpls;
  struct ib_flow_spec_action_tag flow_tag;
  struct ib_flow_spec_action_drop drop;
  struct ib_flow_spec_action_handle action;
  struct ib_flow_spec_action_count flow_count;
};

struct ib_flow_attr {
  enum ib_flow_attr_type type;
  u16 size;
  u16 priority;
  u32 flags;
  u8 num_of_specs;
  u8 port;
  union ib_flow_spec flows[0];
};

struct ib_flow {
  struct ib_qp* qp;
  struct ib_device* device;
  struct ib_uobject* uobject;
};

struct ib_flow_action_attrs_esp_keymats {
  enum ib_uverbs_flow_action_esp_keymat protocol;
  union {
    struct ib_uverbs_flow_action_esp_keymat_aes_gcm aes_gcm;
  } keymat;
};

struct ib_flow_action_attrs_esp_replays {
  enum ib_uverbs_flow_action_esp_replay protocol;
  union {
    struct ib_uverbs_flow_action_esp_replay_bmp bmp;
  } replay;
};

struct ib_flow_spec_list {
  struct ib_flow_spec_list* next;
  union ib_flow_spec spec;
};

struct ib_flow_action_attrs_esp {
  struct ib_flow_action_attrs_esp_keymats* keymat;
  struct ib_flow_action_attrs_esp_replays* replay;
  struct ib_flow_spec_list* encap;
  u32 esn;
  u32 spi;
  u32 seq;
  u32 tfc_pad;
  u64 flags;
  u64 hard_limit_pkts;
};

struct ib_pkey_cache;

struct ib_gid_table;

struct ib_port_cache {
  u64 subnet_prefix;
  struct ib_pkey_cache* pkey;
  struct ib_gid_table* gid;
  u8 lmc;
  enum ib_port_state port_state;
};

struct ib_port_immutable {
  int pkey_tbl_len;
  int gid_tbl_len;
  u32 core_cap_flags;
  u32 max_mad_size;
};

struct ib_port_data {
  struct ib_device* ib_dev;
  struct ib_port_immutable immutable;
  spinlock_t pkey_list_lock;
  struct list_head pkey_list;
  struct ib_port_cache cache;
  spinlock_t netdev_lock;
  struct net_device* netdev;
  struct hlist_node ndev_hash_link;
  struct rdma_port_counter port_counter;
  struct rdma_hw_stats* hw_stats;
};

struct rdma_netdev_alloc_params {
  size_t sizeof_priv;
  unsigned int txqs;
  unsigned int rxqs;
  void* param;
  int (*initialize_rdma_netdev)(
      struct ib_device*,
      u8,
      struct net_device*,
      void*);
};

struct ib_counters_read_attr {
  u64* counters_buff;
  u32 ncounters;
  u32 flags;
};

struct rdma_user_mmap_entry {
  struct kref ref;
  struct ib_ucontext* ucontext;
  long unsigned int start_pgoff;
  size_t npages;
  bool driver_removed;
};

struct mlx5_ifc_ipv4_layout_bits {
  u8 reserved_at_0[96];
  u8 ipv4[32];
};

struct mlx5_ifc_ipv6_layout_bits {
  u8 ipv6[128];
};

union mlx5_ifc_ipv6_layout_ipv4_layout_auto_bits {
  struct mlx5_ifc_ipv6_layout_bits ipv6_layout;
  struct mlx5_ifc_ipv4_layout_bits ipv4_layout;
  u8 reserved_at_0[128];
};

struct mlx5_ifc_fpga_shell_caps_bits {
  u8 max_num_qps[16];
  u8 reserved_at_10[8];
  u8 total_rcv_credits[8];
  u8 reserved_at_20[14];
  u8 qp_type[2];
  u8 reserved_at_30[5];
  u8 rae[1];
  u8 rwe[1];
  u8 rre[1];
  u8 reserved_at_38[4];
  u8 dc[1];
  u8 ud[1];
  u8 uc[1];
  u8 rc[1];
  u8 reserved_at_40[26];
  u8 log_ddr_size[6];
  u8 max_fpga_qp_msg_size[32];
  u8 reserved_at_80[384];
};

struct mlx5_ifc_fpga_cap_bits {
  u8 fpga_id[8];
  u8 fpga_device[24];
  u8 register_file_ver[32];
  u8 fpga_ctrl_modify[1];
  u8 reserved_at_41[5];
  u8 access_reg_query_mode[2];
  u8 reserved_at_48[6];
  u8 access_reg_modify_mode[2];
  u8 reserved_at_50[16];
  u8 reserved_at_60[32];
  u8 image_version[32];
  u8 image_date[32];
  u8 image_time[32];
  u8 shell_version[32];
  u8 reserved_at_100[128];
  struct mlx5_ifc_fpga_shell_caps_bits shell_caps;
  u8 reserved_at_380[8];
  u8 ieee_vendor_id[24];
  u8 sandbox_product_version[16];
  u8 sandbox_product_id[16];
  u8 sandbox_basic_caps[32];
  u8 reserved_at_3e0[16];
  u8 sandbox_extended_caps_len[16];
  u8 sandbox_extended_caps_addr[64];
  u8 fpga_ddr_start_addr[64];
  u8 fpga_cr_space_start_addr[64];
  u8 fpga_ddr_size[32];
  u8 fpga_cr_space_size[32];
  u8 reserved_at_500[768];
};

enum {
  MLX5_SET_HCA_CAP_OP_MOD_GENERAL_DEVICE = 0,
  MLX5_SET_HCA_CAP_OP_MOD_ODP = 2,
  MLX5_SET_HCA_CAP_OP_MOD_ATOMIC = 3,
  MLX5_SET_HCA_CAP_OP_MOD_ROCE = 4,
};

enum {
  MLX5_OBJ_TYPE_SW_ICM = 8,
};

enum {
  MLX5_CMD_OP_QUERY_HCA_CAP = 256,
  MLX5_CMD_OP_QUERY_ADAPTER = 257,
  MLX5_CMD_OP_INIT_HCA = 258,
  MLX5_CMD_OP_TEARDOWN_HCA = 259,
  MLX5_CMD_OP_ENABLE_HCA = 260,
  MLX5_CMD_OP_DISABLE_HCA = 261,
  MLX5_CMD_OP_QUERY_PAGES = 263,
  MLX5_CMD_OP_MANAGE_PAGES = 264,
  MLX5_CMD_OP_SET_HCA_CAP = 265,
  MLX5_CMD_OP_QUERY_ISSI = 266,
  MLX5_CMD_OP_SET_ISSI = 267,
  MLX5_CMD_OP_SET_DRIVER_VERSION = 269,
  MLX5_CMD_OP_QUERY_SF_PARTITION = 273,
  MLX5_CMD_OP_ALLOC_SF = 275,
  MLX5_CMD_OP_DEALLOC_SF = 276,
  MLX5_CMD_OP_CREATE_MKEY = 512,
  MLX5_CMD_OP_QUERY_MKEY = 513,
  MLX5_CMD_OP_DESTROY_MKEY = 514,
  MLX5_CMD_OP_QUERY_SPECIAL_CONTEXTS = 515,
  MLX5_CMD_OP_PAGE_FAULT_RESUME = 516,
  MLX5_CMD_OP_ALLOC_MEMIC = 517,
  MLX5_CMD_OP_DEALLOC_MEMIC = 518,
  MLX5_CMD_OP_CREATE_EQ = 769,
  MLX5_CMD_OP_DESTROY_EQ = 770,
  MLX5_CMD_OP_QUERY_EQ = 771,
  MLX5_CMD_OP_GEN_EQE = 772,
  MLX5_CMD_OP_CREATE_CQ = 1024,
  MLX5_CMD_OP_DESTROY_CQ = 1025,
  MLX5_CMD_OP_QUERY_CQ = 1026,
  MLX5_CMD_OP_MODIFY_CQ = 1027,
  MLX5_CMD_OP_CREATE_QP = 1280,
  MLX5_CMD_OP_DESTROY_QP = 1281,
  MLX5_CMD_OP_RST2INIT_QP = 1282,
  MLX5_CMD_OP_INIT2RTR_QP = 1283,
  MLX5_CMD_OP_RTR2RTS_QP = 1284,
  MLX5_CMD_OP_RTS2RTS_QP = 1285,
  MLX5_CMD_OP_SQERR2RTS_QP = 1286,
  MLX5_CMD_OP_2ERR_QP = 1287,
  MLX5_CMD_OP_2RST_QP = 1290,
  MLX5_CMD_OP_QUERY_QP = 1291,
  MLX5_CMD_OP_SQD_RTS_QP = 1292,
  MLX5_CMD_OP_INIT2INIT_QP = 1294,
  MLX5_CMD_OP_CREATE_PSV = 1536,
  MLX5_CMD_OP_DESTROY_PSV = 1537,
  MLX5_CMD_OP_CREATE_SRQ = 1792,
  MLX5_CMD_OP_DESTROY_SRQ = 1793,
  MLX5_CMD_OP_QUERY_SRQ = 1794,
  MLX5_CMD_OP_ARM_RQ = 1795,
  MLX5_CMD_OP_CREATE_XRC_SRQ = 1797,
  MLX5_CMD_OP_DESTROY_XRC_SRQ = 1798,
  MLX5_CMD_OP_QUERY_XRC_SRQ = 1799,
  MLX5_CMD_OP_ARM_XRC_SRQ = 1800,
  MLX5_CMD_OP_CREATE_DCT = 1808,
  MLX5_CMD_OP_DESTROY_DCT = 1809,
  MLX5_CMD_OP_DRAIN_DCT = 1810,
  MLX5_CMD_OP_QUERY_DCT = 1811,
  MLX5_CMD_OP_ARM_DCT_FOR_KEY_VIOLATION = 1812,
  MLX5_CMD_OP_CREATE_XRQ = 1815,
  MLX5_CMD_OP_DESTROY_XRQ = 1816,
  MLX5_CMD_OP_QUERY_XRQ = 1817,
  MLX5_CMD_OP_ARM_XRQ = 1818,
  MLX5_CMD_OP_QUERY_XRQ_DC_PARAMS_ENTRY = 1829,
  MLX5_CMD_OP_SET_XRQ_DC_PARAMS_ENTRY = 1830,
  MLX5_CMD_OP_QUERY_XRQ_ERROR_PARAMS = 1831,
  MLX5_CMD_OP_RELEASE_XRQ_ERROR = 1833,
  MLX5_CMD_OP_MODIFY_XRQ = 1834,
  MLX5_CMD_OP_QUERY_ESW_FUNCTIONS = 1856,
  MLX5_CMD_OP_QUERY_VPORT_STATE = 1872,
  MLX5_CMD_OP_MODIFY_VPORT_STATE = 1873,
  MLX5_CMD_OP_QUERY_ESW_VPORT_CONTEXT = 1874,
  MLX5_CMD_OP_MODIFY_ESW_VPORT_CONTEXT = 1875,
  MLX5_CMD_OP_QUERY_NIC_VPORT_CONTEXT = 1876,
  MLX5_CMD_OP_MODIFY_NIC_VPORT_CONTEXT = 1877,
  MLX5_CMD_OP_QUERY_ROCE_ADDRESS = 1888,
  MLX5_CMD_OP_SET_ROCE_ADDRESS = 1889,
  MLX5_CMD_OP_QUERY_HCA_VPORT_CONTEXT = 1890,
  MLX5_CMD_OP_MODIFY_HCA_VPORT_CONTEXT = 1891,
  MLX5_CMD_OP_QUERY_HCA_VPORT_GID = 1892,
  MLX5_CMD_OP_QUERY_HCA_VPORT_PKEY = 1893,
  MLX5_CMD_OP_QUERY_VNIC_ENV = 1903,
  MLX5_CMD_OP_QUERY_VPORT_COUNTER = 1904,
  MLX5_CMD_OP_ALLOC_Q_COUNTER = 1905,
  MLX5_CMD_OP_DEALLOC_Q_COUNTER = 1906,
  MLX5_CMD_OP_QUERY_Q_COUNTER = 1907,
  MLX5_CMD_OP_SET_MONITOR_COUNTER = 1908,
  MLX5_CMD_OP_ARM_MONITOR_COUNTER = 1909,
  MLX5_CMD_OP_SET_PP_RATE_LIMIT = 1920,
  MLX5_CMD_OP_QUERY_RATE_LIMIT = 1921,
  MLX5_CMD_OP_CREATE_SCHEDULING_ELEMENT = 1922,
  MLX5_CMD_OP_DESTROY_SCHEDULING_ELEMENT = 1923,
  MLX5_CMD_OP_QUERY_SCHEDULING_ELEMENT = 1924,
  MLX5_CMD_OP_MODIFY_SCHEDULING_ELEMENT = 1925,
  MLX5_CMD_OP_CREATE_QOS_PARA_VPORT = 1926,
  MLX5_CMD_OP_DESTROY_QOS_PARA_VPORT = 1927,
  MLX5_CMD_OP_ALLOC_PD = 2048,
  MLX5_CMD_OP_DEALLOC_PD = 2049,
  MLX5_CMD_OP_ALLOC_UAR = 2050,
  MLX5_CMD_OP_DEALLOC_UAR = 2051,
  MLX5_CMD_OP_CONFIG_INT_MODERATION = 2052,
  MLX5_CMD_OP_ACCESS_REG = 2053,
  MLX5_CMD_OP_ATTACH_TO_MCG = 2054,
  MLX5_CMD_OP_DETACH_FROM_MCG = 2055,
  MLX5_CMD_OP_GET_DROPPED_PACKET_LOG = 2058,
  MLX5_CMD_OP_MAD_IFC = 1293,
  MLX5_CMD_OP_QUERY_MAD_DEMUX = 2059,
  MLX5_CMD_OP_SET_MAD_DEMUX = 2060,
  MLX5_CMD_OP_NOP = 2061,
  MLX5_CMD_OP_ALLOC_XRCD = 2062,
  MLX5_CMD_OP_DEALLOC_XRCD = 2063,
  MLX5_CMD_OP_ALLOC_TRANSPORT_DOMAIN = 2070,
  MLX5_CMD_OP_DEALLOC_TRANSPORT_DOMAIN = 2071,
  MLX5_CMD_OP_QUERY_CONG_STATUS = 2082,
  MLX5_CMD_OP_MODIFY_CONG_STATUS = 2083,
  MLX5_CMD_OP_QUERY_CONG_PARAMS = 2084,
  MLX5_CMD_OP_MODIFY_CONG_PARAMS = 2085,
  MLX5_CMD_OP_QUERY_CONG_STATISTICS = 2086,
  MLX5_CMD_OP_ADD_VXLAN_UDP_DPORT = 2087,
  MLX5_CMD_OP_DELETE_VXLAN_UDP_DPORT = 2088,
  MLX5_CMD_OP_SET_L2_TABLE_ENTRY = 2089,
  MLX5_CMD_OP_QUERY_L2_TABLE_ENTRY = 2090,
  MLX5_CMD_OP_DELETE_L2_TABLE_ENTRY = 2091,
  MLX5_CMD_OP_SET_WOL_ROL = 2096,
  MLX5_CMD_OP_QUERY_WOL_ROL = 2097,
  MLX5_CMD_OP_CREATE_LAG = 2112,
  MLX5_CMD_OP_MODIFY_LAG = 2113,
  MLX5_CMD_OP_QUERY_LAG = 2114,
  MLX5_CMD_OP_DESTROY_LAG = 2115,
  MLX5_CMD_OP_CREATE_VPORT_LAG = 2116,
  MLX5_CMD_OP_DESTROY_VPORT_LAG = 2117,
  MLX5_CMD_OP_CREATE_TIR = 2304,
  MLX5_CMD_OP_MODIFY_TIR = 2305,
  MLX5_CMD_OP_DESTROY_TIR = 2306,
  MLX5_CMD_OP_QUERY_TIR = 2307,
  MLX5_CMD_OP_CREATE_SQ = 2308,
  MLX5_CMD_OP_MODIFY_SQ = 2309,
  MLX5_CMD_OP_DESTROY_SQ = 2310,
  MLX5_CMD_OP_QUERY_SQ = 2311,
  MLX5_CMD_OP_CREATE_RQ = 2312,
  MLX5_CMD_OP_MODIFY_RQ = 2313,
  MLX5_CMD_OP_SET_DELAY_DROP_PARAMS = 2320,
  MLX5_CMD_OP_DESTROY_RQ = 2314,
  MLX5_CMD_OP_QUERY_RQ = 2315,
  MLX5_CMD_OP_CREATE_RMP = 2316,
  MLX5_CMD_OP_MODIFY_RMP = 2317,
  MLX5_CMD_OP_DESTROY_RMP = 2318,
  MLX5_CMD_OP_QUERY_RMP = 2319,
  MLX5_CMD_OP_CREATE_TIS = 2322,
  MLX5_CMD_OP_MODIFY_TIS = 2323,
  MLX5_CMD_OP_DESTROY_TIS = 2324,
  MLX5_CMD_OP_QUERY_TIS = 2325,
  MLX5_CMD_OP_CREATE_RQT = 2326,
  MLX5_CMD_OP_MODIFY_RQT = 2327,
  MLX5_CMD_OP_DESTROY_RQT = 2328,
  MLX5_CMD_OP_QUERY_RQT = 2329,
  MLX5_CMD_OP_SET_FLOW_TABLE_ROOT = 2351,
  MLX5_CMD_OP_CREATE_FLOW_TABLE = 2352,
  MLX5_CMD_OP_DESTROY_FLOW_TABLE = 2353,
  MLX5_CMD_OP_QUERY_FLOW_TABLE = 2354,
  MLX5_CMD_OP_CREATE_FLOW_GROUP = 2355,
  MLX5_CMD_OP_DESTROY_FLOW_GROUP = 2356,
  MLX5_CMD_OP_QUERY_FLOW_GROUP = 2357,
  MLX5_CMD_OP_SET_FLOW_TABLE_ENTRY = 2358,
  MLX5_CMD_OP_QUERY_FLOW_TABLE_ENTRY = 2359,
  MLX5_CMD_OP_DELETE_FLOW_TABLE_ENTRY = 2360,
  MLX5_CMD_OP_ALLOC_FLOW_COUNTER = 2361,
  MLX5_CMD_OP_DEALLOC_FLOW_COUNTER = 2362,
  MLX5_CMD_OP_QUERY_FLOW_COUNTER = 2363,
  MLX5_CMD_OP_MODIFY_FLOW_TABLE = 2364,
  MLX5_CMD_OP_ALLOC_PACKET_REFORMAT_CONTEXT = 2365,
  MLX5_CMD_OP_DEALLOC_PACKET_REFORMAT_CONTEXT = 2366,
  MLX5_CMD_OP_QUERY_PACKET_REFORMAT_CONTEXT = 2367,
  MLX5_CMD_OP_ALLOC_MODIFY_HEADER_CONTEXT = 2368,
  MLX5_CMD_OP_DEALLOC_MODIFY_HEADER_CONTEXT = 2369,
  MLX5_CMD_OP_QUERY_MODIFY_HEADER_CONTEXT = 2370,
  MLX5_CMD_OP_FPGA_CREATE_QP = 2400,
  MLX5_CMD_OP_FPGA_MODIFY_QP = 2401,
  MLX5_CMD_OP_FPGA_QUERY_QP = 2402,
  MLX5_CMD_OP_FPGA_DESTROY_QP = 2403,
  MLX5_CMD_OP_FPGA_QUERY_QP_COUNTERS = 2404,
  MLX5_CMD_OP_CREATE_GENERAL_OBJECT = 2560,
  MLX5_CMD_OP_MODIFY_GENERAL_OBJECT = 2561,
  MLX5_CMD_OP_QUERY_GENERAL_OBJECT = 2562,
  MLX5_CMD_OP_DESTROY_GENERAL_OBJECT = 2563,
  MLX5_CMD_OP_CREATE_UCTX = 2564,
  MLX5_CMD_OP_DESTROY_UCTX = 2566,
  MLX5_CMD_OP_CREATE_UMEM = 2568,
  MLX5_CMD_OP_DESTROY_UMEM = 2570,
  MLX5_CMD_OP_SYNC_STEERING = 2816,
  MLX5_CMD_OP_QUERY_VHCA_STATE = 2829,
  MLX5_CMD_OP_MODIFY_VHCA_STATE = 2830,
  MLX5_CMD_OP_MAX = 2831,
};

struct mlx5_ifc_flow_table_fields_supported_bits {
  u8 outer_dmac[1];
  u8 outer_smac[1];
  u8 outer_ether_type[1];
  u8 outer_ip_version[1];
  u8 outer_first_prio[1];
  u8 outer_first_cfi[1];
  u8 outer_first_vid[1];
  u8 outer_ipv4_ttl[1];
  u8 outer_second_prio[1];
  u8 outer_second_cfi[1];
  u8 outer_second_vid[1];
  u8 reserved_at_b[1];
  u8 outer_sip[1];
  u8 outer_dip[1];
  u8 outer_frag[1];
  u8 outer_ip_protocol[1];
  u8 outer_ip_ecn[1];
  u8 outer_ip_dscp[1];
  u8 outer_udp_sport[1];
  u8 outer_udp_dport[1];
  u8 outer_tcp_sport[1];
  u8 outer_tcp_dport[1];
  u8 outer_tcp_flags[1];
  u8 outer_gre_protocol[1];
  u8 outer_gre_key[1];
  u8 outer_vxlan_vni[1];
  u8 outer_geneve_vni[1];
  u8 outer_geneve_oam[1];
  u8 outer_geneve_protocol_type[1];
  u8 outer_geneve_opt_len[1];
  u8 reserved_at_1e[1];
  u8 source_eswitch_port[1];
  u8 inner_dmac[1];
  u8 inner_smac[1];
  u8 inner_ether_type[1];
  u8 inner_ip_version[1];
  u8 inner_first_prio[1];
  u8 inner_first_cfi[1];
  u8 inner_first_vid[1];
  u8 reserved_at_27[1];
  u8 inner_second_prio[1];
  u8 inner_second_cfi[1];
  u8 inner_second_vid[1];
  u8 reserved_at_2b[1];
  u8 inner_sip[1];
  u8 inner_dip[1];
  u8 inner_frag[1];
  u8 inner_ip_protocol[1];
  u8 inner_ip_ecn[1];
  u8 inner_ip_dscp[1];
  u8 inner_udp_sport[1];
  u8 inner_udp_dport[1];
  u8 inner_tcp_sport[1];
  u8 inner_tcp_dport[1];
  u8 inner_tcp_flags[1];
  u8 reserved_at_37[9];
  u8 geneve_tlv_option_0_data[1];
  u8 reserved_at_41[4];
  u8 outer_first_mpls_over_udp[4];
  u8 outer_first_mpls_over_gre[4];
  u8 inner_first_mpls[4];
  u8 outer_first_mpls[4];
  u8 reserved_at_55[2];
  u8 outer_esp_spi[1];
  u8 reserved_at_58[2];
  u8 bth_dst_qp[1];
  u8 reserved_at_5b[5];
  u8 reserved_at_60[24];
  u8 metadata_reg_c_7[1];
  u8 metadata_reg_c_6[1];
  u8 metadata_reg_c_5[1];
  u8 metadata_reg_c_4[1];
  u8 metadata_reg_c_3[1];
  u8 metadata_reg_c_2[1];
  u8 metadata_reg_c_1[1];
  u8 metadata_reg_c_0[1];
};

struct mlx5_ifc_flow_table_prop_layout_bits {
  u8 ft_support[1];
  u8 reserved_at_1[1];
  u8 flow_counter[1];
  u8 flow_modify_en[1];
  u8 modify_root[1];
  u8 identified_miss_table_mode[1];
  u8 flow_table_modify[1];
  u8 reformat[1];
  u8 decap[1];
  u8 reserved_at_9[1];
  u8 pop_vlan[1];
  u8 push_vlan[1];
  u8 reserved_at_c[1];
  u8 pop_vlan_2[1];
  u8 push_vlan_2[1];
  u8 reformat_and_vlan_action[1];
  u8 reserved_at_10[1];
  u8 sw_owner[1];
  u8 reformat_l3_tunnel_to_l2[1];
  u8 reformat_l2_to_l3_tunnel[1];
  u8 reformat_and_modify_action[1];
  u8 ignore_flow_level[1];
  u8 reserved_at_16[1];
  u8 table_miss_action_domain[1];
  u8 termination_table[1];
  u8 reformat_and_fwd_to_table[1];
  u8 reserved_at_1a[2];
  u8 ipsec_encrypt[1];
  u8 ipsec_decrypt[1];
  u8 sw_owner_v2[1];
  u8 reserved_at_1f[1];
  u8 termination_table_raw_traffic[1];
  u8 reserved_at_21[1];
  u8 log_max_ft_size[6];
  u8 log_max_modify_header_context[8];
  u8 max_modify_header_actions[8];
  u8 max_ft_level[8];
  u8 reserved_at_40[32];
  u8 reserved_at_60[24];
  u8 log_max_ft_num[8];
  u8 reserved_at_80[16];
  u8 log_max_flow_counter[8];
  u8 log_max_destination[8];
  u8 reserved_at_a0[24];
  u8 log_max_flow[8];
  u8 reserved_at_c0[64];
  struct mlx5_ifc_flow_table_fields_supported_bits ft_field_support;
  struct mlx5_ifc_flow_table_fields_supported_bits ft_field_bitmask_support;
};

struct mlx5_ifc_odp_per_transport_service_cap_bits {
  u8 send[1];
  u8 receive[1];
  u8 write[1];
  u8 read[1];
  u8 atomic[1];
  u8 srq_receive[1];
  u8 reserved_at_6[26];
};

struct mlx5_ifc_fte_match_set_lyr_2_4_bits {
  u8 smac_47_16[32];
  u8 smac_15_0[16];
  u8 ethertype[16];
  u8 dmac_47_16[32];
  u8 dmac_15_0[16];
  u8 first_prio[3];
  u8 first_cfi[1];
  u8 first_vid[12];
  u8 ip_protocol[8];
  u8 ip_dscp[6];
  u8 ip_ecn[2];
  u8 cvlan_tag[1];
  u8 svlan_tag[1];
  u8 frag[1];
  u8 ip_version[4];
  u8 tcp_flags[9];
  u8 tcp_sport[16];
  u8 tcp_dport[16];
  u8 reserved_at_c0[24];
  u8 ttl_hoplimit[8];
  u8 udp_sport[16];
  u8 udp_dport[16];
  union mlx5_ifc_ipv6_layout_ipv4_layout_auto_bits src_ipv4_src_ipv6;
  union mlx5_ifc_ipv6_layout_ipv4_layout_auto_bits dst_ipv4_dst_ipv6;
};

struct mlx5_ifc_nvgre_key_bits {
  u8 hi[24];
  u8 lo[8];
};

union mlx5_ifc_gre_key_bits {
  struct mlx5_ifc_nvgre_key_bits nvgre;
  u8 key[32];
};

struct mlx5_ifc_fte_match_set_misc_bits {
  u8 gre_c_present[1];
  u8 reserved_at_1[1];
  u8 gre_k_present[1];
  u8 gre_s_present[1];
  u8 source_vhca_port[4];
  u8 source_sqn[24];
  u8 source_eswitch_owner_vhca_id[16];
  u8 source_port[16];
  u8 outer_second_prio[3];
  u8 outer_second_cfi[1];
  u8 outer_second_vid[12];
  u8 inner_second_prio[3];
  u8 inner_second_cfi[1];
  u8 inner_second_vid[12];
  u8 outer_second_cvlan_tag[1];
  u8 inner_second_cvlan_tag[1];
  u8 outer_second_svlan_tag[1];
  u8 inner_second_svlan_tag[1];
  u8 reserved_at_64[12];
  u8 gre_protocol[16];
  union mlx5_ifc_gre_key_bits gre_key;
  u8 vxlan_vni[24];
  u8 reserved_at_b8[8];
  u8 geneve_vni[24];
  u8 reserved_at_d8[7];
  u8 geneve_oam[1];
  u8 reserved_at_e0[12];
  u8 outer_ipv6_flow_label[20];
  u8 reserved_at_100[12];
  u8 inner_ipv6_flow_label[20];
  u8 reserved_at_120[10];
  u8 geneve_opt_len[6];
  u8 geneve_protocol_type[16];
  u8 reserved_at_140[8];
  u8 bth_dst_qp[24];
  u8 reserved_at_160[32];
  u8 outer_esp_spi[32];
  u8 reserved_at_1a0[96];
};

struct mlx5_ifc_fte_match_mpls_bits {
  u8 mpls_label[20];
  u8 mpls_exp[3];
  u8 mpls_s_bos[1];
  u8 mpls_ttl[8];
};

struct mlx5_ifc_fte_match_set_misc2_bits {
  struct mlx5_ifc_fte_match_mpls_bits outer_first_mpls;
  struct mlx5_ifc_fte_match_mpls_bits inner_first_mpls;
  struct mlx5_ifc_fte_match_mpls_bits outer_first_mpls_over_gre;
  struct mlx5_ifc_fte_match_mpls_bits outer_first_mpls_over_udp;
  u8 metadata_reg_c_7[32];
  u8 metadata_reg_c_6[32];
  u8 metadata_reg_c_5[32];
  u8 metadata_reg_c_4[32];
  u8 metadata_reg_c_3[32];
  u8 metadata_reg_c_2[32];
  u8 metadata_reg_c_1[32];
  u8 metadata_reg_c_0[32];
  u8 metadata_reg_a[32];
  u8 reserved_at_1a0[96];
};

struct mlx5_ifc_fte_match_set_misc3_bits {
  u8 inner_tcp_seq_num[32];
  u8 outer_tcp_seq_num[32];
  u8 inner_tcp_ack_num[32];
  u8 outer_tcp_ack_num[32];
  u8 reserved_at_80[8];
  u8 outer_vxlan_gpe_vni[24];
  u8 outer_vxlan_gpe_next_protocol[8];
  u8 outer_vxlan_gpe_flags[8];
  u8 reserved_at_b0[16];
  u8 icmp_header_data[32];
  u8 icmpv6_header_data[32];
  u8 icmp_type[8];
  u8 icmp_code[8];
  u8 icmpv6_type[8];
  u8 icmpv6_code[8];
  u8 geneve_tlv_option_0_data[32];
  u8 reserved_at_140[192];
};

struct mlx5_ifc_fte_match_set_misc4_bits {
  u8 prog_sample_field_value_0[32];
  u8 prog_sample_field_id_0[32];
  u8 prog_sample_field_value_1[32];
  u8 prog_sample_field_id_1[32];
  u8 prog_sample_field_value_2[32];
  u8 prog_sample_field_id_2[32];
  u8 prog_sample_field_value_3[32];
  u8 prog_sample_field_id_3[32];
  u8 reserved_at_100[256];
};

struct mlx5_ifc_flow_table_nic_cap_bits {
  u8 nic_rx_multi_path_tirs[1];
  u8 nic_rx_multi_path_tirs_fts[1];
  u8 allow_sniffer_and_nic_rx_shared_tir[1];
  u8 reserved_at_3[4];
  u8 sw_owner_reformat_supported[1];
  u8 reserved_at_8[24];
  u8 encap_general_header[1];
  u8 reserved_at_21[10];
  u8 log_max_packet_reformat_context[5];
  u8 reserved_at_30[6];
  u8 max_encap_header_size[10];
  u8 reserved_at_40[448];
  struct mlx5_ifc_flow_table_prop_layout_bits flow_table_properties_nic_receive;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_nic_receive_rdma;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_nic_receive_sniffer;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_nic_transmit;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_nic_transmit_rdma;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_nic_transmit_sniffer;
  u8 reserved_at_e00[4608];
  u8 sw_steering_nic_rx_action_drop_icm_address[64];
  u8 sw_steering_nic_tx_action_drop_icm_address[64];
  u8 sw_steering_nic_tx_action_allow_icm_address[64];
  u8 reserved_at_20c0[24384];
};

struct mlx5_ifc_flow_table_eswitch_cap_bits {
  u8 fdb_to_vport_reg_c_id[8];
  u8 reserved_at_8[13];
  u8 fdb_modify_header_fwd_to_table[1];
  u8 reserved_at_16[1];
  u8 flow_source[1];
  u8 reserved_at_18[2];
  u8 multi_fdb_encap[1];
  u8 egress_acl_forward_to_vport[1];
  u8 fdb_multi_path_to_table[1];
  u8 reserved_at_1d[3];
  u8 reserved_at_20[480];
  struct mlx5_ifc_flow_table_prop_layout_bits flow_table_properties_nic_esw_fdb;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_esw_acl_ingress;
  struct mlx5_ifc_flow_table_prop_layout_bits
      flow_table_properties_esw_acl_egress;
  u8 reserved_at_800[4096];
  u8 sw_steering_fdb_action_drop_icm_address_rx[64];
  u8 sw_steering_fdb_action_drop_icm_address_tx[64];
  u8 sw_steering_uplink_icm_address_rx[64];
  u8 sw_steering_uplink_icm_address_tx[64];
  u8 reserved_at_1900[26368];
};

struct mlx5_ifc_e_switch_cap_bits {
  u8 vport_svlan_strip[1];
  u8 vport_cvlan_strip[1];
  u8 vport_svlan_insert[1];
  u8 vport_cvlan_insert_if_not_exist[1];
  u8 vport_cvlan_insert_overwrite[1];
  u8 reserved_at_5[2];
  u8 esw_shared_ingress_acl[1];
  u8 esw_uplink_ingress_acl[1];
  u8 root_ft_on_other_esw[1];
  u8 reserved_at_a[15];
  u8 esw_functions_changed[1];
  u8 reserved_at_1a[1];
  u8 ecpf_vport_exists[1];
  u8 counter_eswitch_affinity[1];
  u8 merged_eswitch[1];
  u8 nic_vport_node_guid_modify[1];
  u8 nic_vport_port_guid_modify[1];
  u8 vxlan_encap_decap[1];
  u8 nvgre_encap_decap[1];
  u8 reserved_at_22[1];
  u8 log_max_fdb_encap_uplink[5];
  u8 reserved_at_21[3];
  u8 log_max_packet_reformat_context[5];
  u8 reserved_2b[6];
  u8 max_encap_header_size[10];
  u8 reserved_at_40[11];
  u8 log_max_esw_sf[5];
  u8 esw_sf_base_id[16];
  u8 reserved_at_60[1952];
};

struct mlx5_ifc_qos_cap_bits {
  u8 packet_pacing[1];
  u8 esw_scheduling[1];
  u8 esw_bw_share[1];
  u8 esw_rate_limit[1];
  u8 reserved_at_4[1];
  u8 packet_pacing_burst_bound[1];
  u8 packet_pacing_typical_size[1];
  u8 reserved_at_7[1];
  u8 nic_sq_scheduling[1];
  u8 nic_bw_share[1];
  u8 nic_rate_limit[1];
  u8 packet_pacing_uid[1];
  u8 reserved_at_c[20];
  u8 reserved_at_20[11];
  u8 log_max_qos_nic_queue_group[5];
  u8 reserved_at_30[16];
  u8 packet_pacing_max_rate[32];
  u8 packet_pacing_min_rate[32];
  u8 reserved_at_80[16];
  u8 packet_pacing_rate_table_size[16];
  u8 esw_element_type[16];
  u8 esw_tsar_type[16];
  u8 reserved_at_c0[16];
  u8 max_qos_para_vport[16];
  u8 max_tsar_bw_share[32];
  u8 reserved_at_100[1792];
};

struct mlx5_ifc_debug_cap_bits {
  u8 core_dump_general[1];
  u8 core_dump_qp[1];
  u8 reserved_at_2[7];
  u8 resource_dump[1];
  u8 reserved_at_a[22];
  u8 reserved_at_20[2];
  u8 stall_detect[1];
  u8 reserved_at_23[29];
  u8 reserved_at_40[1984];
};

struct mlx5_ifc_per_protocol_networking_offload_caps_bits {
  u8 csum_cap[1];
  u8 vlan_cap[1];
  u8 lro_cap[1];
  u8 lro_psh_flag[1];
  u8 lro_time_stamp[1];
  u8 reserved_at_5[2];
  u8 wqe_vlan_insert[1];
  u8 self_lb_en_modifiable[1];
  u8 reserved_at_9[2];
  u8 max_lso_cap[5];
  u8 multi_pkt_send_wqe[2];
  u8 wqe_inline_mode[2];
  u8 rss_ind_tbl_cap[4];
  u8 reg_umr_sq[1];
  u8 scatter_fcs[1];
  u8 enhanced_multi_pkt_send_wqe[1];
  u8 tunnel_lso_const_out_ip_id[1];
  u8 reserved_at_1c[2];
  u8 tunnel_stateless_gre[1];
  u8 tunnel_stateless_vxlan[1];
  u8 swp[1];
  u8 swp_csum[1];
  u8 swp_lso[1];
  u8 cqe_checksum_full[1];
  u8 tunnel_stateless_geneve_tx[1];
  u8 tunnel_stateless_mpls_over_udp[1];
  u8 tunnel_stateless_mpls_over_gre[1];
  u8 tunnel_stateless_vxlan_gpe[1];
  u8 tunnel_stateless_ipv4_over_vxlan[1];
  u8 tunnel_stateless_ip_over_ip[1];
  u8 insert_trailer[1];
  u8 reserved_at_2b[1];
  u8 tunnel_stateless_ip_over_ip_rx[1];
  u8 tunnel_stateless_ip_over_ip_tx[1];
  u8 reserved_at_2e[2];
  u8 max_vxlan_udp_ports[8];
  u8 reserved_at_38[6];
  u8 max_geneve_opt_len[1];
  u8 tunnel_stateless_geneve_rx[1];
  u8 reserved_at_40[16];
  u8 lro_min_mss_size[16];
  u8 reserved_at_60[288];
  u8 lro_timer_supported_periods[128];
  u8 reserved_at_200[1536];
};

struct mlx5_ifc_roce_cap_bits {
  u8 roce_apm[1];
  u8 reserved_at_1[3];
  u8 sw_r_roce_src_udp_port[1];
  u8 reserved_at_5[25];
  u8 qp_ts_format[2];
  u8 reserved_at_20[96];
  u8 reserved_at_80[12];
  u8 l3_type[4];
  u8 reserved_at_90[8];
  u8 roce_version[8];
  u8 reserved_at_a0[16];
  u8 r_roce_dest_udp_port[16];
  u8 r_roce_max_src_udp_port[16];
  u8 r_roce_min_src_udp_port[16];
  u8 reserved_at_e0[16];
  u8 roce_address_table_size[16];
  u8 reserved_at_100[1792];
};

struct mlx5_ifc_device_mem_cap_bits {
  u8 memic[1];
  u8 reserved_at_1[31];
  u8 reserved_at_20[11];
  u8 log_min_memic_alloc_size[5];
  u8 reserved_at_30[8];
  u8 log_max_memic_addr_alignment[8];
  u8 memic_bar_start_addr[64];
  u8 memic_bar_size[32];
  u8 max_memic_size[32];
  u8 steering_sw_icm_start_address[64];
  u8 reserved_at_100[8];
  u8 log_header_modify_sw_icm_size[8];
  u8 reserved_at_110[2];
  u8 log_sw_icm_alloc_granularity[6];
  u8 log_steering_sw_icm_size[8];
  u8 reserved_at_120[32];
  u8 header_modify_sw_icm_start_address[64];
  u8 reserved_at_180[1664];
};

struct mlx5_ifc_virtio_emulation_cap_bits {
  u8 desc_tunnel_offload_type[1];
  u8 eth_frame_offload_type[1];
  u8 virtio_version_1_0[1];
  u8 device_features_bits_mask[13];
  u8 event_mode[8];
  u8 virtio_queue_type[8];
  u8 max_tunnel_desc[16];
  u8 reserved_at_30[3];
  u8 log_doorbell_stride[5];
  u8 reserved_at_38[3];
  u8 log_doorbell_bar_size[5];
  u8 doorbell_bar_offset[64];
  u8 max_emulated_devices[8];
  u8 max_num_virtio_queues[24];
  u8 reserved_at_a0[96];
  u8 umem_1_buffer_param_a[32];
  u8 umem_1_buffer_param_b[32];
  u8 umem_2_buffer_param_a[32];
  u8 umem_2_buffer_param_b[32];
  u8 umem_3_buffer_param_a[32];
  u8 umem_3_buffer_param_b[32];
  u8 reserved_at_1c0[1600];
};

struct mlx5_ifc_atomic_caps_bits {
  u8 reserved_at_0[64];
  u8 atomic_req_8B_endianness_mode[2];
  u8 reserved_at_42[4];
  u8 supported_atomic_req_8B_endianness_mode_1[1];
  u8 reserved_at_47[25];
  u8 reserved_at_60[32];
  u8 reserved_at_80[16];
  u8 atomic_operations[16];
  u8 reserved_at_a0[16];
  u8 atomic_size_qp[16];
  u8 reserved_at_c0[16];
  u8 atomic_size_dc[16];
  u8 reserved_at_e0[1824];
};

struct mlx5_ifc_odp_cap_bits {
  u8 reserved_at_0[64];
  u8 sig[1];
  u8 reserved_at_41[31];
  u8 reserved_at_60[32];
  struct mlx5_ifc_odp_per_transport_service_cap_bits rc_odp_caps;
  struct mlx5_ifc_odp_per_transport_service_cap_bits uc_odp_caps;
  struct mlx5_ifc_odp_per_transport_service_cap_bits ud_odp_caps;
  struct mlx5_ifc_odp_per_transport_service_cap_bits xrc_odp_caps;
  struct mlx5_ifc_odp_per_transport_service_cap_bits dc_odp_caps;
  u8 reserved_at_120[1760];
};

struct mlx5_ifc_calc_op {
  u8 reserved_at_0[16];
  u8 reserved_at_10[9];
  u8 op_swap_endianness[1];
  u8 op_min[1];
  u8 op_xor[1];
  u8 op_or[1];
  u8 op_and[1];
  u8 op_max[1];
  u8 op_add[1];
};

struct mlx5_ifc_vector_calc_cap_bits {
  u8 calc_matrix[1];
  u8 reserved_at_1[31];
  u8 reserved_at_20[8];
  u8 max_vec_count[8];
  u8 reserved_at_30[13];
  u8 max_chunk_size[3];
  struct mlx5_ifc_calc_op calc0;
  struct mlx5_ifc_calc_op calc1;
  struct mlx5_ifc_calc_op calc2;
  struct mlx5_ifc_calc_op calc3;
  u8 reserved_at_c0[1824];
};

struct mlx5_ifc_tls_cap_bits {
  u8 tls_1_2_aes_gcm_128[1];
  u8 tls_1_3_aes_gcm_128[1];
  u8 tls_1_2_aes_gcm_256[1];
  u8 tls_1_3_aes_gcm_256[1];
  u8 reserved_at_4[28];
  u8 reserved_at_20[2016];
};

enum {
  MLX5_CAP_PORT_TYPE_IB = 0,
  MLX5_CAP_PORT_TYPE_ETH = 1,
};

struct mlx5_ifc_cmd_hca_cap_bits {
  u8 reserved_at_0[31];
  u8 vhca_resource_manager[1];
  u8 reserved_at_20[3];
  u8 event_on_vhca_state_teardown_request[1];
  u8 event_on_vhca_state_in_use[1];
  u8 event_on_vhca_state_active[1];
  u8 event_on_vhca_state_allocated[1];
  u8 event_on_vhca_state_invalid[1];
  u8 reserved_at_28[8];
  u8 vhca_id[16];
  u8 reserved_at_40[64];
  u8 log_max_srq_sz[8];
  u8 log_max_qp_sz[8];
  u8 event_cap[1];
  u8 reserved_at_91[7];
  u8 prio_tag_required[1];
  u8 reserved_at_99[2];
  u8 log_max_qp[5];
  u8 reserved_at_a0[3];
  u8 ece_support[1];
  u8 reserved_at_a4[5];
  u8 reg_c_preserve[1];
  u8 reserved_at_aa[1];
  u8 log_max_srq[5];
  u8 reserved_at_b0[1];
  u8 uplink_follow[1];
  u8 ts_cqe_to_dest_cqn[1];
  u8 reserved_at_b3[13];
  u8 max_sgl_for_optimized_performance[8];
  u8 log_max_cq_sz[8];
  u8 relaxed_ordering_write_umr[1];
  u8 relaxed_ordering_read_umr[1];
  u8 reserved_at_d2[7];
  u8 virtio_net_device_emualtion_manager[1];
  u8 virtio_blk_device_emualtion_manager[1];
  u8 log_max_cq[5];
  u8 log_max_eq_sz[8];
  u8 relaxed_ordering_write[1];
  u8 relaxed_ordering_read[1];
  u8 log_max_mkey[6];
  u8 reserved_at_f0[8];
  u8 dump_fill_mkey[1];
  u8 reserved_at_f9[2];
  u8 fast_teardown[1];
  u8 log_max_eq[4];
  u8 max_indirection[8];
  u8 fixed_buffer_size[1];
  u8 log_max_mrw_sz[7];
  u8 force_teardown[1];
  u8 reserved_at_111[1];
  u8 log_max_bsf_list_size[6];
  u8 umr_extended_translation_offset[1];
  u8 null_mkey[1];
  u8 log_max_klm_list_size[6];
  u8 reserved_at_120[10];
  u8 log_max_ra_req_dc[6];
  u8 reserved_at_130[10];
  u8 log_max_ra_res_dc[6];
  u8 reserved_at_140[6];
  u8 release_all_pages[1];
  u8 reserved_at_147[2];
  u8 roce_accl[1];
  u8 log_max_ra_req_qp[6];
  u8 reserved_at_150[10];
  u8 log_max_ra_res_qp[6];
  u8 end_pad[1];
  u8 cc_query_allowed[1];
  u8 cc_modify_allowed[1];
  u8 start_pad[1];
  u8 cache_line_128byte[1];
  u8 reserved_at_165[4];
  u8 rts2rts_qp_counters_set_id[1];
  u8 reserved_at_16a[2];
  u8 vnic_env_int_rq_oob[1];
  u8 sbcam_reg[1];
  u8 reserved_at_16e[1];
  u8 qcam_reg[1];
  u8 gid_table_size[16];
  u8 out_of_seq_cnt[1];
  u8 vport_counters[1];
  u8 retransmission_q_counters[1];
  u8 debug[1];
  u8 modify_rq_counter_set_id[1];
  u8 rq_delay_drop[1];
  u8 max_qp_cnt[10];
  u8 pkey_table_size[16];
  u8 vport_group_manager[1];
  u8 vhca_group_manager[1];
  u8 ib_virt[1];
  u8 eth_virt[1];
  u8 vnic_env_queue_counters[1];
  u8 ets[1];
  u8 nic_flow_table[1];
  u8 eswitch_manager[1];
  u8 device_memory[1];
  u8 mcam_reg[1];
  u8 pcam_reg[1];
  u8 local_ca_ack_delay[5];
  u8 port_module_event[1];
  u8 enhanced_error_q_counters[1];
  u8 ports_check[1];
  u8 reserved_at_1b3[1];
  u8 disable_link_up[1];
  u8 beacon_led[1];
  u8 port_type[2];
  u8 num_ports[8];
  u8 reserved_at_1c0[1];
  u8 pps[1];
  u8 pps_modify[1];
  u8 log_max_msg[5];
  u8 reserved_at_1c8[4];
  u8 max_tc[4];
  u8 temp_warn_event[1];
  u8 dcbx[1];
  u8 general_notification_event[1];
  u8 reserved_at_1d3[2];
  u8 fpga[1];
  u8 rol_s[1];
  u8 rol_g[1];
  u8 reserved_at_1d8[1];
  u8 wol_s[1];
  u8 wol_g[1];
  u8 wol_a[1];
  u8 wol_b[1];
  u8 wol_m[1];
  u8 wol_u[1];
  u8 wol_p[1];
  u8 stat_rate_support[16];
  u8 reserved_at_1f0[1];
  u8 pci_sync_for_fw_update_event[1];
  u8 reserved_at_1f2[6];
  u8 init2_lag_tx_port_affinity[1];
  u8 reserved_at_1fa[3];
  u8 cqe_version[4];
  u8 compact_address_vector[1];
  u8 striding_rq[1];
  u8 reserved_at_202[1];
  u8 ipoib_enhanced_offloads[1];
  u8 ipoib_basic_offloads[1];
  u8 reserved_at_205[1];
  u8 repeated_block_disabled[1];
  u8 umr_modify_entity_size_disabled[1];
  u8 umr_modify_atomic_disabled[1];
  u8 umr_indirect_mkey_disabled[1];
  u8 umr_fence[2];
  u8 dc_req_scat_data_cqe[1];
  u8 reserved_at_20d[2];
  u8 drain_sigerr[1];
  u8 cmdif_checksum[2];
  u8 sigerr_cqe[1];
  u8 reserved_at_213[1];
  u8 wq_signature[1];
  u8 sctr_data_cqe[1];
  u8 reserved_at_216[1];
  u8 sho[1];
  u8 tph[1];
  u8 rf[1];
  u8 dct[1];
  u8 qos[1];
  u8 eth_net_offloads[1];
  u8 roce[1];
  u8 atomic[1];
  u8 reserved_at_21f[1];
  u8 cq_oi[1];
  u8 cq_resize[1];
  u8 cq_moderation[1];
  u8 reserved_at_223[3];
  u8 cq_eq_remap[1];
  u8 pg[1];
  u8 block_lb_mc[1];
  u8 reserved_at_229[1];
  u8 scqe_break_moderation[1];
  u8 cq_period_start_from_cqe[1];
  u8 cd[1];
  u8 reserved_at_22d[1];
  u8 apm[1];
  u8 vector_calc[1];
  u8 umr_ptr_rlky[1];
  u8 imaicl[1];
  u8 qp_packet_based[1];
  u8 reserved_at_233[3];
  u8 qkv[1];
  u8 pkv[1];
  u8 set_deth_sqpn[1];
  u8 reserved_at_239[3];
  u8 xrc[1];
  u8 ud[1];
  u8 uc[1];
  u8 rc[1];
  u8 uar_4k[1];
  u8 reserved_at_241[9];
  u8 uar_sz[6];
  u8 reserved_at_250[8];
  u8 log_pg_sz[8];
  u8 bf[1];
  u8 driver_version[1];
  u8 pad_tx_eth_packet[1];
  u8 reserved_at_263[3];
  u8 mkey_by_name[1];
  u8 reserved_at_267[4];
  u8 log_bf_reg_size[5];
  u8 reserved_at_270[6];
  u8 lag_dct[2];
  u8 lag_tx_port_affinity[1];
  u8 lag_native_fdb_selection[1];
  u8 reserved_at_27a[1];
  u8 lag_master[1];
  u8 num_lag_ports[4];
  u8 reserved_at_280[16];
  u8 max_wqe_sz_sq[16];
  u8 reserved_at_2a0[16];
  u8 max_wqe_sz_rq[16];
  u8 max_flow_counter_31_16[16];
  u8 max_wqe_sz_sq_dc[16];
  u8 reserved_at_2e0[7];
  u8 max_qp_mcg[25];
  u8 reserved_at_300[16];
  u8 flow_counter_bulk_alloc[8];
  u8 log_max_mcg[8];
  u8 reserved_at_320[3];
  u8 log_max_transport_domain[5];
  u8 reserved_at_328[3];
  u8 log_max_pd[5];
  u8 reserved_at_330[11];
  u8 log_max_xrcd[5];
  u8 nic_receive_steering_discard[1];
  u8 receive_discard_vport_down[1];
  u8 transmit_discard_vport_down[1];
  u8 reserved_at_343[5];
  u8 log_max_flow_counter_bulk[8];
  u8 max_flow_counter_15_0[16];
  u8 reserved_at_360[3];
  u8 log_max_rq[5];
  u8 reserved_at_368[3];
  u8 log_max_sq[5];
  u8 reserved_at_370[3];
  u8 log_max_tir[5];
  u8 reserved_at_378[3];
  u8 log_max_tis[5];
  u8 basic_cyclic_rcv_wqe[1];
  u8 reserved_at_381[2];
  u8 log_max_rmp[5];
  u8 reserved_at_388[3];
  u8 log_max_rqt[5];
  u8 reserved_at_390[3];
  u8 log_max_rqt_size[5];
  u8 reserved_at_398[3];
  u8 log_max_tis_per_sq[5];
  u8 ext_stride_num_range[1];
  u8 reserved_at_3a1[2];
  u8 log_max_stride_sz_rq[5];
  u8 reserved_at_3a8[3];
  u8 log_min_stride_sz_rq[5];
  u8 reserved_at_3b0[3];
  u8 log_max_stride_sz_sq[5];
  u8 reserved_at_3b8[3];
  u8 log_min_stride_sz_sq[5];
  u8 hairpin[1];
  u8 reserved_at_3c1[2];
  u8 log_max_hairpin_queues[5];
  u8 reserved_at_3c8[3];
  u8 log_max_hairpin_wq_data_sz[5];
  u8 reserved_at_3d0[3];
  u8 log_max_hairpin_num_packets[5];
  u8 reserved_at_3d8[3];
  u8 log_max_wq_sz[5];
  u8 nic_vport_change_event[1];
  u8 disable_local_lb_uc[1];
  u8 disable_local_lb_mc[1];
  u8 log_min_hairpin_wq_data_sz[5];
  u8 reserved_at_3e8[2];
  u8 vhca_state[1];
  u8 log_max_vlan_list[5];
  u8 reserved_at_3f0[3];
  u8 log_max_current_mc_list[5];
  u8 reserved_at_3f8[3];
  u8 log_max_current_uc_list[5];
  u8 general_obj_types[64];
  u8 sq_ts_format[2];
  u8 rq_ts_format[2];
  u8 steering_format_version[4];
  u8 create_qp_start_hint[24];
  u8 reserved_at_460[3];
  u8 log_max_uctx[5];
  u8 reserved_at_468[2];
  u8 ipsec_offload[1];
  u8 log_max_umem[5];
  u8 max_num_eqs[16];
  u8 reserved_at_480[1];
  u8 tls_tx[1];
  u8 tls_rx[1];
  u8 log_max_l2_table[5];
  u8 reserved_at_488[8];
  u8 log_uar_page_sz[16];
  u8 reserved_at_4a0[32];
  u8 device_frequency_mhz[32];
  u8 device_frequency_khz[32];
  u8 reserved_at_500[32];
  u8 num_of_uars_per_page[32];
  u8 flex_parser_protocols[32];
  u8 max_geneve_tlv_options[8];
  u8 reserved_at_568[3];
  u8 max_geneve_tlv_option_data_len[5];
  u8 reserved_at_570[16];
  u8 reserved_at_580[51];
  u8 log_max_dek[5];
  u8 reserved_at_5b8[4];
  u8 mini_cqe_resp_stride_index[1];
  u8 cqe_128_always[1];
  u8 cqe_compression_128[1];
  u8 cqe_compression[1];
  u8 cqe_compression_timeout[16];
  u8 cqe_compression_max_num[16];
  u8 reserved_at_5e0[16];
  u8 tag_matching[1];
  u8 rndv_offload_rc[1];
  u8 rndv_offload_dc[1];
  u8 log_tag_matching_list_sz[5];
  u8 reserved_at_5f8[3];
  u8 log_max_xrq[5];
  u8 affiliate_nic_vport_criteria[8];
  u8 native_port_num[8];
  u8 num_vhca_ports[8];
  u8 reserved_at_618[6];
  u8 sw_owner_id[1];
  u8 reserved_at_61f[1];
  u8 max_num_of_monitor_counters[16];
  u8 num_ppcnt_monitor_counters[16];
  u8 max_num_sf[16];
  u8 num_q_monitor_counters[16];
  u8 reserved_at_660[32];
  u8 sf[1];
  u8 sf_set_partition[1];
  u8 reserved_at_682[1];
  u8 log_max_sf[5];
  u8 apu[1];
  u8 reserved_at_689[7];
  u8 log_min_sf_size[8];
  u8 max_num_sf_partitions[8];
  u8 uctx_cap[32];
  u8 reserved_at_6c0[4];
  u8 flex_parser_id_geneve_tlv_option_0[4];
  u8 flex_parser_id_icmp_dw1[4];
  u8 flex_parser_id_icmp_dw0[4];
  u8 flex_parser_id_icmpv6_dw1[4];
  u8 flex_parser_id_icmpv6_dw0[4];
  u8 flex_parser_id_outer_first_mpls_over_gre[4];
  u8 flex_parser_id_outer_first_mpls_over_udp_label[4];
  u8 reserved_at_6e0[16];
  u8 sf_base_id[16];
  u8 reserved_at_700[128];
  u8 vhca_tunnel_commands[64];
  u8 reserved_at_7c0[64];
};

enum mlx5_flow_destination_type {
  MLX5_FLOW_DESTINATION_TYPE_VPORT = 0,
  MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE = 1,
  MLX5_FLOW_DESTINATION_TYPE_TIR = 2,
  MLX5_FLOW_DESTINATION_TYPE_FLOW_SAMPLER = 6,
  MLX5_FLOW_DESTINATION_TYPE_PORT = 153,
  MLX5_FLOW_DESTINATION_TYPE_COUNTER = 256,
  MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE_NUM = 257,
};

enum mlx5_flow_table_miss_action {
  MLX5_FLOW_TABLE_MISS_ACTION_DEF = 0,
  MLX5_FLOW_TABLE_MISS_ACTION_FWD = 1,
  MLX5_FLOW_TABLE_MISS_ACTION_SWITCH_DOMAIN = 2,
};

struct mlx5_ifc_fte_match_param_bits {
  struct mlx5_ifc_fte_match_set_lyr_2_4_bits outer_headers;
  struct mlx5_ifc_fte_match_set_misc_bits misc_parameters;
  struct mlx5_ifc_fte_match_set_lyr_2_4_bits inner_headers;
  struct mlx5_ifc_fte_match_set_misc2_bits misc_parameters_2;
  struct mlx5_ifc_fte_match_set_misc3_bits misc_parameters_3;
  struct mlx5_ifc_fte_match_set_misc4_bits misc_parameters_4;
  u8 reserved_at_c00[1024];
};

union mlx5_ifc_hca_cap_union_bits {
  struct mlx5_ifc_cmd_hca_cap_bits cmd_hca_cap;
  struct mlx5_ifc_odp_cap_bits odp_cap;
  struct mlx5_ifc_atomic_caps_bits atomic_caps;
  struct mlx5_ifc_roce_cap_bits roce_cap;
  struct mlx5_ifc_per_protocol_networking_offload_caps_bits
      per_protocol_networking_offload_caps;
  struct mlx5_ifc_flow_table_nic_cap_bits flow_table_nic_cap;
  struct mlx5_ifc_flow_table_eswitch_cap_bits flow_table_eswitch_cap;
  struct mlx5_ifc_e_switch_cap_bits e_switch_cap;
  struct mlx5_ifc_vector_calc_cap_bits vector_calc_cap;
  struct mlx5_ifc_qos_cap_bits qos_cap;
  struct mlx5_ifc_debug_cap_bits debug_cap;
  struct mlx5_ifc_fpga_cap_bits fpga_cap;
  struct mlx5_ifc_tls_cap_bits tls_cap;
  struct mlx5_ifc_device_mem_cap_bits device_mem_cap;
  struct mlx5_ifc_virtio_emulation_cap_bits virtio_emulation_cap;
  u8 reserved_at_0[32768];
};

enum {
  MLX5_SQC_STATE_RST = 0,
  MLX5_SQC_STATE_RDY = 1,
  MLX5_SQC_STATE_ERR = 3,
};

enum {
  MLX5_RQC_STATE_RST = 0,
  MLX5_RQC_STATE_RDY = 1,
  MLX5_RQC_STATE_ERR = 3,
};

struct mlx5_ifc_set_issi_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[16];
  u8 current_issi[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_set_hca_cap_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 reserved_at_60[32];
  union mlx5_ifc_hca_cap_union_bits capability;
};

struct mlx5_ifc_query_issi_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[16];
  u8 current_issi[16];
  u8 reserved_at_60[160];
  u8 reserved_at_100[608];
  u8 supported_issi_dw0[32];
};

struct mlx5_ifc_query_issi_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_set_driver_version_in_bits {
  u8 opcode[16];
  u8 reserved_0[16];
  u8 reserved_1[16];
  u8 op_mod[16];
  u8 reserved_2[64];
  u8 driver_version[512];
};

struct mlx5_ifc_query_hca_cap_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_enable_hca_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 embedded_cpu_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_disable_hca_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 embedded_cpu_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 reserved_at_60[32];
};

enum {
  MLX5_GENERAL_OBJECT_TYPE_ENCRYPTION_KEY_TYPE_TLS = 1,
  MLX5_GENERAL_OBJECT_TYPE_ENCRYPTION_KEY_TYPE_IPSEC = 2,
};

enum {
  MLX5_MAX_COMMANDS = 32,
  MLX5_CMD_DATA_BLOCK_SIZE = 512,
  MLX5_PCI_CMD_XPORT = 7,
  MLX5_MKEY_BSF_OCTO_SIZE = 4,
  MLX5_MAX_PSVS = 4,
};

enum {
  MLX5_INLINE_SEG = 2147483648,
};

enum {
  MLX5_MIN_PKEY_TABLE_SIZE = 128,
  MLX5_MAX_LOG_PKEY_TABLE = 5,
};

enum {
  MLX5_ADAPTER_PAGE_SHIFT = 12,
  MLX5_ADAPTER_PAGE_SIZE = 4096,
};

enum {
  MLX5_EVENT_QUEUE_TYPE_QP = 0,
  MLX5_EVENT_QUEUE_TYPE_RQ = 1,
  MLX5_EVENT_QUEUE_TYPE_SQ = 2,
  MLX5_EVENT_QUEUE_TYPE_DCT = 6,
};

enum mlx5_event {
  MLX5_EVENT_TYPE_NOTIFY_ANY = 0,
  MLX5_EVENT_TYPE_COMP = 0,
  MLX5_EVENT_TYPE_PATH_MIG = 1,
  MLX5_EVENT_TYPE_COMM_EST = 2,
  MLX5_EVENT_TYPE_SQ_DRAINED = 3,
  MLX5_EVENT_TYPE_SRQ_LAST_WQE = 19,
  MLX5_EVENT_TYPE_SRQ_RQ_LIMIT = 20,
  MLX5_EVENT_TYPE_CQ_ERROR = 4,
  MLX5_EVENT_TYPE_WQ_CATAS_ERROR = 5,
  MLX5_EVENT_TYPE_PATH_MIG_FAILED = 7,
  MLX5_EVENT_TYPE_WQ_INVAL_REQ_ERROR = 16,
  MLX5_EVENT_TYPE_WQ_ACCESS_ERROR = 17,
  MLX5_EVENT_TYPE_SRQ_CATAS_ERROR = 18,
  MLX5_EVENT_TYPE_INTERNAL_ERROR = 8,
  MLX5_EVENT_TYPE_PORT_CHANGE = 9,
  MLX5_EVENT_TYPE_GPIO_EVENT = 21,
  MLX5_EVENT_TYPE_PORT_MODULE_EVENT = 22,
  MLX5_EVENT_TYPE_TEMP_WARN_EVENT = 23,
  MLX5_EVENT_TYPE_XRQ_ERROR = 24,
  MLX5_EVENT_TYPE_REMOTE_CONFIG = 25,
  MLX5_EVENT_TYPE_GENERAL_EVENT = 34,
  MLX5_EVENT_TYPE_MONITOR_COUNTER = 36,
  MLX5_EVENT_TYPE_PPS_EVENT = 37,
  MLX5_EVENT_TYPE_DB_BF_CONGESTION = 26,
  MLX5_EVENT_TYPE_STALL_EVENT = 27,
  MLX5_EVENT_TYPE_CMD = 10,
  MLX5_EVENT_TYPE_PAGE_REQUEST = 11,
  MLX5_EVENT_TYPE_PAGE_FAULT = 12,
  MLX5_EVENT_TYPE_NIC_VPORT_CHANGE = 13,
  MLX5_EVENT_TYPE_ESW_FUNCTIONS_CHANGED = 14,
  MLX5_EVENT_TYPE_VHCA_STATE_CHANGE = 15,
  MLX5_EVENT_TYPE_DCT_DRAINED = 28,
  MLX5_EVENT_TYPE_DCT_KEY_VIOLATION = 29,
  MLX5_EVENT_TYPE_FPGA_ERROR = 32,
  MLX5_EVENT_TYPE_FPGA_QP_ERROR = 33,
  MLX5_EVENT_TYPE_DEVICE_TRACER = 38,
  MLX5_EVENT_TYPE_MAX = 256,
};

enum {
  MLX5_DEV_CAP_FLAG_XRC = 8,
  MLX5_DEV_CAP_FLAG_BAD_PKEY_CNTR = 256,
  MLX5_DEV_CAP_FLAG_BAD_QKEY_CNTR = 512,
  MLX5_DEV_CAP_FLAG_APM = 131072,
  MLX5_DEV_CAP_FLAG_ATOMIC = 262144,
  MLX5_DEV_CAP_FLAG_BLOCK_MCAST = 8388608,
  MLX5_DEV_CAP_FLAG_ON_DMND_PG = 16777216,
  MLX5_DEV_CAP_FLAG_CQ_MODER = 536870912,
  MLX5_DEV_CAP_FLAG_RESIZE_CQ = 1073741824,
  MLX5_DEV_CAP_FLAG_DCT = 0,
  MLX5_DEV_CAP_FLAG_SIG_HAND_OVER = 0,
  MLX5_DEV_CAP_FLAG_CMDIF_CSUM = 0,
};

enum {
  MLX5_ROCE_VERSION_1 = 0,
  MLX5_ROCE_VERSION_2 = 2,
};

enum {
  MLX5_CAP_OFF_CMDIF_CSUM = 46,
};

struct mlx5_cmd_layout {
  u8 type;
  u8 rsvd0[3];
  __be32 inlen;
  __be64 in_ptr;
  __be32 in[4];
  __be32 out[4];
  __be64 out_ptr;
  __be32 outlen;
  u8 token;
  u8 sig;
  u8 rsvd1;
  u8 status_own;
};

struct health_buffer {
  __be32 assert_var[5];
  __be32 rsvd0[3];
  __be32 assert_exit_ptr;
  __be32 assert_callra;
  __be32 rsvd1[2];
  __be32 fw_ver;
  __be32 hw_id;
  __be32 rfr;
  u8 irisc_index;
  u8 synd;
  __be16 ext_synd;
};

struct mlx5_init_seg {
  __be32 fw_rev;
  __be32 cmdif_rev_fw_sub;
  __be32 rsvd0[2];
  __be32 cmdq_addr_h;
  __be32 cmdq_addr_l_sz;
  __be32 cmd_dbell;
  __be32 rsvd1[120];
  __be32 initializing;
  struct health_buffer health;
  __be32 rsvd2[880];
  __be32 internal_timer_h;
  __be32 internal_timer_l;
  __be32 rsvd3[2];
  __be32 health_counter;
  __be32 rsvd4[11];
  __be32 real_time_h;
  __be32 real_time_l;
  __be32 rsvd5[1006];
  __be64 ieee1588_clk;
  __be32 ieee1588_clk_type;
  __be32 clr_intx;
};

struct mlx5_eqe_comp {
  __be32 reserved[6];
  __be32 cqn;
};

struct mlx5_eqe_qp_srq {
  __be32 reserved1[5];
  u8 type;
  u8 reserved2[3];
  __be32 qp_srq_n;
};

struct mlx5_eqe_cq_err {
  __be32 cqn;
  u8 reserved1[7];
  u8 syndrome;
};

struct mlx5_eqe_xrq_err {
  __be32 reserved1[5];
  __be32 type_xrqn;
  __be32 reserved2;
};

struct mlx5_eqe_port_state {
  u8 reserved0[8];
  u8 port;
};

struct mlx5_eqe_gpio {
  __be32 reserved0[2];
  __be64 gpio_event;
};

struct mlx5_eqe_congestion {
  u8 type;
  u8 rsvd0;
  u8 congestion_level;
};

struct mlx5_eqe_stall_vl {
  u8 rsvd0[3];
  u8 port_vl;
};

struct mlx5_eqe_cmd {
  __be32 vector;
  __be32 rsvd[6];
};

struct mlx5_eqe_page_req {
  __be16 ec_function;
  __be16 func_id;
  __be32 num_pages;
  __be32 rsvd1[5];
};

struct mlx5_eqe_page_fault {
  __be32 bytes_committed;
  union {
    struct {
      u16 reserved1;
      __be16 wqe_index;
      u16 reserved2;
      __be16 packet_length;
      __be32 token;
      u8 reserved4[8];
      __be32 pftype_wq;
    } wqe;
    struct {
      __be32 r_key;
      u16 reserved1;
      __be16 packet_length;
      __be32 rdma_op_len;
      __be64 rdma_va;
      __be32 pftype_token;
    } __attribute__((packed)) rdma;
  };
} __attribute__((packed));

struct mlx5_eqe_vport_change {
  u8 rsvd0[2];
  __be16 vport_num;
  __be32 rsvd1[6];
};

struct mlx5_eqe_port_module {
  u8 reserved_at_0[1];
  u8 module;
  u8 reserved_at_2[1];
  u8 module_status;
  u8 reserved_at_4[2];
  u8 error_type;
};

struct mlx5_eqe_pps {
  u8 rsvd0[3];
  u8 pin;
  u8 rsvd1[4];
  union {
    struct {
      __be32 time_sec;
      __be32 time_nsec;
    };
    struct {
      __be64 time_stamp;
    };
  };
  u8 rsvd2[12];
} __attribute__((packed));

struct mlx5_eqe_dct {
  __be32 reserved[6];
  __be32 dctn;
};

struct mlx5_eqe_temp_warning {
  __be64 sensor_warning_msb;
  __be64 sensor_warning_lsb;
};

struct mlx5_eqe_sync_fw_update {
  u8 reserved_at_0[3];
  u8 sync_rst_state;
};

struct mlx5_eqe_vhca_state {
  __be16 ec_function;
  __be16 function_id;
};

union ev_data {
  __be32 raw[7];
  struct mlx5_eqe_cmd cmd;
  struct mlx5_eqe_comp comp;
  struct mlx5_eqe_qp_srq qp_srq;
  struct mlx5_eqe_cq_err cq_err;
  struct mlx5_eqe_port_state port;
  struct mlx5_eqe_gpio gpio;
  struct mlx5_eqe_congestion cong;
  struct mlx5_eqe_stall_vl stall_vl;
  struct mlx5_eqe_page_req req_pages;
  struct mlx5_eqe_page_fault page_fault;
  struct mlx5_eqe_vport_change vport_change;
  struct mlx5_eqe_port_module port_module;
  struct mlx5_eqe_pps pps;
  struct mlx5_eqe_dct dct;
  struct mlx5_eqe_temp_warning temp_warning;
  struct mlx5_eqe_xrq_err xrq_err;
  struct mlx5_eqe_sync_fw_update sync_fw_update;
  struct mlx5_eqe_vhca_state vhca_state;
};

struct mlx5_eqe {
  u8 rsvd0;
  u8 type;
  u8 rsvd1;
  u8 sub_type;
  __be32 rsvd2[7];
  union ev_data data;
  __be16 rsvd3;
  u8 signature;
  u8 owner;
};

struct mlx5_cqe64 {
  u8 tls_outer_l3_tunneled;
  u8 rsvd0;
  __be16 wqe_id;
  u8 lro_tcppsh_abort_dupack;
  u8 lro_min_ttl;
  __be16 lro_tcp_win;
  __be32 lro_ack_seq_num;
  __be32 rss_hash_result;
  u8 rss_hash_type;
  u8 ml_path;
  u8 rsvd20[2];
  __be16 check_sum;
  __be16 slid;
  __be32 flags_rqpn;
  u8 hds_ip_ext;
  u8 l4_l3_hdr_type;
  __be16 vlan_info;
  __be32 srqn;
  union {
    __be32 immediate;
    __be32 inval_rkey;
    __be32 pkey;
    __be32 ft_metadata;
  };
  u8 rsvd40[4];
  __be32 byte_cnt;
  __be32 timestamp_h;
  __be32 timestamp_l;
  __be32 sop_drop_qpn;
  __be16 wqe_counter;
  u8 signature;
  u8 op_own;
};

struct mlx5_mini_cqe8 {
  union {
    __be32 rx_hash_result;
    struct {
      __be16 checksum;
      __be16 stridx;
    };
    struct {
      __be16 wqe_counter;
      u8 s_wqe_opcode;
      u8 reserved;
    } s_wqe_info;
  };
  __be32 byte_cnt;
};

struct mlx5_mkey_seg {
  u8 status;
  u8 pcie_control;
  u8 flags;
  u8 version;
  __be32 qpn_mkey7_0;
  u8 rsvd1[4];
  __be32 flags_pd;
  __be64 start_addr;
  __be64 len;
  __be32 bsfs_octo_size;
  u8 rsvd2[16];
  __be32 xlt_oct_size;
  u8 rsvd3[3];
  u8 log2_page_size;
  u8 rsvd4[4];
};

enum mlx5_cap_mode {
  HCA_CAP_OPMOD_GET_MAX = 0,
  HCA_CAP_OPMOD_GET_CUR = 1,
};

enum mlx5_cap_type {
  MLX5_CAP_GENERAL = 0,
  MLX5_CAP_ETHERNET_OFFLOADS = 1,
  MLX5_CAP_ODP = 2,
  MLX5_CAP_ATOMIC = 3,
  MLX5_CAP_ROCE = 4,
  MLX5_CAP_IPOIB_OFFLOADS = 5,
  MLX5_CAP_IPOIB_ENHANCED_OFFLOADS = 6,
  MLX5_CAP_FLOW_TABLE = 7,
  MLX5_CAP_ESWITCH_FLOW_TABLE = 8,
  MLX5_CAP_ESWITCH = 9,
  MLX5_CAP_RESERVED = 10,
  MLX5_CAP_VECTOR_CALC = 11,
  MLX5_CAP_QOS = 12,
  MLX5_CAP_DEBUG = 13,
  MLX5_CAP_RESERVED_14 = 14,
  MLX5_CAP_DEV_MEM = 15,
  MLX5_CAP_RESERVED_16 = 16,
  MLX5_CAP_TLS = 17,
  MLX5_CAP_VDPA_EMULATION = 19,
  MLX5_CAP_DEV_EVENT = 20,
  MLX5_CAP_IPSEC = 21,
  MLX5_CAP_NUM = 22,
};

enum mlx5_mcam_reg_groups {
  MLX5_MCAM_REGS_FIRST_128 = 0,
  MLX5_MCAM_REGS_0x9080_0x90FF = 1,
  MLX5_MCAM_REGS_0x9100_0x917F = 2,
  MLX5_MCAM_REGS_NUM = 3,
};

struct mlx5_nb {
  struct notifier_block nb;
  u8 event_type;
};

enum {
  MLX5_BOARD_ID_LEN = 64,
};

enum {
  MLX5_CMD_TIMEOUT_MSEC = 60000,
  MLX5_CMD_WQ_MAX_NAME = 32,
};

enum {
  MLX5_MAX_PORTS = 2,
};

enum {
  MLX5_REG_QPTS = 16386,
  MLX5_REG_QETCR = 16389,
  MLX5_REG_QTCT = 16394,
  MLX5_REG_QPDPM = 16403,
  MLX5_REG_QCAM = 16409,
  MLX5_REG_DCBX_PARAM = 16416,
  MLX5_REG_DCBX_APP = 16417,
  MLX5_REG_FPGA_CAP = 16418,
  MLX5_REG_FPGA_CTRL = 16419,
  MLX5_REG_FPGA_ACCESS_REG = 16420,
  MLX5_REG_CORE_DUMP = 16430,
  MLX5_REG_PCAP = 20481,
  MLX5_REG_PMTU = 20483,
  MLX5_REG_PTYS = 20484,
  MLX5_REG_PAOS = 20486,
  MLX5_REG_PFCC = 20487,
  MLX5_REG_PPCNT = 20488,
  MLX5_REG_PPTB = 20491,
  MLX5_REG_PBMC = 20492,
  MLX5_REG_PMAOS = 20498,
  MLX5_REG_PUDE = 20489,
  MLX5_REG_PMPE = 20496,
  MLX5_REG_PELC = 20494,
  MLX5_REG_PVLC = 20495,
  MLX5_REG_PCMR = 20545,
  MLX5_REG_PDDR = 20529,
  MLX5_REG_PMLP = 20482,
  MLX5_REG_PPLM = 20515,
  MLX5_REG_PCAM = 20607,
  MLX5_REG_NODE_DESC = 24577,
  MLX5_REG_HOST_ENDIANNESS = 28676,
  MLX5_REG_MCIA = 36884,
  MLX5_REG_MFRL = 36904,
  MLX5_REG_MLCR = 36907,
  MLX5_REG_MTRC_CAP = 36928,
  MLX5_REG_MTRC_CONF = 36929,
  MLX5_REG_MTRC_STDB = 36930,
  MLX5_REG_MTRC_CTRL = 36931,
  MLX5_REG_MPEIN = 36944,
  MLX5_REG_MPCNT = 36945,
  MLX5_REG_MTPPS = 36947,
  MLX5_REG_MTPPSE = 36948,
  MLX5_REG_MTUTC = 36949,
  MLX5_REG_MPEGC = 36950,
  MLX5_REG_MCQS = 36960,
  MLX5_REG_MCQI = 36961,
  MLX5_REG_MCC = 36962,
  MLX5_REG_MCDA = 36963,
  MLX5_REG_MCAM = 36991,
  MLX5_REG_MIRC = 37218,
  MLX5_REG_SBCAM = 45087,
  MLX5_REG_RESOURCE_DUMP = 49152,
};

enum mlx5_dcbx_oper_mode {
  MLX5E_DCBX_PARAM_VER_OPER_HOST = 0,
  MLX5E_DCBX_PARAM_VER_OPER_AUTO = 3,
};

enum dbg_rsc_type {
  MLX5_DBG_RSC_QP = 0,
  MLX5_DBG_RSC_EQ = 1,
  MLX5_DBG_RSC_CQ = 2,
};

enum port_state_policy {
  MLX5_POLICY_DOWN = 0,
  MLX5_POLICY_UP = 1,
  MLX5_POLICY_FOLLOW = 2,
  MLX5_POLICY_INVALID = 4294967295,
};

enum mlx5_coredev_type {
  MLX5_COREDEV_PF = 0,
  MLX5_COREDEV_VF = 1,
  MLX5_COREDEV_SF = 2,
};

struct mlx5_field_desc {
  int i;
};

struct mlx5_core_dev;

struct mlx5_rsc_debug {
  struct mlx5_core_dev* dev;
  void* object;
  enum dbg_rsc_type type;
  struct dentry* root;
  struct mlx5_field_desc fields[0];
};

enum mlx5_pci_status {
  MLX5_PCI_STATUS_DISABLED = 0,
  MLX5_PCI_STATUS_ENABLED = 1,
};

enum mlx5_cmdif_state {
  MLX5_CMDIF_STATE_UNINITIALIZED = 0,
  MLX5_CMDIF_STATE_UP = 1,
  MLX5_CMDIF_STATE_DOWN = 2,
};

struct mlx5_cmd_debug {
  struct dentry* dbg_root;
  void* in_msg;
  void* out_msg;
  u8 status;
  u16 inlen;
  u16 outlen;
};

struct cmd_msg_cache {
  spinlock_t lock;
  struct list_head head;
  unsigned int max_inbox_size;
  unsigned int num_ent;
};

struct mlx5_cmd_work_ent;

struct mlx5_cmd_stats;

struct mlx5_cmd {
  struct mlx5_nb nb;
  enum mlx5_cmdif_state state;
  void* cmd_alloc_buf;
  dma_addr_t alloc_dma;
  int alloc_size;
  void* cmd_buf;
  dma_addr_t dma;
  u16 cmdif_rev;
  u8 log_sz;
  u8 log_stride;
  int max_reg_cmds;
  int events;
  u32* vector;
  spinlock_t alloc_lock;
  spinlock_t token_lock;
  u8 token;
  long unsigned int bitmask;
  char wq_name[32];
  struct workqueue_struct* wq;
  struct semaphore sem;
  struct semaphore pages_sem;
  int mode;
  u16 allowed_opcode;
  struct mlx5_cmd_work_ent* ent_arr[32];
  struct dma_pool___2* pool;
  struct mlx5_cmd_debug dbg;
  struct cmd_msg_cache cache[5];
  int checksum_disabled;
  struct mlx5_cmd_stats* stats;
};

enum mlx5_device_state {
  MLX5_DEVICE_STATE_UNINITIALIZED = 0,
  MLX5_DEVICE_STATE_UP = 1,
  MLX5_DEVICE_STATE_INTERNAL_ERROR = 2,
};

struct mlx5_core_health {
  struct health_buffer* health;
  __be32* health_counter;
  struct timer_list timer;
  u32 prev;
  int miss_counter;
  u8 synd;
  u32 fatal_error;
  u32 crdump_size;
  spinlock_t wq_lock;
  struct workqueue_struct* wq;
  long unsigned int flags;
  struct work_struct fatal_report_work;
  struct work_struct report_work;
  struct devlink_health_reporter* fw_reporter;
  struct devlink_health_reporter* fw_fatal_reporter;
};

struct mlx5_eswitch;

struct mlx5_vf_context;

struct mlx5_core_sriov {
  struct mlx5_vf_context* vfs_ctx;
  int num_vfs;
  u16 max_vfs;
};

struct mlx5_flow_table;

struct mlx5_flow_group;

struct mlx5_flow_handle;

struct mlx5_core_roce {
  struct mlx5_flow_table* ft;
  struct mlx5_flow_group* fg;
  struct mlx5_flow_handle* allow_rule;
};

struct mlx5_fc_pool {
  struct mlx5_core_dev* dev;
  struct mutex pool_lock;
  struct list_head fully_used;
  struct list_head partially_used;
  struct list_head unused;
  int available_fcs;
  int used_fcs;
  int threshold;
};

struct mlx5_fc_stats {
  spinlock_t counters_idr_lock;
  struct idr counters_idr;
  struct list_head counters;
  struct llist_head addlist;
  struct llist_head dellist;
  struct workqueue_struct* wq;
  struct delayed_work work;
  long unsigned int next_query;
  long unsigned int sampling_interval;
  u32* bulk_query_out;
  struct mlx5_fc_pool fc_pool;
};

struct mlx5_rl_entry;

struct mlx5_rl_table {
  struct mutex rl_lock;
  u16 max_size;
  u32 max_rate;
  u32 min_rate;
  struct mlx5_rl_entry* rl_entry;
  u64 refcount;
};

struct mlx5_bfreg_head {
  struct mutex lock;
  struct list_head list;
};

struct mlx5_bfreg_data {
  struct mlx5_bfreg_head reg_head;
  struct mlx5_bfreg_head wc_head;
};

struct mlx5_irq_table;

struct mlx5_eq_table;

struct mlx5_adev;

struct mlx5_events;

struct mlx5_flow_steering;

struct mlx5_mpfs;

struct mlx5_lag;

struct mlx5_devcom;

struct mlx5_fw_reset;

struct mlx5_uars_page;

struct mlx5_priv {
  struct mlx5_irq_table* irq_table;
  struct mlx5_eq_table* eq_table;
  struct mlx5_nb pg_nb;
  struct workqueue_struct* pg_wq;
  struct xarray page_root_xa;
  int fw_pages;
  atomic_t reg_pages;
  struct list_head free_list;
  int vfs_pages;
  int host_pf_pages;
  struct mlx5_core_health health;
  struct list_head traps;
  struct dentry* qp_debugfs;
  struct dentry* eq_debugfs;
  struct dentry* cq_debugfs;
  struct dentry* cmdif_debugfs;
  struct mutex alloc_mutex;
  int numa_node;
  struct mutex pgdir_mutex;
  struct list_head pgdir_list;
  struct dentry* dbg_root;
  struct list_head ctx_list;
  spinlock_t ctx_lock;
  struct mlx5_adev** adev;
  int adev_idx;
  struct mlx5_events* events;
  struct mlx5_flow_steering* steering;
  struct mlx5_mpfs* mpfs;
  struct mlx5_eswitch* eswitch;
  struct mlx5_core_sriov sriov;
  struct mlx5_lag* lag;
  u32 flags;
  struct mlx5_devcom* devcom;
  struct mlx5_fw_reset* fw_reset;
  struct mlx5_core_roce roce;
  struct mlx5_fc_stats fc_stats;
  struct mlx5_rl_table rl_table;
  struct mlx5_bfreg_data bfregs;
  struct mlx5_uars_page* uar;
};

struct mlx5_profile {
  u64 mask;
  u8 log_max_qp;
  struct {
    int size;
    int limit;
  } mr_cache[23];
};

struct mlx5_td {
  struct mutex list_lock;
  struct list_head tirs_list;
  u32 tdn;
};

struct mlx5_core_mkey {
  u64 iova;
  u64 size;
  u32 key;
  u32 pd;
  u32 type;
  struct wait_queue_head wait;
  refcount_t usecount;
};

struct mlx5_sq_bfreg {
  void* map;
  struct mlx5_uars_page* up;
  bool wc;
  u32 index;
  unsigned int offset;
};

struct mlx5e_hw_objs {
  u32 pdn;
  struct mlx5_td td;
  struct mlx5_core_mkey mkey;
  struct mlx5_sq_bfreg bfreg;
};

struct mlx5e_resources {
  struct mlx5e_hw_objs hw_objs;
  struct devlink_port dl_port;
  struct net_device* uplink_netdev;
};

struct mlx5_vxlan;

struct mlx5_geneve;

struct mlx5_rsvd_gids {
  unsigned int start;
  unsigned int count;
  struct ida ida;
};

struct mlx5_pps {
  u8 pin_caps[8];
  struct work_struct out_work;
  u64 start[8];
  u8 enabled;
};

struct mlx5_timer {
  struct cyclecounter cycles;
  struct timecounter tc;
  u32 nominal_c_mult;
  long unsigned int overflow_period;
  struct delayed_work overflow_work;
};

struct mlx5_clock {
  struct mlx5_nb pps_nb;
  seqlock_t lock;
  struct hwtstamp_config hwtstamp_config;
  struct ptp_clock* ptp;
  struct ptp_clock_info ptp_info;
  struct mlx5_pps pps_info;
  struct mlx5_timer timer;
};

struct mlx5_hv_vhca;

struct mlx5_dm;

struct mlx5_ib_clock_info;

struct mlx5_fw_tracer;

struct mlx5_rsc_dump;

struct mlx5_core_dev {
  struct device* device;
  enum mlx5_coredev_type coredev_type;
  struct pci_dev* pdev;
  struct mutex pci_status_mutex;
  enum mlx5_pci_status pci_status;
  u8 rev_id;
  char board_id[64];
  struct mlx5_cmd cmd;
  struct {
    u32 hca_cur[22528];
    u32 hca_max[22528];
    u32 pcam[20];
    u32 mcam[54];
    u32 fpga[64];
    u32 qcam[18];
    u8 embedded_cpu;
  } caps;
  u64 sys_image_guid;
  phys_addr_t iseg_base;
  struct mlx5_init_seg* iseg;
  phys_addr_t bar_addr;
  enum mlx5_device_state state;
  struct mutex intf_state_mutex;
  long unsigned int intf_state;
  struct mlx5_priv priv;
  struct mlx5_profile profile;
  u32 issi;
  struct mlx5e_resources mlx5e_res;
  struct mlx5_dm* dm;
  struct mlx5_vxlan* vxlan;
  struct mlx5_geneve* geneve;
  struct {
    struct mlx5_rsvd_gids reserved_gids;
    u32 roce_en;
  } roce;
  struct mlx5_clock clock;
  struct mlx5_ib_clock_info* clock_info;
  struct mlx5_fw_tracer* tracer;
  struct mlx5_rsc_dump* rsc_dump;
  u32 vsc_addr;
  struct mlx5_hv_vhca* hv_vhca;
};

struct mlx5_cmd_first {
  __be32 data[4];
};

struct mlx5_cmd_mailbox;

struct mlx5_cmd_msg {
  struct list_head list;
  struct cmd_msg_cache* parent;
  u32 len;
  struct mlx5_cmd_first first;
  struct mlx5_cmd_mailbox* next;
};

struct mlx5_cmd_mailbox {
  void* buf;
  dma_addr_t dma;
  struct mlx5_cmd_mailbox* next;
};

enum {
  MLX5_NUM_COMMAND_CACHES = 5,
};

struct mlx5_cmd_stats {
  u64 sum;
  u64 n;
  struct dentry* root;
  spinlock_t lock;
};

typedef void (*mlx5_cmd_cbk_t)(int, void*);

struct mlx5_cmd_work_ent {
  long unsigned int state;
  struct mlx5_cmd_msg* in;
  struct mlx5_cmd_msg* out;
  void* uout;
  int uout_size;
  mlx5_cmd_cbk_t callback;
  struct delayed_work cb_timeout_work;
  void* context;
  int idx;
  struct completion handling;
  struct completion done;
  struct mlx5_cmd* cmd;
  struct work_struct work;
  struct mlx5_cmd_layout* lay;
  int ret;
  int page_queue;
  u8 status;
  u8 token;
  u64 ts1;
  u64 ts2;
  u16 op;
  bool polling;
  refcount_t refcnt;
};

struct mlx5_buf_list {
  void* buf;
  dma_addr_t map;
};

struct mlx5_frag_buf {
  struct mlx5_buf_list* frags;
  int npages;
  int size;
  u8 page_shift;
};

struct mlx5_frag_buf_ctrl {
  struct mlx5_buf_list* frags;
  u32 sz_m1;
  u16 frag_sz_m1;
  u16 strides_offset;
  u8 log_sz;
  u8 log_stride;
  u8 log_frag_strides;
};

struct mlx5_uars_page {
  void* map;
  bool wc;
  u32 index;
  struct list_head list;
  unsigned int bfregs;
  long unsigned int* reg_bitmap;
  long unsigned int* fp_bitmap;
  unsigned int reg_avail;
  unsigned int fp_avail;
  struct kref ref_count;
  struct mlx5_core_dev* mdev;
};

struct mlx5_vf_context {
  int enabled;
  u64 port_guid;
  u64 node_guid;
  u8 port_guid_valid : 1;
  u8 node_guid_valid : 1;
  enum port_state_policy policy;
};

struct mlx5_rl_entry {
  u8 rl_raw[48];
  u64 refcount;
  u16 index;
  u16 uid;
  u8 dedicated : 1;
};

enum fs_node_type {
  FS_TYPE_NAMESPACE = 0,
  FS_TYPE_PRIO = 1,
  FS_TYPE_PRIO_CHAINS = 2,
  FS_TYPE_FLOW_TABLE = 3,
  FS_TYPE_FLOW_GROUP = 4,
  FS_TYPE_FLOW_ENTRY = 5,
  FS_TYPE_FLOW_DEST = 6,
};

struct fs_node {
  struct list_head list;
  struct list_head children;
  enum fs_node_type type;
  struct fs_node* parent;
  struct fs_node* root;
  struct rw_semaphore lock;
  refcount_t refcount;
  bool active;
  void (*del_hw_func)(struct fs_node*);
  void (*del_sw_func)(struct fs_node*);
  atomic_t version;
};

struct mlx5dr_table;

struct mlx5dr_action;

struct mlx5_fs_dr_table {
  struct mlx5dr_table* dr_table;
  struct mlx5dr_action* miss_action;
};

enum fs_flow_table_type {
  FS_FT_NIC_RX = 0,
  FS_FT_NIC_TX = 1,
  FS_FT_ESW_EGRESS_ACL = 2,
  FS_FT_ESW_INGRESS_ACL = 3,
  FS_FT_FDB = 4,
  FS_FT_SNIFFER_RX = 5,
  FS_FT_SNIFFER_TX = 6,
  FS_FT_RDMA_RX = 7,
  FS_FT_RDMA_TX = 8,
  FS_FT_MAX_TYPE = 8,
};

enum fs_flow_table_op_mod {
  FS_FT_OP_MOD_NORMAL = 0,
  FS_FT_OP_MOD_LAG_DEMUX = 1,
};

struct mlx5_flow_namespace;

struct mlx5_flow_table {
  struct fs_node node;
  struct mlx5_fs_dr_table fs_dr_table;
  u32 id;
  u16 vport;
  unsigned int max_fte;
  unsigned int level;
  enum fs_flow_table_type type;
  enum fs_flow_table_op_mod op_mod;
  struct {
    bool active;
    unsigned int required_groups;
    unsigned int group_size;
    unsigned int num_groups;
    unsigned int max_fte;
  } autogroup;
  struct mutex lock;
  struct list_head fwd_rules;
  u32 flags;
  struct rhltable fgs_hash;
  enum mlx5_flow_table_miss_action def_miss_action;
  struct mlx5_flow_namespace* ns;
};

struct mlx5dr_matcher;

struct mlx5_fs_dr_matcher {
  struct mlx5dr_matcher* dr_matcher;
};

struct mlx5_flow_group_mask {
  u8 match_criteria_enable;
  u32 match_criteria[96];
};

struct mlx5_flow_group {
  struct fs_node node;
  struct mlx5_fs_dr_matcher fs_dr_matcher;
  struct mlx5_flow_group_mask mask;
  u32 start_index;
  u32 max_ftes;
  struct ida fte_allocator;
  u32 id;
  struct rhashtable ftes_hash;
  struct rhlist_head hash;
};

struct mlx5_flow_rule;

struct mlx5_flow_handle {
  int num_rules;
  struct mlx5_flow_rule* rule[0];
};

struct mlx5_adev {
  struct auxiliary_device adev;
  struct mlx5_core_dev* mdev;
  int idx;
};

enum mlx5_flow_steering_mode {
  MLX5_FLOW_STEERING_MODE_DMFS = 0,
  MLX5_FLOW_STEERING_MODE_SMFS = 1,
};

struct mlx5_flow_root_namespace;

struct mlx5_flow_steering {
  struct mlx5_core_dev* dev;
  enum mlx5_flow_steering_mode mode;
  struct kmem_cache* fgs_cache;
  struct kmem_cache* ftes_cache;
  struct mlx5_flow_root_namespace* root_ns;
  struct mlx5_flow_root_namespace* fdb_root_ns;
  struct mlx5_flow_namespace** fdb_sub_ns;
  struct mlx5_flow_root_namespace** esw_egress_root_ns;
  struct mlx5_flow_root_namespace** esw_ingress_root_ns;
  struct mlx5_flow_root_namespace* sniffer_tx_root_ns;
  struct mlx5_flow_root_namespace* sniffer_rx_root_ns;
  struct mlx5_flow_root_namespace* rdma_rx_root_ns;
  struct mlx5_flow_root_namespace* rdma_tx_root_ns;
  struct mlx5_flow_root_namespace* egress_root_ns;
  int esw_egress_acl_vports;
  int esw_ingress_acl_vports;
};

enum mlx5_interface_state {
  MLX5_INTERFACE_STATE_UP = 1,
};

enum {
  MLX5_PROF_MASK_QP_SIZE = 1,
  MLX5_PROF_MASK_MR_CACHE = 2,
};

enum {
  MR_CACHE_LAST_STD_ENTRY = 20,
  MLX5_IMR_MTT_CACHE_ENTRY = 21,
  MLX5_IMR_KSM_CACHE_ENTRY = 22,
  MAX_MR_CACHE_ENTRIES = 23,
};

struct mlx5_fw_trace_data {
  u64 timestamp;
  bool lost;
  u8 event_id;
  char msg[256];
};

struct mlx5_fw_tracer {
  struct mlx5_core_dev* dev;
  struct mlx5_nb nb;
  bool owner;
  u8 trc_ver;
  struct workqueue_struct* work_queue;
  struct work_struct ownership_change_work;
  struct work_struct read_fw_strings_work;
  struct {
    u8 first_string_trace;
    u8 num_string_trace;
    u32 num_string_db;
    u32 base_address_out[8];
    u32 size_out[8];
    void* buffer[8];
    bool loaded;
  } str_db;
  struct {
    u32 pdn;
    void* log_buf;
    dma_addr_t dma;
    u32 size;
    struct mlx5_core_mkey mkey;
    u32 consumer_index;
  } buff;
  struct {
    struct mlx5_fw_trace_data straces[8192];
    u32 saved_traces_index;
    struct mutex lock;
  } st_arr;
  u64 last_timestamp;
  struct work_struct handle_traces_work;
  struct hlist_head hash[64];
  struct list_head ready_strings_list;
};

struct mlx5_ib_user_db_page;

struct mlx5_db_pgdir;

struct mlx5_db {
  __be32* db;
  union {
    struct mlx5_db_pgdir* pgdir;
    struct mlx5_ib_user_db_page* user_page;
  } u;
  dma_addr_t dma;
  int index;
};

enum {
  MLX5_PCI_DEV_IS_VF = 1,
};

struct mlx5_eq_comp;

struct mlx5_core_cq {
  u32 cqn;
  int cqe_sz;
  __be32* set_ci_db;
  __be32* arm_db;
  struct mlx5_uars_page* uar;
  refcount_t refcount;
  struct completion free;
  unsigned int vector;
  unsigned int irqn;
  void (*comp)(struct mlx5_core_cq*, struct mlx5_eqe*);
  void (*event)(struct mlx5_core_cq*, enum mlx5_event);
  u32 cons_index;
  unsigned int arm_sn;
  struct mlx5_rsc_debug* dbg;
  int pid;
  struct {
    struct list_head list;
    void (*comp)(struct mlx5_core_cq*, struct mlx5_eqe*);
    void* priv;
  } tasklet_ctx;
  int reset_notify_added;
  struct list_head reset_notify;
  struct mlx5_eq_comp* eq;
  u16 uid;
};

struct mlx5_cq_table {
  spinlock_t lock;
  struct xarray tree;
};

struct mlx5_eq {
  struct mlx5_frag_buf_ctrl fbc;
  struct mlx5_frag_buf frag_buf;
  struct mlx5_core_dev* dev;
  struct mlx5_cq_table cq_table;
  __be32* doorbell;
  u32 cons_index;
  unsigned int vecidx;
  unsigned int irqn;
  u8 eqn;
  struct mlx5_rsc_debug* dbg;
};

struct mlx5_eq_tasklet {
  struct list_head list;
  struct list_head process_list;
  struct tasklet_struct task;
  spinlock_t lock;
};

struct mlx5_eq_comp {
  struct mlx5_eq core;
  struct notifier_block irq_nb;
  struct mlx5_eq_tasklet tasklet_ctx;
  struct list_head list;
};

struct mlx5_wqe_ctrl_seg {
  __be32 opmod_idx_opcode;
  __be32 qpn_ds;
  u8 signature;
  u8 rsvd[2];
  u8 fm_ce_se;
  union {
    __be32 general_id;
    __be32 imm;
    __be32 umr_mkey;
    __be32 tis_tir_num;
  };
};

struct mlx5_wqe_eth_seg {
  u8 swp_outer_l4_offset;
  u8 swp_outer_l3_offset;
  u8 swp_inner_l4_offset;
  u8 swp_inner_l3_offset;
  u8 cs_flags;
  u8 swp_flags;
  __be16 mss;
  __be32 flow_table_metadata;
  union {
    struct {
      __be16 sz;
      u8 start[2];
    } inline_hdr;
    struct {
      __be16 type;
      __be16 vlan_tci;
    } insert;
    __be32 trailer;
  };
};

struct mlx5_wqe_data_seg {
  __be32 byte_count;
  __be32 lkey;
  __be64 addr;
};

struct mlx5_wqe_umr_ctrl_seg {
  u8 flags;
  u8 rsvd0[3];
  __be16 xlt_octowords;
  union {
    __be16 xlt_offset;
    __be16 bsf_octowords;
  };
  __be64 mkey_mask;
  __be32 xlt_offset_47_16;
  u8 rsvd1[28];
};

struct mlx5_mtt {
  __be64 ptag;
};

enum mlx5_flow_namespace_type {
  MLX5_FLOW_NAMESPACE_BYPASS = 0,
  MLX5_FLOW_NAMESPACE_LAG = 1,
  MLX5_FLOW_NAMESPACE_OFFLOADS = 2,
  MLX5_FLOW_NAMESPACE_ETHTOOL = 3,
  MLX5_FLOW_NAMESPACE_KERNEL = 4,
  MLX5_FLOW_NAMESPACE_LEFTOVERS = 5,
  MLX5_FLOW_NAMESPACE_ANCHOR = 6,
  MLX5_FLOW_NAMESPACE_FDB = 7,
  MLX5_FLOW_NAMESPACE_ESW_EGRESS = 8,
  MLX5_FLOW_NAMESPACE_ESW_INGRESS = 9,
  MLX5_FLOW_NAMESPACE_SNIFFER_RX = 10,
  MLX5_FLOW_NAMESPACE_SNIFFER_TX = 11,
  MLX5_FLOW_NAMESPACE_EGRESS = 12,
  MLX5_FLOW_NAMESPACE_EGRESS_KERNEL = 13,
  MLX5_FLOW_NAMESPACE_RDMA_RX = 14,
  MLX5_FLOW_NAMESPACE_RDMA_RX_KERNEL = 15,
  MLX5_FLOW_NAMESPACE_RDMA_TX = 16,
};

struct mlx5_flow_context {
  u32 flags;
  u32 flow_tag;
  u32 flow_source;
};

struct mlx5_fs_dr_action {
  struct mlx5dr_action* dr_action;
};

struct mlx5_pkt_reformat {
  enum mlx5_flow_namespace_type ns_type;
  int reformat_type;
  union {
    struct mlx5_fs_dr_action action;
    u32 id;
  };
};

struct mlx5_flow_destination {
  enum mlx5_flow_destination_type type;
  union {
    u32 tir_num;
    u32 ft_num;
    struct mlx5_flow_table* ft;
    u32 counter_id;
    struct {
      u16 num;
      u16 vhca_id;
      struct mlx5_pkt_reformat* pkt_reformat;
      u8 flags;
    } vport;
    u32 sampler_id;
  };
};

struct mod_hdr_tbl {
  struct mutex lock;
  struct hlist_head hlist[256];
};

struct mlx5_fs_vlan {
  u16 ethtype;
  u16 vid;
  u8 prio;
};

struct mlx5_modify_hdr;

struct mlx5_flow_act {
  u32 action;
  struct mlx5_modify_hdr* modify_hdr;
  struct mlx5_pkt_reformat* pkt_reformat;
  union {
    u32 ipsec_obj_id;
    uintptr_t esp_id;
  };
  u32 flags;
  struct mlx5_fs_vlan vlan[2];
  struct ib_counters* counters;
};

struct mlx5_modify_hdr {
  enum mlx5_flow_namespace_type ns_type;
  union {
    struct mlx5_fs_dr_action action;
    u32 id;
  };
};

enum {
  MLX5_DRIVER_STATUS_ABORTED = 254,
  MLX5_DRIVER_SYND = 3135045854,
};

struct mlx5dr_rule;

struct mlx5_fs_dr_rule {
  struct mlx5dr_rule* dr_rule;
  struct mlx5dr_action** dr_actions;
  int num_actions;
};

struct mlx5dr_domain;

struct mlx5_fs_dr_domain {
  struct mlx5dr_domain* dr_domain;
};

enum fs_fte_status {
  FS_FTE_STATUS_EXISTING = 1,
};

struct mlx5_flow_namespace {
  struct fs_node node;
  enum mlx5_flow_table_miss_action def_miss_action;
};

struct mlx5_flow_cmds;

struct mlx5_flow_root_namespace {
  struct mlx5_flow_namespace ns;
  enum mlx5_flow_steering_mode mode;
  struct mlx5_fs_dr_domain fs_dr_domain;
  enum fs_flow_table_type table_type;
  struct mlx5_core_dev* dev;
  struct mlx5_flow_table* root_ft;
  struct mutex chain_lock;
  struct list_head underlay_qpns;
  const struct mlx5_flow_cmds* cmds;
};

struct mlx5_flow_rule {
  struct fs_node node;
  struct mlx5_flow_table* ft;
  struct mlx5_flow_destination dest_attr;
  struct list_head next_ft;
  u32 sw_action;
};

struct mlx5_fc;

struct fs_fte {
  struct fs_node node;
  struct mlx5_fs_dr_rule fs_dr_rule;
  u32 val[96];
  u32 dests_size;
  u32 index;
  struct mlx5_flow_context flow_context;
  struct mlx5_flow_act action;
  enum fs_fte_status status;
  struct mlx5_fc* counter;
  struct rhash_head hash;
  int modify_mask;
};

struct mlx5_flow_cmds {
  int (*create_flow_table)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      unsigned int,
      struct mlx5_flow_table*);
  int (*destroy_flow_table)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*);
  int (*modify_flow_table)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      struct mlx5_flow_table*);
  int (*create_flow_group)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      u32*,
      struct mlx5_flow_group*);
  int (*destroy_flow_group)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      struct mlx5_flow_group*);
  int (*create_fte)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      struct mlx5_flow_group*,
      struct fs_fte*);
  int (*update_fte)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      struct mlx5_flow_group*,
      int,
      struct fs_fte*);
  int (*delete_fte)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      struct fs_fte*);
  int (*update_root_ft)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_table*,
      u32,
      bool);
  int (*packet_reformat_alloc)(
      struct mlx5_flow_root_namespace*,
      int,
      size_t,
      void*,
      enum mlx5_flow_namespace_type,
      struct mlx5_pkt_reformat*);
  void (*packet_reformat_dealloc)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_pkt_reformat*);
  int (*modify_header_alloc)(
      struct mlx5_flow_root_namespace*,
      u8,
      u8,
      void*,
      struct mlx5_modify_hdr*);
  void (*modify_header_dealloc)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_modify_hdr*);
  int (*set_peer)(
      struct mlx5_flow_root_namespace*,
      struct mlx5_flow_root_namespace*);
  int (*create_ns)(struct mlx5_flow_root_namespace*);
  int (*destroy_ns)(struct mlx5_flow_root_namespace*);
};

enum {
  REP_ETH = 0,
  REP_IB = 1,
  NUM_REP_TYPES = 2,
};

struct mapping_ctx;

struct xt_table_info {
  unsigned int size;
  unsigned int number;
  unsigned int initial_entries;
  unsigned int hook_entry[5];
  unsigned int underflow[5];
  unsigned int stacksize;
  void*** jumpstack;
  unsigned char entries[0];
};

struct nf_conntrack_tuple_mask {
  struct {
    union nf_inet_addr u3;
    union nf_conntrack_man_proto u;
  } src;
};

struct nf_conntrack_l4proto;

struct nf_ct_ext {
  u8 offset[4];
  u8 len;
  char data[0];
};

struct nf_conntrack_helper;

struct nf_conntrack_expect {
  struct hlist_node lnode;
  struct hlist_node hnode;
  struct nf_conntrack_tuple tuple;
  struct nf_conntrack_tuple_mask mask;
  void (*expectfn)(struct nf_conn*, struct nf_conntrack_expect*);
  struct nf_conntrack_helper* helper;
  struct nf_conn* master;
  struct timer_list timeout;
  refcount_t use;
  unsigned int flags;
  unsigned int class;
  union nf_inet_addr saved_addr;
  union nf_conntrack_man_proto saved_proto;
  enum ip_conntrack_dir dir;
  struct callback_head rcu;
};

struct PptpControlHeader {
  __be16 messageType;
  __u16 reserved;
};

struct PptpStartSessionRequest {
  __be16 protocolVersion;
  __u16 reserved1;
  __be32 framingCapability;
  __be32 bearerCapability;
  __be16 maxChannels;
  __be16 firmwareRevision;
  __u8 hostName[64];
  __u8 vendorString[64];
};

struct PptpStartSessionReply {
  __be16 protocolVersion;
  __u8 resultCode;
  __u8 generalErrorCode;
  __be32 framingCapability;
  __be32 bearerCapability;
  __be16 maxChannels;
  __be16 firmwareRevision;
  __u8 hostName[64];
  __u8 vendorString[64];
};

struct PptpStopSessionRequest {
  __u8 reason;
  __u8 reserved1;
  __u16 reserved2;
};

struct PptpStopSessionReply {
  __u8 resultCode;
  __u8 generalErrorCode;
  __u16 reserved1;
};

struct PptpOutCallRequest {
  __be16 callID;
  __be16 callSerialNumber;
  __be32 minBPS;
  __be32 maxBPS;
  __be32 bearerType;
  __be32 framingType;
  __be16 packetWindow;
  __be16 packetProcDelay;
  __be16 phoneNumberLength;
  __u16 reserved1;
  __u8 phoneNumber[64];
  __u8 subAddress[64];
};

struct PptpOutCallReply {
  __be16 callID;
  __be16 peersCallID;
  __u8 resultCode;
  __u8 generalErrorCode;
  __be16 causeCode;
  __be32 connectSpeed;
  __be16 packetWindow;
  __be16 packetProcDelay;
  __be32 physChannelID;
};

struct PptpInCallRequest {
  __be16 callID;
  __be16 callSerialNumber;
  __be32 callBearerType;
  __be32 physChannelID;
  __be16 dialedNumberLength;
  __be16 dialingNumberLength;
  __u8 dialedNumber[64];
  __u8 dialingNumber[64];
  __u8 subAddress[64];
};

struct PptpInCallReply {
  __be16 callID;
  __be16 peersCallID;
  __u8 resultCode;
  __u8 generalErrorCode;
  __be16 packetWindow;
  __be16 packetProcDelay;
  __u16 reserved;
};

struct PptpInCallConnected {
  __be16 peersCallID;
  __u16 reserved;
  __be32 connectSpeed;
  __be16 packetWindow;
  __be16 packetProcDelay;
  __be32 callFramingType;
};

struct PptpClearCallRequest {
  __be16 callID;
  __u16 reserved;
};

struct PptpCallDisconnectNotify {
  __be16 callID;
  __u8 resultCode;
  __u8 generalErrorCode;
  __be16 causeCode;
  __u16 reserved;
  __u8 callStatistics[128];
};

struct PptpWanErrorNotify {
  __be16 peersCallID;
  __u16 reserved;
  __be32 crcErrors;
  __be32 framingErrors;
  __be32 hardwareOverRuns;
  __be32 bufferOverRuns;
  __be32 timeoutErrors;
  __be32 alignmentErrors;
};

struct PptpSetLinkInfo {
  __be16 peersCallID;
  __u16 reserved;
  __be32 sendAccm;
  __be32 recvAccm;
};

union pptp_ctrl_union {
  struct PptpStartSessionRequest sreq;
  struct PptpStartSessionReply srep;
  struct PptpStopSessionRequest streq;
  struct PptpStopSessionReply strep;
  struct PptpOutCallRequest ocreq;
  struct PptpOutCallReply ocack;
  struct PptpInCallRequest icreq;
  struct PptpInCallReply icack;
  struct PptpInCallConnected iccon;
  struct PptpClearCallRequest clrreq;
  struct PptpCallDisconnectNotify disc;
  struct PptpWanErrorNotify wanerr;
  struct PptpSetLinkInfo setlink;
};

enum nf_ct_ext_id {
  NF_CT_EXT_HELPER = 0,
  NF_CT_EXT_NAT = 1,
  NF_CT_EXT_SEQADJ = 2,
  NF_CT_EXT_ACCT = 3,
  NF_CT_EXT_NUM = 4,
};

struct mlx5_wq_ctrl {
  struct mlx5_core_dev* mdev;
  struct mlx5_frag_buf buf;
  struct mlx5_db db;
};

struct mlx5_wq_cyc {
  struct mlx5_frag_buf_ctrl fbc;
  __be32* db;
  u16 sz;
  u16 wqe_ctr;
  u16 cur_sz;
};

struct mlx5_cqwq {
  struct mlx5_frag_buf_ctrl fbc;
  __be32* db;
  u32 cc;
};

struct mlx5_wq_ll {
  struct mlx5_frag_buf_ctrl fbc;
  __be32* db;
  __be16* tail_next;
  u16 head;
  u16 wqe_ctr;
  u16 cur_sz;
};

struct mlx5e_priv;

struct mlx5e_stats_grp {
  u16 update_stats_mask;
  int (*get_num_stats)(struct mlx5e_priv*);
  int (*fill_strings)(struct mlx5e_priv*, u8*, int);
  int (*fill_stats)(struct mlx5e_priv*, u64*, int);
  void (*update_stats)(struct mlx5e_priv*);
};

struct mlx5e_dcbx_dp {
  u8 dscp2prio[64];
  u8 trust_state;
};

struct mlx5e_rq_frag_info {
  int frag_size;
  int frag_stride;
};

struct mlx5e_rq_frags_info {
  struct mlx5e_rq_frag_info arr[4];
  u8 num_frags;
  u8 log_num_frags;
  u8 wqe_bulk;
};

struct mlx5e_rq;

struct mlx5e_wqe_frag_info;

typedef struct sk_buff* (*mlx5e_fp_skb_from_cqe)(
    struct mlx5e_rq*,
    struct mlx5_cqe64*,
    struct mlx5e_wqe_frag_info*,
    u32);

struct mlx5e_umr_wqe {
  struct mlx5_wqe_ctrl_seg ctrl;
  struct mlx5_wqe_umr_ctrl_seg uctrl;
  struct mlx5_mkey_seg mkc;
  struct mlx5_mtt inline_mtts[0];
};

struct mlx5e_mpw_info;

typedef struct sk_buff* (*mlx5e_fp_skb_from_cqe_mpwrq)(
    struct mlx5e_rq*,
    struct mlx5e_mpw_info*,
    u16,
    u32,
    u32);

struct mlx5e_ch_stats;

struct mlx5e_cq {
  struct mlx5_cqwq wq;
  u16 event_ctr;
  struct napi_struct* napi;
  struct mlx5_core_cq mcq;
  struct mlx5e_ch_stats* ch_stats;
  struct net_device* netdev;
  struct mlx5_core_dev* mdev;
  struct mlx5e_priv* priv;
  struct mlx5_wq_ctrl wq_ctrl;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_cq_decomp {
  struct mlx5_cqe64 title;
  struct mlx5_mini_cqe8 mini_arr[8];
  u8 mini_arr_idx;
  u16 left;
  u16 wqe_counter;
  long : 16;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_dma_info {
  dma_addr_t addr;
  union {
    struct page* page;
    struct xdp_buff* xsk;
  };
};

struct mlx5e_page_cache {
  u32 head;
  u32 tail;
  struct mlx5e_dma_info page_cache[256];
};

typedef void (*mlx5e_fp_handle_rx_cqe)(struct mlx5e_rq*, struct mlx5_cqe64*);

typedef bool (*mlx5e_fp_post_rx_wqes)(struct mlx5e_rq*);

typedef void (*mlx5e_fp_dealloc_wqe)(struct mlx5e_rq*, u16);

typedef ktime_t (*cqe_ts_to_ns)(struct mlx5_clock*, u64);

struct mlx5e_rq_stats;

struct mlx5e_icosq;

struct mlx5e_xdpsq;

struct mlx5e_rq {
  union {
    struct {
      struct mlx5_wq_cyc wq;
      struct mlx5e_wqe_frag_info* frags;
      struct mlx5e_dma_info* di;
      struct mlx5e_rq_frags_info info;
      mlx5e_fp_skb_from_cqe skb_from_cqe;
    } wqe;
    struct {
      struct mlx5_wq_ll wq;
      struct mlx5e_umr_wqe umr_wqe;
      struct mlx5e_mpw_info* info;
      mlx5e_fp_skb_from_cqe_mpwrq skb_from_cqe_mpwrq;
      u16 num_strides;
      u16 actual_wq_head;
      u8 log_stride_sz;
      u8 umr_in_progress;
      u8 umr_last_bulk;
      u8 umr_completed;
    } mpwqe;
  };
  struct {
    u16 headroom;
    u32 frame0_sz;
    u8 map_dir;
  } buff;
  struct device* pdev;
  struct net_device* netdev;
  struct mlx5e_rq_stats* stats;
  long : 64;
  long : 64;
  struct mlx5e_cq cq;
  struct mlx5e_cq_decomp cqd;
  struct mlx5e_page_cache page_cache;
  struct hwtstamp_config* tstamp;
  struct mlx5_clock* clock;
  struct mlx5e_icosq* icosq;
  struct mlx5e_priv* priv;
  mlx5e_fp_handle_rx_cqe handle_rx_cqe;
  mlx5e_fp_post_rx_wqes post_wqes;
  mlx5e_fp_dealloc_wqe dealloc_wqe;
  long unsigned int state;
  int ix;
  unsigned int hw_mtu;
  struct dim dim;
  struct bpf_prog* xdp_prog;
  struct mlx5e_xdpsq* xdpsq;
  long unsigned int flags[1];
  struct page_pool* page_pool;
  struct xsk_buff_pool* xsk_pool;
  struct work_struct recover_work;
  struct mlx5_wq_ctrl wq_ctrl;
  __be32 mkey_be;
  u8 wq_type;
  u32 rqn;
  struct mlx5_core_dev* mdev;
  struct mlx5_core_mkey umr_mkey;
  struct mlx5e_dma_info wqe_overflow;
  long : 64;
  struct xdp_rxq_info xdp_rxq;
  cqe_ts_to_ns ptp_cyc2time;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_xsk;

struct mlx5e_params {
  u8 log_sq_size;
  u8 rq_wq_type;
  u8 log_rq_mtu_frames;
  u16 num_channels;
  u8 num_tc;
  bool rx_cqe_compress_def;
  bool tunneled_offload_en;
  struct dim_cq_moder rx_cq_moderation;
  struct dim_cq_moder tx_cq_moderation;
  bool lro_en;
  u8 tx_min_inline_mode;
  bool vlan_strip_disable;
  bool scatter_fcs_en;
  bool rx_dim_enabled;
  bool tx_dim_enabled;
  u32 lro_timeout;
  u32 pflags;
  struct bpf_prog* xdp_prog;
  struct mlx5e_xsk* xsk;
  unsigned int sw_mtu;
  int hard_mtu;
  bool ptp_rx;
};

struct mlx5e_channel;

struct mlx5e_ptp;

struct mlx5e_channels {
  struct mlx5e_channel** c;
  struct mlx5e_ptp* ptp;
  unsigned int num;
  struct mlx5e_params params;
};

struct mlx5e_rqt {
  u32 rqtn;
  bool enabled;
};

struct mlx5e_tir {
  u32 tirn;
  struct mlx5e_rqt rqt;
  struct list_head list;
};

struct mlx5e_rss_params {
  u32 indirection_rqt[256];
  u32 rx_hash_fields[10];
  u8 toeplitz_hash_key[40];
  u8 hfunc;
};

struct mlx5e_ethtool_table {
  struct mlx5_flow_table* ft;
  int num_rules;
};

struct mlx5e_ethtool_steering {
  struct mlx5e_ethtool_table l3_l4_ft[7];
  struct mlx5e_ethtool_table l2_ft[4];
  struct list_head rules;
  int tot_num_rules;
};

struct mlx5_fs_chains;

struct mlx5_tc_ct_priv;

struct mlx5e_tc_table {
  struct mutex t_lock;
  struct mlx5_flow_table* t;
  struct mlx5_fs_chains* chains;
  struct rhashtable ht;
  struct mod_hdr_tbl mod_hdr;
  struct mutex hairpin_tbl_lock;
  struct hlist_head hairpin_tbl[256];
  struct notifier_block netdevice_nb;
  struct netdev_net_notifier netdevice_nn;
  struct mlx5_tc_ct_priv* ct;
  struct mapping_ctx* mapping;
};

struct mlx5e_flow_table {
  int num_groups;
  struct mlx5_flow_table* t;
  struct mlx5_flow_group** g;
};

struct mlx5e_promisc_table {
  struct mlx5e_flow_table ft;
  struct mlx5_flow_handle* rule;
};

struct mlx5e_l2_rule {
  u8 addr[8];
  struct mlx5_flow_handle* rule;
};

struct mlx5e_l2_table {
  struct mlx5e_flow_table ft;
  struct hlist_head netdev_uc[256];
  struct hlist_head netdev_mc[256];
  struct mlx5e_l2_rule broadcast;
  struct mlx5e_l2_rule allmulti;
  struct mlx5_flow_handle* trap_rule;
  bool broadcast_enabled;
  bool allmulti_enabled;
  bool promisc_enabled;
};

struct mlx5e_ttc_rule {
  struct mlx5_flow_handle* rule;
  struct mlx5_flow_destination default_dest;
};

struct mlx5e_ttc_table {
  struct mlx5e_flow_table ft;
  struct mlx5e_ttc_rule rules[11];
  struct mlx5_flow_handle* tunnel_rules[6];
};

struct mlx5e_vlan_table;

struct mlx5e_fs_udp;

struct mlx5e_fs_any;

struct mlx5e_ptp_fs;

struct mlx5e_flow_steering {
  struct mlx5_flow_namespace* ns;
  struct mlx5_flow_namespace* egress_ns;
  struct mlx5e_ethtool_steering ethtool;
  struct mlx5e_tc_table tc;
  struct mlx5e_promisc_table promisc;
  struct mlx5e_vlan_table* vlan;
  struct mlx5e_l2_table l2;
  struct mlx5e_ttc_table ttc;
  struct mlx5e_ttc_table inner_ttc;
  struct mlx5e_fs_udp* udp;
  struct mlx5e_fs_any* any;
  struct mlx5e_ptp_fs* ptp_fs;
};

struct mlx5e_sw_stats {
  u64 rx_packets;
  u64 rx_bytes;
  u64 tx_packets;
  u64 tx_bytes;
  u64 tx_tso_packets;
  u64 tx_tso_bytes;
  u64 tx_tso_inner_packets;
  u64 tx_tso_inner_bytes;
  u64 tx_added_vlan_packets;
  u64 tx_nop;
  u64 tx_mpwqe_blks;
  u64 tx_mpwqe_pkts;
  u64 rx_lro_packets;
  u64 rx_lro_bytes;
  u64 rx_mcast_packets;
  u64 rx_ecn_mark;
  u64 rx_removed_vlan_packets;
  u64 rx_csum_unnecessary;
  u64 rx_csum_none;
  u64 rx_csum_complete;
  u64 rx_csum_complete_tail;
  u64 rx_csum_complete_tail_slow;
  u64 rx_csum_unnecessary_inner;
  u64 rx_xdp_drop;
  u64 rx_xdp_redirect;
  u64 rx_xdp_tx_xmit;
  u64 rx_xdp_tx_mpwqe;
  u64 rx_xdp_tx_inlnw;
  u64 rx_xdp_tx_nops;
  u64 rx_xdp_tx_full;
  u64 rx_xdp_tx_err;
  u64 rx_xdp_tx_cqe;
  u64 tx_csum_none;
  u64 tx_csum_partial;
  u64 tx_csum_partial_inner;
  u64 tx_queue_stopped;
  u64 tx_queue_dropped;
  u64 tx_xmit_more;
  u64 tx_recover;
  u64 tx_cqes;
  u64 tx_queue_wake;
  u64 tx_cqe_err;
  u64 tx_xdp_xmit;
  u64 tx_xdp_mpwqe;
  u64 tx_xdp_inlnw;
  u64 tx_xdp_nops;
  u64 tx_xdp_full;
  u64 tx_xdp_err;
  u64 tx_xdp_cqes;
  u64 rx_wqe_err;
  u64 rx_mpwqe_filler_cqes;
  u64 rx_mpwqe_filler_strides;
  u64 rx_oversize_pkts_sw_drop;
  u64 rx_buff_alloc_err;
  u64 rx_cqe_compress_blks;
  u64 rx_cqe_compress_pkts;
  u64 rx_cache_reuse;
  u64 rx_cache_full;
  u64 rx_cache_empty;
  u64 rx_cache_busy;
  u64 rx_cache_waive;
  u64 rx_congst_umr;
  u64 rx_arfs_err;
  u64 rx_recover;
  u64 ch_events;
  u64 ch_poll;
  u64 ch_arm;
  u64 ch_aff_change;
  u64 ch_force_irq;
  u64 ch_eq_rearm;
  u64 rx_xsk_packets;
  u64 rx_xsk_bytes;
  u64 rx_xsk_csum_complete;
  u64 rx_xsk_csum_unnecessary;
  u64 rx_xsk_csum_unnecessary_inner;
  u64 rx_xsk_csum_none;
  u64 rx_xsk_ecn_mark;
  u64 rx_xsk_removed_vlan_packets;
  u64 rx_xsk_xdp_drop;
  u64 rx_xsk_xdp_redirect;
  u64 rx_xsk_wqe_err;
  u64 rx_xsk_mpwqe_filler_cqes;
  u64 rx_xsk_mpwqe_filler_strides;
  u64 rx_xsk_oversize_pkts_sw_drop;
  u64 rx_xsk_buff_alloc_err;
  u64 rx_xsk_cqe_compress_blks;
  u64 rx_xsk_cqe_compress_pkts;
  u64 rx_xsk_congst_umr;
  u64 rx_xsk_arfs_err;
  u64 tx_xsk_xmit;
  u64 tx_xsk_mpwqe;
  u64 tx_xsk_inlnw;
  u64 tx_xsk_full;
  u64 tx_xsk_err;
  u64 tx_xsk_cqes;
};

struct mlx5e_qcounter_stats {
  u32 rx_out_of_buffer;
  u32 rx_if_down_packets;
};

struct mlx5e_vnic_env_stats {
  __be64 query_vnic_env_out[66];
};

struct mlx5e_vport_stats {
  __be64 query_vport_out[66];
};

struct mlx5e_pport_stats {
  __be64 IEEE_802_3_counters[32];
  __be64 RFC_2863_counters[32];
  __be64 RFC_2819_counters[32];
  __be64 per_prio_counters[256];
  __be64 phy_counters[32];
  __be64 phy_statistical_counters[32];
  __be64 eth_ext_counters[32];
  __be64 per_tc_prio_counters[256];
  __be64 per_tc_congest_prio_counters[256];
};

struct mlx5e_pcie_stats {
  __be64 pcie_perf_counters[32];
};

struct mlx5e_stats {
  struct mlx5e_sw_stats sw;
  struct mlx5e_qcounter_stats qcnt;
  struct mlx5e_vnic_env_stats vnic;
  struct mlx5e_vport_stats vport;
  struct mlx5e_pport_stats pport;
  struct rtnl_link_stats64 vf_vport;
  struct mlx5e_pcie_stats pcie;
};

struct mlx5e_ch_stats {
  u64 events;
  u64 poll;
  u64 arm;
  u64 aff_change;
  u64 force_irq;
  u64 eq_rearm;
};

struct mlx5e_sq_stats {
  u64 packets;
  u64 bytes;
  u64 xmit_more;
  u64 tso_packets;
  u64 tso_bytes;
  u64 tso_inner_packets;
  u64 tso_inner_bytes;
  u64 csum_partial;
  u64 csum_partial_inner;
  u64 added_vlan_packets;
  u64 nop;
  u64 mpwqe_blks;
  u64 mpwqe_pkts;
  u64 csum_none;
  u64 stopped;
  u64 dropped;
  u64 recover;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u64 cqes;
  u64 wake;
  u64 cqe_err;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_rq_stats {
  u64 packets;
  u64 bytes;
  u64 csum_complete;
  u64 csum_complete_tail;
  u64 csum_complete_tail_slow;
  u64 csum_unnecessary;
  u64 csum_unnecessary_inner;
  u64 csum_none;
  u64 lro_packets;
  u64 lro_bytes;
  u64 mcast_packets;
  u64 ecn_mark;
  u64 removed_vlan_packets;
  u64 xdp_drop;
  u64 xdp_redirect;
  u64 wqe_err;
  u64 mpwqe_filler_cqes;
  u64 mpwqe_filler_strides;
  u64 oversize_pkts_sw_drop;
  u64 buff_alloc_err;
  u64 cqe_compress_blks;
  u64 cqe_compress_pkts;
  u64 cache_reuse;
  u64 cache_full;
  u64 cache_empty;
  u64 cache_busy;
  u64 cache_waive;
  u64 congst_umr;
  u64 arfs_err;
  u64 recover;
};

struct mlx5e_xdpsq_stats {
  u64 xmit;
  u64 mpwqe;
  u64 inlnw;
  u64 nops;
  u64 full;
  u64 err;
  long : 64;
  long : 64;
  u64 cqes;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_channel_stats {
  struct mlx5e_ch_stats ch;
  long : 64;
  long : 64;
  struct mlx5e_sq_stats sq[8];
  struct mlx5e_rq_stats rq;
  struct mlx5e_rq_stats xskrq;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct mlx5e_xdpsq_stats rq_xdpsq;
  struct mlx5e_xdpsq_stats xdpsq;
  struct mlx5e_xdpsq_stats xsksq;
};

struct mlx5e_ptp_cq_stats {
  u64 cqe;
  u64 err_cqe;
  u64 abort;
  u64 abort_abs_diff_ns;
};

struct mlx5e_ptp_stats {
  struct mlx5e_ch_stats ch;
  long : 64;
  long : 64;
  struct mlx5e_sq_stats sq[8];
  struct mlx5e_ptp_cq_stats cq[8];
  struct mlx5e_rq_stats rq;
  long : 64;
  long : 64;
};

struct mlx5e_cee_config {
  u8 pg_bw_pct[8];
  u8 prio_to_pg_map[8];
  bool pfc_setting[8];
  bool pfc_enable;
};

struct mlx5e_dcbx {
  enum mlx5_dcbx_oper_mode mode;
  struct mlx5e_cee_config cee_cfg;
  u8 dscp_app_cnt;
  u8 tc_tsa[8];
  u8 cap;
  bool manual_buffer;
  u32 cable_len;
  u32 xoff;
  u16 port_buff_cell_sz;
};

struct mlx5e_xsk {
  struct xsk_buff_pool** pools;
  u16 refcnt;
  bool ever_used;
};

struct mlx5e_scratchpad {
  cpumask_var_t cpumask;
};

struct mlx5e_htb {
  struct hlist_head qos_tc2node[256];
  long unsigned int qos_used_qids[4];
  struct mlx5e_sq_stats** qos_sq_stats;
  u16 max_qos_sqs;
  u16 maj_id;
  u16 defcls;
};

struct mlx5e_txqsq;

struct mlx5e_trap;

struct mlx5e_profile;

struct mlx5e_priv {
  struct mlx5e_txqsq* txq2sq[1288];
  int channel_tc2realtxq[1024];
  int port_ptp_tc2realtxq[8];
  struct mlx5e_dcbx_dp dcbx_dp;
  u32 msglevel;
  long unsigned int state;
  struct mutex state_lock;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct mlx5e_rq drop_rq;
  struct mlx5e_channels channels;
  u32 tisn[16];
  struct mlx5e_rqt indir_rqt;
  struct mlx5e_tir indir_tir[10];
  struct mlx5e_tir inner_indir_tir[10];
  struct mlx5e_tir direct_tir[128];
  struct mlx5e_tir xsk_tir[128];
  struct mlx5e_tir ptp_tir;
  struct mlx5e_rss_params rss_params;
  u32 tx_rates[1024];
  struct mlx5e_flow_steering fs;
  struct workqueue_struct* wq;
  struct work_struct update_carrier_work;
  struct work_struct set_rx_mode_work;
  struct work_struct tx_timeout_work;
  struct work_struct update_stats_work;
  struct work_struct monitor_counters_work;
  struct mlx5_nb monitor_counters_nb;
  struct mlx5_core_dev* mdev;
  struct net_device* netdev;
  struct mlx5e_trap* en_trap;
  struct mlx5e_stats stats;
  long : 64;
  struct mlx5e_channel_stats channel_stats[128];
  struct mlx5e_channel_stats trap_stats;
  struct mlx5e_ptp_stats ptp_stats;
  u16 stats_nch;
  u16 max_nch;
  u8 max_opened_tc;
  bool tx_ptp_opened;
  bool rx_ptp_opened;
  struct hwtstamp_config tstamp;
  u16 q_counter;
  u16 drop_rq_q_counter;
  struct notifier_block events_nb;
  struct notifier_block blocking_events_nb;
  int num_tc_x_num_ch;
  struct udp_tunnel_nic_info nic_info;
  struct mlx5e_dcbx dcbx;
  const struct mlx5e_profile* profile;
  void* ppriv;
  struct devlink_health_reporter* tx_reporter;
  struct devlink_health_reporter* rx_reporter;
  struct mlx5e_xsk xsk;
  struct mlx5e_scratchpad scratchpad;
  struct mlx5e_htb htb;
};

typedef const struct mlx5e_stats_grp* const mlx5e_stats_grp_t;

enum mlx5e_traffic_types {
  MLX5E_TT_IPV4_TCP = 0,
  MLX5E_TT_IPV6_TCP = 1,
  MLX5E_TT_IPV4_UDP = 2,
  MLX5E_TT_IPV6_UDP = 3,
  MLX5E_TT_IPV4_IPSEC_AH = 4,
  MLX5E_TT_IPV6_IPSEC_AH = 5,
  MLX5E_TT_IPV4_IPSEC_ESP = 6,
  MLX5E_TT_IPV6_IPSEC_ESP = 7,
  MLX5E_TT_IPV4 = 8,
  MLX5E_TT_IPV6 = 9,
  MLX5E_TT_ANY = 10,
  MLX5E_NUM_TT = 11,
  MLX5E_NUM_INDIR_TIRS = 10,
};

enum mlx5e_tunnel_types {
  MLX5E_TT_IPV4_GRE = 0,
  MLX5E_TT_IPV6_GRE = 1,
  MLX5E_TT_IPV4_IPIP = 2,
  MLX5E_TT_IPV6_IPIP = 3,
  MLX5E_TT_IPV4_IPV6 = 4,
  MLX5E_TT_IPV6_IPV6 = 5,
  MLX5E_NUM_TUNNEL_TT = 6,
};

struct mlx5e_tx_wqe {
  struct mlx5_wqe_ctrl_seg ctrl;
  struct mlx5_wqe_eth_seg eth;
  struct mlx5_wqe_data_seg data[0];
};

enum mlx5e_dma_map_type {
  MLX5E_DMA_MAP_SINGLE = 0,
  MLX5E_DMA_MAP_PAGE = 1,
};

struct mlx5e_sq_dma {
  dma_addr_t addr;
  u32 size;
  enum mlx5e_dma_map_type type;
};

struct mlx5e_tx_mpwqe {
  struct mlx5e_tx_wqe* wqe;
  u32 bytes_count;
  u8 ds_count;
  u8 pkt_count;
  u8 inline_on;
};

struct mlx5e_skb_fifo {
  struct sk_buff** fifo;
  u16* pc;
  u16* cc;
  u16 mask;
};

struct mlx5e_tx_wqe_info;

struct mlx5e_ptpsq;

struct mlx5e_txqsq {
  u16 cc;
  u16 skb_fifo_cc;
  u32 dma_fifo_cc;
  struct dim dim;
  u16 pc;
  u16 skb_fifo_pc;
  u32 dma_fifo_pc;
  struct mlx5e_tx_mpwqe mpwqe;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct mlx5e_cq cq;
  struct mlx5_wq_cyc wq;
  u32 dma_fifo_mask;
  struct mlx5e_sq_stats* stats;
  struct {
    struct mlx5e_sq_dma* dma_fifo;
    struct mlx5e_skb_fifo skb_fifo;
    struct mlx5e_tx_wqe_info* wqe_info;
  } db;
  void* uar_map;
  struct netdev_queue* txq;
  u32 sqn;
  u16 stop_room;
  u8 min_inline_mode;
  struct device* pdev;
  __be32 mkey_be;
  long unsigned int state;
  unsigned int hw_mtu;
  struct hwtstamp_config* tstamp;
  struct mlx5_clock* clock;
  struct net_device* netdev;
  struct mlx5_core_dev* mdev;
  struct mlx5e_priv* priv;
  struct mlx5_wq_ctrl wq_ctrl;
  int ch_ix;
  int txq_ix;
  u32 rate_limit;
  struct work_struct recover_work;
  struct mlx5e_ptpsq* ptpsq;
  cqe_ts_to_ns ptp_cyc2time;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum mlx5e_xdp_xmit_mode {
  MLX5E_XDP_XMIT_MODE_FRAME = 0,
  MLX5E_XDP_XMIT_MODE_PAGE = 1,
  MLX5E_XDP_XMIT_MODE_XSK = 2,
};

struct mlx5e_xdp_info {
  enum mlx5e_xdp_xmit_mode mode;
  union {
    struct {
      struct xdp_frame* xdpf;
      dma_addr_t dma_addr;
    } frame;
    struct {
      struct mlx5e_rq* rq;
      struct mlx5e_dma_info di;
    } page;
  };
};

struct mlx5e_xmit_data {
  dma_addr_t dma_addr;
  void* data;
  u32 len;
};

struct mlx5e_xdp_info_fifo {
  struct mlx5e_xdp_info* xi;
  u32* cc;
  u32* pc;
  u32 mask;
};

typedef int (*mlx5e_fp_xmit_xdp_frame_check)(struct mlx5e_xdpsq*);

typedef bool (*mlx5e_fp_xmit_xdp_frame)(
    struct mlx5e_xdpsq*,
    struct mlx5e_xmit_data*,
    struct mlx5e_xdp_info*,
    int);

struct mlx5e_xdp_wqe_info;

struct mlx5e_xdpsq {
  u32 xdpi_fifo_cc;
  u16 cc;
  long : 16;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 xdpi_fifo_pc;
  u16 pc;
  struct mlx5_wqe_ctrl_seg* doorbell_cseg;
  struct mlx5e_tx_mpwqe mpwqe;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct mlx5e_cq cq;
  struct xsk_buff_pool* xsk_pool;
  struct mlx5_wq_cyc wq;
  struct mlx5e_xdpsq_stats* stats;
  mlx5e_fp_xmit_xdp_frame_check xmit_xdp_frame_check;
  mlx5e_fp_xmit_xdp_frame xmit_xdp_frame;
  struct {
    struct mlx5e_xdp_wqe_info* wqe_info;
    struct mlx5e_xdp_info_fifo xdpi_fifo;
  } db;
  void* uar_map;
  u32 sqn;
  struct device* pdev;
  __be32 mkey_be;
  u8 min_inline_mode;
  long unsigned int state;
  unsigned int hw_mtu;
  struct mlx5_wq_ctrl wq_ctrl;
  struct mlx5e_channel* channel;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_ktls_resync_resp;

struct mlx5e_icosq_wqe_info;

struct mlx5e_icosq {
  u16 cc;
  u16 pc;
  struct mlx5_wqe_ctrl_seg* doorbell_cseg;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct mlx5e_cq cq;
  struct {
    struct mlx5e_icosq_wqe_info* wqe_info;
  } db;
  struct mlx5_wq_cyc wq;
  void* uar_map;
  u32 sqn;
  u16 reserved_room;
  long unsigned int state;
  struct mlx5e_ktls_resync_resp* ktls_resync;
  struct mlx5_wq_ctrl wq_ctrl;
  struct mlx5e_channel* channel;
  struct work_struct recover_work;
  long : 64;
};

struct mlx5e_channel {
  struct mlx5e_rq rq;
  struct mlx5e_xdpsq rq_xdpsq;
  struct mlx5e_txqsq sq[8];
  struct mlx5e_icosq icosq;
  struct mlx5e_txqsq** qos_sqs;
  bool xdp;
  struct napi_struct napi;
  struct device* pdev;
  struct net_device* netdev;
  __be32 mkey_be;
  u16 qos_sqs_size;
  u8 num_tc;
  u8 lag_port;
  long : 64;
  struct mlx5e_xdpsq xdpsq;
  struct mlx5e_rq xskrq;
  struct mlx5e_xdpsq xsksq;
  struct mlx5e_icosq async_icosq;
  spinlock_t async_icosq_lock;
  const struct cpumask* aff_mask;
  struct mlx5e_ch_stats* stats;
  struct mlx5e_priv* priv;
  struct mlx5_core_dev* mdev;
  struct hwtstamp_config* tstamp;
  long unsigned int state[1];
  int ix;
  int cpu;
};

struct mlx5e_wqe_frag_info {
  struct mlx5e_dma_info* di;
  u32 offset;
  bool last_in_page;
};

struct mlx5e_umr_dma_info {
  struct mlx5e_dma_info dma_info[64];
};

struct mlx5e_mpw_info {
  struct mlx5e_umr_dma_info umr;
  u16 consumed_strides;
  long unsigned int xdp_xmit_bitmap[1];
};

enum mlx5e_channel_state {
  MLX5E_CHANNEL_STATE_XSK = 0,
  MLX5E_CHANNEL_NUM_STATES = 1,
};

struct mlx5e_rx_handlers;

struct mlx5e_profile {
  int (*init)(struct mlx5_core_dev*, struct net_device*);
  void (*cleanup)(struct mlx5e_priv*);
  int (*init_rx)(struct mlx5e_priv*);
  void (*cleanup_rx)(struct mlx5e_priv*);
  int (*init_tx)(struct mlx5e_priv*);
  void (*cleanup_tx)(struct mlx5e_priv*);
  void (*enable)(struct mlx5e_priv*);
  void (*disable)(struct mlx5e_priv*);
  int (*update_rx)(struct mlx5e_priv*);
  void (*update_stats)(struct mlx5e_priv*);
  void (*update_carrier)(struct mlx5e_priv*);
  unsigned int (*stats_grps_num)(struct mlx5e_priv*);
  mlx5e_stats_grp_t* stats_grps;
  const struct mlx5e_rx_handlers* rx_handlers;
  int max_tc;
  u8 rq_groups;
  bool rx_ptp_support;
};

struct mlx5e_rx_handlers {
  mlx5e_fp_handle_rx_cqe handle_rx_cqe;
  mlx5e_fp_handle_rx_cqe handle_rx_cqe_mpwqe;
};

enum port_module_event_status_type {
  MLX5_MODULE_STATUS_PLUGGED = 1,
  MLX5_MODULE_STATUS_UNPLUGGED = 2,
  MLX5_MODULE_STATUS_ERROR = 3,
  MLX5_MODULE_STATUS_DISABLED = 4,
  MLX5_MODULE_STATUS_NUM = 5,
};

enum port_module_event_error_type {
  MLX5_MODULE_EVENT_ERROR_POWER_BUDGET_EXCEEDED = 0,
  MLX5_MODULE_EVENT_ERROR_LONG_RANGE_FOR_NON_MLNX = 1,
  MLX5_MODULE_EVENT_ERROR_BUS_STUCK = 2,
  MLX5_MODULE_EVENT_ERROR_NO_EEPROM_RETRY_TIMEOUT = 3,
  MLX5_MODULE_EVENT_ERROR_ENFORCE_PART_NUMBER_LIST = 4,
  MLX5_MODULE_EVENT_ERROR_UNKNOWN_IDENTIFIER = 5,
  MLX5_MODULE_EVENT_ERROR_HIGH_TEMPERATURE = 6,
  MLX5_MODULE_EVENT_ERROR_BAD_CABLE = 7,
  MLX5_MODULE_EVENT_ERROR_PCIE_POWER_SLOT_EXCEEDED = 12,
  MLX5_MODULE_EVENT_ERROR_NUM = 13,
};

enum {
  MLX5_ATOMIC_REQ_MODE_BE = 0,
  MLX5_ATOMIC_REQ_MODE_HOST_ENDIANNESS = 1,
};

struct mlx5_reg_host_endianness {
  u8 he;
  u8 rsvd[15];
};

struct mlx5_cmd_prot_block {
  u8 data[512];
  u8 rsvd0[48];
  __be64 next;
  __be32 block_num;
  u8 rsvd1;
  u8 token;
  u8 ctrl_sig;
  u8 sig;
};

enum {
  MLX5_CMD_STAT_OK = 0,
  MLX5_CMD_STAT_INT_ERR = 1,
  MLX5_CMD_STAT_BAD_OP_ERR = 2,
  MLX5_CMD_STAT_BAD_PARAM_ERR = 3,
  MLX5_CMD_STAT_BAD_SYS_STATE_ERR = 4,
  MLX5_CMD_STAT_BAD_RES_ERR = 5,
  MLX5_CMD_STAT_RES_BUSY = 6,
  MLX5_CMD_STAT_LIM_ERR = 8,
  MLX5_CMD_STAT_BAD_RES_STATE_ERR = 9,
  MLX5_CMD_STAT_IX_ERR = 10,
  MLX5_CMD_STAT_NO_RES_ERR = 15,
  MLX5_CMD_STAT_BAD_INP_LEN_ERR = 80,
  MLX5_CMD_STAT_BAD_OUTP_LEN_ERR = 81,
  MLX5_CMD_STAT_BAD_QP_STATE_ERR = 16,
  MLX5_CMD_STAT_BAD_PKT_ERR = 48,
  MLX5_CMD_STAT_BAD_SIZE_OUTS_CQES_ERR = 64,
};

enum {
  CMD_OWNER_SW = 0,
  CMD_OWNER_HW = 1,
  CMD_STATUS_SUCCESS = 0,
};

enum {
  MLX5_CMD_ENT_STATE_PENDING_COMP = 0,
};

enum {
  CMD_ALLOWED_OPCODE_ALL = 0,
};

struct mlx5_async_ctx {
  struct mlx5_core_dev* dev;
  atomic_t num_inflight;
  struct wait_queue_head wait;
};

struct mlx5_async_work;

typedef void (*mlx5_async_cbk_t)(int, struct mlx5_async_work*);

struct mlx5_async_work {
  struct mlx5_async_ctx* ctx;
  mlx5_async_cbk_t user_callback;
};

enum {
  MLX5_TRIGGERED_CMD_COMP = 0,
};

enum {
  MLX5_CMD_DATA = 0,
  MLX5_CMD_TIME = 1,
};

enum {
  CMD_IF_REV = 5,
};

enum {
  CMD_MODE_POLLING = 0,
  CMD_MODE_EVENTS = 1,
};

enum {
  MLX5_CMD_DELIVERY_STAT_OK = 0,
  MLX5_CMD_DELIVERY_STAT_SIGNAT_ERR = 1,
  MLX5_CMD_DELIVERY_STAT_TOK_ERR = 2,
  MLX5_CMD_DELIVERY_STAT_BAD_BLK_NUM_ERR = 3,
  MLX5_CMD_DELIVERY_STAT_OUT_PTR_ALIGN_ERR = 4,
  MLX5_CMD_DELIVERY_STAT_IN_PTR_ALIGN_ERR = 5,
  MLX5_CMD_DELIVERY_STAT_FW_ERR = 6,
  MLX5_CMD_DELIVERY_STAT_IN_LENGTH_ERR = 7,
  MLX5_CMD_DELIVERY_STAT_OUT_LENGTH_ERR = 8,
  MLX5_CMD_DELIVERY_STAT_RES_FLD_NOT_CLR_ERR = 9,
  MLX5_CMD_DELIVERY_STAT_CMD_DESCR_ERR = 16,
};

struct mlx5_ifc_mbox_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_mbox_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

enum {
  MLX5_CMD_TIMEOUT_RECOVER_MSEC = 5000,
};

struct mlx5_ifc_ads_bits {
  u8 fl[1];
  u8 free_ar[1];
  u8 reserved_at_2[14];
  u8 pkey_index[16];
  u8 reserved_at_20[8];
  u8 grh[1];
  u8 mlid[7];
  u8 rlid[16];
  u8 ack_timeout[5];
  u8 reserved_at_45[3];
  u8 src_addr_index[8];
  u8 reserved_at_50[4];
  u8 stat_rate[4];
  u8 hop_limit[8];
  u8 reserved_at_60[4];
  u8 tclass[8];
  u8 flow_label[20];
  u8 rgid_rip[128];
  u8 reserved_at_100[4];
  u8 f_dscp[1];
  u8 f_ecn[1];
  u8 reserved_at_106[1];
  u8 f_eth_prio[1];
  u8 ecn[2];
  u8 dscp[6];
  u8 udp_sport[16];
  u8 dei_cfi[1];
  u8 eth_prio[3];
  u8 sl[4];
  u8 vhca_port_num[8];
  u8 rmac_47_32[16];
  u8 rmac_31_0[32];
};

struct mlx5_ifc_qpc_bits {
  u8 state[4];
  u8 lag_tx_port_affinity[4];
  u8 st[8];
  u8 reserved_at_10[3];
  u8 pm_state[2];
  u8 reserved_at_15[1];
  u8 req_e2e_credit_mode[2];
  u8 offload_type[4];
  u8 end_padding_mode[2];
  u8 reserved_at_1e[2];
  u8 wq_signature[1];
  u8 block_lb_mc[1];
  u8 atomic_like_write_en[1];
  u8 latency_sensitive[1];
  u8 reserved_at_24[1];
  u8 drain_sigerr[1];
  u8 reserved_at_26[2];
  u8 pd[24];
  u8 mtu[3];
  u8 log_msg_max[5];
  u8 reserved_at_48[1];
  u8 log_rq_size[4];
  u8 log_rq_stride[3];
  u8 no_sq[1];
  u8 log_sq_size[4];
  u8 reserved_at_55[3];
  u8 ts_format[2];
  u8 reserved_at_5a[1];
  u8 rlky[1];
  u8 ulp_stateless_offload_mode[4];
  u8 counter_set_id[8];
  u8 uar_page[24];
  u8 reserved_at_80[8];
  u8 user_index[24];
  u8 reserved_at_a0[3];
  u8 log_page_size[5];
  u8 remote_qpn[24];
  struct mlx5_ifc_ads_bits primary_address_path;
  struct mlx5_ifc_ads_bits secondary_address_path;
  u8 log_ack_req_freq[4];
  u8 reserved_at_384[4];
  u8 log_sra_max[3];
  u8 reserved_at_38b[2];
  u8 retry_count[3];
  u8 rnr_retry[3];
  u8 reserved_at_393[1];
  u8 fre[1];
  u8 cur_rnr_retry[3];
  u8 cur_retry_count[3];
  u8 reserved_at_39b[5];
  u8 reserved_at_3a0[32];
  u8 reserved_at_3c0[8];
  u8 next_send_psn[24];
  u8 reserved_at_3e0[8];
  u8 cqn_snd[24];
  u8 reserved_at_400[8];
  u8 deth_sqpn[24];
  u8 reserved_at_420[32];
  u8 reserved_at_440[8];
  u8 last_acked_psn[24];
  u8 reserved_at_460[8];
  u8 ssn[24];
  u8 reserved_at_480[8];
  u8 log_rra_max[3];
  u8 reserved_at_48b[1];
  u8 atomic_mode[4];
  u8 rre[1];
  u8 rwe[1];
  u8 rae[1];
  u8 reserved_at_493[1];
  u8 page_offset[6];
  u8 reserved_at_49a[3];
  u8 cd_slave_receive[1];
  u8 cd_slave_send[1];
  u8 cd_master[1];
  u8 reserved_at_4a0[3];
  u8 min_rnr_nak[5];
  u8 next_rcv_psn[24];
  u8 reserved_at_4c0[8];
  u8 xrcd[24];
  u8 reserved_at_4e0[8];
  u8 cqn_rcv[24];
  u8 dbr_addr[64];
  u8 q_key[32];
  u8 reserved_at_560[5];
  u8 rq_type[3];
  u8 srqn_rmpn_xrqn[24];
  u8 reserved_at_580[8];
  u8 rmsn[24];
  u8 hw_sq_wqebb_counter[16];
  u8 sw_sq_wqebb_counter[16];
  u8 hw_rq_counter[32];
  u8 sw_rq_counter[32];
  u8 reserved_at_600[32];
  u8 reserved_at_620[15];
  u8 cgs[1];
  u8 cs_req[8];
  u8 cs_res[8];
  u8 dc_access_key[64];
  u8 reserved_at_680[3];
  u8 dbr_umem_valid[1];
  u8 reserved_at_684[188];
};

struct mlx5_ifc_eqc_bits {
  u8 status[4];
  u8 reserved_at_4[9];
  u8 ec[1];
  u8 oi[1];
  u8 reserved_at_f[5];
  u8 st[4];
  u8 reserved_at_18[8];
  u8 reserved_at_20[32];
  u8 reserved_at_40[20];
  u8 page_offset[6];
  u8 reserved_at_5a[6];
  u8 reserved_at_60[3];
  u8 log_eq_size[5];
  u8 uar_page[24];
  u8 reserved_at_80[32];
  u8 reserved_at_a0[24];
  u8 intr[8];
  u8 reserved_at_c0[3];
  u8 log_page_size[5];
  u8 reserved_at_c8[24];
  u8 reserved_at_e0[96];
  u8 reserved_at_140[8];
  u8 consumer_counter[24];
  u8 reserved_at_160[8];
  u8 producer_counter[24];
  u8 reserved_at_180[128];
};

struct mlx5_ifc_cqc_bits {
  u8 status[4];
  u8 reserved_at_4[2];
  u8 dbr_umem_valid[1];
  u8 apu_thread_cq[1];
  u8 cqe_sz[3];
  u8 cc[1];
  u8 reserved_at_c[1];
  u8 scqe_break_moderation_en[1];
  u8 oi[1];
  u8 cq_period_mode[2];
  u8 cqe_comp_en[1];
  u8 mini_cqe_res_format[2];
  u8 st[4];
  u8 reserved_at_18[8];
  u8 reserved_at_20[32];
  u8 reserved_at_40[20];
  u8 page_offset[6];
  u8 reserved_at_5a[6];
  u8 reserved_at_60[3];
  u8 log_cq_size[5];
  u8 uar_page[24];
  u8 reserved_at_80[4];
  u8 cq_period[12];
  u8 cq_max_count[16];
  u8 reserved_at_a0[24];
  u8 c_eqn[8];
  u8 reserved_at_c0[3];
  u8 log_page_size[5];
  u8 reserved_at_c8[24];
  u8 reserved_at_e0[32];
  u8 reserved_at_100[8];
  u8 last_notified_index[24];
  u8 reserved_at_120[8];
  u8 last_solicit_index[24];
  u8 reserved_at_140[8];
  u8 consumer_counter[24];
  u8 reserved_at_160[8];
  u8 producer_counter[24];
  u8 reserved_at_180[64];
  u8 dbr_addr[64];
};

struct mlx5_ifc_query_qp_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 qpn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_query_eq_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[24];
  u8 eq_number[8];
  u8 reserved_at_60[32];
};

enum mlx5_res_type {
  MLX5_RES_QP = 0,
  MLX5_RES_RQ = 1,
  MLX5_RES_SQ = 2,
  MLX5_RES_SRQ = 3,
  MLX5_RES_XSRQ = 4,
  MLX5_RES_XRQ = 5,
  MLX5_RES_DCT = 6,
};

struct mlx5_core_rsc_common {
  enum mlx5_res_type res;
  refcount_t refcount;
  struct completion free;
};

enum mlx5_qp_state {
  MLX5_QP_STATE_RST = 0,
  MLX5_QP_STATE_INIT = 1,
  MLX5_QP_STATE_RTR = 2,
  MLX5_QP_STATE_RTS = 3,
  MLX5_QP_STATE_SQER = 4,
  MLX5_QP_STATE_SQD = 5,
  MLX5_QP_STATE_ERR = 6,
  MLX5_QP_STATE_SQ_DRAINING = 7,
  MLX5_QP_STATE_SUSPENDED = 9,
  MLX5_QP_NUM_STATE = 10,
  MLX5_QP_STATE = 11,
  MLX5_QP_STATE_BAD = 12,
};

enum {
  MLX5_QP_ST_RC = 0,
  MLX5_QP_ST_UC = 1,
  MLX5_QP_ST_UD = 2,
  MLX5_QP_ST_XRC = 3,
  MLX5_QP_ST_MLX = 4,
  MLX5_QP_ST_DCI = 5,
  MLX5_QP_ST_DCT = 6,
  MLX5_QP_ST_QP0 = 7,
  MLX5_QP_ST_QP1 = 8,
  MLX5_QP_ST_RAW_ETHERTYPE = 9,
  MLX5_QP_ST_RAW_IPV6 = 10,
  MLX5_QP_ST_SNIFFER = 11,
  MLX5_QP_ST_SYNC_UMR = 14,
  MLX5_QP_ST_PTP_1588 = 13,
  MLX5_QP_ST_REG_UMR = 12,
  MLX5_QP_ST_MAX = 13,
};

struct mlx5_core_qp {
  struct mlx5_core_rsc_common common;
  void (*event)(struct mlx5_core_qp*, int);
  int qpn;
  struct mlx5_rsc_debug* dbg;
  int pid;
  u16 uid;
};

enum {
  QP_PID = 0,
  QP_STATE = 1,
  QP_XPORT = 2,
  QP_MTU = 3,
  QP_N_RECV = 4,
  QP_RECV_SZ = 5,
  QP_N_SEND = 6,
  QP_LOG_PG_SZ = 7,
  QP_RQPN = 8,
};

enum {
  EQ_NUM_EQES = 0,
  EQ_INTR = 1,
  EQ_LOG_PG_SZ = 2,
};

enum {
  CQ_PID = 0,
  CQ_NUM_CQES = 1,
  CQ_LOG_PG_SZ = 2,
};

enum {
  MLX5_GENERAL_OBJ_TYPES_CAP_SW_ICM = 256,
  MLX5_GENERAL_OBJ_TYPES_CAP_GENEVE_TLV_OPT = 2048,
  MLX5_GENERAL_OBJ_TYPES_CAP_VIRTIO_NET_Q = 8192,
};

struct mlx5_ifc_query_adapter_param_block_bits {
  u8 reserved_at_0[192];
  u8 reserved_at_c0[8];
  u8 ieee_vendor_id[24];
  u8 reserved_at_e0[16];
  u8 vsd_vendor_id[16];
  u8 vsd[1664];
  u8 vsd_contd_psid[128];
};

enum {
  MLX5_TEARDOWN_HCA_OUT_FORCE_STATE_SUCCESS = 0,
  MLX5_TEARDOWN_HCA_OUT_FORCE_STATE_FAIL = 1,
};

struct mlx5_ifc_teardown_hca_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[63];
  u8 state[1];
};

enum {
  MLX5_TEARDOWN_HCA_IN_PROFILE_GRACEFUL_CLOSE = 0,
  MLX5_TEARDOWN_HCA_IN_PROFILE_FORCE_CLOSE = 1,
  MLX5_TEARDOWN_HCA_IN_PROFILE_PREPARE_FAST_TEARDOWN = 2,
};

struct mlx5_ifc_teardown_hca_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[16];
  u8 profile[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_query_adapter_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
  struct mlx5_ifc_query_adapter_param_block_bits query_adapter_struct;
};

struct mlx5_ifc_query_adapter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_init_hca_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
  u8 sw_owner_id[128];
};

struct mlx5_ifc_mcam_enhanced_features_bits {
  u8 reserved_at_0[107];
  u8 ptpcyc2realtime_modify[1];
  u8 reserved_at_6c[2];
  u8 pci_status_and_power[1];
  u8 reserved_at_6f[5];
  u8 mark_tx_action_cnp[1];
  u8 mark_tx_action_cqe[1];
  u8 dynamic_tx_overflow[1];
  u8 reserved_at_77[4];
  u8 pcie_outbound_stalled[1];
  u8 tx_overflow_buffer_pkt[1];
  u8 mtpps_enh_out_per_adj[1];
  u8 mtpps_fs[1];
  u8 pcie_performance_group[1];
};

struct mlx5_ifc_mcam_access_reg_bits {
  u8 reserved_at_0[28];
  u8 mcda[1];
  u8 mcc[1];
  u8 mcqi[1];
  u8 mcqs[1];
  u8 regs_95_to_87[9];
  u8 mpegc[1];
  u8 mtutc[1];
  u8 regs_84_to_68[17];
  u8 tracer_registers[4];
  u8 regs_63_to_32[32];
  u8 regs_31_to_0[32];
};

struct mlx5_ifc_mcam_access_reg_bits1 {
  u8 regs_127_to_96[32];
  u8 regs_95_to_64[32];
  u8 regs_63_to_32[32];
  u8 regs_31_to_0[32];
};

struct mlx5_ifc_mcam_access_reg_bits2 {
  u8 regs_127_to_99[29];
  u8 mirc[1];
  u8 regs_97_to_96[2];
  u8 regs_95_to_64[32];
  u8 regs_63_to_32[32];
  u8 regs_31_to_0[32];
};

struct mlx5_ifc_mcam_reg_bits {
  u8 reserved_at_0[8];
  u8 feature_group[8];
  u8 reserved_at_10[8];
  u8 access_reg_group[8];
  u8 reserved_at_20[32];
  union {
    struct mlx5_ifc_mcam_access_reg_bits access_regs;
    struct mlx5_ifc_mcam_access_reg_bits1 access_regs1;
    struct mlx5_ifc_mcam_access_reg_bits2 access_regs2;
    u8 reserved_at_0[128];
  } mng_access_reg_cap_mask;
  u8 reserved_at_c0[128];
  union {
    struct mlx5_ifc_mcam_enhanced_features_bits enhanced_features;
    u8 reserved_at_0[128];
  } mng_feature_cap_mask;
  u8 reserved_at_1c0[128];
};

struct mlx5_ifc_mcqs_reg_bits {
  u8 last_index_flag[1];
  u8 reserved_at_1[7];
  u8 fw_device[8];
  u8 component_index[16];
  u8 reserved_at_20[16];
  u8 identifier[16];
  u8 reserved_at_40[23];
  u8 component_status[5];
  u8 component_update_state[4];
  u8 last_update_state_changer_type[4];
  u8 last_update_state_changer_host_id[4];
  u8 reserved_at_68[24];
};

struct mlx5_ifc_mcqi_cap_bits {
  u8 supported_info_bitmask[32];
  u8 component_size[32];
  u8 max_component_size[32];
  u8 log_mcda_word_size[4];
  u8 reserved_at_64[12];
  u8 mcda_max_write_size[16];
  u8 rd_en[1];
  u8 reserved_at_81[1];
  u8 match_chip_id[1];
  u8 match_psid[1];
  u8 check_user_timestamp[1];
  u8 match_base_guid_mac[1];
  u8 reserved_at_86[26];
};

struct mlx5_ifc_mcqi_version_bits {
  u8 reserved_at_0[2];
  u8 build_time_valid[1];
  u8 user_defined_time_valid[1];
  u8 reserved_at_4[20];
  u8 version_string_length[8];
  u8 version[32];
  u8 build_time[64];
  u8 user_defined_time[64];
  u8 build_tool_version[32];
  u8 reserved_at_e0[32];
  u8 version_string[736];
};

struct mlx5_ifc_mcqi_activation_method_bits {
  u8 pending_server_ac_power_cycle[1];
  u8 pending_server_dc_power_cycle[1];
  u8 pending_server_reboot[1];
  u8 pending_fw_reset[1];
  u8 auto_activate[1];
  u8 all_hosts_sync[1];
  u8 device_hw_reset[1];
  u8 reserved_at_7[25];
};

union mlx5_ifc_mcqi_reg_data_bits {
  struct mlx5_ifc_mcqi_cap_bits mcqi_caps;
  struct mlx5_ifc_mcqi_version_bits mcqi_version;
  struct mlx5_ifc_mcqi_activation_method_bits mcqi_activation_mathod;
};

struct mlx5_ifc_mcqi_reg_bits {
  u8 read_pending_component[1];
  u8 reserved_at_1[15];
  u8 component_index[16];
  u8 reserved_at_20[32];
  u8 reserved_at_40[27];
  u8 info_type[5];
  u8 info_size[32];
  u8 offset[32];
  u8 reserved_at_a0[16];
  u8 data_size[16];
  union mlx5_ifc_mcqi_reg_data_bits data[0];
};

struct mlx5_ifc_mcc_reg_bits {
  u8 reserved_at_0[4];
  u8 time_elapsed_since_last_cmd[12];
  u8 reserved_at_10[8];
  u8 instruction[8];
  u8 reserved_at_20[16];
  u8 component_index[16];
  u8 reserved_at_40[8];
  u8 update_handle[24];
  u8 handle_owner_type[4];
  u8 handle_owner_host_id[4];
  u8 reserved_at_68[1];
  u8 control_progress[7];
  u8 error_code[8];
  u8 reserved_at_78[4];
  u8 control_state[4];
  u8 component_size[32];
  u8 reserved_at_a0[96];
};

struct mlx5_ifc_mcda_reg_bits {
  u8 reserved_at_0[8];
  u8 update_handle[24];
  u8 offset[32];
  u8 reserved_at_40[16];
  u8 size[16];
  u8 reserved_at_60[32];
  u8 data[0];
};

struct mlx5_ifc_mirc_reg_bits {
  u8 reserved_at_0[24];
  u8 status_code[8];
  u8 reserved_at_20[32];
};

enum mlx5_pcam_reg_groups {
  MLX5_PCAM_REGS_5000_TO_507F = 0,
};

enum mlx5_pcam_feature_groups {
  MLX5_PCAM_FEATURE_ENHANCED_FEATURES = 0,
};

enum mlx5_mcam_feature_groups {
  MLX5_MCAM_FEATURE_ENHANCED_FEATURES = 0,
};

enum mlx5_qcam_reg_groups {
  MLX5_QCAM_REGS_FIRST_128 = 0,
};

enum mlx5_qcam_feature_groups {
  MLX5_QCAM_FEATURE_ENHANCED_FEATURES = 0,
};

enum {
  MLX5_NIC_IFC_FULL = 0,
  MLX5_NIC_IFC_DISABLED = 1,
  MLX5_NIC_IFC_NO_DRAM_NIC = 2,
  MLX5_NIC_IFC_SW_RESET = 7,
};

struct mlxfw_dev_ops;

struct mlxfw_dev {
  const struct mlxfw_dev_ops* ops;
  const char* psid;
  u16 psid_size;
  struct devlink* devlink;
};

enum mlxfw_fsm_state {
  MLXFW_FSM_STATE_IDLE = 0,
  MLXFW_FSM_STATE_LOCKED = 1,
  MLXFW_FSM_STATE_INITIALIZE = 2,
  MLXFW_FSM_STATE_DOWNLOAD = 3,
  MLXFW_FSM_STATE_VERIFY = 4,
  MLXFW_FSM_STATE_APPLY = 5,
  MLXFW_FSM_STATE_ACTIVATE = 6,
};

enum mlxfw_fsm_state_err {
  MLXFW_FSM_STATE_ERR_OK = 0,
  MLXFW_FSM_STATE_ERR_ERROR = 1,
  MLXFW_FSM_STATE_ERR_REJECTED_DIGEST_ERR = 2,
  MLXFW_FSM_STATE_ERR_REJECTED_NOT_APPLICABLE = 3,
  MLXFW_FSM_STATE_ERR_REJECTED_UNKNOWN_KEY = 4,
  MLXFW_FSM_STATE_ERR_REJECTED_AUTH_FAILED = 5,
  MLXFW_FSM_STATE_ERR_REJECTED_UNSIGNED = 6,
  MLXFW_FSM_STATE_ERR_REJECTED_KEY_NOT_APPLICABLE = 7,
  MLXFW_FSM_STATE_ERR_REJECTED_BAD_FORMAT = 8,
  MLXFW_FSM_STATE_ERR_BLOCKED_PENDING_RESET = 9,
  MLXFW_FSM_STATE_ERR_MAX = 10,
};

struct mlxfw_dev_ops {
  int (*component_query)(struct mlxfw_dev*, u16, u32*, u8*, u16*);
  int (*fsm_lock)(struct mlxfw_dev*, u32*);
  int (*fsm_component_update)(struct mlxfw_dev*, u32, u16, u32);
  int (*fsm_block_download)(struct mlxfw_dev*, u32, u8*, u16, u32);
  int (*fsm_component_verify)(struct mlxfw_dev*, u32, u16);
  int (*fsm_activate)(struct mlxfw_dev*, u32);
  int (*fsm_reactivate)(struct mlxfw_dev*, u8*);
  int (*fsm_query_state)(
      struct mlxfw_dev*,
      u32,
      enum mlxfw_fsm_state*,
      enum mlxfw_fsm_state_err*);
  void (*fsm_cancel)(struct mlxfw_dev*, u32);
  void (*fsm_release)(struct mlxfw_dev*, u32);
};

enum mlxfw_fsm_reactivate_status {
  MLXFW_FSM_REACTIVATE_STATUS_OK = 0,
  MLXFW_FSM_REACTIVATE_STATUS_BUSY = 1,
  MLXFW_FSM_REACTIVATE_STATUS_PROHIBITED_FW_VER_ERR = 2,
  MLXFW_FSM_REACTIVATE_STATUS_FIRST_PAGE_COPY_FAILED = 3,
  MLXFW_FSM_REACTIVATE_STATUS_FIRST_PAGE_ERASE_FAILED = 4,
  MLXFW_FSM_REACTIVATE_STATUS_FIRST_PAGE_RESTORE_FAILED = 5,
  MLXFW_FSM_REACTIVATE_STATUS_CANDIDATE_FW_DEACTIVATION_FAILED = 6,
  MLXFW_FSM_REACTIVATE_STATUS_FW_ALREADY_ACTIVATED = 7,
  MLXFW_FSM_REACTIVATE_STATUS_ERR_DEVICE_RESET_REQUIRED = 8,
  MLXFW_FSM_REACTIVATE_STATUS_ERR_FW_PROGRAMMING_NEEDED = 9,
  MLXFW_FSM_REACTIVATE_STATUS_MAX = 10,
};

enum {
  MCQS_IDENTIFIER_BOOT_IMG = 1,
  MCQS_IDENTIFIER_OEM_NVCONFIG = 4,
  MCQS_IDENTIFIER_MLNX_NVCONFIG = 5,
  MCQS_IDENTIFIER_CS_TOKEN = 6,
  MCQS_IDENTIFIER_DBG_TOKEN = 7,
  MCQS_IDENTIFIER_GEARBOX = 10,
};

enum {
  MCQS_UPDATE_STATE_IDLE = 0,
  MCQS_UPDATE_STATE_IN_PROGRESS = 1,
  MCQS_UPDATE_STATE_APPLIED = 2,
  MCQS_UPDATE_STATE_ACTIVE = 3,
  MCQS_UPDATE_STATE_ACTIVE_PENDING_RESET = 4,
  MCQS_UPDATE_STATE_FAILED = 5,
  MCQS_UPDATE_STATE_CANCELED = 6,
  MCQS_UPDATE_STATE_BUSY = 7,
};

enum {
  MCQI_INFO_TYPE_CAPABILITIES = 0,
  MCQI_INFO_TYPE_VERSION = 1,
  MCQI_INFO_TYPE_ACTIVATION_METHOD = 5,
};

enum {
  MCQI_FW_RUNNING_VERSION = 0,
  MCQI_FW_STORED_VERSION = 1,
};

enum mlxsw_reg_mcc_instruction {
  MLX5_REG_MCC_INSTRUCTION_LOCK_UPDATE_HANDLE = 1,
  MLX5_REG_MCC_INSTRUCTION_RELEASE_UPDATE_HANDLE = 2,
  MLX5_REG_MCC_INSTRUCTION_UPDATE_COMPONENT = 3,
  MLX5_REG_MCC_INSTRUCTION_VERIFY_COMPONENT = 4,
  MLX5_REG_MCC_INSTRUCTION_ACTIVATE = 6,
  MLX5_REG_MCC_INSTRUCTION_CANCEL = 8,
};

struct mlx5_mlxfw_dev {
  struct mlxfw_dev mlxfw_dev;
  struct mlx5_core_dev* mlx5_core_dev;
};

enum {
  MLX5_SHARED_RESOURCE_UID = 65535,
};

struct mlx5_ifc_destroy_eq_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[24];
  u8 eq_number[8];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_eq_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[24];
  u8 eq_number[8];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_eq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
  struct mlx5_ifc_eqc_bits eq_context_entry;
  u8 reserved_at_280[64];
  u8 event_bitmask[256];
  u8 reserved_at_3c0[1216];
  u8 pas[0];
};

struct mlx5_eq_param {
  u8 irq_index;
  int nent;
  u64 mask[4];
};

struct mlx5_eq_async {
  struct mlx5_eq core;
  struct notifier_block irq_nb;
  spinlock_t lock;
};

struct mlx5_eq_table {
  struct list_head comp_eqs_list;
  struct mlx5_eq_async pages_eq;
  struct mlx5_eq_async cmd_eq;
  struct mlx5_eq_async async_eq;
  struct atomic_notifier_head nh[256];
  struct mlx5_nb cq_err_nb;
  struct mutex lock;
  int num_comp_eqs;
  struct mlx5_irq_table* irq_table;
};

enum {
  MLX5_COMP_EQ_SIZE = 1024,
};

enum {
  MLX5_EQE_OWNER_INIT_VAL = 1,
};

enum {
  MLX5_EQ_DOORBEL_OFFSET = 64,
};

enum {
  MLX5_EQ_POLLING_BUDGET = 128,
};

enum async_eq_nb_action {
  ASYNC_EQ_IRQ_HANDLER = 0,
  ASYNC_EQ_RECOVER = 1,
};

struct mlx5_ifc_dealloc_uar_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 uar[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_uar_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 uar[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_uar_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

enum {
  MLX5_BFREGS_PER_UAR = 4,
  MLX5_MAX_UARS = 256,
  MLX5_NON_FP_BFREGS_PER_UAR = 2,
  MLX5_FP_BFREGS_PER_UAR = 2,
  MLX5_MAX_BFREGS = 512,
  MLX5_UARS_IN_PAGE = 1,
  MLX5_NON_FP_BFREGS_IN_PAGE = 2,
  MLX5_MIN_DYN_BFREGS = 512,
  MLX5_MAX_DYN_BFREGS = 1024,
};

struct mlx5_ifc_query_pages_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 embedded_cpu_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 num_pages[32];
};

enum {
  MLX5_QUERY_PAGES_IN_OP_MOD_BOOT_PAGES = 1,
  MLX5_QUERY_PAGES_IN_OP_MOD_INIT_PAGES = 2,
  MLX5_QUERY_PAGES_IN_OP_MOD_REGULAR_PAGES = 3,
};

struct mlx5_ifc_query_pages_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 embedded_cpu_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_manage_pages_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 output_num_entries[32];
  u8 reserved_at_60[32];
  u8 pas[0];
};

struct mlx5_ifc_manage_pages_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 embedded_cpu_function[1];
  u8 reserved_at_41[15];
  u8 function_id[16];
  u8 input_num_entries[32];
  u8 pas[0];
};

enum {
  MLX5_PAGES_CANT_GIVE = 0,
  MLX5_PAGES_GIVE = 1,
  MLX5_PAGES_TAKE = 2,
};

struct mlx5_pages_req {
  struct mlx5_core_dev* dev;
  u16 func_id;
  u8 ec_function;
  s32 npages;
  struct work_struct work;
  u8 release_all;
};

struct fw_page {
  struct rb_node rb_node;
  u64 addr;
  struct page* page;
  u32 function;
  long unsigned int bitmask;
  struct list_head list;
  unsigned int free_count;
};

enum {
  MAX_RECLAIM_TIME_MSECS = 5000,
  MAX_RECLAIM_VFS_PAGES_TIME_MSECS = 120000,
};

enum {
  MLX5_MAX_RECLAIM_TIME_MILI = 5000,
  MLX5_NUM_4K_IN_PAGE = 1,
};

enum {
  EC_FUNCTION_MASK = 32768,
  RELEASE_ALL_PAGES_MASK = 16384,
};

enum {
  MLX5_BLKS_FOR_RECLAIM_PAGES = 12,
};

enum mlx5_fatal_assert_bit_offsets {
  MLX5_RFR_OFFSET = 31,
};

enum mlx5_initializing_bit_offsets {
  MLX5_FW_RESET_SUPPORTED_OFFSET = 30,
};

enum mlx5_cmd_addr_l_sz_offset {
  MLX5_NIC_IFC_OFFSET = 8,
};

enum mlx5_dev_event {
  MLX5_DEV_EVENT_SYS_ERROR = 128,
  MLX5_DEV_EVENT_PORT_AFFINITY = 129,
};

enum mlx5_semaphore_space_address {
  MLX5_SEMAPHORE_SPACE_DOMAIN = 10,
  MLX5_SEMAPHORE_SW_RESET = 32,
};

enum mlx5_vsc_state {
  MLX5_VSC_UNLOCK = 0,
  MLX5_VSC_LOCK = 1,
};

enum {
  MLX5_HEALTH_POLL_INTERVAL = 2000,
  MAX_MISSES = 3,
};

enum {
  MLX5_HEALTH_SYNDR_FW_ERR = 1,
  MLX5_HEALTH_SYNDR_IRISC_ERR = 7,
  MLX5_HEALTH_SYNDR_HW_UNRECOVERABLE_ERR = 8,
  MLX5_HEALTH_SYNDR_CRC_ERR = 9,
  MLX5_HEALTH_SYNDR_FETCH_PCI_ERR = 10,
  MLX5_HEALTH_SYNDR_HW_FTL_ERR = 11,
  MLX5_HEALTH_SYNDR_ASYNC_EQ_OVERRUN_ERR = 12,
  MLX5_HEALTH_SYNDR_EQ_ERR = 13,
  MLX5_HEALTH_SYNDR_EQ_INV = 14,
  MLX5_HEALTH_SYNDR_FFSER_ERR = 15,
  MLX5_HEALTH_SYNDR_HIGH_TEMP = 16,
};

enum {
  MLX5_DROP_NEW_HEALTH_WORK = 0,
};

enum {
  MLX5_SENSOR_NO_ERR = 0,
  MLX5_SENSOR_PCI_COMM_ERR = 1,
  MLX5_SENSOR_PCI_ERR = 2,
  MLX5_SENSOR_NIC_DISABLED = 3,
  MLX5_SENSOR_NIC_SW_RESET = 4,
  MLX5_SENSOR_FW_SYND_RFR = 5,
};

struct mlx5_fw_reporter_ctx {
  u8 err_synd;
  int miss_counter;
};

struct mlx5_ifc_detach_from_mcg_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 qpn[24];
  u8 reserved_at_60[32];
  u8 multicast_gid[128];
};

struct mlx5_ifc_attach_to_mcg_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 qpn[24];
  u8 reserved_at_60[32];
  u8 multicast_gid[128];
};

struct mlx5_ifc_resize_field_select_bits {
  u8 resize_field_select[32];
};

struct mlx5_ifc_modify_field_select_bits {
  u8 modify_field_select[32];
};

union mlx5_ifc_modify_field_select_resize_field_select_auto_bits {
  struct mlx5_ifc_modify_field_select_bits modify_field_select;
  struct mlx5_ifc_resize_field_select_bits resize_field_select;
  u8 reserved_at_0[32];
};

struct mlx5_ifc_query_cq_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 cqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_modify_cq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 cqn[24];
  union mlx5_ifc_modify_field_select_resize_field_select_auto_bits
      modify_field_select_resize_field_select;
  struct mlx5_ifc_cqc_bits cq_context;
  u8 reserved_at_280[96];
  u8 cq_umem_valid[1];
  u8 reserved_at_2e1[31];
  u8 reserved_at_300[1408];
  u8 pas[0];
};

struct mlx5_ifc_destroy_cq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 cqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_cq_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 cqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_cq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
  struct mlx5_ifc_cqc_bits cq_context;
  u8 reserved_at_280[96];
  u8 cq_umem_valid[1];
  u8 reserved_at_2e1[1439];
  u8 pas[0];
};

enum {
  MLX5_CQ_MODIFY_PERIOD = 1,
  MLX5_CQ_MODIFY_COUNT = 2,
  MLX5_CQ_MODIFY_OVERRUN = 4,
};

struct mlx5_db_pgdir {
  struct list_head list;
  long unsigned int* bitmap;
  __be32* db_page;
  dma_addr_t db_dma;
};

struct mlx5_ifc_phys_layer_cntrs_bits {
  u8 time_since_last_clear_high[32];
  u8 time_since_last_clear_low[32];
  u8 symbol_errors_high[32];
  u8 symbol_errors_low[32];
  u8 sync_headers_errors_high[32];
  u8 sync_headers_errors_low[32];
  u8 edpl_bip_errors_lane0_high[32];
  u8 edpl_bip_errors_lane0_low[32];
  u8 edpl_bip_errors_lane1_high[32];
  u8 edpl_bip_errors_lane1_low[32];
  u8 edpl_bip_errors_lane2_high[32];
  u8 edpl_bip_errors_lane2_low[32];
  u8 edpl_bip_errors_lane3_high[32];
  u8 edpl_bip_errors_lane3_low[32];
  u8 fc_fec_corrected_blocks_lane0_high[32];
  u8 fc_fec_corrected_blocks_lane0_low[32];
  u8 fc_fec_corrected_blocks_lane1_high[32];
  u8 fc_fec_corrected_blocks_lane1_low[32];
  u8 fc_fec_corrected_blocks_lane2_high[32];
  u8 fc_fec_corrected_blocks_lane2_low[32];
  u8 fc_fec_corrected_blocks_lane3_high[32];
  u8 fc_fec_corrected_blocks_lane3_low[32];
  u8 fc_fec_uncorrectable_blocks_lane0_high[32];
  u8 fc_fec_uncorrectable_blocks_lane0_low[32];
  u8 fc_fec_uncorrectable_blocks_lane1_high[32];
  u8 fc_fec_uncorrectable_blocks_lane1_low[32];
  u8 fc_fec_uncorrectable_blocks_lane2_high[32];
  u8 fc_fec_uncorrectable_blocks_lane2_low[32];
  u8 fc_fec_uncorrectable_blocks_lane3_high[32];
  u8 fc_fec_uncorrectable_blocks_lane3_low[32];
  u8 rs_fec_corrected_blocks_high[32];
  u8 rs_fec_corrected_blocks_low[32];
  u8 rs_fec_uncorrectable_blocks_high[32];
  u8 rs_fec_uncorrectable_blocks_low[32];
  u8 rs_fec_no_errors_blocks_high[32];
  u8 rs_fec_no_errors_blocks_low[32];
  u8 rs_fec_single_error_blocks_high[32];
  u8 rs_fec_single_error_blocks_low[32];
  u8 rs_fec_corrected_symbols_total_high[32];
  u8 rs_fec_corrected_symbols_total_low[32];
  u8 rs_fec_corrected_symbols_lane0_high[32];
  u8 rs_fec_corrected_symbols_lane0_low[32];
  u8 rs_fec_corrected_symbols_lane1_high[32];
  u8 rs_fec_corrected_symbols_lane1_low[32];
  u8 rs_fec_corrected_symbols_lane2_high[32];
  u8 rs_fec_corrected_symbols_lane2_low[32];
  u8 rs_fec_corrected_symbols_lane3_high[32];
  u8 rs_fec_corrected_symbols_lane3_low[32];
  u8 link_down_events[32];
  u8 successful_recovery_events[32];
  u8 reserved_at_640[384];
};

struct mlx5_ifc_phys_layer_statistical_cntrs_bits {
  u8 time_since_last_clear_high[32];
  u8 time_since_last_clear_low[32];
  u8 phy_received_bits_high[32];
  u8 phy_received_bits_low[32];
  u8 phy_symbol_errors_high[32];
  u8 phy_symbol_errors_low[32];
  u8 phy_corrected_bits_high[32];
  u8 phy_corrected_bits_low[32];
  u8 phy_corrected_bits_lane0_high[32];
  u8 phy_corrected_bits_lane0_low[32];
  u8 phy_corrected_bits_lane1_high[32];
  u8 phy_corrected_bits_lane1_low[32];
  u8 phy_corrected_bits_lane2_high[32];
  u8 phy_corrected_bits_lane2_low[32];
  u8 phy_corrected_bits_lane3_high[32];
  u8 phy_corrected_bits_lane3_low[32];
  u8 reserved_at_200[1472];
};

struct mlx5_ifc_ib_port_cntrs_grp_data_layout_bits {
  u8 symbol_error_counter[16];
  u8 link_error_recovery_counter[8];
  u8 link_downed_counter[8];
  u8 port_rcv_errors[16];
  u8 port_rcv_remote_physical_errors[16];
  u8 port_rcv_switch_relay_errors[16];
  u8 port_xmit_discards[16];
  u8 port_xmit_constraint_errors[8];
  u8 port_rcv_constraint_errors[8];
  u8 reserved_at_70[8];
  u8 link_overrun_errors[8];
  u8 reserved_at_80[16];
  u8 vl_15_dropped[16];
  u8 reserved_at_a0[128];
  u8 port_xmit_wait[32];
};

struct mlx5_ifc_eth_per_tc_prio_grp_data_layout_bits {
  u8 transmit_queue_high[32];
  u8 transmit_queue_low[32];
  u8 no_buffer_discard_uc_high[32];
  u8 no_buffer_discard_uc_low[32];
  u8 reserved_at_80[1856];
};

struct mlx5_ifc_eth_per_tc_congest_prio_grp_data_layout_bits {
  u8 wred_discard_high[32];
  u8 wred_discard_low[32];
  u8 ecn_marked_tc_high[32];
  u8 ecn_marked_tc_low[32];
  u8 reserved_at_80[1856];
};

struct mlx5_ifc_eth_per_prio_grp_data_layout_bits {
  u8 rx_octets_high[32];
  u8 rx_octets_low[32];
  u8 reserved_at_40[192];
  u8 rx_frames_high[32];
  u8 rx_frames_low[32];
  u8 tx_octets_high[32];
  u8 tx_octets_low[32];
  u8 reserved_at_180[192];
  u8 tx_frames_high[32];
  u8 tx_frames_low[32];
  u8 rx_pause_high[32];
  u8 rx_pause_low[32];
  u8 rx_pause_duration_high[32];
  u8 rx_pause_duration_low[32];
  u8 tx_pause_high[32];
  u8 tx_pause_low[32];
  u8 tx_pause_duration_high[32];
  u8 tx_pause_duration_low[32];
  u8 rx_pause_transition_high[32];
  u8 rx_pause_transition_low[32];
  u8 rx_discards_high[32];
  u8 rx_discards_low[32];
  u8 device_stall_minor_watermark_cnt_high[32];
  u8 device_stall_minor_watermark_cnt_low[32];
  u8 device_stall_critical_watermark_cnt_high[32];
  u8 device_stall_critical_watermark_cnt_low[32];
  u8 reserved_at_480[832];
};

struct mlx5_ifc_eth_extended_cntrs_grp_data_layout_bits {
  u8 port_transmit_wait_high[32];
  u8 port_transmit_wait_low[32];
  u8 reserved_at_40[256];
  u8 rx_buffer_almost_full_high[32];
  u8 rx_buffer_almost_full_low[32];
  u8 rx_buffer_full_high[32];
  u8 rx_buffer_full_low[32];
  u8 rx_icrc_encapsulated_high[32];
  u8 rx_icrc_encapsulated_low[32];
  u8 reserved_at_200[1472];
};

struct mlx5_ifc_eth_3635_cntrs_grp_data_layout_bits {
  u8 dot3stats_alignment_errors_high[32];
  u8 dot3stats_alignment_errors_low[32];
  u8 dot3stats_fcs_errors_high[32];
  u8 dot3stats_fcs_errors_low[32];
  u8 dot3stats_single_collision_frames_high[32];
  u8 dot3stats_single_collision_frames_low[32];
  u8 dot3stats_multiple_collision_frames_high[32];
  u8 dot3stats_multiple_collision_frames_low[32];
  u8 dot3stats_sqe_test_errors_high[32];
  u8 dot3stats_sqe_test_errors_low[32];
  u8 dot3stats_deferred_transmissions_high[32];
  u8 dot3stats_deferred_transmissions_low[32];
  u8 dot3stats_late_collisions_high[32];
  u8 dot3stats_late_collisions_low[32];
  u8 dot3stats_excessive_collisions_high[32];
  u8 dot3stats_excessive_collisions_low[32];
  u8 dot3stats_internal_mac_transmit_errors_high[32];
  u8 dot3stats_internal_mac_transmit_errors_low[32];
  u8 dot3stats_carrier_sense_errors_high[32];
  u8 dot3stats_carrier_sense_errors_low[32];
  u8 dot3stats_frame_too_longs_high[32];
  u8 dot3stats_frame_too_longs_low[32];
  u8 dot3stats_internal_mac_receive_errors_high[32];
  u8 dot3stats_internal_mac_receive_errors_low[32];
  u8 dot3stats_symbol_errors_high[32];
  u8 dot3stats_symbol_errors_low[32];
  u8 dot3control_in_unknown_opcodes_high[32];
  u8 dot3control_in_unknown_opcodes_low[32];
  u8 dot3in_pause_frames_high[32];
  u8 dot3in_pause_frames_low[32];
  u8 dot3out_pause_frames_high[32];
  u8 dot3out_pause_frames_low[32];
  u8 reserved_at_400[960];
};

struct mlx5_ifc_eth_2819_cntrs_grp_data_layout_bits {
  u8 ether_stats_drop_events_high[32];
  u8 ether_stats_drop_events_low[32];
  u8 ether_stats_octets_high[32];
  u8 ether_stats_octets_low[32];
  u8 ether_stats_pkts_high[32];
  u8 ether_stats_pkts_low[32];
  u8 ether_stats_broadcast_pkts_high[32];
  u8 ether_stats_broadcast_pkts_low[32];
  u8 ether_stats_multicast_pkts_high[32];
  u8 ether_stats_multicast_pkts_low[32];
  u8 ether_stats_crc_align_errors_high[32];
  u8 ether_stats_crc_align_errors_low[32];
  u8 ether_stats_undersize_pkts_high[32];
  u8 ether_stats_undersize_pkts_low[32];
  u8 ether_stats_oversize_pkts_high[32];
  u8 ether_stats_oversize_pkts_low[32];
  u8 ether_stats_fragments_high[32];
  u8 ether_stats_fragments_low[32];
  u8 ether_stats_jabbers_high[32];
  u8 ether_stats_jabbers_low[32];
  u8 ether_stats_collisions_high[32];
  u8 ether_stats_collisions_low[32];
  u8 ether_stats_pkts64octets_high[32];
  u8 ether_stats_pkts64octets_low[32];
  u8 ether_stats_pkts65to127octets_high[32];
  u8 ether_stats_pkts65to127octets_low[32];
  u8 ether_stats_pkts128to255octets_high[32];
  u8 ether_stats_pkts128to255octets_low[32];
  u8 ether_stats_pkts256to511octets_high[32];
  u8 ether_stats_pkts256to511octets_low[32];
  u8 ether_stats_pkts512to1023octets_high[32];
  u8 ether_stats_pkts512to1023octets_low[32];
  u8 ether_stats_pkts1024to1518octets_high[32];
  u8 ether_stats_pkts1024to1518octets_low[32];
  u8 ether_stats_pkts1519to2047octets_high[32];
  u8 ether_stats_pkts1519to2047octets_low[32];
  u8 ether_stats_pkts2048to4095octets_high[32];
  u8 ether_stats_pkts2048to4095octets_low[32];
  u8 ether_stats_pkts4096to8191octets_high[32];
  u8 ether_stats_pkts4096to8191octets_low[32];
  u8 ether_stats_pkts8192to10239octets_high[32];
  u8 ether_stats_pkts8192to10239octets_low[32];
  u8 reserved_at_540[640];
};

struct mlx5_ifc_eth_2863_cntrs_grp_data_layout_bits {
  u8 if_in_octets_high[32];
  u8 if_in_octets_low[32];
  u8 if_in_ucast_pkts_high[32];
  u8 if_in_ucast_pkts_low[32];
  u8 if_in_discards_high[32];
  u8 if_in_discards_low[32];
  u8 if_in_errors_high[32];
  u8 if_in_errors_low[32];
  u8 if_in_unknown_protos_high[32];
  u8 if_in_unknown_protos_low[32];
  u8 if_out_octets_high[32];
  u8 if_out_octets_low[32];
  u8 if_out_ucast_pkts_high[32];
  u8 if_out_ucast_pkts_low[32];
  u8 if_out_discards_high[32];
  u8 if_out_discards_low[32];
  u8 if_out_errors_high[32];
  u8 if_out_errors_low[32];
  u8 if_in_multicast_pkts_high[32];
  u8 if_in_multicast_pkts_low[32];
  u8 if_in_broadcast_pkts_high[32];
  u8 if_in_broadcast_pkts_low[32];
  u8 if_out_multicast_pkts_high[32];
  u8 if_out_multicast_pkts_low[32];
  u8 if_out_broadcast_pkts_high[32];
  u8 if_out_broadcast_pkts_low[32];
  u8 reserved_at_340[1152];
};

struct mlx5_ifc_eth_802_3_cntrs_grp_data_layout_bits {
  u8 a_frames_transmitted_ok_high[32];
  u8 a_frames_transmitted_ok_low[32];
  u8 a_frames_received_ok_high[32];
  u8 a_frames_received_ok_low[32];
  u8 a_frame_check_sequence_errors_high[32];
  u8 a_frame_check_sequence_errors_low[32];
  u8 a_alignment_errors_high[32];
  u8 a_alignment_errors_low[32];
  u8 a_octets_transmitted_ok_high[32];
  u8 a_octets_transmitted_ok_low[32];
  u8 a_octets_received_ok_high[32];
  u8 a_octets_received_ok_low[32];
  u8 a_multicast_frames_xmitted_ok_high[32];
  u8 a_multicast_frames_xmitted_ok_low[32];
  u8 a_broadcast_frames_xmitted_ok_high[32];
  u8 a_broadcast_frames_xmitted_ok_low[32];
  u8 a_multicast_frames_received_ok_high[32];
  u8 a_multicast_frames_received_ok_low[32];
  u8 a_broadcast_frames_received_ok_high[32];
  u8 a_broadcast_frames_received_ok_low[32];
  u8 a_in_range_length_errors_high[32];
  u8 a_in_range_length_errors_low[32];
  u8 a_out_of_range_length_field_high[32];
  u8 a_out_of_range_length_field_low[32];
  u8 a_frame_too_long_errors_high[32];
  u8 a_frame_too_long_errors_low[32];
  u8 a_symbol_error_during_carrier_high[32];
  u8 a_symbol_error_during_carrier_low[32];
  u8 a_mac_control_frames_transmitted_high[32];
  u8 a_mac_control_frames_transmitted_low[32];
  u8 a_mac_control_frames_received_high[32];
  u8 a_mac_control_frames_received_low[32];
  u8 a_unsupported_opcodes_received_high[32];
  u8 a_unsupported_opcodes_received_low[32];
  u8 a_pause_mac_ctrl_frames_received_high[32];
  u8 a_pause_mac_ctrl_frames_received_low[32];
  u8 a_pause_mac_ctrl_frames_transmitted_high[32];
  u8 a_pause_mac_ctrl_frames_transmitted_low[32];
  u8 reserved_at_4c0[768];
};

union mlx5_ifc_eth_cntrs_grp_data_layout_auto_bits {
  struct mlx5_ifc_eth_802_3_cntrs_grp_data_layout_bits
      eth_802_3_cntrs_grp_data_layout;
  struct mlx5_ifc_eth_2863_cntrs_grp_data_layout_bits
      eth_2863_cntrs_grp_data_layout;
  struct mlx5_ifc_eth_2819_cntrs_grp_data_layout_bits
      eth_2819_cntrs_grp_data_layout;
  struct mlx5_ifc_eth_3635_cntrs_grp_data_layout_bits
      eth_3635_cntrs_grp_data_layout;
  struct mlx5_ifc_eth_extended_cntrs_grp_data_layout_bits
      eth_extended_cntrs_grp_data_layout;
  struct mlx5_ifc_eth_per_prio_grp_data_layout_bits
      eth_per_prio_grp_data_layout;
  struct mlx5_ifc_eth_per_tc_prio_grp_data_layout_bits
      eth_per_tc_prio_grp_data_layout;
  struct mlx5_ifc_eth_per_tc_congest_prio_grp_data_layout_bits
      eth_per_tc_congest_prio_grp_data_layout;
  struct mlx5_ifc_ib_port_cntrs_grp_data_layout_bits
      ib_port_cntrs_grp_data_layout;
  struct mlx5_ifc_phys_layer_cntrs_bits phys_layer_cntrs;
  struct mlx5_ifc_phys_layer_statistical_cntrs_bits
      phys_layer_statistical_cntrs;
  u8 reserved_at_0[1984];
};

struct mlx5_ifc_access_register_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[16];
  u8 register_id[16];
  u8 argument[32];
  u8 register_data[0];
};

struct mlx5_ifc_pvlc_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[16];
  u8 reserved_at_20[28];
  u8 vl_hw_cap[4];
  u8 reserved_at_40[28];
  u8 vl_admin[4];
  u8 reserved_at_60[28];
  u8 vl_operational[4];
};

struct mlx5_ifc_ptys_reg_bits {
  u8 reserved_at_0[1];
  u8 an_disable_admin[1];
  u8 an_disable_cap[1];
  u8 reserved_at_3[5];
  u8 local_port[8];
  u8 reserved_at_10[13];
  u8 proto_mask[3];
  u8 an_status[4];
  u8 reserved_at_24[12];
  u8 data_rate_oper[16];
  u8 ext_eth_proto_capability[32];
  u8 eth_proto_capability[32];
  u8 ib_link_width_capability[16];
  u8 ib_proto_capability[16];
  u8 ext_eth_proto_admin[32];
  u8 eth_proto_admin[32];
  u8 ib_link_width_admin[16];
  u8 ib_proto_admin[16];
  u8 ext_eth_proto_oper[32];
  u8 eth_proto_oper[32];
  u8 ib_link_width_oper[16];
  u8 ib_proto_oper[16];
  u8 reserved_at_160[28];
  u8 connector_type[4];
  u8 eth_proto_lp_advertise[32];
  u8 reserved_at_1a0[96];
};

struct mlx5_ifc_mlcr_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[32];
  u8 beacon_duration[16];
  u8 reserved_at_40[16];
  u8 beacon_remain[16];
};

struct mlx5_ifc_ppcnt_reg_bits {
  u8 swid[8];
  u8 local_port[8];
  u8 pnat[2];
  u8 reserved_at_12[8];
  u8 grp[6];
  u8 clr[1];
  u8 reserved_at_21[28];
  u8 prio_tc[3];
  union mlx5_ifc_eth_cntrs_grp_data_layout_auto_bits counter_set;
};

struct mlx5_ifc_pmtu_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[16];
  u8 max_mtu[16];
  u8 reserved_at_30[16];
  u8 admin_mtu[16];
  u8 reserved_at_50[16];
  u8 oper_mtu[16];
  u8 reserved_at_70[16];
};

struct mlx5_ifc_pmlp_reg_bits {
  u8 rxtx[1];
  u8 reserved_at_1[7];
  u8 local_port[8];
  u8 reserved_at_10[8];
  u8 width[8];
  u8 lane0_module_mapping[32];
  u8 lane1_module_mapping[32];
  u8 lane2_module_mapping[32];
  u8 lane3_module_mapping[32];
  u8 reserved_at_a0[352];
};

struct mlx5_ifc_pfcc_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[11];
  u8 ppan_mask_n[1];
  u8 minor_stall_mask[1];
  u8 critical_stall_mask[1];
  u8 reserved_at_1e[2];
  u8 ppan[4];
  u8 reserved_at_24[4];
  u8 prio_mask_tx[8];
  u8 reserved_at_30[8];
  u8 prio_mask_rx[8];
  u8 pptx[1];
  u8 aptx[1];
  u8 pptx_mask_n[1];
  u8 reserved_at_43[5];
  u8 pfctx[8];
  u8 reserved_at_50[16];
  u8 pprx[1];
  u8 aprx[1];
  u8 pprx_mask_n[1];
  u8 reserved_at_63[5];
  u8 pfcrx[8];
  u8 reserved_at_70[16];
  u8 device_stall_minor_watermark[16];
  u8 device_stall_critical_watermark[16];
  u8 reserved_at_a0[96];
};

struct mlx5_ifc_pcam_enhanced_features_bits {
  u8 reserved_at_0[104];
  u8 fec_50G_per_lane_in_pplm[1];
  u8 reserved_at_69[4];
  u8 rx_icrc_encapsulated_counter[1];
  u8 reserved_at_6e[4];
  u8 ptys_extended_ethernet[1];
  u8 reserved_at_73[3];
  u8 pfcc_mask[1];
  u8 reserved_at_77[3];
  u8 per_lane_error_counters[1];
  u8 rx_buffer_fullness_counters[1];
  u8 ptys_connector_type[1];
  u8 reserved_at_7d[1];
  u8 ppcnt_discard_group[1];
  u8 ppcnt_statistical_group[1];
};

struct mlx5_ifc_pcam_regs_5000_to_507f_bits {
  u8 port_access_reg_cap_mask_127_to_96[32];
  u8 port_access_reg_cap_mask_95_to_64[32];
  u8 port_access_reg_cap_mask_63_to_36[28];
  u8 pplm[1];
  u8 port_access_reg_cap_mask_34_to_32[3];
  u8 port_access_reg_cap_mask_31_to_13[19];
  u8 pbmc[1];
  u8 pptb[1];
  u8 port_access_reg_cap_mask_10_to_09[2];
  u8 ppcnt[1];
  u8 port_access_reg_cap_mask_07_to_00[8];
};

struct mlx5_ifc_pcam_reg_bits {
  u8 reserved_at_0[8];
  u8 feature_group[8];
  u8 reserved_at_10[8];
  u8 access_reg_group[8];
  u8 reserved_at_20[32];
  union {
    struct mlx5_ifc_pcam_regs_5000_to_507f_bits regs_5000_to_507f;
    u8 reserved_at_0[128];
  } port_access_reg_cap_mask;
  u8 reserved_at_c0[128];
  union {
    struct mlx5_ifc_pcam_enhanced_features_bits enhanced_features;
    u8 reserved_at_0[128];
  } feature_cap_mask;
  u8 reserved_at_1c0[192];
};

struct mlx5_ifc_qcam_access_reg_cap_mask {
  u8 qcam_access_reg_cap_mask_127_to_20[108];
  u8 qpdpm[1];
  u8 qcam_access_reg_cap_mask_18_to_4[15];
  u8 qdpm[1];
  u8 qpts[1];
  u8 qcap[1];
  u8 qcam_access_reg_cap_mask_0[1];
};

struct mlx5_ifc_qcam_qos_feature_cap_mask {
  u8 qcam_qos_feature_cap_mask_127_to_1[127];
  u8 qpts_trust_both[1];
};

struct mlx5_ifc_qcam_reg_bits {
  u8 reserved_at_0[8];
  u8 feature_group[8];
  u8 reserved_at_10[8];
  u8 access_reg_group[8];
  u8 reserved_at_20[32];
  union {
    struct mlx5_ifc_qcam_access_reg_cap_mask reg_cap;
    u8 reserved_at_0[128];
  } qos_access_reg_cap_mask;
  u8 reserved_at_c0[128];
  union {
    struct mlx5_ifc_qcam_qos_feature_cap_mask feature_cap;
    u8 reserved_at_0[128];
  } qos_feature_cap_mask;
  u8 reserved_at_1c0[128];
};

struct mlx5_ifc_paos_reg_bits {
  u8 swid[8];
  u8 local_port[8];
  u8 reserved_at_10[4];
  u8 admin_status[4];
  u8 reserved_at_18[4];
  u8 oper_status[4];
  u8 ase[1];
  u8 ee[1];
  u8 reserved_at_22[28];
  u8 e[2];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_pcmr_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[16];
  u8 entropy_force_cap[1];
  u8 entropy_calc_cap[1];
  u8 entropy_gre_calc_cap[1];
  u8 reserved_at_23[15];
  u8 rx_ts_over_crc_cap[1];
  u8 reserved_at_33[11];
  u8 fcs_cap[1];
  u8 reserved_at_3f[1];
  u8 entropy_force[1];
  u8 entropy_calc[1];
  u8 entropy_gre_calc[1];
  u8 reserved_at_43[15];
  u8 rx_ts_over_crc[1];
  u8 reserved_at_53[11];
  u8 fcs_chk[1];
  u8 reserved_at_5f[1];
};

struct mlx5_ifc_query_wol_rol_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[16];
  u8 rol_mode[8];
  u8 wol_mode[8];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_query_wol_rol_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_set_wol_rol_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 rol_mode_valid[1];
  u8 wol_mode_valid[1];
  u8 reserved_at_42[14];
  u8 rol_mode[8];
  u8 wol_mode[8];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_mtppse_reg_bits {
  u8 reserved_at_0[24];
  u8 pin[8];
  u8 event_arm[1];
  u8 reserved_at_21[27];
  u8 event_generation_mode[4];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_ets_tcn_config_reg_bits {
  u8 g[1];
  u8 b[1];
  u8 r[1];
  u8 reserved_at_3[9];
  u8 group[4];
  u8 reserved_at_10[9];
  u8 bw_allocation[7];
  u8 reserved_at_20[12];
  u8 max_bw_units[4];
  u8 reserved_at_30[8];
  u8 max_bw_value[8];
};

struct mlx5_ifc_ets_global_config_reg_bits {
  u8 reserved_at_0[2];
  u8 r[1];
  u8 reserved_at_3[29];
  u8 reserved_at_20[12];
  u8 max_bw_units[4];
  u8 reserved_at_30[8];
  u8 max_bw_value[8];
};

struct mlx5_ifc_qetc_reg_bits {
  u8 reserved_at_0[8];
  u8 port_number[8];
  u8 reserved_at_10[48];
  struct mlx5_ifc_ets_tcn_config_reg_bits tc_configuration[8];
  struct mlx5_ifc_ets_global_config_reg_bits global_configuration;
};

struct mlx5_ifc_qpdpm_dscp_reg_bits {
  u8 e[1];
  u8 reserved_at_01[11];
  u8 prio[4];
};

struct mlx5_ifc_qpdpm_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[16];
  struct mlx5_ifc_qpdpm_dscp_reg_bits dscp[64];
};

struct mlx5_ifc_qpts_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[45];
  u8 trust_state[3];
};

struct mlx5_ifc_qtct_reg_bits {
  u8 reserved_at_0[8];
  u8 port_number[8];
  u8 reserved_at_10[13];
  u8 prio[3];
  u8 reserved_at_20[29];
  u8 tclass[3];
};

struct mlx5_ifc_mcia_reg_bits {
  u8 l[1];
  u8 reserved_at_1[7];
  u8 module[8];
  u8 reserved_at_10[8];
  u8 status[8];
  u8 i2c_device_address[8];
  u8 page_number[8];
  u8 device_address[16];
  u8 reserved_at_40[16];
  u8 size[16];
  u8 reserved_at_60[32];
  u8 dword_0[32];
  u8 dword_1[32];
  u8 dword_2[32];
  u8 dword_3[32];
  u8 dword_4[32];
  u8 dword_5[32];
  u8 dword_6[32];
  u8 dword_7[32];
  u8 dword_8[32];
  u8 dword_9[32];
  u8 dword_10[32];
  u8 dword_11[32];
};

struct mlx5_ifc_dcbx_param_bits {
  u8 dcbx_cee_cap[1];
  u8 dcbx_ieee_cap[1];
  u8 dcbx_standby_cap[1];
  u8 reserved_at_3[5];
  u8 port_number[8];
  u8 reserved_at_10[10];
  u8 max_application_table_size[6];
  u8 reserved_at_20[21];
  u8 version_oper[3];
  u8 reserved_at_38[5];
  u8 version_admin[3];
  u8 willing_admin[1];
  u8 reserved_at_41[3];
  u8 pfc_cap_oper[4];
  u8 reserved_at_48[4];
  u8 pfc_cap_admin[4];
  u8 reserved_at_50[4];
  u8 num_of_tc_oper[4];
  u8 reserved_at_58[4];
  u8 num_of_tc_admin[4];
  u8 remote_willing[1];
  u8 reserved_at_61[3];
  u8 remote_pfc_cap[4];
  u8 reserved_at_68[20];
  u8 remote_num_of_tc[4];
  u8 reserved_at_80[24];
  u8 error[8];
  u8 reserved_at_a0[352];
};

enum {
  MLX5_IEEE_802_3_COUNTERS_GROUP = 0,
  MLX5_RFC_2863_COUNTERS_GROUP = 1,
  MLX5_RFC_2819_COUNTERS_GROUP = 2,
  MLX5_RFC_3635_COUNTERS_GROUP = 3,
  MLX5_ETHERNET_EXTENDED_COUNTERS_GROUP = 5,
  MLX5_PER_PRIORITY_COUNTERS_GROUP = 16,
  MLX5_PER_TRAFFIC_CLASS_COUNTERS_GROUP = 17,
  MLX5_PHYSICAL_LAYER_COUNTERS_GROUP = 18,
  MLX5_PER_TRAFFIC_CLASS_CONGESTION_GROUP = 19,
  MLX5_PHYSICAL_LAYER_STATISTICAL_GROUP = 22,
  MLX5_INFINIBAND_PORT_COUNTERS_GROUP = 32,
};

enum mlx5_port_status {
  MLX5_PORT_UP = 1,
  MLX5_PORT_DOWN = 2,
};

enum {
  MLX5_PTYS_IB = 1,
  MLX5_PTYS_EN = 4,
};

enum mlx5_module_id {
  MLX5_MODULE_ID_SFP = 3,
  MLX5_MODULE_ID_QSFP = 12,
  MLX5_MODULE_ID_QSFP_PLUS = 13,
  MLX5_MODULE_ID_QSFP28 = 17,
  MLX5_MODULE_ID_DSFP = 27,
};

struct mlx5_module_eeprom_query_params {
  u16 size;
  u16 offset;
  u16 i2c_address;
  u32 page;
  u32 bank;
  u32 module_number;
};

struct mlx5_reg_pcap {
  u8 rsvd0;
  u8 port_num;
  u8 rsvd1[2];
  __be32 caps_127_96;
  __be32 caps_95_64;
  __be32 caps_63_32;
  __be32 caps_31_0;
};

struct mlx5_ifc_mkc_bits {
  u8 reserved_at_0[1];
  u8 free[1];
  u8 reserved_at_2[1];
  u8 access_mode_4_2[3];
  u8 reserved_at_6[7];
  u8 relaxed_ordering_write[1];
  u8 reserved_at_e[1];
  u8 small_fence_on_rdma_read_response[1];
  u8 umr_en[1];
  u8 a[1];
  u8 rw[1];
  u8 rr[1];
  u8 lw[1];
  u8 lr[1];
  u8 access_mode_1_0[2];
  u8 reserved_at_18[8];
  u8 qpn[24];
  u8 mkey_7_0[8];
  u8 reserved_at_40[32];
  u8 length64[1];
  u8 bsf_en[1];
  u8 sync_umr[1];
  u8 reserved_at_63[2];
  u8 expected_sigerr_count[1];
  u8 reserved_at_66[1];
  u8 en_rinval[1];
  u8 pd[24];
  u8 start_addr[64];
  u8 len[64];
  u8 bsf_octword_size[32];
  u8 reserved_at_120[128];
  u8 translations_octword_size[32];
  u8 reserved_at_1c0[25];
  u8 relaxed_ordering_read[1];
  u8 reserved_at_1d9[1];
  u8 log_page_size[5];
  u8 reserved_at_1e0[32];
};

struct mlx5_ifc_query_mkey_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 mkey_index[24];
  u8 pg_access[1];
  u8 reserved_at_61[31];
};

struct mlx5_ifc_destroy_psv_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 psvn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_destroy_mkey_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 mkey_index[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_psv_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
  u8 reserved_at_80[8];
  u8 psv0_index[24];
  u8 reserved_at_a0[8];
  u8 psv1_index[24];
  u8 reserved_at_c0[8];
  u8 psv2_index[24];
  u8 reserved_at_e0[8];
  u8 psv3_index[24];
};

struct mlx5_ifc_create_psv_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 num_psv[4];
  u8 reserved_at_44[4];
  u8 pd[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_mkey_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 mkey_index[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_mkey_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[32];
  u8 pg_access[1];
  u8 mkey_umem_valid[1];
  u8 reserved_at_62[30];
  struct mlx5_ifc_mkc_bits memory_key_mkey_entry;
  u8 reserved_at_280[128];
  u8 translations_octword_actual_size[32];
  u8 reserved_at_320[1376];
  u8 klm_pas_mtt[0];
};

struct mlx5_ifc_dealloc_pd_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 pd[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_pd_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 pd[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_pd_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_cmd_pas_bits {
  u8 pa_h[32];
  u8 pa_l[20];
  u8 reserved_at_34[12];
};

struct mlx5_ifc_rx_hash_field_select_bits {
  u8 l3_prot_type[1];
  u8 l4_prot_type[1];
  u8 selected_fields[30];
};

struct mlx5_ifc_wq_bits {
  u8 wq_type[4];
  u8 wq_signature[1];
  u8 end_padding_mode[2];
  u8 cd_slave[1];
  u8 reserved_at_8[24];
  u8 hds_skip_first_sge[1];
  u8 log2_hds_buf_size[3];
  u8 reserved_at_24[7];
  u8 page_offset[5];
  u8 lwm[16];
  u8 reserved_at_40[8];
  u8 pd[24];
  u8 reserved_at_60[8];
  u8 uar_page[24];
  u8 dbr_addr[64];
  u8 hw_counter[32];
  u8 sw_counter[32];
  u8 reserved_at_100[12];
  u8 log_wq_stride[4];
  u8 reserved_at_110[3];
  u8 log_wq_pg_sz[5];
  u8 reserved_at_118[3];
  u8 log_wq_sz[5];
  u8 dbr_umem_valid[1];
  u8 wq_umem_valid[1];
  u8 reserved_at_122[1];
  u8 log_hairpin_num_packets[5];
  u8 reserved_at_128[3];
  u8 log_hairpin_data_sz[5];
  u8 reserved_at_130[4];
  u8 log_wqe_num_of_strides[4];
  u8 two_byte_shift_en[1];
  u8 reserved_at_139[4];
  u8 log_wqe_stride_size[3];
  u8 reserved_at_140[1216];
  struct mlx5_ifc_cmd_pas_bits pas[0];
};

struct mlx5_ifc_rq_num_bits {
  u8 reserved_at_0[8];
  u8 rq_num[24];
};

struct mlx5_ifc_tisc_bits {
  u8 strict_lag_tx_port_affinity[1];
  u8 tls_en[1];
  u8 reserved_at_2[2];
  u8 lag_tx_port_affinity[4];
  u8 reserved_at_8[4];
  u8 prio[4];
  u8 reserved_at_10[16];
  u8 reserved_at_20[256];
  u8 reserved_at_120[8];
  u8 transport_domain[24];
  u8 reserved_at_140[8];
  u8 underlay_qpn[24];
  u8 reserved_at_160[8];
  u8 pd[24];
  u8 reserved_at_180[896];
};

struct mlx5_ifc_tirc_bits {
  u8 reserved_at_0[32];
  u8 disp_type[4];
  u8 tls_en[1];
  u8 reserved_at_25[27];
  u8 reserved_at_40[64];
  u8 reserved_at_80[4];
  u8 lro_timeout_period_usecs[16];
  u8 lro_enable_mask[4];
  u8 lro_max_ip_payload_size[8];
  u8 reserved_at_a0[64];
  u8 reserved_at_e0[8];
  u8 inline_rqn[24];
  u8 rx_hash_symmetric[1];
  u8 reserved_at_101[1];
  u8 tunneled_offload_en[1];
  u8 reserved_at_103[5];
  u8 indirect_table[24];
  u8 rx_hash_fn[4];
  u8 reserved_at_124[2];
  u8 self_lb_block[2];
  u8 transport_domain[24];
  u8 rx_hash_toeplitz_key[320];
  struct mlx5_ifc_rx_hash_field_select_bits rx_hash_field_selector_outer;
  struct mlx5_ifc_rx_hash_field_select_bits rx_hash_field_selector_inner;
  u8 reserved_at_2c0[1216];
};

struct mlx5_ifc_sqc_bits {
  u8 rlky[1];
  u8 cd_master[1];
  u8 fre[1];
  u8 flush_in_error_en[1];
  u8 allow_multi_pkt_send_wqe[1];
  u8 min_wqe_inline_mode[3];
  u8 state[4];
  u8 reg_umr[1];
  u8 allow_swp[1];
  u8 hairpin[1];
  u8 reserved_at_f[11];
  u8 ts_format[2];
  u8 reserved_at_1c[4];
  u8 reserved_at_20[8];
  u8 user_index[24];
  u8 reserved_at_40[8];
  u8 cqn[24];
  u8 reserved_at_60[8];
  u8 hairpin_peer_rq[24];
  u8 reserved_at_80[16];
  u8 hairpin_peer_vhca[16];
  u8 reserved_at_a0[32];
  u8 reserved_at_c0[8];
  u8 ts_cqe_to_dest_cqn[24];
  u8 reserved_at_e0[16];
  u8 packet_pacing_rate_limit_index[16];
  u8 tis_lst_sz[16];
  u8 qos_queue_group_id[16];
  u8 reserved_at_120[64];
  u8 reserved_at_160[8];
  u8 tis_num_0[24];
  struct mlx5_ifc_wq_bits wq;
};

struct mlx5_ifc_rqtc_bits {
  u8 reserved_at_0[160];
  u8 reserved_at_a0[5];
  u8 list_q_type[3];
  u8 reserved_at_a8[8];
  u8 rqt_max_size[16];
  u8 rq_vhca_id_format[1];
  u8 reserved_at_c1[15];
  u8 rqt_actual_size[16];
  u8 reserved_at_e0[1696];
  struct mlx5_ifc_rq_num_bits rq_num[0];
};

struct mlx5_ifc_rqc_bits {
  u8 rlky[1];
  u8 delay_drop_en[1];
  u8 scatter_fcs[1];
  u8 vsd[1];
  u8 mem_rq_type[4];
  u8 state[4];
  u8 reserved_at_c[1];
  u8 flush_in_error_en[1];
  u8 hairpin[1];
  u8 reserved_at_f[11];
  u8 ts_format[2];
  u8 reserved_at_1c[4];
  u8 reserved_at_20[8];
  u8 user_index[24];
  u8 reserved_at_40[8];
  u8 cqn[24];
  u8 counter_set_id[8];
  u8 reserved_at_68[24];
  u8 reserved_at_80[8];
  u8 rmpn[24];
  u8 reserved_at_a0[8];
  u8 hairpin_peer_sq[24];
  u8 reserved_at_c0[16];
  u8 hairpin_peer_vhca[16];
  u8 reserved_at_e0[160];
  struct mlx5_ifc_wq_bits wq;
};

struct mlx5_ifc_query_sq_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 sqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_query_rq_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 rqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_modify_tis_bitmask_bits {
  u8 reserved_at_0[32];
  u8 reserved_at_20[29];
  u8 lag_tx_port_affinity[1];
  u8 strict_lag_tx_port_affinity[1];
  u8 prio[1];
};

struct mlx5_ifc_modify_tis_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 tisn[24];
  u8 reserved_at_60[32];
  struct mlx5_ifc_modify_tis_bitmask_bits bitmask;
  u8 reserved_at_c0[64];
  struct mlx5_ifc_tisc_bits ctx;
};

struct mlx5_ifc_modify_tir_bitmask_bits {
  u8 reserved_at_0[32];
  u8 reserved_at_20[27];
  u8 self_lb_en[1];
  u8 reserved_at_3c[1];
  u8 hash[1];
  u8 reserved_at_3e[1];
  u8 lro[1];
};

struct mlx5_ifc_modify_tir_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 tirn[24];
  u8 reserved_at_60[32];
  struct mlx5_ifc_modify_tir_bitmask_bits bitmask;
  u8 reserved_at_c0[64];
  struct mlx5_ifc_tirc_bits ctx;
};

struct mlx5_ifc_modify_sq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 sq_state[4];
  u8 reserved_at_44[4];
  u8 sqn[24];
  u8 reserved_at_60[32];
  u8 modify_bitmask[64];
  u8 reserved_at_c0[64];
  struct mlx5_ifc_sqc_bits ctx;
};

struct mlx5_ifc_rqt_bitmask_bits {
  u8 reserved_at_0[32];
  u8 reserved_at_20[31];
  u8 rqn_list[1];
};

struct mlx5_ifc_modify_rqt_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 rqtn[24];
  u8 reserved_at_60[32];
  struct mlx5_ifc_rqt_bitmask_bits bitmask;
  u8 reserved_at_c0[64];
  struct mlx5_ifc_rqtc_bits ctx;
};

struct mlx5_ifc_modify_rq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 rq_state[4];
  u8 reserved_at_44[4];
  u8 rqn[24];
  u8 reserved_at_60[32];
  u8 modify_bitmask[64];
  u8 reserved_at_c0[64];
  struct mlx5_ifc_rqc_bits ctx;
};

struct mlx5_ifc_destroy_tis_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 tisn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_destroy_tir_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 tirn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_destroy_sq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 sqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_destroy_rqt_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 rqtn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_destroy_rq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 rqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_dealloc_transport_domain_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[8];
  u8 transport_domain[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_tis_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 tisn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_tis_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[192];
  struct mlx5_ifc_tisc_bits ctx;
};

struct mlx5_ifc_create_tir_out_bits {
  u8 status[8];
  u8 icm_address_63_40[24];
  u8 syndrome[32];
  u8 icm_address_39_32[8];
  u8 tirn[24];
  u8 icm_address_31_0[32];
};

struct mlx5_ifc_create_tir_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[192];
  struct mlx5_ifc_tirc_bits ctx;
};

struct mlx5_ifc_create_sq_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 sqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_sq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[192];
  struct mlx5_ifc_sqc_bits ctx;
};

struct mlx5_ifc_create_rqt_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 rqtn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_rqt_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[192];
  struct mlx5_ifc_rqtc_bits rqt_context;
};

struct mlx5_ifc_create_rq_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 rqn[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_rq_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[192];
  struct mlx5_ifc_rqc_bits ctx;
};

struct mlx5_ifc_alloc_transport_domain_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 transport_domain[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_transport_domain_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_hairpin_params {
  u8 log_data_size;
  u8 log_num_packets;
  u16 q_counter;
  int num_channels;
};

struct mlx5_hairpin {
  struct mlx5_core_dev* func_mdev;
  struct mlx5_core_dev* peer_mdev;
  int num_channels;
  u32* rqn;
  u32* sqn;
  bool peer_gone;
};

struct mlx5_ifc_mac_address_layout_bits {
  u8 reserved_at_0[16];
  u8 mac_addr_47_32[16];
  u8 mac_addr_31_0[32];
};

struct mlx5_ifc_vlan_layout_bits {
  u8 reserved_at_0[20];
  u8 vlan[12];
  u8 reserved_at_20[32];
};

struct mlx5_ifc_nic_vport_context_bits {
  u8 reserved_at_0[5];
  u8 min_wqe_inline_mode[3];
  u8 reserved_at_8[21];
  u8 disable_mc_local_lb[1];
  u8 disable_uc_local_lb[1];
  u8 roce_en[1];
  u8 arm_change_event[1];
  u8 reserved_at_21[26];
  u8 event_on_mtu[1];
  u8 event_on_promisc_change[1];
  u8 event_on_vlan_change[1];
  u8 event_on_mc_address_change[1];
  u8 event_on_uc_address_change[1];
  u8 reserved_at_40[12];
  u8 affiliation_criteria[4];
  u8 affiliated_vhca_id[16];
  u8 reserved_at_60[208];
  u8 mtu[16];
  u8 system_image_guid[64];
  u8 port_guid[64];
  u8 node_guid[64];
  u8 reserved_at_200[320];
  u8 qkey_violation_counter[16];
  u8 reserved_at_350[1072];
  u8 promisc_uc[1];
  u8 promisc_mc[1];
  u8 promisc_all[1];
  u8 reserved_at_783[2];
  u8 allowed_list_type[3];
  u8 reserved_at_788[12];
  u8 allowed_list_size[12];
  struct mlx5_ifc_mac_address_layout_bits permanent_address;
  u8 reserved_at_7e0[32];
  u8 current_uc_mac_address[0];
};

struct mlx5_ifc_pkey_bits {
  u8 reserved_at_0[16];
  u8 pkey[16];
};

struct mlx5_ifc_hca_vport_context_bits {
  u8 field_select[32];
  u8 reserved_at_20[224];
  u8 sm_virt_aware[1];
  u8 has_smi[1];
  u8 has_raw[1];
  u8 grh_required[1];
  u8 reserved_at_104[12];
  u8 port_physical_state[4];
  u8 vport_state_policy[4];
  u8 port_state[4];
  u8 vport_state[4];
  u8 reserved_at_120[32];
  u8 system_image_guid[64];
  u8 port_guid[64];
  u8 node_guid[64];
  u8 cap_mask1[32];
  u8 cap_mask1_field_select[32];
  u8 cap_mask2[32];
  u8 cap_mask2_field_select[32];
  u8 reserved_at_280[128];
  u8 lid[16];
  u8 reserved_at_310[4];
  u8 init_type_reply[4];
  u8 lmc[3];
  u8 subnet_timeout[5];
  u8 sm_lid[16];
  u8 sm_sl[4];
  u8 reserved_at_334[12];
  u8 qkey_violation_counter[16];
  u8 pkey_violation_counter[16];
  u8 reserved_at_360[3232];
};

struct mlx5_ifc_query_vport_state_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[32];
  u8 reserved_at_60[24];
  u8 admin_state[4];
  u8 state[4];
};

struct mlx5_ifc_query_vport_state_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_query_vnic_env_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_query_vport_counter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[11];
  u8 port_num[4];
  u8 vport_number[16];
  u8 reserved_at_60[96];
  u8 clear[1];
  u8 reserved_at_c1[31];
  u8 reserved_at_e0[32];
};

struct mlx5_ifc_query_nic_vport_context_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
  struct mlx5_ifc_nic_vport_context_bits nic_vport_context;
};

struct mlx5_ifc_query_nic_vport_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[5];
  u8 allowed_list_type[3];
  u8 reserved_at_68[24];
};

struct mlx5_ifc_query_hca_vport_pkey_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[11];
  u8 port_num[4];
  u8 vport_number[16];
  u8 reserved_at_60[16];
  u8 pkey_index[16];
};

enum {
  MLX5_HCA_VPORT_SEL_PORT_GUID = 1,
  MLX5_HCA_VPORT_SEL_NODE_GUID = 2,
  MLX5_HCA_VPORT_SEL_STATE_POLICY = 4,
};

struct mlx5_ifc_query_hca_vport_gid_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[11];
  u8 port_num[4];
  u8 vport_number[16];
  u8 reserved_at_60[16];
  u8 gid_index[16];
};

struct mlx5_ifc_query_hca_vport_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[11];
  u8 port_num[4];
  u8 vport_number[16];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_modify_vport_state_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[24];
  u8 admin_state[4];
  u8 reserved_at_7c[4];
};

struct mlx5_ifc_modify_nic_vport_field_select_bits {
  u8 reserved_at_0[18];
  u8 affiliation[1];
  u8 reserved_at_13[1];
  u8 disable_uc_local_lb[1];
  u8 disable_mc_local_lb[1];
  u8 node_guid[1];
  u8 port_guid[1];
  u8 min_inline[1];
  u8 mtu[1];
  u8 change_event[1];
  u8 promisc[1];
  u8 permanent_address[1];
  u8 addresses_list[1];
  u8 roce_en[1];
  u8 reserved_at_1f[1];
};

struct mlx5_ifc_modify_nic_vport_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  struct mlx5_ifc_modify_nic_vport_field_select_bits field_select;
  u8 reserved_at_80[1920];
  struct mlx5_ifc_nic_vport_context_bits nic_vport_context;
};

struct mlx5_ifc_modify_hca_vport_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[11];
  u8 port_num[4];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  struct mlx5_ifc_hca_vport_context_bits hca_vport_context;
};

enum mlx5_inline_modes {
  MLX5_INLINE_MODE_NONE = 0,
  MLX5_INLINE_MODE_L2 = 1,
  MLX5_INLINE_MODE_IP = 2,
  MLX5_INLINE_MODE_TCP_UDP = 3,
};

enum mlx5_list_type {
  MLX5_NVPRT_LIST_TYPE_UC = 0,
  MLX5_NVPRT_LIST_TYPE_MC = 1,
  MLX5_NVPRT_LIST_TYPE_VLAN = 2,
};

enum phy_port_state {
  MLX5_AAA_111 = 0,
};

struct mlx5_hca_vport_context {
  u32 field_select;
  bool sm_virt_aware;
  bool has_smi;
  bool has_raw;
  enum port_state_policy policy;
  enum phy_port_state phys_state;
  enum ib_port_state vport_state;
  u8 port_physical_state;
  u64 sys_image_guid;
  u64 port_guid;
  u64 node_guid;
  u32 cap_mask1;
  u32 cap_mask1_perm;
  u16 cap_mask2;
  u16 cap_mask2_perm;
  u16 lid;
  u8 init_type_reply;
  u8 lmc;
  u8 subnet_timeout;
  u16 sm_lid;
  u8 sm_sl;
  u16 qkey_violation_counter;
  u16 pkey_violation_counter;
  bool grh_required;
};

enum {
  MLX5_CAP_INLINE_MODE_L2 = 0,
  MLX5_CAP_INLINE_MODE_VPORT_CONTEXT = 1,
  MLX5_CAP_INLINE_MODE_NOT_REQUIRED = 2,
};

enum {
  UC_LOCAL_LB = 0,
  MC_LOCAL_LB = 1,
};

enum mlx5_vport_roce_state {
  MLX5_VPORT_ROCE_DISABLED = 0,
  MLX5_VPORT_ROCE_ENABLED = 1,
};

struct mlx5_ifc_host_params_context_bits {
  u8 host_number[8];
  u8 reserved_at_8[7];
  u8 host_pf_disabled[1];
  u8 host_num_of_vfs[16];
  u8 host_total_vfs[16];
  u8 host_pci_bus[16];
  u8 reserved_at_40[16];
  u8 host_pci_device[16];
  u8 reserved_at_60[16];
  u8 host_pci_function[16];
  u8 reserved_at_80[384];
};

struct mlx5_ifc_query_esw_functions_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
  struct mlx5_ifc_host_params_context_bits host_params_context;
  u8 reserved_at_280[384];
  u8 host_sf_enable[0];
};

enum mlx5_fc_bulk_alloc_bitmask {
  MLX5_FC_BULK_128 = 1,
  MLX5_FC_BULK_256 = 2,
  MLX5_FC_BULK_512 = 4,
  MLX5_FC_BULK_1024 = 8,
  MLX5_FC_BULK_2048 = 16,
  MLX5_FC_BULK_4096 = 32,
  MLX5_FC_BULK_8192 = 64,
  MLX5_FC_BULK_16384 = 128,
};

struct mlx5_ifc_dest_format_struct_bits {
  u8 destination_type[8];
  u8 destination_id[24];
  u8 destination_eswitch_owner_vhca_id_valid[1];
  u8 packet_reformat[1];
  u8 reserved_at_22[14];
  u8 destination_eswitch_owner_vhca_id[16];
};

struct mlx5_ifc_flow_counter_list_bits {
  u8 flow_counter_id[32];
  u8 reserved_at_20[32];
};

struct mlx5_ifc_extended_dest_format_bits {
  struct mlx5_ifc_dest_format_struct_bits destination_entry;
  u8 packet_reformat_id[32];
  u8 reserved_at_60[32];
};

union mlx5_ifc_dest_format_struct_flow_counter_list_auto_bits {
  struct mlx5_ifc_extended_dest_format_bits extended_dest_format;
  struct mlx5_ifc_flow_counter_list_bits flow_counter_list;
};

enum {
  MLX5_FLOW_CONTEXT_ACTION_ALLOW = 1,
  MLX5_FLOW_CONTEXT_ACTION_DROP = 2,
  MLX5_FLOW_CONTEXT_ACTION_FWD_DEST = 4,
  MLX5_FLOW_CONTEXT_ACTION_COUNT = 8,
  MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT = 16,
  MLX5_FLOW_CONTEXT_ACTION_DECAP = 32,
  MLX5_FLOW_CONTEXT_ACTION_MOD_HDR = 64,
  MLX5_FLOW_CONTEXT_ACTION_VLAN_POP = 128,
  MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH = 256,
  MLX5_FLOW_CONTEXT_ACTION_VLAN_POP_2 = 1024,
  MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH_2 = 2048,
  MLX5_FLOW_CONTEXT_ACTION_IPSEC_DECRYPT = 4096,
  MLX5_FLOW_CONTEXT_ACTION_IPSEC_ENCRYPT = 8192,
};

struct mlx5_ifc_vlan_bits {
  u8 ethtype[16];
  u8 prio[3];
  u8 cfi[1];
  u8 vid[12];
};

struct mlx5_ifc_flow_context_bits {
  struct mlx5_ifc_vlan_bits push_vlan;
  u8 group_id[32];
  u8 reserved_at_40[8];
  u8 flow_tag[24];
  u8 reserved_at_60[16];
  u8 action[16];
  u8 extended_destination[1];
  u8 reserved_at_81[1];
  u8 flow_source[2];
  u8 reserved_at_84[4];
  u8 destination_list_size[24];
  u8 reserved_at_a0[8];
  u8 flow_counter_list_size[24];
  u8 packet_reformat_id[32];
  u8 modify_header_id[32];
  struct mlx5_ifc_vlan_bits push_vlan_2;
  u8 ipsec_obj_id[32];
  u8 reserved_at_140[192];
  struct mlx5_ifc_fte_match_param_bits match_value;
  u8 reserved_at_1200[1536];
  union mlx5_ifc_dest_format_struct_flow_counter_list_auto_bits destination[0];
};

struct mlx5_ifc_set_fte_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  u8 ignore_flow_level[1];
  u8 reserved_at_c1[23];
  u8 modify_enable_mask[8];
  u8 reserved_at_e0[32];
  u8 flow_index[32];
  u8 reserved_at_120[224];
  struct mlx5_ifc_flow_context_bits flow_context;
};

struct mlx5_ifc_flow_table_context_bits {
  u8 reformat_en[1];
  u8 decap_en[1];
  u8 sw_owner[1];
  u8 termination_table[1];
  u8 table_miss_action[4];
  u8 level[8];
  u8 reserved_at_10[8];
  u8 log_size[8];
  u8 reserved_at_20[8];
  u8 table_miss_id[24];
  u8 reserved_at_40[8];
  u8 lag_master_next_table_id[24];
  u8 reserved_at_60[96];
  u8 sw_owner_icm_root_1[64];
  u8 sw_owner_icm_root_0[64];
};

struct mlx5_ifc_query_flow_counter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[128];
  u8 clear[1];
  u8 reserved_at_c1[15];
  u8 num_of_counters[16];
  u8 flow_counter_id[32];
};

struct mlx5_ifc_packet_reformat_context_in_bits {
  u8 reserved_at_0[5];
  u8 reformat_type[3];
  u8 reserved_at_8[14];
  u8 reformat_data_size[10];
  u8 reserved_at_20[16];
  u8 reformat_data[16];
  u8 more_reformat_data[0];
};

struct mlx5_ifc_alloc_packet_reformat_context_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 packet_reformat_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_packet_reformat_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[160];
  struct mlx5_ifc_packet_reformat_context_in_bits packet_reformat_context;
};

struct mlx5_ifc_dealloc_packet_reformat_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_20[16];
  u8 op_mod[16];
  u8 packet_reformat_id[32];
  u8 reserved_60[32];
};

struct mlx5_ifc_set_action_in_bits {
  u8 action_type[4];
  u8 field[12];
  u8 reserved_at_10[3];
  u8 offset[5];
  u8 reserved_at_18[3];
  u8 length[5];
  u8 data[32];
};

struct mlx5_ifc_add_action_in_bits {
  u8 action_type[4];
  u8 field[12];
  u8 reserved_at_10[16];
  u8 data[32];
};

struct mlx5_ifc_copy_action_in_bits {
  u8 action_type[4];
  u8 src_field[12];
  u8 reserved_at_10[3];
  u8 src_offset[5];
  u8 reserved_at_18[3];
  u8 length[5];
  u8 reserved_at_20[4];
  u8 dst_field[12];
  u8 reserved_at_30[3];
  u8 dst_offset[5];
  u8 reserved_at_38[8];
};

union mlx5_ifc_set_add_copy_action_in_auto_bits {
  struct mlx5_ifc_set_action_in_bits set_action_in;
  struct mlx5_ifc_add_action_in_bits add_action_in;
  struct mlx5_ifc_copy_action_in_bits copy_action_in;
  u8 reserved_at_0[64];
};

struct mlx5_ifc_alloc_modify_header_context_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 modify_header_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_modify_header_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[32];
  u8 table_type[8];
  u8 reserved_at_68[16];
  u8 num_of_actions[8];
  union mlx5_ifc_set_add_copy_action_in_auto_bits actions[0];
};

struct mlx5_ifc_dealloc_modify_header_context_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 modify_header_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_destroy_flow_table_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  u8 reserved_at_c0[320];
};

struct mlx5_ifc_destroy_flow_group_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  u8 group_id[32];
  u8 reserved_at_e0[288];
};

struct mlx5_ifc_delete_fte_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  u8 reserved_at_c0[64];
  u8 flow_index[32];
  u8 reserved_at_120[224];
};

struct mlx5_ifc_dealloc_flow_counter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 flow_counter_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_flow_table_out_bits {
  u8 status[8];
  u8 icm_address_63_40[24];
  u8 syndrome[32];
  u8 icm_address_39_32[8];
  u8 table_id[24];
  u8 icm_address_31_0[32];
};

struct mlx5_ifc_create_flow_table_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[32];
  struct mlx5_ifc_flow_table_context_bits flow_table_context;
};

struct mlx5_ifc_create_flow_group_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[8];
  u8 group_id[24];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_create_flow_group_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  u8 source_eswitch_owner_vhca_id_valid[1];
  u8 reserved_at_c1[31];
  u8 start_flow_index[32];
  u8 reserved_at_100[32];
  u8 end_flow_index[32];
  u8 reserved_at_140[160];
  u8 reserved_at_1e0[24];
  u8 match_criteria_enable[8];
  struct mlx5_ifc_fte_match_param_bits match_criteria;
  u8 reserved_at_1200[3584];
};

struct mlx5_ifc_alloc_flow_counter_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 flow_counter_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_flow_counter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[56];
  u8 flow_counter_bulk[8];
};

struct mlx5_ifc_set_flow_table_root_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[32];
  u8 table_type[8];
  u8 reserved_at_88[7];
  u8 table_of_other_vport[1];
  u8 table_vport_number[16];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  u8 reserved_at_c0[8];
  u8 underlay_qpn[24];
  u8 table_eswitch_owner_vhca_id_valid[1];
  u8 reserved_at_e1[15];
  u8 table_eswitch_owner_vhca_id[16];
  u8 reserved_at_100[256];
};

enum {
  MLX5_MODIFY_FLOW_TABLE_MISS_TABLE_ID = 1,
  MLX5_MODIFY_FLOW_TABLE_LAG_NEXT_TABLE_ID = 32768,
};

struct mlx5_ifc_modify_flow_table_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 other_vport[1];
  u8 reserved_at_41[15];
  u8 vport_number[16];
  u8 reserved_at_60[16];
  u8 modify_field_select[16];
  u8 table_type[8];
  u8 reserved_at_88[24];
  u8 reserved_at_a0[8];
  u8 table_id[24];
  struct mlx5_ifc_flow_table_context_bits flow_table_context;
};

enum {
  MLX5_FLOW_TABLE_TUNNEL_EN_REFORMAT = 1,
  MLX5_FLOW_TABLE_TUNNEL_EN_DECAP = 2,
  MLX5_FLOW_TABLE_TERMINATION = 4,
  MLX5_FLOW_TABLE_UNMANAGED = 8,
  MLX5_FLOW_TABLE_OTHER_VPORT = 16,
};

enum {
  MLX5_FLOW_DEST_VPORT_VHCA_ID = 1,
  MLX5_FLOW_DEST_VPORT_REFORMAT_ID = 2,
};

enum {
  FLOW_ACT_NO_APPEND = 1,
  FLOW_ACT_IGNORE_FLOW_LEVEL = 2,
};

enum {
  MLX5_SET_FTE_MODIFY_ENABLE_MASK_ACTION = 0,
  MLX5_SET_FTE_MODIFY_ENABLE_MASK_FLOW_TAG = 1,
  MLX5_SET_FTE_MODIFY_ENABLE_MASK_DESTINATION_LIST = 2,
  MLX5_SET_FTE_MODIFY_ENABLE_MASK_FLOW_COUNTERS = 3,
  MLX5_SET_FTE_MODIFY_ENABLE_MASK_IPSEC_OBJ_ID = 4,
};

enum {
  MLX5_FLOW_CONTEXT_ACTION_FWD_NEXT_PRIO = 65536,
  MLX5_FLOW_CONTEXT_ACTION_ENCRYPT = 131072,
  MLX5_FLOW_CONTEXT_ACTION_DECRYPT = 262144,
  MLX5_FLOW_CONTEXT_ACTION_FWD_NEXT_NS = 524288,
};

enum {
  FDB_BYPASS_PATH = 0,
  FDB_TC_OFFLOAD = 1,
  FDB_FT_OFFLOAD = 2,
  FDB_SLOW_PATH = 3,
  FDB_PER_VPORT = 4,
};

enum {
  FLOW_CONTEXT_HAS_TAG = 1,
};

struct mlx5_flow_spec {
  u8 match_criteria_enable;
  u32 match_criteria[128];
  u32 match_value[128];
  struct mlx5_flow_context flow_context;
};

struct mlx5_flow_table_attr {
  int prio;
  int max_fte;
  u32 level;
  u32 flags;
  struct mlx5_flow_table* next_ft;
  struct {
    int max_num_groups;
    int num_reserved_entries;
  } autogroup;
};

struct mlx5_ft_underlay_qp {
  struct list_head list;
  u32 qpn;
};

struct fs_prio {
  struct fs_node node;
  unsigned int num_levels;
  unsigned int start_level;
  unsigned int prio;
  unsigned int num_ft;
};

enum mlx5_accel_ipsec_cap {
  MLX5_ACCEL_IPSEC_CAP_DEVICE = 1,
  MLX5_ACCEL_IPSEC_CAP_REQUIRED_METADATA = 2,
  MLX5_ACCEL_IPSEC_CAP_ESP = 4,
  MLX5_ACCEL_IPSEC_CAP_IPV6 = 8,
  MLX5_ACCEL_IPSEC_CAP_LSO = 16,
  MLX5_ACCEL_IPSEC_CAP_RX_NO_TRAILER = 32,
  MLX5_ACCEL_IPSEC_CAP_ESN = 64,
  MLX5_ACCEL_IPSEC_CAP_TX_IV_IS_ESN = 128,
};

struct node_caps {
  size_t arr_sz;
  long int* caps;
};

struct init_tree_node {
  enum fs_node_type type;
  struct init_tree_node* children;
  int ar_size;
  struct node_caps caps;
  int min_ft_level;
  int num_leaf_prios;
  int prio;
  int num_levels;
  enum mlx5_flow_table_miss_action def_miss_action;
};

enum fs_i_lock_class {
  FS_LOCK_GRANDPARENT = 0,
  FS_LOCK_PARENT = 1,
  FS_LOCK_CHILD = 2,
};

struct match_list {
  struct list_head list;
  struct mlx5_flow_group* g;
};

struct mlx5_irq;

struct mlx5_irq_table {
  struct mlx5_irq* irq;
  int nvec;
  struct cpu_rmap* rmap;
};

struct mlx5_irq {
  struct atomic_notifier_head nh;
  cpumask_var_t mask;
  char name[32];
};

struct mlx5_fc_cache {
  u64 packets;
  u64 bytes;
  u64 lastuse;
};

struct mlx5_fc_bulk;

struct mlx5_fc {
  struct list_head list;
  struct llist_node addlist;
  struct llist_node dellist;
  u64 lastpackets;
  u64 lastbytes;
  struct mlx5_fc_bulk* bulk;
  u32 id;
  bool aging;
  struct mlx5_fc_cache cache;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5_fc_bulk {
  struct list_head pool_list;
  u32 base_id;
  int bulk_len;
  long unsigned int* bitmask;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct mlx5_fc fcs[0];
};

struct mlx5_ifc_scheduling_context_bits {
  u8 element_type[8];
  u8 reserved_at_8[24];
  u8 element_attributes[32];
  u8 parent_element_id[32];
  u8 reserved_at_60[64];
  u8 bw_share[32];
  u8 max_average_bw[32];
  u8 reserved_at_e0[288];
};

struct mlx5_ifc_modify_scheduling_element_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 scheduling_hierarchy[8];
  u8 reserved_at_48[24];
  u8 scheduling_element_id[32];
  u8 reserved_at_80[32];
  u8 modify_bitmask[32];
  u8 reserved_at_c0[64];
  struct mlx5_ifc_scheduling_context_bits scheduling_context;
  u8 reserved_at_300[256];
};

struct mlx5_ifc_destroy_scheduling_element_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 scheduling_hierarchy[8];
  u8 reserved_at_48[24];
  u8 scheduling_element_id[32];
  u8 reserved_at_80[384];
};

struct mlx5_ifc_create_scheduling_element_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
  u8 scheduling_element_id[32];
  u8 reserved_at_a0[352];
};

struct mlx5_ifc_create_scheduling_element_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 scheduling_hierarchy[8];
  u8 reserved_at_48[24];
  u8 reserved_at_60[160];
  struct mlx5_ifc_scheduling_context_bits scheduling_context;
  u8 reserved_at_300[256];
};

struct mlx5_ifc_set_pp_rate_limit_context_bits {
  u8 rate_limit[32];
  u8 burst_upper_bound[32];
  u8 reserved_at_40[16];
  u8 typical_packet_size[16];
  u8 reserved_at_60[288];
};

struct mlx5_ifc_set_pp_rate_limit_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[16];
  u8 rate_limit_index[16];
  u8 reserved_at_60[32];
  struct mlx5_ifc_set_pp_rate_limit_context_bits ctx;
};

struct mlx5_rate_limit {
  u32 rate;
  u32 max_burst_sz;
  u16 typical_pkt_sz;
};

enum netdev_lag_tx_type {
  NETDEV_LAG_TX_TYPE_UNKNOWN = 0,
  NETDEV_LAG_TX_TYPE_RANDOM = 1,
  NETDEV_LAG_TX_TYPE_BROADCAST = 2,
  NETDEV_LAG_TX_TYPE_ROUNDROBIN = 3,
  NETDEV_LAG_TX_TYPE_ACTIVEBACKUP = 4,
  NETDEV_LAG_TX_TYPE_HASH = 5,
};

enum netdev_lag_hash {
  NETDEV_LAG_HASH_NONE = 0,
  NETDEV_LAG_HASH_L2 = 1,
  NETDEV_LAG_HASH_L34 = 2,
  NETDEV_LAG_HASH_L23 = 3,
  NETDEV_LAG_HASH_E23 = 4,
  NETDEV_LAG_HASH_E34 = 5,
  NETDEV_LAG_HASH_VLAN_SRCMAC = 6,
  NETDEV_LAG_HASH_UNKNOWN = 7,
};

struct netdev_lag_upper_info {
  enum netdev_lag_tx_type tx_type;
  enum netdev_lag_hash hash_type;
};

struct netdev_lag_lower_state_info {
  u8 link_up : 1;
  u8 tx_enabled : 1;
};

struct netdev_notifier_changeupper_info {
  struct netdev_notifier_info info;
  struct net_device* upper_dev;
  bool master;
  bool linking;
  void* upper_info;
};

struct netdev_notifier_changelowerstate_info {
  struct netdev_notifier_info info;
  void* lower_state_info;
};

struct mlx5_ifc_query_cong_statistics_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 clear[1];
  u8 reserved_at_41[31];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_lagc_bits {
  u8 fdb_selection_mode[1];
  u8 reserved_at_1[28];
  u8 lag_state[3];
  u8 reserved_at_20[20];
  u8 tx_remap_affinity_2[4];
  u8 reserved_at_38[4];
  u8 tx_remap_affinity_1[4];
};

struct mlx5_ifc_create_lag_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  struct mlx5_ifc_lagc_bits ctx;
};

struct mlx5_ifc_modify_lag_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[32];
  u8 field_select[32];
  struct mlx5_ifc_lagc_bits ctx;
};

struct mlx5_ifc_destroy_lag_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_create_vport_lag_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

struct mlx5_ifc_destroy_vport_lag_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

enum {
  MLX5_PRIV_FLAGS_DISABLE_IB_ADEV = 1,
  MLX5_PRIV_FLAGS_DISABLE_ALL_ADEV = 2,
  MLX5_PRIV_FLAGS_DETACH = 4,
};

struct lag_func {
  struct mlx5_core_dev* dev;
  struct net_device* netdev;
};

struct lag_tracker {
  enum netdev_lag_tx_type tx_type;
  struct netdev_lag_lower_state_info netdev_state[2];
  unsigned int is_bonded : 1;
};

struct lag_mp {
  struct notifier_block fib_nb;
  struct fib_info* mfi;
  struct workqueue_struct* wq;
};

struct mlx5_lag {
  u8 flags;
  u8 v2p_map[2];
  struct lag_func pf[2];
  struct lag_tracker tracker;
  struct workqueue_struct* wq;
  struct delayed_work bond_work;
  struct notifier_block nb;
  struct lag_mp lag_mp;
};

enum {
  MLX5_LAG_P1 = 0,
  MLX5_LAG_P2 = 1,
};

enum {
  MLX5_LAG_FLAG_ROCE = 1,
  MLX5_LAG_FLAG_SRIOV = 2,
  MLX5_LAG_FLAG_MULTIPATH = 4,
  MLX5_LAG_FLAG_READY = 8,
};

enum {
  MLX5_VIRTIO_Q_EVENT_MODE_NO_MSIX_MODE = 0,
  MLX5_VIRTIO_Q_EVENT_MODE_QP_MODE = 1,
  MLX5_VIRTIO_Q_EVENT_MODE_MSIX_MODE = 2,
};

enum {
  MLX5_INTERFACE_PROTOCOL_ETH = 0,
  MLX5_INTERFACE_PROTOCOL_ETH_REP = 1,
  MLX5_INTERFACE_PROTOCOL_IB = 2,
  MLX5_INTERFACE_PROTOCOL_IB_REP = 3,
  MLX5_INTERFACE_PROTOCOL_MPIB = 4,
  MLX5_INTERFACE_PROTOCOL_VNET = 5,
};

struct mlx5_adev_device {
  const char* suffix;
  bool (*is_supported)(struct mlx5_core_dev*);
};

struct mlx5_ifc_mpein_reg_bits {
  u8 reserved_at_0[2];
  u8 depth[6];
  u8 pcie_index[8];
  u8 node[8];
  u8 reserved_at_18[8];
  u8 capability_mask[32];
  u8 reserved_at_40[8];
  u8 link_width_enabled[8];
  u8 link_speed_enabled[16];
  u8 lane0_physical_position[8];
  u8 link_width_active[8];
  u8 link_speed_active[16];
  u8 num_of_pfs[16];
  u8 num_of_vfs[16];
  u8 bdf0[16];
  u8 reserved_at_b0[16];
  u8 max_read_request_size[4];
  u8 max_payload_size[4];
  u8 reserved_at_c8[5];
  u8 pwr_status[3];
  u8 port_type[4];
  u8 reserved_at_d4[11];
  u8 lane_reversal[1];
  u8 reserved_at_e0[20];
  u8 pci_power[12];
  u8 reserved_at_100[32];
  u8 device_status[16];
  u8 port_state[8];
  u8 reserved_at_138[8];
  u8 reserved_at_140[16];
  u8 receiver_detect_result[16];
  u8 reserved_at_160[32];
};

enum {
  MLX5_GENERAL_SUBTYPE_DELAY_DROP_TIMEOUT = 1,
  MLX5_GENERAL_SUBTYPE_PCI_POWER_CHANGE_EVENT = 5,
  MLX5_GENERAL_SUBTYPE_FW_LIVE_PATCH_EVENT = 7,
  MLX5_GENERAL_SUBTYPE_PCI_SYNC_FOR_FW_UPDATE_EVENT = 8,
};

struct mlx5_event_nb {
  struct mlx5_nb nb;
  void* ctx;
};

struct mlx5_pme_stats {
  u64 status_counters[5];
  u64 error_counters[13];
};

struct mlx5_events {
  struct mlx5_core_dev* dev;
  struct workqueue_struct* wq;
  struct mlx5_event_nb notifiers[17];
  struct atomic_notifier_head fw_nh;
  struct mlx5_pme_stats pme_stats;
  struct work_struct pcie_core_work;
  struct blocking_notifier_head sw_nh;
};

enum {
  MLX5_PCI_POWER_COULD_NOT_BE_READ = 0,
  MLX5_PCI_POWER_SUFFICIENT_REPORTED = 1,
  MLX5_PCI_POWER_INSUFFICIENT_REPORTED = 2,
};

struct mlx5_wqe_srq_next_seg {
  u8 rsvd0[2];
  __be16 next_wqe_index;
  u8 signature;
  u8 rsvd1[11];
};

enum {
  CQE_STRIDE_64 = 0,
  CQE_STRIDE_128 = 1,
  CQE_STRIDE_128_PAD = 2,
};

enum {
  MLX5_SEND_WQE_DS = 16,
  MLX5_SEND_WQE_BB = 64,
};

enum {
  MLX5_RCV_DBR = 0,
  MLX5_SND_DBR = 1,
};

struct mlx5_wq_param {
  int buf_numa_node;
  int db_numa_node;
};

struct mlx5_wq_qp {
  struct mlx5_wq_cyc rq;
  struct mlx5_wq_cyc sq;
};

struct mlx5_ifc_roce_addr_layout_bits {
  u8 source_l3_address[128];
  u8 reserved_at_80[3];
  u8 vlan_valid[1];
  u8 vlan_id[12];
  u8 source_mac_47_32[16];
  u8 source_mac_31_0[32];
  u8 reserved_at_c0[20];
  u8 roce_l3_type[4];
  u8 roce_version[8];
  u8 reserved_at_e0[32];
};

struct mlx5_ifc_set_roce_address_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 roce_address_index[16];
  u8 reserved_at_50[12];
  u8 vhca_port_num[4];
  u8 reserved_at_60[32];
  struct mlx5_ifc_roce_addr_layout_bits roce_address;
};

struct mlx5_devcom_list;

struct mlx5_devcom {
  struct mlx5_devcom_list* priv;
  int idx;
};

enum mlx5_devcom_components {
  MLX5_DEVCOM_ESW_OFFLOADS = 0,
  MLX5_DEVCOM_NUM_COMPONENTS = 1,
};

typedef int (*mlx5_devcom_event_handler_t)(int, void*, void*);

struct mlx5_devcom_component {
  struct {
    void* data;
  } device[2];
  mlx5_devcom_event_handler_t handler;
  struct rw_semaphore sem;
  bool paired;
};

struct mlx5_devcom_list {
  struct list_head list;
  struct mlx5_devcom_component components[1];
  struct mlx5_core_dev* devs[2];
};

enum {
  VSC_CTRL_OFFSET = 4,
  VSC_COUNTER_OFFSET = 8,
  VSC_SEMAPHORE_OFFSET = 12,
  VSC_ADDR_OFFSET = 16,
  VSC_DATA_OFFSET = 20,
  VSC_FLAG_BIT_OFFS = 31,
  VSC_FLAG_BIT_LEN = 1,
  VSC_SYND_BIT_OFFS = 30,
  VSC_SYND_BIT_LEN = 1,
  VSC_ADDR_BIT_OFFS = 0,
  VSC_ADDR_BIT_LEN = 30,
  VSC_SPACE_BIT_OFFS = 0,
  VSC_SPACE_BIT_LEN = 16,
  VSC_SIZE_VLD_BIT_OFFS = 28,
  VSC_SIZE_VLD_BIT_LEN = 1,
  VSC_STATUS_BIT_OFFS = 29,
  VSC_STATUS_BIT_LEN = 3,
};

struct mlx5_ifc_general_obj_in_cmd_hdr_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 vhca_tunnel_id[16];
  u8 obj_type[16];
  u8 obj_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_general_obj_out_cmd_hdr_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 obj_id[32];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_sw_icm_bits {
  u8 modify_field_select[64];
  u8 reserved_at_40[24];
  u8 log_sw_icm_size[8];
  u8 reserved_at_60[32];
  u8 sw_icm_start_addr[64];
  u8 reserved_at_c0[320];
};

enum mlx5_sw_icm_type {
  MLX5_SW_ICM_TYPE_STEERING = 0,
  MLX5_SW_ICM_TYPE_HEADER_MODIFY = 1,
};

struct mlx5_dm {
  spinlock_t lock;
  long unsigned int* steering_sw_icm_alloc_blocks;
  long unsigned int* header_modify_sw_icm_alloc_blocks;
};

enum {
  MLX5_CREATE_FLOW_GROUP_IN_MATCH_CRITERIA_ENABLE_OUTER_HEADERS = 0,
  MLX5_CREATE_FLOW_GROUP_IN_MATCH_CRITERIA_ENABLE_MISC_PARAMETERS = 1,
  MLX5_CREATE_FLOW_GROUP_IN_MATCH_CRITERIA_ENABLE_INNER_HEADERS = 2,
  MLX5_CREATE_FLOW_GROUP_IN_MATCH_CRITERIA_ENABLE_MISC_PARAMETERS_2 = 3,
};

struct trace_event_raw_mlx5_fs_add_ft {
  struct trace_entry ent;
  const struct mlx5_flow_table* ft;
  u32 id;
  u32 level;
  u32 type;
  char __data[0];
};

struct trace_event_raw_mlx5_fs_del_ft {
  struct trace_entry ent;
  const struct mlx5_flow_table* ft;
  u32 id;
  char __data[0];
};

struct trace_event_raw_mlx5_fs_add_fg {
  struct trace_entry ent;
  const struct mlx5_flow_group* fg;
  const struct mlx5_flow_table* ft;
  u32 start_index;
  u32 end_index;
  u32 id;
  u8 mask_enable;
  u32 mask_outer[16];
  u32 mask_inner[16];
  u32 mask_misc[16];
  char __data[0];
};

struct trace_event_raw_mlx5_fs_del_fg {
  struct trace_entry ent;
  const struct mlx5_flow_group* fg;
  u32 id;
  char __data[0];
};

struct trace_event_raw_mlx5_fs_set_fte {
  struct trace_entry ent;
  const struct fs_fte* fte;
  const struct mlx5_flow_group* fg;
  u32 group_index;
  u32 index;
  u32 action;
  u32 flow_tag;
  u32 flow_source;
  u8 mask_enable;
  int new_fte;
  u32 mask_outer[16];
  u32 mask_inner[16];
  u32 mask_misc[16];
  u32 value_outer[16];
  u32 value_inner[16];
  u32 value_misc[16];
  char __data[0];
};

struct trace_event_raw_mlx5_fs_del_fte {
  struct trace_entry ent;
  const struct fs_fte* fte;
  u32 index;
  char __data[0];
};

struct trace_event_raw_mlx5_fs_add_rule {
  struct trace_entry ent;
  const struct mlx5_flow_rule* rule;
  const struct fs_fte* fte;
  u32 sw_action;
  u32 index;
  u32 counter_id;
  u8 destination[32];
  char __data[0];
};

struct trace_event_raw_mlx5_fs_del_rule {
  struct trace_entry ent;
  const struct mlx5_flow_rule* rule;
  const struct fs_fte* fte;
  char __data[0];
};

struct trace_event_data_offsets_mlx5_fs_add_ft {};

struct trace_event_data_offsets_mlx5_fs_del_ft {};

struct trace_event_data_offsets_mlx5_fs_add_fg {};

struct trace_event_data_offsets_mlx5_fs_del_fg {};

struct trace_event_data_offsets_mlx5_fs_set_fte {};

struct trace_event_data_offsets_mlx5_fs_del_fte {};

struct trace_event_data_offsets_mlx5_fs_add_rule {};

struct trace_event_data_offsets_mlx5_fs_del_rule {};

typedef void (*btf_trace_mlx5_fs_add_ft)(void*, const struct mlx5_flow_table*);

typedef void (*btf_trace_mlx5_fs_del_ft)(void*, const struct mlx5_flow_table*);

typedef void (*btf_trace_mlx5_fs_add_fg)(void*, const struct mlx5_flow_group*);

typedef void (*btf_trace_mlx5_fs_del_fg)(void*, const struct mlx5_flow_group*);

typedef void (*btf_trace_mlx5_fs_set_fte)(void*, const struct fs_fte*, int);

typedef void (*btf_trace_mlx5_fs_del_fte)(void*, const struct fs_fte*);

typedef void (*btf_trace_mlx5_fs_add_rule)(void*, const struct mlx5_flow_rule*);

typedef void (*btf_trace_mlx5_fs_del_rule)(void*, const struct mlx5_flow_rule*);

enum {
  MLX5_MKC_ACCESS_MODE_PA = 0,
  MLX5_MKC_ACCESS_MODE_MTT = 1,
  MLX5_MKC_ACCESS_MODE_KLMS = 2,
  MLX5_MKC_ACCESS_MODE_KSM = 3,
  MLX5_MKC_ACCESS_MODE_SW_ICM = 4,
  MLX5_MKC_ACCESS_MODE_MEMIC = 5,
};

struct mlx5_ifc_core_dump_reg_bits {
  u8 reserved_at_0[24];
  u8 core_dump_type[8];
  u8 reserved_at_20[48];
  u8 vhca_id[16];
  u8 reserved_at_60[8];
  u8 qpn[24];
  u8 reserved_at_80[384];
};

struct mlx5_ifc_mtrc_string_db_param_bits {
  u8 string_db_base_address[32];
  u8 reserved_at_20[8];
  u8 string_db_size[24];
};

struct mlx5_ifc_mtrc_cap_bits {
  u8 trace_owner[1];
  u8 trace_to_memory[1];
  u8 reserved_at_2[4];
  u8 trc_ver[2];
  u8 reserved_at_8[20];
  u8 num_string_db[4];
  u8 first_string_trace[8];
  u8 num_string_trace[8];
  u8 reserved_at_30[40];
  u8 log_max_trace_buffer_size[8];
  u8 reserved_at_60[32];
  struct mlx5_ifc_mtrc_string_db_param_bits string_db_param[8];
  u8 reserved_at_280[384];
};

struct mlx5_ifc_mtrc_conf_bits {
  u8 reserved_at_0[28];
  u8 trace_mode[4];
  u8 reserved_at_20[24];
  u8 log_trace_buffer_size[8];
  u8 trace_mkey[32];
  u8 reserved_at_60[928];
};

struct mlx5_ifc_mtrc_stdb_bits {
  u8 string_db_index[4];
  u8 reserved_at_4[4];
  u8 read_size[24];
  u8 start_offset[32];
  u8 string_db_data[0];
};

struct mlx5_ifc_mtrc_ctrl_bits {
  u8 trace_status[2];
  u8 reserved_at_2[2];
  u8 arm_event[1];
  u8 reserved_at_5[11];
  u8 modify_field_select[16];
  u8 reserved_at_20[43];
  u8 current_timestamp52_32[21];
  u8 current_timestamp31_0[32];
  u8 reserved_at_80[384];
};

enum {
  MLX5_TRACER_SUBTYPE_OWNERSHIP_CHANGE = 0,
  MLX5_TRACER_SUBTYPE_TRACES_AVAILABLE = 1,
};

struct tracer_string_format {
  char* string;
  int params[7];
  int num_of_params;
  int last_param_num;
  u8 event_id;
  u32 tmsn;
  struct hlist_node hlist;
  struct list_head list;
  u32 timestamp;
  bool lost;
};

enum mlx5_fw_tracer_ownership_state {
  MLX5_FW_TRACER_RELEASE_OWNERSHIP = 0,
  MLX5_FW_TRACER_ACQUIRE_OWNERSHIP = 1,
};

enum tracer_ctrl_fields_select {
  TRACE_STATUS = 1,
};

enum tracer_event_type {
  TRACER_EVENT_TYPE_STRING = 0,
  TRACER_EVENT_TYPE_TIMESTAMP = 255,
  TRACER_EVENT_TYPE_UNRECOGNIZED = 256,
};

enum tracing_mode {
  TRACE_TO_MEMORY = 1,
};

struct tracer_timestamp_event {
  u64 timestamp;
  u8 unreliable;
};

struct tracer_string_event {
  u32 timestamp;
  u32 tmsn;
  u32 tdsn;
  u32 string_param;
};

struct tracer_event {
  bool lost_event;
  u32 type;
  u8 event_id;
  union {
    struct tracer_string_event string_event;
    struct tracer_timestamp_event timestamp_event;
  };
};

struct mlx5_ifc_tracer_event_bits {
  u8 lost[1];
  u8 timestamp[7];
  u8 event_id[8];
  u8 event_data[48];
};

struct mlx5_ifc_tracer_string_event_bits {
  u8 lost[1];
  u8 timestamp[7];
  u8 event_id[8];
  u8 tmsn[13];
  u8 tdsn[3];
  u8 string_param[32];
};

struct mlx5_ifc_tracer_timestamp_event_bits {
  u8 timestamp7_0[8];
  u8 event_id[8];
  u8 urts[3];
  u8 timestamp52_40[13];
  u8 timestamp39_8[32];
};

struct trace_event_raw_mlx5_fw {
  struct trace_entry ent;
  u32 __data_loc_dev_name;
  u64 trace_timestamp;
  bool lost;
  u8 event_id;
  u32 __data_loc_msg;
  char __data[0];
};

struct trace_event_data_offsets_mlx5_fw {
  u32 dev_name;
  u32 msg;
};

typedef void (*btf_trace_mlx5_fw)(
    void*,
    const struct mlx5_fw_tracer*,
    u64,
    bool,
    u8,
    const char*);

enum {
  MLX5_VSC_SPACE_SCAN_CRSPACE = 7,
};

enum devlink_trap_generic_id {
  DEVLINK_TRAP_GENERIC_ID_SMAC_MC = 0,
  DEVLINK_TRAP_GENERIC_ID_VLAN_TAG_MISMATCH = 1,
  DEVLINK_TRAP_GENERIC_ID_INGRESS_VLAN_FILTER = 2,
  DEVLINK_TRAP_GENERIC_ID_INGRESS_STP_FILTER = 3,
  DEVLINK_TRAP_GENERIC_ID_EMPTY_TX_LIST = 4,
  DEVLINK_TRAP_GENERIC_ID_PORT_LOOPBACK_FILTER = 5,
  DEVLINK_TRAP_GENERIC_ID_BLACKHOLE_ROUTE = 6,
  DEVLINK_TRAP_GENERIC_ID_TTL_ERROR = 7,
  DEVLINK_TRAP_GENERIC_ID_TAIL_DROP = 8,
  DEVLINK_TRAP_GENERIC_ID_NON_IP_PACKET = 9,
  DEVLINK_TRAP_GENERIC_ID_UC_DIP_MC_DMAC = 10,
  DEVLINK_TRAP_GENERIC_ID_DIP_LB = 11,
  DEVLINK_TRAP_GENERIC_ID_SIP_MC = 12,
  DEVLINK_TRAP_GENERIC_ID_SIP_LB = 13,
  DEVLINK_TRAP_GENERIC_ID_CORRUPTED_IP_HDR = 14,
  DEVLINK_TRAP_GENERIC_ID_IPV4_SIP_BC = 15,
  DEVLINK_TRAP_GENERIC_ID_IPV6_MC_DIP_RESERVED_SCOPE = 16,
  DEVLINK_TRAP_GENERIC_ID_IPV6_MC_DIP_INTERFACE_LOCAL_SCOPE = 17,
  DEVLINK_TRAP_GENERIC_ID_MTU_ERROR = 18,
  DEVLINK_TRAP_GENERIC_ID_UNRESOLVED_NEIGH = 19,
  DEVLINK_TRAP_GENERIC_ID_RPF = 20,
  DEVLINK_TRAP_GENERIC_ID_REJECT_ROUTE = 21,
  DEVLINK_TRAP_GENERIC_ID_IPV4_LPM_UNICAST_MISS = 22,
  DEVLINK_TRAP_GENERIC_ID_IPV6_LPM_UNICAST_MISS = 23,
  DEVLINK_TRAP_GENERIC_ID_NON_ROUTABLE = 24,
  DEVLINK_TRAP_GENERIC_ID_DECAP_ERROR = 25,
  DEVLINK_TRAP_GENERIC_ID_OVERLAY_SMAC_MC = 26,
  DEVLINK_TRAP_GENERIC_ID_INGRESS_FLOW_ACTION_DROP = 27,
  DEVLINK_TRAP_GENERIC_ID_EGRESS_FLOW_ACTION_DROP = 28,
  DEVLINK_TRAP_GENERIC_ID_STP = 29,
  DEVLINK_TRAP_GENERIC_ID_LACP = 30,
  DEVLINK_TRAP_GENERIC_ID_LLDP = 31,
  DEVLINK_TRAP_GENERIC_ID_IGMP_QUERY = 32,
  DEVLINK_TRAP_GENERIC_ID_IGMP_V1_REPORT = 33,
  DEVLINK_TRAP_GENERIC_ID_IGMP_V2_REPORT = 34,
  DEVLINK_TRAP_GENERIC_ID_IGMP_V3_REPORT = 35,
  DEVLINK_TRAP_GENERIC_ID_IGMP_V2_LEAVE = 36,
  DEVLINK_TRAP_GENERIC_ID_MLD_QUERY = 37,
  DEVLINK_TRAP_GENERIC_ID_MLD_V1_REPORT = 38,
  DEVLINK_TRAP_GENERIC_ID_MLD_V2_REPORT = 39,
  DEVLINK_TRAP_GENERIC_ID_MLD_V1_DONE = 40,
  DEVLINK_TRAP_GENERIC_ID_IPV4_DHCP = 41,
  DEVLINK_TRAP_GENERIC_ID_IPV6_DHCP = 42,
  DEVLINK_TRAP_GENERIC_ID_ARP_REQUEST = 43,
  DEVLINK_TRAP_GENERIC_ID_ARP_RESPONSE = 44,
  DEVLINK_TRAP_GENERIC_ID_ARP_OVERLAY = 45,
  DEVLINK_TRAP_GENERIC_ID_IPV6_NEIGH_SOLICIT = 46,
  DEVLINK_TRAP_GENERIC_ID_IPV6_NEIGH_ADVERT = 47,
  DEVLINK_TRAP_GENERIC_ID_IPV4_BFD = 48,
  DEVLINK_TRAP_GENERIC_ID_IPV6_BFD = 49,
  DEVLINK_TRAP_GENERIC_ID_IPV4_OSPF = 50,
  DEVLINK_TRAP_GENERIC_ID_IPV6_OSPF = 51,
  DEVLINK_TRAP_GENERIC_ID_IPV4_BGP = 52,
  DEVLINK_TRAP_GENERIC_ID_IPV6_BGP = 53,
  DEVLINK_TRAP_GENERIC_ID_IPV4_VRRP = 54,
  DEVLINK_TRAP_GENERIC_ID_IPV6_VRRP = 55,
  DEVLINK_TRAP_GENERIC_ID_IPV4_PIM = 56,
  DEVLINK_TRAP_GENERIC_ID_IPV6_PIM = 57,
  DEVLINK_TRAP_GENERIC_ID_UC_LB = 58,
  DEVLINK_TRAP_GENERIC_ID_LOCAL_ROUTE = 59,
  DEVLINK_TRAP_GENERIC_ID_EXTERNAL_ROUTE = 60,
  DEVLINK_TRAP_GENERIC_ID_IPV6_UC_DIP_LINK_LOCAL_SCOPE = 61,
  DEVLINK_TRAP_GENERIC_ID_IPV6_DIP_ALL_NODES = 62,
  DEVLINK_TRAP_GENERIC_ID_IPV6_DIP_ALL_ROUTERS = 63,
  DEVLINK_TRAP_GENERIC_ID_IPV6_ROUTER_SOLICIT = 64,
  DEVLINK_TRAP_GENERIC_ID_IPV6_ROUTER_ADVERT = 65,
  DEVLINK_TRAP_GENERIC_ID_IPV6_REDIRECT = 66,
  DEVLINK_TRAP_GENERIC_ID_IPV4_ROUTER_ALERT = 67,
  DEVLINK_TRAP_GENERIC_ID_IPV6_ROUTER_ALERT = 68,
  DEVLINK_TRAP_GENERIC_ID_PTP_EVENT = 69,
  DEVLINK_TRAP_GENERIC_ID_PTP_GENERAL = 70,
  DEVLINK_TRAP_GENERIC_ID_FLOW_ACTION_SAMPLE = 71,
  DEVLINK_TRAP_GENERIC_ID_FLOW_ACTION_TRAP = 72,
  DEVLINK_TRAP_GENERIC_ID_EARLY_DROP = 73,
  DEVLINK_TRAP_GENERIC_ID_VXLAN_PARSING = 74,
  DEVLINK_TRAP_GENERIC_ID_LLC_SNAP_PARSING = 75,
  DEVLINK_TRAP_GENERIC_ID_VLAN_PARSING = 76,
  DEVLINK_TRAP_GENERIC_ID_PPPOE_PPP_PARSING = 77,
  DEVLINK_TRAP_GENERIC_ID_MPLS_PARSING = 78,
  DEVLINK_TRAP_GENERIC_ID_ARP_PARSING = 79,
  DEVLINK_TRAP_GENERIC_ID_IP_1_PARSING = 80,
  DEVLINK_TRAP_GENERIC_ID_IP_N_PARSING = 81,
  DEVLINK_TRAP_GENERIC_ID_GRE_PARSING = 82,
  DEVLINK_TRAP_GENERIC_ID_UDP_PARSING = 83,
  DEVLINK_TRAP_GENERIC_ID_TCP_PARSING = 84,
  DEVLINK_TRAP_GENERIC_ID_IPSEC_PARSING = 85,
  DEVLINK_TRAP_GENERIC_ID_SCTP_PARSING = 86,
  DEVLINK_TRAP_GENERIC_ID_DCCP_PARSING = 87,
  DEVLINK_TRAP_GENERIC_ID_GTP_PARSING = 88,
  DEVLINK_TRAP_GENERIC_ID_ESP_PARSING = 89,
  DEVLINK_TRAP_GENERIC_ID_BLACKHOLE_NEXTHOP = 90,
  DEVLINK_TRAP_GENERIC_ID_DMAC_FILTER = 91,
  __DEVLINK_TRAP_GENERIC_ID_MAX = 92,
  DEVLINK_TRAP_GENERIC_ID_MAX = 91,
};

enum devlink_trap_group_generic_id {
  DEVLINK_TRAP_GROUP_GENERIC_ID_L2_DROPS = 0,
  DEVLINK_TRAP_GROUP_GENERIC_ID_L3_DROPS = 1,
  DEVLINK_TRAP_GROUP_GENERIC_ID_L3_EXCEPTIONS = 2,
  DEVLINK_TRAP_GROUP_GENERIC_ID_BUFFER_DROPS = 3,
  DEVLINK_TRAP_GROUP_GENERIC_ID_TUNNEL_DROPS = 4,
  DEVLINK_TRAP_GROUP_GENERIC_ID_ACL_DROPS = 5,
  DEVLINK_TRAP_GROUP_GENERIC_ID_STP = 6,
  DEVLINK_TRAP_GROUP_GENERIC_ID_LACP = 7,
  DEVLINK_TRAP_GROUP_GENERIC_ID_LLDP = 8,
  DEVLINK_TRAP_GROUP_GENERIC_ID_MC_SNOOPING = 9,
  DEVLINK_TRAP_GROUP_GENERIC_ID_DHCP = 10,
  DEVLINK_TRAP_GROUP_GENERIC_ID_NEIGH_DISCOVERY = 11,
  DEVLINK_TRAP_GROUP_GENERIC_ID_BFD = 12,
  DEVLINK_TRAP_GROUP_GENERIC_ID_OSPF = 13,
  DEVLINK_TRAP_GROUP_GENERIC_ID_BGP = 14,
  DEVLINK_TRAP_GROUP_GENERIC_ID_VRRP = 15,
  DEVLINK_TRAP_GROUP_GENERIC_ID_PIM = 16,
  DEVLINK_TRAP_GROUP_GENERIC_ID_UC_LB = 17,
  DEVLINK_TRAP_GROUP_GENERIC_ID_LOCAL_DELIVERY = 18,
  DEVLINK_TRAP_GROUP_GENERIC_ID_EXTERNAL_DELIVERY = 19,
  DEVLINK_TRAP_GROUP_GENERIC_ID_IPV6 = 20,
  DEVLINK_TRAP_GROUP_GENERIC_ID_PTP_EVENT = 21,
  DEVLINK_TRAP_GROUP_GENERIC_ID_PTP_GENERAL = 22,
  DEVLINK_TRAP_GROUP_GENERIC_ID_ACL_SAMPLE = 23,
  DEVLINK_TRAP_GROUP_GENERIC_ID_ACL_TRAP = 24,
  DEVLINK_TRAP_GROUP_GENERIC_ID_PARSER_ERROR_DROPS = 25,
  __DEVLINK_TRAP_GROUP_GENERIC_ID_MAX = 26,
  DEVLINK_TRAP_GROUP_GENERIC_ID_MAX = 25,
};

enum mlx5_devlink_param_id {
  MLX5_DEVLINK_PARAM_ID_BASE = 10,
  MLX5_DEVLINK_PARAM_ID_FLOW_STEERING_MODE = 11,
  MLX5_DEVLINK_PARAM_ID_ESW_LARGE_GROUP_NUM = 12,
  MLX5_DEVLINK_PARAM_ID_ESW_PORT_METADATA = 13,
};

struct mlx5_trap_ctx {
  int id;
  int action;
};

struct mlx5_devlink_trap {
  struct mlx5_trap_ctx trap;
  void* item;
  struct list_head list;
};

enum {
  MLX5_MFRL_REG_RESET_TYPE_FULL_CHIP = 1,
  MLX5_MFRL_REG_RESET_TYPE_NET_PORT_ALIVE = 2,
};

enum {
  MLX5_MFRL_REG_RESET_LEVEL0 = 1,
  MLX5_MFRL_REG_RESET_LEVEL3 = 8,
  MLX5_MFRL_REG_RESET_LEVEL6 = 64,
};

enum mlx5_driver_event {
  MLX5_DRIVER_EVENT_TYPE_TRAP = 0,
};

enum {
  MLX5_ESWITCH_NONE = 0,
  MLX5_ESWITCH_LEGACY = 1,
  MLX5_ESWITCH_OFFLOADS = 2,
};

struct mlx5_ifc_resource_dump_bits {
  u8 more_dump[1];
  u8 inline_dump[1];
  u8 reserved_at_2[10];
  u8 seq_num[4];
  u8 segment_type[16];
  u8 reserved_at_20[16];
  u8 vhca_id[16];
  u8 index1[32];
  u8 index2[32];
  u8 num_of_obj1[16];
  u8 num_of_obj2[16];
  u8 reserved_at_a0[32];
  u8 device_opaque[64];
  u8 mkey[32];
  u8 size[32];
  u8 address[64];
  u8 inline_data[1664];
};

struct mlx5_ifc_resource_dump_menu_record_bits {
  u8 reserved_at_0[4];
  u8 num_of_obj2_supports_active[1];
  u8 num_of_obj2_supports_all[1];
  u8 must_have_num_of_obj2[1];
  u8 support_num_of_obj2[1];
  u8 num_of_obj1_supports_active[1];
  u8 num_of_obj1_supports_all[1];
  u8 must_have_num_of_obj1[1];
  u8 support_num_of_obj1[1];
  u8 must_have_index2[1];
  u8 support_index2[1];
  u8 must_have_index1[1];
  u8 support_index1[1];
  u8 segment_type[16];
  u8 segment_name[128];
  u8 index1_name[128];
  u8 index2_name[128];
};

struct mlx5_ifc_resource_dump_segment_header_bits {
  u8 length_dw[16];
  u8 segment_type[16];
};

struct mlx5_ifc_resource_dump_menu_segment_bits {
  struct mlx5_ifc_resource_dump_segment_header_bits segment_header;
  u8 reserved_at_20[16];
  u8 num_of_records[16];
  struct mlx5_ifc_resource_dump_menu_record_bits record[0];
};

struct mlx5_rsc_dump {
  u32 pdn;
  struct mlx5_core_mkey mkey;
  u16 fw_segment_type[21];
};

enum mlx5_sgmt_type {
  MLX5_SGMT_TYPE_HW_CQPC = 0,
  MLX5_SGMT_TYPE_HW_SQPC = 1,
  MLX5_SGMT_TYPE_HW_RQPC = 2,
  MLX5_SGMT_TYPE_FULL_SRQC = 3,
  MLX5_SGMT_TYPE_FULL_CQC = 4,
  MLX5_SGMT_TYPE_FULL_EQC = 5,
  MLX5_SGMT_TYPE_FULL_QPC = 6,
  MLX5_SGMT_TYPE_SND_BUFF = 7,
  MLX5_SGMT_TYPE_RCV_BUFF = 8,
  MLX5_SGMT_TYPE_SRQ_BUFF = 9,
  MLX5_SGMT_TYPE_CQ_BUFF = 10,
  MLX5_SGMT_TYPE_EQ_BUFF = 11,
  MLX5_SGMT_TYPE_SX_SLICE = 12,
  MLX5_SGMT_TYPE_SX_SLICE_ALL = 13,
  MLX5_SGMT_TYPE_RDB = 14,
  MLX5_SGMT_TYPE_RX_SLICE_ALL = 15,
  MLX5_SGMT_TYPE_PRM_QUERY_QP = 16,
  MLX5_SGMT_TYPE_PRM_QUERY_CQ = 17,
  MLX5_SGMT_TYPE_PRM_QUERY_MKEY = 18,
  MLX5_SGMT_TYPE_MENU = 19,
  MLX5_SGMT_TYPE_TERMINATE = 20,
  MLX5_SGMT_TYPE_NUM = 21,
};

struct mlx5_rsc_key {
  enum mlx5_sgmt_type rsc;
  int index1;
  int index2;
  int num_of_obj1;
  int num_of_obj2;
  int size;
};

struct mlx5_rsc_dump_cmd {
  u64 mem_size;
  u8 cmd[256];
};

struct mlx5_ifc_mfrl_reg_bits {
  u8 reserved_at_0[32];
  u8 reserved_at_20[2];
  u8 pci_sync_for_fw_update_start[1];
  u8 pci_sync_for_fw_update_resp[2];
  u8 rst_type_sel[3];
  u8 reserved_at_28[8];
  u8 reset_type[8];
  u8 reset_level[8];
};

enum sync_rst_state_type {
  MLX5_SYNC_RST_STATE_RESET_REQUEST = 0,
  MLX5_SYNC_RST_STATE_RESET_NOW = 1,
  MLX5_SYNC_RST_STATE_RESET_ABORT = 2,
};

struct mlx5_fw_reset {
  struct mlx5_core_dev* dev;
  struct mlx5_nb nb;
  struct workqueue_struct* wq;
  struct work_struct fw_live_patch_work;
  struct work_struct reset_request_work;
  struct work_struct reset_reload_work;
  struct work_struct reset_now_work;
  struct work_struct reset_abort_work;
  long unsigned int reset_flags;
  struct timer_list timer;
  struct completion done;
  int ret;
};

enum {
  MLX5_FW_RESET_FLAGS_RESET_REQUESTED = 0,
  MLX5_FW_RESET_FLAGS_NACK_RESET_REQUEST = 1,
  MLX5_FW_RESET_FLAGS_PENDING_COMP = 2,
};

enum {
  SCHEDULING_CONTEXT_ELEMENT_TYPE_TSAR = 0,
  SCHEDULING_CONTEXT_ELEMENT_TYPE_VPORT = 1,
  SCHEDULING_CONTEXT_ELEMENT_TYPE_VPORT_TC = 2,
  SCHEDULING_CONTEXT_ELEMENT_TYPE_PARA_VPORT_TC = 3,
  SCHEDULING_CONTEXT_ELEMENT_TYPE_QUEUE_GROUP = 4,
};

enum {
  TSAR_ELEMENT_TSAR_TYPE_DWRR = 0,
  TSAR_ELEMENT_TSAR_TYPE_ROUND_ROBIN = 1,
  TSAR_ELEMENT_TSAR_TYPE_ETS = 2,
};

struct mlx5_ifc_tsar_element_bits {
  u8 reserved_at_0[8];
  u8 tsar_type[8];
  u8 reserved_at_10[16];
};

enum {
  SCHEDULING_HIERARCHY_E_SWITCH = 2,
  SCHEDULING_HIERARCHY_NIC = 3,
};

enum {
  MODIFY_SCHEDULING_ELEMENT_IN_MODIFY_BITMASK_BW_SHARE = 1,
  MODIFY_SCHEDULING_ELEMENT_IN_MODIFY_BITMASK_MAX_AVERAGE_BW = 2,
};

enum flow_block_command {
  FLOW_BLOCK_BIND = 0,
  FLOW_BLOCK_UNBIND = 1,
};

enum flow_block_binder_type {
  FLOW_BLOCK_BINDER_TYPE_UNSPEC = 0,
  FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS = 1,
  FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS = 2,
  FLOW_BLOCK_BINDER_TYPE_RED_EARLY_DROP = 3,
  FLOW_BLOCK_BINDER_TYPE_RED_MARK = 4,
};

struct flow_block_offload {
  enum flow_block_command command;
  enum flow_block_binder_type binder_type;
  bool block_shared;
  bool unlocked_driver_cb;
  struct net* net;
  struct flow_block* block;
  struct list_head cb_list;
  struct list_head* driver_block_list;
  struct netlink_ext_ack* extack;
  struct Qdisc* sch;
};

enum tc_htb_command {
  TC_HTB_CREATE = 0,
  TC_HTB_DESTROY = 1,
  TC_HTB_LEAF_ALLOC_QUEUE = 2,
  TC_HTB_LEAF_TO_INNER = 3,
  TC_HTB_LEAF_DEL = 4,
  TC_HTB_LEAF_DEL_LAST = 5,
  TC_HTB_LEAF_DEL_LAST_FORCE = 6,
  TC_HTB_NODE_MODIFY = 7,
  TC_HTB_LEAF_QUERY_QUEUE = 8,
};

struct tc_htb_qopt_offload {
  struct netlink_ext_ack* extack;
  enum tc_htb_command command;
  u16 classid;
  u32 parent_classid;
  u16 qid;
  u16 moved_qid;
  u64 rate;
  u64 ceil;
};

enum {
  MLX5_WQ_TYPE_LINKED_LIST = 0,
  MLX5_WQ_TYPE_CYCLIC = 1,
  MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ = 2,
  MLX5_WQ_TYPE_CYCLIC_STRIDING_RQ = 3,
};

enum {
  MLX5_SQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING = 0,
  MLX5_SQ_TIMESTAMP_FORMAT_CAP_REAL_TIME = 1,
  MLX5_SQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING_AND_REAL_TIME = 2,
};

enum {
  MLX5_RQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING = 0,
  MLX5_RQ_TIMESTAMP_FORMAT_CAP_REAL_TIME = 1,
  MLX5_RQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING_AND_REAL_TIME = 2,
};

enum {
  MLX5_TIRC_DISP_TYPE_DIRECT = 0,
  MLX5_TIRC_DISP_TYPE_INDIRECT = 1,
};

enum {
  MLX5_TIRC_LRO_ENABLE_MASK_IPV4_LRO = 1,
  MLX5_TIRC_LRO_ENABLE_MASK_IPV6_LRO = 2,
};

enum {
  MLX5_RX_HASH_FN_NONE = 0,
  MLX5_RX_HASH_FN_INVERTED_XOR8 = 1,
  MLX5_RX_HASH_FN_TOEPLITZ = 2,
};

enum {
  MLX5_SQC_TIMESTAMP_FORMAT_FREE_RUNNING = 0,
  MLX5_SQC_TIMESTAMP_FORMAT_DEFAULT = 1,
  MLX5_SQC_TIMESTAMP_FORMAT_REAL_TIME = 2,
};

enum {
  MLX5_RQC_TIMESTAMP_FORMAT_FREE_RUNNING = 0,
  MLX5_RQC_TIMESTAMP_FORMAT_DEFAULT = 1,
  MLX5_RQC_TIMESTAMP_FORMAT_REAL_TIME = 2,
};

enum {
  MLX5_CQ_PERIOD_MODE_START_FROM_EQE = 0,
  MLX5_CQ_PERIOD_MODE_START_FROM_CQE = 1,
  MLX5_CQ_PERIOD_NUM_MODES = 2,
};

enum {
  MLX5_VPORT_STATE_OP_MOD_VNIC_VPORT = 0,
  MLX5_VPORT_STATE_OP_MOD_ESW_VPORT = 1,
  MLX5_VPORT_STATE_OP_MOD_UPLINK = 2,
};

enum {
  MLX5_MODIFY_RQ_IN_MODIFY_BITMASK_VSD = 2,
  MLX5_MODIFY_RQ_IN_MODIFY_BITMASK_SCATTER_FCS = 4,
  MLX5_MODIFY_RQ_IN_MODIFY_BITMASK_RQ_COUNTER_SET_ID = 8,
};

struct mlx5_ifc_dealloc_q_counter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[24];
  u8 counter_set_id[8];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_q_counter_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[24];
  u8 counter_set_id[8];
  u8 reserved_at_60[32];
};

struct mlx5_ifc_alloc_q_counter_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[64];
};

enum {
  MLX5_HW_START_PADDING = 2147483648,
};

enum {
  MLX5_MKEY_MASK_LEN = 1,
  MLX5_MKEY_MASK_PAGE_SIZE = 2,
  MLX5_MKEY_MASK_START_ADDR = 64,
  MLX5_MKEY_MASK_PD = 128,
  MLX5_MKEY_MASK_EN_RINVAL = 256,
  MLX5_MKEY_MASK_EN_SIGERR = 512,
  MLX5_MKEY_MASK_BSF_EN = 4096,
  MLX5_MKEY_MASK_KEY = 8192,
  MLX5_MKEY_MASK_QPN = 16384,
  MLX5_MKEY_MASK_LR = 131072,
  MLX5_MKEY_MASK_LW = 262144,
  MLX5_MKEY_MASK_RR = 524288,
  MLX5_MKEY_MASK_RW = 1048576,
  MLX5_MKEY_MASK_A = 2097152,
  MLX5_MKEY_MASK_SMALL_FENCE = 8388608,
  MLX5_MKEY_MASK_RELAXED_ORDERING_WRITE = 33554432,
  MLX5_MKEY_MASK_FREE = 536870912,
  MLX5_MKEY_MASK_RELAXED_ORDERING_READ = 0,
};

enum {
  MLX5_UMR_TRANSLATION_OFFSET_EN = 16,
  MLX5_UMR_CHECK_NOT_FREE = 32,
  MLX5_UMR_CHECK_FREE = 64,
  MLX5_UMR_INLINE = 128,
};

enum {
  MLX5_PORT_CHANGE_SUBTYPE_DOWN = 1,
  MLX5_PORT_CHANGE_SUBTYPE_ACTIVE = 4,
  MLX5_PORT_CHANGE_SUBTYPE_INITIALIZED = 5,
  MLX5_PORT_CHANGE_SUBTYPE_LID = 6,
  MLX5_PORT_CHANGE_SUBTYPE_PKEY = 7,
  MLX5_PORT_CHANGE_SUBTYPE_GUID = 8,
  MLX5_PORT_CHANGE_SUBTYPE_CLIENT_REREG = 9,
};

enum {
  MLX5_OPCODE_NOP = 0,
  MLX5_OPCODE_SEND_INVAL = 1,
  MLX5_OPCODE_RDMA_WRITE = 8,
  MLX5_OPCODE_RDMA_WRITE_IMM = 9,
  MLX5_OPCODE_SEND = 10,
  MLX5_OPCODE_SEND_IMM = 11,
  MLX5_OPCODE_LSO = 14,
  MLX5_OPCODE_RDMA_READ = 16,
  MLX5_OPCODE_ATOMIC_CS = 17,
  MLX5_OPCODE_ATOMIC_FA = 18,
  MLX5_OPCODE_ATOMIC_MASKED_CS = 20,
  MLX5_OPCODE_ATOMIC_MASKED_FA = 21,
  MLX5_OPCODE_BIND_MW = 24,
  MLX5_OPCODE_CONFIG_CMD = 31,
  MLX5_OPCODE_ENHANCED_MPSW = 41,
  MLX5_RECV_OPCODE_RDMA_WRITE_IMM = 0,
  MLX5_RECV_OPCODE_SEND = 1,
  MLX5_RECV_OPCODE_SEND_IMM = 2,
  MLX5_RECV_OPCODE_SEND_INVAL = 3,
  MLX5_CQE_OPCODE_ERROR = 30,
  MLX5_CQE_OPCODE_RESIZE = 22,
  MLX5_OPCODE_SET_PSV = 32,
  MLX5_OPCODE_GET_PSV = 33,
  MLX5_OPCODE_CHECK_PSV = 34,
  MLX5_OPCODE_DUMP = 35,
  MLX5_OPCODE_RGET_PSV = 38,
  MLX5_OPCODE_RCHECK_PSV = 39,
  MLX5_OPCODE_UMR = 37,
};

enum {
  VPORT_STATE_DOWN = 0,
  VPORT_STATE_UP = 1,
};

enum {
  MLX5_VPORT_ADMIN_STATE_DOWN = 0,
  MLX5_VPORT_ADMIN_STATE_UP = 1,
  MLX5_VPORT_ADMIN_STATE_AUTO = 2,
};

enum {
  MLX5_L3_PROT_TYPE_IPV4 = 0,
  MLX5_L3_PROT_TYPE_IPV6 = 1,
};

enum {
  MLX5_L4_PROT_TYPE_TCP = 0,
  MLX5_L4_PROT_TYPE_UDP = 1,
};

enum {
  MLX5_HASH_FIELD_SEL_SRC_IP = 1,
  MLX5_HASH_FIELD_SEL_DST_IP = 2,
  MLX5_HASH_FIELD_SEL_L4_SPORT = 4,
  MLX5_HASH_FIELD_SEL_L4_DPORT = 8,
  MLX5_HASH_FIELD_SEL_IPSEC_SPI = 16,
};

enum {
  MLX5_VPORT_PF = 0,
  MLX5_VPORT_FIRST_VF = 1,
  MLX5_VPORT_ECPF = 65534,
  MLX5_VPORT_UPLINK = 65535,
};

enum {
  MLX5_WQE_CTRL_CQ_UPDATE = 8,
  MLX5_WQE_CTRL_CQ_UPDATE_AND_EQE = 12,
  MLX5_WQE_CTRL_SOLICITED = 2,
};

enum {
  MLX5_CQ_DB_REQ_NOT_SOL = 16777216,
  MLX5_CQ_DB_REQ_NOT = 0,
};

struct mlx5e_tirc_config {
  u8 l3_prot_type;
  u8 l4_prot_type;
  u32 rx_hash_fields;
};

enum mlx5e_rq_group {
  MLX5E_RQ_GROUP_REGULAR = 0,
  MLX5E_RQ_GROUP_XSK = 1,
};

struct mlx5e_rx_wqe_ll {
  struct mlx5_wqe_srq_next_seg next;
  struct mlx5_wqe_data_seg data[0];
};

struct mlx5e_rx_wqe_cyc {
  struct mlx5_wqe_data_seg data[0];
};

enum mlx5e_priv_flag {
  MLX5E_PFLAG_RX_CQE_BASED_MODER = 0,
  MLX5E_PFLAG_TX_CQE_BASED_MODER = 1,
  MLX5E_PFLAG_RX_CQE_COMPRESS = 2,
  MLX5E_PFLAG_RX_STRIDING_RQ = 3,
  MLX5E_PFLAG_RX_NO_CSUM_COMPLETE = 4,
  MLX5E_PFLAG_XDP_TX_MPWQE = 5,
  MLX5E_PFLAG_SKB_TX_MPWQE = 6,
  MLX5E_PFLAG_TX_PORT_TS = 7,
  MLX5E_NUM_PFLAGS = 8,
};

enum {
  MLX5E_RQ_STATE_ENABLED = 0,
  MLX5E_RQ_STATE_RECOVERING = 1,
  MLX5E_RQ_STATE_AM = 2,
  MLX5E_RQ_STATE_NO_CSUM_COMPLETE = 3,
  MLX5E_RQ_STATE_CSUM_FULL = 4,
  MLX5E_RQ_STATE_FPGA_TLS = 5,
  MLX5E_RQ_STATE_MINI_CQE_HW_STRIDX = 6,
};

enum {
  MLX5E_SQ_STATE_ENABLED = 0,
  MLX5E_SQ_STATE_MPWQE = 1,
  MLX5E_SQ_STATE_RECOVERING = 2,
  MLX5E_SQ_STATE_IPSEC = 3,
  MLX5E_SQ_STATE_AM = 4,
  MLX5E_SQ_STATE_VLAN_NEED_L2_INLINE = 5,
  MLX5E_SQ_STATE_PENDING_XSK_TX = 6,
  MLX5E_SQ_STATE_PENDING_TLS_RX_RESYNC = 7,
};

struct mlx5e_tx_wqe_info {
  struct sk_buff* skb;
  u32 num_bytes;
  u8 num_wqebbs;
  u8 num_dma;
  u8 num_fifo_pkts;
};

struct mlx5e_ptpsq {
  struct mlx5e_txqsq txqsq;
  struct mlx5e_cq ts_cq;
  u16 skb_fifo_cc;
  u16 skb_fifo_pc;
  struct mlx5e_skb_fifo skb_fifo;
  struct mlx5e_ptp_cq_stats* cq_stats;
  long : 64;
  long : 64;
};

struct mlx5e_xdp_wqe_info {
  u8 num_wqebbs;
  u8 num_pkts;
};

struct mlx5e_icosq_wqe_info {
  u8 wqe_type;
  u8 num_wqebbs;
  union {
    struct {
      struct mlx5e_rq* rq;
    } umr;
  };
};

struct mlx5e_ptp {
  struct mlx5e_ptpsq ptpsq[8];
  struct mlx5e_rq rq;
  struct napi_struct napi;
  struct device* pdev;
  struct net_device* netdev;
  __be32 mkey_be;
  u8 num_tc;
  u8 lag_port;
  struct mlx5e_ch_stats* stats;
  struct mlx5e_priv* priv;
  struct mlx5_core_dev* mdev;
  struct hwtstamp_config* tstamp;
  long unsigned int state[1];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum {
  MLX5E_STATE_OPENED = 0,
  MLX5E_STATE_DESTROYING = 1,
  MLX5E_STATE_XDP_TX_ENABLED = 2,
  MLX5E_STATE_XDP_ACTIVE = 3,
};

struct mlx5e_modify_sq_param {
  int curr_state;
  int next_state;
  int rl_update;
  int rl_index;
  bool qos_update;
  u16 qos_queue_group_id;
};

struct mlx5e_cq_param {
  u32 cqc[16];
  struct mlx5_wq_param wq;
  u16 eq_ix;
  u8 cq_period_mode;
};

struct mlx5e_rq_param {
  struct mlx5e_cq_param cqp;
  u32 rqc[60];
  struct mlx5_wq_param wq;
  struct mlx5e_rq_frags_info frags_info;
};

struct mlx5e_trap {
  struct mlx5e_rq rq;
  struct mlx5e_tir tir;
  struct napi_struct napi;
  struct device* pdev;
  struct net_device* netdev;
  __be32 mkey_be;
  struct mlx5e_ch_stats* stats;
  struct mlx5e_priv* priv;
  struct mlx5_core_dev* mdev;
  struct hwtstamp_config* tstamp;
  long unsigned int state[1];
  struct mlx5e_params params;
  struct mlx5e_rq_param rq_param;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct mlx5e_redirect_rqt_param {
  bool is_rss;
  union {
    u32 rqn;
    struct {
      u8 hfunc;
      struct mlx5e_channels* channels;
    } rss;
  };
};

struct mlx5e_create_cq_param {
  struct napi_struct* napi;
  struct mlx5e_ch_stats* ch_stats;
  int node;
  int ix;
};

typedef int (*mlx5e_fp_preactivate)(struct mlx5e_priv*, void*);

struct mlx5e_xsk_param {
  u16 headroom;
  u16 chunk_size;
};

struct mlx5e_sq_param {
  struct mlx5e_cq_param cqp;
  u32 sqc[60];
  struct mlx5_wq_param wq;
  bool is_mpw;
  bool is_tls;
  u16 stop_room;
};

struct mlx5e_channel_param {
  struct mlx5e_rq_param rq;
  struct mlx5e_sq_param txq_sq;
  struct mlx5e_sq_param xdp_sq;
  struct mlx5e_sq_param icosq;
  struct mlx5e_sq_param async_icosq;
};

struct mlx5e_create_sq_param {
  struct mlx5_wq_ctrl* wq_ctrl;
  u32 cqn;
  u32 ts_cqe_to_dest_cqn;
  u32 tisn;
  u8 tis_lst_sz;
  u8 min_inline_mode;
};

enum {
  MLX5E_PTP_STATE_TX = 0,
  MLX5E_PTP_STATE_RX = 1,
  MLX5E_PTP_STATE_NUM_STATES = 2,
};

typedef int (*mlx5e_feature_handler)(struct net_device*, bool);

enum {
  MLX5_TIRC_SELF_LB_BLOCK_BLOCK_UNICAST = 1,
  MLX5_TIRC_SELF_LB_BLOCK_BLOCK_MULTICAST = 2,
};

enum {
  MLX5_MATCH_OUTER_HEADERS = 1,
  MLX5_MATCH_MISC_PARAMETERS = 2,
  MLX5_MATCH_INNER_HEADERS = 4,
  MLX5_MATCH_MISC_PARAMETERS_2 = 8,
  MLX5_MATCH_MISC_PARAMETERS_3 = 16,
  MLX5_MATCH_MISC_PARAMETERS_4 = 32,
};

enum {
  MLX5E_PROMISC_FT_LEVEL = 0,
  MLX5E_VLAN_FT_LEVEL = 1,
  MLX5E_L2_FT_LEVEL = 2,
  MLX5E_TTC_FT_LEVEL = 3,
  MLX5E_INNER_TTC_FT_LEVEL = 4,
  MLX5E_FS_TT_UDP_FT_LEVEL = 5,
  MLX5E_FS_TT_ANY_FT_LEVEL = 5,
};

struct mlx5e_vlan_table {
  struct mlx5e_flow_table ft;
  long unsigned int active_cvlans[64];
  long unsigned int active_svlans[64];
  struct mlx5_flow_handle* active_cvlans_rule[4096];
  struct mlx5_flow_handle* active_svlans_rule[4096];
  struct mlx5_flow_handle* untagged_rule;
  struct mlx5_flow_handle* any_cvlan_rule;
  struct mlx5_flow_handle* any_svlan_rule;
  struct mlx5_flow_handle* trap_rule;
  bool cvlan_filter_disabled;
};

struct ttc_params {
  struct mlx5_flow_table_attr ft_attr;
  u32 any_tt_tirn;
  u32 indir_tirn[10];
  struct mlx5e_ttc_table* inner_ttc;
};

enum {
  MLX5E_TC_PRIO = 0,
  MLX5E_NIC_PRIO = 1,
};

enum {
  MLX5E_FULLMATCH = 0,
  MLX5E_ALLMULTI = 1,
};

enum {
  MLX5E_ACTION_NONE = 0,
  MLX5E_ACTION_ADD = 1,
  MLX5E_ACTION_DEL = 2,
};

struct mlx5e_l2_hash_node {
  struct hlist_node hlist;
  u8 action;
  struct mlx5e_l2_rule ai;
  bool mpfs;
};

enum mlx5e_vlan_rule_type {
  MLX5E_VLAN_RULE_TYPE_UNTAGGED = 0,
  MLX5E_VLAN_RULE_TYPE_ANY_CTAG_VID = 1,
  MLX5E_VLAN_RULE_TYPE_ANY_STAG_VID = 2,
  MLX5E_VLAN_RULE_TYPE_MATCH_CTAG_VID = 3,
  MLX5E_VLAN_RULE_TYPE_MATCH_STAG_VID = 4,
};

struct mlx5e_etype_proto {
  u16 etype;
  u8 proto;
};

typedef long unsigned int u_long;

struct mlx5_ifc_pddr_monitor_opcode_bits {
  u8 reserved_at_0[16];
  u8 monitor_opcode[16];
};

union mlx5_ifc_pddr_troubleshooting_page_status_opcode_auto_bits {
  struct mlx5_ifc_pddr_monitor_opcode_bits pddr_monitor_opcode;
  u8 reserved_at_0[32];
};

enum {
  MLX5_PDDR_REG_TRBLSH_GROUP_OPCODE_MONITOR = 0,
};

struct mlx5_ifc_pddr_troubleshooting_page_bits {
  u8 reserved_at_0[16];
  u8 group_opcode[16];
  union mlx5_ifc_pddr_troubleshooting_page_status_opcode_auto_bits
      status_opcode;
  u8 reserved_at_40[32];
  u8 status_message[1888];
};

union mlx5_ifc_pddr_reg_page_data_auto_bits {
  struct mlx5_ifc_pddr_troubleshooting_page_bits pddr_troubleshooting_page;
  u8 reserved_at_0[1984];
};

enum {
  MLX5_PDDR_REG_PAGE_SELECT_TROUBLESHOOTING_INFO_PAGE = 1,
};

struct mlx5_ifc_pddr_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 pnat[2];
  u8 reserved_at_12[14];
  u8 reserved_at_20[24];
  u8 page_select[8];
  union mlx5_ifc_pddr_reg_page_data_auto_bits page_data;
};

enum mlx5_wol_mode {
  MLX5_WOL_DISABLE = 0,
  MLX5_WOL_SECURED_MAGIC = 2,
  MLX5_WOL_MAGIC = 4,
  MLX5_WOL_ARP = 8,
  MLX5_WOL_BROADCAST = 16,
  MLX5_WOL_MULTICAST = 32,
  MLX5_WOL_UNICAST = 64,
  MLX5_WOL_PHY_ACTIVITY = 128,
};

enum mlx5_beacon_duration {
  MLX5_BEACON_DURATION_OFF = 0,
  MLX5_BEACON_DURATION_INF = 65535,
};

enum mlx5_an_status {
  MLX5_AN_UNAVAILABLE = 0,
  MLX5_AN_COMPLETE = 1,
  MLX5_AN_FAILED = 2,
  MLX5_AN_LINK_UP = 3,
  MLX5_AN_LINK_DOWN = 4,
};

enum mlx5e_link_mode {
  MLX5E_1000BASE_CX_SGMII = 0,
  MLX5E_1000BASE_KX = 1,
  MLX5E_10GBASE_CX4 = 2,
  MLX5E_10GBASE_KX4 = 3,
  MLX5E_10GBASE_KR = 4,
  MLX5E_20GBASE_KR2 = 5,
  MLX5E_40GBASE_CR4 = 6,
  MLX5E_40GBASE_KR4 = 7,
  MLX5E_56GBASE_R4 = 8,
  MLX5E_10GBASE_CR = 12,
  MLX5E_10GBASE_SR = 13,
  MLX5E_10GBASE_ER = 14,
  MLX5E_40GBASE_SR4 = 15,
  MLX5E_40GBASE_LR4 = 16,
  MLX5E_50GBASE_SR2 = 18,
  MLX5E_100GBASE_CR4 = 20,
  MLX5E_100GBASE_SR4 = 21,
  MLX5E_100GBASE_KR4 = 22,
  MLX5E_100GBASE_LR4 = 23,
  MLX5E_100BASE_TX = 24,
  MLX5E_1000BASE_T = 25,
  MLX5E_10GBASE_T = 26,
  MLX5E_25GBASE_CR = 27,
  MLX5E_25GBASE_KR = 28,
  MLX5E_25GBASE_SR = 29,
  MLX5E_50GBASE_CR2 = 30,
  MLX5E_50GBASE_KR2 = 31,
  MLX5E_LINK_MODES_NUMBER = 32,
};

enum mlx5e_ext_link_mode {
  MLX5E_SGMII_100M = 0,
  MLX5E_1000BASE_X_SGMII = 1,
  MLX5E_5GBASE_R = 3,
  MLX5E_10GBASE_XFI_XAUI_1 = 4,
  MLX5E_40GBASE_XLAUI_4_XLPPI_4 = 5,
  MLX5E_25GAUI_1_25GBASE_CR_KR = 6,
  MLX5E_50GAUI_2_LAUI_2_50GBASE_CR2_KR2 = 7,
  MLX5E_50GAUI_1_LAUI_1_50GBASE_CR_KR = 8,
  MLX5E_CAUI_4_100GBASE_CR4_KR4 = 9,
  MLX5E_100GAUI_2_100GBASE_CR2_KR2 = 10,
  MLX5E_100GAUI_1_100GBASE_CR_KR = 11,
  MLX5E_200GAUI_4_200GBASE_CR4_KR4 = 12,
  MLX5E_200GAUI_2_200GBASE_CR2_KR2 = 13,
  MLX5E_400GAUI_8 = 15,
  MLX5E_400GAUI_4_400GBASE_CR4_KR4 = 16,
  MLX5E_EXT_LINK_MODES_NUMBER = 17,
};

enum mlx5e_connector_type {
  MLX5E_PORT_UNKNOWN = 0,
  MLX5E_PORT_NONE = 1,
  MLX5E_PORT_TP = 2,
  MLX5E_PORT_AUI = 3,
  MLX5E_PORT_BNC = 4,
  MLX5E_PORT_MII = 5,
  MLX5E_PORT_FIBRE = 6,
  MLX5E_PORT_DA = 7,
  MLX5E_PORT_OTHER = 8,
  MLX5E_CONNECTOR_TYPE_NUMBER = 9,
};

struct mlx5e_port_eth_proto {
  u32 cap;
  u32 admin;
  u32 oper;
};

enum {
  MLX5E_FEC_NOFEC = 0,
  MLX5E_FEC_FIRECODE = 1,
  MLX5E_FEC_RS_528_514 = 2,
  MLX5E_FEC_RS_544_514 = 7,
  MLX5E_FEC_LLRS_272_257_1 = 9,
};

struct ptys2ethtool_config___2 {
  long unsigned int supported[2];
  long unsigned int advertised[2];
};

typedef int (*mlx5e_pflag_handler)(struct net_device*, bool);

struct pflag_desc {
  char name[32];
  mlx5e_pflag_handler handler;
};

struct mlx5e_ethtool_link_ext_state_opcode_mapping {
  u32 status_opcode;
  enum ethtool_link_ext_state link_ext_state;
  u8 link_ext_substate;
};

struct mlx5_err_cqe {
  u8 rsvd0[32];
  __be32 srqn;
  u8 rsvd1[18];
  u8 vendor_err_synd;
  u8 syndrome;
  __be32 s_wqe_opcode_qpn;
  __be16 wqe_counter;
  u8 signature;
  u8 op_own;
};

enum mlx5_qpts_trust_state {
  MLX5_QPTS_TRUST_PCP = 1,
  MLX5_QPTS_TRUST_DSCP = 2,
};

enum {
  MLX5_SEND_WQE_MAX_WQEBBS = 16,
};

enum {
  MLX5_ETH_WQE_L3_INNER_CSUM = 16,
  MLX5_ETH_WQE_L4_INNER_CSUM = 32,
  MLX5_ETH_WQE_L3_CSUM = 64,
  MLX5_ETH_WQE_L4_CSUM = 128,
};

enum {
  MLX5_ETH_WQE_SVLAN = 1,
  MLX5_ETH_WQE_TRAILER_HDR_OUTER_IP_ASSOC = 67108864,
  MLX5_ETH_WQE_TRAILER_HDR_OUTER_L4_ASSOC = 134217728,
  MLX5_ETH_WQE_TRAILER_HDR_INNER_IP_ASSOC = 201326592,
  MLX5_ETH_WQE_TRAILER_HDR_INNER_L4_ASSOC = 268435456,
  MLX5_ETH_WQE_INSERT_TRAILER = 1073741824,
  MLX5_ETH_WQE_INSERT_VLAN = 32768,
};

struct mlx5_wqe_inline_seg {
  __be32 byte_count;
  __be32 data[0];
};

enum {
  MLX5_CQE_OWNER_MASK = 1,
  MLX5_CQE_REQ = 0,
  MLX5_CQE_RESP_WR_IMM = 1,
  MLX5_CQE_RESP_SEND = 2,
  MLX5_CQE_RESP_SEND_IMM = 3,
  MLX5_CQE_RESP_SEND_INV = 4,
  MLX5_CQE_RESIZE_CQ = 5,
  MLX5_CQE_SIG_ERR = 12,
  MLX5_CQE_REQ_ERR = 13,
  MLX5_CQE_RESP_ERR = 14,
  MLX5_CQE_INVALID = 15,
};

struct mlx5e_accel_tx_state {};

enum {
  MLX5E_SKB_CB_CQE_HWTSTAMP = 1,
  MLX5E_SKB_CB_PORT_HWTSTAMP = 2,
};

struct mlx5e_tx_attr {
  u32 num_bytes;
  u16 headlen;
  u16 ihs;
  __be16 mss;
  u16 insz;
  u8 opcode;
};

struct mlx5e_tx_wqe_attr {
  u16 ds_cnt;
  u16 ds_cnt_inl;
  u16 ds_cnt_ids;
  u8 num_wqebbs;
};

enum {
  INET_ECN_NOT_ECT = 0,
  INET_ECN_ECT_1 = 1,
  INET_ECN_ECT_0 = 2,
  INET_ECN_CE = 3,
  INET_ECN_MASK = 3,
};

enum {
  MLX5_EN_RD = 1,
  MLX5_EN_WR = 2,
};

enum {
  MLX5_NO_INLINE_DATA = 0,
  MLX5_INLINE_DATA32_SEG = 1,
  MLX5_INLINE_DATA64_SEG = 2,
  MLX5_COMPRESSED = 3,
};

struct mpwrq_cqe_bc {
  __be16 filler_consumed_strides;
  __be16 byte_cnt;
};

enum {
  CQE_L4_HDR_TYPE_NONE = 0,
  CQE_L4_HDR_TYPE_TCP_NO_ACK = 1,
  CQE_L4_HDR_TYPE_UDP = 2,
  CQE_L4_HDR_TYPE_TCP_ACK_NO_DATA = 3,
  CQE_L4_HDR_TYPE_TCP_ACK_AND_DATA = 4,
};

enum {
  CQE_RSS_HTYPE_IP = 12,
  CQE_RSS_HTYPE_L4 = 192,
};

enum {
  CQE_L2_OK = 1,
  CQE_L3_OK = 2,
  CQE_L4_OK = 4,
};

enum {
  MLX5_CQE_SYNDROME_LOCAL_LENGTH_ERR = 1,
  MLX5_CQE_SYNDROME_LOCAL_QP_OP_ERR = 2,
  MLX5_CQE_SYNDROME_LOCAL_PROT_ERR = 4,
  MLX5_CQE_SYNDROME_WR_FLUSH_ERR = 5,
  MLX5_CQE_SYNDROME_MW_BIND_ERR = 6,
  MLX5_CQE_SYNDROME_BAD_RESP_ERR = 16,
  MLX5_CQE_SYNDROME_LOCAL_ACCESS_ERR = 17,
  MLX5_CQE_SYNDROME_REMOTE_INVAL_REQ_ERR = 18,
  MLX5_CQE_SYNDROME_REMOTE_ACCESS_ERR = 19,
  MLX5_CQE_SYNDROME_REMOTE_OP_ERR = 20,
  MLX5_CQE_SYNDROME_TRANSPORT_RETRY_EXC_ERR = 21,
  MLX5_CQE_SYNDROME_RNR_RETRY_EXC_ERR = 22,
  MLX5_CQE_SYNDROME_REMOTE_ABORTED_ERR = 34,
};

enum mlx5e_rq_flag {
  MLX5E_RQ_FLAG_XDP_XMIT = 0,
  MLX5E_RQ_FLAG_XDP_REDIRECT = 1,
};

enum mlx5e_icosq_wqe_type {
  MLX5E_ICOSQ_WQE_NOP = 0,
  MLX5E_ICOSQ_WQE_UMR_RX = 1,
};

struct xdp_frame_bulk {
  int count;
  void* xa;
  void* q[16];
};

enum {
  MLX5E_XDP_CHECK_OK = 1,
  MLX5E_XDP_CHECK_START_MPWQE = 2,
};

struct mlx5_ifc_pcie_perf_cntrs_grp_data_layout_bits {
  u8 life_time_counter_high[32];
  u8 life_time_counter_low[32];
  u8 rx_errors[32];
  u8 tx_errors[32];
  u8 l0_to_recovery_eieos[32];
  u8 l0_to_recovery_ts[32];
  u8 l0_to_recovery_framing[32];
  u8 l0_to_recovery_retrain[32];
  u8 crc_error_dllp[32];
  u8 crc_error_tlp[32];
  u8 tx_overflow_buffer_pkt_high[32];
  u8 tx_overflow_buffer_pkt_low[32];
  u8 outbound_stalled_reads[32];
  u8 outbound_stalled_writes[32];
  u8 outbound_stalled_reads_events[32];
  u8 outbound_stalled_writes_events[32];
  u8 reserved_at_200[1472];
};

union mlx5_ifc_pcie_cntrs_grp_data_layout_auto_bits {
  struct mlx5_ifc_pcie_perf_cntrs_grp_data_layout_bits
      pcie_perf_cntrs_grp_data_layout;
  u8 reserved_at_0[1984];
};

struct mlx5_ifc_query_q_counter_out_bits {
  u8 status[8];
  u8 reserved_at_8[24];
  u8 syndrome[32];
  u8 reserved_at_40[64];
  u8 rx_write_requests[32];
  u8 reserved_at_a0[32];
  u8 rx_read_requests[32];
  u8 reserved_at_e0[32];
  u8 rx_atomic_requests[32];
  u8 reserved_at_120[32];
  u8 rx_dct_connect[32];
  u8 reserved_at_160[32];
  u8 out_of_buffer[32];
  u8 reserved_at_1a0[32];
  u8 out_of_sequence[32];
  u8 reserved_at_1e0[32];
  u8 duplicate_request[32];
  u8 reserved_at_220[32];
  u8 rnr_nak_retry_err[32];
  u8 reserved_at_260[32];
  u8 packet_seq_err[32];
  u8 reserved_at_2a0[32];
  u8 implied_nak_seq_err[32];
  u8 reserved_at_2e0[32];
  u8 local_ack_timeout_err[32];
  u8 reserved_at_320[160];
  u8 resp_local_length_error[32];
  u8 req_local_length_error[32];
  u8 resp_local_qp_error[32];
  u8 local_operation_error[32];
  u8 resp_local_protection[32];
  u8 req_local_protection[32];
  u8 resp_cqe_error[32];
  u8 req_cqe_error[32];
  u8 req_mw_binding[32];
  u8 req_bad_response[32];
  u8 req_remote_invalid_request[32];
  u8 resp_remote_invalid_request[32];
  u8 req_remote_access_errors[32];
  u8 resp_remote_access_errors[32];
  u8 req_remote_operation_errors[32];
  u8 req_transport_retries_exceeded[32];
  u8 cq_overflow[32];
  u8 resp_cqe_flush_error[32];
  u8 req_cqe_flush_error[32];
  u8 reserved_at_620[32];
  u8 roce_adp_retrans[32];
  u8 roce_adp_retrans_to[32];
  u8 roce_slow_restart[32];
  u8 roce_slow_restart_cnps[32];
  u8 roce_slow_restart_trans[32];
  u8 reserved_at_6e0[288];
};

struct mlx5_ifc_query_q_counter_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[128];
  u8 clear[1];
  u8 reserved_at_c1[31];
  u8 reserved_at_e0[24];
  u8 counter_set_id[8];
};

struct mlx5_ifc_mpcnt_reg_bits {
  u8 reserved_at_0[8];
  u8 pcie_index[8];
  u8 reserved_at_10[10];
  u8 grp[6];
  u8 clr[1];
  u8 reserved_at_21[31];
  union mlx5_ifc_pcie_cntrs_grp_data_layout_auto_bits counter_set;
};

enum {
  MLX5_PCIE_PERFORMANCE_COUNTERS_GROUP = 0,
};

struct counter_desc {
  char format[32];
  size_t offset;
};

enum {
  MLX5E_NDO_UPDATE_STATS = 2,
};

struct packet_type {
  __be16 type;
  bool ignore_outgoing;
  struct net_device* dev;
  int (*func)(
      struct sk_buff*,
      struct net_device*,
      struct packet_type*,
      struct net_device*);
  void (*list_func)(struct list_head*, struct packet_type*, struct net_device*);
  bool (*id_match)(struct packet_type*, struct sock*);
  void* af_packet_priv;
  struct list_head list;
};

enum {
  MLX5E_ST_LINK_STATE = 0,
  MLX5E_ST_LINK_SPEED = 1,
  MLX5E_ST_HEALTH_INFO = 2,
  MLX5E_ST_LOOPBACK = 3,
  MLX5E_ST_NUM = 4,
};

struct mlx5ehdr {
  __be32 version;
  __be64 magic;
};

struct mlx5e_lbt_priv {
  struct packet_type pt;
  struct completion comp;
  bool loopback_ok;
  bool local_lb;
};

struct mlx5_ifc_pplm_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[16];
  u8 reserved_at_20[32];
  u8 port_profile_mode[8];
  u8 static_port_profile[8];
  u8 active_port_profile[8];
  u8 reserved_at_58[8];
  u8 retransmission_active[8];
  u8 fec_mode_active[24];
  u8 rs_fec_correction_bypass_cap[4];
  u8 reserved_at_84[8];
  u8 fec_override_cap_56g[4];
  u8 fec_override_cap_100g[4];
  u8 fec_override_cap_50g[4];
  u8 fec_override_cap_25g[4];
  u8 fec_override_cap_10g_40g[4];
  u8 rs_fec_correction_bypass_admin[4];
  u8 reserved_at_a4[8];
  u8 fec_override_admin_56g[4];
  u8 fec_override_admin_100g[4];
  u8 fec_override_admin_50g[4];
  u8 fec_override_admin_25g[4];
  u8 fec_override_admin_10g_40g[4];
  u8 fec_override_cap_400g_8x[16];
  u8 fec_override_cap_200g_4x[16];
  u8 fec_override_cap_100g_2x[16];
  u8 fec_override_cap_50g_1x[16];
  u8 fec_override_admin_400g_8x[16];
  u8 fec_override_admin_200g_4x[16];
  u8 fec_override_admin_100g_2x[16];
  u8 fec_override_admin_50g_1x[16];
  u8 reserved_at_140[320];
};

struct mlx5_ifc_bufferx_reg_bits {
  u8 reserved_at_0[6];
  u8 lossy[1];
  u8 epsb[1];
  u8 reserved_at_8[12];
  u8 size[12];
  u8 xoff_threshold[16];
  u8 xon_threshold[16];
};

struct mlx5_ifc_pptb_reg_bits {
  u8 reserved_at_0[2];
  u8 mm[2];
  u8 reserved_at_4[4];
  u8 local_port[8];
  u8 reserved_at_10[6];
  u8 cm[1];
  u8 um[1];
  u8 pm[8];
  u8 prio_x_buff[32];
  u8 pm_msb[8];
  u8 reserved_at_48[16];
  u8 ctrl_buff[4];
  u8 untagged_buff[4];
};

struct mlx5_ifc_pbmc_reg_bits {
  u8 reserved_at_0[8];
  u8 local_port[8];
  u8 reserved_at_10[16];
  u8 xoff_timer_value[16];
  u8 xoff_refresh[16];
  u8 reserved_at_40[9];
  u8 fullness_threshold[7];
  u8 port_buffer_size[16];
  struct mlx5_ifc_bufferx_reg_bits buffer[10];
  u8 reserved_at_2e0[128];
};

enum mlx5e_fec_supported_link_mode {
  MLX5E_FEC_SUPPORTED_LINK_MODES_10G_40G = 0,
  MLX5E_FEC_SUPPORTED_LINK_MODES_25G = 1,
  MLX5E_FEC_SUPPORTED_LINK_MODES_50G = 2,
  MLX5E_FEC_SUPPORTED_LINK_MODES_56G = 3,
  MLX5E_FEC_SUPPORTED_LINK_MODES_100G = 4,
  MLX5E_FEC_SUPPORTED_LINK_MODE_50G_1X = 5,
  MLX5E_FEC_SUPPORTED_LINK_MODE_100G_2X = 6,
  MLX5E_FEC_SUPPORTED_LINK_MODE_200G_4X = 7,
  MLX5E_FEC_SUPPORTED_LINK_MODE_400G_8X = 8,
  MLX5E_MAX_FEC_SUPPORTED_LINK_MODE = 9,
};

struct mlx5_ifc_arm_monitor_counter_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[32];
  u8 reserved_at_60[32];
};

enum {
  MLX5_QUERY_MONITOR_CNT_TYPE_PPCNT = 0,
  MLX5_QUERY_MONITOR_CNT_TYPE_Q_COUNTER = 1,
};

enum mlx5_monitor_counter_ppcnt {
  MLX5_QUERY_MONITOR_PPCNT_IN_RANGE_LENGTH_ERRORS = 0,
  MLX5_QUERY_MONITOR_PPCNT_OUT_OF_RANGE_LENGTH_FIELD = 1,
  MLX5_QUERY_MONITOR_PPCNT_FRAME_TOO_LONG_ERRORS = 2,
  MLX5_QUERY_MONITOR_PPCNT_FRAME_CHECK_SEQUENCE_ERRORS = 3,
  MLX5_QUERY_MONITOR_PPCNT_ALIGNMENT_ERRORS = 4,
  MLX5_QUERY_MONITOR_PPCNT_IF_OUT_DISCARDS = 5,
};

enum {
  MLX5_QUERY_MONITOR_Q_COUNTER_RX_OUT_OF_BUFFER = 4,
};

struct mlx5_ifc_monitor_counter_output_bits {
  u8 reserved_at_0[4];
  u8 type[4];
  u8 reserved_at_8[8];
  u8 counter[16];
  u8 counter_group_id[32];
};

struct mlx5_ifc_set_monitor_counter_in_bits {
  u8 opcode[16];
  u8 uid[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[16];
  u8 num_of_counters[16];
  u8 reserved_at_60[32];
  struct mlx5_ifc_monitor_counter_output_bits monitor_counter[7];
};

struct mlx5e_err_ctx {
  int (*recover)(void*);
  int (*dump)(struct mlx5e_priv*, struct devlink_fmsg*, void*);
  void* ctx;
};

struct mlx5_rsc_dump_cmd___2;

struct mlx5e_tx_timeout_ctx {
  struct mlx5e_txqsq* sq;
  int status;
};

enum {
  MLX5_WQ_END_PAD_MODE_NONE = 0,
  MLX5_WQ_END_PAD_MODE_ALIGN = 1,
};

enum {
  MLX5_CQE_FORMAT_CSUM = 1,
  MLX5_CQE_FORMAT_CSUM_STRIDX = 3,
};

struct mlx5e_ptp_fs {
  struct mlx5_flow_handle* l2_rule;
  struct mlx5_flow_handle* udp_v4_rule;
  struct mlx5_flow_handle* udp_v6_rule;
  bool valid;
};

struct mlx5e_ptp_params {
  struct mlx5e_params params;
  struct mlx5e_sq_param txq_sq_param;
  struct mlx5e_rq_param rq_param;
};

struct mlx5e_skb_cb_hwtstamp {
  ktime_t cqe_hwtstamp;
  ktime_t port_hwtstamp;
};

struct mlx5e_qos_node {
  struct hlist_node hnode;
  struct callback_head rcu;
  struct mlx5e_qos_node* parent;
  u64 rate;
  u32 bw_share;
  u32 max_average_bw;
  u32 hw_id;
  u32 classid;
  u16 qid;
};

struct mlx5e_fs_udp {
  struct mlx5e_flow_table tables[2];
  struct mlx5_flow_handle* default_rules[2];
  int ref_cnt;
};

struct mlx5e_fs_any {
  struct mlx5e_flow_table table;
  struct mlx5_flow_handle* default_rule;
  int ref_cnt;
};

enum fs_udp_type {
  FS_IPV4_UDP = 0,
  FS_IPV6_UDP = 1,
  FS_UDP_NUM_TYPES = 2,
};

struct mlx5e_ethtool_rule {
  struct list_head list;
  struct ethtool_rx_flow_spec flow_spec;
  struct mlx5_flow_handle* rule;
  struct mlx5e_ethtool_table* eth_ft;
};

struct mlx5_ifc_sbcam_reg_bits {
  u8 reserved_at_0[8];
  u8 feature_group[8];
  u8 reserved_at_10[8];
  u8 access_reg_group[8];
  u8 reserved_at_20[32];
  u8 sb_access_reg_cap_mask[128];
  u8 reserved_at_c0[128];
  u8 sb_feature_cap_mask[128];
  u8 reserved_at_1c0[64];
  u8 cap_total_buffer_size[32];
  u8 cap_cell_size[16];
  u8 cap_max_pg_buffers[8];
  u8 cap_num_pool_supported[8];
  u8 reserved_at_240[8];
  u8 cap_sbsr_stat_size[8];
  u8 cap_max_tclass_data[8];
  u8 cap_max_cpu_ingress_tclass_sb[8];
};

enum {
  MLX5_BW_NO_LIMIT = 0,
  MLX5_100_MBPS_UNIT = 3,
  MLX5_GBPS_UNIT = 4,
};

enum {
  MLX5E_PORT_BUFFER_CABLE_LEN = 1,
  MLX5E_PORT_BUFFER_PFC = 2,
  MLX5E_PORT_BUFFER_PRIO2BUFFER = 4,
  MLX5E_PORT_BUFFER_SIZE = 8,
};

struct mlx5e_bufferx_reg {
  u8 lossy;
  u8 epsb;
  u32 size;
  u32 xoff;
  u32 xon;
};

struct mlx5e_port_buffer {
  u32 port_buffer_size;
  u32 spare_buffer_size;
  struct mlx5e_bufferx_reg buffer[8];
};

enum {
  MLX5E_VENDOR_TC_GROUP_NUM = 7,
  MLX5E_LOWEST_PRIO_GROUP = 0,
};

enum {
  MLX5_DCB_CHG_RESET = 0,
  MLX5_DCB_NO_CHG = 1,
  MLX5_DCB_CHG_NO_RESET = 2,
};

enum {
  INIT = 0,
  DELETE = 1,
};

struct mlx5_ifc_set_l2_table_entry_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[96];
  u8 reserved_at_a0[8];
  u8 table_index[24];
  u8 reserved_at_c0[32];
  u8 reserved_at_e0[19];
  u8 vlan_valid[1];
  u8 vlan[12];
  struct mlx5_ifc_mac_address_layout_bits mac_address;
  u8 reserved_at_140[192];
};

struct mlx5_ifc_delete_l2_table_entry_in_bits {
  u8 opcode[16];
  u8 reserved_at_10[16];
  u8 reserved_at_20[16];
  u8 op_mod[16];
  u8 reserved_at_40[96];
  u8 reserved_at_a0[8];
  u8 table_index[24];
  u8 reserved_at_c0[320];
};

struct mlx5_mpfs {
  struct hlist_head hash[256];
  struct mutex lock;
  u32 size;
  long unsigned int* bitmap;
};

struct l2addr_node {
  struct hlist_node hlist;
  u8 addr[6];
};

struct l2table_node {
  struct l2addr_node node;
  u32 index;
  int ref_count;
};

struct mlx5_ib_clock_info {
  __u32 sign;
  __u32 resv;
  __u64 nsec;
  __u64 cycles;
  __u64 frac;
  __u32 mult;
  __u32 shift;
  __u64 mask;
  __u64 overflow_period;
};

enum {
  MLX5_IB_CLOCK_INFO_KERNEL_UPDATING = 1,
};

enum {
  MLX5_MTUTC_OPERATION_SET_TIME_IMMEDIATE = 1,
  MLX5_MTUTC_OPERATION_ADJUST_TIME = 2,
  MLX5_MTUTC_OPERATION_ADJUST_FREQ_UTC = 3,
};

struct mlx5_ifc_mtutc_reg_bits {
  u8 reserved_at_0[28];
  u8 operation[4];
  u8 freq_adjustment[32];
  u8 reserved_at_40[64];
  u8 utc_sec[32];
  u8 reserved_at_a0[2];
  u8 utc_nsec[30];
  u8 time_adjustment[32];
};

struct mlx5_ifc_mtpps_reg_bits {
  u8 reserved_at_0[12];
  u8 cap_number_of_pps_pins[4];
  u8 reserved_at_10[4];
  u8 cap_max_num_of_pps_in_pins[4];
  u8 reserved_at_18[4];
  u8 cap_max_num_of_pps_out_pins[4];
  u8 reserved_at_20[36];
  u8 cap_pin_3_mode[4];
  u8 reserved_at_48[4];
  u8 cap_pin_2_mode[4];
  u8 reserved_at_50[4];
  u8 cap_pin_1_mode[4];
  u8 reserved_at_58[4];
  u8 cap_pin_0_mode[4];
  u8 reserved_at_60[4];
  u8 cap_pin_7_mode[4];
  u8 reserved_at_68[4];
  u8 cap_pin_6_mode[4];
  u8 reserved_at_70[4];
  u8 cap_pin_5_mode[4];
  u8 reserved_at_78[4];
  u8 cap_pin_4_mode[4];
  u8 field_select[32];
  u8 reserved_at_a0[96];
  u8 enable[1];
  u8 reserved_at_101[11];
  u8 pattern[4];
  u8 reserved_at_110[4];
  u8 pin_mode[4];
  u8 pin[8];
  u8 reserved_at_120[32];
  u8 time_stamp[64];
  u8 out_pulse_duration[16];
  u8 out_periodic_adjustment[16];
  u8 enhanced_out_periodic_adjustment[32];
  u8 reserved_at_1c0[32];
};

enum {
  MLX5_CYCLES_SHIFT = 23,
};

enum {
  MLX5_PIN_MODE_IN = 0,
  MLX5_PIN_MODE_OUT = 1,
};

enum {
  MLX5_OUT_PATTERN_PULSE = 0,
  MLX5_OUT_PATTERN_PERIODIC = 1,
};

enum {
  MLX5_EVENT_MODE_DISABLE = 0,
  MLX5_EVENT_MODE_REPETETIVE = 1,
  MLX5_EVENT_MODE_ONCE_TILL_ARM = 2,
};

enum {
  MLX5_MTPPS_FS_ENABLE = 1,
  MLX5_MTPPS_FS_PATTERN = 4,
  MLX5_MTPPS_FS_PIN_MODE = 8,
  MLX5_MTPPS_FS_TIME_STAMP = 16,
  MLX5_MTPPS_FS_OUT_PULSE_DURATION = 32,
  MLX5_MTPPS_FS_ENH_OUT_PER_ADJ = 128,
};

enum {
  MLX5_MTPPS_REG_CAP_PIN_X_MODE_SUPPORT_PPS_IN = 1,
  MLX5_MTPPS_REG_CAP_PIN_X_MODE_SUPPORT_PPS_OUT = 2,
};

struct mlxfw_mfa2_component {
  u16 index;
  u32 data_size;
  u8* data;
};

struct mlxfw_mfa2_file;

struct mlxfw_mfa2_tlv;

struct mlxfw_mfa2_file___2 {
  const struct firmware* fw;
  const struct mlxfw_mfa2_tlv* first_dev;
  u16 dev_count;
  const struct mlxfw_mfa2_tlv* first_component;
  u16 component_count;
  const void* cb;
  u32 cb_archive_size;
};

struct mlxfw_mfa2_tlv {
  u8 version;
  u8 type;
  __be16 len;
  u8 data[0];
};

enum mlxfw_mfa2_tlv_type {
  MLXFW_MFA2_TLV_MULTI_PART = 1,
  MLXFW_MFA2_TLV_PACKAGE_DESCRIPTOR = 2,
  MLXFW_MFA2_TLV_COMPONENT_DESCRIPTOR = 4,
  MLXFW_MFA2_TLV_COMPONENT_PTR = 34,
  MLXFW_MFA2_TLV_PSID = 42,
};

struct mlxfw_mfa2_tlv_multi {
  __be16 num_extensions;
  __be16 total_len;
};

struct mlxfw_mfa2_tlv_package_descriptor {
  __be16 num_components;
  __be16 num_devices;
  __be32 cb_offset;
  __be32 cb_archive_size;
  __be32 cb_size_h;
  __be32 cb_size_l;
  u8 padding[3];
  u8 cv_compression;
  __be32 user_data_offset;
};

struct mlxfw_mfa2_tlv_psid {
  u8 psid[0];
};

struct mlxfw_mfa2_tlv_component_ptr {
  __be16 storage_id;
  __be16 component_index;
  __be32 storage_address;
};

struct mlxfw_mfa2_tlv_component_descriptor {
  __be16 pldm_classification;
  __be16 identifier;
  __be32 cb_offset_h;
  __be32 cb_offset_l;
  __be32 size;
};

struct mlxfw_mfa2_comp_data {
  struct mlxfw_mfa2_component comp;
  u8 buff[0];
};

enum usb_device_speed {
  USB_SPEED_UNKNOWN = 0,
  USB_SPEED_LOW = 1,
  USB_SPEED_FULL = 2,
  USB_SPEED_HIGH = 3,
  USB_SPEED_WIRELESS = 4,
  USB_SPEED_SUPER = 5,
  USB_SPEED_SUPER_PLUS = 6,
};

enum usb_device_state {
  USB_STATE_NOTATTACHED = 0,
  USB_STATE_ATTACHED = 1,
  USB_STATE_POWERED = 2,
  USB_STATE_RECONNECTING = 3,
  USB_STATE_UNAUTHENTICATED = 4,
  USB_STATE_DEFAULT = 5,
  USB_STATE_ADDRESS = 6,
  USB_STATE_CONFIGURED = 7,
  USB_STATE_SUSPENDED = 8,
};

enum usb_ssp_rate {
  USB_SSP_GEN_UNKNOWN = 0,
  USB_SSP_GEN_2x1 = 1,
  USB_SSP_GEN_1x2 = 2,
  USB_SSP_GEN_2x2 = 3,
};

enum usb_otg_state {
  OTG_STATE_UNDEFINED = 0,
  OTG_STATE_B_IDLE = 1,
  OTG_STATE_B_SRP_INIT = 2,
  OTG_STATE_B_PERIPHERAL = 3,
  OTG_STATE_B_WAIT_ACON = 4,
  OTG_STATE_B_HOST = 5,
  OTG_STATE_A_IDLE = 6,
  OTG_STATE_A_WAIT_VRISE = 7,
  OTG_STATE_A_WAIT_BCON = 8,
  OTG_STATE_A_HOST = 9,
  OTG_STATE_A_SUSPEND = 10,
  OTG_STATE_A_PERIPHERAL = 11,
  OTG_STATE_A_WAIT_VFALL = 12,
  OTG_STATE_A_VBUS_ERR = 13,
};

enum usb_dr_mode {
  USB_DR_MODE_UNKNOWN = 0,
  USB_DR_MODE_HOST = 1,
  USB_DR_MODE_PERIPHERAL = 2,
  USB_DR_MODE_OTG = 3,
};

struct usb_device_id {
  __u16 match_flags;
  __u16 idVendor;
  __u16 idProduct;
  __u16 bcdDevice_lo;
  __u16 bcdDevice_hi;
  __u8 bDeviceClass;
  __u8 bDeviceSubClass;
  __u8 bDeviceProtocol;
  __u8 bInterfaceClass;
  __u8 bInterfaceSubClass;
  __u8 bInterfaceProtocol;
  __u8 bInterfaceNumber;
  kernel_ulong_t driver_info;
};

struct usb_descriptor_header {
  __u8 bLength;
  __u8 bDescriptorType;
};

struct usb_device_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __le16 bcdUSB;
  __u8 bDeviceClass;
  __u8 bDeviceSubClass;
  __u8 bDeviceProtocol;
  __u8 bMaxPacketSize0;
  __le16 idVendor;
  __le16 idProduct;
  __le16 bcdDevice;
  __u8 iManufacturer;
  __u8 iProduct;
  __u8 iSerialNumber;
  __u8 bNumConfigurations;
};

struct usb_config_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __le16 wTotalLength;
  __u8 bNumInterfaces;
  __u8 bConfigurationValue;
  __u8 iConfiguration;
  __u8 bmAttributes;
  __u8 bMaxPower;
} __attribute__((packed));

struct usb_interface_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bInterfaceNumber;
  __u8 bAlternateSetting;
  __u8 bNumEndpoints;
  __u8 bInterfaceClass;
  __u8 bInterfaceSubClass;
  __u8 bInterfaceProtocol;
  __u8 iInterface;
};

struct usb_endpoint_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bEndpointAddress;
  __u8 bmAttributes;
  __le16 wMaxPacketSize;
  __u8 bInterval;
  __u8 bRefresh;
  __u8 bSynchAddress;
} __attribute__((packed));

struct usb_ssp_isoc_ep_comp_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __le16 wReseved;
  __le32 dwBytesPerInterval;
};

struct usb_ss_ep_comp_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bMaxBurst;
  __u8 bmAttributes;
  __le16 wBytesPerInterval;
};

struct usb_interface_assoc_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bFirstInterface;
  __u8 bInterfaceCount;
  __u8 bFunctionClass;
  __u8 bFunctionSubClass;
  __u8 bFunctionProtocol;
  __u8 iFunction;
};

struct usb_bos_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __le16 wTotalLength;
  __u8 bNumDeviceCaps;
} __attribute__((packed));

struct usb_ext_cap_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDevCapabilityType;
  __le32 bmAttributes;
} __attribute__((packed));

struct usb_ss_cap_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDevCapabilityType;
  __u8 bmAttributes;
  __le16 wSpeedSupported;
  __u8 bFunctionalitySupport;
  __u8 bU1devExitLat;
  __le16 bU2DevExitLat;
};

struct usb_ss_container_id_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDevCapabilityType;
  __u8 bReserved;
  __u8 ContainerID[16];
};

struct usb_ssp_cap_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDevCapabilityType;
  __u8 bReserved;
  __le32 bmAttributes;
  __le16 wFunctionalitySupport;
  __le16 wReserved;
  __le32 bmSublinkSpeedAttr[1];
};

struct usb_ptm_cap_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDevCapabilityType;
};

enum usb3_link_state {
  USB3_LPM_U0 = 0,
  USB3_LPM_U1 = 1,
  USB3_LPM_U2 = 2,
  USB3_LPM_U3 = 3,
};

struct ep_device;

struct usb_host_endpoint {
  struct usb_endpoint_descriptor desc;
  struct usb_ss_ep_comp_descriptor ss_ep_comp;
  struct usb_ssp_isoc_ep_comp_descriptor ssp_isoc_ep_comp;
  char : 8;
  struct list_head urb_list;
  void* hcpriv;
  struct ep_device* ep_dev;
  unsigned char* extra;
  int extralen;
  int enabled;
  int streams;
  int : 32;
} __attribute__((packed));

struct usb_host_interface {
  struct usb_interface_descriptor desc;
  int extralen;
  unsigned char* extra;
  struct usb_host_endpoint* endpoint;
  char* string;
};

enum usb_interface_condition {
  USB_INTERFACE_UNBOUND = 0,
  USB_INTERFACE_BINDING = 1,
  USB_INTERFACE_BOUND = 2,
  USB_INTERFACE_UNBINDING = 3,
};

struct usb_interface {
  struct usb_host_interface* altsetting;
  struct usb_host_interface* cur_altsetting;
  unsigned int num_altsetting;
  struct usb_interface_assoc_descriptor* intf_assoc;
  int minor;
  enum usb_interface_condition condition;
  unsigned int sysfs_files_created : 1;
  unsigned int ep_devs_created : 1;
  unsigned int unregistering : 1;
  unsigned int needs_remote_wakeup : 1;
  unsigned int needs_altsetting0 : 1;
  unsigned int needs_binding : 1;
  unsigned int resetting_device : 1;
  unsigned int authorized : 1;
  struct device dev;
  struct device* usb_dev;
  struct work_struct reset_ws;
};

struct usb_interface_cache {
  unsigned int num_altsetting;
  struct kref ref;
  struct usb_host_interface altsetting[0];
};

struct usb_host_config {
  struct usb_config_descriptor desc;
  char* string;
  struct usb_interface_assoc_descriptor* intf_assoc[16];
  struct usb_interface* interface[32];
  struct usb_interface_cache* intf_cache[32];
  unsigned char* extra;
  int extralen;
};

struct usb_host_bos {
  struct usb_bos_descriptor* desc;
  struct usb_ext_cap_descriptor* ext_cap;
  struct usb_ss_cap_descriptor* ss_cap;
  struct usb_ssp_cap_descriptor* ssp_cap;
  struct usb_ss_container_id_descriptor* ss_id;
  struct usb_ptm_cap_descriptor* ptm_cap;
};

struct usb_devmap {
  long unsigned int devicemap[2];
};

struct usb_device;

struct usb_bus {
  struct device* controller;
  struct device* sysdev;
  int busnum;
  const char* bus_name;
  u8 uses_pio_for_control;
  u8 otg_port;
  unsigned int is_b_host : 1;
  unsigned int b_hnp_enable : 1;
  unsigned int no_stop_on_short : 1;
  unsigned int no_sg_constraint : 1;
  unsigned int sg_tablesize;
  int devnum_next;
  struct mutex devnum_next_mutex;
  struct usb_devmap devmap;
  struct usb_device* root_hub;
  struct usb_bus* hs_companion;
  int bandwidth_allocated;
  int bandwidth_int_reqs;
  int bandwidth_isoc_reqs;
  unsigned int resuming_ports;
};

struct wusb_dev;

enum usb_device_removable {
  USB_DEVICE_REMOVABLE_UNKNOWN = 0,
  USB_DEVICE_REMOVABLE = 1,
  USB_DEVICE_FIXED = 2,
};

struct usb2_lpm_parameters {
  unsigned int besl;
  int timeout;
};

struct usb3_lpm_parameters {
  unsigned int mel;
  unsigned int pel;
  unsigned int sel;
  int timeout;
};

struct usb_tt;

struct usb_device {
  int devnum;
  char devpath[16];
  u32 route;
  enum usb_device_state state;
  enum usb_device_speed speed;
  unsigned int rx_lanes;
  unsigned int tx_lanes;
  struct usb_tt* tt;
  int ttport;
  unsigned int toggle[2];
  struct usb_device* parent;
  struct usb_bus* bus;
  struct usb_host_endpoint ep0;
  struct device dev;
  struct usb_device_descriptor descriptor;
  struct usb_host_bos* bos;
  struct usb_host_config* config;
  struct usb_host_config* actconfig;
  struct usb_host_endpoint* ep_in[16];
  struct usb_host_endpoint* ep_out[16];
  char** rawdescriptors;
  short unsigned int bus_mA;
  u8 portnum;
  u8 level;
  u8 devaddr;
  unsigned int can_submit : 1;
  unsigned int persist_enabled : 1;
  unsigned int have_langid : 1;
  unsigned int authorized : 1;
  unsigned int authenticated : 1;
  unsigned int wusb : 1;
  unsigned int lpm_capable : 1;
  unsigned int usb2_hw_lpm_capable : 1;
  unsigned int usb2_hw_lpm_besl_capable : 1;
  unsigned int usb2_hw_lpm_enabled : 1;
  unsigned int usb2_hw_lpm_allowed : 1;
  unsigned int usb3_lpm_u1_enabled : 1;
  unsigned int usb3_lpm_u2_enabled : 1;
  int string_langid;
  char* product;
  char* manufacturer;
  char* serial;
  struct list_head filelist;
  int maxchild;
  u32 quirks;
  atomic_t urbnum;
  long unsigned int active_duration;
  struct wusb_dev* wusb_dev;
  int slot_id;
  enum usb_device_removable removable;
  struct usb2_lpm_parameters l1_params;
  struct usb3_lpm_parameters u1_params;
  struct usb3_lpm_parameters u2_params;
  unsigned int lpm_disable_count;
  u16 hub_delay;
  unsigned int use_generic_driver : 1;
};

enum usb_port_connect_type {
  USB_PORT_CONNECT_TYPE_UNKNOWN = 0,
  USB_PORT_CONNECT_TYPE_HOT_PLUG = 1,
  USB_PORT_CONNECT_TYPE_HARD_WIRED = 2,
  USB_PORT_NOT_USED = 3,
};

struct usb_tt {
  struct usb_device* hub;
  int multi;
  unsigned int think_time;
  void* hcpriv;
  spinlock_t lock;
  struct list_head clear_list;
  struct work_struct clear_work;
};

struct usb_dynids {
  spinlock_t lock;
  struct list_head list;
};

struct usbdrv_wrap {
  struct device_driver driver;
  int for_devices;
};

struct usb_driver {
  const char* name;
  int (*probe)(struct usb_interface*, const struct usb_device_id*);
  void (*disconnect)(struct usb_interface*);
  int (*unlocked_ioctl)(struct usb_interface*, unsigned int, void*);
  int (*suspend)(struct usb_interface*, pm_message_t);
  int (*resume)(struct usb_interface*);
  int (*reset_resume)(struct usb_interface*);
  int (*pre_reset)(struct usb_interface*);
  int (*post_reset)(struct usb_interface*);
  const struct usb_device_id* id_table;
  const struct attribute_group** dev_groups;
  struct usb_dynids dynids;
  struct usbdrv_wrap drvwrap;
  unsigned int no_dynamic_id : 1;
  unsigned int supports_autosuspend : 1;
  unsigned int disable_hub_initiated_lpm : 1;
  unsigned int soft_unbind : 1;
};

struct usb_device_driver {
  const char* name;
  bool (*match)(struct usb_device*);
  int (*probe)(struct usb_device*);
  void (*disconnect)(struct usb_device*);
  int (*suspend)(struct usb_device*, pm_message_t);
  int (*resume)(struct usb_device*, pm_message_t);
  const struct attribute_group** dev_groups;
  struct usbdrv_wrap drvwrap;
  const struct usb_device_id* id_table;
  unsigned int supports_autosuspend : 1;
  unsigned int generic_subclass : 1;
};

struct usb_iso_packet_descriptor {
  unsigned int offset;
  unsigned int length;
  unsigned int actual_length;
  int status;
};

struct usb_anchor {
  struct list_head urb_list;
  wait_queue_head_t wait;
  spinlock_t lock;
  atomic_t suspend_wakeups;
  unsigned int poisoned : 1;
};

struct urb;

typedef void (*usb_complete_t)(struct urb*);

struct urb {
  struct kref kref;
  int unlinked;
  void* hcpriv;
  atomic_t use_count;
  atomic_t reject;
  struct list_head urb_list;
  struct list_head anchor_list;
  struct usb_anchor* anchor;
  struct usb_device* dev;
  struct usb_host_endpoint* ep;
  unsigned int pipe;
  unsigned int stream_id;
  int status;
  unsigned int transfer_flags;
  void* transfer_buffer;
  dma_addr_t transfer_dma;
  struct scatterlist* sg;
  int num_mapped_sgs;
  int num_sgs;
  u32 transfer_buffer_length;
  u32 actual_length;
  unsigned char* setup_packet;
  dma_addr_t setup_dma;
  int start_frame;
  int number_of_packets;
  int interval;
  int error_count;
  void* context;
  usb_complete_t complete;
  struct usb_iso_packet_descriptor iso_frame_desc[0];
};

struct giveback_urb_bh {
  bool running;
  spinlock_t lock;
  struct list_head head;
  struct tasklet_struct bh;
  struct usb_host_endpoint* completing_ep;
};

enum usb_dev_authorize_policy {
  USB_DEVICE_AUTHORIZE_NONE = 0,
  USB_DEVICE_AUTHORIZE_ALL = 1,
  USB_DEVICE_AUTHORIZE_INTERNAL = 2,
};

struct usb_phy_roothub;

struct hc_driver;

struct usb_phy;

struct usb_hcd {
  struct usb_bus self;
  struct kref kref;
  const char* product_desc;
  int speed;
  char irq_descr[24];
  struct timer_list rh_timer;
  struct urb* status_urb;
  struct work_struct died_work;
  const struct hc_driver* driver;
  struct usb_phy* usb_phy;
  struct usb_phy_roothub* phy_roothub;
  long unsigned int flags;
  enum usb_dev_authorize_policy dev_policy;
  unsigned int rh_registered : 1;
  unsigned int rh_pollable : 1;
  unsigned int msix_enabled : 1;
  unsigned int msi_enabled : 1;
  unsigned int skip_phy_initialization : 1;
  unsigned int uses_new_polling : 1;
  unsigned int wireless : 1;
  unsigned int has_tt : 1;
  unsigned int amd_resume_bug : 1;
  unsigned int can_do_streams : 1;
  unsigned int tpl_support : 1;
  unsigned int cant_recv_wakeups : 1;
  unsigned int irq;
  void* regs;
  resource_size_t rsrc_start;
  resource_size_t rsrc_len;
  unsigned int power_budget;
  struct giveback_urb_bh high_prio_bh;
  struct giveback_urb_bh low_prio_bh;
  struct mutex* address0_mutex;
  struct mutex* bandwidth_mutex;
  struct usb_hcd* shared_hcd;
  struct usb_hcd* primary_hcd;
  struct dma_pool___2* pool[4];
  int state;
  struct gen_pool* localmem_pool;
  long unsigned int hcd_priv[0];
};

struct hc_driver {
  const char* description;
  const char* product_desc;
  size_t hcd_priv_size;
  irqreturn_t (*irq)(struct usb_hcd*);
  int flags;
  int (*reset)(struct usb_hcd*);
  int (*start)(struct usb_hcd*);
  int (*pci_suspend)(struct usb_hcd*, bool);
  int (*pci_resume)(struct usb_hcd*, bool);
  void (*stop)(struct usb_hcd*);
  void (*shutdown)(struct usb_hcd*);
  int (*get_frame_number)(struct usb_hcd*);
  int (*urb_enqueue)(struct usb_hcd*, struct urb*, gfp_t);
  int (*urb_dequeue)(struct usb_hcd*, struct urb*, int);
  int (*map_urb_for_dma)(struct usb_hcd*, struct urb*, gfp_t);
  void (*unmap_urb_for_dma)(struct usb_hcd*, struct urb*);
  void (*endpoint_disable)(struct usb_hcd*, struct usb_host_endpoint*);
  void (*endpoint_reset)(struct usb_hcd*, struct usb_host_endpoint*);
  int (*hub_status_data)(struct usb_hcd*, char*);
  int (*hub_control)(struct usb_hcd*, u16, u16, u16, char*, u16);
  int (*bus_suspend)(struct usb_hcd*);
  int (*bus_resume)(struct usb_hcd*);
  int (*start_port_reset)(struct usb_hcd*, unsigned int);
  long unsigned int (*get_resuming_ports)(struct usb_hcd*);
  void (*relinquish_port)(struct usb_hcd*, int);
  int (*port_handed_over)(struct usb_hcd*, int);
  void (*clear_tt_buffer_complete)(struct usb_hcd*, struct usb_host_endpoint*);
  int (*alloc_dev)(struct usb_hcd*, struct usb_device*);
  void (*free_dev)(struct usb_hcd*, struct usb_device*);
  int (*alloc_streams)(
      struct usb_hcd*,
      struct usb_device*,
      struct usb_host_endpoint**,
      unsigned int,
      unsigned int,
      gfp_t);
  int (*free_streams)(
      struct usb_hcd*,
      struct usb_device*,
      struct usb_host_endpoint**,
      unsigned int,
      gfp_t);
  int (*add_endpoint)(
      struct usb_hcd*,
      struct usb_device*,
      struct usb_host_endpoint*);
  int (*drop_endpoint)(
      struct usb_hcd*,
      struct usb_device*,
      struct usb_host_endpoint*);
  int (*check_bandwidth)(struct usb_hcd*, struct usb_device*);
  void (*reset_bandwidth)(struct usb_hcd*, struct usb_device*);
  int (*address_device)(struct usb_hcd*, struct usb_device*);
  int (*enable_device)(struct usb_hcd*, struct usb_device*);
  int (*update_hub_device)(
      struct usb_hcd*,
      struct usb_device*,
      struct usb_tt*,
      gfp_t);
  int (*reset_device)(struct usb_hcd*, struct usb_device*);
  int (*update_device)(struct usb_hcd*, struct usb_device*);
  int (*set_usb2_hw_lpm)(struct usb_hcd*, struct usb_device*, int);
  int (*enable_usb3_lpm_timeout)(
      struct usb_hcd*,
      struct usb_device*,
      enum usb3_link_state);
  int (*disable_usb3_lpm_timeout)(
      struct usb_hcd*,
      struct usb_device*,
      enum usb3_link_state);
  int (*find_raw_port_number)(struct usb_hcd*, int);
  int (*port_power)(struct usb_hcd*, int, bool);
};

enum usb_phy_type {
  USB_PHY_TYPE_UNDEFINED = 0,
  USB_PHY_TYPE_USB2 = 1,
  USB_PHY_TYPE_USB3 = 2,
};

enum usb_phy_events {
  USB_EVENT_NONE = 0,
  USB_EVENT_VBUS = 1,
  USB_EVENT_ID = 2,
  USB_EVENT_CHARGER = 3,
  USB_EVENT_ENUMERATED = 4,
};

struct extcon_dev;

enum usb_charger_type {
  UNKNOWN_TYPE = 0,
  SDP_TYPE = 1,
  DCP_TYPE = 2,
  CDP_TYPE = 3,
  ACA_TYPE = 4,
};

enum usb_charger_state {
  USB_CHARGER_DEFAULT = 0,
  USB_CHARGER_PRESENT = 1,
  USB_CHARGER_ABSENT = 2,
};

struct usb_charger_current {
  unsigned int sdp_min;
  unsigned int sdp_max;
  unsigned int dcp_min;
  unsigned int dcp_max;
  unsigned int cdp_min;
  unsigned int cdp_max;
  unsigned int aca_min;
  unsigned int aca_max;
};

struct usb_otg;

struct usb_phy_io_ops;

struct usb_phy {
  struct device* dev;
  const char* label;
  unsigned int flags;
  enum usb_phy_type type;
  enum usb_phy_events last_event;
  struct usb_otg* otg;
  struct device* io_dev;
  struct usb_phy_io_ops* io_ops;
  void* io_priv;
  struct extcon_dev* edev;
  struct extcon_dev* id_edev;
  struct notifier_block vbus_nb;
  struct notifier_block id_nb;
  struct notifier_block type_nb;
  enum usb_charger_type chg_type;
  enum usb_charger_state chg_state;
  struct usb_charger_current chg_cur;
  struct work_struct chg_work;
  struct atomic_notifier_head notifier;
  u16 port_status;
  u16 port_change;
  struct list_head head;
  int (*init)(struct usb_phy*);
  void (*shutdown)(struct usb_phy*);
  int (*set_vbus)(struct usb_phy*, int);
  int (*set_power)(struct usb_phy*, unsigned int);
  int (*set_suspend)(struct usb_phy*, int);
  int (*set_wakeup)(struct usb_phy*, bool);
  int (*notify_connect)(struct usb_phy*, enum usb_device_speed);
  int (*notify_disconnect)(struct usb_phy*, enum usb_device_speed);
  enum usb_charger_type (*charger_detect)(struct usb_phy*);
};

struct usb_port_status {
  __le16 wPortStatus;
  __le16 wPortChange;
  __le32 dwExtPortStatus;
};

struct usb_hub_status {
  __le16 wHubStatus;
  __le16 wHubChange;
};

struct usb_hub_descriptor {
  __u8 bDescLength;
  __u8 bDescriptorType;
  __u8 bNbrPorts;
  __le16 wHubCharacteristics;
  __u8 bPwrOn2PwrGood;
  __u8 bHubContrCurrent;
  union {
    struct {
      __u8 DeviceRemovable[4];
      __u8 PortPwrCtrlMask[4];
    } hs;
    struct {
      __u8 bHubHdrDecLat;
      __le16 wHubDelay;
      __le16 DeviceRemovable;
    } __attribute__((packed)) ss;
  } u;
} __attribute__((packed));

struct usb_phy_io_ops {
  int (*read)(struct usb_phy*, u32);
  int (*write)(struct usb_phy*, u32, u32);
};

struct usb_gadget;

struct usb_otg {
  u8 default_a;
  struct phy* phy;
  struct usb_phy* usb_phy;
  struct usb_bus* host;
  struct usb_gadget* gadget;
  enum usb_otg_state state;
  int (*set_host)(struct usb_otg*, struct usb_bus*);
  int (*set_peripheral)(struct usb_otg*, struct usb_gadget*);
  int (*set_vbus)(struct usb_otg*, bool);
  int (*start_srp)(struct usb_otg*);
  int (*start_hnp)(struct usb_otg*);
};

typedef u32 usb_port_location_t;

struct usb_port;

struct usb_hub {
  struct device* intfdev;
  struct usb_device* hdev;
  struct kref kref;
  struct urb* urb;
  u8 (*buffer)[8];
  union {
    struct usb_hub_status hub;
    struct usb_port_status port;
  }* status;
  struct mutex status_mutex;
  int error;
  int nerrors;
  long unsigned int event_bits[1];
  long unsigned int change_bits[1];
  long unsigned int removed_bits[1];
  long unsigned int wakeup_bits[1];
  long unsigned int power_bits[1];
  long unsigned int child_usage_bits[1];
  long unsigned int warm_reset_bits[1];
  struct usb_hub_descriptor* descriptor;
  struct usb_tt tt;
  unsigned int mA_per_port;
  unsigned int limited_power : 1;
  unsigned int quiescing : 1;
  unsigned int disconnected : 1;
  unsigned int in_reset : 1;
  unsigned int quirk_disable_autosuspend : 1;
  unsigned int quirk_check_port_auto_suspend : 1;
  unsigned int has_indicators : 1;
  u8 indicator[31];
  struct delayed_work leds;
  struct delayed_work init_work;
  struct work_struct events;
  spinlock_t irq_urb_lock;
  struct timer_list irq_urb_retry;
  struct usb_port** ports;
};

struct usb_dev_state;

struct usb_port {
  struct usb_device* child;
  struct device dev;
  struct usb_dev_state* port_owner;
  struct usb_port* peer;
  struct dev_pm_qos_request* req;
  enum usb_port_connect_type connect_type;
  usb_port_location_t location;
  struct mutex status_lock;
  u32 over_current_count;
  u8 portnum;
  u32 quirks;
  unsigned int is_superspeed : 1;
  unsigned int usb3_lpm_u1_permit : 1;
  unsigned int usb3_lpm_u2_permit : 1;
};

struct find_interface_arg {
  int minor;
  struct device_driver* drv;
};

struct each_dev_arg {
  void* data;
  int (*fn)(struct usb_device*, void*);
};

struct usb_qualifier_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __le16 bcdUSB;
  __u8 bDeviceClass;
  __u8 bDeviceSubClass;
  __u8 bDeviceProtocol;
  __u8 bMaxPacketSize0;
  __u8 bNumConfigurations;
  __u8 bRESERVED;
};

struct usbdevfs_hub_portinfo {
  char nports;
  char port[127];
};

enum hub_led_mode {
  INDICATOR_AUTO = 0,
  INDICATOR_CYCLE = 1,
  INDICATOR_GREEN_BLINK = 2,
  INDICATOR_GREEN_BLINK_OFF = 3,
  INDICATOR_AMBER_BLINK = 4,
  INDICATOR_AMBER_BLINK_OFF = 5,
  INDICATOR_ALT_BLINK = 6,
  INDICATOR_ALT_BLINK_OFF = 7,
};

struct usb_tt_clear {
  struct list_head clear_list;
  unsigned int tt;
  u16 devinfo;
  struct usb_hcd* hcd;
  struct usb_host_endpoint* ep;
};

enum hub_activation_type {
  HUB_INIT = 0,
  HUB_INIT2 = 1,
  HUB_INIT3 = 2,
  HUB_POST_RESET = 3,
  HUB_RESUME = 4,
  HUB_RESET_RESUME = 5,
};

enum hub_quiescing_type {
  HUB_DISCONNECT = 0,
  HUB_PRE_RESET = 1,
  HUB_SUSPEND = 2,
};

struct usb_ctrlrequest {
  __u8 bRequestType;
  __u8 bRequest;
  __le16 wValue;
  __le16 wIndex;
  __le16 wLength;
};

enum usb_led_event {
  USB_LED_EVENT_HOST = 0,
  USB_LED_EVENT_GADGET = 1,
};

struct usb_sg_request {
  int status;
  size_t bytes;
  spinlock_t lock;
  struct usb_device* dev;
  int pipe;
  int entries;
  struct urb** urbs;
  int count;
  struct completion complete;
};

struct usb_cdc_header_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __le16 bcdCDC;
} __attribute__((packed));

struct usb_cdc_call_mgmt_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 bmCapabilities;
  __u8 bDataInterface;
};

struct usb_cdc_acm_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 bmCapabilities;
};

struct usb_cdc_union_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 bMasterInterface0;
  __u8 bSlaveInterface0;
};

struct usb_cdc_country_functional_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 iCountryCodeRelDate;
  __le16 wCountyCode0;
};

struct usb_cdc_network_terminal_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 bEntityId;
  __u8 iName;
  __u8 bChannelIndex;
  __u8 bPhysicalInterface;
};

struct usb_cdc_ether_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 iMACAddress;
  __le32 bmEthernetStatistics;
  __le16 wMaxSegmentSize;
  __le16 wNumberMCFilters;
  __u8 bNumberPowerFilters;
} __attribute__((packed));

struct usb_cdc_dmm_desc {
  __u8 bFunctionLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubtype;
  __u16 bcdVersion;
  __le16 wMaxCommand;
} __attribute__((packed));

struct usb_cdc_mdlm_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __le16 bcdVersion;
  __u8 bGUID[16];
} __attribute__((packed));

struct usb_cdc_mdlm_detail_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __u8 bGuidDescriptorType;
  __u8 bDetailData[0];
};

struct usb_cdc_obex_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __le16 bcdVersion;
} __attribute__((packed));

struct usb_cdc_ncm_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __le16 bcdNcmVersion;
  __u8 bmNetworkCapabilities;
} __attribute__((packed));

struct usb_cdc_mbim_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __le16 bcdMBIMVersion;
  __le16 wMaxControlMessage;
  __u8 bNumberFilters;
  __u8 bMaxFilterSize;
  __le16 wMaxSegmentSize;
  __u8 bmNetworkCapabilities;
} __attribute__((packed));

struct usb_cdc_mbim_extended_desc {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDescriptorSubType;
  __le16 bcdMBIMExtendedVersion;
  __u8 bMaxOutstandingCommandMessages;
  __le16 wMTU;
} __attribute__((packed));

struct usb_cdc_parsed_header {
  struct usb_cdc_union_desc* usb_cdc_union_desc;
  struct usb_cdc_header_desc* usb_cdc_header_desc;
  struct usb_cdc_call_mgmt_descriptor* usb_cdc_call_mgmt_descriptor;
  struct usb_cdc_acm_descriptor* usb_cdc_acm_descriptor;
  struct usb_cdc_country_functional_desc* usb_cdc_country_functional_desc;
  struct usb_cdc_network_terminal_desc* usb_cdc_network_terminal_desc;
  struct usb_cdc_ether_desc* usb_cdc_ether_desc;
  struct usb_cdc_dmm_desc* usb_cdc_dmm_desc;
  struct usb_cdc_mdlm_desc* usb_cdc_mdlm_desc;
  struct usb_cdc_mdlm_detail_desc* usb_cdc_mdlm_detail_desc;
  struct usb_cdc_obex_desc* usb_cdc_obex_desc;
  struct usb_cdc_ncm_desc* usb_cdc_ncm_desc;
  struct usb_cdc_mbim_desc* usb_cdc_mbim_desc;
  struct usb_cdc_mbim_extended_desc* usb_cdc_mbim_extended_desc;
  bool phonet_magic_present;
};

struct api_context {
  struct completion done;
  int status;
};

struct set_config_request {
  struct usb_device* udev;
  int config;
  struct work_struct work;
  struct list_head node;
};

struct usb_dynid {
  struct list_head node;
  struct usb_device_id id;
};

struct usb_dev_cap_header {
  __u8 bLength;
  __u8 bDescriptorType;
  __u8 bDevCapabilityType;
};

struct usb_class_driver {
  char* name;
  char* (*devnode)(struct device*, umode_t*);
  const struct file_operations* fops;
  int minor_base;
};

struct usb_class {
  struct kref kref;
  struct class* class;
};

struct ep_device {
  struct usb_endpoint_descriptor* desc;
  struct usb_device* udev;
  struct device dev;
};

struct usbdevfs_ctrltransfer {
  __u8 bRequestType;
  __u8 bRequest;
  __u16 wValue;
  __u16 wIndex;
  __u16 wLength;
  __u32 timeout;
  void* data;
};

struct usbdevfs_bulktransfer {
  unsigned int ep;
  unsigned int len;
  unsigned int timeout;
  void* data;
};

struct usbdevfs_setinterface {
  unsigned int interface;
  unsigned int altsetting;
};

struct usbdevfs_disconnectsignal {
  unsigned int signr;
  void* context;
};

struct usbdevfs_getdriver {
  unsigned int interface;
  char driver[256];
};

struct usbdevfs_connectinfo {
  unsigned int devnum;
  unsigned char slow;
};

struct usbdevfs_conninfo_ex {
  __u32 size;
  __u32 busnum;
  __u32 devnum;
  __u32 speed;
  __u8 num_ports;
  __u8 ports[7];
};

struct usbdevfs_iso_packet_desc {
  unsigned int length;
  unsigned int actual_length;
  unsigned int status;
};

struct usbdevfs_urb {
  unsigned char type;
  unsigned char endpoint;
  int status;
  unsigned int flags;
  void* buffer;
  int buffer_length;
  int actual_length;
  int start_frame;
  union {
    int number_of_packets;
    unsigned int stream_id;
  };
  int error_count;
  unsigned int signr;
  void* usercontext;
  struct usbdevfs_iso_packet_desc iso_frame_desc[0];
};

struct usbdevfs_ioctl {
  int ifno;
  int ioctl_code;
  void* data;
};

struct usbdevfs_disconnect_claim {
  unsigned int interface;
  unsigned int flags;
  char driver[256];
};

struct usbdevfs_streams {
  unsigned int num_streams;
  unsigned int num_eps;
  unsigned char eps[0];
};

struct usbdevfs_ctrltransfer32 {
  u8 bRequestType;
  u8 bRequest;
  u16 wValue;
  u16 wIndex;
  u16 wLength;
  u32 timeout;
  compat_caddr_t data;
};

struct usbdevfs_bulktransfer32 {
  compat_uint_t ep;
  compat_uint_t len;
  compat_uint_t timeout;
  compat_caddr_t data;
};

struct usbdevfs_disconnectsignal32 {
  compat_int_t signr;
  compat_caddr_t context;
};

struct usbdevfs_urb32 {
  unsigned char type;
  unsigned char endpoint;
  compat_int_t status;
  compat_uint_t flags;
  compat_caddr_t buffer;
  compat_int_t buffer_length;
  compat_int_t actual_length;
  compat_int_t start_frame;
  compat_int_t number_of_packets;
  compat_int_t error_count;
  compat_uint_t signr;
  compat_caddr_t usercontext;
  struct usbdevfs_iso_packet_desc iso_frame_desc[0];
};

struct usbdevfs_ioctl32 {
  s32 ifno;
  s32 ioctl_code;
  compat_caddr_t data;
};

struct usb_dev_state___2 {
  struct list_head list;
  struct usb_device* dev;
  struct file* file;
  spinlock_t lock;
  struct list_head async_pending;
  struct list_head async_completed;
  struct list_head memory_list;
  wait_queue_head_t wait;
  wait_queue_head_t wait_for_resume;
  unsigned int discsignr;
  struct pid* disc_pid;
  const struct cred* cred;
  sigval_t disccontext;
  long unsigned int ifclaimed;
  u32 disabled_bulk_eps;
  long unsigned int interface_allowed_mask;
  int not_yet_resumed;
  bool suspend_allowed;
  bool privileges_dropped;
};

struct usb_memory {
  struct list_head memlist;
  int vma_use_count;
  int urb_use_count;
  u32 size;
  void* mem;
  dma_addr_t dma_handle;
  long unsigned int vm_start;
  struct usb_dev_state___2* ps;
};

struct async {
  struct list_head asynclist;
  struct usb_dev_state___2* ps;
  struct pid* pid;
  const struct cred* cred;
  unsigned int signr;
  unsigned int ifnum;
  void* userbuffer;
  void* userurb;
  sigval_t userurb_sigval;
  struct urb* urb;
  struct usb_memory* usbm;
  unsigned int mem_usage;
  int status;
  u8 bulk_addr;
  u8 bulk_status;
};

enum snoop_when {
  SUBMIT = 0,
  COMPLETE = 1,
};

struct quirk_entry {
  u16 vid;
  u16 pid;
  u32 flags;
};

struct class_info {
  int class;
  char* class_name;
};

struct usb_phy_roothub___2 {
  struct phy* phy;
  struct list_head list;
};

typedef void (*companion_fn)(
    struct pci_dev*,
    struct usb_hcd*,
    struct pci_dev*,
    struct usb_hcd*);

enum amd_chipset_gen {
  NOT_AMD_CHIPSET = 0,
  AMD_CHIPSET_SB600 = 1,
  AMD_CHIPSET_SB700 = 2,
  AMD_CHIPSET_SB800 = 3,
  AMD_CHIPSET_HUDSON2 = 4,
  AMD_CHIPSET_BOLTON = 5,
  AMD_CHIPSET_YANGTZE = 6,
  AMD_CHIPSET_TAISHAN = 7,
  AMD_CHIPSET_UNKNOWN = 8,
};

struct amd_chipset_type {
  enum amd_chipset_gen gen;
  u8 rev;
};

struct amd_chipset_info {
  struct pci_dev* nb_dev;
  struct pci_dev* smbus_dev;
  int nb_type;
  struct amd_chipset_type sb_type;
  int isoc_reqs;
  int probe_count;
  bool need_pll_quirk;
};

struct ehci_stats {
  long unsigned int normal;
  long unsigned int error;
  long unsigned int iaa;
  long unsigned int lost_iaa;
  long unsigned int complete;
  long unsigned int unlink;
};

struct ehci_per_sched {
  struct usb_device* udev;
  struct usb_host_endpoint* ep;
  struct list_head ps_list;
  u16 tt_usecs;
  u16 cs_mask;
  u16 period;
  u16 phase;
  u8 bw_phase;
  u8 phase_uf;
  u8 usecs;
  u8 c_usecs;
  u8 bw_uperiod;
  u8 bw_period;
};

enum ehci_rh_state {
  EHCI_RH_HALTED = 0,
  EHCI_RH_SUSPENDED = 1,
  EHCI_RH_RUNNING = 2,
  EHCI_RH_STOPPING = 3,
};

enum ehci_hrtimer_event {
  EHCI_HRTIMER_POLL_ASS = 0,
  EHCI_HRTIMER_POLL_PSS = 1,
  EHCI_HRTIMER_POLL_DEAD = 2,
  EHCI_HRTIMER_UNLINK_INTR = 3,
  EHCI_HRTIMER_FREE_ITDS = 4,
  EHCI_HRTIMER_ACTIVE_UNLINK = 5,
  EHCI_HRTIMER_START_UNLINK_INTR = 6,
  EHCI_HRTIMER_ASYNC_UNLINKS = 7,
  EHCI_HRTIMER_IAA_WATCHDOG = 8,
  EHCI_HRTIMER_DISABLE_PERIODIC = 9,
  EHCI_HRTIMER_DISABLE_ASYNC = 10,
  EHCI_HRTIMER_IO_WATCHDOG = 11,
  EHCI_HRTIMER_NUM_EVENTS = 12,
};

struct ehci_caps;

struct ehci_regs;

struct ehci_dbg_port;

struct ehci_qh;

union ehci_shadow;

struct ehci_itd;

struct ehci_sitd;

struct ehci_hcd {
  enum ehci_hrtimer_event next_hrtimer_event;
  unsigned int enabled_hrtimer_events;
  ktime_t hr_timeouts[12];
  struct hrtimer hrtimer;
  int PSS_poll_count;
  int ASS_poll_count;
  int died_poll_count;
  struct ehci_caps* caps;
  struct ehci_regs* regs;
  struct ehci_dbg_port* debug;
  __u32 hcs_params;
  spinlock_t lock;
  enum ehci_rh_state rh_state;
  bool scanning : 1;
  bool need_rescan : 1;
  bool intr_unlinking : 1;
  bool iaa_in_progress : 1;
  bool async_unlinking : 1;
  bool shutdown : 1;
  struct ehci_qh* qh_scan_next;
  struct ehci_qh* async;
  struct ehci_qh* dummy;
  struct list_head async_unlink;
  struct list_head async_idle;
  unsigned int async_unlink_cycle;
  unsigned int async_count;
  __le32 old_current;
  __le32 old_token;
  unsigned int periodic_size;
  __le32* periodic;
  dma_addr_t periodic_dma;
  struct list_head intr_qh_list;
  unsigned int i_thresh;
  union ehci_shadow* pshadow;
  struct list_head intr_unlink_wait;
  struct list_head intr_unlink;
  unsigned int intr_unlink_wait_cycle;
  unsigned int intr_unlink_cycle;
  unsigned int now_frame;
  unsigned int last_iso_frame;
  unsigned int intr_count;
  unsigned int isoc_count;
  unsigned int periodic_count;
  unsigned int uframe_periodic_max;
  struct list_head cached_itd_list;
  struct ehci_itd* last_itd_to_free;
  struct list_head cached_sitd_list;
  struct ehci_sitd* last_sitd_to_free;
  long unsigned int reset_done[15];
  long unsigned int bus_suspended;
  long unsigned int companion_ports;
  long unsigned int owned_ports;
  long unsigned int port_c_suspend;
  long unsigned int suspended_ports;
  long unsigned int resuming_ports;
  struct dma_pool___2* qh_pool;
  struct dma_pool___2* qtd_pool;
  struct dma_pool___2* itd_pool;
  struct dma_pool___2* sitd_pool;
  unsigned int random_frame;
  long unsigned int next_statechange;
  ktime_t last_periodic_enable;
  u32 command;
  unsigned int no_selective_suspend : 1;
  unsigned int has_fsl_port_bug : 1;
  unsigned int has_fsl_hs_errata : 1;
  unsigned int has_fsl_susp_errata : 1;
  unsigned int big_endian_mmio : 1;
  unsigned int big_endian_desc : 1;
  unsigned int big_endian_capbase : 1;
  unsigned int has_amcc_usb23 : 1;
  unsigned int need_io_watchdog : 1;
  unsigned int amd_pll_fix : 1;
  unsigned int use_dummy_qh : 1;
  unsigned int has_synopsys_hc_bug : 1;
  unsigned int frame_index_bug : 1;
  unsigned int need_oc_pp_cycle : 1;
  unsigned int imx28_write_fix : 1;
  __le32* ohci_hcctrl_reg;
  unsigned int has_hostpc : 1;
  unsigned int has_tdi_phy_lpm : 1;
  unsigned int has_ppcd : 1;
  u8 sbrn;
  struct ehci_stats stats;
  struct dentry* debug_dir;
  u8 bandwidth[64];
  u8 tt_budget[64];
  struct list_head tt_list;
  long unsigned int priv[0];
};

struct ehci_caps {
  u32 hc_capbase;
  u32 hcs_params;
  u32 hcc_params;
  u8 portroute[8];
};

struct ehci_regs {
  u32 command;
  u32 status;
  u32 intr_enable;
  u32 frame_index;
  u32 segment;
  u32 frame_list;
  u32 async_next;
  u32 reserved1[2];
  u32 txfill_tuning;
  u32 reserved2[6];
  u32 configured_flag;
  u32 port_status[0];
  u32 reserved3[9];
  u32 usbmode;
  u32 reserved4[6];
  u32 hostpc[0];
  u32 reserved5[17];
  u32 usbmode_ex;
};

struct ehci_dbg_port {
  u32 control;
  u32 pids;
  u32 data03;
  u32 data47;
  u32 address;
};

struct ehci_fstn;

union ehci_shadow {
  struct ehci_qh* qh;
  struct ehci_itd* itd;
  struct ehci_sitd* sitd;
  struct ehci_fstn* fstn;
  __le32* hw_next;
  void* ptr;
};

struct ehci_qh_hw;

struct ehci_qtd;

struct ehci_qh {
  struct ehci_qh_hw* hw;
  dma_addr_t qh_dma;
  union ehci_shadow qh_next;
  struct list_head qtd_list;
  struct list_head intr_node;
  struct ehci_qtd* dummy;
  struct list_head unlink_node;
  struct ehci_per_sched ps;
  unsigned int unlink_cycle;
  u8 qh_state;
  u8 xacterrs;
  u8 unlink_reason;
  u8 gap_uf;
  unsigned int is_out : 1;
  unsigned int clearing_tt : 1;
  unsigned int dequeue_during_giveback : 1;
  unsigned int should_be_inactive : 1;
};

struct ehci_iso_stream;

struct ehci_itd {
  __le32 hw_next;
  __le32 hw_transaction[8];
  __le32 hw_bufp[7];
  __le32 hw_bufp_hi[7];
  dma_addr_t itd_dma;
  union ehci_shadow itd_next;
  struct urb* urb;
  struct ehci_iso_stream* stream;
  struct list_head itd_list;
  unsigned int frame;
  unsigned int pg;
  unsigned int index[8];
  long : 64;
};

struct ehci_sitd {
  __le32 hw_next;
  __le32 hw_fullspeed_ep;
  __le32 hw_uframe;
  __le32 hw_results;
  __le32 hw_buf[2];
  __le32 hw_backpointer;
  __le32 hw_buf_hi[2];
  dma_addr_t sitd_dma;
  union ehci_shadow sitd_next;
  struct urb* urb;
  struct ehci_iso_stream* stream;
  struct list_head sitd_list;
  unsigned int frame;
  unsigned int index;
};

struct ehci_qtd {
  __le32 hw_next;
  __le32 hw_alt_next;
  __le32 hw_token;
  __le32 hw_buf[5];
  __le32 hw_buf_hi[5];
  dma_addr_t qtd_dma;
  struct list_head qtd_list;
  struct urb* urb;
  size_t length;
};

struct ehci_fstn {
  __le32 hw_next;
  __le32 hw_prev;
  dma_addr_t fstn_dma;
  union ehci_shadow fstn_next;
  long : 64;
};

struct ehci_qh_hw {
  __le32 hw_next;
  __le32 hw_info1;
  __le32 hw_info2;
  __le32 hw_current;
  __le32 hw_qtd_next;
  __le32 hw_alt_next;
  __le32 hw_token;
  __le32 hw_buf[5];
  __le32 hw_buf_hi[5];
  long : 32;
  long : 64;
  long : 64;
  long : 64;
};

struct ehci_iso_packet {
  u64 bufp;
  __le32 transaction;
  u8 cross;
  u32 buf1;
};

struct ehci_iso_sched {
  struct list_head td_list;
  unsigned int span;
  unsigned int first_packet;
  struct ehci_iso_packet packet[0];
};

struct ehci_iso_stream {
  struct ehci_qh_hw* hw;
  u8 bEndpointAddress;
  u8 highspeed;
  struct list_head td_list;
  struct list_head free_list;
  struct ehci_per_sched ps;
  unsigned int next_uframe;
  __le32 splits;
  u16 uperiod;
  u16 maxp;
  unsigned int bandwidth;
  __le32 buf0;
  __le32 buf1;
  __le32 buf2;
  __le32 address;
};

struct ehci_tt {
  u16 bandwidth[8];
  struct list_head tt_list;
  struct list_head ps_list;
  struct usb_tt* usb_tt;
  int tt_port;
};

struct ehci_driver_overrides {
  size_t extra_priv_size;
  int (*reset)(struct usb_hcd*);
  int (*port_power)(struct usb_hcd*, int, bool);
};

struct debug_buffer {
  ssize_t (*fill_func)(struct debug_buffer*);
  struct usb_bus* bus;
  struct mutex mutex;
  size_t count;
  char* output_buf;
  size_t alloc_size;
};

struct uhci_td;

struct uhci_qh {
  __le32 link;
  __le32 element;
  dma_addr_t dma_handle;
  struct list_head node;
  struct usb_host_endpoint* hep;
  struct usb_device* udev;
  struct list_head queue;
  struct uhci_td* dummy_td;
  struct uhci_td* post_td;
  struct usb_iso_packet_descriptor* iso_packet_desc;
  long unsigned int advance_jiffies;
  unsigned int unlink_frame;
  unsigned int period;
  short int phase;
  short int load;
  unsigned int iso_frame;
  int state;
  int type;
  int skel;
  unsigned int initial_toggle : 1;
  unsigned int needs_fixup : 1;
  unsigned int is_stopped : 1;
  unsigned int wait_expired : 1;
  unsigned int bandwidth_reserved : 1;
};

struct uhci_td {
  __le32 link;
  __le32 status;
  __le32 token;
  __le32 buffer;
  dma_addr_t dma_handle;
  struct list_head list;
  int frame;
  struct list_head fl_list;
};

enum uhci_rh_state {
  UHCI_RH_RESET = 0,
  UHCI_RH_SUSPENDED = 1,
  UHCI_RH_AUTO_STOPPED = 2,
  UHCI_RH_RESUMING = 3,
  UHCI_RH_SUSPENDING = 4,
  UHCI_RH_RUNNING = 5,
  UHCI_RH_RUNNING_NODEVS = 6,
};

struct uhci_hcd {
  struct dentry* dentry;
  long unsigned int io_addr;
  void* regs;
  struct dma_pool___2* qh_pool;
  struct dma_pool___2* td_pool;
  struct uhci_td* term_td;
  struct uhci_qh* skelqh[11];
  struct uhci_qh* next_qh;
  spinlock_t lock;
  dma_addr_t frame_dma_handle;
  __le32* frame;
  void** frame_cpu;
  enum uhci_rh_state rh_state;
  long unsigned int auto_stop_time;
  unsigned int frame_number;
  unsigned int is_stopped;
  unsigned int last_iso_frame;
  unsigned int cur_iso_frame;
  unsigned int scan_in_progress : 1;
  unsigned int need_rescan : 1;
  unsigned int dead : 1;
  unsigned int RD_enable : 1;
  unsigned int is_initialized : 1;
  unsigned int fsbr_is_on : 1;
  unsigned int fsbr_is_wanted : 1;
  unsigned int fsbr_expiring : 1;
  struct timer_list fsbr_timer;
  unsigned int oc_low : 1;
  unsigned int wait_for_hp : 1;
  unsigned int big_endian_mmio : 1;
  unsigned int big_endian_desc : 1;
  unsigned int is_aspeed : 1;
  long unsigned int port_c_suspend;
  long unsigned int resuming_ports;
  long unsigned int ports_timeout;
  struct list_head idle_qh_list;
  int rh_numports;
  wait_queue_head_t waitqh;
  int num_waiting;
  int total_load;
  short int load[32];
  struct clk* clk;
  void (*reset_hc)(struct uhci_hcd*);
  int (*check_and_reset_hc)(struct uhci_hcd*);
  void (*configure_hc)(struct uhci_hcd*);
  int (*resume_detect_interrupts_are_broken)(struct uhci_hcd*);
  int (*global_suspend_mode_is_broken)(struct uhci_hcd*);
};

struct urb_priv {
  struct list_head node;
  struct urb* urb;
  struct uhci_qh* qh;
  struct list_head td_list;
  unsigned int fsbr : 1;
};

struct uhci_debug {
  int size;
  char* data;
};

struct async_icount {
  __u32 cts;
  __u32 dsr;
  __u32 rng;
  __u32 dcd;
  __u32 tx;
  __u32 rx;
  __u32 frame;
  __u32 parity;
  __u32 overrun;
  __u32 brk;
  __u32 buf_overrun;
};

struct kfifo {
  union {
    struct __kfifo kfifo;
    unsigned char* type;
    const unsigned char* const_type;
    char (*rectype)[0];
    void* ptr;
    const void* ptr_const;
  };
  unsigned char buf[0];
};

struct usb_serial;

struct usb_serial_port {
  struct usb_serial* serial;
  struct tty_port port;
  spinlock_t lock;
  u32 minor;
  u8 port_number;
  unsigned char* interrupt_in_buffer;
  struct urb* interrupt_in_urb;
  __u8 interrupt_in_endpointAddress;
  unsigned char* interrupt_out_buffer;
  int interrupt_out_size;
  struct urb* interrupt_out_urb;
  __u8 interrupt_out_endpointAddress;
  unsigned char* bulk_in_buffer;
  int bulk_in_size;
  struct urb* read_urb;
  __u8 bulk_in_endpointAddress;
  unsigned char* bulk_in_buffers[2];
  struct urb* read_urbs[2];
  long unsigned int read_urbs_free;
  unsigned char* bulk_out_buffer;
  int bulk_out_size;
  struct urb* write_urb;
  struct kfifo write_fifo;
  unsigned char* bulk_out_buffers[2];
  struct urb* write_urbs[2];
  long unsigned int write_urbs_free;
  __u8 bulk_out_endpointAddress;
  struct async_icount icount;
  int tx_bytes;
  long unsigned int flags;
  struct work_struct work;
  long unsigned int sysrq;
  struct device dev;
};

struct usb_serial_driver;

struct usb_serial {
  struct usb_device* dev;
  struct usb_serial_driver* type;
  struct usb_interface* interface;
  unsigned char disconnected : 1;
  unsigned char suspending : 1;
  unsigned char attached : 1;
  unsigned char minors_reserved : 1;
  unsigned char num_ports;
  unsigned char num_port_pointers;
  unsigned char num_interrupt_in;
  unsigned char num_interrupt_out;
  unsigned char num_bulk_in;
  unsigned char num_bulk_out;
  struct usb_serial_port* port[16];
  struct kref kref;
  struct mutex disc_mutex;
  void* private;
};

struct usb_serial_endpoints;

struct usb_serial_driver {
  const char* description;
  const struct usb_device_id* id_table;
  struct list_head driver_list;
  struct device_driver driver;
  struct usb_driver* usb_driver;
  struct usb_dynids dynids;
  unsigned char num_ports;
  unsigned char num_bulk_in;
  unsigned char num_bulk_out;
  unsigned char num_interrupt_in;
  unsigned char num_interrupt_out;
  size_t bulk_in_size;
  size_t bulk_out_size;
  int (*probe)(struct usb_serial*, const struct usb_device_id*);
  int (*attach)(struct usb_serial*);
  int (*calc_num_ports)(struct usb_serial*, struct usb_serial_endpoints*);
  void (*disconnect)(struct usb_serial*);
  void (*release)(struct usb_serial*);
  int (*port_probe)(struct usb_serial_port*);
  void (*port_remove)(struct usb_serial_port*);
  int (*suspend)(struct usb_serial*, pm_message_t);
  int (*resume)(struct usb_serial*);
  int (*reset_resume)(struct usb_serial*);
  int (*open)(struct tty_struct*, struct usb_serial_port*);
  void (*close)(struct usb_serial_port*);
  int (*write)(
      struct tty_struct*,
      struct usb_serial_port*,
      const unsigned char*,
      int);
  int (*write_room)(struct tty_struct*);
  int (*ioctl)(struct tty_struct*, unsigned int, long unsigned int);
  int (*get_serial)(struct tty_struct*, struct serial_struct*);
  int (*set_serial)(struct tty_struct*, struct serial_struct*);
  void (*set_termios)(
      struct tty_struct*,
      struct usb_serial_port*,
      struct ktermios*);
  void (*break_ctl)(struct tty_struct*, int);
  int (*chars_in_buffer)(struct tty_struct*);
  void (*wait_until_sent)(struct tty_struct*, long int);
  bool (*tx_empty)(struct usb_serial_port*);
  void (*throttle)(struct tty_struct*);
  void (*unthrottle)(struct tty_struct*);
  int (*tiocmget)(struct tty_struct*);
  int (*tiocmset)(struct tty_struct*, unsigned int, unsigned int);
  int (*tiocmiwait)(struct tty_struct*, long unsigned int);
  int (*get_icount)(struct tty_struct*, struct serial_icounter_struct*);
  void (*dtr_rts)(struct usb_serial_port*, int);
  int (*carrier_raised)(struct usb_serial_port*);
  void (*init_termios)(struct tty_struct*);
  void (*read_int_callback)(struct urb*);
  void (*write_int_callback)(struct urb*);
  void (*read_bulk_callback)(struct urb*);
  void (*write_bulk_callback)(struct urb*);
  void (*process_read_urb)(struct urb*);
  int (*prepare_write_buffer)(struct usb_serial_port*, void*, size_t);
};

struct usb_serial_endpoints {
  unsigned char num_bulk_in;
  unsigned char num_bulk_out;
  unsigned char num_interrupt_in;
  unsigned char num_interrupt_out;
  struct usb_endpoint_descriptor* bulk_in[16];
  struct usb_endpoint_descriptor* bulk_out[16];
  struct usb_endpoint_descriptor* interrupt_in[16];
  struct usb_endpoint_descriptor* interrupt_out[16];
};

struct usbcons_info {
  int magic;
  int break_flag;
  struct usb_serial_port* port;
};

struct ark3116_private {
  int irda;
  struct mutex hw_lock;
  int quot;
  __u32 lcr;
  __u32 hcr;
  __u32 mcr;
  spinlock_t status_lock;
  __u32 msr;
  __u32 lsr;
};

enum pl2303_type {
  TYPE_01 = 0,
  TYPE_HX = 1,
  TYPE_HXN = 2,
  TYPE_COUNT = 3,
};

struct pl2303_type_data {
  speed_t max_baud_rate;
  long unsigned int quirks;
  unsigned int no_autoxonxoff : 1;
  unsigned int no_divisors : 1;
};

struct pl2303_serial_private {
  const struct pl2303_type_data* type;
  long unsigned int quirks;
};

struct pl2303_private {
  spinlock_t lock;
  u8 line_control;
  u8 line_status;
  u8 line_settings[7];
};

struct serio_device_id {
  __u8 type;
  __u8 extra;
  __u8 id;
  __u8 proto;
};

struct serio_driver;

struct serio {
  void* port_data;
  char name[32];
  char phys[32];
  char firmware_id[128];
  bool manual_bind;
  struct serio_device_id id;
  spinlock_t lock;
  int (*write)(struct serio*, unsigned char);
  int (*open)(struct serio*);
  void (*close)(struct serio*);
  int (*start)(struct serio*);
  void (*stop)(struct serio*);
  struct serio* parent;
  struct list_head child_node;
  struct list_head children;
  unsigned int depth;
  struct serio_driver* drv;
  struct mutex drv_mutex;
  struct device dev;
  struct list_head node;
  struct mutex* ps2_cmd_mutex;
};

struct serio_driver {
  const char* description;
  const struct serio_device_id* id_table;
  bool manual_bind;
  void (*write_wakeup)(struct serio*);
  irqreturn_t (*interrupt)(struct serio*, unsigned char, unsigned int);
  int (*connect)(struct serio*, struct serio_driver*);
  int (*reconnect)(struct serio*);
  int (*fast_reconnect)(struct serio*);
  void (*disconnect)(struct serio*);
  void (*cleanup)(struct serio*);
  struct device_driver driver;
};

enum serio_event_type {
  SERIO_RESCAN_PORT = 0,
  SERIO_RECONNECT_PORT = 1,
  SERIO_RECONNECT_SUBTREE = 2,
  SERIO_REGISTER_PORT = 3,
  SERIO_ATTACH_DRIVER = 4,
};

struct serio_event {
  enum serio_event_type type;
  void* object;
  struct module* owner;
  struct list_head node;
};

enum i8042_controller_reset_mode {
  I8042_RESET_NEVER = 0,
  I8042_RESET_ALWAYS = 1,
  I8042_RESET_ON_S2RAM = 2,
};

struct i8042_port {
  struct serio* serio;
  int irq;
  bool exists;
  bool driver_bound;
  signed char mux;
};

struct serport {
  struct tty_struct* tty;
  wait_queue_head_t wait;
  struct serio* serio;
  struct serio_device_id id;
  spinlock_t lock;
  long unsigned int flags;
};

struct ps2dev {
  struct serio* serio;
  struct mutex cmd_mutex;
  wait_queue_head_t wait;
  long unsigned int flags;
  u8 cmdbuf[8];
  u8 cmdcnt;
  u8 nak;
};

struct input_mt_slot {
  int abs[14];
  unsigned int frame;
  unsigned int key;
};

struct input_mt {
  int trkid;
  int num_slots;
  int slot;
  unsigned int flags;
  unsigned int frame;
  int* red;
  struct input_mt_slot slots[0];
};

union input_seq_state {
  struct {
    short unsigned int pos;
    bool mutex_acquired;
  };
  void* p;
};

struct input_devres {
  struct input_dev* input;
};

struct input_event {
  __kernel_ulong_t __sec;
  __kernel_ulong_t __usec;
  __u16 type;
  __u16 code;
  __s32 value;
};

struct input_event_compat {
  compat_ulong_t sec;
  compat_ulong_t usec;
  __u16 type;
  __u16 code;
  __s32 value;
};

struct ff_periodic_effect_compat {
  __u16 waveform;
  __u16 period;
  __s16 magnitude;
  __s16 offset;
  __u16 phase;
  struct ff_envelope envelope;
  __u32 custom_len;
  compat_uptr_t custom_data;
};

struct ff_effect_compat {
  __u16 type;
  __s16 id;
  __u16 direction;
  struct ff_trigger trigger;
  struct ff_replay replay;
  union {
    struct ff_constant_effect constant;
    struct ff_ramp_effect ramp;
    struct ff_periodic_effect_compat periodic;
    struct ff_condition_effect condition[2];
    struct ff_rumble_effect rumble;
  } u;
};

struct input_mt_pos {
  s16 x;
  s16 y;
};

struct input_dev_poller {
  void (*poll)(struct input_dev*);
  unsigned int poll_interval;
  unsigned int poll_interval_max;
  unsigned int poll_interval_min;
  struct input_dev* input;
  struct delayed_work work;
};

struct atkbd {
  struct ps2dev ps2dev;
  struct input_dev* dev;
  char name[64];
  char phys[32];
  short unsigned int id;
  short unsigned int keycode[512];
  long unsigned int force_release_mask[8];
  unsigned char set;
  bool translated;
  bool extra;
  bool write;
  bool softrepeat;
  bool softraw;
  bool scroll;
  bool enabled;
  unsigned char emul;
  bool resend;
  bool release;
  long unsigned int xl_bit;
  unsigned int last;
  long unsigned int time;
  long unsigned int err_count;
  struct delayed_work event_work;
  long unsigned int event_jiffies;
  long unsigned int event_mask;
  struct mutex mutex;
  u32 function_row_physmap[24];
  int num_function_row_keys;
};

struct trace_event_raw_rtc_time_alarm_class {
  struct trace_entry ent;
  time64_t secs;
  int err;
  char __data[0];
};

struct trace_event_raw_rtc_irq_set_freq {
  struct trace_entry ent;
  int freq;
  int err;
  char __data[0];
};

struct trace_event_raw_rtc_irq_set_state {
  struct trace_entry ent;
  int enabled;
  int err;
  char __data[0];
};

struct trace_event_raw_rtc_alarm_irq_enable {
  struct trace_entry ent;
  unsigned int enabled;
  int err;
  char __data[0];
};

struct trace_event_raw_rtc_offset_class {
  struct trace_entry ent;
  long int offset;
  int err;
  char __data[0];
};

struct trace_event_raw_rtc_timer_class {
  struct trace_entry ent;
  struct rtc_timer* timer;
  ktime_t expires;
  ktime_t period;
  char __data[0];
};

struct trace_event_data_offsets_rtc_time_alarm_class {};

struct trace_event_data_offsets_rtc_irq_set_freq {};

struct trace_event_data_offsets_rtc_irq_set_state {};

struct trace_event_data_offsets_rtc_alarm_irq_enable {};

struct trace_event_data_offsets_rtc_offset_class {};

struct trace_event_data_offsets_rtc_timer_class {};

typedef void (*btf_trace_rtc_set_time)(void*, time64_t, int);

typedef void (*btf_trace_rtc_read_time)(void*, time64_t, int);

typedef void (*btf_trace_rtc_set_alarm)(void*, time64_t, int);

typedef void (*btf_trace_rtc_read_alarm)(void*, time64_t, int);

typedef void (*btf_trace_rtc_irq_set_freq)(void*, int, int);

typedef void (*btf_trace_rtc_irq_set_state)(void*, int, int);

typedef void (*btf_trace_rtc_alarm_irq_enable)(void*, unsigned int, int);

typedef void (*btf_trace_rtc_set_offset)(void*, long int, int);

typedef void (*btf_trace_rtc_read_offset)(void*, long int, int);

typedef void (*btf_trace_rtc_timer_enqueue)(void*, struct rtc_timer*);

typedef void (*btf_trace_rtc_timer_dequeue)(void*, struct rtc_timer*);

typedef void (*btf_trace_rtc_timer_fired)(void*, struct rtc_timer*);

enum {
  none = 0,
  day = 1,
  month = 2,
  year = 3,
};

struct nvmem_cell_info {
  const char* name;
  unsigned int offset;
  unsigned int bytes;
  unsigned int bit_offset;
  unsigned int nbits;
};

typedef int (*nvmem_reg_read_t)(void*, unsigned int, void*, size_t);

typedef int (*nvmem_reg_write_t)(void*, unsigned int, void*, size_t);

enum nvmem_type {
  NVMEM_TYPE_UNKNOWN = 0,
  NVMEM_TYPE_EEPROM = 1,
  NVMEM_TYPE_OTP = 2,
  NVMEM_TYPE_BATTERY_BACKED = 3,
};

struct nvmem_keepout {
  unsigned int start;
  unsigned int end;
  unsigned char value;
};

struct nvmem_config {
  struct device* dev;
  const char* name;
  int id;
  struct module* owner;
  struct gpio_desc* wp_gpio;
  const struct nvmem_cell_info* cells;
  int ncells;
  const struct nvmem_keepout* keepout;
  unsigned int nkeepout;
  enum nvmem_type type;
  bool read_only;
  bool root_only;
  bool no_of_node;
  nvmem_reg_read_t reg_read;
  nvmem_reg_write_t reg_write;
  int size;
  int word_size;
  int stride;
  void* priv;
  bool compat;
  struct device* base_dev;
};

struct nvmem_device;

struct cmos_rtc_board_info {
  void (*wake_on)(struct device*);
  void (*wake_off)(struct device*);
  u32 flags;
  int address_space;
  u8 rtc_day_alarm;
  u8 rtc_mon_alarm;
  u8 rtc_century;
};

struct cmos_rtc {
  struct rtc_device* rtc;
  struct device* dev;
  int irq;
  struct resource* iomem;
  time64_t alarm_expires;
  void (*wake_on)(struct device*);
  void (*wake_off)(struct device*);
  u8 enabled_wake;
  u8 suspend_ctrl;
  u8 day_alrm;
  u8 mon_alrm;
  u8 century;
  struct rtc_wkalrm saved_wkalrm;
};

struct i2c_devinfo {
  struct list_head list;
  int busnum;
  struct i2c_board_info board_info;
};

struct i2c_device_id {
  char name[20];
  kernel_ulong_t driver_data;
};

struct i2c_device_identity {
  u16 manufacturer_id;
  u16 part_id;
  u8 die_revision;
};

enum i2c_alert_protocol {
  I2C_PROTOCOL_SMBUS_ALERT = 0,
  I2C_PROTOCOL_SMBUS_HOST_NOTIFY = 1,
};

struct i2c_driver {
  unsigned int class;
  int (*probe)(struct i2c_client*, const struct i2c_device_id*);
  int (*remove)(struct i2c_client*);
  int (*probe_new)(struct i2c_client*);
  void (*shutdown)(struct i2c_client*);
  void (*alert)(struct i2c_client*, enum i2c_alert_protocol, unsigned int);
  int (*command)(struct i2c_client*, unsigned int, void*);
  struct device_driver driver;
  const struct i2c_device_id* id_table;
  int (*detect)(struct i2c_client*, struct i2c_board_info*);
  const short unsigned int* address_list;
  struct list_head clients;
};

struct i2c_timings {
  u32 bus_freq_hz;
  u32 scl_rise_ns;
  u32 scl_fall_ns;
  u32 scl_int_delay_ns;
  u32 sda_fall_ns;
  u32 sda_hold_ns;
  u32 digital_filter_width_ns;
  u32 analog_filter_cutoff_freq_hz;
};

struct trace_event_raw_i2c_write {
  struct trace_entry ent;
  int adapter_nr;
  __u16 msg_nr;
  __u16 addr;
  __u16 flags;
  __u16 len;
  u32 __data_loc_buf;
  char __data[0];
};

struct trace_event_raw_i2c_read {
  struct trace_entry ent;
  int adapter_nr;
  __u16 msg_nr;
  __u16 addr;
  __u16 flags;
  __u16 len;
  char __data[0];
};

struct trace_event_raw_i2c_reply {
  struct trace_entry ent;
  int adapter_nr;
  __u16 msg_nr;
  __u16 addr;
  __u16 flags;
  __u16 len;
  u32 __data_loc_buf;
  char __data[0];
};

struct trace_event_raw_i2c_result {
  struct trace_entry ent;
  int adapter_nr;
  __u16 nr_msgs;
  __s16 ret;
  char __data[0];
};

struct trace_event_data_offsets_i2c_write {
  u32 buf;
};

struct trace_event_data_offsets_i2c_read {};

struct trace_event_data_offsets_i2c_reply {
  u32 buf;
};

struct trace_event_data_offsets_i2c_result {};

typedef void (*btf_trace_i2c_write)(
    void*,
    const struct i2c_adapter*,
    const struct i2c_msg*,
    int);

typedef void (*btf_trace_i2c_read)(
    void*,
    const struct i2c_adapter*,
    const struct i2c_msg*,
    int);

typedef void (*btf_trace_i2c_reply)(
    void*,
    const struct i2c_adapter*,
    const struct i2c_msg*,
    int);

typedef void (
    *btf_trace_i2c_result)(void*, const struct i2c_adapter*, int, int);

struct i2c_dummy_devres {
  struct i2c_client* client;
};

struct class_compat___2;

struct i2c_cmd_arg {
  unsigned int cmd;
  void* arg;
};

struct i2c_smbus_alert_setup {
  int irq;
};

struct trace_event_raw_smbus_write {
  struct trace_entry ent;
  int adapter_nr;
  __u16 addr;
  __u16 flags;
  __u8 command;
  __u8 len;
  __u32 protocol;
  __u8 buf[34];
  char __data[0];
};

struct trace_event_raw_smbus_read {
  struct trace_entry ent;
  int adapter_nr;
  __u16 flags;
  __u16 addr;
  __u8 command;
  __u32 protocol;
  __u8 buf[34];
  char __data[0];
};

struct trace_event_raw_smbus_reply {
  struct trace_entry ent;
  int adapter_nr;
  __u16 addr;
  __u16 flags;
  __u8 command;
  __u8 len;
  __u32 protocol;
  __u8 buf[34];
  char __data[0];
};

struct trace_event_raw_smbus_result {
  struct trace_entry ent;
  int adapter_nr;
  __u16 addr;
  __u16 flags;
  __u8 read_write;
  __u8 command;
  __s16 res;
  __u32 protocol;
  char __data[0];
};

struct trace_event_data_offsets_smbus_write {};

struct trace_event_data_offsets_smbus_read {};

struct trace_event_data_offsets_smbus_reply {};

struct trace_event_data_offsets_smbus_result {};

typedef void (*btf_trace_smbus_write)(
    void*,
    const struct i2c_adapter*,
    u16,
    short unsigned int,
    char,
    u8,
    int,
    const union i2c_smbus_data*);

typedef void (*btf_trace_smbus_read)(
    void*,
    const struct i2c_adapter*,
    u16,
    short unsigned int,
    char,
    u8,
    int);

typedef void (*btf_trace_smbus_reply)(
    void*,
    const struct i2c_adapter*,
    u16,
    short unsigned int,
    char,
    u8,
    int,
    const union i2c_smbus_data*,
    int);

typedef void (*btf_trace_smbus_result)(
    void*,
    const struct i2c_adapter*,
    u16,
    short unsigned int,
    char,
    u8,
    int,
    int);

struct i2c_acpi_lookup {
  struct i2c_board_info* info;
  acpi_handle adapter_handle;
  acpi_handle device_handle;
  acpi_handle search_handle;
  int n;
  int index;
  u32 speed;
  u32 min_speed;
  u32 force_speed;
};

struct pps_ktime {
  __s64 sec;
  __s32 nsec;
  __u32 flags;
};

struct pps_ktime_compat {
  __s64 sec;
  __s32 nsec;
  __u32 flags;
};

struct pps_kinfo {
  __u32 assert_sequence;
  __u32 clear_sequence;
  struct pps_ktime assert_tu;
  struct pps_ktime clear_tu;
  int current_mode;
};

struct pps_kinfo_compat {
  __u32 assert_sequence;
  __u32 clear_sequence;
  struct pps_ktime_compat assert_tu;
  struct pps_ktime_compat clear_tu;
  int current_mode;
} __attribute__((packed));

struct pps_kparams {
  int api_version;
  int mode;
  struct pps_ktime assert_off_tu;
  struct pps_ktime clear_off_tu;
};

struct pps_fdata {
  struct pps_kinfo info;
  struct pps_ktime timeout;
};

struct pps_fdata_compat {
  struct pps_kinfo_compat info;
  struct pps_ktime_compat timeout;
} __attribute__((packed));

struct pps_bind_args {
  int tsformat;
  int edge;
  int consumer;
};

struct pps_device;

struct pps_source_info {
  char name[32];
  char path[32];
  int mode;
  void (*echo)(struct pps_device*, int, void*);
  struct module* owner;
  struct device* dev;
};

struct pps_device {
  struct pps_source_info info;
  struct pps_kparams params;
  __u32 assert_sequence;
  __u32 clear_sequence;
  struct pps_ktime assert_tu;
  struct pps_ktime clear_tu;
  int current_mode;
  unsigned int last_ev;
  wait_queue_head_t queue;
  unsigned int id;
  const void* lookup_cookie;
  struct cdev cdev;
  struct device* dev;
  struct fasync_struct* async_queue;
  spinlock_t lock;
};

struct ptp_extts_event {
  struct ptp_clock_time t;
  unsigned int index;
  unsigned int flags;
  unsigned int rsv[2];
};

struct timestamp_event_queue {
  struct ptp_extts_event buf[128];
  int head;
  int tail;
  spinlock_t lock;
};

struct ptp_clock___2 {
  struct posix_clock clock;
  struct device dev;
  struct ptp_clock_info* info;
  dev_t devid;
  int index;
  struct pps_device* pps_source;
  long int dialed_frequency;
  struct timestamp_event_queue tsevq;
  struct mutex tsevq_mux;
  struct mutex pincfg_mux;
  wait_queue_head_t tsev_wq;
  int defunct;
  struct device_attribute* pin_dev_attr;
  struct attribute** pin_attr;
  struct attribute_group pin_attr_group;
  const struct attribute_group* pin_attr_groups[2];
  struct kthread_worker* kworker;
  struct kthread_delayed_work aux_work;
};

struct ptp_clock_caps {
  int max_adj;
  int n_alarm;
  int n_ext_ts;
  int n_per_out;
  int pps;
  int n_pins;
  int cross_timestamping;
  int adjust_phase;
  int rsv[12];
};

struct ptp_sys_offset {
  unsigned int n_samples;
  unsigned int rsv[3];
  struct ptp_clock_time ts[51];
};

struct ptp_sys_offset_extended {
  unsigned int n_samples;
  unsigned int rsv[3];
  struct ptp_clock_time ts[75];
};

struct ptp_sys_offset_precise {
  struct ptp_clock_time device;
  struct ptp_clock_time sys_realtime;
  struct ptp_clock_time sys_monoraw;
  unsigned int rsv[4];
};

enum power_supply_property {
  POWER_SUPPLY_PROP_STATUS = 0,
  POWER_SUPPLY_PROP_CHARGE_TYPE = 1,
  POWER_SUPPLY_PROP_HEALTH = 2,
  POWER_SUPPLY_PROP_PRESENT = 3,
  POWER_SUPPLY_PROP_ONLINE = 4,
  POWER_SUPPLY_PROP_AUTHENTIC = 5,
  POWER_SUPPLY_PROP_TECHNOLOGY = 6,
  POWER_SUPPLY_PROP_CYCLE_COUNT = 7,
  POWER_SUPPLY_PROP_VOLTAGE_MAX = 8,
  POWER_SUPPLY_PROP_VOLTAGE_MIN = 9,
  POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN = 10,
  POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN = 11,
  POWER_SUPPLY_PROP_VOLTAGE_NOW = 12,
  POWER_SUPPLY_PROP_VOLTAGE_AVG = 13,
  POWER_SUPPLY_PROP_VOLTAGE_OCV = 14,
  POWER_SUPPLY_PROP_VOLTAGE_BOOT = 15,
  POWER_SUPPLY_PROP_CURRENT_MAX = 16,
  POWER_SUPPLY_PROP_CURRENT_NOW = 17,
  POWER_SUPPLY_PROP_CURRENT_AVG = 18,
  POWER_SUPPLY_PROP_CURRENT_BOOT = 19,
  POWER_SUPPLY_PROP_POWER_NOW = 20,
  POWER_SUPPLY_PROP_POWER_AVG = 21,
  POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN = 22,
  POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN = 23,
  POWER_SUPPLY_PROP_CHARGE_FULL = 24,
  POWER_SUPPLY_PROP_CHARGE_EMPTY = 25,
  POWER_SUPPLY_PROP_CHARGE_NOW = 26,
  POWER_SUPPLY_PROP_CHARGE_AVG = 27,
  POWER_SUPPLY_PROP_CHARGE_COUNTER = 28,
  POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT = 29,
  POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX = 30,
  POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE = 31,
  POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX = 32,
  POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT = 33,
  POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX = 34,
  POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD = 35,
  POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD = 36,
  POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT = 37,
  POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT = 38,
  POWER_SUPPLY_PROP_INPUT_POWER_LIMIT = 39,
  POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN = 40,
  POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN = 41,
  POWER_SUPPLY_PROP_ENERGY_FULL = 42,
  POWER_SUPPLY_PROP_ENERGY_EMPTY = 43,
  POWER_SUPPLY_PROP_ENERGY_NOW = 44,
  POWER_SUPPLY_PROP_ENERGY_AVG = 45,
  POWER_SUPPLY_PROP_CAPACITY = 46,
  POWER_SUPPLY_PROP_CAPACITY_ALERT_MIN = 47,
  POWER_SUPPLY_PROP_CAPACITY_ALERT_MAX = 48,
  POWER_SUPPLY_PROP_CAPACITY_ERROR_MARGIN = 49,
  POWER_SUPPLY_PROP_CAPACITY_LEVEL = 50,
  POWER_SUPPLY_PROP_TEMP = 51,
  POWER_SUPPLY_PROP_TEMP_MAX = 52,
  POWER_SUPPLY_PROP_TEMP_MIN = 53,
  POWER_SUPPLY_PROP_TEMP_ALERT_MIN = 54,
  POWER_SUPPLY_PROP_TEMP_ALERT_MAX = 55,
  POWER_SUPPLY_PROP_TEMP_AMBIENT = 56,
  POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MIN = 57,
  POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MAX = 58,
  POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW = 59,
  POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG = 60,
  POWER_SUPPLY_PROP_TIME_TO_FULL_NOW = 61,
  POWER_SUPPLY_PROP_TIME_TO_FULL_AVG = 62,
  POWER_SUPPLY_PROP_TYPE = 63,
  POWER_SUPPLY_PROP_USB_TYPE = 64,
  POWER_SUPPLY_PROP_SCOPE = 65,
  POWER_SUPPLY_PROP_PRECHARGE_CURRENT = 66,
  POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT = 67,
  POWER_SUPPLY_PROP_CALIBRATE = 68,
  POWER_SUPPLY_PROP_MANUFACTURE_YEAR = 69,
  POWER_SUPPLY_PROP_MANUFACTURE_MONTH = 70,
  POWER_SUPPLY_PROP_MANUFACTURE_DAY = 71,
  POWER_SUPPLY_PROP_MODEL_NAME = 72,
  POWER_SUPPLY_PROP_MANUFACTURER = 73,
  POWER_SUPPLY_PROP_SERIAL_NUMBER = 74,
};

enum power_supply_type {
  POWER_SUPPLY_TYPE_UNKNOWN = 0,
  POWER_SUPPLY_TYPE_BATTERY = 1,
  POWER_SUPPLY_TYPE_UPS = 2,
  POWER_SUPPLY_TYPE_MAINS = 3,
  POWER_SUPPLY_TYPE_USB = 4,
  POWER_SUPPLY_TYPE_USB_DCP = 5,
  POWER_SUPPLY_TYPE_USB_CDP = 6,
  POWER_SUPPLY_TYPE_USB_ACA = 7,
  POWER_SUPPLY_TYPE_USB_TYPE_C = 8,
  POWER_SUPPLY_TYPE_USB_PD = 9,
  POWER_SUPPLY_TYPE_USB_PD_DRP = 10,
  POWER_SUPPLY_TYPE_APPLE_BRICK_ID = 11,
  POWER_SUPPLY_TYPE_WIRELESS = 12,
};

enum power_supply_usb_type {
  POWER_SUPPLY_USB_TYPE_UNKNOWN = 0,
  POWER_SUPPLY_USB_TYPE_SDP = 1,
  POWER_SUPPLY_USB_TYPE_DCP = 2,
  POWER_SUPPLY_USB_TYPE_CDP = 3,
  POWER_SUPPLY_USB_TYPE_ACA = 4,
  POWER_SUPPLY_USB_TYPE_C = 5,
  POWER_SUPPLY_USB_TYPE_PD = 6,
  POWER_SUPPLY_USB_TYPE_PD_DRP = 7,
  POWER_SUPPLY_USB_TYPE_PD_PPS = 8,
  POWER_SUPPLY_USB_TYPE_APPLE_BRICK_ID = 9,
};

enum power_supply_notifier_events {
  PSY_EVENT_PROP_CHANGED = 0,
};

union power_supply_propval {
  int intval;
  const char* strval;
};

struct power_supply_config {
  struct device_node* of_node;
  struct fwnode_handle* fwnode;
  void* drv_data;
  const struct attribute_group** attr_grp;
  char** supplied_to;
  size_t num_supplicants;
};

struct power_supply;

struct power_supply_desc {
  const char* name;
  enum power_supply_type type;
  const enum power_supply_usb_type* usb_types;
  size_t num_usb_types;
  const enum power_supply_property* properties;
  size_t num_properties;
  int (*get_property)(
      struct power_supply*,
      enum power_supply_property,
      union power_supply_propval*);
  int (*set_property)(
      struct power_supply*,
      enum power_supply_property,
      const union power_supply_propval*);
  int (
      *property_is_writeable)(struct power_supply*, enum power_supply_property);
  void (*external_power_changed)(struct power_supply*);
  void (*set_charged)(struct power_supply*);
  bool no_thermal;
  int use_for_apm;
};

struct power_supply {
  const struct power_supply_desc* desc;
  char** supplied_to;
  size_t num_supplicants;
  char** supplied_from;
  size_t num_supplies;
  struct device_node* of_node;
  void* drv_data;
  struct device dev;
  struct work_struct changed_work;
  struct delayed_work deferred_register_work;
  spinlock_t changed_lock;
  bool changed;
  bool initialized;
  bool removing;
  atomic_t use_cnt;
  struct thermal_zone_device* tzd;
  struct thermal_cooling_device* tcd;
};

struct power_supply_battery_ocv_table {
  int ocv;
  int capacity;
};

struct power_supply_resistance_temp_table {
  int temp;
  int resistance;
};

struct power_supply_battery_info {
  int energy_full_design_uwh;
  int charge_full_design_uah;
  int voltage_min_design_uv;
  int voltage_max_design_uv;
  int tricklecharge_current_ua;
  int precharge_current_ua;
  int precharge_voltage_max_uv;
  int charge_term_current_ua;
  int charge_restart_voltage_uv;
  int overvoltage_limit_uv;
  int constant_charge_current_max_ua;
  int constant_charge_voltage_max_uv;
  int factory_internal_resistance_uohm;
  int ocv_temp[20];
  int temp_ambient_alert_min;
  int temp_ambient_alert_max;
  int temp_alert_min;
  int temp_alert_max;
  int temp_min;
  int temp_max;
  struct power_supply_battery_ocv_table* ocv_table[20];
  int ocv_table_size[20];
  struct power_supply_resistance_temp_table* resist_table;
  int resist_table_size;
};

struct psy_am_i_supplied_data {
  struct power_supply* psy;
  unsigned int count;
};

enum {
  POWER_SUPPLY_STATUS_UNKNOWN = 0,
  POWER_SUPPLY_STATUS_CHARGING = 1,
  POWER_SUPPLY_STATUS_DISCHARGING = 2,
  POWER_SUPPLY_STATUS_NOT_CHARGING = 3,
  POWER_SUPPLY_STATUS_FULL = 4,
};

enum {
  POWER_SUPPLY_CHARGE_TYPE_UNKNOWN = 0,
  POWER_SUPPLY_CHARGE_TYPE_NONE = 1,
  POWER_SUPPLY_CHARGE_TYPE_TRICKLE = 2,
  POWER_SUPPLY_CHARGE_TYPE_FAST = 3,
  POWER_SUPPLY_CHARGE_TYPE_STANDARD = 4,
  POWER_SUPPLY_CHARGE_TYPE_ADAPTIVE = 5,
  POWER_SUPPLY_CHARGE_TYPE_CUSTOM = 6,
  POWER_SUPPLY_CHARGE_TYPE_LONGLIFE = 7,
};

enum {
  POWER_SUPPLY_HEALTH_UNKNOWN = 0,
  POWER_SUPPLY_HEALTH_GOOD = 1,
  POWER_SUPPLY_HEALTH_OVERHEAT = 2,
  POWER_SUPPLY_HEALTH_DEAD = 3,
  POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4,
  POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5,
  POWER_SUPPLY_HEALTH_COLD = 6,
  POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7,
  POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8,
  POWER_SUPPLY_HEALTH_OVERCURRENT = 9,
  POWER_SUPPLY_HEALTH_CALIBRATION_REQUIRED = 10,
  POWER_SUPPLY_HEALTH_WARM = 11,
  POWER_SUPPLY_HEALTH_COOL = 12,
  POWER_SUPPLY_HEALTH_HOT = 13,
};

enum {
  POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0,
  POWER_SUPPLY_TECHNOLOGY_NiMH = 1,
  POWER_SUPPLY_TECHNOLOGY_LION = 2,
  POWER_SUPPLY_TECHNOLOGY_LIPO = 3,
  POWER_SUPPLY_TECHNOLOGY_LiFe = 4,
  POWER_SUPPLY_TECHNOLOGY_NiCd = 5,
  POWER_SUPPLY_TECHNOLOGY_LiMn = 6,
};

enum {
  POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN = 0,
  POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL = 1,
  POWER_SUPPLY_CAPACITY_LEVEL_LOW = 2,
  POWER_SUPPLY_CAPACITY_LEVEL_NORMAL = 3,
  POWER_SUPPLY_CAPACITY_LEVEL_HIGH = 4,
  POWER_SUPPLY_CAPACITY_LEVEL_FULL = 5,
};

enum {
  POWER_SUPPLY_SCOPE_UNKNOWN = 0,
  POWER_SUPPLY_SCOPE_SYSTEM = 1,
  POWER_SUPPLY_SCOPE_DEVICE = 2,
};

struct power_supply_attr {
  const char* prop_name;
  char attr_name[31];
  struct device_attribute dev_attr;
  const char* const* text_values;
  int text_values_len;
};

enum hwmon_sensor_types {
  hwmon_chip = 0,
  hwmon_temp = 1,
  hwmon_in = 2,
  hwmon_curr = 3,
  hwmon_power = 4,
  hwmon_energy = 5,
  hwmon_humidity = 6,
  hwmon_fan = 7,
  hwmon_pwm = 8,
  hwmon_intrusion = 9,
  hwmon_max = 10,
};

enum hwmon_temp_attributes {
  hwmon_temp_enable = 0,
  hwmon_temp_input = 1,
  hwmon_temp_type = 2,
  hwmon_temp_lcrit = 3,
  hwmon_temp_lcrit_hyst = 4,
  hwmon_temp_min = 5,
  hwmon_temp_min_hyst = 6,
  hwmon_temp_max = 7,
  hwmon_temp_max_hyst = 8,
  hwmon_temp_crit = 9,
  hwmon_temp_crit_hyst = 10,
  hwmon_temp_emergency = 11,
  hwmon_temp_emergency_hyst = 12,
  hwmon_temp_alarm = 13,
  hwmon_temp_lcrit_alarm = 14,
  hwmon_temp_min_alarm = 15,
  hwmon_temp_max_alarm = 16,
  hwmon_temp_crit_alarm = 17,
  hwmon_temp_emergency_alarm = 18,
  hwmon_temp_fault = 19,
  hwmon_temp_offset = 20,
  hwmon_temp_label = 21,
  hwmon_temp_lowest = 22,
  hwmon_temp_highest = 23,
  hwmon_temp_reset_history = 24,
  hwmon_temp_rated_min = 25,
  hwmon_temp_rated_max = 26,
};

enum hwmon_in_attributes {
  hwmon_in_enable = 0,
  hwmon_in_input = 1,
  hwmon_in_min = 2,
  hwmon_in_max = 3,
  hwmon_in_lcrit = 4,
  hwmon_in_crit = 5,
  hwmon_in_average = 6,
  hwmon_in_lowest = 7,
  hwmon_in_highest = 8,
  hwmon_in_reset_history = 9,
  hwmon_in_label = 10,
  hwmon_in_alarm = 11,
  hwmon_in_min_alarm = 12,
  hwmon_in_max_alarm = 13,
  hwmon_in_lcrit_alarm = 14,
  hwmon_in_crit_alarm = 15,
  hwmon_in_rated_min = 16,
  hwmon_in_rated_max = 17,
};

enum hwmon_curr_attributes {
  hwmon_curr_enable = 0,
  hwmon_curr_input = 1,
  hwmon_curr_min = 2,
  hwmon_curr_max = 3,
  hwmon_curr_lcrit = 4,
  hwmon_curr_crit = 5,
  hwmon_curr_average = 6,
  hwmon_curr_lowest = 7,
  hwmon_curr_highest = 8,
  hwmon_curr_reset_history = 9,
  hwmon_curr_label = 10,
  hwmon_curr_alarm = 11,
  hwmon_curr_min_alarm = 12,
  hwmon_curr_max_alarm = 13,
  hwmon_curr_lcrit_alarm = 14,
  hwmon_curr_crit_alarm = 15,
  hwmon_curr_rated_min = 16,
  hwmon_curr_rated_max = 17,
};

struct hwmon_ops {
  umode_t (*is_visible)(const void*, enum hwmon_sensor_types, u32, int);
  int (*read)(struct device*, enum hwmon_sensor_types, u32, int, long int*);
  int (*read_string)(
      struct device*,
      enum hwmon_sensor_types,
      u32,
      int,
      const char**);
  int (*write)(struct device*, enum hwmon_sensor_types, u32, int, long int);
};

struct hwmon_channel_info {
  enum hwmon_sensor_types type;
  const u32* config;
};

struct hwmon_chip_info {
  const struct hwmon_ops* ops;
  const struct hwmon_channel_info** info;
};

struct power_supply_hwmon {
  struct power_supply* psy;
  long unsigned int* props;
};

struct hwmon_type_attr_list {
  const u32* attrs;
  size_t n_attrs;
};

enum hwmon_chip_attributes {
  hwmon_chip_temp_reset_history = 0,
  hwmon_chip_in_reset_history = 1,
  hwmon_chip_curr_reset_history = 2,
  hwmon_chip_power_reset_history = 3,
  hwmon_chip_register_tz = 4,
  hwmon_chip_update_interval = 5,
  hwmon_chip_alarms = 6,
  hwmon_chip_samples = 7,
  hwmon_chip_curr_samples = 8,
  hwmon_chip_in_samples = 9,
  hwmon_chip_power_samples = 10,
  hwmon_chip_temp_samples = 11,
};

enum hwmon_power_attributes {
  hwmon_power_enable = 0,
  hwmon_power_average = 1,
  hwmon_power_average_interval = 2,
  hwmon_power_average_interval_max = 3,
  hwmon_power_average_interval_min = 4,
  hwmon_power_average_highest = 5,
  hwmon_power_average_lowest = 6,
  hwmon_power_average_max = 7,
  hwmon_power_average_min = 8,
  hwmon_power_input = 9,
  hwmon_power_input_highest = 10,
  hwmon_power_input_lowest = 11,
  hwmon_power_reset_history = 12,
  hwmon_power_accuracy = 13,
  hwmon_power_cap = 14,
  hwmon_power_cap_hyst = 15,
  hwmon_power_cap_max = 16,
  hwmon_power_cap_min = 17,
  hwmon_power_min = 18,
  hwmon_power_max = 19,
  hwmon_power_crit = 20,
  hwmon_power_lcrit = 21,
  hwmon_power_label = 22,
  hwmon_power_alarm = 23,
  hwmon_power_cap_alarm = 24,
  hwmon_power_min_alarm = 25,
  hwmon_power_max_alarm = 26,
  hwmon_power_lcrit_alarm = 27,
  hwmon_power_crit_alarm = 28,
  hwmon_power_rated_min = 29,
  hwmon_power_rated_max = 30,
};

enum hwmon_energy_attributes {
  hwmon_energy_enable = 0,
  hwmon_energy_input = 1,
  hwmon_energy_label = 2,
};

enum hwmon_humidity_attributes {
  hwmon_humidity_enable = 0,
  hwmon_humidity_input = 1,
  hwmon_humidity_label = 2,
  hwmon_humidity_min = 3,
  hwmon_humidity_min_hyst = 4,
  hwmon_humidity_max = 5,
  hwmon_humidity_max_hyst = 6,
  hwmon_humidity_alarm = 7,
  hwmon_humidity_fault = 8,
  hwmon_humidity_rated_min = 9,
  hwmon_humidity_rated_max = 10,
};

enum hwmon_fan_attributes {
  hwmon_fan_enable = 0,
  hwmon_fan_input = 1,
  hwmon_fan_label = 2,
  hwmon_fan_min = 3,
  hwmon_fan_max = 4,
  hwmon_fan_div = 5,
  hwmon_fan_pulses = 6,
  hwmon_fan_target = 7,
  hwmon_fan_alarm = 8,
  hwmon_fan_min_alarm = 9,
  hwmon_fan_max_alarm = 10,
  hwmon_fan_fault = 11,
};

enum hwmon_pwm_attributes {
  hwmon_pwm_input = 0,
  hwmon_pwm_enable = 1,
  hwmon_pwm_mode = 2,
  hwmon_pwm_freq = 3,
};

enum hwmon_intrusion_attributes {
  hwmon_intrusion_alarm = 0,
  hwmon_intrusion_beep = 1,
};

struct trace_event_raw_hwmon_attr_class {
  struct trace_entry ent;
  int index;
  u32 __data_loc_attr_name;
  long int val;
  char __data[0];
};

struct trace_event_raw_hwmon_attr_show_string {
  struct trace_entry ent;
  int index;
  u32 __data_loc_attr_name;
  u32 __data_loc_label;
  char __data[0];
};

struct trace_event_data_offsets_hwmon_attr_class {
  u32 attr_name;
};

struct trace_event_data_offsets_hwmon_attr_show_string {
  u32 attr_name;
  u32 label;
};

typedef void (*btf_trace_hwmon_attr_show)(void*, int, const char*, long int);

typedef void (*btf_trace_hwmon_attr_store)(void*, int, const char*, long int);

typedef void (
    *btf_trace_hwmon_attr_show_string)(void*, int, const char*, const char*);

struct hwmon_device {
  const char* name;
  struct device dev;
  const struct hwmon_chip_info* chip;
  struct list_head tzdata;
  struct attribute_group group;
  const struct attribute_group** groups;
};

struct hwmon_device_attribute {
  struct device_attribute dev_attr;
  const struct hwmon_ops* ops;
  enum hwmon_sensor_types type;
  u32 attr;
  int index;
  char name[32];
};

struct thermal_attr {
  struct device_attribute attr;
  char name[20];
};

struct trace_event_raw_thermal_temperature {
  struct trace_entry ent;
  u32 __data_loc_thermal_zone;
  int id;
  int temp_prev;
  int temp;
  char __data[0];
};

struct trace_event_raw_cdev_update {
  struct trace_entry ent;
  u32 __data_loc_type;
  long unsigned int target;
  char __data[0];
};

struct trace_event_raw_thermal_zone_trip {
  struct trace_entry ent;
  u32 __data_loc_thermal_zone;
  int id;
  int trip;
  enum thermal_trip_type trip_type;
  char __data[0];
};

struct trace_event_data_offsets_thermal_temperature {
  u32 thermal_zone;
};

struct trace_event_data_offsets_cdev_update {
  u32 type;
};

struct trace_event_data_offsets_thermal_zone_trip {
  u32 thermal_zone;
};

typedef void (
    *btf_trace_thermal_temperature)(void*, struct thermal_zone_device*);

typedef void (*btf_trace_cdev_update)(
    void*,
    struct thermal_cooling_device*,
    long unsigned int);

typedef void (*btf_trace_thermal_zone_trip)(
    void*,
    struct thermal_zone_device*,
    int,
    enum thermal_trip_type);

struct thermal_instance {
  int id;
  char name[20];
  struct thermal_zone_device* tz;
  struct thermal_cooling_device* cdev;
  int trip;
  bool initialized;
  long unsigned int upper;
  long unsigned int lower;
  long unsigned int target;
  char attr_name[20];
  struct device_attribute attr;
  char weight_attr_name[20];
  struct device_attribute weight_attr;
  struct list_head tz_node;
  struct list_head cdev_node;
  unsigned int weight;
};

struct thermal_hwmon_device {
  char type[20];
  struct device* device;
  int count;
  struct list_head tz_list;
  struct list_head node;
};

struct thermal_hwmon_attr {
  struct device_attribute attr;
  char name[16];
};

struct thermal_hwmon_temp {
  struct list_head hwmon_node;
  struct thermal_zone_device* tz;
  struct thermal_hwmon_attr temp_input;
  struct thermal_hwmon_attr temp_crit;
};

struct _thermal_state {
  u64 next_check;
  u64 last_interrupt_time;
  struct delayed_work therm_work;
  long unsigned int count;
  long unsigned int last_count;
  long unsigned int max_time_ms;
  long unsigned int total_time_ms;
  bool rate_control_active;
  bool new_event;
  u8 level;
  u8 sample_index;
  u8 sample_count;
  u8 average;
  u8 baseline_temp;
  u8 temp_samples[3];
};

struct thermal_state {
  struct _thermal_state core_throttle;
  struct _thermal_state core_power_limit;
  struct _thermal_state package_throttle;
  struct _thermal_state package_power_limit;
  struct _thermal_state core_thresh0;
  struct _thermal_state core_thresh1;
  struct _thermal_state pkg_thresh0;
  struct _thermal_state pkg_thresh1;
};

struct watchdog_info {
  __u32 options;
  __u32 firmware_version;
  __u8 identity[32];
};

struct watchdog_device;

struct watchdog_ops {
  struct module* owner;
  int (*start)(struct watchdog_device*);
  int (*stop)(struct watchdog_device*);
  int (*ping)(struct watchdog_device*);
  unsigned int (*status)(struct watchdog_device*);
  int (*set_timeout)(struct watchdog_device*, unsigned int);
  int (*set_pretimeout)(struct watchdog_device*, unsigned int);
  unsigned int (*get_timeleft)(struct watchdog_device*);
  int (*restart)(struct watchdog_device*, long unsigned int, void*);
  long int (*ioctl)(struct watchdog_device*, unsigned int, long unsigned int);
};

struct watchdog_governor;

struct watchdog_core_data;

struct watchdog_device {
  int id;
  struct device* parent;
  const struct attribute_group** groups;
  const struct watchdog_info* info;
  const struct watchdog_ops* ops;
  const struct watchdog_governor* gov;
  unsigned int bootstatus;
  unsigned int timeout;
  unsigned int pretimeout;
  unsigned int min_timeout;
  unsigned int max_timeout;
  unsigned int min_hw_heartbeat_ms;
  unsigned int max_hw_heartbeat_ms;
  struct notifier_block reboot_nb;
  struct notifier_block restart_nb;
  void* driver_data;
  struct watchdog_core_data* wd_data;
  long unsigned int status;
  struct list_head deferred;
};

struct watchdog_governor {
  const char name[20];
  void (*pretimeout)(struct watchdog_device*);
};

struct watchdog_core_data {
  struct device dev;
  struct cdev cdev;
  struct watchdog_device* wdd;
  struct mutex lock;
  ktime_t last_keepalive;
  ktime_t last_hw_keepalive;
  ktime_t open_deadline;
  struct hrtimer timer;
  struct kthread_work work;
  long unsigned int status;
};

struct mdp_device_descriptor_s {
  __u32 number;
  __u32 major;
  __u32 minor;
  __u32 raid_disk;
  __u32 state;
  __u32 reserved[27];
};

typedef struct mdp_device_descriptor_s mdp_disk_t;

struct mdp_superblock_s {
  __u32 md_magic;
  __u32 major_version;
  __u32 minor_version;
  __u32 patch_version;
  __u32 gvalid_words;
  __u32 set_uuid0;
  __u32 ctime;
  __u32 level;
  __u32 size;
  __u32 nr_disks;
  __u32 raid_disks;
  __u32 md_minor;
  __u32 not_persistent;
  __u32 set_uuid1;
  __u32 set_uuid2;
  __u32 set_uuid3;
  __u32 gstate_creserved[16];
  __u32 utime;
  __u32 state;
  __u32 active_disks;
  __u32 working_disks;
  __u32 failed_disks;
  __u32 spare_disks;
  __u32 sb_csum;
  __u32 events_lo;
  __u32 events_hi;
  __u32 cp_events_lo;
  __u32 cp_events_hi;
  __u32 recovery_cp;
  __u64 reshape_position;
  __u32 new_level;
  __u32 delta_disks;
  __u32 new_layout;
  __u32 new_chunk;
  __u32 gstate_sreserved[14];
  __u32 layout;
  __u32 chunk_size;
  __u32 root_pv;
  __u32 root_block;
  __u32 pstate_reserved[60];
  mdp_disk_t disks[27];
  __u32 reserved[0];
  mdp_disk_t this_disk;
};

typedef struct mdp_superblock_s mdp_super_t;

struct mdp_superblock_1 {
  __le32 magic;
  __le32 major_version;
  __le32 feature_map;
  __le32 pad0;
  __u8 set_uuid[16];
  char set_name[32];
  __le64 ctime;
  __le32 level;
  __le32 layout;
  __le64 size;
  __le32 chunksize;
  __le32 raid_disks;
  union {
    __le32 bitmap_offset;
    struct {
      __le16 offset;
      __le16 size;
    } ppl;
  };
  __le32 new_level;
  __le64 reshape_position;
  __le32 delta_disks;
  __le32 new_layout;
  __le32 new_chunk;
  __le32 new_offset;
  __le64 data_offset;
  __le64 data_size;
  __le64 super_offset;
  union {
    __le64 recovery_offset;
    __le64 journal_tail;
  };
  __le32 dev_number;
  __le32 cnt_corrected_read;
  __u8 device_uuid[16];
  __u8 devflags;
  __u8 bblog_shift;
  __le16 bblog_size;
  __le32 bblog_offset;
  __le64 utime;
  __le64 events;
  __le64 resync_offset;
  __le32 sb_csum;
  __le32 max_dev;
  __u8 pad3[32];
  __le16 dev_roles[0];
};

struct mdu_version_s {
  int major;
  int minor;
  int patchlevel;
};

typedef struct mdu_version_s mdu_version_t;

struct mdu_array_info_s {
  int major_version;
  int minor_version;
  int patch_version;
  unsigned int ctime;
  int level;
  int size;
  int nr_disks;
  int raid_disks;
  int md_minor;
  int not_persistent;
  unsigned int utime;
  int state;
  int active_disks;
  int working_disks;
  int failed_disks;
  int spare_disks;
  int layout;
  int chunk_size;
};

typedef struct mdu_array_info_s mdu_array_info_t;

struct mdu_disk_info_s {
  int number;
  int major;
  int minor;
  int raid_disk;
  int state;
};

typedef struct mdu_disk_info_s mdu_disk_info_t;

struct mdu_bitmap_file_s {
  char pathname[4096];
};

typedef struct mdu_bitmap_file_s mdu_bitmap_file_t;

struct mddev;

struct md_rdev;

struct md_cluster_operations {
  int (*join)(struct mddev*, int);
  int (*leave)(struct mddev*);
  int (*slot_number)(struct mddev*);
  int (*resync_info_update)(struct mddev*, sector_t, sector_t);
  void (*resync_info_get)(struct mddev*, sector_t*, sector_t*);
  int (*metadata_update_start)(struct mddev*);
  int (*metadata_update_finish)(struct mddev*);
  void (*metadata_update_cancel)(struct mddev*);
  int (*resync_start)(struct mddev*);
  int (*resync_finish)(struct mddev*);
  int (*area_resyncing)(struct mddev*, int, sector_t, sector_t);
  int (*add_new_disk)(struct mddev*, struct md_rdev*);
  void (*add_new_disk_cancel)(struct mddev*);
  int (*new_disk_ack)(struct mddev*, bool);
  int (*remove_disk)(struct mddev*, struct md_rdev*);
  void (*load_bitmaps)(struct mddev*, int);
  int (*gather_bitmaps)(struct md_rdev*);
  int (*resize_bitmaps)(struct mddev*, sector_t, sector_t);
  int (*lock_all_bitmaps)(struct mddev*);
  void (*unlock_all_bitmaps)(struct mddev*);
  void (*update_size)(struct mddev*, sector_t);
};

struct md_cluster_info;

struct md_personality;

struct md_thread;

struct bitmap;

struct mddev {
  void* private;
  struct md_personality* pers;
  dev_t unit;
  int md_minor;
  struct list_head disks;
  long unsigned int flags;
  long unsigned int sb_flags;
  int suspended;
  atomic_t active_io;
  int ro;
  int sysfs_active;
  struct gendisk* gendisk;
  struct kobject kobj;
  int hold_active;
  int major_version;
  int minor_version;
  int patch_version;
  int persistent;
  int external;
  char metadata_type[17];
  int chunk_sectors;
  time64_t ctime;
  time64_t utime;
  int level;
  int layout;
  char clevel[16];
  int raid_disks;
  int max_disks;
  sector_t dev_sectors;
  sector_t array_sectors;
  int external_size;
  __u64 events;
  int can_decrease_events;
  char uuid[16];
  sector_t reshape_position;
  int delta_disks;
  int new_level;
  int new_layout;
  int new_chunk_sectors;
  int reshape_backwards;
  struct md_thread* thread;
  struct md_thread* sync_thread;
  char* last_sync_action;
  sector_t curr_resync;
  sector_t curr_resync_completed;
  long unsigned int resync_mark;
  sector_t resync_mark_cnt;
  sector_t curr_mark_cnt;
  sector_t resync_max_sectors;
  atomic64_t resync_mismatches;
  sector_t suspend_lo;
  sector_t suspend_hi;
  int sync_speed_min;
  int sync_speed_max;
  int parallel_resync;
  int ok_start_degraded;
  long unsigned int recovery;
  int recovery_disabled;
  int in_sync;
  struct mutex open_mutex;
  struct mutex reconfig_mutex;
  atomic_t active;
  atomic_t openers;
  int changed;
  int degraded;
  atomic_t recovery_active;
  wait_queue_head_t recovery_wait;
  sector_t recovery_cp;
  sector_t resync_min;
  sector_t resync_max;
  struct kernfs_node* sysfs_state;
  struct kernfs_node* sysfs_action;
  struct kernfs_node* sysfs_completed;
  struct kernfs_node* sysfs_degraded;
  struct kernfs_node* sysfs_level;
  struct work_struct del_work;
  spinlock_t lock;
  wait_queue_head_t sb_wait;
  atomic_t pending_writes;
  unsigned int safemode;
  unsigned int safemode_delay;
  struct timer_list safemode_timer;
  struct percpu_ref writes_pending;
  int sync_checkers;
  struct request_queue* queue;
  struct bitmap* bitmap;
  struct {
    struct file* file;
    loff_t offset;
    long unsigned int space;
    loff_t default_offset;
    long unsigned int default_space;
    struct mutex mutex;
    long unsigned int chunksize;
    long unsigned int daemon_sleep;
    long unsigned int max_write_behind;
    int external;
    int nodes;
    char cluster_name[64];
  } bitmap_info;
  atomic_t max_corr_read_errors;
  struct list_head all_mddevs;
  struct attribute_group* to_remove;
  struct bio_set bio_set;
  struct bio_set sync_set;
  struct bio* flush_bio;
  atomic_t flush_pending;
  ktime_t start_flush;
  ktime_t prev_flush_start;
  struct work_struct flush_work;
  struct work_struct event_work;
  mempool_t* serial_info_pool;
  void (*sync_super)(struct mddev*, struct md_rdev*);
  struct md_cluster_info* cluster_info;
  unsigned int good_device_nr;
  unsigned int noio_flag;
  bool has_superblocks : 1;
  bool fail_last_dev : 1;
  bool serialize_policy : 1;
};

struct serial_in_rdev;

struct md_rdev {
  struct list_head same_set;
  sector_t sectors;
  struct mddev* mddev;
  int last_events;
  struct block_device* meta_bdev;
  struct block_device* bdev;
  struct page* sb_page;
  struct page* bb_page;
  int sb_loaded;
  __u64 sb_events;
  sector_t data_offset;
  sector_t new_data_offset;
  sector_t sb_start;
  int sb_size;
  int preferred_minor;
  struct kobject kobj;
  long unsigned int flags;
  wait_queue_head_t blocked_wait;
  int desc_nr;
  int raid_disk;
  int new_raid_disk;
  int saved_raid_disk;
  union {
    sector_t recovery_offset;
    sector_t journal_tail;
  };
  atomic_t nr_pending;
  atomic_t read_errors;
  time64_t last_read_error;
  atomic_t corrected_errors;
  struct serial_in_rdev* serial;
  struct work_struct del_work;
  struct kernfs_node* sysfs_state;
  struct kernfs_node* sysfs_unack_badblocks;
  struct kernfs_node* sysfs_badblocks;
  struct badblocks badblocks;
  struct {
    short int offset;
    unsigned int size;
    sector_t sector;
  } ppl;
};

struct serial_in_rdev {
  struct rb_root_cached serial_rb;
  spinlock_t serial_lock;
  wait_queue_head_t serial_io_wait;
};

enum flag_bits {
  Faulty = 0,
  In_sync = 1,
  Bitmap_sync = 2,
  WriteMostly = 3,
  AutoDetected = 4,
  Blocked = 5,
  WriteErrorSeen = 6,
  FaultRecorded = 7,
  BlockedBadBlocks = 8,
  WantReplacement = 9,
  Replacement = 10,
  Candidate = 11,
  Journal = 12,
  ClusterRemove = 13,
  RemoveSynchronized = 14,
  ExternalBbl = 15,
  FailFast = 16,
  LastDev = 17,
  CollisionCheck = 18,
};

enum mddev_flags {
  MD_ARRAY_FIRST_USE = 0,
  MD_CLOSING = 1,
  MD_JOURNAL_CLEAN = 2,
  MD_HAS_JOURNAL = 3,
  MD_CLUSTER_RESYNC_LOCKED = 4,
  MD_FAILFAST_SUPPORTED = 5,
  MD_HAS_PPL = 6,
  MD_HAS_MULTIPLE_PPLS = 7,
  MD_ALLOW_SB_UPDATE = 8,
  MD_UPDATING_SB = 9,
  MD_NOT_READY = 10,
  MD_BROKEN = 11,
};

enum mddev_sb_flags {
  MD_SB_CHANGE_DEVS = 0,
  MD_SB_CHANGE_CLEAN = 1,
  MD_SB_CHANGE_PENDING = 2,
  MD_SB_NEED_REWRITE = 3,
};

struct md_personality {
  char* name;
  int level;
  struct list_head list;
  struct module* owner;
  bool (*make_request)(struct mddev*, struct bio*);
  int (*run)(struct mddev*);
  int (*start)(struct mddev*);
  void (*free)(struct mddev*, void*);
  void (*status)(struct seq_file*, struct mddev*);
  void (*error_handler)(struct mddev*, struct md_rdev*);
  int (*hot_add_disk)(struct mddev*, struct md_rdev*);
  int (*hot_remove_disk)(struct mddev*, struct md_rdev*);
  int (*spare_active)(struct mddev*);
  sector_t (*sync_request)(struct mddev*, sector_t, int*);
  int (*resize)(struct mddev*, sector_t);
  sector_t (*size)(struct mddev*, sector_t, int);
  int (*check_reshape)(struct mddev*);
  int (*start_reshape)(struct mddev*);
  void (*finish_reshape)(struct mddev*);
  void (*update_reshape_pos)(struct mddev*);
  void (*quiesce)(struct mddev*, int);
  void* (*takeover)(struct mddev*);
  int (*change_consistency_policy)(struct mddev*, const char*);
};

struct md_thread {
  void (*run)(struct md_thread*);
  struct mddev* mddev;
  wait_queue_head_t wqueue;
  long unsigned int flags;
  struct task_struct* tsk;
  long unsigned int timeout;
  void* private;
};

struct bitmap_page;

struct bitmap_counts {
  spinlock_t lock;
  struct bitmap_page* bp;
  long unsigned int pages;
  long unsigned int missing_pages;
  long unsigned int chunkshift;
  long unsigned int chunks;
};

struct bitmap_storage {
  struct file* file;
  struct page* sb_page;
  struct page** filemap;
  long unsigned int* filemap_attr;
  long unsigned int file_pages;
  long unsigned int bytes;
};

struct bitmap {
  struct bitmap_counts counts;
  struct mddev* mddev;
  __u64 events_cleared;
  int need_sync;
  struct bitmap_storage storage;
  long unsigned int flags;
  int allclean;
  atomic_t behind_writes;
  long unsigned int behind_writes_used;
  long unsigned int daemon_lastrun;
  long unsigned int last_end_sync;
  atomic_t pending_writes;
  wait_queue_head_t write_wait;
  wait_queue_head_t overflow_wait;
  wait_queue_head_t behind_wait;
  struct kernfs_node* sysfs_can_clear;
  int cluster_slot;
};

enum recovery_flags {
  MD_RECOVERY_RUNNING = 0,
  MD_RECOVERY_SYNC = 1,
  MD_RECOVERY_RECOVER = 2,
  MD_RECOVERY_INTR = 3,
  MD_RECOVERY_DONE = 4,
  MD_RECOVERY_NEEDED = 5,
  MD_RECOVERY_REQUESTED = 6,
  MD_RECOVERY_CHECK = 7,
  MD_RECOVERY_RESHAPE = 8,
  MD_RECOVERY_FROZEN = 9,
  MD_RECOVERY_ERROR = 10,
  MD_RECOVERY_WAIT = 11,
  MD_RESYNCING_REMOTE = 12,
};

struct md_sysfs_entry {
  struct attribute attr;
  ssize_t (*show)(struct mddev*, char*);
  ssize_t (*store)(struct mddev*, const char*, size_t);
};

struct bitmap_page {
  char* map;
  unsigned int hijacked : 1;
  unsigned int pending : 1;
  unsigned int count : 30;
};

struct super_type {
  char* name;
  struct module* owner;
  int (*load_super)(struct md_rdev*, struct md_rdev*, int);
  int (*validate_super)(struct mddev*, struct md_rdev*);
  void (*sync_super)(struct mddev*, struct md_rdev*);
  long long unsigned int (*rdev_size_change)(struct md_rdev*, sector_t);
  int (*allow_new_offset)(struct md_rdev*, long long unsigned int);
};

struct rdev_sysfs_entry {
  struct attribute attr;
  ssize_t (*show)(struct md_rdev*, char*);
  ssize_t (*store)(struct md_rdev*, const char*, size_t);
};

enum array_state {
  clear = 0,
  inactive = 1,
  suspended = 2,
  readonly = 3,
  read_auto = 4,
  clean = 5,
  active = 6,
  write_pending = 7,
  active_idle = 8,
  broken = 9,
  bad_word = 10,
};

struct detected_devices_node {
  struct list_head list;
  dev_t dev;
};

typedef __u16 bitmap_counter_t;

enum bitmap_state {
  BITMAP_STALE = 1,
  BITMAP_WRITE_ERROR = 2,
  BITMAP_HOSTENDIAN = 15,
};

struct bitmap_super_s {
  __le32 magic;
  __le32 version;
  __u8 uuid[16];
  __le64 events;
  __le64 events_cleared;
  __le64 sync_size;
  __le32 state;
  __le32 chunksize;
  __le32 daemon_sleep;
  __le32 write_behind;
  __le32 sectors_reserved;
  __le32 nodes;
  __u8 cluster_name[64];
  __u8 pad[120];
};

typedef struct bitmap_super_s bitmap_super_t;

enum bitmap_page_attr {
  BITMAP_PAGE_DIRTY = 0,
  BITMAP_PAGE_PENDING = 1,
  BITMAP_PAGE_NEEDWRITE = 2,
};

struct md_setup_args {
  int minor;
  int partitioned;
  int level;
  int chunk;
  char* device_names;
};

enum blk_crypto_mode_num {
  BLK_ENCRYPTION_MODE_INVALID = 0,
  BLK_ENCRYPTION_MODE_AES_256_XTS = 1,
  BLK_ENCRYPTION_MODE_AES_128_CBC_ESSIV = 2,
  BLK_ENCRYPTION_MODE_ADIANTUM = 3,
  BLK_ENCRYPTION_MODE_MAX = 4,
};

enum dm_queue_mode {
  DM_TYPE_NONE = 0,
  DM_TYPE_BIO_BASED = 1,
  DM_TYPE_REQUEST_BASED = 2,
  DM_TYPE_DAX_BIO_BASED = 3,
};

typedef enum {
  STATUSTYPE_INFO = 0,
  STATUSTYPE_TABLE = 1,
} status_type_t;

union map_info___2 {
  void* ptr;
};

struct dm_target;

typedef int (*dm_ctr_fn)(struct dm_target*, unsigned int, char**);

struct dm_table;

struct target_type;

struct dm_target {
  struct dm_table* table;
  struct target_type* type;
  sector_t begin;
  sector_t len;
  uint32_t max_io_len;
  unsigned int num_flush_bios;
  unsigned int num_discard_bios;
  unsigned int num_secure_erase_bios;
  unsigned int num_write_same_bios;
  unsigned int num_write_zeroes_bios;
  unsigned int per_io_data_size;
  void* private;
  char* error;
  bool flush_supported : 1;
  bool discards_supported : 1;
  bool limit_swap_bios : 1;
};

typedef void (*dm_dtr_fn)(struct dm_target*);

typedef int (*dm_map_fn)(struct dm_target*, struct bio*);

typedef int (*dm_clone_and_map_request_fn)(
    struct dm_target*,
    struct request*,
    union map_info___2*,
    struct request**);

typedef void (
    *dm_release_clone_request_fn)(struct request*, union map_info___2*);

typedef int (*dm_endio_fn)(struct dm_target*, struct bio*, blk_status_t*);

typedef int (*dm_request_endio_fn)(
    struct dm_target*,
    struct request*,
    blk_status_t,
    union map_info___2*);

typedef void (*dm_presuspend_fn)(struct dm_target*);

typedef void (*dm_presuspend_undo_fn)(struct dm_target*);

typedef void (*dm_postsuspend_fn)(struct dm_target*);

typedef int (*dm_preresume_fn)(struct dm_target*);

typedef void (*dm_resume_fn)(struct dm_target*);

typedef void (*dm_status_fn)(
    struct dm_target*,
    status_type_t,
    unsigned int,
    char*,
    unsigned int);

typedef int (*dm_message_fn)(
    struct dm_target*,
    unsigned int,
    char**,
    char*,
    unsigned int);

typedef int (*dm_prepare_ioctl_fn)(struct dm_target*, struct block_device**);

typedef int (*dm_report_zones_fn)(struct dm_target*);

struct dm_dev;

typedef int (*iterate_devices_callout_fn)(
    struct dm_target*,
    struct dm_dev*,
    sector_t,
    sector_t,
    void*);

struct dm_dev {
  struct block_device* bdev;
  struct dax_device* dax_dev;
  fmode_t mode;
  char name[16];
};

typedef int (*dm_iterate_devices_fn)(
    struct dm_target*,
    iterate_devices_callout_fn,
    void*);

typedef void (*dm_io_hints_fn)(struct dm_target*, struct queue_limits*);

typedef int (*dm_busy_fn)(struct dm_target*);

typedef long int (*dm_dax_direct_access_fn)(
    struct dm_target*,
    long unsigned int,
    long int,
    void**,
    pfn_t*);

typedef size_t (*dm_dax_copy_iter_fn)(
    struct dm_target*,
    long unsigned int,
    void*,
    size_t,
    struct iov_iter*);

typedef int (
    *dm_dax_zero_page_range_fn)(struct dm_target*, long unsigned int, size_t);

struct target_type {
  uint64_t features;
  const char* name;
  struct module* module;
  unsigned int version[3];
  dm_ctr_fn ctr;
  dm_dtr_fn dtr;
  dm_map_fn map;
  dm_clone_and_map_request_fn clone_and_map_rq;
  dm_release_clone_request_fn release_clone_rq;
  dm_endio_fn end_io;
  dm_request_endio_fn rq_end_io;
  dm_presuspend_fn presuspend;
  dm_presuspend_undo_fn presuspend_undo;
  dm_postsuspend_fn postsuspend;
  dm_preresume_fn preresume;
  dm_resume_fn resume;
  dm_status_fn status;
  dm_message_fn message;
  dm_prepare_ioctl_fn prepare_ioctl;
  dm_report_zones_fn report_zones;
  dm_busy_fn busy;
  dm_iterate_devices_fn iterate_devices;
  dm_io_hints_fn io_hints;
  dm_dax_direct_access_fn direct_access;
  dm_dax_copy_iter_fn dax_copy_from_iter;
  dm_dax_copy_iter_fn dax_copy_to_iter;
  dm_dax_zero_page_range_fn dax_zero_page_range;
  struct list_head list;
};

struct mapped_device;

struct dm_md_mempools;

struct dm_table {
  struct mapped_device* md;
  enum dm_queue_mode type;
  unsigned int depth;
  unsigned int counts[16];
  sector_t* index[16];
  unsigned int num_targets;
  unsigned int num_allocated;
  sector_t* highs;
  struct dm_target* targets;
  struct target_type* immutable_target_type;
  bool integrity_supported : 1;
  bool singleton : 1;
  unsigned int integrity_added : 1;
  fmode_t mode;
  struct list_head devices;
  void (*event_fn)(void*);
  void* event_context;
  struct dm_md_mempools* mempools;
};

struct dm_stats_last_position;

struct dm_stats {
  struct mutex mutex;
  struct list_head list;
  struct dm_stats_last_position* last;
  sector_t last_sector;
  unsigned int last_rw;
};

struct dm_stats_aux {
  bool merged;
  long long unsigned int duration_ns;
};

struct dm_kobject_holder {
  struct kobject kobj;
  struct completion completion;
};

struct mapped_device {
  struct mutex suspend_lock;
  struct mutex table_devices_lock;
  struct list_head table_devices;
  void* map;
  long unsigned int flags;
  struct mutex type_lock;
  enum dm_queue_mode type;
  int numa_node_id;
  struct request_queue* queue;
  atomic_t holders;
  atomic_t open_count;
  struct dm_target* immutable_target;
  struct target_type* immutable_target_type;
  char name[16];
  struct gendisk* disk;
  struct dax_device* dax_dev;
  struct work_struct work;
  wait_queue_head_t wait;
  spinlock_t deferred_lock;
  struct bio_list deferred;
  void* interface_ptr;
  wait_queue_head_t eventq;
  atomic_t event_nr;
  atomic_t uevent_seq;
  struct list_head uevent_list;
  spinlock_t uevent_lock;
  unsigned int internal_suspend_count;
  struct bio_set io_bs;
  struct bio_set bs;
  struct workqueue_struct* wq;
  struct hd_geometry geometry;
  struct dm_kobject_holder kobj_holder;
  int swap_bios;
  struct semaphore swap_bios_semaphore;
  struct mutex swap_bios_lock;
  struct dm_stats stats;
  struct blk_mq_tag_set* tag_set;
  bool init_tio_pdu : 1;
  struct srcu_struct io_barrier;
};

struct dm_md_mempools {
  struct bio_set bs;
  struct bio_set io_bs;
};

struct dm_io;

struct clone_info {
  struct dm_table* map;
  struct bio* bio;
  struct dm_io* io;
  sector_t sector;
  unsigned int sector_count;
};

struct dm_target_io {
  unsigned int magic;
  struct dm_io* io;
  struct dm_target* ti;
  unsigned int target_bio_nr;
  unsigned int* len_ptr;
  bool inside_dm_io;
  struct bio clone;
};

struct dm_io {
  unsigned int magic;
  struct mapped_device* md;
  blk_status_t status;
  atomic_t io_count;
  struct bio* orig_bio;
  long unsigned int start_time;
  spinlock_t endio_lock;
  struct dm_stats_aux stats_aux;
  struct dm_target_io tio;
};

struct table_device {
  struct list_head list;
  refcount_t count;
  struct dm_dev dm_dev;
};

struct dm_pr {
  u64 old_key;
  u64 new_key;
  u32 flags;
  bool fail_early;
};

struct blk_crypto_config {
  enum blk_crypto_mode_num crypto_mode;
  unsigned int data_unit_size;
  unsigned int dun_bytes;
};

struct blk_crypto_key {
  struct blk_crypto_config crypto_cfg;
  unsigned int data_unit_size_bits;
  unsigned int size;
  u8 raw[64];
};

struct blk_keyslot_manager;

struct blk_ksm_ll_ops {
  int (*keyslot_program)(
      struct blk_keyslot_manager*,
      const struct blk_crypto_key*,
      unsigned int);
  int (*keyslot_evict)(
      struct blk_keyslot_manager*,
      const struct blk_crypto_key*,
      unsigned int);
};

struct blk_ksm_keyslot;

struct blk_keyslot_manager {
  struct blk_ksm_ll_ops ksm_ll_ops;
  unsigned int max_dun_bytes_supported;
  unsigned int crypto_modes_supported[4];
  struct device* dev;
  unsigned int num_slots;
  struct rw_semaphore lock;
  wait_queue_head_t idle_slots_wait_queue;
  struct list_head idle_slots;
  spinlock_t idle_slots_lock;
  struct hlist_head* slot_hashtable;
  unsigned int log_slot_ht_size;
  struct blk_ksm_keyslot* slots;
};

struct dm_arg_set {
  unsigned int argc;
  char** argv;
};

struct dm_arg {
  unsigned int min;
  unsigned int max;
  char* error;
};

struct dm_dev_internal {
  struct list_head list;
  refcount_t count;
  struct dm_dev* dm_dev;
};

enum suspend_mode {
  PRESUSPEND = 0,
  PRESUSPEND_UNDO = 1,
  POSTSUSPEND = 2,
};

struct linear_c {
  struct dm_dev* dev;
  sector_t start;
};

struct stripe {
  struct dm_dev* dev;
  sector_t physical_start;
  atomic_t error_count;
};

struct stripe_c {
  uint32_t stripes;
  int stripes_shift;
  sector_t stripe_width;
  uint32_t chunk_size;
  int chunk_size_shift;
  struct dm_target* ti;
  struct work_struct trigger_event;
  struct stripe stripe[0];
};

struct dm_ioctl {
  __u32 version[3];
  __u32 data_size;
  __u32 data_start;
  __u32 target_count;
  __s32 open_count;
  __u32 flags;
  __u32 event_nr;
  __u32 padding;
  __u64 dev;
  char name[128];
  char uuid[129];
  char data[7];
};

struct dm_target_spec {
  __u64 sector_start;
  __u64 length;
  __s32 status;
  __u32 next;
  char target_type[16];
};

struct dm_target_deps {
  __u32 count;
  __u32 padding;
  __u64 dev[0];
};

struct dm_name_list {
  __u64 dev;
  __u32 next;
  char name[0];
};

struct dm_target_versions {
  __u32 next;
  __u32 version[3];
  char name[0];
};

struct dm_target_msg {
  __u64 sector;
  char message[0];
};

enum {
  DM_VERSION_CMD = 0,
  DM_REMOVE_ALL_CMD = 1,
  DM_LIST_DEVICES_CMD = 2,
  DM_DEV_CREATE_CMD = 3,
  DM_DEV_REMOVE_CMD = 4,
  DM_DEV_RENAME_CMD = 5,
  DM_DEV_SUSPEND_CMD = 6,
  DM_DEV_STATUS_CMD = 7,
  DM_DEV_WAIT_CMD = 8,
  DM_TABLE_LOAD_CMD = 9,
  DM_TABLE_CLEAR_CMD = 10,
  DM_TABLE_DEPS_CMD = 11,
  DM_TABLE_STATUS_CMD = 12,
  DM_LIST_VERSIONS_CMD = 13,
  DM_TARGET_MSG_CMD = 14,
  DM_DEV_SET_GEOMETRY_CMD = 15,
  DM_DEV_ARM_POLL_CMD = 16,
  DM_GET_TARGET_VERSION_CMD = 17,
};

struct dm_file {
  volatile unsigned int global_event_nr;
};

struct hash_cell {
  struct list_head name_list;
  struct list_head uuid_list;
  char* name;
  char* uuid;
  struct mapped_device* md;
  struct dm_table* new_map;
};

struct vers_iter {
  size_t param_size;
  struct dm_target_versions* vers;
  struct dm_target_versions* old_vers;
  char* end;
  uint32_t flags;
};

typedef int (*ioctl_fn)(struct file*, struct dm_ioctl*, size_t);

struct dm_io_region {
  struct block_device* bdev;
  sector_t sector;
  sector_t count;
};

struct page_list {
  struct page_list* next;
  struct page* page;
};

typedef void (*io_notify_fn)(long unsigned int, void*);

enum dm_io_mem_type {
  DM_IO_PAGE_LIST = 0,
  DM_IO_BIO = 1,
  DM_IO_VMA = 2,
  DM_IO_KMEM = 3,
};

struct dm_io_memory {
  enum dm_io_mem_type type;
  unsigned int offset;
  union {
    struct page_list* pl;
    struct bio* bio;
    void* vma;
    void* addr;
  } ptr;
};

struct dm_io_notify {
  io_notify_fn fn;
  void* context;
};

struct dm_io_client;

struct dm_io_request {
  int bi_op;
  int bi_op_flags;
  struct dm_io_memory mem;
  struct dm_io_notify notify;
  struct dm_io_client* client;
};

struct dm_io_client {
  mempool_t pool;
  struct bio_set bios;
};

struct io {
  long unsigned int error_bits;
  atomic_t count;
  struct dm_io_client* client;
  io_notify_fn callback;
  void* context;
  void* vma_invalidate_address;
  long unsigned int vma_invalidate_size;
  long : 64;
};

struct dpages {
  void (*get_page)(
      struct dpages*,
      struct page**,
      long unsigned int*,
      unsigned int*);
  void (*next_page)(struct dpages*);
  union {
    unsigned int context_u;
    struct bvec_iter context_bi;
  };
  void* context_ptr;
  void* vma_invalidate_address;
  long unsigned int vma_invalidate_size;
};

struct sync_io {
  long unsigned int error_bits;
  struct completion wait;
};

struct dm_kcopyd_throttle {
  unsigned int throttle;
  unsigned int num_io_jobs;
  unsigned int io_period;
  unsigned int total_period;
  unsigned int last_jiffies;
};

typedef void (*dm_kcopyd_notify_fn)(int, long unsigned int, void*);

struct dm_kcopyd_client {
  struct page_list* pages;
  unsigned int nr_reserved_pages;
  unsigned int nr_free_pages;
  unsigned int sub_job_size;
  struct dm_io_client* io_client;
  wait_queue_head_t destroyq;
  mempool_t job_pool;
  struct workqueue_struct* kcopyd_wq;
  struct work_struct kcopyd_work;
  struct dm_kcopyd_throttle* throttle;
  atomic_t nr_jobs;
  spinlock_t job_lock;
  struct list_head callback_jobs;
  struct list_head complete_jobs;
  struct list_head io_jobs;
  struct list_head pages_jobs;
};

struct kcopyd_job {
  struct dm_kcopyd_client* kc;
  struct list_head list;
  long unsigned int flags;
  int read_err;
  long unsigned int write_err;
  int rw;
  struct dm_io_region source;
  unsigned int num_dests;
  struct dm_io_region dests[8];
  struct page_list* pages;
  dm_kcopyd_notify_fn fn;
  void* context;
  struct mutex lock;
  atomic_t sub_jobs;
  sector_t progress;
  sector_t write_offset;
  struct kcopyd_job* master_job;
};

struct dm_sysfs_attr {
  struct attribute attr;
  ssize_t (*show)(struct mapped_device*, char*);
  ssize_t (*store)(struct mapped_device*, const char*, size_t);
};

struct dm_stats_last_position {
  sector_t last_sector;
  unsigned int last_rw;
};

struct dm_stat_percpu {
  long long unsigned int sectors[2];
  long long unsigned int ios[2];
  long long unsigned int merges[2];
  long long unsigned int ticks[2];
  long long unsigned int io_ticks[2];
  long long unsigned int io_ticks_total;
  long long unsigned int time_in_queue;
  long long unsigned int* histogram;
};

struct dm_stat_shared {
  atomic_t in_flight[2];
  long long unsigned int stamp;
  struct dm_stat_percpu tmp;
};

struct dm_stat {
  struct list_head list_entry;
  int id;
  unsigned int stat_flags;
  size_t n_entries;
  sector_t start;
  sector_t end;
  sector_t step;
  unsigned int n_histogram_entries;
  long long unsigned int* histogram_boundaries;
  const char* program_id;
  const char* aux_data;
  struct callback_head callback_head;
  size_t shared_alloc_size;
  size_t percpu_alloc_size;
  size_t histogram_alloc_size;
  struct dm_stat_percpu* stat_percpu[128];
  struct dm_stat_shared stat_shared[0];
};

struct dm_rq_target_io;

struct dm_rq_clone_bio_info {
  struct bio* orig;
  struct dm_rq_target_io* tio;
  struct bio clone;
};

struct dm_rq_target_io {
  struct mapped_device* md;
  struct dm_target* ti;
  struct request* orig;
  struct request* clone;
  struct kthread_work work;
  blk_status_t error;
  union map_info___2 info;
  struct dm_stats_aux stats_aux;
  long unsigned int duration_jiffies;
  unsigned int n_sectors;
  unsigned int completed;
};

enum dev_type {
  DEV_UNKNOWN = 0,
  DEV_X1 = 1,
  DEV_X2 = 2,
  DEV_X4 = 3,
  DEV_X8 = 4,
  DEV_X16 = 5,
  DEV_X32 = 6,
  DEV_X64 = 7,
};

enum hw_event_mc_err_type {
  HW_EVENT_ERR_CORRECTED = 0,
  HW_EVENT_ERR_UNCORRECTED = 1,
  HW_EVENT_ERR_DEFERRED = 2,
  HW_EVENT_ERR_FATAL = 3,
  HW_EVENT_ERR_INFO = 4,
};

enum mem_type {
  MEM_EMPTY = 0,
  MEM_RESERVED = 1,
  MEM_UNKNOWN = 2,
  MEM_FPM = 3,
  MEM_EDO = 4,
  MEM_BEDO = 5,
  MEM_SDR = 6,
  MEM_RDR = 7,
  MEM_DDR = 8,
  MEM_RDDR = 9,
  MEM_RMBS = 10,
  MEM_DDR2 = 11,
  MEM_FB_DDR2 = 12,
  MEM_RDDR2 = 13,
  MEM_XDR = 14,
  MEM_DDR3 = 15,
  MEM_RDDR3 = 16,
  MEM_LRDDR3 = 17,
  MEM_LPDDR3 = 18,
  MEM_DDR4 = 19,
  MEM_RDDR4 = 20,
  MEM_LRDDR4 = 21,
  MEM_LPDDR4 = 22,
  MEM_DDR5 = 23,
  MEM_NVDIMM = 24,
  MEM_WIO2 = 25,
};

enum edac_type {
  EDAC_UNKNOWN = 0,
  EDAC_NONE = 1,
  EDAC_RESERVED = 2,
  EDAC_PARITY = 3,
  EDAC_EC = 4,
  EDAC_SECDED = 5,
  EDAC_S2ECD2ED = 6,
  EDAC_S4ECD4ED = 7,
  EDAC_S8ECD8ED = 8,
  EDAC_S16ECD16ED = 9,
};

enum scrub_type {
  SCRUB_UNKNOWN = 0,
  SCRUB_NONE = 1,
  SCRUB_SW_PROG = 2,
  SCRUB_SW_SRC = 3,
  SCRUB_SW_PROG_SRC = 4,
  SCRUB_SW_TUNABLE = 5,
  SCRUB_HW_PROG = 6,
  SCRUB_HW_SRC = 7,
  SCRUB_HW_PROG_SRC = 8,
  SCRUB_HW_TUNABLE = 9,
};

enum edac_mc_layer_type {
  EDAC_MC_LAYER_BRANCH = 0,
  EDAC_MC_LAYER_CHANNEL = 1,
  EDAC_MC_LAYER_SLOT = 2,
  EDAC_MC_LAYER_CHIP_SELECT = 3,
  EDAC_MC_LAYER_ALL_MEM = 4,
};

struct edac_mc_layer {
  enum edac_mc_layer_type type;
  unsigned int size;
  bool is_virt_csrow;
};

struct mem_ctl_info;

struct dimm_info {
  struct device dev;
  char label[32];
  unsigned int location[3];
  struct mem_ctl_info* mci;
  unsigned int idx;
  u32 grain;
  enum dev_type dtype;
  enum mem_type mtype;
  enum edac_type edac_mode;
  u32 nr_pages;
  unsigned int csrow;
  unsigned int cschannel;
  u16 smbios_handle;
  u32 ce_count;
  u32 ue_count;
};

struct mcidev_sysfs_attribute;

struct edac_raw_error_desc {
  char location[256];
  char label[296];
  long int grain;
  u16 error_count;
  enum hw_event_mc_err_type type;
  int top_layer;
  int mid_layer;
  int low_layer;
  long unsigned int page_frame_number;
  long unsigned int offset_in_page;
  long unsigned int syndrome;
  const char* msg;
  const char* other_detail;
};

struct csrow_info;

struct mem_ctl_info {
  struct device dev;
  struct bus_type* bus;
  struct list_head link;
  struct module* owner;
  long unsigned int mtype_cap;
  long unsigned int edac_ctl_cap;
  long unsigned int edac_cap;
  long unsigned int scrub_cap;
  enum scrub_type scrub_mode;
  int (*set_sdram_scrub_rate)(struct mem_ctl_info*, u32);
  int (*get_sdram_scrub_rate)(struct mem_ctl_info*);
  void (*edac_check)(struct mem_ctl_info*);
  long unsigned int (
      *ctl_page_to_phys)(struct mem_ctl_info*, long unsigned int);
  int mc_idx;
  struct csrow_info** csrows;
  unsigned int nr_csrows;
  unsigned int num_cschannel;
  unsigned int n_layers;
  struct edac_mc_layer* layers;
  bool csbased;
  unsigned int tot_dimms;
  struct dimm_info** dimms;
  struct device* pdev;
  const char* mod_name;
  const char* ctl_name;
  const char* dev_name;
  void* pvt_info;
  long unsigned int start_time;
  u32 ce_noinfo_count;
  u32 ue_noinfo_count;
  u32 ue_mc;
  u32 ce_mc;
  struct completion complete;
  const struct mcidev_sysfs_attribute* mc_driver_sysfs_attributes;
  struct delayed_work work;
  struct edac_raw_error_desc error_desc;
  int op_state;
  struct dentry* debugfs;
  u8 fake_inject_layer[3];
  bool fake_inject_ue;
  u16 fake_inject_count;
};

struct rank_info {
  int chan_idx;
  struct csrow_info* csrow;
  struct dimm_info* dimm;
  u32 ce_count;
};

struct csrow_info {
  struct device dev;
  long unsigned int first_page;
  long unsigned int last_page;
  long unsigned int page_mask;
  int csrow_idx;
  u32 ue_count;
  u32 ce_count;
  struct mem_ctl_info* mci;
  u32 nr_channels;
  struct rank_info** channels;
};

struct edac_device_counter {
  u32 ue_count;
  u32 ce_count;
};

struct edac_device_ctl_info;

struct edac_dev_sysfs_attribute {
  struct attribute attr;
  ssize_t (*show)(struct edac_device_ctl_info*, char*);
  ssize_t (*store)(struct edac_device_ctl_info*, const char*, size_t);
};

struct edac_device_instance;

struct edac_device_ctl_info {
  struct list_head link;
  struct module* owner;
  int dev_idx;
  int log_ue;
  int log_ce;
  int panic_on_ue;
  unsigned int poll_msec;
  long unsigned int delay;
  struct edac_dev_sysfs_attribute* sysfs_attributes;
  struct bus_type* edac_subsys;
  int op_state;
  struct delayed_work work;
  void (*edac_check)(struct edac_device_ctl_info*);
  struct device* dev;
  const char* mod_name;
  const char* ctl_name;
  const char* dev_name;
  void* pvt_info;
  long unsigned int start_time;
  struct completion removal_complete;
  char name[32];
  u32 nr_instances;
  struct edac_device_instance* instances;
  struct edac_device_counter counters;
  struct kobject kobj;
};

struct edac_device_block;

struct edac_dev_sysfs_block_attribute {
  struct attribute attr;
  ssize_t (*show)(struct kobject*, struct attribute*, char*);
  ssize_t (*store)(struct kobject*, struct attribute*, const char*, size_t);
  struct edac_device_block* block;
  unsigned int value;
};

struct edac_device_block {
  struct edac_device_instance* instance;
  char name[32];
  struct edac_device_counter counters;
  int nr_attribs;
  struct edac_dev_sysfs_block_attribute* block_attributes;
  struct kobject kobj;
};

struct edac_device_instance {
  struct edac_device_ctl_info* ctl;
  char name[35];
  struct edac_device_counter counters;
  u32 nr_blocks;
  struct edac_device_block* blocks;
  struct kobject kobj;
};

struct ctl_info_attribute {
  struct attribute attr;
  ssize_t (*show)(struct edac_device_ctl_info*, char*);
  ssize_t (*store)(struct edac_device_ctl_info*, const char*, size_t);
};

struct instance_attribute {
  struct attribute attr;
  ssize_t (*show)(struct edac_device_instance*, char*);
  ssize_t (*store)(struct edac_device_instance*, const char*, size_t);
};

struct edac_pci_counter {
  atomic_t pe_count;
  atomic_t npe_count;
};

struct edac_pci_ctl_info {
  struct list_head link;
  int pci_idx;
  struct bus_type* edac_subsys;
  int op_state;
  struct delayed_work work;
  void (*edac_check)(struct edac_pci_ctl_info*);
  struct device* dev;
  const char* mod_name;
  const char* ctl_name;
  const char* dev_name;
  void* pvt_info;
  long unsigned int start_time;
  struct completion complete;
  char name[32];
  struct edac_pci_counter counters;
  struct kobject kobj;
};

struct edac_pci_gen_data {
  int edac_idx;
};

struct instance_attribute___2 {
  struct attribute attr;
  ssize_t (*show)(struct edac_pci_ctl_info*, char*);
  ssize_t (*store)(struct edac_pci_ctl_info*, const char*, size_t);
};

struct edac_pci_dev_attribute {
  struct attribute attr;
  void* value;
  ssize_t (*show)(void*, char*);
  ssize_t (*store)(void*, const char*, size_t);
};

typedef void (*pci_parity_check_fn_t)(struct pci_dev*);

enum tt_ids {
  TT_INSTR = 0,
  TT_DATA = 1,
  TT_GEN = 2,
  TT_RESV = 3,
};

enum ll_ids {
  LL_RESV = 0,
  LL_L1 = 1,
  LL_L2 = 2,
  LL_LG = 3,
};

enum ii_ids {
  II_MEM = 0,
  II_RESV = 1,
  II_IO = 2,
  II_GEN = 3,
};

enum rrrr_ids {
  R4_GEN = 0,
  R4_RD = 1,
  R4_WR = 2,
  R4_DRD = 3,
  R4_DWR = 4,
  R4_IRD = 5,
  R4_PREF = 6,
  R4_EVICT = 7,
  R4_SNOOP = 8,
};

struct amd_decoder_ops {
  bool (*mc0_mce)(u16, u8);
  bool (*mc1_mce)(u16, u8);
  bool (*mc2_mce)(u16, u8);
};

struct smca_mce_desc {
  const char* const* descs;
  unsigned int num_descs;
};

enum amd_families {
  K8_CPUS = 0,
  F10_CPUS = 1,
  F15_CPUS = 2,
  F15_M30H_CPUS = 3,
  F15_M60H_CPUS = 4,
  F16_CPUS = 5,
  F16_M30H_CPUS = 6,
  F17_CPUS = 7,
  F17_M10H_CPUS = 8,
  F17_M30H_CPUS = 9,
  F17_M60H_CPUS = 10,
  F17_M70H_CPUS = 11,
  F19_CPUS = 12,
  NUM_FAMILIES = 13,
};

struct error_injection {
  u32 section;
  u32 word;
  u32 bit_map;
};

struct reg_pair {
  u32 lo;
  u32 hi;
};

struct dram_range {
  struct reg_pair base;
  struct reg_pair lim;
};

struct chip_select {
  u32 csbases[8];
  u32 csbases_sec[8];
  u8 b_cnt;
  u32 csmasks[8];
  u32 csmasks_sec[8];
  u8 m_cnt;
};

struct amd64_umc {
  u32 dimm_cfg;
  u32 umc_cfg;
  u32 sdp_ctrl;
  u32 ecc_ctrl;
  u32 umc_cap_hi;
};

struct low_ops;

struct amd64_pvt {
  struct low_ops* ops;
  struct pci_dev* F0;
  struct pci_dev* F1;
  struct pci_dev* F2;
  struct pci_dev* F3;
  struct pci_dev* F6;
  u16 mc_node_id;
  u8 fam;
  u8 model;
  u8 stepping;
  int ext_model;
  int channel_count;
  u32 dclr0;
  u32 dclr1;
  u32 dchr0;
  u32 dchr1;
  u32 nbcap;
  u32 nbcfg;
  u32 ext_nbcfg;
  u32 dhar;
  u32 dbam0;
  u32 dbam1;
  struct chip_select csels[8];
  struct dram_range ranges[8];
  u64 top_mem;
  u64 top_mem2;
  u32 dct_sel_lo;
  u32 dct_sel_hi;
  u32 online_spare;
  u8 ecc_sym_sz;
  struct error_injection injection;
  enum mem_type dram_type;
  struct amd64_umc* umc;
};

struct err_info___2;

struct low_ops {
  int (*early_channel_count)(struct amd64_pvt*);
  void (*map_sysaddr_to_csrow)(struct mem_ctl_info*, u64, struct err_info___2*);
  int (*dbam_to_cs)(struct amd64_pvt*, u8, unsigned int, int);
};

enum err_codes {
  DECODE_OK = 0,
  ERR_NODE = 4294967295,
  ERR_CSROW = 4294967294,
  ERR_CHANNEL = 4294967293,
  ERR_SYND = 4294967292,
  ERR_NORM_ADDR = 4294967291,
};

struct err_info___2 {
  int err_code;
  struct mem_ctl_info* src_mci;
  int csrow;
  int channel;
  u16 syndrome;
  u32 page;
  u32 offset;
};

struct flags {
  long unsigned int nb_mce_enable : 1;
  long unsigned int nb_ecc_prev : 1;
};

struct ecc_settings {
  u32 old_nbctl;
  bool nbctl_valid;
  struct flags flags;
};

struct amd64_family_type {
  const char* ctl_name;
  u16 f0_id;
  u16 f1_id;
  u16 f2_id;
  u16 f6_id;
  u8 max_mcs;
  struct low_ops ops;
};

struct scrubrate {
  u32 scrubval;
  u32 bandwidth;
};

struct cpufreq_policy_data {
  struct cpufreq_cpuinfo cpuinfo;
  struct cpufreq_frequency_table* freq_table;
  unsigned int cpu;
  unsigned int min;
  unsigned int max;
};

struct cpufreq_driver {
  char name[16];
  u16 flags;
  void* driver_data;
  int (*init)(struct cpufreq_policy*);
  int (*verify)(struct cpufreq_policy_data*);
  int (*setpolicy)(struct cpufreq_policy*);
  int (*target)(struct cpufreq_policy*, unsigned int, unsigned int);
  int (*target_index)(struct cpufreq_policy*, unsigned int);
  unsigned int (*fast_switch)(struct cpufreq_policy*, unsigned int);
  void (*adjust_perf)(
      unsigned int,
      long unsigned int,
      long unsigned int,
      long unsigned int);
  unsigned int (*resolve_freq)(struct cpufreq_policy*, unsigned int);
  unsigned int (*get_intermediate)(struct cpufreq_policy*, unsigned int);
  int (*target_intermediate)(struct cpufreq_policy*, unsigned int);
  unsigned int (*get)(unsigned int);
  void (*update_limits)(unsigned int);
  int (*bios_limit)(int, unsigned int*);
  int (*online)(struct cpufreq_policy*);
  int (*offline)(struct cpufreq_policy*);
  int (*exit)(struct cpufreq_policy*);
  void (*stop_cpu)(struct cpufreq_policy*);
  int (*suspend)(struct cpufreq_policy*);
  int (*resume)(struct cpufreq_policy*);
  void (*ready)(struct cpufreq_policy*);
  struct freq_attr** attr;
  bool boost_enabled;
  int (*set_boost)(struct cpufreq_policy*, int);
};

struct cpufreq_stats {
  unsigned int total_trans;
  long long unsigned int last_time;
  unsigned int max_state;
  unsigned int state_num;
  unsigned int last_index;
  u64* time_in_state;
  unsigned int* freq_table;
  unsigned int* trans_table;
  unsigned int reset_pending;
  long long unsigned int reset_time;
};

struct gov_attr_set {
  struct kobject kobj;
  struct list_head policy_list;
  struct mutex update_lock;
  int usage_count;
};

struct governor_attr {
  struct attribute attr;
  ssize_t (*show)(struct gov_attr_set*, char*);
  ssize_t (*store)(struct gov_attr_set*, const char*, size_t);
};

enum {
  OD_NORMAL_SAMPLE = 0,
  OD_SUB_SAMPLE = 1,
};

struct dbs_data {
  struct gov_attr_set attr_set;
  void* tuners;
  unsigned int ignore_nice_load;
  unsigned int sampling_rate;
  unsigned int sampling_down_factor;
  unsigned int up_threshold;
  unsigned int io_is_busy;
};

struct policy_dbs_info {
  struct cpufreq_policy* policy;
  struct mutex update_mutex;
  u64 last_sample_time;
  s64 sample_delay_ns;
  atomic_t work_count;
  struct irq_work irq_work;
  struct work_struct work;
  struct dbs_data* dbs_data;
  struct list_head list;
  unsigned int rate_mult;
  unsigned int idle_periods;
  bool is_shared;
  bool work_in_progress;
};

struct dbs_governor {
  struct cpufreq_governor gov;
  struct kobj_type kobj_type;
  struct dbs_data* gdbs_data;
  unsigned int (*gov_dbs_update)(struct cpufreq_policy*);
  struct policy_dbs_info* (*alloc)();
  void (*free)(struct policy_dbs_info*);
  int (*init)(struct dbs_data*);
  void (*exit)(struct dbs_data*);
  void (*start)(struct cpufreq_policy*);
};

struct od_ops {
  unsigned int (*powersave_bias_target)(
      struct cpufreq_policy*,
      unsigned int,
      unsigned int);
};

struct od_policy_dbs_info {
  struct policy_dbs_info policy_dbs;
  unsigned int freq_lo;
  unsigned int freq_lo_delay_us;
  unsigned int freq_hi_delay_us;
  unsigned int sample_type : 1;
};

struct od_dbs_tuners {
  unsigned int powersave_bias;
};

struct cs_policy_dbs_info {
  struct policy_dbs_info policy_dbs;
  unsigned int down_skip;
  unsigned int requested_freq;
};

struct cs_dbs_tuners {
  unsigned int down_threshold;
  unsigned int freq_step;
};

struct cpu_dbs_info {
  u64 prev_cpu_idle;
  u64 prev_update_time;
  u64 prev_cpu_nice;
  unsigned int prev_load;
  struct update_util_data update_util;
  struct policy_dbs_info* policy_dbs;
};

struct cpuidle_governor {
  char name[16];
  struct list_head governor_list;
  unsigned int rating;
  int (*enable)(struct cpuidle_driver___2*, struct cpuidle_device*);
  void (*disable)(struct cpuidle_driver___2*, struct cpuidle_device*);
  int (*select)(struct cpuidle_driver___2*, struct cpuidle_device*, bool*);
  void (*reflect)(struct cpuidle_device*, int);
};

struct cpuidle_state_kobj {
  struct cpuidle_state* state;
  struct cpuidle_state_usage* state_usage;
  struct completion kobj_unregister;
  struct kobject kobj;
  struct cpuidle_device* device;
};

struct cpuidle_device_kobj {
  struct cpuidle_device* dev;
  struct completion kobj_unregister;
  struct kobject kobj;
};

struct cpuidle_attr {
  struct attribute attr;
  ssize_t (*show)(struct cpuidle_device*, char*);
  ssize_t (*store)(struct cpuidle_device*, const char*, size_t);
};

struct cpuidle_state_attr {
  struct attribute attr;
  ssize_t (*show)(struct cpuidle_state*, struct cpuidle_state_usage*, char*);
  ssize_t (*store)(
      struct cpuidle_state*,
      struct cpuidle_state_usage*,
      const char*,
      size_t);
};

struct menu_device {
  int needs_update;
  int tick_wakeup;
  u64 next_timer_ns;
  unsigned int bucket;
  unsigned int correction_factor[12];
  unsigned int intervals[8];
  int interval_ptr;
};

enum led_brightness {
  LED_OFF = 0,
  LED_ON = 1,
  LED_HALF = 127,
  LED_FULL = 255,
};

struct led_init_data {
  struct fwnode_handle* fwnode;
  const char* default_label;
  const char* devicename;
  bool devname_mandatory;
};

struct led_pattern;

struct led_classdev {
  const char* name;
  unsigned int brightness;
  unsigned int max_brightness;
  int flags;
  long unsigned int work_flags;
  void (*brightness_set)(struct led_classdev*, enum led_brightness);
  int (*brightness_set_blocking)(struct led_classdev*, enum led_brightness);
  enum led_brightness (*brightness_get)(struct led_classdev*);
  int (
      *blink_set)(struct led_classdev*, long unsigned int*, long unsigned int*);
  int (*pattern_set)(struct led_classdev*, struct led_pattern*, u32, int);
  int (*pattern_clear)(struct led_classdev*);
  struct device* dev;
  const struct attribute_group** groups;
  struct list_head node;
  const char* default_trigger;
  long unsigned int blink_delay_on;
  long unsigned int blink_delay_off;
  struct timer_list blink_timer;
  int blink_brightness;
  int new_blink_brightness;
  void (*flash_resume)(struct led_classdev*);
  struct work_struct set_brightness_work;
  int delayed_set_value;
  struct mutex led_access;
};

struct led_pattern {
  u32 delta_t;
  int brightness;
};

struct led_properties {
  u32 color;
  bool color_present;
  const char* function;
  u32 func_enum;
  bool func_enum_present;
  const char* label;
};

enum dmi_entry_type {
  DMI_ENTRY_BIOS = 0,
  DMI_ENTRY_SYSTEM = 1,
  DMI_ENTRY_BASEBOARD = 2,
  DMI_ENTRY_CHASSIS = 3,
  DMI_ENTRY_PROCESSOR = 4,
  DMI_ENTRY_MEM_CONTROLLER = 5,
  DMI_ENTRY_MEM_MODULE = 6,
  DMI_ENTRY_CACHE = 7,
  DMI_ENTRY_PORT_CONNECTOR = 8,
  DMI_ENTRY_SYSTEM_SLOT = 9,
  DMI_ENTRY_ONBOARD_DEVICE = 10,
  DMI_ENTRY_OEMSTRINGS = 11,
  DMI_ENTRY_SYSCONF = 12,
  DMI_ENTRY_BIOS_LANG = 13,
  DMI_ENTRY_GROUP_ASSOC = 14,
  DMI_ENTRY_SYSTEM_EVENT_LOG = 15,
  DMI_ENTRY_PHYS_MEM_ARRAY = 16,
  DMI_ENTRY_MEM_DEVICE = 17,
  DMI_ENTRY_32_MEM_ERROR = 18,
  DMI_ENTRY_MEM_ARRAY_MAPPED_ADDR = 19,
  DMI_ENTRY_MEM_DEV_MAPPED_ADDR = 20,
  DMI_ENTRY_BUILTIN_POINTING_DEV = 21,
  DMI_ENTRY_PORTABLE_BATTERY = 22,
  DMI_ENTRY_SYSTEM_RESET = 23,
  DMI_ENTRY_HW_SECURITY = 24,
  DMI_ENTRY_SYSTEM_POWER_CONTROLS = 25,
  DMI_ENTRY_VOLTAGE_PROBE = 26,
  DMI_ENTRY_COOLING_DEV = 27,
  DMI_ENTRY_TEMP_PROBE = 28,
  DMI_ENTRY_ELECTRICAL_CURRENT_PROBE = 29,
  DMI_ENTRY_OOB_REMOTE_ACCESS = 30,
  DMI_ENTRY_BIS_ENTRY = 31,
  DMI_ENTRY_SYSTEM_BOOT = 32,
  DMI_ENTRY_MGMT_DEV = 33,
  DMI_ENTRY_MGMT_DEV_COMPONENT = 34,
  DMI_ENTRY_MGMT_DEV_THRES = 35,
  DMI_ENTRY_MEM_CHANNEL = 36,
  DMI_ENTRY_IPMI_DEV = 37,
  DMI_ENTRY_SYS_POWER_SUPPLY = 38,
  DMI_ENTRY_ADDITIONAL = 39,
  DMI_ENTRY_ONBOARD_DEV_EXT = 40,
  DMI_ENTRY_MGMT_CONTROLLER_HOST = 41,
  DMI_ENTRY_INACTIVE = 126,
  DMI_ENTRY_END_OF_TABLE = 127,
};

struct dmi_memdev_info {
  const char* device;
  const char* bank;
  u64 size;
  u16 handle;
  u8 type;
};

struct edd_device {
  unsigned int index;
  unsigned int mbr_signature;
  struct edd_info* info;
  struct kobject kobj;
};

struct edd_attribute {
  struct attribute attr;
  ssize_t (*show)(struct edd_device*, char*);
  int (*test)(struct edd_device*);
};

struct dmi_device_attribute {
  struct device_attribute dev_attr;
  int field;
};

struct mafield {
  const char* prefix;
  int field;
};

struct firmware_map_entry {
  u64 start;
  u64 end;
  const char* type;
  struct list_head list;
  struct kobject kobj;
};

struct memmap_attribute {
  struct attribute attr;
  ssize_t (*show)(struct firmware_map_entry*, char*);
};

typedef efi_status_t efi_query_variable_store_t(u32, long unsigned int, bool);

typedef struct {
  efi_guid_t guid;
  u32 table;
} efi_config_table_32_t;

typedef union {
  struct {
    efi_guid_t guid;
    void* table;
  };
  efi_config_table_32_t mixed_mode;
} efi_config_table_t;

typedef struct {
  u16 version;
  u16 length;
  u32 runtime_services_supported;
} efi_rt_properties_table_t;

struct efivar_operations {
  efi_get_variable_t* get_variable;
  efi_get_next_variable_t* get_next_variable;
  efi_set_variable_t* set_variable;
  efi_set_variable_t* set_variable_nonblocking;
  efi_query_variable_store_t* query_variable_store;
};

struct efivars {
  struct kset* kset;
  struct kobject* kobject;
  const struct efivar_operations* ops;
};

struct linux_efi_random_seed {
  u32 size;
  u8 bits[0];
};

struct linux_efi_memreserve {
  int size;
  atomic_t count;
  phys_addr_t next;
  struct {
    phys_addr_t base;
    phys_addr_t size;
  } entry[0];
};

struct efi_generic_dev_path {
  u8 type;
  u8 sub_type;
  u16 length;
};

struct efi_variable {
  efi_char16_t VariableName[512];
  efi_guid_t VendorGuid;
  long unsigned int DataSize;
  __u8 Data[1024];
  efi_status_t Status;
  __u32 Attributes;
} __attribute__((packed));

struct efivar_entry {
  struct efi_variable var;
  struct list_head list;
  struct kobject kobj;
  bool scanning;
  bool deleting;
};

struct variable_validate {
  efi_guid_t vendor;
  char* name;
  bool (*validate)(efi_char16_t*, int, u8*, long unsigned int);
};

typedef struct {
  u32 version;
  u32 num_entries;
  u32 desc_size;
  u32 reserved;
  efi_memory_desc_t entry[0];
} efi_memory_attributes_table_t;

typedef int (*efi_memattr_perm_setter)(struct mm_struct*, efi_memory_desc_t*);

struct efi_system_resource_entry_v1 {
  efi_guid_t fw_class;
  u32 fw_type;
  u32 fw_version;
  u32 lowest_supported_fw_version;
  u32 capsule_flags;
  u32 last_attempt_version;
  u32 last_attempt_status;
};

struct efi_system_resource_table {
  u32 fw_resource_count;
  u32 fw_resource_count_max;
  u64 fw_resource_version;
  u8 entries[0];
};

struct esre_entry {
  union {
    struct efi_system_resource_entry_v1* esre1;
  } esre;
  struct kobject kobj;
  struct list_head list;
};

struct esre_attribute {
  struct attribute attr;
  ssize_t (*show)(struct esre_entry*, char*);
  ssize_t (*store)(struct esre_entry*, const char*, size_t);
};

struct cper_sec_proc_generic {
  u64 validation_bits;
  u8 proc_type;
  u8 proc_isa;
  u8 proc_error_type;
  u8 operation;
  u8 flags;
  u8 level;
  u16 reserved;
  u64 cpu_version;
  char cpu_brand[128];
  u64 proc_id;
  u64 target_addr;
  u64 requestor_id;
  u64 responder_id;
  u64 ip;
};

struct cper_sec_proc_ia {
  u64 validation_bits;
  u64 lapic_id;
  u8 cpuid[48];
};

struct cper_mem_err_compact {
  u64 validation_bits;
  u16 node;
  u16 card;
  u16 module;
  u16 bank;
  u16 device;
  u16 row;
  u16 column;
  u16 bit_pos;
  u64 requestor_id;
  u64 responder_id;
  u64 target_id;
  u16 rank;
  u16 mem_array_handle;
  u16 mem_dev_handle;
  u8 extended;
} __attribute__((packed));

struct cper_sec_fw_err_rec_ref {
  u8 record_type;
  u8 revision;
  u8 reserved[6];
  u64 record_identifier;
  guid_t record_identifier_guid;
};

struct efi_runtime_map_entry {
  efi_memory_desc_t md;
  struct kobject kobj;
};

struct map_attribute {
  struct attribute attr;
  ssize_t (*show)(struct efi_runtime_map_entry*, char*);
};

struct cper_ia_err_info {
  guid_t err_type;
  u64 validation_bits;
  u64 check_info;
  u64 target_id;
  u64 requestor_id;
  u64 responder_id;
  u64 ip;
};

enum err_types {
  ERR_TYPE_CACHE = 0,
  ERR_TYPE_TLB = 1,
  ERR_TYPE_BUS = 2,
  ERR_TYPE_MS = 3,
  N_ERR_TYPES = 4,
};

struct dca_domain {
  struct list_head node;
  struct list_head dca_providers;
  struct pci_bus* pci_rc;
};

struct hid_device_id {
  __u16 bus;
  __u16 group;
  __u32 vendor;
  __u32 product;
  kernel_ulong_t driver_data;
};

struct hid_item {
  unsigned int format;
  __u8 size;
  __u8 type;
  __u8 tag;
  union {
    __u8 u8;
    __s8 s8;
    __u16 u16;
    __s16 s16;
    __u32 u32;
    __s32 s32;
    __u8* longdata;
  } data;
};

struct hid_global {
  unsigned int usage_page;
  __s32 logical_minimum;
  __s32 logical_maximum;
  __s32 physical_minimum;
  __s32 physical_maximum;
  __s32 unit_exponent;
  unsigned int unit;
  unsigned int report_id;
  unsigned int report_size;
  unsigned int report_count;
};

struct hid_local {
  unsigned int usage[12288];
  u8 usage_size[12288];
  unsigned int collection_index[12288];
  unsigned int usage_index;
  unsigned int usage_minimum;
  unsigned int delimiter_depth;
  unsigned int delimiter_branch;
};

struct hid_collection {
  int parent_idx;
  unsigned int type;
  unsigned int usage;
  unsigned int level;
};

struct hid_usage {
  unsigned int hid;
  unsigned int collection_index;
  unsigned int usage_index;
  __s8 resolution_multiplier;
  __s8 wheel_factor;
  __u16 code;
  __u8 type;
  __s8 hat_min;
  __s8 hat_max;
  __s8 hat_dir;
  __s16 wheel_accumulated;
};

struct hid_report;

struct hid_input;

struct hid_field {
  unsigned int physical;
  unsigned int logical;
  unsigned int application;
  struct hid_usage* usage;
  unsigned int maxusage;
  unsigned int flags;
  unsigned int report_offset;
  unsigned int report_size;
  unsigned int report_count;
  unsigned int report_type;
  __s32* value;
  __s32 logical_minimum;
  __s32 logical_maximum;
  __s32 physical_minimum;
  __s32 physical_maximum;
  __s32 unit_exponent;
  unsigned int unit;
  struct hid_report* report;
  unsigned int index;
  struct hid_input* hidinput;
  __u16 dpad;
};

struct hid_device;

struct hid_report {
  struct list_head list;
  struct list_head hidinput_list;
  unsigned int id;
  unsigned int type;
  unsigned int application;
  struct hid_field* field[256];
  unsigned int maxfield;
  unsigned int size;
  struct hid_device* device;
};

struct hid_input {
  struct list_head list;
  struct hid_report* report;
  struct input_dev* input;
  const char* name;
  bool registered;
  struct list_head reports;
  unsigned int application;
};

enum hid_type {
  HID_TYPE_OTHER = 0,
  HID_TYPE_USBMOUSE = 1,
  HID_TYPE_USBNONE = 2,
};

struct hid_report_enum {
  unsigned int numbered;
  struct list_head report_list;
  struct hid_report* report_id_hash[256];
};

struct hid_driver;

struct hid_ll_driver;

struct hid_device {
  __u8* dev_rdesc;
  unsigned int dev_rsize;
  __u8* rdesc;
  unsigned int rsize;
  struct hid_collection* collection;
  unsigned int collection_size;
  unsigned int maxcollection;
  unsigned int maxapplication;
  __u16 bus;
  __u16 group;
  __u32 vendor;
  __u32 product;
  __u32 version;
  enum hid_type type;
  unsigned int country;
  struct hid_report_enum report_enum[3];
  struct work_struct led_work;
  struct semaphore driver_input_lock;
  struct device dev;
  struct hid_driver* driver;
  struct hid_ll_driver* ll_driver;
  struct mutex ll_open_lock;
  unsigned int ll_open_count;
  long unsigned int status;
  unsigned int claimed;
  unsigned int quirks;
  bool io_started;
  struct list_head inputs;
  void* hiddev;
  void* hidraw;
  char name[128];
  char phys[64];
  char uniq[64];
  void* driver_data;
  int (*ff_init)(struct hid_device*);
  int (*hiddev_connect)(struct hid_device*, unsigned int);
  void (*hiddev_disconnect)(struct hid_device*);
  void (*hiddev_hid_event)(
      struct hid_device*,
      struct hid_field*,
      struct hid_usage*,
      __s32);
  void (*hiddev_report_event)(struct hid_device*, struct hid_report*);
  short unsigned int debug;
  struct dentry* debug_dir;
  struct dentry* debug_rdesc;
  struct dentry* debug_events;
  struct list_head debug_list;
  spinlock_t debug_list_lock;
  wait_queue_head_t debug_wait;
};

struct hid_report_id;

struct hid_usage_id;

struct hid_driver {
  char* name;
  const struct hid_device_id* id_table;
  struct list_head dyn_list;
  spinlock_t dyn_lock;
  bool (*match)(struct hid_device*, bool);
  int (*probe)(struct hid_device*, const struct hid_device_id*);
  void (*remove)(struct hid_device*);
  const struct hid_report_id* report_table;
  int (*raw_event)(struct hid_device*, struct hid_report*, u8*, int);
  const struct hid_usage_id* usage_table;
  int (*event)(struct hid_device*, struct hid_field*, struct hid_usage*, __s32);
  void (*report)(struct hid_device*, struct hid_report*);
  __u8* (*report_fixup)(struct hid_device*, __u8*, unsigned int*);
  int (*input_mapping)(
      struct hid_device*,
      struct hid_input*,
      struct hid_field*,
      struct hid_usage*,
      long unsigned int**,
      int*);
  int (*input_mapped)(
      struct hid_device*,
      struct hid_input*,
      struct hid_field*,
      struct hid_usage*,
      long unsigned int**,
      int*);
  int (*input_configured)(struct hid_device*, struct hid_input*);
  void (*feature_mapping)(
      struct hid_device*,
      struct hid_field*,
      struct hid_usage*);
  struct device_driver driver;
};

struct hid_ll_driver {
  int (*start)(struct hid_device*);
  void (*stop)(struct hid_device*);
  int (*open)(struct hid_device*);
  void (*close)(struct hid_device*);
  int (*power)(struct hid_device*, int);
  int (*parse)(struct hid_device*);
  void (*request)(struct hid_device*, struct hid_report*, int);
  int (*wait)(struct hid_device*);
  int (*raw_request)(
      struct hid_device*,
      unsigned char,
      __u8*,
      size_t,
      unsigned char,
      int);
  int (*output_report)(struct hid_device*, __u8*, size_t);
  int (*idle)(struct hid_device*, int, int, int);
};

struct hid_parser {
  struct hid_global global;
  struct hid_global global_stack[4];
  unsigned int global_stack_ptr;
  struct hid_local local;
  unsigned int* collection_stack;
  unsigned int collection_stack_ptr;
  unsigned int collection_stack_size;
  struct hid_device* device;
  unsigned int scan_flags;
};

struct hid_report_id {
  __u32 report_type;
};

struct hid_usage_id {
  __u32 usage_hid;
  __u32 usage_type;
  __u32 usage_code;
};

struct hiddev {
  int minor;
  int exist;
  int open;
  struct mutex existancelock;
  wait_queue_head_t wait;
  struct hid_device* hid;
  struct list_head list;
  spinlock_t list_lock;
  bool initialized;
};

struct hidraw {
  unsigned int minor;
  int exist;
  int open;
  wait_queue_head_t wait;
  struct hid_device* hid;
  struct device* dev;
  spinlock_t list_lock;
  struct list_head list;
};

struct hid_dynid {
  struct list_head list;
  struct hid_device_id id;
};

typedef bool (*hid_usage_cmp_t)(struct hid_usage*, unsigned int, unsigned int);

struct quirks_list_struct {
  struct hid_device_id hid_bl_item;
  struct list_head node;
};

struct hid_debug_list {
  struct {
    union {
      struct __kfifo kfifo;
      char* type;
      const char* const_type;
      char (*rectype)[0];
      char* ptr;
      const char* ptr_const;
    };
    char buf[0];
  } hid_debug_fifo;
  struct fasync_struct* fasync;
  struct hid_device* hdev;
  struct list_head node;
  struct mutex read_mutex;
};

struct hid_usage_entry {
  unsigned int page;
  unsigned int usage;
  const char* description;
};

struct hid_control_fifo {
  unsigned char dir;
  struct hid_report* report;
  char* raw_report;
};

struct hid_output_fifo {
  struct hid_report* report;
  char* raw_report;
};

struct hid_class_descriptor {
  __u8 bDescriptorType;
  __le16 wDescriptorLength;
} __attribute__((packed));

struct hid_descriptor {
  __u8 bLength;
  __u8 bDescriptorType;
  __le16 bcdHID;
  __u8 bCountryCode;
  __u8 bNumDescriptors;
  struct hid_class_descriptor desc[1];
} __attribute__((packed));

struct usbhid_device {
  struct hid_device* hid;
  struct usb_interface* intf;
  int ifnum;
  unsigned int bufsize;
  struct urb* urbin;
  char* inbuf;
  dma_addr_t inbuf_dma;
  struct urb* urbctrl;
  struct usb_ctrlrequest* cr;
  struct hid_control_fifo ctrl[256];
  unsigned char ctrlhead;
  unsigned char ctrltail;
  char* ctrlbuf;
  dma_addr_t ctrlbuf_dma;
  long unsigned int last_ctrl;
  struct urb* urbout;
  struct hid_output_fifo out[256];
  unsigned char outhead;
  unsigned char outtail;
  char* outbuf;
  dma_addr_t outbuf_dma;
  long unsigned int last_out;
  struct mutex mutex;
  spinlock_t lock;
  long unsigned int iofl;
  struct timer_list io_retry;
  long unsigned int stop_retry;
  unsigned int retry_delay;
  struct work_struct reset_work;
  wait_queue_head_t wait;
};

struct pmc_bit_map {
  const char* name;
  u32 bit_mask;
};

struct pmc_reg_map {
  const struct pmc_bit_map* d3_sts_0;
  const struct pmc_bit_map* d3_sts_1;
  const struct pmc_bit_map* func_dis;
  const struct pmc_bit_map* func_dis_2;
  const struct pmc_bit_map* pss;
};

struct pmc_data {
  const struct pmc_reg_map* map;
  const struct pmc_clk* clks;
};

struct pmc_dev {
  u32 base_addr;
  void* regmap;
  const struct pmc_reg_map* map;
  struct dentry* dbgfs_dir;
  bool init;
};

struct mbox_client {
  struct device* dev;
  bool tx_block;
  long unsigned int tx_tout;
  bool knows_txdone;
  void (*rx_callback)(struct mbox_client*, void*);
  void (*tx_prepare)(struct mbox_client*, void*);
  void (*tx_done)(struct mbox_client*, void*, int);
};

struct mbox_chan;

struct mbox_chan_ops {
  int (*send_data)(struct mbox_chan*, void*);
  int (*flush)(struct mbox_chan*, long unsigned int);
  int (*startup)(struct mbox_chan*);
  void (*shutdown)(struct mbox_chan*);
  bool (*last_tx_done)(struct mbox_chan*);
  bool (*peek_data)(struct mbox_chan*);
};

struct mbox_controller;

struct mbox_chan {
  struct mbox_controller* mbox;
  unsigned int txdone_method;
  struct mbox_client* cl;
  struct completion tx_complete;
  void* active_req;
  unsigned int msg_count;
  unsigned int msg_free;
  void* msg_data[20];
  spinlock_t lock;
  void* con_priv;
};

struct mbox_controller {
  struct device* dev;
  const struct mbox_chan_ops* ops;
  struct mbox_chan* chans;
  int num_chans;
  bool txdone_irq;
  bool txdone_poll;
  unsigned int txpoll_period;
  struct mbox_chan* (
      *of_xlate)(struct mbox_controller*, const struct of_phandle_args*);
  struct hrtimer poll_hrt;
  struct list_head node;
};

struct acpi_table_pcct {
  struct acpi_table_header header;
  u32 flags;
  u64 reserved;
};

enum acpi_pcct_type {
  ACPI_PCCT_TYPE_GENERIC_SUBSPACE = 0,
  ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE = 1,
  ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2 = 2,
  ACPI_PCCT_TYPE_EXT_PCC_MASTER_SUBSPACE = 3,
  ACPI_PCCT_TYPE_EXT_PCC_SLAVE_SUBSPACE = 4,
  ACPI_PCCT_TYPE_RESERVED = 5,
};

struct acpi_pcct_subspace {
  struct acpi_subtable_header header;
  u8 reserved[6];
  u64 base_address;
  u64 length;
  struct acpi_generic_address doorbell_register;
  u64 preserve_mask;
  u64 write_mask;
  u32 latency;
  u32 max_access_rate;
  u16 min_turnaround_time;
} __attribute__((packed));

struct acpi_pcct_hw_reduced {
  struct acpi_subtable_header header;
  u32 platform_interrupt;
  u8 flags;
  u8 reserved;
  u64 base_address;
  u64 length;
  struct acpi_generic_address doorbell_register;
  u64 preserve_mask;
  u64 write_mask;
  u32 latency;
  u32 max_access_rate;
  u16 min_turnaround_time;
} __attribute__((packed));

struct acpi_pcct_hw_reduced_type2 {
  struct acpi_subtable_header header;
  u32 platform_interrupt;
  u8 flags;
  u8 reserved;
  u64 base_address;
  u64 length;
  struct acpi_generic_address doorbell_register;
  u64 preserve_mask;
  u64 write_mask;
  u32 latency;
  u32 max_access_rate;
  u16 min_turnaround_time;
  struct acpi_generic_address platform_ack_register;
  u64 ack_preserve_mask;
  u64 ack_write_mask;
} __attribute__((packed));

struct trace_event_raw_mc_event {
  struct trace_entry ent;
  unsigned int error_type;
  u32 __data_loc_msg;
  u32 __data_loc_label;
  u16 error_count;
  u8 mc_index;
  s8 top_layer;
  s8 middle_layer;
  s8 lower_layer;
  long int address;
  u8 grain_bits;
  long int syndrome;
  u32 __data_loc_driver_detail;
  char __data[0];
};

struct trace_event_raw_arm_event {
  struct trace_entry ent;
  u64 mpidr;
  u64 midr;
  u32 running_state;
  u32 psci_state;
  u8 affinity;
  char __data[0];
};

struct trace_event_raw_non_standard_event {
  struct trace_entry ent;
  char sec_type[16];
  char fru_id[16];
  u32 __data_loc_fru_text;
  u8 sev;
  u32 len;
  u32 __data_loc_buf;
  char __data[0];
};

struct trace_event_raw_aer_event {
  struct trace_entry ent;
  u32 __data_loc_dev_name;
  u32 status;
  u8 severity;
  u8 tlp_header_valid;
  u32 tlp_header[4];
  char __data[0];
};

struct trace_event_raw_memory_failure_event {
  struct trace_entry ent;
  long unsigned int pfn;
  int type;
  int result;
  char __data[0];
};

struct trace_event_data_offsets_mc_event {
  u32 msg;
  u32 label;
  u32 driver_detail;
};

struct trace_event_data_offsets_arm_event {};

struct trace_event_data_offsets_non_standard_event {
  u32 fru_text;
  u32 buf;
};

struct trace_event_data_offsets_aer_event {
  u32 dev_name;
};

struct trace_event_data_offsets_memory_failure_event {};

typedef void (*btf_trace_mc_event)(
    void*,
    const unsigned int,
    const char*,
    const char*,
    const int,
    const u8,
    const s8,
    const s8,
    const s8,
    long unsigned int,
    const u8,
    long unsigned int,
    const char*);

typedef void (*btf_trace_arm_event)(void*, const struct cper_sec_proc_arm*);

typedef void (*btf_trace_non_standard_event)(
    void*,
    const guid_t*,
    const guid_t*,
    const char*,
    const u8,
    const u8*,
    const u32);

typedef void (*btf_trace_aer_event)(
    void*,
    const char*,
    const u32,
    const u8,
    const u8,
    struct aer_header_log_regs*);

typedef void (
    *btf_trace_memory_failure_event)(void*, long unsigned int, int, int);

struct nvmem_cell_lookup {
  const char* nvmem_name;
  const char* cell_name;
  const char* dev_id;
  const char* con_id;
  struct list_head node;
};

enum {
  NVMEM_ADD = 1,
  NVMEM_REMOVE = 2,
  NVMEM_CELL_ADD = 3,
  NVMEM_CELL_REMOVE = 4,
};

struct nvmem_cell_table {
  const char* nvmem_name;
  const struct nvmem_cell_info* cells;
  size_t ncells;
  struct list_head node;
};

struct nvmem_device___2 {
  struct module* owner;
  struct device dev;
  int stride;
  int word_size;
  int id;
  struct kref refcnt;
  size_t size;
  bool read_only;
  bool root_only;
  int flags;
  enum nvmem_type type;
  struct bin_attribute eeprom;
  struct device* base_dev;
  struct list_head cells;
  const struct nvmem_keepout* keepout;
  unsigned int nkeepout;
  nvmem_reg_read_t reg_read;
  nvmem_reg_write_t reg_write;
  struct gpio_desc* wp_gpio;
  void* priv;
};

struct nvmem_cell {
  const char* name;
  int offset;
  int bytes;
  int bit_offset;
  int nbits;
  struct device_node* np;
  struct nvmem_device___2* nvmem;
  struct list_head node;
};

struct net_device_devres {
  struct net_device* ndev;
};

struct __kernel_old_timespec {
  __kernel_old_time_t tv_sec;
  long int tv_nsec;
};

struct __kernel_sock_timeval {
  __s64 tv_sec;
  __s64 tv_usec;
};

struct mmsghdr {
  struct user_msghdr msg_hdr;
  unsigned int msg_len;
};

struct scm_timestamping_internal {
  struct timespec64 ts[3];
};

struct ifconf {
  int ifc_len;
  union {
    char* ifcu_buf;
    struct ifreq* ifcu_req;
  } ifc_ifcu;
};

struct compat_ifmap {
  compat_ulong_t mem_start;
  compat_ulong_t mem_end;
  short unsigned int base_addr;
  unsigned char irq;
  unsigned char dma;
  unsigned char port;
};

struct compat_if_settings {
  unsigned int type;
  unsigned int size;
  compat_uptr_t ifs_ifsu;
};

struct compat_ifreq {
  union {
    char ifrn_name[16];
  } ifr_ifrn;
  union {
    struct sockaddr ifru_addr;
    struct sockaddr ifru_dstaddr;
    struct sockaddr ifru_broadaddr;
    struct sockaddr ifru_netmask;
    struct sockaddr ifru_hwaddr;
    short int ifru_flags;
    compat_int_t ifru_ivalue;
    compat_int_t ifru_mtu;
    struct compat_ifmap ifru_map;
    char ifru_slave[16];
    char ifru_newname[16];
    compat_caddr_t ifru_data;
    struct compat_if_settings ifru_settings;
  } ifr_ifru;
};

struct compat_ifconf {
  compat_int_t ifc_len;
  compat_caddr_t ifcbuf;
};

enum sock_shutdown_cmd {
  SHUT_RD = 0,
  SHUT_WR = 1,
  SHUT_RDWR = 2,
};

struct compat_ethtool_rx_flow_spec {
  u32 flow_type;
  union ethtool_flow_union h_u;
  struct ethtool_flow_ext h_ext;
  union ethtool_flow_union m_u;
  struct ethtool_flow_ext m_ext;
  compat_u64 ring_cookie;
  u32 location;
} __attribute__((packed));

struct compat_ethtool_rxnfc {
  u32 cmd;
  u32 flow_type;
  compat_u64 data;
  struct compat_ethtool_rx_flow_spec fs;
  u32 rule_cnt;
  u32 rule_locs[0];
} __attribute__((packed));

struct compat_mmsghdr {
  struct compat_msghdr msg_hdr;
  compat_uint_t msg_len;
};

struct scm_ts_pktinfo {
  __u32 if_index;
  __u32 pkt_length;
  __u32 reserved[2];
};

struct sock_skb_cb {
  u32 dropcount;
};

struct sock_ee_data_rfc4884 {
  __u16 len;
  __u8 flags;
  __u8 reserved;
};

struct sock_extended_err {
  __u32 ee_errno;
  __u8 ee_origin;
  __u8 ee_type;
  __u8 ee_code;
  __u8 ee_pad;
  __u32 ee_info;
  union {
    __u32 ee_data;
    struct sock_ee_data_rfc4884 ee_rfc4884;
  };
};

struct sock_exterr_skb {
  union {
    struct inet_skb_parm h4;
    struct inet6_skb_parm h6;
  } header;
  struct sock_extended_err ee;
  u16 addr_offset;
  __be16 port;
  u8 opt_stats : 1;
  u8 unused : 7;
};

struct used_address {
  struct __kernel_sockaddr_storage name;
  unsigned int name_len;
};

struct linger {
  int l_onoff;
  int l_linger;
};

struct ucred {
  __u32 pid;
  __u32 uid;
  __u32 gid;
};

struct mmpin {
  struct user_struct* user;
  unsigned int num_pg;
};

struct ubuf_info {
  void (*callback)(struct sk_buff*, struct ubuf_info*, bool);
  union {
    struct {
      long unsigned int desc;
      void* ctx;
    };
    struct {
      u32 id;
      u16 len;
      u16 zerocopy : 1;
      u32 bytelen;
    };
  };
  refcount_t refcnt;
  u8 flags;
  struct mmpin mmp;
};

struct prot_inuse {
  int val[64];
};

struct offload_callbacks {
  struct sk_buff* (*gso_segment)(struct sk_buff*, netdev_features_t);
  struct sk_buff* (*gro_receive)(struct list_head*, struct sk_buff*);
  int (*gro_complete)(struct sk_buff*, int);
};

enum txtime_flags {
  SOF_TXTIME_DEADLINE_MODE = 1,
  SOF_TXTIME_REPORT_ERRORS = 2,
  SOF_TXTIME_FLAGS_LAST = 2,
  SOF_TXTIME_FLAGS_MASK = 3,
};

struct sock_txtime {
  __kernel_clockid_t clockid;
  __u32 flags;
};

enum sk_pacing {
  SK_PACING_NONE = 0,
  SK_PACING_NEEDED = 1,
  SK_PACING_FQ = 2,
};

struct sockcm_cookie {
  u64 transmit_time;
  u32 mark;
  u16 tsflags;
};

struct fastopen_queue {
  struct request_sock* rskq_rst_head;
  struct request_sock* rskq_rst_tail;
  spinlock_t lock;
  int qlen;
  int max_qlen;
  struct tcp_fastopen_context* ctx;
};

struct request_sock_queue {
  spinlock_t rskq_lock;
  u8 rskq_defer_accept;
  u32 synflood_warned;
  atomic_t qlen;
  atomic_t young;
  struct request_sock* rskq_accept_head;
  struct request_sock* rskq_accept_tail;
  struct fastopen_queue fastopenq;
};

struct inet_bind_bucket;

struct tcp_ulp_ops;

struct inet_connection_sock {
  struct inet_sock icsk_inet;
  struct request_sock_queue icsk_accept_queue;
  struct inet_bind_bucket* icsk_bind_hash;
  long unsigned int icsk_timeout;
  struct timer_list icsk_retransmit_timer;
  struct timer_list icsk_delack_timer;
  __u32 icsk_rto;
  __u32 icsk_rto_min;
  __u32 icsk_delack_max;
  __u32 icsk_pmtu_cookie;
  const struct tcp_congestion_ops* icsk_ca_ops;
  const struct inet_connection_sock_af_ops* icsk_af_ops;
  const struct tcp_ulp_ops* icsk_ulp_ops;
  void* icsk_ulp_data;
  void (*icsk_clean_acked)(struct sock*, u32);
  struct hlist_node icsk_listen_portaddr_node;
  unsigned int (*icsk_sync_mss)(struct sock*, u32);
  __u8 icsk_ca_state : 5;
  __u8 icsk_ca_initialized : 1;
  __u8 icsk_ca_setsockopt : 1;
  __u8 icsk_ca_dst_locked : 1;
  __u8 icsk_retransmits;
  __u8 icsk_pending;
  __u8 icsk_backoff;
  __u8 icsk_syn_retries;
  __u8 icsk_probes_out;
  __u16 icsk_ext_hdr_len;
  struct {
    __u8 pending;
    __u8 quick;
    __u8 pingpong;
    __u8 retry;
    __u32 ato;
    long unsigned int timeout;
    __u32 lrcvtime;
    __u16 last_seg_size;
    __u16 rcv_mss;
  } icsk_ack;
  struct {
    int search_high;
    int search_low;
    u32 probe_size : 31;
    u32 enabled : 1;
    u32 probe_timestamp;
  } icsk_mtup;
  u32 icsk_probes_tstamp;
  u32 icsk_user_timeout;
  u64 icsk_ca_priv[13];
};

struct inet_bind_bucket {
  possible_net_t ib_net;
  int l3mdev;
  short unsigned int port;
  signed char fastreuse;
  signed char fastreuseport;
  kuid_t fastuid;
  struct in6_addr fast_v6_rcv_saddr;
  __be32 fast_rcv_saddr;
  short unsigned int fast_sk_family;
  bool fast_ipv6_only;
  struct hlist_node node;
  struct hlist_head owners;
};

struct tcp_ulp_ops {
  struct list_head list;
  int (*init)(struct sock*);
  void (*update)(struct sock*, struct proto*, void (*)(struct sock*));
  void (*release)(struct sock*);
  int (*get_info)(const struct sock*, struct sk_buff*);
  size_t (*get_info_size)(const struct sock*);
  void (*clone)(const struct request_sock*, struct sock*, const gfp_t);
  char name[16];
  struct module* owner;
};

struct tcp_sack_block {
  u32 start_seq;
  u32 end_seq;
};

struct tcp_options_received {
  int ts_recent_stamp;
  u32 ts_recent;
  u32 rcv_tsval;
  u32 rcv_tsecr;
  u16 saw_tstamp : 1;
  u16 tstamp_ok : 1;
  u16 dsack : 1;
  u16 wscale_ok : 1;
  u16 sack_ok : 3;
  u16 smc_ok : 1;
  u16 snd_wscale : 4;
  u16 rcv_wscale : 4;
  u8 saw_unknown : 1;
  u8 unused : 7;
  u8 num_sacks;
  u16 user_mss;
  u16 mss_clamp;
};

struct tcp_rack {
  u64 mstamp;
  u32 rtt_us;
  u32 end_seq;
  u32 last_delivered;
  u8 reo_wnd_steps;
  u8 reo_wnd_persist : 5;
  u8 dsack_seen : 1;
  u8 advanced : 1;
};

struct tcp_sock_af_ops;

struct tcp_md5sig_info;

struct tcp_fastopen_request;

struct tcp_sock {
  struct inet_connection_sock inet_conn;
  u16 tcp_header_len;
  u16 gso_segs;
  __be32 pred_flags;
  u64 bytes_received;
  u32 segs_in;
  u32 data_segs_in;
  u32 rcv_nxt;
  u32 copied_seq;
  u32 rcv_wup;
  u32 snd_nxt;
  u32 segs_out;
  u32 data_segs_out;
  u64 bytes_sent;
  u64 bytes_acked;
  u32 dsack_dups;
  u32 snd_una;
  u32 snd_sml;
  u32 rcv_tstamp;
  u32 lsndtime;
  u32 last_oow_ack_time;
  u32 compressed_ack_rcv_nxt;
  u32 tsoffset;
  struct list_head tsq_node;
  struct list_head tsorted_sent_queue;
  u32 snd_wl1;
  u32 snd_wnd;
  u32 max_window;
  u32 mss_cache;
  u32 window_clamp;
  u32 rcv_ssthresh;
  struct tcp_rack rack;
  u16 advmss;
  u8 compressed_ack;
  u8 dup_ack_counter : 2;
  u8 tlp_retrans : 1;
  u8 unused : 5;
  u32 chrono_start;
  u32 chrono_stat[3];
  u8 chrono_type : 2;
  u8 rate_app_limited : 1;
  u8 fastopen_connect : 1;
  u8 fastopen_no_cookie : 1;
  u8 is_sack_reneg : 1;
  u8 fastopen_client_fail : 2;
  u8 nonagle : 4;
  u8 thin_lto : 1;
  u8 recvmsg_inq : 1;
  u8 repair : 1;
  u8 frto : 1;
  u8 repair_queue;
  u8 save_syn : 2;
  u8 syn_data : 1;
  u8 syn_fastopen : 1;
  u8 syn_fastopen_exp : 1;
  u8 syn_fastopen_ch : 1;
  u8 syn_data_acked : 1;
  u8 is_cwnd_limited : 1;
  u32 tlp_high_seq;
  u32 tcp_tx_delay;
  u64 tcp_wstamp_ns;
  u64 tcp_clock_cache;
  u64 tcp_mstamp;
  u32 srtt_us;
  u32 mdev_us;
  u32 mdev_max_us;
  u32 rttvar_us;
  u32 rtt_seq;
  struct minmax rtt_min;
  u32 packets_out;
  u32 retrans_out;
  u32 max_packets_out;
  u32 max_packets_seq;
  u16 urg_data;
  u8 ecn_flags;
  u8 keepalive_probes;
  u32 reordering;
  u32 reord_seen;
  u32 snd_up;
  struct tcp_options_received rx_opt;
  u32 snd_ssthresh;
  u32 snd_cwnd;
  u32 snd_cwnd_cnt;
  u32 snd_cwnd_clamp;
  u32 snd_cwnd_used;
  u32 snd_cwnd_stamp;
  u32 prior_cwnd;
  u32 prr_delivered;
  u32 prr_out;
  u32 delivered;
  u32 delivered_ce;
  u32 lost;
  u32 app_limited;
  u64 first_tx_mstamp;
  u64 delivered_mstamp;
  u32 rate_delivered;
  u32 rate_interval_us;
  u32 rcv_wnd;
  u32 write_seq;
  u32 notsent_lowat;
  u32 pushed_seq;
  u32 lost_out;
  u32 sacked_out;
  struct hrtimer pacing_timer;
  struct hrtimer compressed_ack_timer;
  struct sk_buff* lost_skb_hint;
  struct sk_buff* retransmit_skb_hint;
  struct rb_root out_of_order_queue;
  struct sk_buff* ooo_last_skb;
  struct tcp_sack_block duplicate_sack[1];
  struct tcp_sack_block selective_acks[4];
  struct tcp_sack_block recv_sack_cache[4];
  struct sk_buff* highest_sack;
  int lost_cnt_hint;
  u32 prior_ssthresh;
  u32 high_seq;
  u32 retrans_stamp;
  u32 undo_marker;
  int undo_retrans;
  u64 bytes_retrans;
  u32 total_retrans;
  u32 urg_seq;
  unsigned int keepalive_time;
  unsigned int keepalive_intvl;
  int linger2;
  u8 bpf_sock_ops_cb_flags;
  u16 timeout_rehash;
  u32 rcv_ooopack;
  u32 rcv_rtt_last_tsecr;
  struct {
    u32 rtt_us;
    u32 seq;
    u64 time;
  } rcv_rtt_est;
  struct {
    u32 space;
    u32 seq;
    u64 time;
  } rcvq_space;
  struct {
    u32 probe_seq_start;
    u32 probe_seq_end;
  } mtu_probe;
  u32 mtu_info;
  const struct tcp_sock_af_ops* af_specific;
  struct tcp_md5sig_info* md5sig_info;
  struct tcp_fastopen_request* fastopen_req;
  struct request_sock* fastopen_rsk;
  struct saved_syn* saved_syn;
};

struct tcp_sock_af_ops {
  struct tcp_md5sig_key* (*md5_lookup)(const struct sock*, const struct sock*);
  int (*calc_md5_hash)(
      char*,
      const struct tcp_md5sig_key*,
      const struct sock*,
      const struct sk_buff*);
  int (*md5_parse)(struct sock*, int, sockptr_t, int);
};

struct tcp_md5sig_info {
  struct hlist_head head;
  struct callback_head rcu;
};

struct tcp_fastopen_request {
  struct tcp_fastopen_cookie cookie;
  struct msghdr* data;
  size_t size;
  int copied;
  struct ubuf_info* uarg;
};

struct net_protocol {
  int (*early_demux)(struct sk_buff*);
  int (*early_demux_handler)(struct sk_buff*);
  int (*handler)(struct sk_buff*);
  int (*err_handler)(struct sk_buff*, u32);
  unsigned int no_policy : 1;
  unsigned int netns_ok : 1;
  unsigned int icmp_strict_tag_validation : 1;
};

struct inet6_protocol {
  void (*early_demux)(struct sk_buff*);
  void (*early_demux_handler)(struct sk_buff*);
  int (*handler)(struct sk_buff*);
  int (*err_handler)(
      struct sk_buff*,
      struct inet6_skb_parm*,
      u8,
      u8,
      int,
      __be32);
  unsigned int flags;
};

struct net_offload {
  struct offload_callbacks callbacks;
  unsigned int flags;
};

struct cgroup_cls_state {
  struct cgroup_subsys_state css;
  u32 classid;
};

enum {
  SK_MEMINFO_RMEM_ALLOC = 0,
  SK_MEMINFO_RCVBUF = 1,
  SK_MEMINFO_WMEM_ALLOC = 2,
  SK_MEMINFO_SNDBUF = 3,
  SK_MEMINFO_FWD_ALLOC = 4,
  SK_MEMINFO_WMEM_QUEUED = 5,
  SK_MEMINFO_OPTMEM = 6,
  SK_MEMINFO_BACKLOG = 7,
  SK_MEMINFO_DROPS = 8,
  SK_MEMINFO_VARS = 9,
};

enum sknetlink_groups {
  SKNLGRP_NONE = 0,
  SKNLGRP_INET_TCP_DESTROY = 1,
  SKNLGRP_INET_UDP_DESTROY = 2,
  SKNLGRP_INET6_TCP_DESTROY = 3,
  SKNLGRP_INET6_UDP_DESTROY = 4,
  __SKNLGRP_MAX = 5,
};

struct inet_request_sock {
  struct request_sock req;
  u16 snd_wscale : 4;
  u16 rcv_wscale : 4;
  u16 tstamp_ok : 1;
  u16 sack_ok : 1;
  u16 wscale_ok : 1;
  u16 ecn_ok : 1;
  u16 acked : 1;
  u16 no_srccheck : 1;
  u16 smc_ok : 1;
  u32 ir_mark;
  union {
    struct ip_options_rcu* ireq_opt;
    struct {
      struct ipv6_txoptions* ipv6_opt;
      struct sk_buff* pktopts;
    };
  };
};

struct tcp_request_sock {
  struct inet_request_sock req;
  const struct tcp_request_sock_ops* af_specific;
  u64 snt_synack;
  bool tfo_listener;
  bool is_mptcp;
  u32 txhash;
  u32 rcv_isn;
  u32 snt_isn;
  u32 ts_off;
  u32 last_oow_ack_time;
  u32 rcv_nxt;
  u8 syn_tos;
};

enum {
  SKBFL_ZEROCOPY_ENABLE = 1,
  SKBFL_SHARED_FRAG = 2,
};

enum {
  SKB_FCLONE_UNAVAILABLE = 0,
  SKB_FCLONE_ORIG = 1,
  SKB_FCLONE_CLONE = 2,
};

struct sk_buff_fclones {
  struct sk_buff skb1;
  struct sk_buff skb2;
  refcount_t fclone_ref;
};

struct skb_seq_state {
  __u32 lower_offset;
  __u32 upper_offset;
  __u32 frag_idx;
  __u32 stepped_offset;
  struct sk_buff* root_skb;
  struct sk_buff* cur_skb;
  __u8* frag_data;
  __u32 frag_off;
};

struct skb_gso_cb {
  union {
    int mac_offset;
    int data_offset;
  };
  int encap_level;
  __wsum csum;
  __u16 csum_start;
};

struct ip_auth_hdr {
  __u8 nexthdr;
  __u8 hdrlen;
  __be16 reserved;
  __be32 spi;
  __be32 seq_no;
  __u8 auth_data[0];
};

struct frag_hdr {
  __u8 nexthdr;
  __u8 reserved;
  __be16 frag_off;
  __be32 identification;
};

enum {
  SCM_TSTAMP_SND = 0,
  SCM_TSTAMP_SCHED = 1,
  SCM_TSTAMP_ACK = 2,
};

struct xfrm_offload {
  struct {
    __u32 low;
    __u32 hi;
  } seq;
  __u32 flags;
  __u32 status;
  __u8 proto;
};

struct sec_path {
  int len;
  int olen;
  struct xfrm_state* xvec[6];
  struct xfrm_offload ovec[1];
};

struct mpls_shim_hdr {
  __be32 label_stack_entry;
};

struct napi_alloc_cache {
  struct page_frag_cache page;
  unsigned int skb_count;
  void* skb_cache[64];
};

typedef int (
    *sendmsg_func)(struct sock*, struct msghdr*, struct kvec*, size_t, size_t);

typedef int (*sendpage_func)(struct sock*, struct page*, int, size_t, int);

struct ahash_request___2;

struct scm_cookie {
  struct pid* pid;
  struct scm_fp_list* fp;
  struct scm_creds creds;
  u32 secid;
};

struct scm_timestamping {
  struct __kernel_old_timespec ts[3];
};

struct scm_timestamping64 {
  struct __kernel_timespec ts[3];
};

enum {
  TCA_STATS_UNSPEC = 0,
  TCA_STATS_BASIC = 1,
  TCA_STATS_RATE_EST = 2,
  TCA_STATS_QUEUE = 3,
  TCA_STATS_APP = 4,
  TCA_STATS_RATE_EST64 = 5,
  TCA_STATS_PAD = 6,
  TCA_STATS_BASIC_HW = 7,
  TCA_STATS_PKT64 = 8,
  __TCA_STATS_MAX = 9,
};

struct gnet_stats_basic {
  __u64 bytes;
  __u32 packets;
};

struct gnet_stats_rate_est {
  __u32 bps;
  __u32 pps;
};

struct gnet_stats_rate_est64 {
  __u64 bps;
  __u64 pps;
};

struct gnet_estimator {
  signed char interval;
  unsigned char ewma_log;
};

struct net_rate_estimator {
  struct gnet_stats_basic_packed* bstats;
  spinlock_t* stats_lock;
  seqcount_t* running;
  struct gnet_stats_basic_cpu* cpu_bstats;
  u8 ewma_log;
  u8 intvl_log;
  seqcount_t seq;
  u64 last_packets;
  u64 last_bytes;
  u64 avpps;
  u64 avbps;
  long unsigned int next_jiffies;
  struct timer_list timer;
  struct callback_head rcu;
};

struct rtgenmsg {
  unsigned char rtgen_family;
};

enum rtnetlink_groups {
  RTNLGRP_NONE = 0,
  RTNLGRP_LINK = 1,
  RTNLGRP_NOTIFY = 2,
  RTNLGRP_NEIGH = 3,
  RTNLGRP_TC = 4,
  RTNLGRP_IPV4_IFADDR = 5,
  RTNLGRP_IPV4_MROUTE = 6,
  RTNLGRP_IPV4_ROUTE = 7,
  RTNLGRP_IPV4_RULE = 8,
  RTNLGRP_IPV6_IFADDR = 9,
  RTNLGRP_IPV6_MROUTE = 10,
  RTNLGRP_IPV6_ROUTE = 11,
  RTNLGRP_IPV6_IFINFO = 12,
  RTNLGRP_DECnet_IFADDR = 13,
  RTNLGRP_NOP2 = 14,
  RTNLGRP_DECnet_ROUTE = 15,
  RTNLGRP_DECnet_RULE = 16,
  RTNLGRP_NOP4 = 17,
  RTNLGRP_IPV6_PREFIX = 18,
  RTNLGRP_IPV6_RULE = 19,
  RTNLGRP_ND_USEROPT = 20,
  RTNLGRP_PHONET_IFADDR = 21,
  RTNLGRP_PHONET_ROUTE = 22,
  RTNLGRP_DCB = 23,
  RTNLGRP_IPV4_NETCONF = 24,
  RTNLGRP_IPV6_NETCONF = 25,
  RTNLGRP_MDB = 26,
  RTNLGRP_MPLS_ROUTE = 27,
  RTNLGRP_NSID = 28,
  RTNLGRP_MPLS_NETCONF = 29,
  RTNLGRP_IPV4_MROUTE_R = 30,
  RTNLGRP_IPV6_MROUTE_R = 31,
  RTNLGRP_NEXTHOP = 32,
  RTNLGRP_BRVLAN = 33,
  __RTNLGRP_MAX = 34,
};

enum {
  NETNSA_NONE = 0,
  NETNSA_NSID = 1,
  NETNSA_PID = 2,
  NETNSA_FD = 3,
  NETNSA_TARGET_NSID = 4,
  NETNSA_CURRENT_NSID = 5,
  __NETNSA_MAX = 6,
};

struct pcpu_gen_cookie {
  local_t nesting;
  u64 last;
};

struct gen_cookie {
  struct pcpu_gen_cookie* local;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  atomic64_t forward_last;
  atomic64_t reverse_last;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

enum rtnl_link_flags {
  RTNL_FLAG_DOIT_UNLOCKED = 1,
};

struct net_fill_args {
  u32 portid;
  u32 seq;
  int flags;
  int cmd;
  int nsid;
  bool add_ref;
  int ref_nsid;
};

struct rtnl_net_dump_cb {
  struct net* tgt_net;
  struct net* ref_net;
  struct sk_buff* skb;
  struct net_fill_args fillargs;
  int idx;
  int s_idx;
};

enum flow_dissect_ret {
  FLOW_DISSECT_RET_OUT_GOOD = 0,
  FLOW_DISSECT_RET_OUT_BAD = 1,
  FLOW_DISSECT_RET_PROTO_AGAIN = 2,
  FLOW_DISSECT_RET_IPPROTO_AGAIN = 3,
  FLOW_DISSECT_RET_CONTINUE = 4,
};

struct flow_dissector_mpls_lse {
  u32 mpls_ttl : 8;
  u32 mpls_bos : 1;
  u32 mpls_tc : 3;
  u32 mpls_label : 20;
};

struct flow_dissector_key_mpls {
  struct flow_dissector_mpls_lse ls[7];
  u8 used_lses;
};

struct flow_dissector_key_enc_opts {
  u8 data[255];
  u8 len;
  __be16 dst_opt_type;
};

struct flow_dissector_key_arp {
  __u32 sip;
  __u32 tip;
  __u8 op;
  unsigned char sha[6];
  unsigned char tha[6];
};

struct flow_dissector_key_tcp {
  __be16 flags;
};

struct flow_dissector_key_ip {
  __u8 tos;
  __u8 ttl;
};

struct flow_dissector_key_meta {
  int ingress_ifindex;
  u16 ingress_iftype;
};

struct flow_dissector_key_ct {
  u16 ct_state;
  u16 ct_zone;
  u32 ct_mark;
  u32 ct_labels[4];
};

struct flow_dissector_key_hash {
  u32 hash;
};

struct flow_dissector_key {
  enum flow_dissector_key_id key_id;
  size_t offset;
};

struct flow_keys_basic {
  struct flow_dissector_key_control control;
  struct flow_dissector_key_basic basic;
};

struct flow_keys_digest {
  u8 data[16];
};

enum bpf_ret_code {
  BPF_OK = 0,
  BPF_DROP = 2,
  BPF_REDIRECT = 7,
  BPF_LWT_REROUTE = 128,
};

enum {
  BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG = 1,
  BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL = 2,
  BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP = 4,
};

enum {
  TCA_FLOWER_KEY_CT_FLAGS_NEW = 1,
  TCA_FLOWER_KEY_CT_FLAGS_ESTABLISHED = 2,
  TCA_FLOWER_KEY_CT_FLAGS_RELATED = 4,
  TCA_FLOWER_KEY_CT_FLAGS_TRACKED = 8,
  TCA_FLOWER_KEY_CT_FLAGS_INVALID = 16,
  TCA_FLOWER_KEY_CT_FLAGS_REPLY = 32,
  __TCA_FLOWER_KEY_CT_FLAGS_MAX = 33,
};

union tcp_word_hdr {
  struct tcphdr hdr;
  __be32 words[5];
};

struct arphdr {
  __be16 ar_hrd;
  __be16 ar_pro;
  unsigned char ar_hln;
  unsigned char ar_pln;
  __be16 ar_op;
};

enum lwtunnel_encap_types {
  LWTUNNEL_ENCAP_NONE = 0,
  LWTUNNEL_ENCAP_MPLS = 1,
  LWTUNNEL_ENCAP_IP = 2,
  LWTUNNEL_ENCAP_ILA = 3,
  LWTUNNEL_ENCAP_IP6 = 4,
  LWTUNNEL_ENCAP_SEG6 = 5,
  LWTUNNEL_ENCAP_BPF = 6,
  LWTUNNEL_ENCAP_SEG6_LOCAL = 7,
  LWTUNNEL_ENCAP_RPL = 8,
  __LWTUNNEL_ENCAP_MAX = 9,
};

struct gre_base_hdr {
  __be16 flags;
  __be16 protocol;
};

struct gre_full_hdr {
  struct gre_base_hdr fixed_header;
  __be16 csum;
  __be16 reserved1;
  __be32 key;
  __be32 seq;
};

struct pptp_gre_header {
  struct gre_base_hdr gre_hd;
  __be16 payload_len;
  __be16 call_id;
  __be32 seq;
  __be32 ack;
};

struct tipc_basic_hdr {
  __be32 w[4];
};

struct icmphdr {
  __u8 type;
  __u8 code;
  __sum16 checksum;
  union {
    struct {
      __be16 id;
      __be16 sequence;
    } echo;
    __be32 gateway;
    struct {
      __be16 __unused;
      __be16 mtu;
    } frag;
    __u8 reserved[4];
  } un;
};

enum l2tp_debug_flags {
  L2TP_MSG_DEBUG = 1,
  L2TP_MSG_CONTROL = 2,
  L2TP_MSG_SEQ = 4,
  L2TP_MSG_DATA = 8,
};

struct pppoe_tag {
  __be16 tag_type;
  __be16 tag_len;
  char tag_data[0];
};

struct pppoe_hdr {
  __u8 type : 4;
  __u8 ver : 4;
  __u8 code;
  __be16 sid;
  __be16 length;
  struct pppoe_tag tag[0];
};

struct mpls_label {
  __be32 entry;
};

enum batadv_packettype {
  BATADV_IV_OGM = 0,
  BATADV_BCAST = 1,
  BATADV_CODED = 2,
  BATADV_ELP = 3,
  BATADV_OGM2 = 4,
  BATADV_UNICAST = 64,
  BATADV_UNICAST_FRAG = 65,
  BATADV_UNICAST_4ADDR = 66,
  BATADV_ICMP = 67,
  BATADV_UNICAST_TVLV = 68,
};

struct batadv_unicast_packet {
  __u8 packet_type;
  __u8 version;
  __u8 ttl;
  __u8 ttvn;
  __u8 dest[6];
};

struct nf_conntrack_l4proto___2 {
  u_int8_t l4proto;
  bool allow_clash;
  u16 nlattr_size;
  bool (*can_early_drop)(const struct nf_conn*);
  int (*to_nlattr)(struct sk_buff*, struct nlattr*, struct nf_conn*, bool);
  int (*from_nlattr)(struct nlattr**, struct nf_conn*);
  int (*tuple_to_nlattr)(struct sk_buff*, const struct nf_conntrack_tuple*);
  unsigned int (*nlattr_tuple_size)();
  int (
      *nlattr_to_tuple)(struct nlattr**, struct nf_conntrack_tuple*, u_int32_t);
  const struct nla_policy* nla_policy;
  struct {
    int (*nlattr_to_obj)(struct nlattr**, struct net*, void*);
    int (*obj_to_nlattr)(struct sk_buff*, const void*);
    u16 obj_size;
    u16 nlattr_max;
    const struct nla_policy* nla_policy;
  } ctnl_timeout;
};

struct nf_conn_labels {
  long unsigned int bits[2];
};

struct _flow_keys_digest_data {
  __be16 n_proto;
  u8 ip_proto;
  u8 padding;
  __be32 ports;
  __be32 src;
  __be32 dst;
};

struct ipv4_devconf {
  void* sysctl;
  int data[32];
  long unsigned int state[1];
};

enum {
  IF_OPER_UNKNOWN = 0,
  IF_OPER_NOTPRESENT = 1,
  IF_OPER_DOWN = 2,
  IF_OPER_LOWERLAYERDOWN = 3,
  IF_OPER_TESTING = 4,
  IF_OPER_DORMANT = 5,
  IF_OPER_UP = 6,
};

struct netdev_boot_setup {
  char name[16];
  struct ifmap map;
};

enum gro_result {
  GRO_MERGED = 0,
  GRO_MERGED_FREE = 1,
  GRO_HELD = 2,
  GRO_NORMAL = 3,
  GRO_CONSUMED = 4,
};

typedef enum gro_result gro_result_t;

struct bpf_xdp_link {
  struct bpf_link link;
  struct net_device* dev;
  int flags;
};

struct in_ifaddr;

struct ip_mc_list;

struct in_device {
  struct net_device* dev;
  refcount_t refcnt;
  int dead;
  struct in_ifaddr* ifa_list;
  struct ip_mc_list* mc_list;
  struct ip_mc_list** mc_hash;
  int mc_count;
  spinlock_t mc_tomb_lock;
  struct ip_mc_list* mc_tomb;
  long unsigned int mr_v1_seen;
  long unsigned int mr_v2_seen;
  long unsigned int mr_maxdelay;
  long unsigned int mr_qi;
  long unsigned int mr_qri;
  unsigned char mr_qrv;
  unsigned char mr_gq_running;
  u32 mr_ifc_count;
  struct timer_list mr_gq_timer;
  struct timer_list mr_ifc_timer;
  struct neigh_parms* arp_parms;
  struct ipv4_devconf cnf;
  struct callback_head callback_head;
};

struct packet_offload {
  __be16 type;
  u16 priority;
  struct offload_callbacks callbacks;
  struct list_head list;
};

struct netdev_notifier_info_ext {
  struct netdev_notifier_info info;
  union {
    u32 mtu;
  } ext;
};

struct netdev_notifier_change_info {
  struct netdev_notifier_info info;
  unsigned int flags_changed;
};

struct netdev_notifier_pre_changeaddr_info {
  struct netdev_notifier_info info;
  const unsigned char* dev_addr;
};

typedef int (*bpf_op_t)(struct net_device*, struct netdev_bpf*);

enum {
  NESTED_SYNC_IMM_BIT = 0,
  NESTED_SYNC_TODO_BIT = 1,
};

enum qdisc_state_t {
  __QDISC_STATE_SCHED = 0,
  __QDISC_STATE_DEACTIVATED = 1,
  __QDISC_STATE_MISSED = 2,
};

enum {
  IPV4_DEVCONF_FORWARDING = 1,
  IPV4_DEVCONF_MC_FORWARDING = 2,
  IPV4_DEVCONF_PROXY_ARP = 3,
  IPV4_DEVCONF_ACCEPT_REDIRECTS = 4,
  IPV4_DEVCONF_SECURE_REDIRECTS = 5,
  IPV4_DEVCONF_SEND_REDIRECTS = 6,
  IPV4_DEVCONF_SHARED_MEDIA = 7,
  IPV4_DEVCONF_RP_FILTER = 8,
  IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE = 9,
  IPV4_DEVCONF_BOOTP_RELAY = 10,
  IPV4_DEVCONF_LOG_MARTIANS = 11,
  IPV4_DEVCONF_TAG = 12,
  IPV4_DEVCONF_ARPFILTER = 13,
  IPV4_DEVCONF_MEDIUM_ID = 14,
  IPV4_DEVCONF_NOXFRM = 15,
  IPV4_DEVCONF_NOPOLICY = 16,
  IPV4_DEVCONF_FORCE_IGMP_VERSION = 17,
  IPV4_DEVCONF_ARP_ANNOUNCE = 18,
  IPV4_DEVCONF_ARP_IGNORE = 19,
  IPV4_DEVCONF_PROMOTE_SECONDARIES = 20,
  IPV4_DEVCONF_ARP_ACCEPT = 21,
  IPV4_DEVCONF_ARP_NOTIFY = 22,
  IPV4_DEVCONF_ACCEPT_LOCAL = 23,
  IPV4_DEVCONF_SRC_VMARK = 24,
  IPV4_DEVCONF_PROXY_ARP_PVLAN = 25,
  IPV4_DEVCONF_ROUTE_LOCALNET = 26,
  IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL = 27,
  IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL = 28,
  IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN = 29,
  IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST = 30,
  IPV4_DEVCONF_DROP_GRATUITOUS_ARP = 31,
  IPV4_DEVCONF_BC_FORWARDING = 32,
  __IPV4_DEVCONF_MAX = 33,
};

struct in_ifaddr {
  struct hlist_node hash;
  struct in_ifaddr* ifa_next;
  struct in_device* ifa_dev;
  struct callback_head callback_head;
  __be32 ifa_local;
  __be32 ifa_address;
  __be32 ifa_mask;
  __u32 ifa_rt_priority;
  __be32 ifa_broadcast;
  unsigned char ifa_scope;
  unsigned char ifa_prefixlen;
  __u32 ifa_flags;
  char ifa_label[16];
  __u32 ifa_valid_lft;
  __u32 ifa_preferred_lft;
  long unsigned int ifa_cstamp;
  long unsigned int ifa_tstamp;
};

struct dev_kfree_skb_cb {
  enum skb_free_reason reason;
};

struct netdev_adjacent {
  struct net_device* dev;
  bool master;
  bool ignore;
  u16 ref_nr;
  void* private;
  struct list_head list;
  struct callback_head rcu;
};

struct xfrm_dst {
  union {
    struct dst_entry dst;
    struct rtable rt;
    struct rt6_info rt6;
  } u;
  struct dst_entry* route;
  struct dst_entry* child;
  struct dst_entry* path;
  struct xfrm_policy* pols[2];
  int num_pols;
  int num_xfrms;
  u32 xfrm_genid;
  u32 policy_genid;
  u32 route_mtu_cached;
  u32 child_mtu_cached;
  u32 route_cookie;
  u32 path_cookie;
};

enum {
  NDA_UNSPEC = 0,
  NDA_DST = 1,
  NDA_LLADDR = 2,
  NDA_CACHEINFO = 3,
  NDA_PROBES = 4,
  NDA_VLAN = 5,
  NDA_PORT = 6,
  NDA_VNI = 7,
  NDA_IFINDEX = 8,
  NDA_MASTER = 9,
  NDA_LINK_NETNSID = 10,
  NDA_SRC_VNI = 11,
  NDA_PROTOCOL = 12,
  NDA_NH_ID = 13,
  NDA_FDB_EXT_ATTRS = 14,
  __NDA_MAX = 15,
};

struct nda_cacheinfo {
  __u32 ndm_confirmed;
  __u32 ndm_used;
  __u32 ndm_updated;
  __u32 ndm_refcnt;
};

struct ndt_stats {
  __u64 ndts_allocs;
  __u64 ndts_destroys;
  __u64 ndts_hash_grows;
  __u64 ndts_res_failed;
  __u64 ndts_lookups;
  __u64 ndts_hits;
  __u64 ndts_rcv_probes_mcast;
  __u64 ndts_rcv_probes_ucast;
  __u64 ndts_periodic_gc_runs;
  __u64 ndts_forced_gc_runs;
  __u64 ndts_table_fulls;
};

enum {
  NDTPA_UNSPEC = 0,
  NDTPA_IFINDEX = 1,
  NDTPA_REFCNT = 2,
  NDTPA_REACHABLE_TIME = 3,
  NDTPA_BASE_REACHABLE_TIME = 4,
  NDTPA_RETRANS_TIME = 5,
  NDTPA_GC_STALETIME = 6,
  NDTPA_DELAY_PROBE_TIME = 7,
  NDTPA_QUEUE_LEN = 8,
  NDTPA_APP_PROBES = 9,
  NDTPA_UCAST_PROBES = 10,
  NDTPA_MCAST_PROBES = 11,
  NDTPA_ANYCAST_DELAY = 12,
  NDTPA_PROXY_DELAY = 13,
  NDTPA_PROXY_QLEN = 14,
  NDTPA_LOCKTIME = 15,
  NDTPA_QUEUE_LENBYTES = 16,
  NDTPA_MCAST_REPROBES = 17,
  NDTPA_PAD = 18,
  __NDTPA_MAX = 19,
};

struct ndtmsg {
  __u8 ndtm_family;
  __u8 ndtm_pad1;
  __u16 ndtm_pad2;
};

struct ndt_config {
  __u16 ndtc_key_len;
  __u16 ndtc_entry_size;
  __u32 ndtc_entries;
  __u32 ndtc_last_flush;
  __u32 ndtc_last_rand;
  __u32 ndtc_hash_rnd;
  __u32 ndtc_hash_mask;
  __u32 ndtc_hash_chain_gc;
  __u32 ndtc_proxy_qlen;
};

enum {
  NDTA_UNSPEC = 0,
  NDTA_NAME = 1,
  NDTA_THRESH1 = 2,
  NDTA_THRESH2 = 3,
  NDTA_THRESH3 = 4,
  NDTA_CONFIG = 5,
  NDTA_PARMS = 6,
  NDTA_STATS = 7,
  NDTA_GC_INTERVAL = 8,
  NDTA_PAD = 9,
  __NDTA_MAX = 10,
};

enum {
  RTN_UNSPEC = 0,
  RTN_UNICAST = 1,
  RTN_LOCAL = 2,
  RTN_BROADCAST = 3,
  RTN_ANYCAST = 4,
  RTN_MULTICAST = 5,
  RTN_BLACKHOLE = 6,
  RTN_UNREACHABLE = 7,
  RTN_PROHIBIT = 8,
  RTN_THROW = 9,
  RTN_NAT = 10,
  RTN_XRESOLVE = 11,
  __RTN_MAX = 12,
};

enum {
  NEIGH_ARP_TABLE = 0,
  NEIGH_ND_TABLE = 1,
  NEIGH_DN_TABLE = 2,
  NEIGH_NR_TABLES = 3,
  NEIGH_LINK_TABLE = 3,
};

struct neigh_seq_state {
  struct seq_net_private p;
  struct neigh_table* tbl;
  struct neigh_hash_table* nht;
  void* (*neigh_sub_iter)(struct neigh_seq_state*, struct neighbour*, loff_t*);
  unsigned int bucket;
  unsigned int flags;
};

struct neighbour_cb {
  long unsigned int sched_next;
  unsigned int flags;
};

enum netevent_notif_type {
  NETEVENT_NEIGH_UPDATE = 1,
  NETEVENT_REDIRECT = 2,
  NETEVENT_DELAY_PROBE_TIME_UPDATE = 3,
  NETEVENT_IPV4_MPATH_HASH_UPDATE = 4,
  NETEVENT_IPV6_MPATH_HASH_UPDATE = 5,
  NETEVENT_IPV4_FWD_UPDATE_PRIORITY_UPDATE = 6,
};

struct neigh_dump_filter {
  int master_idx;
  int dev_idx;
};

struct neigh_sysctl_table {
  struct ctl_table_header* sysctl_header;
  struct ctl_table neigh_vars[21];
};

struct netlink_dump_control {
  int (*start)(struct netlink_callback*);
  int (*dump)(struct sk_buff*, struct netlink_callback*);
  int (*done)(struct netlink_callback*);
  void* data;
  struct module* module;
  u32 min_dump_alloc;
};

struct rtnl_link_stats {
  __u32 rx_packets;
  __u32 tx_packets;
  __u32 rx_bytes;
  __u32 tx_bytes;
  __u32 rx_errors;
  __u32 tx_errors;
  __u32 rx_dropped;
  __u32 tx_dropped;
  __u32 multicast;
  __u32 collisions;
  __u32 rx_length_errors;
  __u32 rx_over_errors;
  __u32 rx_crc_errors;
  __u32 rx_frame_errors;
  __u32 rx_fifo_errors;
  __u32 rx_missed_errors;
  __u32 tx_aborted_errors;
  __u32 tx_carrier_errors;
  __u32 tx_fifo_errors;
  __u32 tx_heartbeat_errors;
  __u32 tx_window_errors;
  __u32 rx_compressed;
  __u32 tx_compressed;
  __u32 rx_nohandler;
};

struct rtnl_link_ifmap {
  __u64 mem_start;
  __u64 mem_end;
  __u64 base_addr;
  __u16 irq;
  __u8 dma;
  __u8 port;
};

enum {
  IFLA_PROTO_DOWN_REASON_UNSPEC = 0,
  IFLA_PROTO_DOWN_REASON_MASK = 1,
  IFLA_PROTO_DOWN_REASON_VALUE = 2,
  __IFLA_PROTO_DOWN_REASON_CNT = 3,
  IFLA_PROTO_DOWN_REASON_MAX = 2,
};

enum {
  IFLA_BRPORT_UNSPEC = 0,
  IFLA_BRPORT_STATE = 1,
  IFLA_BRPORT_PRIORITY = 2,
  IFLA_BRPORT_COST = 3,
  IFLA_BRPORT_MODE = 4,
  IFLA_BRPORT_GUARD = 5,
  IFLA_BRPORT_PROTECT = 6,
  IFLA_BRPORT_FAST_LEAVE = 7,
  IFLA_BRPORT_LEARNING = 8,
  IFLA_BRPORT_UNICAST_FLOOD = 9,
  IFLA_BRPORT_PROXYARP = 10,
  IFLA_BRPORT_LEARNING_SYNC = 11,
  IFLA_BRPORT_PROXYARP_WIFI = 12,
  IFLA_BRPORT_ROOT_ID = 13,
  IFLA_BRPORT_BRIDGE_ID = 14,
  IFLA_BRPORT_DESIGNATED_PORT = 15,
  IFLA_BRPORT_DESIGNATED_COST = 16,
  IFLA_BRPORT_ID = 17,
  IFLA_BRPORT_NO = 18,
  IFLA_BRPORT_TOPOLOGY_CHANGE_ACK = 19,
  IFLA_BRPORT_CONFIG_PENDING = 20,
  IFLA_BRPORT_MESSAGE_AGE_TIMER = 21,
  IFLA_BRPORT_FORWARD_DELAY_TIMER = 22,
  IFLA_BRPORT_HOLD_TIMER = 23,
  IFLA_BRPORT_FLUSH = 24,
  IFLA_BRPORT_MULTICAST_ROUTER = 25,
  IFLA_BRPORT_PAD = 26,
  IFLA_BRPORT_MCAST_FLOOD = 27,
  IFLA_BRPORT_MCAST_TO_UCAST = 28,
  IFLA_BRPORT_VLAN_TUNNEL = 29,
  IFLA_BRPORT_BCAST_FLOOD = 30,
  IFLA_BRPORT_GROUP_FWD_MASK = 31,
  IFLA_BRPORT_NEIGH_SUPPRESS = 32,
  IFLA_BRPORT_ISOLATED = 33,
  IFLA_BRPORT_BACKUP_PORT = 34,
  IFLA_BRPORT_MRP_RING_OPEN = 35,
  IFLA_BRPORT_MRP_IN_OPEN = 36,
  IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT = 37,
  IFLA_BRPORT_MCAST_EHT_HOSTS_CNT = 38,
  __IFLA_BRPORT_MAX = 39,
};

enum {
  IFLA_INFO_UNSPEC = 0,
  IFLA_INFO_KIND = 1,
  IFLA_INFO_DATA = 2,
  IFLA_INFO_XSTATS = 3,
  IFLA_INFO_SLAVE_KIND = 4,
  IFLA_INFO_SLAVE_DATA = 5,
  __IFLA_INFO_MAX = 6,
};

enum {
  IFLA_VF_INFO_UNSPEC = 0,
  IFLA_VF_INFO = 1,
  __IFLA_VF_INFO_MAX = 2,
};

enum {
  IFLA_VF_UNSPEC = 0,
  IFLA_VF_MAC = 1,
  IFLA_VF_VLAN = 2,
  IFLA_VF_TX_RATE = 3,
  IFLA_VF_SPOOFCHK = 4,
  IFLA_VF_LINK_STATE = 5,
  IFLA_VF_RATE = 6,
  IFLA_VF_RSS_QUERY_EN = 7,
  IFLA_VF_STATS = 8,
  IFLA_VF_TRUST = 9,
  IFLA_VF_IB_NODE_GUID = 10,
  IFLA_VF_IB_PORT_GUID = 11,
  IFLA_VF_VLAN_LIST = 12,
  IFLA_VF_BROADCAST = 13,
  __IFLA_VF_MAX = 14,
};

struct ifla_vf_mac {
  __u32 vf;
  __u8 mac[32];
};

struct ifla_vf_broadcast {
  __u8 broadcast[32];
};

struct ifla_vf_vlan {
  __u32 vf;
  __u32 vlan;
  __u32 qos;
};

enum {
  IFLA_VF_VLAN_INFO_UNSPEC = 0,
  IFLA_VF_VLAN_INFO = 1,
  __IFLA_VF_VLAN_INFO_MAX = 2,
};

struct ifla_vf_vlan_info {
  __u32 vf;
  __u32 vlan;
  __u32 qos;
  __be16 vlan_proto;
};

struct ifla_vf_tx_rate {
  __u32 vf;
  __u32 rate;
};

struct ifla_vf_rate {
  __u32 vf;
  __u32 min_tx_rate;
  __u32 max_tx_rate;
};

struct ifla_vf_spoofchk {
  __u32 vf;
  __u32 setting;
};

struct ifla_vf_link_state {
  __u32 vf;
  __u32 link_state;
};

struct ifla_vf_rss_query_en {
  __u32 vf;
  __u32 setting;
};

enum {
  IFLA_VF_STATS_RX_PACKETS = 0,
  IFLA_VF_STATS_TX_PACKETS = 1,
  IFLA_VF_STATS_RX_BYTES = 2,
  IFLA_VF_STATS_TX_BYTES = 3,
  IFLA_VF_STATS_BROADCAST = 4,
  IFLA_VF_STATS_MULTICAST = 5,
  IFLA_VF_STATS_PAD = 6,
  IFLA_VF_STATS_RX_DROPPED = 7,
  IFLA_VF_STATS_TX_DROPPED = 8,
  __IFLA_VF_STATS_MAX = 9,
};

struct ifla_vf_trust {
  __u32 vf;
  __u32 setting;
};

enum {
  IFLA_VF_PORT_UNSPEC = 0,
  IFLA_VF_PORT = 1,
  __IFLA_VF_PORT_MAX = 2,
};

enum {
  IFLA_PORT_UNSPEC = 0,
  IFLA_PORT_VF = 1,
  IFLA_PORT_PROFILE = 2,
  IFLA_PORT_VSI_TYPE = 3,
  IFLA_PORT_INSTANCE_UUID = 4,
  IFLA_PORT_HOST_UUID = 5,
  IFLA_PORT_REQUEST = 6,
  IFLA_PORT_RESPONSE = 7,
  __IFLA_PORT_MAX = 8,
};

struct if_stats_msg {
  __u8 family;
  __u8 pad1;
  __u16 pad2;
  __u32 ifindex;
  __u32 filter_mask;
};

enum {
  IFLA_STATS_UNSPEC = 0,
  IFLA_STATS_LINK_64 = 1,
  IFLA_STATS_LINK_XSTATS = 2,
  IFLA_STATS_LINK_XSTATS_SLAVE = 3,
  IFLA_STATS_LINK_OFFLOAD_XSTATS = 4,
  IFLA_STATS_AF_SPEC = 5,
  __IFLA_STATS_MAX = 6,
};

enum {
  IFLA_OFFLOAD_XSTATS_UNSPEC = 0,
  IFLA_OFFLOAD_XSTATS_CPU_HIT = 1,
  __IFLA_OFFLOAD_XSTATS_MAX = 2,
};

enum {
  XDP_ATTACHED_NONE = 0,
  XDP_ATTACHED_DRV = 1,
  XDP_ATTACHED_SKB = 2,
  XDP_ATTACHED_HW = 3,
  XDP_ATTACHED_MULTI = 4,
};

enum {
  IFLA_XDP_UNSPEC = 0,
  IFLA_XDP_FD = 1,
  IFLA_XDP_ATTACHED = 2,
  IFLA_XDP_FLAGS = 3,
  IFLA_XDP_PROG_ID = 4,
  IFLA_XDP_DRV_PROG_ID = 5,
  IFLA_XDP_SKB_PROG_ID = 6,
  IFLA_XDP_HW_PROG_ID = 7,
  IFLA_XDP_EXPECTED_FD = 8,
  __IFLA_XDP_MAX = 9,
};

enum {
  IFLA_EVENT_NONE = 0,
  IFLA_EVENT_REBOOT = 1,
  IFLA_EVENT_FEATURES = 2,
  IFLA_EVENT_BONDING_FAILOVER = 3,
  IFLA_EVENT_NOTIFY_PEERS = 4,
  IFLA_EVENT_IGMP_RESEND = 5,
  IFLA_EVENT_BONDING_OPTIONS = 6,
};

enum rtattr_type_t {
  RTA_UNSPEC = 0,
  RTA_DST = 1,
  RTA_SRC = 2,
  RTA_IIF = 3,
  RTA_OIF = 4,
  RTA_GATEWAY = 5,
  RTA_PRIORITY = 6,
  RTA_PREFSRC = 7,
  RTA_METRICS = 8,
  RTA_MULTIPATH = 9,
  RTA_PROTOINFO = 10,
  RTA_FLOW = 11,
  RTA_CACHEINFO = 12,
  RTA_SESSION = 13,
  RTA_MP_ALGO = 14,
  RTA_TABLE = 15,
  RTA_MARK = 16,
  RTA_MFC_STATS = 17,
  RTA_VIA = 18,
  RTA_NEWDST = 19,
  RTA_PREF = 20,
  RTA_ENCAP_TYPE = 21,
  RTA_ENCAP = 22,
  RTA_EXPIRES = 23,
  RTA_PAD = 24,
  RTA_UID = 25,
  RTA_TTL_PROPAGATE = 26,
  RTA_IP_PROTO = 27,
  RTA_SPORT = 28,
  RTA_DPORT = 29,
  RTA_NH_ID = 30,
  __RTA_MAX = 31,
};

struct rta_cacheinfo {
  __u32 rta_clntref;
  __u32 rta_lastuse;
  __s32 rta_expires;
  __u32 rta_error;
  __u32 rta_used;
  __u32 rta_id;
  __u32 rta_ts;
  __u32 rta_tsage;
};

struct ifinfomsg {
  unsigned char ifi_family;
  unsigned char __ifi_pad;
  short unsigned int ifi_type;
  int ifi_index;
  unsigned int ifi_flags;
  unsigned int ifi_change;
};

typedef int (*rtnl_doit_func)(
    struct sk_buff*,
    struct nlmsghdr*,
    struct netlink_ext_ack*);

typedef int (*rtnl_dumpit_func)(struct sk_buff*, struct netlink_callback*);

struct rtnl_af_ops {
  struct list_head list;
  int family;
  int (*fill_link_af)(struct sk_buff*, const struct net_device*, u32);
  size_t (*get_link_af_size)(const struct net_device*, u32);
  int (*validate_link_af)(const struct net_device*, const struct nlattr*);
  int (*set_link_af)(
      struct net_device*,
      const struct nlattr*,
      struct netlink_ext_ack*);
  int (*fill_stats_af)(struct sk_buff*, const struct net_device*);
  size_t (*get_stats_af_size)(const struct net_device*);
};

struct rtnl_link {
  rtnl_doit_func doit;
  rtnl_dumpit_func dumpit;
  struct module* owner;
  unsigned int flags;
  struct callback_head rcu;
};

enum {
  IF_LINK_MODE_DEFAULT = 0,
  IF_LINK_MODE_DORMANT = 1,
  IF_LINK_MODE_TESTING = 2,
};

enum lw_bits {
  LW_URGENT = 0,
};

struct seg6_pernet_data {
  struct mutex lock;
  struct in6_addr* tun_src;
};

enum {
  BPF_F_RECOMPUTE_CSUM = 1,
  BPF_F_INVALIDATE_HASH = 2,
};

enum {
  BPF_F_HDR_FIELD_MASK = 15,
};

enum {
  BPF_F_PSEUDO_HDR = 16,
  BPF_F_MARK_MANGLED_0 = 32,
  BPF_F_MARK_ENFORCE = 64,
};

enum {
  BPF_F_INGRESS = 1,
};

enum {
  BPF_F_TUNINFO_IPV6 = 1,
};

enum {
  BPF_F_ZERO_CSUM_TX = 2,
  BPF_F_DONT_FRAGMENT = 4,
  BPF_F_SEQ_NUMBER = 8,
};

enum {
  BPF_CSUM_LEVEL_QUERY = 0,
  BPF_CSUM_LEVEL_INC = 1,
  BPF_CSUM_LEVEL_DEC = 2,
  BPF_CSUM_LEVEL_RESET = 3,
};

enum {
  BPF_F_ADJ_ROOM_FIXED_GSO = 1,
  BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 = 2,
  BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 = 4,
  BPF_F_ADJ_ROOM_ENCAP_L4_GRE = 8,
  BPF_F_ADJ_ROOM_ENCAP_L4_UDP = 16,
  BPF_F_ADJ_ROOM_NO_CSUM_RESET = 32,
  BPF_F_ADJ_ROOM_ENCAP_L2_ETH = 64,
};

enum {
  BPF_ADJ_ROOM_ENCAP_L2_MASK = 255,
  BPF_ADJ_ROOM_ENCAP_L2_SHIFT = 56,
};

enum {
  BPF_SK_LOOKUP_F_REPLACE = 1,
  BPF_SK_LOOKUP_F_NO_REUSEPORT = 2,
};

enum bpf_adj_room_mode {
  BPF_ADJ_ROOM_NET = 0,
  BPF_ADJ_ROOM_MAC = 1,
};

enum bpf_hdr_start_off {
  BPF_HDR_START_MAC = 0,
  BPF_HDR_START_NET = 1,
};

enum bpf_lwt_encap_mode {
  BPF_LWT_ENCAP_SEG6 = 0,
  BPF_LWT_ENCAP_SEG6_INLINE = 1,
  BPF_LWT_ENCAP_IP = 2,
};

struct bpf_tunnel_key {
  __u32 tunnel_id;
  union {
    __u32 remote_ipv4;
    __u32 remote_ipv6[4];
  };
  __u8 tunnel_tos;
  __u8 tunnel_ttl;
  __u16 tunnel_ext;
  __u32 tunnel_label;
};

struct bpf_xfrm_state {
  __u32 reqid;
  __u32 spi;
  __u16 family;
  __u16 ext;
  union {
    __u32 remote_ipv4;
    __u32 remote_ipv6[4];
  };
};

struct bpf_tcp_sock {
  __u32 snd_cwnd;
  __u32 srtt_us;
  __u32 rtt_min;
  __u32 snd_ssthresh;
  __u32 rcv_nxt;
  __u32 snd_nxt;
  __u32 snd_una;
  __u32 mss_cache;
  __u32 ecn_flags;
  __u32 rate_delivered;
  __u32 rate_interval_us;
  __u32 packets_out;
  __u32 retrans_out;
  __u32 total_retrans;
  __u32 segs_in;
  __u32 data_segs_in;
  __u32 segs_out;
  __u32 data_segs_out;
  __u32 lost_out;
  __u32 sacked_out;
  __u64 bytes_received;
  __u64 bytes_acked;
  __u32 dsack_dups;
  __u32 delivered;
  __u32 delivered_ce;
  __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
  union {
    struct {
      __be32 saddr;
      __be32 daddr;
      __be16 sport;
      __be16 dport;
    } ipv4;
    struct {
      __be32 saddr[4];
      __be32 daddr[4];
      __be16 sport;
      __be16 dport;
    } ipv6;
  };
};

struct bpf_xdp_sock {
  __u32 queue_id;
};

enum {
  BPF_SOCK_OPS_RTO_CB_FLAG = 1,
  BPF_SOCK_OPS_RETRANS_CB_FLAG = 2,
  BPF_SOCK_OPS_STATE_CB_FLAG = 4,
  BPF_SOCK_OPS_RTT_CB_FLAG = 8,
  BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG = 16,
  BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = 32,
  BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG = 64,
  BPF_SOCK_OPS_ALL_CB_FLAGS = 127,
};

enum {
  BPF_SOCK_OPS_VOID = 0,
  BPF_SOCK_OPS_TIMEOUT_INIT = 1,
  BPF_SOCK_OPS_RWND_INIT = 2,
  BPF_SOCK_OPS_TCP_CONNECT_CB = 3,
  BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB = 4,
  BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB = 5,
  BPF_SOCK_OPS_NEEDS_ECN = 6,
  BPF_SOCK_OPS_BASE_RTT = 7,
  BPF_SOCK_OPS_RTO_CB = 8,
  BPF_SOCK_OPS_RETRANS_CB = 9,
  BPF_SOCK_OPS_STATE_CB = 10,
  BPF_SOCK_OPS_TCP_LISTEN_CB = 11,
  BPF_SOCK_OPS_RTT_CB = 12,
  BPF_SOCK_OPS_PARSE_HDR_OPT_CB = 13,
  BPF_SOCK_OPS_HDR_OPT_LEN_CB = 14,
  BPF_SOCK_OPS_WRITE_HDR_OPT_CB = 15,
};

enum {
  TCP_BPF_IW = 1001,
  TCP_BPF_SNDCWND_CLAMP = 1002,
  TCP_BPF_DELACK_MAX = 1003,
  TCP_BPF_RTO_MIN = 1004,
  TCP_BPF_SYN = 1005,
  TCP_BPF_SYN_IP = 1006,
  TCP_BPF_SYN_MAC = 1007,
};

enum {
  BPF_LOAD_HDR_OPT_TCP_SYN = 1,
};

enum {
  BPF_FIB_LOOKUP_DIRECT = 1,
  BPF_FIB_LOOKUP_OUTPUT = 2,
};

enum {
  BPF_FIB_LKUP_RET_SUCCESS = 0,
  BPF_FIB_LKUP_RET_BLACKHOLE = 1,
  BPF_FIB_LKUP_RET_UNREACHABLE = 2,
  BPF_FIB_LKUP_RET_PROHIBIT = 3,
  BPF_FIB_LKUP_RET_NOT_FWDED = 4,
  BPF_FIB_LKUP_RET_FWD_DISABLED = 5,
  BPF_FIB_LKUP_RET_UNSUPP_LWT = 6,
  BPF_FIB_LKUP_RET_NO_NEIGH = 7,
  BPF_FIB_LKUP_RET_FRAG_NEEDED = 8,
};

struct bpf_fib_lookup {
  __u8 family;
  __u8 l4_protocol;
  __be16 sport;
  __be16 dport;
  union {
    __u16 tot_len;
    __u16 mtu_result;
  };
  __u32 ifindex;
  union {
    __u8 tos;
    __be32 flowinfo;
    __u32 rt_metric;
  };
  union {
    __be32 ipv4_src;
    __u32 ipv6_src[4];
  };
  union {
    __be32 ipv4_dst;
    __u32 ipv6_dst[4];
  };
  __be16 h_vlan_proto;
  __be16 h_vlan_TCI;
  __u8 smac[6];
  __u8 dmac[6];
};

struct bpf_redir_neigh {
  __u32 nh_family;
  union {
    __be32 ipv4_nh;
    __u32 ipv6_nh[4];
  };
};

enum bpf_check_mtu_flags {
  BPF_MTU_CHK_SEGS = 1,
};

enum bpf_check_mtu_ret {
  BPF_MTU_CHK_RET_SUCCESS = 0,
  BPF_MTU_CHK_RET_FRAG_NEEDED = 1,
  BPF_MTU_CHK_RET_SEGS_TOOBIG = 2,
};

enum rt_scope_t {
  RT_SCOPE_UNIVERSE = 0,
  RT_SCOPE_SITE = 200,
  RT_SCOPE_LINK = 253,
  RT_SCOPE_HOST = 254,
  RT_SCOPE_NOWHERE = 255,
};

enum rt_class_t {
  RT_TABLE_UNSPEC = 0,
  RT_TABLE_COMPAT = 252,
  RT_TABLE_DEFAULT = 253,
  RT_TABLE_MAIN = 254,
  RT_TABLE_LOCAL = 255,
  RT_TABLE_MAX = 4294967295,
};

typedef int (*bpf_aux_classic_check_t)(struct sock_filter*, unsigned int);

struct inet_timewait_sock {
  struct sock_common __tw_common;
  __u32 tw_mark;
  volatile unsigned char tw_substate;
  unsigned char tw_rcv_wscale;
  __be16 tw_sport;
  unsigned int tw_kill : 1;
  unsigned int tw_transparent : 1;
  unsigned int tw_flowlabel : 20;
  unsigned int tw_pad : 2;
  unsigned int tw_tos : 8;
  u32 tw_txhash;
  u32 tw_priority;
  struct timer_list tw_timer;
  struct inet_bind_bucket* tw_tb;
};

struct tcp_timewait_sock {
  struct inet_timewait_sock tw_sk;
  u32 tw_rcv_wnd;
  u32 tw_ts_offset;
  u32 tw_ts_recent;
  u32 tw_last_oow_ack_time;
  int tw_ts_recent_stamp;
  u32 tw_tx_delay;
  struct tcp_md5sig_key* tw_md5_key;
};

struct udp_sock {
  struct inet_sock inet;
  int pending;
  unsigned int corkflag;
  __u8 encap_type;
  unsigned char no_check6_tx : 1;
  unsigned char no_check6_rx : 1;
  unsigned char encap_enabled : 1;
  unsigned char gro_enabled : 1;
  unsigned char accept_udp_l4 : 1;
  unsigned char accept_udp_fraglist : 1;
  __u16 len;
  __u16 gso_size;
  __u16 pcslen;
  __u16 pcrlen;
  __u8 pcflag;
  __u8 unused[3];
  int (*encap_rcv)(struct sock*, struct sk_buff*);
  int (*encap_err_lookup)(struct sock*, struct sk_buff*);
  void (*encap_destroy)(struct sock*);
  struct sk_buff* (
      *gro_receive)(struct sock*, struct list_head*, struct sk_buff*);
  int (*gro_complete)(struct sock*, struct sk_buff*, int);
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  struct sk_buff_head reader_queue;
  int forward_deficit;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct udp6_sock {
  struct udp_sock udp;
  struct ipv6_pinfo inet6;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct tcp6_sock {
  struct tcp_sock tcp;
  struct ipv6_pinfo inet6;
};

struct fib_result {
  __be32 prefix;
  unsigned char prefixlen;
  unsigned char nh_sel;
  unsigned char type;
  unsigned char scope;
  u32 tclassid;
  struct fib_nh_common* nhc;
  struct fib_info* fi;
  struct fib_table* table;
  struct hlist_head* fa_head;
};

struct tcp_skb_cb {
  __u32 seq;
  __u32 end_seq;
  union {
    __u32 tcp_tw_isn;
    struct {
      u16 tcp_gso_segs;
      u16 tcp_gso_size;
    };
  };
  __u8 tcp_flags;
  __u8 sacked;
  __u8 ip_dsfield;
  __u8 txstamp_ack : 1;
  __u8 eor : 1;
  __u8 has_rxtstamp : 1;
  __u8 unused : 5;
  __u32 ack_seq;
  union {
    struct {
      __u32 in_flight : 30;
      __u32 is_app_limited : 1;
      __u32 unused : 1;
      __u32 delivered;
      u64 first_tx_mstamp;
      u64 delivered_mstamp;
    } tx;
    union {
      struct inet_skb_parm h4;
      struct inet6_skb_parm h6;
    } header;
  };
};

struct strp_msg {
  int full_len;
  int offset;
};

struct xdp_sock {
  struct sock sk;
  struct xsk_queue* rx;
  struct net_device* dev;
  struct xdp_umem* umem;
  struct list_head flush_node;
  struct xsk_buff_pool* pool;
  u16 queue_id;
  bool zc;
  enum {
    XSK_READY = 0,
    XSK_BOUND = 1,
    XSK_UNBOUND = 2,
  } state;
  long : 64;
  struct xsk_queue* tx;
  struct list_head tx_list;
  spinlock_t rx_lock;
  u64 rx_dropped;
  u64 rx_queue_full;
  struct list_head map_list;
  spinlock_t map_list_lock;
  struct mutex mutex;
  struct xsk_queue* fq_tmp;
  struct xsk_queue* cq_tmp;
  long : 64;
};

struct ipv6_sr_hdr {
  __u8 nexthdr;
  __u8 hdrlen;
  __u8 type;
  __u8 segments_left;
  __u8 first_segment;
  __u8 flags;
  __u16 tag;
  struct in6_addr segments[0];
};

struct seg6_bpf_srh_state {
  struct ipv6_sr_hdr* srh;
  u16 hdrlen;
  bool valid;
};

struct tls_crypto_info {
  __u16 version;
  __u16 cipher_type;
};

struct tls12_crypto_info_aes_gcm_128 {
  struct tls_crypto_info info;
  unsigned char iv[8];
  unsigned char key[16];
  unsigned char salt[4];
  unsigned char rec_seq[8];
};

struct tls12_crypto_info_aes_gcm_256 {
  struct tls_crypto_info info;
  unsigned char iv[8];
  unsigned char key[32];
  unsigned char salt[4];
  unsigned char rec_seq[8];
};

struct tls12_crypto_info_chacha20_poly1305 {
  struct tls_crypto_info info;
  unsigned char iv[12];
  unsigned char key[32];
  unsigned char salt[0];
  unsigned char rec_seq[8];
};

struct tls_sw_context_rx {
  struct crypto_aead* aead_recv;
  struct crypto_wait async_wait;
  struct strparser strp;
  struct sk_buff_head rx_list;
  void (*saved_data_ready)(struct sock*);
  struct sk_buff* recv_pkt;
  u8 control;
  u8 async_capable : 1;
  u8 decrypted : 1;
  atomic_t decrypt_pending;
  spinlock_t decrypt_compl_lock;
  bool async_notify;
};

struct cipher_context {
  char* iv;
  char* rec_seq;
};

union tls_crypto_context {
  struct tls_crypto_info info;
  union {
    struct tls12_crypto_info_aes_gcm_128 aes_gcm_128;
    struct tls12_crypto_info_aes_gcm_256 aes_gcm_256;
    struct tls12_crypto_info_chacha20_poly1305 chacha20_poly1305;
  };
};

struct tls_prot_info {
  u16 version;
  u16 cipher_type;
  u16 prepend_size;
  u16 tag_size;
  u16 overhead_size;
  u16 iv_size;
  u16 salt_size;
  u16 rec_seq_size;
  u16 aad_size;
  u16 tail_size;
};

struct tls_context {
  struct tls_prot_info prot_info;
  u8 tx_conf : 3;
  u8 rx_conf : 3;
  int (*push_pending_record)(struct sock*, int);
  void (*sk_write_space)(struct sock*);
  void* priv_ctx_tx;
  void* priv_ctx_rx;
  struct net_device* netdev;
  struct cipher_context tx;
  struct cipher_context rx;
  struct scatterlist* partially_sent_record;
  u16 partially_sent_offset;
  bool in_tcp_sendpages;
  bool pending_open_record_frags;
  struct mutex tx_lock;
  long unsigned int flags;
  struct proto* sk_proto;
  struct sock* sk;
  void (*sk_destruct)(struct sock*);
  union tls_crypto_context crypto_send;
  union tls_crypto_context crypto_recv;
  struct list_head list;
  refcount_t refcount;
  struct callback_head rcu;
};

typedef u64 (*btf_bpf_skb_get_pay_offset)(struct sk_buff*);

typedef u64 (*btf_bpf_skb_get_nlattr)(struct sk_buff*, u32, u32);

typedef u64 (*btf_bpf_skb_get_nlattr_nest)(struct sk_buff*, u32, u32);

typedef u64 (
    *btf_bpf_skb_load_helper_8)(const struct sk_buff*, const void*, int, int);

typedef u64 (*btf_bpf_skb_load_helper_8_no_cache)(const struct sk_buff*, int);

typedef u64 (
    *btf_bpf_skb_load_helper_16)(const struct sk_buff*, const void*, int, int);

typedef u64 (*btf_bpf_skb_load_helper_16_no_cache)(const struct sk_buff*, int);

typedef u64 (
    *btf_bpf_skb_load_helper_32)(const struct sk_buff*, const void*, int, int);

typedef u64 (*btf_bpf_skb_load_helper_32_no_cache)(const struct sk_buff*, int);

struct bpf_scratchpad {
  union {
    __be32 diff[128];
    u8 buff[512];
  };
};

typedef u64 (
    *btf_bpf_skb_store_bytes)(struct sk_buff*, u32, const void*, u32, u64);

typedef u64 (*btf_bpf_skb_load_bytes)(const struct sk_buff*, u32, void*, u32);

typedef u64 (*btf_bpf_flow_dissector_load_bytes)(
    const struct bpf_flow_dissector*,
    u32,
    void*,
    u32);

typedef u64 (*btf_bpf_skb_load_bytes_relative)(
    const struct sk_buff*,
    u32,
    void*,
    u32,
    u32);

typedef u64 (*btf_bpf_skb_pull_data)(struct sk_buff*, u32);

typedef u64 (*btf_bpf_sk_fullsock)(struct sock*);

typedef u64 (*btf_sk_skb_pull_data)(struct sk_buff*, u32);

typedef u64 (*btf_bpf_l3_csum_replace)(struct sk_buff*, u32, u64, u64, u64);

typedef u64 (*btf_bpf_l4_csum_replace)(struct sk_buff*, u32, u64, u64, u64);

typedef u64 (*btf_bpf_csum_diff)(__be32*, u32, __be32*, u32, __wsum);

typedef u64 (*btf_bpf_csum_update)(struct sk_buff*, __wsum);

typedef u64 (*btf_bpf_csum_level)(struct sk_buff*, u64);

enum {
  BPF_F_NEIGH = 2,
  BPF_F_PEER = 4,
  BPF_F_NEXTHOP = 8,
};

typedef u64 (*btf_bpf_clone_redirect)(struct sk_buff*, u32, u64);

typedef u64 (*btf_bpf_redirect)(u32, u64);

typedef u64 (*btf_bpf_redirect_peer)(u32, u64);

typedef u64 (*btf_bpf_redirect_neigh)(u32, struct bpf_redir_neigh*, int, u64);

typedef u64 (*btf_bpf_msg_apply_bytes)(struct sk_msg*, u32);

typedef u64 (*btf_bpf_msg_cork_bytes)(struct sk_msg*, u32);

typedef u64 (*btf_bpf_msg_pull_data)(struct sk_msg*, u32, u32, u64);

typedef u64 (*btf_bpf_msg_push_data)(struct sk_msg*, u32, u32, u64);

typedef u64 (*btf_bpf_msg_pop_data)(struct sk_msg*, u32, u32, u64);

typedef u64 (*btf_bpf_get_cgroup_classid_curr)();

typedef u64 (*btf_bpf_skb_cgroup_classid)(const struct sk_buff*);

typedef u64 (*btf_bpf_get_cgroup_classid)(const struct sk_buff*);

typedef u64 (*btf_bpf_get_route_realm)(const struct sk_buff*);

typedef u64 (*btf_bpf_get_hash_recalc)(struct sk_buff*);

typedef u64 (*btf_bpf_set_hash_invalid)(struct sk_buff*);

typedef u64 (*btf_bpf_set_hash)(struct sk_buff*, u32);

typedef u64 (*btf_bpf_skb_vlan_push)(struct sk_buff*, __be16, u16);

typedef u64 (*btf_bpf_skb_vlan_pop)(struct sk_buff*);

typedef u64 (*btf_bpf_skb_change_proto)(struct sk_buff*, __be16, u64);

typedef u64 (*btf_bpf_skb_change_type)(struct sk_buff*, u32);

typedef u64 (*btf_sk_skb_adjust_room)(struct sk_buff*, s32, u32, u64);

typedef u64 (*btf_bpf_skb_adjust_room)(struct sk_buff*, s32, u32, u64);

typedef u64 (*btf_bpf_skb_change_tail)(struct sk_buff*, u32, u64);

typedef u64 (*btf_sk_skb_change_tail)(struct sk_buff*, u32, u64);

typedef u64 (*btf_bpf_skb_change_head)(struct sk_buff*, u32, u64);

typedef u64 (*btf_sk_skb_change_head)(struct sk_buff*, u32, u64);

typedef u64 (*btf_bpf_xdp_adjust_head)(struct xdp_buff*, int);

typedef u64 (*btf_bpf_xdp_adjust_tail)(struct xdp_buff*, int);

typedef u64 (*btf_bpf_xdp_adjust_meta)(struct xdp_buff*, int);

typedef u64 (*btf_bpf_xdp_redirect)(u32, u64);

typedef u64 (*btf_bpf_xdp_redirect_map)(struct bpf_map*, u32, u64);

typedef u64 (*btf_bpf_skb_event_output)(
    struct sk_buff*,
    struct bpf_map*,
    u64,
    void*,
    u64);

typedef u64 (*btf_bpf_skb_get_tunnel_key)(
    struct sk_buff*,
    struct bpf_tunnel_key*,
    u32,
    u64);

typedef u64 (*btf_bpf_skb_get_tunnel_opt)(struct sk_buff*, u8*, u32);

typedef u64 (*btf_bpf_skb_set_tunnel_key)(
    struct sk_buff*,
    const struct bpf_tunnel_key*,
    u32,
    u64);

typedef u64 (*btf_bpf_skb_set_tunnel_opt)(struct sk_buff*, const u8*, u32);

typedef u64 (*btf_bpf_skb_under_cgroup)(struct sk_buff*, struct bpf_map*, u32);

typedef u64 (*btf_bpf_skb_cgroup_id)(const struct sk_buff*);

typedef u64 (*btf_bpf_skb_ancestor_cgroup_id)(const struct sk_buff*, int);

typedef u64 (*btf_bpf_sk_cgroup_id)(struct sock*);

typedef u64 (*btf_bpf_sk_ancestor_cgroup_id)(struct sock*, int);

typedef u64 (*btf_bpf_xdp_event_output)(
    struct xdp_buff*,
    struct bpf_map*,
    u64,
    void*,
    u64);

typedef u64 (*btf_bpf_get_socket_cookie)(struct sk_buff*);

typedef u64 (*btf_bpf_get_socket_cookie_sock_addr)(struct bpf_sock_addr_kern*);

typedef u64 (*btf_bpf_get_socket_cookie_sock)(struct sock*);

typedef u64 (*btf_bpf_get_socket_ptr_cookie)(struct sock*);

typedef u64 (*btf_bpf_get_socket_cookie_sock_ops)(struct bpf_sock_ops_kern*);

typedef u64 (*btf_bpf_get_netns_cookie_sock)(struct sock*);

typedef u64 (*btf_bpf_get_netns_cookie_sock_addr)(struct bpf_sock_addr_kern*);

typedef u64 (*btf_bpf_get_netns_cookie_sock_ops)(struct bpf_sock_ops_kern*);

typedef u64 (*btf_bpf_get_netns_cookie_sk_msg)(struct sk_msg*);

typedef u64 (*btf_bpf_get_socket_uid)(struct sk_buff*);

typedef u64 (*btf_bpf_sk_setsockopt)(struct sock*, int, int, char*, int);

typedef u64 (*btf_bpf_sk_getsockopt)(struct sock*, int, int, char*, int);

typedef u64 (*btf_bpf_sock_addr_setsockopt)(
    struct bpf_sock_addr_kern*,
    int,
    int,
    char*,
    int);

typedef u64 (*btf_bpf_sock_addr_getsockopt)(
    struct bpf_sock_addr_kern*,
    int,
    int,
    char*,
    int);

typedef u64 (*btf_bpf_sock_ops_setsockopt)(
    struct bpf_sock_ops_kern*,
    int,
    int,
    char*,
    int);

typedef u64 (*btf_bpf_sock_ops_getsockopt)(
    struct bpf_sock_ops_kern*,
    int,
    int,
    char*,
    int);

typedef u64 (*btf_bpf_sock_ops_cb_flags_set)(struct bpf_sock_ops_kern*, int);

typedef u64 (*btf_bpf_bind)(struct bpf_sock_addr_kern*, struct sockaddr*, int);

typedef u64 (*btf_bpf_skb_get_xfrm_state)(
    struct sk_buff*,
    u32,
    struct bpf_xfrm_state*,
    u32,
    u64);

typedef u64 (*btf_bpf_xdp_fib_lookup)(
    struct xdp_buff*,
    struct bpf_fib_lookup*,
    int,
    u32);

typedef u64 (
    *btf_bpf_skb_fib_lookup)(struct sk_buff*, struct bpf_fib_lookup*, int, u32);

typedef u64 (*btf_bpf_skb_check_mtu)(struct sk_buff*, u32, u32*, s32, u64);

typedef u64 (*btf_bpf_xdp_check_mtu)(struct xdp_buff*, u32, u32*, s32, u64);

typedef u64 (*btf_bpf_lwt_in_push_encap)(struct sk_buff*, u32, void*, u32);

typedef u64 (*btf_bpf_lwt_xmit_push_encap)(struct sk_buff*, u32, void*, u32);

typedef u64 (*btf_bpf_skc_lookup_tcp)(
    struct sk_buff*,
    struct bpf_sock_tuple*,
    u32,
    u64,
    u64);

typedef u64 (*btf_bpf_sk_lookup_tcp)(
    struct sk_buff*,
    struct bpf_sock_tuple*,
    u32,
    u64,
    u64);

typedef u64 (*btf_bpf_sk_lookup_udp)(
    struct sk_buff*,
    struct bpf_sock_tuple*,
    u32,
    u64,
    u64);

typedef u64 (*btf_bpf_sk_release)(struct sock*);

typedef u64 (*btf_bpf_xdp_sk_lookup_udp)(
    struct xdp_buff*,
    struct bpf_sock_tuple*,
    u32,
    u32,
    u64);

typedef u64 (*btf_bpf_xdp_skc_lookup_tcp)(
    struct xdp_buff*,
    struct bpf_sock_tuple*,
    u32,
    u32,
    u64);

typedef u64 (*btf_bpf_xdp_sk_lookup_tcp)(
    struct xdp_buff*,
    struct bpf_sock_tuple*,
    u32,
    u32,
    u64);

typedef u64 (*btf_bpf_sock_addr_skc_lookup_tcp)(
    struct bpf_sock_addr_kern*,
    struct bpf_sock_tuple*,
    u32,
    u64,
    u64);

typedef u64 (*btf_bpf_sock_addr_sk_lookup_tcp)(
    struct bpf_sock_addr_kern*,
    struct bpf_sock_tuple*,
    u32,
    u64,
    u64);

typedef u64 (*btf_bpf_sock_addr_sk_lookup_udp)(
    struct bpf_sock_addr_kern*,
    struct bpf_sock_tuple*,
    u32,
    u64,
    u64);

typedef u64 (*btf_bpf_tcp_sock)(struct sock*);

typedef u64 (*btf_bpf_get_listener_sock)(struct sock*);

typedef u64 (*btf_bpf_skb_ecn_set_ce)(struct sk_buff*);

typedef u64 (*btf_bpf_tcp_check_syncookie)(
    struct sock*,
    void*,
    u32,
    struct tcphdr*,
    u32);

typedef u64 (
    *btf_bpf_tcp_gen_syncookie)(struct sock*, void*, u32, struct tcphdr*, u32);

typedef u64 (*btf_bpf_sk_assign)(struct sk_buff*, struct sock*, u64);

typedef u64 (
    *btf_bpf_sock_ops_load_hdr_opt)(struct bpf_sock_ops_kern*, void*, u32, u64);

typedef u64 (*btf_bpf_sock_ops_store_hdr_opt)(
    struct bpf_sock_ops_kern*,
    const void*,
    u32,
    u64);

typedef u64 (
    *btf_bpf_sock_ops_reserve_hdr_opt)(struct bpf_sock_ops_kern*, u32, u64);

typedef u64 (*btf_sk_select_reuseport)(
    struct sk_reuseport_kern*,
    struct bpf_map*,
    void*,
    u32);

typedef u64 (*btf_sk_reuseport_load_bytes)(
    const struct sk_reuseport_kern*,
    u32,
    void*,
    u32);

typedef u64 (*btf_sk_reuseport_load_bytes_relative)(
    const struct sk_reuseport_kern*,
    u32,
    void*,
    u32,
    u32);

typedef u64 (
    *btf_bpf_sk_lookup_assign)(struct bpf_sk_lookup_kern*, struct sock*, u64);

typedef u64 (*btf_bpf_skc_to_tcp6_sock)(struct sock*);

typedef u64 (*btf_bpf_skc_to_tcp_sock)(struct sock*);

typedef u64 (*btf_bpf_skc_to_tcp_timewait_sock)(struct sock*);

typedef u64 (*btf_bpf_skc_to_tcp_request_sock)(struct sock*);

typedef u64 (*btf_bpf_skc_to_udp6_sock)(struct sock*);

typedef u64 (*btf_bpf_sock_from_file)(struct file*);

enum {
  INET_DIAG_REQ_NONE = 0,
  INET_DIAG_REQ_BYTECODE = 1,
  INET_DIAG_REQ_SK_BPF_STORAGES = 2,
  INET_DIAG_REQ_PROTOCOL = 3,
  __INET_DIAG_REQ_MAX = 4,
};

struct sock_diag_req {
  __u8 sdiag_family;
  __u8 sdiag_protocol;
};

struct sock_diag_handler {
  __u8 family;
  int (*dump)(struct sk_buff*, struct nlmsghdr*);
  int (*get_info)(struct sk_buff*, struct sock*);
  int (*destroy)(struct sk_buff*, struct nlmsghdr*);
};

struct broadcast_sk {
  struct sock* sk;
  struct work_struct work;
};

typedef int gifconf_func_t(struct net_device*, char*, int, int);

struct tso_t {
  int next_frag_idx;
  int size;
  void* data;
  u16 ip_id;
  u8 tlen;
  bool ipv6;
  u32 tcp_seq;
};

struct fib_notifier_info {
  int family;
  struct netlink_ext_ack* extack;
};

enum fib_event_type {
  FIB_EVENT_ENTRY_REPLACE = 0,
  FIB_EVENT_ENTRY_APPEND = 1,
  FIB_EVENT_ENTRY_ADD = 2,
  FIB_EVENT_ENTRY_DEL = 3,
  FIB_EVENT_RULE_ADD = 4,
  FIB_EVENT_RULE_DEL = 5,
  FIB_EVENT_NH_ADD = 6,
  FIB_EVENT_NH_DEL = 7,
  FIB_EVENT_VIF_ADD = 8,
  FIB_EVENT_VIF_DEL = 9,
};

struct fib_notifier_net {
  struct list_head fib_notifier_ops;
  struct atomic_notifier_head fib_chain;
};

struct xdp_attachment_info {
  struct bpf_prog* prog;
  u32 flags;
};

struct flow_match_meta {
  struct flow_dissector_key_meta* key;
  struct flow_dissector_key_meta* mask;
};

struct flow_match_control {
  struct flow_dissector_key_control* key;
  struct flow_dissector_key_control* mask;
};

struct flow_match_ipv4_addrs {
  struct flow_dissector_key_ipv4_addrs* key;
  struct flow_dissector_key_ipv4_addrs* mask;
};

struct flow_match_ipv6_addrs {
  struct flow_dissector_key_ipv6_addrs* key;
  struct flow_dissector_key_ipv6_addrs* mask;
};

struct flow_match_ip {
  struct flow_dissector_key_ip* key;
  struct flow_dissector_key_ip* mask;
};

struct flow_match_ports {
  struct flow_dissector_key_ports* key;
  struct flow_dissector_key_ports* mask;
};

struct flow_match_icmp {
  struct flow_dissector_key_icmp* key;
  struct flow_dissector_key_icmp* mask;
};

struct flow_match_tcp {
  struct flow_dissector_key_tcp* key;
  struct flow_dissector_key_tcp* mask;
};

struct flow_match_mpls {
  struct flow_dissector_key_mpls* key;
  struct flow_dissector_key_mpls* mask;
};

struct flow_match_enc_keyid {
  struct flow_dissector_key_keyid* key;
  struct flow_dissector_key_keyid* mask;
};

struct flow_match_enc_opts {
  struct flow_dissector_key_enc_opts* key;
  struct flow_dissector_key_enc_opts* mask;
};

struct flow_match_ct {
  struct flow_dissector_key_ct* key;
  struct flow_dissector_key_ct* mask;
};

struct flow_block_cb;

struct flow_block_indr {
  struct list_head list;
  struct net_device* dev;
  struct Qdisc* sch;
  enum flow_block_binder_type binder_type;
  void* data;
  void* cb_priv;
  void (*cleanup)(struct flow_block_cb*);
};

struct flow_block_cb {
  struct list_head driver_list;
  struct list_head list;
  flow_setup_cb_t* cb;
  void* cb_ident;
  void* cb_priv;
  void (*release)(void*);
  struct flow_block_indr indr;
  unsigned int refcnt;
};

typedef int flow_indr_block_bind_cb_t(
    struct net_device*,
    struct Qdisc*,
    void*,
    enum tc_setup_type,
    void*,
    void*,
    void (*)(struct flow_block_cb*));

struct flow_indr_dev {
  struct list_head list;
  flow_indr_block_bind_cb_t* cb;
  void* cb_priv;
  refcount_t refcnt;
  struct callback_head rcu;
};

struct rx_queue_attribute {
  struct attribute attr;
  ssize_t (*show)(struct netdev_rx_queue*, char*);
  ssize_t (*store)(struct netdev_rx_queue*, const char*, size_t);
};

struct netdev_queue_attribute {
  struct attribute attr;
  ssize_t (*show)(struct netdev_queue*, char*);
  ssize_t (*store)(struct netdev_queue*, const char*, size_t);
};

struct inet6_ifaddr {
  struct in6_addr addr;
  __u32 prefix_len;
  __u32 rt_priority;
  __u32 valid_lft;
  __u32 prefered_lft;
  refcount_t refcnt;
  spinlock_t lock;
  int state;
  __u32 flags;
  __u8 dad_probes;
  __u8 stable_privacy_retry;
  __u16 scope;
  __u64 dad_nonce;
  long unsigned int cstamp;
  long unsigned int tstamp;
  struct delayed_work dad_work;
  struct inet6_dev* idev;
  struct fib6_info* rt;
  struct hlist_node addr_lst;
  struct list_head if_list;
  struct list_head tmp_list;
  struct inet6_ifaddr* ifpub;
  int regen_count;
  bool tokenized;
  struct callback_head rcu;
  struct in6_addr peer_addr;
};

struct fib_rule_uid_range {
  __u32 start;
  __u32 end;
};

enum {
  FRA_UNSPEC = 0,
  FRA_DST = 1,
  FRA_SRC = 2,
  FRA_IIFNAME = 3,
  FRA_GOTO = 4,
  FRA_UNUSED2 = 5,
  FRA_PRIORITY = 6,
  FRA_UNUSED3 = 7,
  FRA_UNUSED4 = 8,
  FRA_UNUSED5 = 9,
  FRA_FWMARK = 10,
  FRA_FLOW = 11,
  FRA_TUN_ID = 12,
  FRA_SUPPRESS_IFGROUP = 13,
  FRA_SUPPRESS_PREFIXLEN = 14,
  FRA_TABLE = 15,
  FRA_FWMASK = 16,
  FRA_OIFNAME = 17,
  FRA_PAD = 18,
  FRA_L3MDEV = 19,
  FRA_UID_RANGE = 20,
  FRA_PROTOCOL = 21,
  FRA_IP_PROTO = 22,
  FRA_SPORT_RANGE = 23,
  FRA_DPORT_RANGE = 24,
  __FRA_MAX = 25,
};

enum {
  FR_ACT_UNSPEC = 0,
  FR_ACT_TO_TBL = 1,
  FR_ACT_GOTO = 2,
  FR_ACT_NOP = 3,
  FR_ACT_RES3 = 4,
  FR_ACT_RES4 = 5,
  FR_ACT_BLACKHOLE = 6,
  FR_ACT_UNREACHABLE = 7,
  FR_ACT_PROHIBIT = 8,
  __FR_ACT_MAX = 9,
};

struct fib_rule_notifier_info {
  struct fib_notifier_info info;
  struct fib_rule* rule;
};

struct trace_event_raw_kfree_skb {
  struct trace_entry ent;
  void* skbaddr;
  void* location;
  short unsigned int protocol;
  char __data[0];
};

struct trace_event_raw_consume_skb {
  struct trace_entry ent;
  void* skbaddr;
  char __data[0];
};

struct trace_event_raw_skb_copy_datagram_iovec {
  struct trace_entry ent;
  const void* skbaddr;
  int len;
  char __data[0];
};

struct trace_event_data_offsets_kfree_skb {};

struct trace_event_data_offsets_consume_skb {};

struct trace_event_data_offsets_skb_copy_datagram_iovec {};

typedef void (*btf_trace_kfree_skb)(void*, struct sk_buff*, void*);

typedef void (*btf_trace_consume_skb)(void*, struct sk_buff*);

typedef void (
    *btf_trace_skb_copy_datagram_iovec)(void*, const struct sk_buff*, int);

struct trace_event_raw_net_dev_start_xmit {
  struct trace_entry ent;
  u32 __data_loc_name;
  u16 queue_mapping;
  const void* skbaddr;
  bool vlan_tagged;
  u16 vlan_proto;
  u16 vlan_tci;
  u16 protocol;
  u8 ip_summed;
  unsigned int len;
  unsigned int data_len;
  int network_offset;
  bool transport_offset_valid;
  int transport_offset;
  u8 tx_flags;
  u16 gso_size;
  u16 gso_segs;
  u16 gso_type;
  char __data[0];
};

struct trace_event_raw_net_dev_xmit {
  struct trace_entry ent;
  void* skbaddr;
  unsigned int len;
  int rc;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_net_dev_xmit_timeout {
  struct trace_entry ent;
  u32 __data_loc_name;
  u32 __data_loc_driver;
  int queue_index;
  char __data[0];
};

struct trace_event_raw_net_dev_template {
  struct trace_entry ent;
  void* skbaddr;
  unsigned int len;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_raw_net_dev_rx_verbose_template {
  struct trace_entry ent;
  u32 __data_loc_name;
  unsigned int napi_id;
  u16 queue_mapping;
  const void* skbaddr;
  bool vlan_tagged;
  u16 vlan_proto;
  u16 vlan_tci;
  u16 protocol;
  u8 ip_summed;
  u32 hash;
  bool l4_hash;
  unsigned int len;
  unsigned int data_len;
  unsigned int truesize;
  bool mac_header_valid;
  int mac_header;
  unsigned char nr_frags;
  u16 gso_size;
  u16 gso_type;
  char __data[0];
};

struct trace_event_raw_net_dev_rx_exit_template {
  struct trace_entry ent;
  int ret;
  char __data[0];
};

struct trace_event_data_offsets_net_dev_start_xmit {
  u32 name;
};

struct trace_event_data_offsets_net_dev_xmit {
  u32 name;
};

struct trace_event_data_offsets_net_dev_xmit_timeout {
  u32 name;
  u32 driver;
};

struct trace_event_data_offsets_net_dev_template {
  u32 name;
};

struct trace_event_data_offsets_net_dev_rx_verbose_template {
  u32 name;
};

struct trace_event_data_offsets_net_dev_rx_exit_template {};

typedef void (*btf_trace_net_dev_start_xmit)(
    void*,
    const struct sk_buff*,
    const struct net_device*);

typedef void (*btf_trace_net_dev_xmit)(
    void*,
    struct sk_buff*,
    int,
    struct net_device*,
    unsigned int);

typedef void (*btf_trace_net_dev_xmit_timeout)(void*, struct net_device*, int);

typedef void (*btf_trace_net_dev_queue)(void*, struct sk_buff*);

typedef void (*btf_trace_netif_receive_skb)(void*, struct sk_buff*);

typedef void (*btf_trace_netif_rx)(void*, struct sk_buff*);

typedef void (*btf_trace_napi_gro_frags_entry)(void*, const struct sk_buff*);

typedef void (*btf_trace_napi_gro_receive_entry)(void*, const struct sk_buff*);

typedef void (*btf_trace_netif_receive_skb_entry)(void*, const struct sk_buff*);

typedef void (
    *btf_trace_netif_receive_skb_list_entry)(void*, const struct sk_buff*);

typedef void (*btf_trace_netif_rx_entry)(void*, const struct sk_buff*);

typedef void (*btf_trace_netif_rx_ni_entry)(void*, const struct sk_buff*);

typedef void (*btf_trace_napi_gro_frags_exit)(void*, int);

typedef void (*btf_trace_napi_gro_receive_exit)(void*, int);

typedef void (*btf_trace_netif_receive_skb_exit)(void*, int);

typedef void (*btf_trace_netif_rx_exit)(void*, int);

typedef void (*btf_trace_netif_rx_ni_exit)(void*, int);

typedef void (*btf_trace_netif_receive_skb_list_exit)(void*, int);

struct trace_event_raw_napi_poll {
  struct trace_entry ent;
  struct napi_struct* napi;
  u32 __data_loc_dev_name;
  int work;
  int budget;
  char __data[0];
};

struct trace_event_data_offsets_napi_poll {
  u32 dev_name;
};

typedef void (*btf_trace_napi_poll)(void*, struct napi_struct*, int, int);

enum tcp_ca_state {
  TCP_CA_Open = 0,
  TCP_CA_Disorder = 1,
  TCP_CA_CWR = 2,
  TCP_CA_Recovery = 3,
  TCP_CA_Loss = 4,
};

struct trace_event_raw_sock_rcvqueue_full {
  struct trace_entry ent;
  int rmem_alloc;
  unsigned int truesize;
  int sk_rcvbuf;
  char __data[0];
};

struct trace_event_raw_sock_exceed_buf_limit {
  struct trace_entry ent;
  char name[32];
  long int* sysctl_mem;
  long int allocated;
  int sysctl_rmem;
  int rmem_alloc;
  int sysctl_wmem;
  int wmem_alloc;
  int wmem_queued;
  int kind;
  char __data[0];
};

struct trace_event_raw_inet_sock_set_state {
  struct trace_entry ent;
  const void* skaddr;
  int oldstate;
  int newstate;
  __u16 sport;
  __u16 dport;
  __u16 family;
  __u16 protocol;
  __u8 saddr[4];
  __u8 daddr[4];
  __u8 saddr_v6[16];
  __u8 daddr_v6[16];
  char __data[0];
};

struct trace_event_data_offsets_sock_rcvqueue_full {};

struct trace_event_data_offsets_sock_exceed_buf_limit {};

struct trace_event_data_offsets_inet_sock_set_state {};

typedef void (
    *btf_trace_sock_rcvqueue_full)(void*, struct sock*, struct sk_buff*);

typedef void (*btf_trace_sock_exceed_buf_limit)(
    void*,
    struct sock*,
    struct proto*,
    long int,
    int);

typedef void (*btf_trace_inet_sock_set_state)(
    void*,
    const struct sock*,
    const int,
    const int);

struct trace_event_raw_udp_fail_queue_rcv_skb {
  struct trace_entry ent;
  int rc;
  __u16 lport;
  char __data[0];
};

struct trace_event_data_offsets_udp_fail_queue_rcv_skb {};

typedef void (*btf_trace_udp_fail_queue_rcv_skb)(void*, int, struct sock*);

struct trace_event_raw_tcp_event_sk_skb {
  struct trace_entry ent;
  const void* skbaddr;
  const void* skaddr;
  int state;
  __u16 sport;
  __u16 dport;
  __u16 family;
  __u8 saddr[4];
  __u8 daddr[4];
  __u8 saddr_v6[16];
  __u8 daddr_v6[16];
  char __data[0];
};

struct trace_event_raw_tcp_event_sk {
  struct trace_entry ent;
  const void* skaddr;
  __u16 sport;
  __u16 dport;
  __u16 family;
  __u8 saddr[4];
  __u8 daddr[4];
  __u8 saddr_v6[16];
  __u8 daddr_v6[16];
  __u64 sock_cookie;
  char __data[0];
};

struct trace_event_raw_tcp_retransmit_synack {
  struct trace_entry ent;
  const void* skaddr;
  const void* req;
  __u16 sport;
  __u16 dport;
  __u16 family;
  __u8 saddr[4];
  __u8 daddr[4];
  __u8 saddr_v6[16];
  __u8 daddr_v6[16];
  char __data[0];
};

struct trace_event_raw_tcp_probe {
  struct trace_entry ent;
  __u8 saddr[28];
  __u8 daddr[28];
  __u16 sport;
  __u16 dport;
  __u16 family;
  __u32 mark;
  __u16 data_len;
  __u32 snd_nxt;
  __u32 snd_una;
  __u32 snd_cwnd;
  __u32 ssthresh;
  __u32 snd_wnd;
  __u32 srtt;
  __u32 rcv_wnd;
  __u64 sock_cookie;
  char __data[0];
};

struct trace_event_raw_tcp_event_skb {
  struct trace_entry ent;
  const void* skbaddr;
  __u8 saddr[28];
  __u8 daddr[28];
  char __data[0];
};

struct trace_event_data_offsets_tcp_event_sk_skb {};

struct trace_event_data_offsets_tcp_event_sk {};

struct trace_event_data_offsets_tcp_retransmit_synack {};

struct trace_event_data_offsets_tcp_probe {};

struct trace_event_data_offsets_tcp_event_skb {};

typedef void (*btf_trace_tcp_retransmit_skb)(
    void*,
    const struct sock*,
    const struct sk_buff*);

typedef void (*btf_trace_tcp_send_reset)(
    void*,
    const struct sock*,
    const struct sk_buff*);

typedef void (*btf_trace_tcp_receive_reset)(void*, struct sock*);

typedef void (*btf_trace_tcp_destroy_sock)(void*, struct sock*);

typedef void (*btf_trace_tcp_rcv_space_adjust)(void*, struct sock*);

typedef void (*btf_trace_tcp_retransmit_synack)(
    void*,
    const struct sock*,
    const struct request_sock*);

typedef void (*btf_trace_tcp_probe)(void*, struct sock*, struct sk_buff*);

typedef void (*btf_trace_tcp_bad_csum)(void*, const struct sk_buff*);

struct trace_event_raw_fib_table_lookup {
  struct trace_entry ent;
  u32 tb_id;
  int err;
  int oif;
  int iif;
  u8 proto;
  __u8 tos;
  __u8 scope;
  __u8 flags;
  __u8 src[4];
  __u8 dst[4];
  __u8 gw4[4];
  __u8 gw6[16];
  u16 sport;
  u16 dport;
  u32 __data_loc_name;
  char __data[0];
};

struct trace_event_data_offsets_fib_table_lookup {
  u32 name;
};

typedef void (*btf_trace_fib_table_lookup)(
    void*,
    u32,
    const struct flowi4*,
    const struct fib_nh_common*,
    int);

struct trace_event_raw_qdisc_dequeue {
  struct trace_entry ent;
  struct Qdisc* qdisc;
  const struct netdev_queue* txq;
  int packets;
  void* skbaddr;
  int ifindex;
  u32 handle;
  u32 parent;
  long unsigned int txq_state;
  char __data[0];
};

struct trace_event_raw_qdisc_reset {
  struct trace_entry ent;
  u32 __data_loc_dev;
  u32 __data_loc_kind;
  u32 parent;
  u32 handle;
  char __data[0];
};

struct trace_event_raw_qdisc_destroy {
  struct trace_entry ent;
  u32 __data_loc_dev;
  u32 __data_loc_kind;
  u32 parent;
  u32 handle;
  char __data[0];
};

struct trace_event_raw_qdisc_create {
  struct trace_entry ent;
  u32 __data_loc_dev;
  u32 __data_loc_kind;
  u32 parent;
  char __data[0];
};

struct trace_event_data_offsets_qdisc_dequeue {};

struct trace_event_data_offsets_qdisc_reset {
  u32 dev;
  u32 kind;
};

struct trace_event_data_offsets_qdisc_destroy {
  u32 dev;
  u32 kind;
};

struct trace_event_data_offsets_qdisc_create {
  u32 dev;
  u32 kind;
};

typedef void (*btf_trace_qdisc_dequeue)(
    void*,
    struct Qdisc*,
    const struct netdev_queue*,
    int,
    struct sk_buff*);

typedef void (*btf_trace_qdisc_reset)(void*, struct Qdisc*);

typedef void (*btf_trace_qdisc_destroy)(void*, struct Qdisc*);

typedef void (*btf_trace_qdisc_create)(
    void*,
    const struct Qdisc_ops*,
    struct net_device*,
    u32);

struct bridge_stp_xstats {
  __u64 transition_blk;
  __u64 transition_fwd;
  __u64 rx_bpdu;
  __u64 tx_bpdu;
  __u64 rx_tcn;
  __u64 tx_tcn;
};

struct br_mcast_stats {
  __u64 igmp_v1queries[2];
  __u64 igmp_v2queries[2];
  __u64 igmp_v3queries[2];
  __u64 igmp_leaves[2];
  __u64 igmp_v1reports[2];
  __u64 igmp_v2reports[2];
  __u64 igmp_v3reports[2];
  __u64 igmp_parse_errors;
  __u64 mld_v1queries[2];
  __u64 mld_v2queries[2];
  __u64 mld_leaves[2];
  __u64 mld_v1reports[2];
  __u64 mld_v2reports[2];
  __u64 mld_parse_errors;
  __u64 mcast_bytes[2];
  __u64 mcast_packets[2];
};

struct br_ip {
  union {
    __be32 ip4;
    struct in6_addr ip6;
  } src;
  union {
    __be32 ip4;
    struct in6_addr ip6;
    unsigned char mac_addr[6];
  } dst;
  __be16 proto;
  __u16 vid;
};

struct bridge_id {
  unsigned char prio[2];
  unsigned char addr[6];
};

typedef struct bridge_id bridge_id;

struct mac_addr {
  unsigned char addr[6];
};

typedef struct mac_addr mac_addr;

typedef __u16 port_id;

struct bridge_mcast_own_query {
  struct timer_list timer;
  u32 startup_sent;
};

struct bridge_mcast_other_query {
  struct timer_list timer;
  long unsigned int delay_time;
};

struct net_bridge_port;

struct bridge_mcast_querier {
  struct br_ip addr;
  struct net_bridge_port* port;
};

struct net_bridge;

struct bridge_mcast_stats;

struct net_bridge_port {
  struct net_bridge* br;
  struct net_device* dev;
  struct list_head list;
  long unsigned int flags;
  struct net_bridge_port* backup_port;
  u8 priority;
  u8 state;
  u16 port_no;
  unsigned char topology_change_ack;
  unsigned char config_pending;
  port_id port_id;
  port_id designated_port;
  bridge_id designated_root;
  bridge_id designated_bridge;
  u32 path_cost;
  u32 designated_cost;
  long unsigned int designated_age;
  struct timer_list forward_delay_timer;
  struct timer_list hold_timer;
  struct timer_list message_age_timer;
  struct kobject kobj;
  struct callback_head rcu;
  struct bridge_mcast_own_query ip4_own_query;
  struct bridge_mcast_own_query ip6_own_query;
  u32 multicast_eht_hosts_limit;
  u32 multicast_eht_hosts_cnt;
  unsigned char multicast_router;
  struct bridge_mcast_stats* mcast_stats;
  struct timer_list multicast_router_timer;
  struct hlist_head mglist;
  struct hlist_node rlist;
  char sysfs_name[16];
  struct netpoll* np;
  int offload_fwd_mark;
  u16 group_fwd_mask;
  u16 backup_redirected_cnt;
  struct bridge_stp_xstats stp_xstats;
};

struct bridge_mcast_stats {
  struct br_mcast_stats mstats;
  struct u64_stats_sync syncp;
};

struct net_bridge {
  spinlock_t lock;
  spinlock_t hash_lock;
  struct hlist_head frame_type_list;
  struct net_device* dev;
  long unsigned int options;
  struct rhashtable fdb_hash_tbl;
  struct list_head port_list;
  union {
    struct rtable fake_rtable;
    struct rt6_info fake_rt6_info;
  };
  u16 group_fwd_mask;
  u16 group_fwd_mask_required;
  bridge_id designated_root;
  bridge_id bridge_id;
  unsigned char topology_change;
  unsigned char topology_change_detected;
  u16 root_port;
  long unsigned int max_age;
  long unsigned int hello_time;
  long unsigned int forward_delay;
  long unsigned int ageing_time;
  long unsigned int bridge_max_age;
  long unsigned int bridge_hello_time;
  long unsigned int bridge_forward_delay;
  long unsigned int bridge_ageing_time;
  u32 root_path_cost;
  u8 group_addr[6];
  enum {
    BR_NO_STP = 0,
    BR_KERNEL_STP = 1,
    BR_USER_STP = 2,
  } stp_enabled;
  u32 hash_max;
  u32 multicast_last_member_count;
  u32 multicast_startup_query_count;
  u8 multicast_igmp_version;
  u8 multicast_router;
  u8 multicast_mld_version;
  spinlock_t multicast_lock;
  long unsigned int multicast_last_member_interval;
  long unsigned int multicast_membership_interval;
  long unsigned int multicast_querier_interval;
  long unsigned int multicast_query_interval;
  long unsigned int multicast_query_response_interval;
  long unsigned int multicast_startup_query_interval;
  struct rhashtable mdb_hash_tbl;
  struct rhashtable sg_port_tbl;
  struct hlist_head mcast_gc_list;
  struct hlist_head mdb_list;
  struct hlist_head router_list;
  struct timer_list multicast_router_timer;
  struct bridge_mcast_other_query ip4_other_query;
  struct bridge_mcast_own_query ip4_own_query;
  struct bridge_mcast_querier ip4_querier;
  struct bridge_mcast_stats* mcast_stats;
  struct bridge_mcast_other_query ip6_other_query;
  struct bridge_mcast_own_query ip6_own_query;
  struct bridge_mcast_querier ip6_querier;
  struct work_struct mcast_gc_work;
  struct timer_list hello_timer;
  struct timer_list tcn_timer;
  struct timer_list topology_change_timer;
  struct delayed_work gc_work;
  struct kobject* ifobj;
  u32 auto_cnt;
  int offload_fwd_mark;
  struct hlist_head fdb_list;
};

struct net_bridge_fdb_key {
  mac_addr addr;
  u16 vlan_id;
};

struct net_bridge_fdb_entry {
  struct rhash_head rhnode;
  struct net_bridge_port* dst;
  struct net_bridge_fdb_key key;
  struct hlist_node fdb_node;
  long unsigned int flags;
  long : 64;
  long : 64;
  long unsigned int updated;
  long unsigned int used;
  struct callback_head rcu;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct nf_br_ops {
  int (*br_dev_xmit_hook)(struct sk_buff*);
};

struct trace_event_raw_br_fdb_add {
  struct trace_entry ent;
  u8 ndm_flags;
  u32 __data_loc_dev;
  unsigned char addr[6];
  u16 vid;
  u16 nlh_flags;
  char __data[0];
};

struct trace_event_raw_br_fdb_external_learn_add {
  struct trace_entry ent;
  u32 __data_loc_br_dev;
  u32 __data_loc_dev;
  unsigned char addr[6];
  u16 vid;
  char __data[0];
};

struct trace_event_raw_fdb_delete {
  struct trace_entry ent;
  u32 __data_loc_br_dev;
  u32 __data_loc_dev;
  unsigned char addr[6];
  u16 vid;
  char __data[0];
};

struct trace_event_raw_br_fdb_update {
  struct trace_entry ent;
  u32 __data_loc_br_dev;
  u32 __data_loc_dev;
  unsigned char addr[6];
  u16 vid;
  long unsigned int flags;
  char __data[0];
};

struct trace_event_data_offsets_br_fdb_add {
  u32 dev;
};

struct trace_event_data_offsets_br_fdb_external_learn_add {
  u32 br_dev;
  u32 dev;
};

struct trace_event_data_offsets_fdb_delete {
  u32 br_dev;
  u32 dev;
};

struct trace_event_data_offsets_br_fdb_update {
  u32 br_dev;
  u32 dev;
};

typedef void (*btf_trace_br_fdb_add)(
    void*,
    struct ndmsg*,
    struct net_device*,
    const unsigned char*,
    u16,
    u16);

typedef void (*btf_trace_br_fdb_external_learn_add)(
    void*,
    struct net_bridge*,
    struct net_bridge_port*,
    const unsigned char*,
    u16);

typedef void (*btf_trace_fdb_delete)(
    void*,
    struct net_bridge*,
    struct net_bridge_fdb_entry*);

typedef void (*btf_trace_br_fdb_update)(
    void*,
    struct net_bridge*,
    struct net_bridge_port*,
    const unsigned char*,
    u16,
    long unsigned int);

struct trace_event_raw_page_pool_release {
  struct trace_entry ent;
  const struct page_pool* pool;
  s32 inflight;
  u32 hold;
  u32 release;
  u64 cnt;
  char __data[0];
};

struct trace_event_raw_page_pool_state_release {
  struct trace_entry ent;
  const struct page_pool* pool;
  const struct page* page;
  u32 release;
  long unsigned int pfn;
  char __data[0];
};

struct trace_event_raw_page_pool_state_hold {
  struct trace_entry ent;
  const struct page_pool* pool;
  const struct page* page;
  u32 hold;
  long unsigned int pfn;
  char __data[0];
};

struct trace_event_raw_page_pool_update_nid {
  struct trace_entry ent;
  const struct page_pool* pool;
  int pool_nid;
  int new_nid;
  char __data[0];
};

struct trace_event_data_offsets_page_pool_release {};

struct trace_event_data_offsets_page_pool_state_release {};

struct trace_event_data_offsets_page_pool_state_hold {};

struct trace_event_data_offsets_page_pool_update_nid {};

typedef void (*btf_trace_page_pool_release)(
    void*,
    const struct page_pool*,
    s32,
    u32,
    u32);

typedef void (*btf_trace_page_pool_state_release)(
    void*,
    const struct page_pool*,
    const struct page*,
    u32);

typedef void (*btf_trace_page_pool_state_hold)(
    void*,
    const struct page_pool*,
    const struct page*,
    u32);

typedef void (
    *btf_trace_page_pool_update_nid)(void*, const struct page_pool*, int);

struct trace_event_raw_neigh_create {
  struct trace_entry ent;
  u32 family;
  u32 __data_loc_dev;
  int entries;
  u8 created;
  u8 gc_exempt;
  u8 primary_key4[4];
  u8 primary_key6[16];
  char __data[0];
};

struct trace_event_raw_neigh_update {
  struct trace_entry ent;
  u32 family;
  u32 __data_loc_dev;
  u8 lladdr[32];
  u8 lladdr_len;
  u8 flags;
  u8 nud_state;
  u8 type;
  u8 dead;
  int refcnt;
  __u8 primary_key4[4];
  __u8 primary_key6[16];
  long unsigned int confirmed;
  long unsigned int updated;
  long unsigned int used;
  u8 new_lladdr[32];
  u8 new_state;
  u32 update_flags;
  u32 pid;
  char __data[0];
};

struct trace_event_raw_neigh__update {
  struct trace_entry ent;
  u32 family;
  u32 __data_loc_dev;
  u8 lladdr[32];
  u8 lladdr_len;
  u8 flags;
  u8 nud_state;
  u8 type;
  u8 dead;
  int refcnt;
  __u8 primary_key4[4];
  __u8 primary_key6[16];
  long unsigned int confirmed;
  long unsigned int updated;
  long unsigned int used;
  u32 err;
  char __data[0];
};

struct trace_event_data_offsets_neigh_create {
  u32 dev;
};

struct trace_event_data_offsets_neigh_update {
  u32 dev;
};

struct trace_event_data_offsets_neigh__update {
  u32 dev;
};

typedef void (*btf_trace_neigh_create)(
    void*,
    struct neigh_table*,
    struct net_device*,
    const void*,
    const struct neighbour*,
    bool);

typedef void (
    *btf_trace_neigh_update)(void*, struct neighbour*, const u8*, u8, u32, u32);

typedef void (*btf_trace_neigh_update_done)(void*, struct neighbour*, int);

typedef void (*btf_trace_neigh_timer_handler)(void*, struct neighbour*, int);

typedef void (*btf_trace_neigh_event_send_done)(void*, struct neighbour*, int);

typedef void (*btf_trace_neigh_event_send_dead)(void*, struct neighbour*, int);

typedef void (
    *btf_trace_neigh_cleanup_and_release)(void*, struct neighbour*, int);

struct update_classid_context {
  u32 classid;
  unsigned int batch;
};

struct rtnexthop {
  short unsigned int rtnh_len;
  unsigned char rtnh_flags;
  unsigned char rtnh_hops;
  int rtnh_ifindex;
};

struct lwtunnel_encap_ops {
  int (*build_state)(
      struct net*,
      struct nlattr*,
      unsigned int,
      const void*,
      struct lwtunnel_state**,
      struct netlink_ext_ack*);
  void (*destroy_state)(struct lwtunnel_state*);
  int (*output)(struct net*, struct sock*, struct sk_buff*);
  int (*input)(struct sk_buff*);
  int (*fill_encap)(struct sk_buff*, struct lwtunnel_state*);
  int (*get_encap_size)(struct lwtunnel_state*);
  int (*cmp_encap)(struct lwtunnel_state*, struct lwtunnel_state*);
  int (*xmit)(struct sk_buff*);
  struct module* owner;
};

enum {
  LWT_BPF_PROG_UNSPEC = 0,
  LWT_BPF_PROG_FD = 1,
  LWT_BPF_PROG_NAME = 2,
  __LWT_BPF_PROG_MAX = 3,
};

enum {
  LWT_BPF_UNSPEC = 0,
  LWT_BPF_IN = 1,
  LWT_BPF_OUT = 2,
  LWT_BPF_XMIT = 3,
  LWT_BPF_XMIT_HEADROOM = 4,
  __LWT_BPF_MAX = 5,
};

enum {
  LWTUNNEL_XMIT_DONE = 0,
  LWTUNNEL_XMIT_CONTINUE = 1,
};

struct bpf_lwt_prog {
  struct bpf_prog* prog;
  char* name;
};

struct bpf_lwt {
  struct bpf_lwt_prog in;
  struct bpf_lwt_prog out;
  struct bpf_lwt_prog xmit;
  int family;
};

struct dst_cache_pcpu {
  long unsigned int refresh_ts;
  struct dst_entry* dst;
  u32 cookie;
  union {
    struct in_addr in_saddr;
    struct in6_addr in6_saddr;
  };
};

struct genl_dumpit_info {
  const struct genl_family* family;
  struct genl_ops op;
  struct nlattr** attrs;
};

enum devlink_command {
  DEVLINK_CMD_UNSPEC = 0,
  DEVLINK_CMD_GET = 1,
  DEVLINK_CMD_SET = 2,
  DEVLINK_CMD_NEW = 3,
  DEVLINK_CMD_DEL = 4,
  DEVLINK_CMD_PORT_GET = 5,
  DEVLINK_CMD_PORT_SET = 6,
  DEVLINK_CMD_PORT_NEW = 7,
  DEVLINK_CMD_PORT_DEL = 8,
  DEVLINK_CMD_PORT_SPLIT = 9,
  DEVLINK_CMD_PORT_UNSPLIT = 10,
  DEVLINK_CMD_SB_GET = 11,
  DEVLINK_CMD_SB_SET = 12,
  DEVLINK_CMD_SB_NEW = 13,
  DEVLINK_CMD_SB_DEL = 14,
  DEVLINK_CMD_SB_POOL_GET = 15,
  DEVLINK_CMD_SB_POOL_SET = 16,
  DEVLINK_CMD_SB_POOL_NEW = 17,
  DEVLINK_CMD_SB_POOL_DEL = 18,
  DEVLINK_CMD_SB_PORT_POOL_GET = 19,
  DEVLINK_CMD_SB_PORT_POOL_SET = 20,
  DEVLINK_CMD_SB_PORT_POOL_NEW = 21,
  DEVLINK_CMD_SB_PORT_POOL_DEL = 22,
  DEVLINK_CMD_SB_TC_POOL_BIND_GET = 23,
  DEVLINK_CMD_SB_TC_POOL_BIND_SET = 24,
  DEVLINK_CMD_SB_TC_POOL_BIND_NEW = 25,
  DEVLINK_CMD_SB_TC_POOL_BIND_DEL = 26,
  DEVLINK_CMD_SB_OCC_SNAPSHOT = 27,
  DEVLINK_CMD_SB_OCC_MAX_CLEAR = 28,
  DEVLINK_CMD_ESWITCH_GET = 29,
  DEVLINK_CMD_ESWITCH_SET = 30,
  DEVLINK_CMD_DPIPE_TABLE_GET = 31,
  DEVLINK_CMD_DPIPE_ENTRIES_GET = 32,
  DEVLINK_CMD_DPIPE_HEADERS_GET = 33,
  DEVLINK_CMD_DPIPE_TABLE_COUNTERS_SET = 34,
  DEVLINK_CMD_RESOURCE_SET = 35,
  DEVLINK_CMD_RESOURCE_DUMP = 36,
  DEVLINK_CMD_RELOAD = 37,
  DEVLINK_CMD_PARAM_GET = 38,
  DEVLINK_CMD_PARAM_SET = 39,
  DEVLINK_CMD_PARAM_NEW = 40,
  DEVLINK_CMD_PARAM_DEL = 41,
  DEVLINK_CMD_REGION_GET = 42,
  DEVLINK_CMD_REGION_SET = 43,
  DEVLINK_CMD_REGION_NEW = 44,
  DEVLINK_CMD_REGION_DEL = 45,
  DEVLINK_CMD_REGION_READ = 46,
  DEVLINK_CMD_PORT_PARAM_GET = 47,
  DEVLINK_CMD_PORT_PARAM_SET = 48,
  DEVLINK_CMD_PORT_PARAM_NEW = 49,
  DEVLINK_CMD_PORT_PARAM_DEL = 50,
  DEVLINK_CMD_INFO_GET = 51,
  DEVLINK_CMD_HEALTH_REPORTER_GET = 52,
  DEVLINK_CMD_HEALTH_REPORTER_SET = 53,
  DEVLINK_CMD_HEALTH_REPORTER_RECOVER = 54,
  DEVLINK_CMD_HEALTH_REPORTER_DIAGNOSE = 55,
  DEVLINK_CMD_HEALTH_REPORTER_DUMP_GET = 56,
  DEVLINK_CMD_HEALTH_REPORTER_DUMP_CLEAR = 57,
  DEVLINK_CMD_FLASH_UPDATE = 58,
  DEVLINK_CMD_FLASH_UPDATE_END = 59,
  DEVLINK_CMD_FLASH_UPDATE_STATUS = 60,
  DEVLINK_CMD_TRAP_GET = 61,
  DEVLINK_CMD_TRAP_SET = 62,
  DEVLINK_CMD_TRAP_NEW = 63,
  DEVLINK_CMD_TRAP_DEL = 64,
  DEVLINK_CMD_TRAP_GROUP_GET = 65,
  DEVLINK_CMD_TRAP_GROUP_SET = 66,
  DEVLINK_CMD_TRAP_GROUP_NEW = 67,
  DEVLINK_CMD_TRAP_GROUP_DEL = 68,
  DEVLINK_CMD_TRAP_POLICER_GET = 69,
  DEVLINK_CMD_TRAP_POLICER_SET = 70,
  DEVLINK_CMD_TRAP_POLICER_NEW = 71,
  DEVLINK_CMD_TRAP_POLICER_DEL = 72,
  DEVLINK_CMD_HEALTH_REPORTER_TEST = 73,
  __DEVLINK_CMD_MAX = 74,
  DEVLINK_CMD_MAX = 73,
};

enum {
  DEVLINK_ATTR_STATS_RX_PACKETS = 0,
  DEVLINK_ATTR_STATS_RX_BYTES = 1,
  DEVLINK_ATTR_STATS_RX_DROPPED = 2,
  __DEVLINK_ATTR_STATS_MAX = 3,
  DEVLINK_ATTR_STATS_MAX = 2,
};

enum {
  DEVLINK_FLASH_OVERWRITE_SETTINGS_BIT = 0,
  DEVLINK_FLASH_OVERWRITE_IDENTIFIERS_BIT = 1,
  __DEVLINK_FLASH_OVERWRITE_MAX_BIT = 2,
  DEVLINK_FLASH_OVERWRITE_MAX_BIT = 1,
};

enum {
  DEVLINK_ATTR_TRAP_METADATA_TYPE_IN_PORT = 0,
  DEVLINK_ATTR_TRAP_METADATA_TYPE_FA_COOKIE = 1,
};

enum devlink_attr {
  DEVLINK_ATTR_UNSPEC = 0,
  DEVLINK_ATTR_BUS_NAME = 1,
  DEVLINK_ATTR_DEV_NAME = 2,
  DEVLINK_ATTR_PORT_INDEX = 3,
  DEVLINK_ATTR_PORT_TYPE = 4,
  DEVLINK_ATTR_PORT_DESIRED_TYPE = 5,
  DEVLINK_ATTR_PORT_NETDEV_IFINDEX = 6,
  DEVLINK_ATTR_PORT_NETDEV_NAME = 7,
  DEVLINK_ATTR_PORT_IBDEV_NAME = 8,
  DEVLINK_ATTR_PORT_SPLIT_COUNT = 9,
  DEVLINK_ATTR_PORT_SPLIT_GROUP = 10,
  DEVLINK_ATTR_SB_INDEX = 11,
  DEVLINK_ATTR_SB_SIZE = 12,
  DEVLINK_ATTR_SB_INGRESS_POOL_COUNT = 13,
  DEVLINK_ATTR_SB_EGRESS_POOL_COUNT = 14,
  DEVLINK_ATTR_SB_INGRESS_TC_COUNT = 15,
  DEVLINK_ATTR_SB_EGRESS_TC_COUNT = 16,
  DEVLINK_ATTR_SB_POOL_INDEX = 17,
  DEVLINK_ATTR_SB_POOL_TYPE = 18,
  DEVLINK_ATTR_SB_POOL_SIZE = 19,
  DEVLINK_ATTR_SB_POOL_THRESHOLD_TYPE = 20,
  DEVLINK_ATTR_SB_THRESHOLD = 21,
  DEVLINK_ATTR_SB_TC_INDEX = 22,
  DEVLINK_ATTR_SB_OCC_CUR = 23,
  DEVLINK_ATTR_SB_OCC_MAX = 24,
  DEVLINK_ATTR_ESWITCH_MODE = 25,
  DEVLINK_ATTR_ESWITCH_INLINE_MODE = 26,
  DEVLINK_ATTR_DPIPE_TABLES = 27,
  DEVLINK_ATTR_DPIPE_TABLE = 28,
  DEVLINK_ATTR_DPIPE_TABLE_NAME = 29,
  DEVLINK_ATTR_DPIPE_TABLE_SIZE = 30,
  DEVLINK_ATTR_DPIPE_TABLE_MATCHES = 31,
  DEVLINK_ATTR_DPIPE_TABLE_ACTIONS = 32,
  DEVLINK_ATTR_DPIPE_TABLE_COUNTERS_ENABLED = 33,
  DEVLINK_ATTR_DPIPE_ENTRIES = 34,
  DEVLINK_ATTR_DPIPE_ENTRY = 35,
  DEVLINK_ATTR_DPIPE_ENTRY_INDEX = 36,
  DEVLINK_ATTR_DPIPE_ENTRY_MATCH_VALUES = 37,
  DEVLINK_ATTR_DPIPE_ENTRY_ACTION_VALUES = 38,
  DEVLINK_ATTR_DPIPE_ENTRY_COUNTER = 39,
  DEVLINK_ATTR_DPIPE_MATCH = 40,
  DEVLINK_ATTR_DPIPE_MATCH_VALUE = 41,
  DEVLINK_ATTR_DPIPE_MATCH_TYPE = 42,
  DEVLINK_ATTR_DPIPE_ACTION = 43,
  DEVLINK_ATTR_DPIPE_ACTION_VALUE = 44,
  DEVLINK_ATTR_DPIPE_ACTION_TYPE = 45,
  DEVLINK_ATTR_DPIPE_VALUE = 46,
  DEVLINK_ATTR_DPIPE_VALUE_MASK = 47,
  DEVLINK_ATTR_DPIPE_VALUE_MAPPING = 48,
  DEVLINK_ATTR_DPIPE_HEADERS = 49,
  DEVLINK_ATTR_DPIPE_HEADER = 50,
  DEVLINK_ATTR_DPIPE_HEADER_NAME = 51,
  DEVLINK_ATTR_DPIPE_HEADER_ID = 52,
  DEVLINK_ATTR_DPIPE_HEADER_FIELDS = 53,
  DEVLINK_ATTR_DPIPE_HEADER_GLOBAL = 54,
  DEVLINK_ATTR_DPIPE_HEADER_INDEX = 55,
  DEVLINK_ATTR_DPIPE_FIELD = 56,
  DEVLINK_ATTR_DPIPE_FIELD_NAME = 57,
  DEVLINK_ATTR_DPIPE_FIELD_ID = 58,
  DEVLINK_ATTR_DPIPE_FIELD_BITWIDTH = 59,
  DEVLINK_ATTR_DPIPE_FIELD_MAPPING_TYPE = 60,
  DEVLINK_ATTR_PAD = 61,
  DEVLINK_ATTR_ESWITCH_ENCAP_MODE = 62,
  DEVLINK_ATTR_RESOURCE_LIST = 63,
  DEVLINK_ATTR_RESOURCE = 64,
  DEVLINK_ATTR_RESOURCE_NAME = 65,
  DEVLINK_ATTR_RESOURCE_ID = 66,
  DEVLINK_ATTR_RESOURCE_SIZE = 67,
  DEVLINK_ATTR_RESOURCE_SIZE_NEW = 68,
  DEVLINK_ATTR_RESOURCE_SIZE_VALID = 69,
  DEVLINK_ATTR_RESOURCE_SIZE_MIN = 70,
  DEVLINK_ATTR_RESOURCE_SIZE_MAX = 71,
  DEVLINK_ATTR_RESOURCE_SIZE_GRAN = 72,
  DEVLINK_ATTR_RESOURCE_UNIT = 73,
  DEVLINK_ATTR_RESOURCE_OCC = 74,
  DEVLINK_ATTR_DPIPE_TABLE_RESOURCE_ID = 75,
  DEVLINK_ATTR_DPIPE_TABLE_RESOURCE_UNITS = 76,
  DEVLINK_ATTR_PORT_FLAVOUR = 77,
  DEVLINK_ATTR_PORT_NUMBER = 78,
  DEVLINK_ATTR_PORT_SPLIT_SUBPORT_NUMBER = 79,
  DEVLINK_ATTR_PARAM = 80,
  DEVLINK_ATTR_PARAM_NAME = 81,
  DEVLINK_ATTR_PARAM_GENERIC = 82,
  DEVLINK_ATTR_PARAM_TYPE = 83,
  DEVLINK_ATTR_PARAM_VALUES_LIST = 84,
  DEVLINK_ATTR_PARAM_VALUE = 85,
  DEVLINK_ATTR_PARAM_VALUE_DATA = 86,
  DEVLINK_ATTR_PARAM_VALUE_CMODE = 87,
  DEVLINK_ATTR_REGION_NAME = 88,
  DEVLINK_ATTR_REGION_SIZE = 89,
  DEVLINK_ATTR_REGION_SNAPSHOTS = 90,
  DEVLINK_ATTR_REGION_SNAPSHOT = 91,
  DEVLINK_ATTR_REGION_SNAPSHOT_ID = 92,
  DEVLINK_ATTR_REGION_CHUNKS = 93,
  DEVLINK_ATTR_REGION_CHUNK = 94,
  DEVLINK_ATTR_REGION_CHUNK_DATA = 95,
  DEVLINK_ATTR_REGION_CHUNK_ADDR = 96,
  DEVLINK_ATTR_REGION_CHUNK_LEN = 97,
  DEVLINK_ATTR_INFO_DRIVER_NAME = 98,
  DEVLINK_ATTR_INFO_SERIAL_NUMBER = 99,
  DEVLINK_ATTR_INFO_VERSION_FIXED = 100,
  DEVLINK_ATTR_INFO_VERSION_RUNNING = 101,
  DEVLINK_ATTR_INFO_VERSION_STORED = 102,
  DEVLINK_ATTR_INFO_VERSION_NAME = 103,
  DEVLINK_ATTR_INFO_VERSION_VALUE = 104,
  DEVLINK_ATTR_SB_POOL_CELL_SIZE = 105,
  DEVLINK_ATTR_FMSG = 106,
  DEVLINK_ATTR_FMSG_OBJ_NEST_START = 107,
  DEVLINK_ATTR_FMSG_PAIR_NEST_START = 108,
  DEVLINK_ATTR_FMSG_ARR_NEST_START = 109,
  DEVLINK_ATTR_FMSG_NEST_END = 110,
  DEVLINK_ATTR_FMSG_OBJ_NAME = 111,
  DEVLINK_ATTR_FMSG_OBJ_VALUE_TYPE = 112,
  DEVLINK_ATTR_FMSG_OBJ_VALUE_DATA = 113,
  DEVLINK_ATTR_HEALTH_REPORTER = 114,
  DEVLINK_ATTR_HEALTH_REPORTER_NAME = 115,
  DEVLINK_ATTR_HEALTH_REPORTER_STATE = 116,
  DEVLINK_ATTR_HEALTH_REPORTER_ERR_COUNT = 117,
  DEVLINK_ATTR_HEALTH_REPORTER_RECOVER_COUNT = 118,
  DEVLINK_ATTR_HEALTH_REPORTER_DUMP_TS = 119,
  DEVLINK_ATTR_HEALTH_REPORTER_GRACEFUL_PERIOD = 120,
  DEVLINK_ATTR_HEALTH_REPORTER_AUTO_RECOVER = 121,
  DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME = 122,
  DEVLINK_ATTR_FLASH_UPDATE_COMPONENT = 123,
  DEVLINK_ATTR_FLASH_UPDATE_STATUS_MSG = 124,
  DEVLINK_ATTR_FLASH_UPDATE_STATUS_DONE = 125,
  DEVLINK_ATTR_FLASH_UPDATE_STATUS_TOTAL = 126,
  DEVLINK_ATTR_PORT_PCI_PF_NUMBER = 127,
  DEVLINK_ATTR_PORT_PCI_VF_NUMBER = 128,
  DEVLINK_ATTR_STATS = 129,
  DEVLINK_ATTR_TRAP_NAME = 130,
  DEVLINK_ATTR_TRAP_ACTION = 131,
  DEVLINK_ATTR_TRAP_TYPE = 132,
  DEVLINK_ATTR_TRAP_GENERIC = 133,
  DEVLINK_ATTR_TRAP_METADATA = 134,
  DEVLINK_ATTR_TRAP_GROUP_NAME = 135,
  DEVLINK_ATTR_RELOAD_FAILED = 136,
  DEVLINK_ATTR_HEALTH_REPORTER_DUMP_TS_NS = 137,
  DEVLINK_ATTR_NETNS_FD = 138,
  DEVLINK_ATTR_NETNS_PID = 139,
  DEVLINK_ATTR_NETNS_ID = 140,
  DEVLINK_ATTR_HEALTH_REPORTER_AUTO_DUMP = 141,
  DEVLINK_ATTR_TRAP_POLICER_ID = 142,
  DEVLINK_ATTR_TRAP_POLICER_RATE = 143,
  DEVLINK_ATTR_TRAP_POLICER_BURST = 144,
  DEVLINK_ATTR_PORT_FUNCTION = 145,
  DEVLINK_ATTR_INFO_BOARD_SERIAL_NUMBER = 146,
  DEVLINK_ATTR_PORT_LANES = 147,
  DEVLINK_ATTR_PORT_SPLITTABLE = 148,
  DEVLINK_ATTR_PORT_EXTERNAL = 149,
  DEVLINK_ATTR_PORT_CONTROLLER_NUMBER = 150,
  DEVLINK_ATTR_FLASH_UPDATE_STATUS_TIMEOUT = 151,
  DEVLINK_ATTR_FLASH_UPDATE_OVERWRITE_MASK = 152,
  DEVLINK_ATTR_RELOAD_ACTION = 153,
  DEVLINK_ATTR_RELOAD_ACTIONS_PERFORMED = 154,
  DEVLINK_ATTR_RELOAD_LIMITS = 155,
  DEVLINK_ATTR_DEV_STATS = 156,
  DEVLINK_ATTR_RELOAD_STATS = 157,
  DEVLINK_ATTR_RELOAD_STATS_ENTRY = 158,
  DEVLINK_ATTR_RELOAD_STATS_LIMIT = 159,
  DEVLINK_ATTR_RELOAD_STATS_VALUE = 160,
  DEVLINK_ATTR_REMOTE_RELOAD_STATS = 161,
  DEVLINK_ATTR_RELOAD_ACTION_INFO = 162,
  DEVLINK_ATTR_RELOAD_ACTION_STATS = 163,
  DEVLINK_ATTR_PORT_PCI_SF_NUMBER = 164,
  __DEVLINK_ATTR_MAX = 165,
  DEVLINK_ATTR_MAX = 164,
};

enum devlink_dpipe_match_type {
  DEVLINK_DPIPE_MATCH_TYPE_FIELD_EXACT = 0,
};

enum devlink_dpipe_action_type {
  DEVLINK_DPIPE_ACTION_TYPE_FIELD_MODIFY = 0,
};

enum devlink_dpipe_field_ethernet_id {
  DEVLINK_DPIPE_FIELD_ETHERNET_DST_MAC = 0,
};

enum devlink_dpipe_field_ipv4_id {
  DEVLINK_DPIPE_FIELD_IPV4_DST_IP = 0,
};

enum devlink_dpipe_field_ipv6_id {
  DEVLINK_DPIPE_FIELD_IPV6_DST_IP = 0,
};

enum devlink_dpipe_header_id {
  DEVLINK_DPIPE_HEADER_ETHERNET = 0,
  DEVLINK_DPIPE_HEADER_IPV4 = 1,
  DEVLINK_DPIPE_HEADER_IPV6 = 2,
};

enum devlink_resource_unit {
  DEVLINK_RESOURCE_UNIT_ENTRY = 0,
};

enum devlink_port_function_attr {
  DEVLINK_PORT_FUNCTION_ATTR_UNSPEC = 0,
  DEVLINK_PORT_FUNCTION_ATTR_HW_ADDR = 1,
  DEVLINK_PORT_FN_ATTR_STATE = 2,
  DEVLINK_PORT_FN_ATTR_OPSTATE = 3,
  __DEVLINK_PORT_FUNCTION_ATTR_MAX = 4,
  DEVLINK_PORT_FUNCTION_ATTR_MAX = 3,
};

struct devlink_dpipe_match {
  enum devlink_dpipe_match_type type;
  unsigned int header_index;
  struct devlink_dpipe_header* header;
  unsigned int field_id;
};

struct devlink_dpipe_action {
  enum devlink_dpipe_action_type type;
  unsigned int header_index;
  struct devlink_dpipe_header* header;
  unsigned int field_id;
};

struct devlink_dpipe_value {
  union {
    struct devlink_dpipe_action* action;
    struct devlink_dpipe_match* match;
  };
  unsigned int mapping_value;
  bool mapping_valid;
  unsigned int value_size;
  void* value;
  void* mask;
};

struct devlink_dpipe_entry {
  u64 index;
  struct devlink_dpipe_value* match_values;
  unsigned int match_values_count;
  struct devlink_dpipe_value* action_values;
  unsigned int action_values_count;
  u64 counter;
  bool counter_valid;
};

struct devlink_dpipe_dump_ctx {
  struct genl_info* info;
  enum devlink_command cmd;
  struct sk_buff* skb;
  struct nlattr* nest;
  void* hdr;
};

struct devlink_dpipe_table_ops;

struct devlink_dpipe_table {
  void* priv;
  struct list_head list;
  const char* name;
  bool counters_enabled;
  bool counter_control_extern;
  bool resource_valid;
  u64 resource_id;
  u64 resource_units;
  struct devlink_dpipe_table_ops* table_ops;
  struct callback_head rcu;
};

struct devlink_dpipe_table_ops {
  int (*actions_dump)(void*, struct sk_buff*);
  int (*matches_dump)(void*, struct sk_buff*);
  int (*entries_dump)(void*, bool, struct devlink_dpipe_dump_ctx*);
  int (*counters_set_update)(void*, bool);
  u64 (*size_get)(void*);
};

struct devlink_resource_size_params {
  u64 size_min;
  u64 size_max;
  u64 size_granularity;
  enum devlink_resource_unit unit;
};

typedef u64 devlink_resource_occ_get_t(void*);

struct devlink_resource {
  const char* name;
  u64 id;
  u64 size;
  u64 size_new;
  bool size_valid;
  struct devlink_resource* parent;
  struct devlink_resource_size_params size_params;
  struct list_head list;
  struct list_head resource_list;
  devlink_resource_occ_get_t* occ_get;
  void* occ_get_priv;
};

struct devlink_flash_notify {
  const char* status_msg;
  const char* component;
  long unsigned int done;
  long unsigned int total;
  long unsigned int timeout;
};

struct devlink_param_item {
  struct list_head list;
  const struct devlink_param* param;
  union devlink_param_value driverinit_value;
  bool driverinit_value_valid;
  bool published;
};

struct devlink_port_region_ops {
  const char* name;
  void (*destructor)(const void*);
  int (*snapshot)(
      struct devlink_port*,
      const struct devlink_port_region_ops*,
      struct netlink_ext_ack*,
      u8**);
  void* priv;
};

struct devlink_health_reporter {
  struct list_head list;
  void* priv;
  const struct devlink_health_reporter_ops* ops;
  struct devlink* devlink;
  struct devlink_port* devlink_port;
  struct devlink_fmsg* dump_fmsg;
  struct mutex dump_lock;
  u64 graceful_period;
  bool auto_recover;
  bool auto_dump;
  u8 health_state;
  u64 dump_ts;
  u64 dump_real_ts;
  u64 error_count;
  u64 recovery_count;
  u64 last_recovery_ts;
  refcount_t refcount;
};

struct devlink_fmsg {
  struct list_head item_list;
  bool putting_binary;
};

struct devlink_trap_metadata {
  const char* trap_name;
  const char* trap_group_name;
  struct net_device* input_dev;
  const struct flow_action_cookie* fa_cookie;
  enum devlink_trap_type trap_type;
};

struct devlink_info_req {
  struct sk_buff* msg;
};

struct trace_event_raw_devlink_hwmsg {
  struct trace_entry ent;
  u32 __data_loc_bus_name;
  u32 __data_loc_dev_name;
  u32 __data_loc_driver_name;
  bool incoming;
  long unsigned int type;
  u32 __data_loc_buf;
  size_t len;
  char __data[0];
};

struct trace_event_raw_devlink_hwerr {
  struct trace_entry ent;
  u32 __data_loc_bus_name;
  u32 __data_loc_dev_name;
  u32 __data_loc_driver_name;
  int err;
  u32 __data_loc_msg;
  char __data[0];
};

struct trace_event_raw_devlink_health_report {
  struct trace_entry ent;
  u32 __data_loc_bus_name;
  u32 __data_loc_dev_name;
  u32 __data_loc_driver_name;
  u32 __data_loc_reporter_name;
  u32 __data_loc_msg;
  char __data[0];
};

struct trace_event_raw_devlink_health_recover_aborted {
  struct trace_entry ent;
  u32 __data_loc_bus_name;
  u32 __data_loc_dev_name;
  u32 __data_loc_driver_name;
  u32 __data_loc_reporter_name;
  bool health_state;
  u64 time_since_last_recover;
  char __data[0];
};

struct trace_event_raw_devlink_health_reporter_state_update {
  struct trace_entry ent;
  u32 __data_loc_bus_name;
  u32 __data_loc_dev_name;
  u32 __data_loc_driver_name;
  u32 __data_loc_reporter_name;
  u8 new_state;
  char __data[0];
};

struct trace_event_raw_devlink_trap_report {
  struct trace_entry ent;
  u32 __data_loc_bus_name;
  u32 __data_loc_dev_name;
  u32 __data_loc_driver_name;
  u32 __data_loc_trap_name;
  u32 __data_loc_trap_group_name;
  u32 __data_loc_input_dev_name;
  char __data[0];
};

struct trace_event_data_offsets_devlink_hwmsg {
  u32 bus_name;
  u32 dev_name;
  u32 driver_name;
  u32 buf;
};

struct trace_event_data_offsets_devlink_hwerr {
  u32 bus_name;
  u32 dev_name;
  u32 driver_name;
  u32 msg;
};

struct trace_event_data_offsets_devlink_health_report {
  u32 bus_name;
  u32 dev_name;
  u32 driver_name;
  u32 reporter_name;
  u32 msg;
};

struct trace_event_data_offsets_devlink_health_recover_aborted {
  u32 bus_name;
  u32 dev_name;
  u32 driver_name;
  u32 reporter_name;
};

struct trace_event_data_offsets_devlink_health_reporter_state_update {
  u32 bus_name;
  u32 dev_name;
  u32 driver_name;
  u32 reporter_name;
};

struct trace_event_data_offsets_devlink_trap_report {
  u32 bus_name;
  u32 dev_name;
  u32 driver_name;
  u32 trap_name;
  u32 trap_group_name;
  u32 input_dev_name;
};

typedef void (*btf_trace_devlink_hwmsg)(
    void*,
    const struct devlink*,
    bool,
    long unsigned int,
    const u8*,
    size_t);

typedef void (
    *btf_trace_devlink_hwerr)(void*, const struct devlink*, int, const char*);

typedef void (*btf_trace_devlink_health_report)(
    void*,
    const struct devlink*,
    const char*,
    const char*);

typedef void (*btf_trace_devlink_health_recover_aborted)(
    void*,
    const struct devlink*,
    const char*,
    bool,
    u64);

typedef void (*btf_trace_devlink_health_reporter_state_update)(
    void*,
    const struct devlink*,
    const char*,
    bool);

typedef void (*btf_trace_devlink_trap_report)(
    void*,
    const struct devlink*,
    struct sk_buff*,
    const struct devlink_trap_metadata*);

struct devlink_sb {
  struct list_head list;
  unsigned int index;
  u32 size;
  u16 ingress_pools_count;
  u16 egress_pools_count;
  u16 ingress_tc_count;
  u16 egress_tc_count;
};

struct devlink_region___2 {
  struct devlink* devlink;
  struct devlink_port* port;
  struct list_head list;
  union {
    const struct devlink_region_ops* ops;
    const struct devlink_port_region_ops* port_ops;
  };
  struct list_head snapshot_list;
  u32 max_snapshots;
  u32 cur_snapshots;
  u64 size;
};

struct devlink_snapshot {
  struct list_head list;
  struct devlink_region___2* region;
  u8* data;
  u32 id;
};

enum devlink_multicast_groups {
  DEVLINK_MCGRP_CONFIG = 0,
};

struct devlink_reload_combination {
  enum devlink_reload_action action;
  enum devlink_reload_limit limit;
};

struct devlink_fmsg_item {
  struct list_head list;
  int attrtype;
  u8 nla_type;
  u16 len;
  int value[0];
};

struct devlink_stats {
  u64 rx_bytes;
  u64 rx_packets;
  struct u64_stats_sync syncp;
};

struct devlink_trap_policer_item {
  const struct devlink_trap_policer* policer;
  u64 rate;
  u64 burst;
  struct list_head list;
};

struct devlink_trap_group_item {
  const struct devlink_trap_group* group;
  struct devlink_trap_policer_item* policer_item;
  struct list_head list;
  struct devlink_stats* stats;
};

struct devlink_trap_item {
  const struct devlink_trap* trap;
  struct devlink_trap_group_item* group_item;
  struct list_head list;
  enum devlink_trap_action action;
  struct devlink_stats* stats;
  void* priv;
};

struct gro_cell;

struct gro_cells {
  struct gro_cell* cells;
};

struct gro_cell {
  struct sk_buff_head napi_skbs;
  struct napi_struct napi;
};

enum __sk_action {
  __SK_DROP = 0,
  __SK_PASS = 1,
  __SK_REDIRECT = 2,
  __SK_NONE = 3,
};

enum sk_psock_state_bits {
  SK_PSOCK_TX_ENABLED = 0,
};

struct sk_psock_link {
  struct list_head list;
  struct bpf_map* map;
  void* link_raw;
};

struct bpf_stab {
  struct bpf_map map;
  struct sock** sks;
  struct sk_psock_progs progs;
  raw_spinlock_t lock;
  long : 32;
  long : 64;
  long : 64;
};

typedef u64 (*btf_bpf_sock_map_update)(
    struct bpf_sock_ops_kern*,
    struct bpf_map*,
    void*,
    u64);

typedef u64 (
    *btf_bpf_sk_redirect_map)(struct sk_buff*, struct bpf_map*, u32, u64);

typedef u64 (
    *btf_bpf_msg_redirect_map)(struct sk_msg*, struct bpf_map*, u32, u64);

struct sock_map_seq_info {
  struct bpf_map* map;
  struct sock* sk;
  u32 index;
};

struct bpf_iter__sockmap {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct bpf_map* map;
  };
  union {
    void* key;
  };
  union {
    struct sock* sk;
  };
};

struct bpf_shtab_elem {
  struct callback_head rcu;
  u32 hash;
  struct sock* sk;
  struct hlist_node node;
  u8 key[0];
};

struct bpf_shtab_bucket {
  struct hlist_head head;
  raw_spinlock_t lock;
};

struct bpf_shtab {
  struct bpf_map map;
  struct bpf_shtab_bucket* buckets;
  u32 buckets_num;
  u32 elem_size;
  struct sk_psock_progs progs;
  atomic_t count;
  long : 32;
  long : 64;
};

typedef u64 (*btf_bpf_sock_hash_update)(
    struct bpf_sock_ops_kern*,
    struct bpf_map*,
    void*,
    u64);

typedef u64 (
    *btf_bpf_sk_redirect_hash)(struct sk_buff*, struct bpf_map*, void*, u64);

typedef u64 (
    *btf_bpf_msg_redirect_hash)(struct sk_msg*, struct bpf_map*, void*, u64);

struct sock_hash_seq_info {
  struct bpf_map* map;
  struct bpf_shtab* htab;
  u32 bucket_id;
};

enum {
  SK_DIAG_BPF_STORAGE_REQ_NONE = 0,
  SK_DIAG_BPF_STORAGE_REQ_MAP_FD = 1,
  __SK_DIAG_BPF_STORAGE_REQ_MAX = 2,
};

enum {
  SK_DIAG_BPF_STORAGE_REP_NONE = 0,
  SK_DIAG_BPF_STORAGE = 1,
  __SK_DIAG_BPF_STORAGE_REP_MAX = 2,
};

enum {
  SK_DIAG_BPF_STORAGE_NONE = 0,
  SK_DIAG_BPF_STORAGE_PAD = 1,
  SK_DIAG_BPF_STORAGE_MAP_ID = 2,
  SK_DIAG_BPF_STORAGE_MAP_VALUE = 3,
  __SK_DIAG_BPF_STORAGE_MAX = 4,
};

typedef u64 (
    *btf_bpf_sk_storage_get)(struct bpf_map*, struct sock*, void*, u64);

typedef u64 (*btf_bpf_sk_storage_delete)(struct bpf_map*, struct sock*);

typedef u64 (
    *btf_bpf_sk_storage_get_tracing)(struct bpf_map*, struct sock*, void*, u64);

typedef u64 (*btf_bpf_sk_storage_delete_tracing)(struct bpf_map*, struct sock*);

struct bpf_sk_storage_diag {
  u32 nr_maps;
  struct bpf_map* maps[0];
};

struct bpf_iter_seq_sk_storage_map_info {
  struct bpf_map* map;
  unsigned int bucket_id;
  unsigned int skip_elems;
};

struct bpf_iter__bpf_sk_storage_map {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct bpf_map* map;
  };
  union {
    struct sock* sk;
  };
  union {
    void* value;
  };
};

struct compat_cmsghdr {
  compat_size_t cmsg_len;
  compat_int_t cmsg_level;
  compat_int_t cmsg_type;
};

typedef struct sk_buff* (*gro_receive_t)(struct list_head*, struct sk_buff*);

struct nvmem_cell___2;

struct tc_ratespec {
  unsigned char cell_log;
  __u8 linklayer;
  short unsigned int overhead;
  short int cell_align;
  short unsigned int mpu;
  __u32 rate;
};

struct tc_prio_qopt {
  int bands;
  __u8 priomap[16];
};

enum {
  TCA_UNSPEC = 0,
  TCA_KIND = 1,
  TCA_OPTIONS = 2,
  TCA_STATS = 3,
  TCA_XSTATS = 4,
  TCA_RATE = 5,
  TCA_FCNT = 6,
  TCA_STATS2 = 7,
  TCA_STAB = 8,
  TCA_PAD = 9,
  TCA_DUMP_INVISIBLE = 10,
  TCA_CHAIN = 11,
  TCA_HW_OFFLOAD = 12,
  TCA_INGRESS_BLOCK = 13,
  TCA_EGRESS_BLOCK = 14,
  TCA_DUMP_FLAGS = 15,
  __TCA_MAX = 16,
};

struct skb_array {
  struct ptr_ring ring;
};

struct psched_ratecfg {
  u64 rate_bytes_ps;
  u32 mult;
  u16 overhead;
  u8 linklayer;
  u8 shift;
};

struct mini_Qdisc_pair {
  struct mini_Qdisc miniq1;
  struct mini_Qdisc miniq2;
  struct mini_Qdisc** p_miniq;
};

struct pfifo_fast_priv {
  struct skb_array q[3];
};

struct tc_qopt_offload_stats {
  struct gnet_stats_basic_packed* bstats;
  struct gnet_stats_queue* qstats;
};

enum tc_mq_command {
  TC_MQ_CREATE = 0,
  TC_MQ_DESTROY = 1,
  TC_MQ_STATS = 2,
  TC_MQ_GRAFT = 3,
};

struct tc_mq_opt_offload_graft_params {
  long unsigned int queue;
  u32 child_handle;
};

struct tc_mq_qopt_offload {
  enum tc_mq_command command;
  u32 handle;
  union {
    struct tc_qopt_offload_stats stats;
    struct tc_mq_opt_offload_graft_params graft_params;
  };
};

struct mq_sched {
  struct Qdisc** qdiscs;
};

struct sch_frag_data {
  long unsigned int dst;
  struct qdisc_skb_cb cb;
  __be16 inner_protocol;
  u16 vlan_tci;
  __be16 vlan_proto;
  unsigned int l2_len;
  u8 l2_data[18];
  int (*xmit)(struct sk_buff*);
};

enum tc_link_layer {
  TC_LINKLAYER_UNAWARE = 0,
  TC_LINKLAYER_ETHERNET = 1,
  TC_LINKLAYER_ATM = 2,
};

enum {
  TCA_STAB_UNSPEC = 0,
  TCA_STAB_BASE = 1,
  TCA_STAB_DATA = 2,
  __TCA_STAB_MAX = 3,
};

struct qdisc_rate_table {
  struct tc_ratespec rate;
  u32 data[256];
  struct qdisc_rate_table* next;
  int refcnt;
};

struct Qdisc_class_common {
  u32 classid;
  struct hlist_node hnode;
};

struct Qdisc_class_hash {
  struct hlist_head* hash;
  unsigned int hashsize;
  unsigned int hashmask;
  unsigned int hashelems;
};

struct qdisc_watchdog {
  u64 last_expires;
  struct hrtimer timer;
  struct Qdisc* qdisc;
};

enum tc_root_command {
  TC_ROOT_GRAFT = 0,
};

struct tc_root_qopt_offload {
  enum tc_root_command command;
  u32 handle;
  bool ingress;
};

struct check_loop_arg {
  struct qdisc_walker w;
  struct Qdisc* p;
  int depth;
};

struct tcf_bind_args {
  struct tcf_walker w;
  long unsigned int base;
  long unsigned int cl;
  u32 classid;
};

struct tc_bind_class_args {
  struct qdisc_walker w;
  long unsigned int new_cl;
  u32 portid;
  u32 clid;
};

struct qdisc_dump_args {
  struct qdisc_walker w;
  struct sk_buff* skb;
  struct netlink_callback* cb;
};

enum net_xmit_qdisc_t {
  __NET_XMIT_STOLEN = 65536,
  __NET_XMIT_BYPASS = 131072,
};

enum {
  TCA_ACT_UNSPEC = 0,
  TCA_ACT_KIND = 1,
  TCA_ACT_OPTIONS = 2,
  TCA_ACT_INDEX = 3,
  TCA_ACT_STATS = 4,
  TCA_ACT_PAD = 5,
  TCA_ACT_COOKIE = 6,
  TCA_ACT_FLAGS = 7,
  TCA_ACT_HW_STATS = 8,
  TCA_ACT_USED_HW_STATS = 9,
  __TCA_ACT_MAX = 10,
};

struct psample_group {
  struct list_head list;
  struct net* net;
  u32 group_num;
  u32 refcount;
  u32 seq;
  struct callback_head rcu;
};

struct action_gate_entry {
  u8 gate_state;
  u32 interval;
  s32 ipv;
  s32 maxoctets;
};

enum qdisc_class_ops_flags {
  QDISC_CLASS_OPS_DOIT_UNLOCKED = 1,
};

enum tcf_proto_ops_flags {
  TCF_PROTO_OPS_DOIT_UNLOCKED = 1,
};

typedef void tcf_chain_head_change_t(struct tcf_proto*, void*);

struct tcf_block_ext_info {
  enum flow_block_binder_type binder_type;
  tcf_chain_head_change_t* chain_head_change;
  void* chain_head_change_priv;
  u32 block_index;
};

struct tcf_qevent {
  struct tcf_block* block;
  struct tcf_block_ext_info info;
  struct tcf_proto* filter_chain;
};

enum pedit_header_type {
  TCA_PEDIT_KEY_EX_HDR_TYPE_NETWORK = 0,
  TCA_PEDIT_KEY_EX_HDR_TYPE_ETH = 1,
  TCA_PEDIT_KEY_EX_HDR_TYPE_IP4 = 2,
  TCA_PEDIT_KEY_EX_HDR_TYPE_IP6 = 3,
  TCA_PEDIT_KEY_EX_HDR_TYPE_TCP = 4,
  TCA_PEDIT_KEY_EX_HDR_TYPE_UDP = 5,
  __PEDIT_HDR_TYPE_MAX = 6,
};

enum pedit_cmd {
  TCA_PEDIT_KEY_EX_CMD_SET = 0,
  TCA_PEDIT_KEY_EX_CMD_ADD = 1,
  __PEDIT_CMD_MAX = 2,
};

struct tc_pedit_key {
  __u32 mask;
  __u32 val;
  __u32 off;
  __u32 at;
  __u32 offmask;
  __u32 shift;
};

struct tcf_pedit_key_ex {
  enum pedit_header_type htype;
  enum pedit_cmd cmd;
};

struct tcf_pedit {
  struct tc_action common;
  unsigned char tcfp_nkeys;
  unsigned char tcfp_flags;
  struct tc_pedit_key* tcfp_keys;
  struct tcf_pedit_key_ex* tcfp_keys_ex;
};

struct tcf_vlan_params {
  int tcfv_action;
  unsigned char tcfv_push_dst[6];
  unsigned char tcfv_push_src[6];
  u16 tcfv_push_vid;
  __be16 tcfv_push_proto;
  u8 tcfv_push_prio;
  struct callback_head rcu;
};

struct tcf_vlan {
  struct tc_action common;
  struct tcf_vlan_params* vlan_p;
};

struct tcf_tunnel_key_params {
  struct callback_head rcu;
  int tcft_action;
  struct metadata_dst* tcft_enc_metadata;
};

struct tcf_tunnel_key {
  struct tc_action common;
  struct tcf_tunnel_key_params* params;
};

struct tcf_csum_params {
  u32 update_flags;
  struct callback_head rcu;
};

struct tcf_csum {
  struct tc_action common;
  struct tcf_csum_params* params;
};

struct tcf_police_params {
  int tcfp_result;
  u32 tcfp_ewma_rate;
  s64 tcfp_burst;
  u32 tcfp_mtu;
  s64 tcfp_mtu_ptoks;
  struct psched_ratecfg rate;
  bool rate_present;
  struct psched_ratecfg peak;
  bool peak_present;
  struct callback_head rcu;
};

struct tcf_police {
  struct tc_action common;
  struct tcf_police_params* params;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  spinlock_t tcfp_lock;
  s64 tcfp_toks;
  s64 tcfp_ptoks;
  s64 tcfp_t_c;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct tcf_sample {
  struct tc_action common;
  u32 rate;
  bool truncate;
  u32 trunc_size;
  struct psample_group* psample_group;
  u32 psample_group_num;
  struct list_head tcfm_list;
};

struct tcf_skbedit_params {
  u32 flags;
  u32 priority;
  u32 mark;
  u32 mask;
  u16 queue_mapping;
  u16 ptype;
  struct callback_head rcu;
};

struct tcf_skbedit {
  struct tc_action common;
  struct tcf_skbedit_params* params;
};

struct nf_nat_range2 {
  unsigned int flags;
  union nf_inet_addr min_addr;
  union nf_inet_addr max_addr;
  union nf_conntrack_man_proto min_proto;
  union nf_conntrack_man_proto max_proto;
  union nf_conntrack_man_proto base_proto;
};

struct tcf_ct_flow_table;

struct tcf_ct_params {
  struct nf_conn* tmpl;
  u16 zone;
  u32 mark;
  u32 mark_mask;
  u32 labels[4];
  u32 labels_mask[4];
  struct nf_nat_range2 range;
  bool ipv4_range;
  u16 ct_action;
  struct callback_head rcu;
  struct tcf_ct_flow_table* ct_ft;
  struct nf_flowtable* nf_ft;
};

struct tcf_ct {
  struct tc_action common;
  struct tcf_ct_params* params;
};

struct tcf_mpls_params {
  int tcfm_action;
  u32 tcfm_label;
  u8 tcfm_tc;
  u8 tcfm_ttl;
  u8 tcfm_bos;
  __be16 tcfm_proto;
  struct callback_head rcu;
};

struct tcf_mpls {
  struct tc_action common;
  struct tcf_mpls_params* mpls_p;
};

struct tcfg_gate_entry {
  int index;
  u8 gate_state;
  u32 interval;
  s32 ipv;
  s32 maxoctets;
  struct list_head list;
};

struct tcf_gate_params {
  s32 tcfg_priority;
  u64 tcfg_basetime;
  u64 tcfg_cycletime;
  u64 tcfg_cycletime_ext;
  u32 tcfg_flags;
  s32 tcfg_clockid;
  size_t num_entries;
  struct list_head entries;
};

struct tcf_gate {
  struct tc_action common;
  struct tcf_gate_params param;
  u8 current_gate_status;
  ktime_t current_close_time;
  u32 current_entry_octets;
  s32 current_max_octets;
  struct tcfg_gate_entry* next_entry;
  struct hrtimer hitimer;
  enum tk_offsets tk_offset;
};

struct tcf_filter_chain_list_item {
  struct list_head list;
  tcf_chain_head_change_t* chain_head_change;
  void* chain_head_change_priv;
};

struct tcf_net {
  spinlock_t idr_lock;
  struct idr idr;
};

struct tcf_block_owner_item {
  struct list_head list;
  struct Qdisc* q;
  enum flow_block_binder_type binder_type;
};

struct tcf_chain_info {
  struct tcf_proto** pprev;
  struct tcf_proto* next;
};

struct tcf_dump_args {
  struct tcf_walker w;
  struct sk_buff* skb;
  struct netlink_callback* cb;
  struct tcf_block* block;
  struct Qdisc* q;
  u32 parent;
  bool terse_dump;
};

struct tcamsg {
  unsigned char tca_family;
  unsigned char tca__pad1;
  short unsigned int tca__pad2;
};

enum {
  TCA_ROOT_UNSPEC = 0,
  TCA_ROOT_TAB = 1,
  TCA_ROOT_FLAGS = 2,
  TCA_ROOT_COUNT = 3,
  TCA_ROOT_TIME_DELTA = 4,
  __TCA_ROOT_MAX = 5,
};

struct tc_action_net {
  struct tcf_idrinfo* idrinfo;
  const struct tc_action_ops* ops;
};

struct tc_fifo_qopt {
  __u32 limit;
};

enum tc_fifo_command {
  TC_FIFO_REPLACE = 0,
  TC_FIFO_DESTROY = 1,
  TC_FIFO_STATS = 2,
};

struct tc_fifo_qopt_offload {
  enum tc_fifo_command command;
  u32 handle;
  u32 parent;
  union {
    struct tc_qopt_offload_stats stats;
  };
};

struct ingress_sched_data {
  struct tcf_block* block;
  struct tcf_block_ext_info block_info;
  struct mini_Qdisc_pair miniqp;
};

struct clsact_sched_data {
  struct tcf_block* ingress_block;
  struct tcf_block* egress_block;
  struct tcf_block_ext_info ingress_block_info;
  struct tcf_block_ext_info egress_block_info;
  struct mini_Qdisc_pair miniqp_ingress;
  struct mini_Qdisc_pair miniqp_egress;
};

struct sockaddr_nl {
  __kernel_sa_family_t nl_family;
  short unsigned int nl_pad;
  __u32 nl_pid;
  __u32 nl_groups;
};

struct nlmsgerr {
  int error;
  struct nlmsghdr msg;
};

enum nlmsgerr_attrs {
  NLMSGERR_ATTR_UNUSED = 0,
  NLMSGERR_ATTR_MSG = 1,
  NLMSGERR_ATTR_OFFS = 2,
  NLMSGERR_ATTR_COOKIE = 3,
  NLMSGERR_ATTR_POLICY = 4,
  __NLMSGERR_ATTR_MAX = 5,
  NLMSGERR_ATTR_MAX = 4,
};

struct nl_pktinfo {
  __u32 group;
};

enum {
  NETLINK_UNCONNECTED = 0,
  NETLINK_CONNECTED = 1,
};

enum netlink_skb_flags {
  NETLINK_SKB_DST = 8,
};

struct netlink_notify {
  struct net* net;
  u32 portid;
  int protocol;
};

struct netlink_tap {
  struct net_device* dev;
  struct module* module;
  struct list_head list;
};

struct trace_event_raw_netlink_extack {
  struct trace_entry ent;
  u32 __data_loc_msg;
  char __data[0];
};

struct trace_event_data_offsets_netlink_extack {
  u32 msg;
};

typedef void (*btf_trace_netlink_extack)(void*, const char*);

struct netlink_sock {
  struct sock sk;
  u32 portid;
  u32 dst_portid;
  u32 dst_group;
  u32 flags;
  u32 subscriptions;
  u32 ngroups;
  long unsigned int* groups;
  long unsigned int state;
  size_t max_recvmsg_len;
  wait_queue_head_t wait;
  bool bound;
  bool cb_running;
  int dump_done_errno;
  struct netlink_callback cb;
  struct mutex* cb_mutex;
  struct mutex cb_def_mutex;
  void (*netlink_rcv)(struct sk_buff*);
  int (*netlink_bind)(struct net*, int);
  void (*netlink_unbind)(struct net*, int);
  struct module* module;
  struct rhash_head node;
  struct callback_head rcu;
  struct work_struct work;
};

struct listeners;

struct netlink_table {
  struct rhashtable hash;
  struct hlist_head mc_list;
  struct listeners* listeners;
  unsigned int flags;
  unsigned int groups;
  struct mutex* cb_mutex;
  struct module* module;
  int (*bind)(struct net*, int);
  void (*unbind)(struct net*, int);
  bool (*compare)(struct net*, struct sock*);
  int registered;
};

struct listeners {
  struct callback_head rcu;
  long unsigned int masks[0];
};

struct netlink_tap_net {
  struct list_head netlink_tap_all;
  struct mutex netlink_tap_lock;
};

struct netlink_compare_arg {
  possible_net_t pnet;
  u32 portid;
};

struct netlink_broadcast_data {
  struct sock* exclude_sk;
  struct net* net;
  u32 portid;
  u32 group;
  int failure;
  int delivery_failure;
  int congested;
  int delivered;
  gfp_t allocation;
  struct sk_buff* skb;
  struct sk_buff* skb2;
  int (*tx_filter)(struct sock*, struct sk_buff*, void*);
  void* tx_data;
};

struct netlink_set_err_data {
  struct sock* exclude_sk;
  u32 portid;
  u32 group;
  int code;
};

struct nl_seq_iter {
  struct seq_net_private p;
  struct rhashtable_iter hti;
  int link;
};

struct bpf_iter__netlink {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct netlink_sock* sk;
  };
};

enum {
  CTRL_CMD_UNSPEC = 0,
  CTRL_CMD_NEWFAMILY = 1,
  CTRL_CMD_DELFAMILY = 2,
  CTRL_CMD_GETFAMILY = 3,
  CTRL_CMD_NEWOPS = 4,
  CTRL_CMD_DELOPS = 5,
  CTRL_CMD_GETOPS = 6,
  CTRL_CMD_NEWMCAST_GRP = 7,
  CTRL_CMD_DELMCAST_GRP = 8,
  CTRL_CMD_GETMCAST_GRP = 9,
  CTRL_CMD_GETPOLICY = 10,
  __CTRL_CMD_MAX = 11,
};

enum {
  CTRL_ATTR_UNSPEC = 0,
  CTRL_ATTR_FAMILY_ID = 1,
  CTRL_ATTR_FAMILY_NAME = 2,
  CTRL_ATTR_VERSION = 3,
  CTRL_ATTR_HDRSIZE = 4,
  CTRL_ATTR_MAXATTR = 5,
  CTRL_ATTR_OPS = 6,
  CTRL_ATTR_MCAST_GROUPS = 7,
  CTRL_ATTR_POLICY = 8,
  CTRL_ATTR_OP_POLICY = 9,
  CTRL_ATTR_OP = 10,
  __CTRL_ATTR_MAX = 11,
};

enum {
  CTRL_ATTR_OP_UNSPEC = 0,
  CTRL_ATTR_OP_ID = 1,
  CTRL_ATTR_OP_FLAGS = 2,
  __CTRL_ATTR_OP_MAX = 3,
};

enum {
  CTRL_ATTR_MCAST_GRP_UNSPEC = 0,
  CTRL_ATTR_MCAST_GRP_NAME = 1,
  CTRL_ATTR_MCAST_GRP_ID = 2,
  __CTRL_ATTR_MCAST_GRP_MAX = 3,
};

enum {
  CTRL_ATTR_POLICY_UNSPEC = 0,
  CTRL_ATTR_POLICY_DO = 1,
  CTRL_ATTR_POLICY_DUMP = 2,
  __CTRL_ATTR_POLICY_DUMP_MAX = 3,
  CTRL_ATTR_POLICY_DUMP_MAX = 2,
};

struct genl_start_context {
  const struct genl_family* family;
  struct nlmsghdr* nlh;
  struct netlink_ext_ack* extack;
  const struct genl_ops* ops;
  int hdrlen;
};

struct netlink_policy_dump_state;

struct ctrl_dump_policy_ctx {
  struct netlink_policy_dump_state* state;
  const struct genl_family* rt;
  unsigned int opidx;
  u32 op;
  u16 fam_id;
  u8 policies : 1;
  u8 single_op : 1;
};

enum netlink_attribute_type {
  NL_ATTR_TYPE_INVALID = 0,
  NL_ATTR_TYPE_FLAG = 1,
  NL_ATTR_TYPE_U8 = 2,
  NL_ATTR_TYPE_U16 = 3,
  NL_ATTR_TYPE_U32 = 4,
  NL_ATTR_TYPE_U64 = 5,
  NL_ATTR_TYPE_S8 = 6,
  NL_ATTR_TYPE_S16 = 7,
  NL_ATTR_TYPE_S32 = 8,
  NL_ATTR_TYPE_S64 = 9,
  NL_ATTR_TYPE_BINARY = 10,
  NL_ATTR_TYPE_STRING = 11,
  NL_ATTR_TYPE_NUL_STRING = 12,
  NL_ATTR_TYPE_NESTED = 13,
  NL_ATTR_TYPE_NESTED_ARRAY = 14,
  NL_ATTR_TYPE_BITFIELD32 = 15,
};

enum netlink_policy_type_attr {
  NL_POLICY_TYPE_ATTR_UNSPEC = 0,
  NL_POLICY_TYPE_ATTR_TYPE = 1,
  NL_POLICY_TYPE_ATTR_MIN_VALUE_S = 2,
  NL_POLICY_TYPE_ATTR_MAX_VALUE_S = 3,
  NL_POLICY_TYPE_ATTR_MIN_VALUE_U = 4,
  NL_POLICY_TYPE_ATTR_MAX_VALUE_U = 5,
  NL_POLICY_TYPE_ATTR_MIN_LENGTH = 6,
  NL_POLICY_TYPE_ATTR_MAX_LENGTH = 7,
  NL_POLICY_TYPE_ATTR_POLICY_IDX = 8,
  NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE = 9,
  NL_POLICY_TYPE_ATTR_BITFIELD32_MASK = 10,
  NL_POLICY_TYPE_ATTR_PAD = 11,
  NL_POLICY_TYPE_ATTR_MASK = 12,
  __NL_POLICY_TYPE_ATTR_MAX = 13,
  NL_POLICY_TYPE_ATTR_MAX = 12,
};

struct netlink_policy_dump_state___2 {
  unsigned int policy_idx;
  unsigned int attr_idx;
  unsigned int n_alloc;
  struct {
    const struct nla_policy* policy;
    unsigned int maxtype;
  } policies[0];
};

struct netlink_diag_req {
  __u8 sdiag_family;
  __u8 sdiag_protocol;
  __u16 pad;
  __u32 ndiag_ino;
  __u32 ndiag_show;
  __u32 ndiag_cookie[2];
};

struct netlink_diag_msg {
  __u8 ndiag_family;
  __u8 ndiag_type;
  __u8 ndiag_protocol;
  __u8 ndiag_state;
  __u32 ndiag_portid;
  __u32 ndiag_dst_portid;
  __u32 ndiag_dst_group;
  __u32 ndiag_ino;
  __u32 ndiag_cookie[2];
};

enum {
  NETLINK_DIAG_MEMINFO = 0,
  NETLINK_DIAG_GROUPS = 1,
  NETLINK_DIAG_RX_RING = 2,
  NETLINK_DIAG_TX_RING = 3,
  NETLINK_DIAG_FLAGS = 4,
  __NETLINK_DIAG_MAX = 5,
};

struct trace_event_raw_bpf_test_finish {
  struct trace_entry ent;
  int err;
  char __data[0];
};

struct trace_event_data_offsets_bpf_test_finish {};

typedef void (*btf_trace_bpf_test_finish)(void*, int*);

struct bpf_test_timer {
  enum {
    NO_PREEMPT = 0,
    NO_MIGRATE = 1,
  } mode;
  u32 i;
  u64 time_start;
  u64 time_spent;
};

struct bpf_fentry_test_t {
  struct bpf_fentry_test_t* a;
};

struct bpf_raw_tp_test_run_info {
  struct bpf_prog* prog;
  void* ctx;
  u32 retval;
};

struct ethtool_value {
  __u32 cmd;
  __u32 data;
};

enum tunable_type_id {
  ETHTOOL_TUNABLE_UNSPEC = 0,
  ETHTOOL_TUNABLE_U8 = 1,
  ETHTOOL_TUNABLE_U16 = 2,
  ETHTOOL_TUNABLE_U32 = 3,
  ETHTOOL_TUNABLE_U64 = 4,
  ETHTOOL_TUNABLE_STRING = 5,
  ETHTOOL_TUNABLE_S8 = 6,
  ETHTOOL_TUNABLE_S16 = 7,
  ETHTOOL_TUNABLE_S32 = 8,
  ETHTOOL_TUNABLE_S64 = 9,
};

enum phy_tunable_id {
  ETHTOOL_PHY_ID_UNSPEC = 0,
  ETHTOOL_PHY_DOWNSHIFT = 1,
  ETHTOOL_PHY_FAST_LINK_DOWN = 2,
  ETHTOOL_PHY_EDPD = 3,
  __ETHTOOL_PHY_TUNABLE_COUNT = 4,
};

struct ethtool_gstrings {
  __u32 cmd;
  __u32 string_set;
  __u32 len;
  __u8 data[0];
};

struct ethtool_sset_info {
  __u32 cmd;
  __u32 reserved;
  __u64 sset_mask;
  __u32 data[0];
};

struct ethtool_perm_addr {
  __u32 cmd;
  __u32 size;
  __u8 data[0];
};

enum ethtool_flags {
  ETH_FLAG_TXVLAN = 128,
  ETH_FLAG_RXVLAN = 256,
  ETH_FLAG_LRO = 32768,
  ETH_FLAG_NTUPLE = 134217728,
  ETH_FLAG_RXHASH = 268435456,
};

struct ethtool_rxfh {
  __u32 cmd;
  __u32 rss_context;
  __u32 indir_size;
  __u32 key_size;
  __u8 hfunc;
  __u8 rsvd8[3];
  __u32 rsvd32;
  __u32 rss_config[0];
};

struct ethtool_get_features_block {
  __u32 available;
  __u32 requested;
  __u32 active;
  __u32 never_changed;
};

struct ethtool_gfeatures {
  __u32 cmd;
  __u32 size;
  struct ethtool_get_features_block features[0];
};

struct ethtool_set_features_block {
  __u32 valid;
  __u32 requested;
};

struct ethtool_sfeatures {
  __u32 cmd;
  __u32 size;
  struct ethtool_set_features_block features[0];
};

enum ethtool_sfeatures_retval_bits {
  ETHTOOL_F_UNSUPPORTED__BIT = 0,
  ETHTOOL_F_WISH__BIT = 1,
  ETHTOOL_F_COMPAT__BIT = 2,
};

struct ethtool_per_queue_op {
  __u32 cmd;
  __u32 sub_command;
  __u32 queue_mask[128];
  char data[0];
};

struct ethtool_rx_flow_rule {
  struct flow_rule* rule;
  long unsigned int priv[0];
};

struct ethtool_rx_flow_spec_input {
  const struct ethtool_rx_flow_spec* fs;
  u32 rss_ctx;
};

struct link_mode_info {
  int speed;
  u8 lanes;
  u8 duplex;
};

struct ethtool_link_usettings {
  struct ethtool_link_settings base;
  struct {
    __u32 supported[3];
    __u32 advertising[3];
    __u32 lp_advertising[3];
  } link_modes;
};

struct ethtool_rx_flow_key {
  struct flow_dissector_key_basic basic;
  union {
    struct flow_dissector_key_ipv4_addrs ipv4;
    struct flow_dissector_key_ipv6_addrs ipv6;
  };
  struct flow_dissector_key_ports tp;
  struct flow_dissector_key_ip ip;
  struct flow_dissector_key_vlan vlan;
  struct flow_dissector_key_eth_addrs eth_addrs;
  long : 48;
};

struct ethtool_rx_flow_match {
  struct flow_dissector dissector;
  int : 32;
  struct ethtool_rx_flow_key key;
  struct ethtool_rx_flow_key mask;
};

enum {
  ETHTOOL_UDP_TUNNEL_TYPE_VXLAN = 0,
  ETHTOOL_UDP_TUNNEL_TYPE_GENEVE = 1,
  ETHTOOL_UDP_TUNNEL_TYPE_VXLAN_GPE = 2,
  __ETHTOOL_UDP_TUNNEL_TYPE_CNT = 3,
};

enum {
  ETHTOOL_MSG_USER_NONE = 0,
  ETHTOOL_MSG_STRSET_GET = 1,
  ETHTOOL_MSG_LINKINFO_GET = 2,
  ETHTOOL_MSG_LINKINFO_SET = 3,
  ETHTOOL_MSG_LINKMODES_GET = 4,
  ETHTOOL_MSG_LINKMODES_SET = 5,
  ETHTOOL_MSG_LINKSTATE_GET = 6,
  ETHTOOL_MSG_DEBUG_GET = 7,
  ETHTOOL_MSG_DEBUG_SET = 8,
  ETHTOOL_MSG_WOL_GET = 9,
  ETHTOOL_MSG_WOL_SET = 10,
  ETHTOOL_MSG_FEATURES_GET = 11,
  ETHTOOL_MSG_FEATURES_SET = 12,
  ETHTOOL_MSG_PRIVFLAGS_GET = 13,
  ETHTOOL_MSG_PRIVFLAGS_SET = 14,
  ETHTOOL_MSG_RINGS_GET = 15,
  ETHTOOL_MSG_RINGS_SET = 16,
  ETHTOOL_MSG_CHANNELS_GET = 17,
  ETHTOOL_MSG_CHANNELS_SET = 18,
  ETHTOOL_MSG_COALESCE_GET = 19,
  ETHTOOL_MSG_COALESCE_SET = 20,
  ETHTOOL_MSG_PAUSE_GET = 21,
  ETHTOOL_MSG_PAUSE_SET = 22,
  ETHTOOL_MSG_EEE_GET = 23,
  ETHTOOL_MSG_EEE_SET = 24,
  ETHTOOL_MSG_TSINFO_GET = 25,
  ETHTOOL_MSG_CABLE_TEST_ACT = 26,
  ETHTOOL_MSG_CABLE_TEST_TDR_ACT = 27,
  ETHTOOL_MSG_TUNNEL_INFO_GET = 28,
  ETHTOOL_MSG_FEC_GET = 29,
  ETHTOOL_MSG_FEC_SET = 30,
  ETHTOOL_MSG_MODULE_EEPROM_GET = 31,
  ETHTOOL_MSG_STATS_GET = 32,
  __ETHTOOL_MSG_USER_CNT = 33,
  ETHTOOL_MSG_USER_MAX = 32,
};

enum {
  ETHTOOL_A_HEADER_UNSPEC = 0,
  ETHTOOL_A_HEADER_DEV_INDEX = 1,
  ETHTOOL_A_HEADER_DEV_NAME = 2,
  ETHTOOL_A_HEADER_FLAGS = 3,
  __ETHTOOL_A_HEADER_CNT = 4,
  ETHTOOL_A_HEADER_MAX = 3,
};

enum {
  ETHTOOL_A_STRSET_UNSPEC = 0,
  ETHTOOL_A_STRSET_HEADER = 1,
  ETHTOOL_A_STRSET_STRINGSETS = 2,
  ETHTOOL_A_STRSET_COUNTS_ONLY = 3,
  __ETHTOOL_A_STRSET_CNT = 4,
  ETHTOOL_A_STRSET_MAX = 3,
};

enum {
  ETHTOOL_A_LINKINFO_UNSPEC = 0,
  ETHTOOL_A_LINKINFO_HEADER = 1,
  ETHTOOL_A_LINKINFO_PORT = 2,
  ETHTOOL_A_LINKINFO_PHYADDR = 3,
  ETHTOOL_A_LINKINFO_TP_MDIX = 4,
  ETHTOOL_A_LINKINFO_TP_MDIX_CTRL = 5,
  ETHTOOL_A_LINKINFO_TRANSCEIVER = 6,
  __ETHTOOL_A_LINKINFO_CNT = 7,
  ETHTOOL_A_LINKINFO_MAX = 6,
};

enum {
  ETHTOOL_A_LINKMODES_UNSPEC = 0,
  ETHTOOL_A_LINKMODES_HEADER = 1,
  ETHTOOL_A_LINKMODES_AUTONEG = 2,
  ETHTOOL_A_LINKMODES_OURS = 3,
  ETHTOOL_A_LINKMODES_PEER = 4,
  ETHTOOL_A_LINKMODES_SPEED = 5,
  ETHTOOL_A_LINKMODES_DUPLEX = 6,
  ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG = 7,
  ETHTOOL_A_LINKMODES_MASTER_SLAVE_STATE = 8,
  ETHTOOL_A_LINKMODES_LANES = 9,
  __ETHTOOL_A_LINKMODES_CNT = 10,
  ETHTOOL_A_LINKMODES_MAX = 9,
};

enum {
  ETHTOOL_A_LINKSTATE_UNSPEC = 0,
  ETHTOOL_A_LINKSTATE_HEADER = 1,
  ETHTOOL_A_LINKSTATE_LINK = 2,
  ETHTOOL_A_LINKSTATE_SQI = 3,
  ETHTOOL_A_LINKSTATE_SQI_MAX = 4,
  ETHTOOL_A_LINKSTATE_EXT_STATE = 5,
  ETHTOOL_A_LINKSTATE_EXT_SUBSTATE = 6,
  __ETHTOOL_A_LINKSTATE_CNT = 7,
  ETHTOOL_A_LINKSTATE_MAX = 6,
};

enum {
  ETHTOOL_A_DEBUG_UNSPEC = 0,
  ETHTOOL_A_DEBUG_HEADER = 1,
  ETHTOOL_A_DEBUG_MSGMASK = 2,
  __ETHTOOL_A_DEBUG_CNT = 3,
  ETHTOOL_A_DEBUG_MAX = 2,
};

enum {
  ETHTOOL_A_WOL_UNSPEC = 0,
  ETHTOOL_A_WOL_HEADER = 1,
  ETHTOOL_A_WOL_MODES = 2,
  ETHTOOL_A_WOL_SOPASS = 3,
  __ETHTOOL_A_WOL_CNT = 4,
  ETHTOOL_A_WOL_MAX = 3,
};

enum {
  ETHTOOL_A_FEATURES_UNSPEC = 0,
  ETHTOOL_A_FEATURES_HEADER = 1,
  ETHTOOL_A_FEATURES_HW = 2,
  ETHTOOL_A_FEATURES_WANTED = 3,
  ETHTOOL_A_FEATURES_ACTIVE = 4,
  ETHTOOL_A_FEATURES_NOCHANGE = 5,
  __ETHTOOL_A_FEATURES_CNT = 6,
  ETHTOOL_A_FEATURES_MAX = 5,
};

enum {
  ETHTOOL_A_PRIVFLAGS_UNSPEC = 0,
  ETHTOOL_A_PRIVFLAGS_HEADER = 1,
  ETHTOOL_A_PRIVFLAGS_FLAGS = 2,
  __ETHTOOL_A_PRIVFLAGS_CNT = 3,
  ETHTOOL_A_PRIVFLAGS_MAX = 2,
};

enum {
  ETHTOOL_A_RINGS_UNSPEC = 0,
  ETHTOOL_A_RINGS_HEADER = 1,
  ETHTOOL_A_RINGS_RX_MAX = 2,
  ETHTOOL_A_RINGS_RX_MINI_MAX = 3,
  ETHTOOL_A_RINGS_RX_JUMBO_MAX = 4,
  ETHTOOL_A_RINGS_TX_MAX = 5,
  ETHTOOL_A_RINGS_RX = 6,
  ETHTOOL_A_RINGS_RX_MINI = 7,
  ETHTOOL_A_RINGS_RX_JUMBO = 8,
  ETHTOOL_A_RINGS_TX = 9,
  __ETHTOOL_A_RINGS_CNT = 10,
  ETHTOOL_A_RINGS_MAX = 9,
};

enum {
  ETHTOOL_A_CHANNELS_UNSPEC = 0,
  ETHTOOL_A_CHANNELS_HEADER = 1,
  ETHTOOL_A_CHANNELS_RX_MAX = 2,
  ETHTOOL_A_CHANNELS_TX_MAX = 3,
  ETHTOOL_A_CHANNELS_OTHER_MAX = 4,
  ETHTOOL_A_CHANNELS_COMBINED_MAX = 5,
  ETHTOOL_A_CHANNELS_RX_COUNT = 6,
  ETHTOOL_A_CHANNELS_TX_COUNT = 7,
  ETHTOOL_A_CHANNELS_OTHER_COUNT = 8,
  ETHTOOL_A_CHANNELS_COMBINED_COUNT = 9,
  __ETHTOOL_A_CHANNELS_CNT = 10,
  ETHTOOL_A_CHANNELS_MAX = 9,
};

enum {
  ETHTOOL_A_COALESCE_UNSPEC = 0,
  ETHTOOL_A_COALESCE_HEADER = 1,
  ETHTOOL_A_COALESCE_RX_USECS = 2,
  ETHTOOL_A_COALESCE_RX_MAX_FRAMES = 3,
  ETHTOOL_A_COALESCE_RX_USECS_IRQ = 4,
  ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ = 5,
  ETHTOOL_A_COALESCE_TX_USECS = 6,
  ETHTOOL_A_COALESCE_TX_MAX_FRAMES = 7,
  ETHTOOL_A_COALESCE_TX_USECS_IRQ = 8,
  ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ = 9,
  ETHTOOL_A_COALESCE_STATS_BLOCK_USECS = 10,
  ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX = 11,
  ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX = 12,
  ETHTOOL_A_COALESCE_PKT_RATE_LOW = 13,
  ETHTOOL_A_COALESCE_RX_USECS_LOW = 14,
  ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW = 15,
  ETHTOOL_A_COALESCE_TX_USECS_LOW = 16,
  ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW = 17,
  ETHTOOL_A_COALESCE_PKT_RATE_HIGH = 18,
  ETHTOOL_A_COALESCE_RX_USECS_HIGH = 19,
  ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH = 20,
  ETHTOOL_A_COALESCE_TX_USECS_HIGH = 21,
  ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH = 22,
  ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL = 23,
  __ETHTOOL_A_COALESCE_CNT = 24,
  ETHTOOL_A_COALESCE_MAX = 23,
};

enum {
  ETHTOOL_A_PAUSE_UNSPEC = 0,
  ETHTOOL_A_PAUSE_HEADER = 1,
  ETHTOOL_A_PAUSE_AUTONEG = 2,
  ETHTOOL_A_PAUSE_RX = 3,
  ETHTOOL_A_PAUSE_TX = 4,
  ETHTOOL_A_PAUSE_STATS = 5,
  __ETHTOOL_A_PAUSE_CNT = 6,
  ETHTOOL_A_PAUSE_MAX = 5,
};

enum {
  ETHTOOL_A_EEE_UNSPEC = 0,
  ETHTOOL_A_EEE_HEADER = 1,
  ETHTOOL_A_EEE_MODES_OURS = 2,
  ETHTOOL_A_EEE_MODES_PEER = 3,
  ETHTOOL_A_EEE_ACTIVE = 4,
  ETHTOOL_A_EEE_ENABLED = 5,
  ETHTOOL_A_EEE_TX_LPI_ENABLED = 6,
  ETHTOOL_A_EEE_TX_LPI_TIMER = 7,
  __ETHTOOL_A_EEE_CNT = 8,
  ETHTOOL_A_EEE_MAX = 7,
};

enum {
  ETHTOOL_A_TSINFO_UNSPEC = 0,
  ETHTOOL_A_TSINFO_HEADER = 1,
  ETHTOOL_A_TSINFO_TIMESTAMPING = 2,
  ETHTOOL_A_TSINFO_TX_TYPES = 3,
  ETHTOOL_A_TSINFO_RX_FILTERS = 4,
  ETHTOOL_A_TSINFO_PHC_INDEX = 5,
  __ETHTOOL_A_TSINFO_CNT = 6,
  ETHTOOL_A_TSINFO_MAX = 5,
};

enum {
  ETHTOOL_A_CABLE_TEST_UNSPEC = 0,
  ETHTOOL_A_CABLE_TEST_HEADER = 1,
  __ETHTOOL_A_CABLE_TEST_CNT = 2,
  ETHTOOL_A_CABLE_TEST_MAX = 1,
};

enum {
  ETHTOOL_A_CABLE_TEST_TDR_UNSPEC = 0,
  ETHTOOL_A_CABLE_TEST_TDR_HEADER = 1,
  ETHTOOL_A_CABLE_TEST_TDR_CFG = 2,
  __ETHTOOL_A_CABLE_TEST_TDR_CNT = 3,
  ETHTOOL_A_CABLE_TEST_TDR_MAX = 2,
};

enum {
  ETHTOOL_A_TUNNEL_INFO_UNSPEC = 0,
  ETHTOOL_A_TUNNEL_INFO_HEADER = 1,
  ETHTOOL_A_TUNNEL_INFO_UDP_PORTS = 2,
  __ETHTOOL_A_TUNNEL_INFO_CNT = 3,
  ETHTOOL_A_TUNNEL_INFO_MAX = 2,
};

enum {
  ETHTOOL_A_FEC_UNSPEC = 0,
  ETHTOOL_A_FEC_HEADER = 1,
  ETHTOOL_A_FEC_MODES = 2,
  ETHTOOL_A_FEC_AUTO = 3,
  ETHTOOL_A_FEC_ACTIVE = 4,
  ETHTOOL_A_FEC_STATS = 5,
  __ETHTOOL_A_FEC_CNT = 6,
  ETHTOOL_A_FEC_MAX = 5,
};

enum {
  ETHTOOL_A_MODULE_EEPROM_UNSPEC = 0,
  ETHTOOL_A_MODULE_EEPROM_HEADER = 1,
  ETHTOOL_A_MODULE_EEPROM_OFFSET = 2,
  ETHTOOL_A_MODULE_EEPROM_LENGTH = 3,
  ETHTOOL_A_MODULE_EEPROM_PAGE = 4,
  ETHTOOL_A_MODULE_EEPROM_BANK = 5,
  ETHTOOL_A_MODULE_EEPROM_I2C_ADDRESS = 6,
  ETHTOOL_A_MODULE_EEPROM_DATA = 7,
  __ETHTOOL_A_MODULE_EEPROM_CNT = 8,
  ETHTOOL_A_MODULE_EEPROM_MAX = 7,
};

enum {
  ETHTOOL_STATS_ETH_PHY = 0,
  ETHTOOL_STATS_ETH_MAC = 1,
  ETHTOOL_STATS_ETH_CTRL = 2,
  ETHTOOL_STATS_RMON = 3,
  __ETHTOOL_STATS_CNT = 4,
};

enum {
  ETHTOOL_A_STATS_ETH_PHY_5_SYM_ERR = 0,
  __ETHTOOL_A_STATS_ETH_PHY_CNT = 1,
  ETHTOOL_A_STATS_ETH_PHY_MAX = 0,
};

enum {
  ETHTOOL_A_STATS_ETH_MAC_2_TX_PKT = 0,
  ETHTOOL_A_STATS_ETH_MAC_3_SINGLE_COL = 1,
  ETHTOOL_A_STATS_ETH_MAC_4_MULTI_COL = 2,
  ETHTOOL_A_STATS_ETH_MAC_5_RX_PKT = 3,
  ETHTOOL_A_STATS_ETH_MAC_6_FCS_ERR = 4,
  ETHTOOL_A_STATS_ETH_MAC_7_ALIGN_ERR = 5,
  ETHTOOL_A_STATS_ETH_MAC_8_TX_BYTES = 6,
  ETHTOOL_A_STATS_ETH_MAC_9_TX_DEFER = 7,
  ETHTOOL_A_STATS_ETH_MAC_10_LATE_COL = 8,
  ETHTOOL_A_STATS_ETH_MAC_11_XS_COL = 9,
  ETHTOOL_A_STATS_ETH_MAC_12_TX_INT_ERR = 10,
  ETHTOOL_A_STATS_ETH_MAC_13_CS_ERR = 11,
  ETHTOOL_A_STATS_ETH_MAC_14_RX_BYTES = 12,
  ETHTOOL_A_STATS_ETH_MAC_15_RX_INT_ERR = 13,
  ETHTOOL_A_STATS_ETH_MAC_18_TX_MCAST = 14,
  ETHTOOL_A_STATS_ETH_MAC_19_TX_BCAST = 15,
  ETHTOOL_A_STATS_ETH_MAC_20_XS_DEFER = 16,
  ETHTOOL_A_STATS_ETH_MAC_21_RX_MCAST = 17,
  ETHTOOL_A_STATS_ETH_MAC_22_RX_BCAST = 18,
  ETHTOOL_A_STATS_ETH_MAC_23_IR_LEN_ERR = 19,
  ETHTOOL_A_STATS_ETH_MAC_24_OOR_LEN = 20,
  ETHTOOL_A_STATS_ETH_MAC_25_TOO_LONG_ERR = 21,
  __ETHTOOL_A_STATS_ETH_MAC_CNT = 22,
  ETHTOOL_A_STATS_ETH_MAC_MAX = 21,
};

enum {
  ETHTOOL_A_STATS_ETH_CTRL_3_TX = 0,
  ETHTOOL_A_STATS_ETH_CTRL_4_RX = 1,
  ETHTOOL_A_STATS_ETH_CTRL_5_RX_UNSUP = 2,
  __ETHTOOL_A_STATS_ETH_CTRL_CNT = 3,
  ETHTOOL_A_STATS_ETH_CTRL_MAX = 2,
};

enum {
  ETHTOOL_A_STATS_RMON_UNDERSIZE = 0,
  ETHTOOL_A_STATS_RMON_OVERSIZE = 1,
  ETHTOOL_A_STATS_RMON_FRAG = 2,
  ETHTOOL_A_STATS_RMON_JABBER = 3,
  __ETHTOOL_A_STATS_RMON_CNT = 4,
  ETHTOOL_A_STATS_RMON_MAX = 3,
};

enum ethtool_multicast_groups {
  ETHNL_MCGRP_MONITOR = 0,
};

struct ethnl_req_info {
  struct net_device* dev;
  u32 flags;
};

struct ethnl_reply_data {
  struct net_device* dev;
};

struct ethnl_request_ops {
  u8 request_cmd;
  u8 reply_cmd;
  u16 hdr_attr;
  unsigned int req_info_size;
  unsigned int reply_data_size;
  bool allow_nodev_do;
  int (*parse_request)(
      struct ethnl_req_info*,
      struct nlattr**,
      struct netlink_ext_ack*);
  int (*prepare_data)(
      const struct ethnl_req_info*,
      struct ethnl_reply_data*,
      struct genl_info*);
  int (*reply_size)(
      const struct ethnl_req_info*,
      const struct ethnl_reply_data*);
  int (*fill_reply)(
      struct sk_buff*,
      const struct ethnl_req_info*,
      const struct ethnl_reply_data*);
  void (*cleanup_data)(struct ethnl_reply_data*);
};

struct ethnl_dump_ctx {
  const struct ethnl_request_ops* ops;
  struct ethnl_req_info* req_info;
  struct ethnl_reply_data* reply_data;
  int pos_hash;
  int pos_idx;
};

typedef void (
    *ethnl_notify_handler_t)(struct net_device*, unsigned int, const void*);

enum {
  ETHTOOL_A_BITSET_BIT_UNSPEC = 0,
  ETHTOOL_A_BITSET_BIT_INDEX = 1,
  ETHTOOL_A_BITSET_BIT_NAME = 2,
  ETHTOOL_A_BITSET_BIT_VALUE = 3,
  __ETHTOOL_A_BITSET_BIT_CNT = 4,
  ETHTOOL_A_BITSET_BIT_MAX = 3,
};

enum {
  ETHTOOL_A_BITSET_BITS_UNSPEC = 0,
  ETHTOOL_A_BITSET_BITS_BIT = 1,
  __ETHTOOL_A_BITSET_BITS_CNT = 2,
  ETHTOOL_A_BITSET_BITS_MAX = 1,
};

enum {
  ETHTOOL_A_BITSET_UNSPEC = 0,
  ETHTOOL_A_BITSET_NOMASK = 1,
  ETHTOOL_A_BITSET_SIZE = 2,
  ETHTOOL_A_BITSET_BITS = 3,
  ETHTOOL_A_BITSET_VALUE = 4,
  ETHTOOL_A_BITSET_MASK = 5,
  __ETHTOOL_A_BITSET_CNT = 6,
  ETHTOOL_A_BITSET_MAX = 5,
};

typedef const char (*const ethnl_string_array_t)[32];

enum {
  ETHTOOL_A_STRING_UNSPEC = 0,
  ETHTOOL_A_STRING_INDEX = 1,
  ETHTOOL_A_STRING_VALUE = 2,
  __ETHTOOL_A_STRING_CNT = 3,
  ETHTOOL_A_STRING_MAX = 2,
};

enum {
  ETHTOOL_A_STRINGS_UNSPEC = 0,
  ETHTOOL_A_STRINGS_STRING = 1,
  __ETHTOOL_A_STRINGS_CNT = 2,
  ETHTOOL_A_STRINGS_MAX = 1,
};

enum {
  ETHTOOL_A_STRINGSET_UNSPEC = 0,
  ETHTOOL_A_STRINGSET_ID = 1,
  ETHTOOL_A_STRINGSET_COUNT = 2,
  ETHTOOL_A_STRINGSET_STRINGS = 3,
  __ETHTOOL_A_STRINGSET_CNT = 4,
  ETHTOOL_A_STRINGSET_MAX = 3,
};

enum {
  ETHTOOL_A_STRINGSETS_UNSPEC = 0,
  ETHTOOL_A_STRINGSETS_STRINGSET = 1,
  __ETHTOOL_A_STRINGSETS_CNT = 2,
  ETHTOOL_A_STRINGSETS_MAX = 1,
};

struct strset_info {
  bool per_dev;
  bool free_strings;
  unsigned int count;
  const char (*strings)[32];
};

struct strset_req_info {
  struct ethnl_req_info base;
  u32 req_ids;
  bool counts_only;
};

struct strset_reply_data {
  struct ethnl_reply_data base;
  struct strset_info sets[21];
};

struct linkinfo_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_link_ksettings ksettings;
  struct ethtool_link_settings* lsettings;
};

struct linkmodes_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_link_ksettings ksettings;
  struct ethtool_link_settings* lsettings;
  bool peer_empty;
};

struct linkstate_reply_data {
  struct ethnl_reply_data base;
  int link;
  int sqi;
  int sqi_max;
  bool link_ext_state_provided;
  struct ethtool_link_ext_state_info ethtool_link_ext_state_info;
};

struct debug_reply_data {
  struct ethnl_reply_data base;
  u32 msg_mask;
};

struct wol_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_wolinfo wol;
  bool show_sopass;
};

struct features_reply_data {
  struct ethnl_reply_data base;
  u32 hw[2];
  u32 wanted[2];
  u32 active[2];
  u32 nochange[2];
  u32 all[2];
};

struct privflags_reply_data {
  struct ethnl_reply_data base;
  const char (*priv_flag_names)[32];
  unsigned int n_priv_flags;
  u32 priv_flags;
};

struct rings_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_ringparam ringparam;
};

struct channels_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_channels channels;
};

struct coalesce_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_coalesce coalesce;
  u32 supported_params;
};

enum {
  ETHTOOL_A_PAUSE_STAT_UNSPEC = 0,
  ETHTOOL_A_PAUSE_STAT_PAD = 1,
  ETHTOOL_A_PAUSE_STAT_TX_FRAMES = 2,
  ETHTOOL_A_PAUSE_STAT_RX_FRAMES = 3,
  __ETHTOOL_A_PAUSE_STAT_CNT = 4,
  ETHTOOL_A_PAUSE_STAT_MAX = 3,
};

struct pause_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_pauseparam pauseparam;
  struct ethtool_pause_stats pausestat;
};

struct eee_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_eee eee;
};

struct tsinfo_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_ts_info ts_info;
};

enum {
  ETHTOOL_A_CABLE_PAIR_A = 0,
  ETHTOOL_A_CABLE_PAIR_B = 1,
  ETHTOOL_A_CABLE_PAIR_C = 2,
  ETHTOOL_A_CABLE_PAIR_D = 3,
};

enum {
  ETHTOOL_A_CABLE_RESULT_UNSPEC = 0,
  ETHTOOL_A_CABLE_RESULT_PAIR = 1,
  ETHTOOL_A_CABLE_RESULT_CODE = 2,
  __ETHTOOL_A_CABLE_RESULT_CNT = 3,
  ETHTOOL_A_CABLE_RESULT_MAX = 2,
};

enum {
  ETHTOOL_A_CABLE_FAULT_LENGTH_UNSPEC = 0,
  ETHTOOL_A_CABLE_FAULT_LENGTH_PAIR = 1,
  ETHTOOL_A_CABLE_FAULT_LENGTH_CM = 2,
  __ETHTOOL_A_CABLE_FAULT_LENGTH_CNT = 3,
  ETHTOOL_A_CABLE_FAULT_LENGTH_MAX = 2,
};

enum {
  ETHTOOL_A_CABLE_TEST_NTF_STATUS_UNSPEC = 0,
  ETHTOOL_A_CABLE_TEST_NTF_STATUS_STARTED = 1,
  ETHTOOL_A_CABLE_TEST_NTF_STATUS_COMPLETED = 2,
};

enum {
  ETHTOOL_A_CABLE_NEST_UNSPEC = 0,
  ETHTOOL_A_CABLE_NEST_RESULT = 1,
  ETHTOOL_A_CABLE_NEST_FAULT_LENGTH = 2,
  __ETHTOOL_A_CABLE_NEST_CNT = 3,
  ETHTOOL_A_CABLE_NEST_MAX = 2,
};

enum {
  ETHTOOL_A_CABLE_TEST_NTF_UNSPEC = 0,
  ETHTOOL_A_CABLE_TEST_NTF_HEADER = 1,
  ETHTOOL_A_CABLE_TEST_NTF_STATUS = 2,
  ETHTOOL_A_CABLE_TEST_NTF_NEST = 3,
  __ETHTOOL_A_CABLE_TEST_NTF_CNT = 4,
  ETHTOOL_A_CABLE_TEST_NTF_MAX = 3,
};

enum {
  ETHTOOL_A_CABLE_TEST_TDR_CFG_UNSPEC = 0,
  ETHTOOL_A_CABLE_TEST_TDR_CFG_FIRST = 1,
  ETHTOOL_A_CABLE_TEST_TDR_CFG_LAST = 2,
  ETHTOOL_A_CABLE_TEST_TDR_CFG_STEP = 3,
  ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR = 4,
  __ETHTOOL_A_CABLE_TEST_TDR_CFG_CNT = 5,
  ETHTOOL_A_CABLE_TEST_TDR_CFG_MAX = 4,
};

enum {
  ETHTOOL_A_CABLE_AMPLITUDE_UNSPEC = 0,
  ETHTOOL_A_CABLE_AMPLITUDE_PAIR = 1,
  ETHTOOL_A_CABLE_AMPLITUDE_mV = 2,
  __ETHTOOL_A_CABLE_AMPLITUDE_CNT = 3,
  ETHTOOL_A_CABLE_AMPLITUDE_MAX = 2,
};

enum {
  ETHTOOL_A_CABLE_PULSE_UNSPEC = 0,
  ETHTOOL_A_CABLE_PULSE_mV = 1,
  __ETHTOOL_A_CABLE_PULSE_CNT = 2,
  ETHTOOL_A_CABLE_PULSE_MAX = 1,
};

enum {
  ETHTOOL_A_CABLE_STEP_UNSPEC = 0,
  ETHTOOL_A_CABLE_STEP_FIRST_DISTANCE = 1,
  ETHTOOL_A_CABLE_STEP_LAST_DISTANCE = 2,
  ETHTOOL_A_CABLE_STEP_STEP_DISTANCE = 3,
  __ETHTOOL_A_CABLE_STEP_CNT = 4,
  ETHTOOL_A_CABLE_STEP_MAX = 3,
};

enum {
  ETHTOOL_A_CABLE_TDR_NEST_UNSPEC = 0,
  ETHTOOL_A_CABLE_TDR_NEST_STEP = 1,
  ETHTOOL_A_CABLE_TDR_NEST_AMPLITUDE = 2,
  ETHTOOL_A_CABLE_TDR_NEST_PULSE = 3,
  __ETHTOOL_A_CABLE_TDR_NEST_CNT = 4,
  ETHTOOL_A_CABLE_TDR_NEST_MAX = 3,
};

enum {
  ETHTOOL_A_TUNNEL_UDP_ENTRY_UNSPEC = 0,
  ETHTOOL_A_TUNNEL_UDP_ENTRY_PORT = 1,
  ETHTOOL_A_TUNNEL_UDP_ENTRY_TYPE = 2,
  __ETHTOOL_A_TUNNEL_UDP_ENTRY_CNT = 3,
  ETHTOOL_A_TUNNEL_UDP_ENTRY_MAX = 2,
};

enum {
  ETHTOOL_A_TUNNEL_UDP_TABLE_UNSPEC = 0,
  ETHTOOL_A_TUNNEL_UDP_TABLE_SIZE = 1,
  ETHTOOL_A_TUNNEL_UDP_TABLE_TYPES = 2,
  ETHTOOL_A_TUNNEL_UDP_TABLE_ENTRY = 3,
  __ETHTOOL_A_TUNNEL_UDP_TABLE_CNT = 4,
  ETHTOOL_A_TUNNEL_UDP_TABLE_MAX = 3,
};

enum {
  ETHTOOL_A_TUNNEL_UDP_UNSPEC = 0,
  ETHTOOL_A_TUNNEL_UDP_TABLE = 1,
  __ETHTOOL_A_TUNNEL_UDP_CNT = 2,
  ETHTOOL_A_TUNNEL_UDP_MAX = 1,
};

struct ethnl_tunnel_info_dump_ctx {
  struct ethnl_req_info req_info;
  int pos_hash;
  int pos_idx;
};

enum {
  ETHTOOL_A_FEC_STAT_UNSPEC = 0,
  ETHTOOL_A_FEC_STAT_PAD = 1,
  ETHTOOL_A_FEC_STAT_CORRECTED = 2,
  ETHTOOL_A_FEC_STAT_UNCORR = 3,
  ETHTOOL_A_FEC_STAT_CORR_BITS = 4,
  __ETHTOOL_A_FEC_STAT_CNT = 5,
  ETHTOOL_A_FEC_STAT_MAX = 4,
};

struct fec_stat_grp {
  u64 stats[9];
  u8 cnt;
};

struct fec_reply_data {
  struct ethnl_reply_data base;
  long unsigned int fec_link_modes[2];
  u32 active_fec;
  u8 fec_auto;
  struct fec_stat_grp corr;
  struct fec_stat_grp uncorr;
  struct fec_stat_grp corr_bits;
};

struct eeprom_req_info {
  struct ethnl_req_info base;
  u32 offset;
  u32 length;
  u8 page;
  u8 bank;
  u8 i2c_address;
};

struct eeprom_reply_data {
  struct ethnl_reply_data base;
  u32 length;
  u8* data;
};

enum {
  ETHTOOL_A_STATS_GRP_UNSPEC = 0,
  ETHTOOL_A_STATS_GRP_PAD = 1,
  ETHTOOL_A_STATS_GRP_ID = 2,
  ETHTOOL_A_STATS_GRP_SS_ID = 3,
  ETHTOOL_A_STATS_GRP_STAT = 4,
  ETHTOOL_A_STATS_GRP_HIST_RX = 5,
  ETHTOOL_A_STATS_GRP_HIST_TX = 6,
  ETHTOOL_A_STATS_GRP_HIST_BKT_LOW = 7,
  ETHTOOL_A_STATS_GRP_HIST_BKT_HI = 8,
  ETHTOOL_A_STATS_GRP_HIST_VAL = 9,
  __ETHTOOL_A_STATS_GRP_CNT = 10,
  ETHTOOL_A_STATS_GRP_MAX = 4,
};

struct stats_req_info {
  struct ethnl_req_info base;
  long unsigned int stat_mask[1];
};

struct stats_reply_data {
  struct ethnl_reply_data base;
  struct ethtool_eth_phy_stats phy_stats;
  struct ethtool_eth_mac_stats mac_stats;
  struct ethtool_eth_ctrl_stats ctrl_stats;
  struct ethtool_rmon_stats rmon_stats;
  const struct ethtool_rmon_hist_range* rmon_ranges;
};

enum nf_dev_hooks {
  NF_NETDEV_INGRESS = 0,
  NF_NETDEV_NUMHOOKS = 1,
};

struct nf_hook_entries_rcu_head {
  struct callback_head head;
  void* allocation;
};

struct nf_loginfo {
  u_int8_t type;
  union {
    struct {
      u_int32_t copy_len;
      u_int16_t group;
      u_int16_t qthreshold;
      u_int16_t flags;
    } ulog;
    struct {
      u_int8_t level;
      u_int8_t logflags;
    } log;
  } u;
};

struct nf_log_buf {
  unsigned int count;
  char buf[1020];
};

struct nf_bridge_info {
  enum {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2,
  } orig_proto : 8;
  u8 pkt_otherhost : 1;
  u8 in_prerouting : 1;
  u8 bridged_dnat : 1;
  __u16 frag_max_size;
  struct net_device* physindev;
  struct net_device* physoutdev;
  union {
    __be32 ipv4_daddr;
    struct in6_addr ipv6_daddr;
    char neigh_header[8];
  };
};

struct ip_rt_info {
  __be32 daddr;
  __be32 saddr;
  u_int8_t tos;
  u_int32_t mark;
};

struct ip6_rt_info {
  struct in6_addr daddr;
  struct in6_addr saddr;
  u_int32_t mark;
};

struct nf_sockopt_ops {
  struct list_head list;
  u_int8_t pf;
  int set_optmin;
  int set_optmax;
  int (*set)(struct sock*, int, sockptr_t, unsigned int);
  int get_optmin;
  int get_optmax;
  int (*get)(struct sock*, int, void*, int*);
  struct module* owner;
};

enum nfnetlink_groups {
  NFNLGRP_NONE = 0,
  NFNLGRP_CONNTRACK_NEW = 1,
  NFNLGRP_CONNTRACK_UPDATE = 2,
  NFNLGRP_CONNTRACK_DESTROY = 3,
  NFNLGRP_CONNTRACK_EXP_NEW = 4,
  NFNLGRP_CONNTRACK_EXP_UPDATE = 5,
  NFNLGRP_CONNTRACK_EXP_DESTROY = 6,
  NFNLGRP_NFTABLES = 7,
  NFNLGRP_ACCT_QUOTA = 8,
  NFNLGRP_NFTRACE = 9,
  __NFNLGRP_MAX = 10,
};

struct nfgenmsg {
  __u8 nfgen_family;
  __u8 version;
  __be16 res_id;
};

enum nfnl_batch_attributes {
  NFNL_BATCH_UNSPEC = 0,
  NFNL_BATCH_GENID = 1,
  __NFNL_BATCH_MAX = 2,
};

struct nfnl_callback {
  int (*call)(
      struct net*,
      struct sock*,
      struct sk_buff*,
      const struct nlmsghdr*,
      const struct nlattr* const*,
      struct netlink_ext_ack*);
  int (*call_rcu)(
      struct net*,
      struct sock*,
      struct sk_buff*,
      const struct nlmsghdr*,
      const struct nlattr* const*,
      struct netlink_ext_ack*);
  int (*call_batch)(
      struct net*,
      struct sock*,
      struct sk_buff*,
      const struct nlmsghdr*,
      const struct nlattr* const*,
      struct netlink_ext_ack*);
  const struct nla_policy* policy;
  const u_int16_t attr_count;
};

enum nfnl_abort_action {
  NFNL_ABORT_NONE = 0,
  NFNL_ABORT_AUTOLOAD = 1,
  NFNL_ABORT_VALIDATE = 2,
};

struct nfnetlink_subsystem {
  const char* name;
  __u8 subsys_id;
  __u8 cb_count;
  const struct nfnl_callback* cb;
  struct module* owner;
  int (*commit)(struct net*, struct sk_buff*);
  int (*abort)(struct net*, struct sk_buff*, enum nfnl_abort_action);
  void (*cleanup)(struct net*);
  bool (*valid_genid)(struct net*, u32);
};

struct nfnl_err {
  struct list_head head;
  struct nlmsghdr* nlh;
  int err;
  struct netlink_ext_ack extack;
};

enum {
  NFNL_BATCH_FAILURE = 1,
  NFNL_BATCH_DONE = 2,
  NFNL_BATCH_REPLAY = 4,
};

struct xt_action_param;

struct xt_mtchk_param;

struct xt_mtdtor_param;

struct xt_match {
  struct list_head list;
  const char name[29];
  u_int8_t revision;
  bool (*match)(const struct sk_buff*, struct xt_action_param*);
  int (*checkentry)(const struct xt_mtchk_param*);
  void (*destroy)(const struct xt_mtdtor_param*);
  void (*compat_from_user)(void*, const void*);
  int (*compat_to_user)(void*, const void*);
  struct module* me;
  const char* table;
  unsigned int matchsize;
  unsigned int usersize;
  unsigned int compatsize;
  unsigned int hooks;
  short unsigned int proto;
  short unsigned int family;
};

struct xt_entry_match {
  union {
    struct {
      __u16 match_size;
      char name[29];
      __u8 revision;
    } user;
    struct {
      __u16 match_size;
      struct xt_match* match;
    } kernel;
    __u16 match_size;
  } u;
  unsigned char data[0];
};

struct xt_tgchk_param;

struct xt_tgdtor_param;

struct xt_target {
  struct list_head list;
  const char name[29];
  u_int8_t revision;
  unsigned int (*target)(struct sk_buff*, const struct xt_action_param*);
  int (*checkentry)(const struct xt_tgchk_param*);
  void (*destroy)(const struct xt_tgdtor_param*);
  void (*compat_from_user)(void*, const void*);
  int (*compat_to_user)(void*, const void*);
  struct module* me;
  const char* table;
  unsigned int targetsize;
  unsigned int usersize;
  unsigned int compatsize;
  unsigned int hooks;
  short unsigned int proto;
  short unsigned int family;
};

struct xt_entry_target {
  union {
    struct {
      __u16 target_size;
      char name[29];
      __u8 revision;
    } user;
    struct {
      __u16 target_size;
      struct xt_target* target;
    } kernel;
    __u16 target_size;
  } u;
  unsigned char data[0];
};

struct xt_standard_target {
  struct xt_entry_target target;
  int verdict;
};

struct xt_error_target {
  struct xt_entry_target target;
  char errorname[30];
};

struct xt_counters {
  __u64 pcnt;
  __u64 bcnt;
};

struct xt_counters_info {
  char name[32];
  unsigned int num_counters;
  struct xt_counters counters[0];
};

struct xt_action_param {
  union {
    const struct xt_match* match;
    const struct xt_target* target;
  };
  union {
    const void* matchinfo;
    const void* targinfo;
  };
  const struct nf_hook_state* state;
  int fragoff;
  unsigned int thoff;
  bool hotdrop;
};

struct xt_mtchk_param {
  struct net* net;
  const char* table;
  const void* entryinfo;
  const struct xt_match* match;
  void* matchinfo;
  unsigned int hook_mask;
  u_int8_t family;
  bool nft_compat;
};

struct xt_mtdtor_param {
  struct net* net;
  const struct xt_match* match;
  void* matchinfo;
  u_int8_t family;
};

struct xt_tgchk_param {
  struct net* net;
  const char* table;
  const void* entryinfo;
  const struct xt_target* target;
  void* targinfo;
  unsigned int hook_mask;
  u_int8_t family;
  bool nft_compat;
};

struct xt_tgdtor_param {
  struct net* net;
  const struct xt_target* target;
  void* targinfo;
  u_int8_t family;
};

struct xt_percpu_counter_alloc_state {
  unsigned int off;
  const char* mem;
};

struct compat_xt_entry_match {
  union {
    struct {
      u_int16_t match_size;
      char name[29];
      u_int8_t revision;
    } user;
    struct {
      u_int16_t match_size;
      compat_uptr_t match;
    } kernel;
    u_int16_t match_size;
  } u;
  unsigned char data[0];
};

struct compat_xt_entry_target {
  union {
    struct {
      u_int16_t target_size;
      char name[29];
      u_int8_t revision;
    } user;
    struct {
      u_int16_t target_size;
      compat_uptr_t target;
    } kernel;
    u_int16_t target_size;
  } u;
  unsigned char data[0];
};

struct compat_xt_counters {
  compat_u64 pcnt;
  compat_u64 bcnt;
};

struct compat_xt_counters_info {
  char name[32];
  compat_uint_t num_counters;
  struct compat_xt_counters counters[0];
} __attribute__((packed));

struct compat_delta {
  unsigned int offset;
  int delta;
};

struct xt_af {
  struct mutex mutex;
  struct list_head match;
  struct list_head target;
  struct mutex compat_mutex;
  struct compat_delta* compat_tab;
  unsigned int number;
  unsigned int cur;
};

struct compat_xt_standard_target {
  struct compat_xt_entry_target t;
  compat_uint_t verdict;
};

struct compat_xt_error_target {
  struct compat_xt_entry_target t;
  char errorname[30];
};

struct nf_mttg_trav {
  struct list_head* head;
  struct list_head* curr;
  uint8_t class;
};

enum {
  MTTG_TRAV_INIT = 0,
  MTTG_TRAV_NFP_UNSPEC = 1,
  MTTG_TRAV_NFP_SPEC = 2,
  MTTG_TRAV_DONE = 3,
};

struct xt_tcp {
  __u16 spts[2];
  __u16 dpts[2];
  __u8 option;
  __u8 flg_mask;
  __u8 flg_cmp;
  __u8 invflags;
};

struct xt_udp {
  __u16 spts[2];
  __u16 dpts[2];
  __u8 invflags;
};

enum ipset_cmd {
  IPSET_CMD_NONE = 0,
  IPSET_CMD_PROTOCOL = 1,
  IPSET_CMD_CREATE = 2,
  IPSET_CMD_DESTROY = 3,
  IPSET_CMD_FLUSH = 4,
  IPSET_CMD_RENAME = 5,
  IPSET_CMD_SWAP = 6,
  IPSET_CMD_LIST = 7,
  IPSET_CMD_SAVE = 8,
  IPSET_CMD_ADD = 9,
  IPSET_CMD_DEL = 10,
  IPSET_CMD_TEST = 11,
  IPSET_CMD_HEADER = 12,
  IPSET_CMD_TYPE = 13,
  IPSET_CMD_GET_BYNAME = 14,
  IPSET_CMD_GET_BYINDEX = 15,
  IPSET_MSG_MAX = 16,
  IPSET_CMD_RESTORE = 16,
  IPSET_CMD_HELP = 17,
  IPSET_CMD_VERSION = 18,
  IPSET_CMD_QUIT = 19,
  IPSET_CMD_MAX = 20,
  IPSET_CMD_COMMIT = 20,
};

enum {
  IPSET_ATTR_UNSPEC = 0,
  IPSET_ATTR_PROTOCOL = 1,
  IPSET_ATTR_SETNAME = 2,
  IPSET_ATTR_TYPENAME = 3,
  IPSET_ATTR_SETNAME2 = 3,
  IPSET_ATTR_REVISION = 4,
  IPSET_ATTR_FAMILY = 5,
  IPSET_ATTR_FLAGS = 6,
  IPSET_ATTR_DATA = 7,
  IPSET_ATTR_ADT = 8,
  IPSET_ATTR_LINENO = 9,
  IPSET_ATTR_PROTOCOL_MIN = 10,
  IPSET_ATTR_REVISION_MIN = 10,
  IPSET_ATTR_INDEX = 11,
  __IPSET_ATTR_CMD_MAX = 12,
};

enum {
  IPSET_ATTR_IP = 1,
  IPSET_ATTR_IP_FROM = 1,
  IPSET_ATTR_IP_TO = 2,
  IPSET_ATTR_CIDR = 3,
  IPSET_ATTR_PORT = 4,
  IPSET_ATTR_PORT_FROM = 4,
  IPSET_ATTR_PORT_TO = 5,
  IPSET_ATTR_TIMEOUT = 6,
  IPSET_ATTR_PROTO = 7,
  IPSET_ATTR_CADT_FLAGS = 8,
  IPSET_ATTR_CADT_LINENO = 9,
  IPSET_ATTR_MARK = 10,
  IPSET_ATTR_MARKMASK = 11,
  IPSET_ATTR_CADT_MAX = 16,
  IPSET_ATTR_INITVAL = 17,
  IPSET_ATTR_HASHSIZE = 18,
  IPSET_ATTR_MAXELEM = 19,
  IPSET_ATTR_NETMASK = 20,
  IPSET_ATTR_BUCKETSIZE = 21,
  IPSET_ATTR_RESIZE = 22,
  IPSET_ATTR_SIZE = 23,
  IPSET_ATTR_ELEMENTS = 24,
  IPSET_ATTR_REFERENCES = 25,
  IPSET_ATTR_MEMSIZE = 26,
  __IPSET_ATTR_CREATE_MAX = 27,
};

enum {
  IPSET_ATTR_ETHER = 17,
  IPSET_ATTR_NAME = 18,
  IPSET_ATTR_NAMEREF = 19,
  IPSET_ATTR_IP2 = 20,
  IPSET_ATTR_CIDR2 = 21,
  IPSET_ATTR_IP2_TO = 22,
  IPSET_ATTR_IFACE = 23,
  IPSET_ATTR_BYTES = 24,
  IPSET_ATTR_PACKETS = 25,
  IPSET_ATTR_COMMENT = 26,
  IPSET_ATTR_SKBMARK = 27,
  IPSET_ATTR_SKBPRIO = 28,
  IPSET_ATTR_SKBQUEUE = 29,
  IPSET_ATTR_PAD = 30,
  __IPSET_ATTR_ADT_MAX = 31,
};

enum {
  IPSET_ATTR_IPADDR_IPV4 = 1,
  IPSET_ATTR_IPADDR_IPV6 = 2,
  __IPSET_ATTR_IPADDR_MAX = 3,
};

enum ipset_errno {
  IPSET_ERR_PRIVATE = 4096,
  IPSET_ERR_PROTOCOL = 4097,
  IPSET_ERR_FIND_TYPE = 4098,
  IPSET_ERR_MAX_SETS = 4099,
  IPSET_ERR_BUSY = 4100,
  IPSET_ERR_EXIST_SETNAME2 = 4101,
  IPSET_ERR_TYPE_MISMATCH = 4102,
  IPSET_ERR_EXIST = 4103,
  IPSET_ERR_INVALID_CIDR = 4104,
  IPSET_ERR_INVALID_NETMASK = 4105,
  IPSET_ERR_INVALID_FAMILY = 4106,
  IPSET_ERR_TIMEOUT = 4107,
  IPSET_ERR_REFERENCED = 4108,
  IPSET_ERR_IPADDR_IPV4 = 4109,
  IPSET_ERR_IPADDR_IPV6 = 4110,
  IPSET_ERR_COUNTER = 4111,
  IPSET_ERR_COMMENT = 4112,
  IPSET_ERR_INVALID_MARKMASK = 4113,
  IPSET_ERR_SKBINFO = 4114,
  IPSET_ERR_TYPE_SPECIFIC = 4352,
};

enum ipset_cmd_flags {
  IPSET_FLAG_BIT_EXIST = 0,
  IPSET_FLAG_EXIST = 1,
  IPSET_FLAG_BIT_LIST_SETNAME = 1,
  IPSET_FLAG_LIST_SETNAME = 2,
  IPSET_FLAG_BIT_LIST_HEADER = 2,
  IPSET_FLAG_LIST_HEADER = 4,
  IPSET_FLAG_BIT_SKIP_COUNTER_UPDATE = 3,
  IPSET_FLAG_SKIP_COUNTER_UPDATE = 8,
  IPSET_FLAG_BIT_SKIP_SUBCOUNTER_UPDATE = 4,
  IPSET_FLAG_SKIP_SUBCOUNTER_UPDATE = 16,
  IPSET_FLAG_BIT_MATCH_COUNTERS = 5,
  IPSET_FLAG_MATCH_COUNTERS = 32,
  IPSET_FLAG_BIT_RETURN_NOMATCH = 7,
  IPSET_FLAG_RETURN_NOMATCH = 128,
  IPSET_FLAG_BIT_MAP_SKBMARK = 8,
  IPSET_FLAG_MAP_SKBMARK = 256,
  IPSET_FLAG_BIT_MAP_SKBPRIO = 9,
  IPSET_FLAG_MAP_SKBPRIO = 512,
  IPSET_FLAG_BIT_MAP_SKBQUEUE = 10,
  IPSET_FLAG_MAP_SKBQUEUE = 1024,
  IPSET_FLAG_CMD_MAX = 15,
};

enum ipset_cadt_flags {
  IPSET_FLAG_BIT_BEFORE = 0,
  IPSET_FLAG_BEFORE = 1,
  IPSET_FLAG_BIT_PHYSDEV = 1,
  IPSET_FLAG_PHYSDEV = 2,
  IPSET_FLAG_BIT_NOMATCH = 2,
  IPSET_FLAG_NOMATCH = 4,
  IPSET_FLAG_BIT_WITH_COUNTERS = 3,
  IPSET_FLAG_WITH_COUNTERS = 8,
  IPSET_FLAG_BIT_WITH_COMMENT = 4,
  IPSET_FLAG_WITH_COMMENT = 16,
  IPSET_FLAG_BIT_WITH_FORCEADD = 5,
  IPSET_FLAG_WITH_FORCEADD = 32,
  IPSET_FLAG_BIT_WITH_SKBINFO = 6,
  IPSET_FLAG_WITH_SKBINFO = 64,
  IPSET_FLAG_BIT_IFACE_WILDCARD = 7,
  IPSET_FLAG_IFACE_WILDCARD = 128,
  IPSET_FLAG_CADT_MAX = 15,
};

enum ipset_create_flags {
  IPSET_CREATE_FLAG_BIT_FORCEADD = 0,
  IPSET_CREATE_FLAG_FORCEADD = 1,
  IPSET_CREATE_FLAG_BIT_BUCKETSIZE = 1,
  IPSET_CREATE_FLAG_BUCKETSIZE = 2,
  IPSET_CREATE_FLAG_BIT_MAX = 7,
};

enum ipset_adt {
  IPSET_ADD = 0,
  IPSET_DEL = 1,
  IPSET_TEST = 2,
  IPSET_ADT_MAX = 3,
  IPSET_CREATE = 3,
  IPSET_CADT_MAX = 4,
};

typedef __u16 ip_set_id_t;

enum ip_set_dim {
  IPSET_DIM_ZERO = 0,
  IPSET_DIM_ONE = 1,
  IPSET_DIM_TWO = 2,
  IPSET_DIM_THREE = 3,
  IPSET_DIM_MAX = 6,
  IPSET_BIT_RETURN_NOMATCH = 7,
};

enum {
  IPSET_COUNTER_NONE = 0,
  IPSET_COUNTER_EQ = 1,
  IPSET_COUNTER_NE = 2,
  IPSET_COUNTER_LT = 3,
  IPSET_COUNTER_GT = 4,
};

union ip_set_name_index {
  char name[32];
  ip_set_id_t index;
};

struct ip_set_req_get_set {
  unsigned int op;
  unsigned int version;
  union ip_set_name_index set;
};

struct ip_set_req_get_set_family {
  unsigned int op;
  unsigned int version;
  unsigned int family;
  union ip_set_name_index set;
};

struct ip_set_req_version {
  unsigned int op;
  unsigned int version;
};

enum ip_set_feature {
  IPSET_TYPE_IP_FLAG = 0,
  IPSET_TYPE_IP = 1,
  IPSET_TYPE_PORT_FLAG = 1,
  IPSET_TYPE_PORT = 2,
  IPSET_TYPE_MAC_FLAG = 2,
  IPSET_TYPE_MAC = 4,
  IPSET_TYPE_IP2_FLAG = 3,
  IPSET_TYPE_IP2 = 8,
  IPSET_TYPE_NAME_FLAG = 4,
  IPSET_TYPE_NAME = 16,
  IPSET_TYPE_IFACE_FLAG = 5,
  IPSET_TYPE_IFACE = 32,
  IPSET_TYPE_MARK_FLAG = 6,
  IPSET_TYPE_MARK = 64,
  IPSET_TYPE_NOMATCH_FLAG = 7,
  IPSET_TYPE_NOMATCH = 128,
  IPSET_DUMP_LAST_FLAG = 8,
  IPSET_DUMP_LAST = 256,
};

enum ip_set_extension {
  IPSET_EXT_BIT_TIMEOUT = 0,
  IPSET_EXT_TIMEOUT = 1,
  IPSET_EXT_BIT_COUNTER = 1,
  IPSET_EXT_COUNTER = 2,
  IPSET_EXT_BIT_COMMENT = 2,
  IPSET_EXT_COMMENT = 4,
  IPSET_EXT_BIT_SKBINFO = 3,
  IPSET_EXT_SKBINFO = 8,
  IPSET_EXT_BIT_DESTROY = 7,
  IPSET_EXT_DESTROY = 128,
};

enum ip_set_ext_id {
  IPSET_EXT_ID_COUNTER = 0,
  IPSET_EXT_ID_TIMEOUT = 1,
  IPSET_EXT_ID_SKBINFO = 2,
  IPSET_EXT_ID_COMMENT = 3,
  IPSET_EXT_ID_MAX = 4,
};

struct ip_set;

struct ip_set_ext_type {
  void (*destroy)(struct ip_set*, void*);
  enum ip_set_extension type;
  enum ipset_cadt_flags flag;
  u8 len;
  u8 align;
};

struct ip_set_type;

struct ip_set_type_variant;

struct ip_set {
  char name[32];
  spinlock_t lock;
  u32 ref;
  u32 ref_netlink;
  struct ip_set_type* type;
  const struct ip_set_type_variant* variant;
  u8 family;
  u8 revision;
  u8 extensions;
  u8 flags;
  u32 timeout;
  u32 elements;
  size_t ext_size;
  size_t dsize;
  size_t offset[4];
  void* data;
};

struct ip_set_counter {
  atomic64_t bytes;
  atomic64_t packets;
};

struct ip_set_comment_rcu {
  struct callback_head rcu;
  char str[0];
};

struct ip_set_comment {
  struct ip_set_comment_rcu* c;
};

struct ip_set_skbinfo {
  u32 skbmark;
  u32 skbmarkmask;
  u32 skbprio;
  u16 skbqueue;
  u16 __pad;
};

struct ip_set_ext {
  struct ip_set_skbinfo skbinfo;
  u64 packets;
  u64 bytes;
  char* comment;
  u32 timeout;
  u8 packets_op;
  u8 bytes_op;
  bool target;
};

typedef int (*ipset_adtfn)(
    struct ip_set*,
    void*,
    const struct ip_set_ext*,
    struct ip_set_ext*,
    u32);

struct ip_set_adt_opt {
  u8 family;
  u8 dim;
  u8 flags;
  u32 cmdflags;
  struct ip_set_ext ext;
};

struct ip_set_type_variant {
  int (*kadt)(
      struct ip_set*,
      const struct sk_buff*,
      const struct xt_action_param*,
      enum ipset_adt,
      struct ip_set_adt_opt*);
  int (*uadt)(struct ip_set*, struct nlattr**, enum ipset_adt, u32*, u32, bool);
  ipset_adtfn adt[3];
  int (*resize)(struct ip_set*, bool);
  void (*destroy)(struct ip_set*);
  void (*flush)(struct ip_set*);
  void (*expire)(struct ip_set*);
  int (*head)(struct ip_set*, struct sk_buff*);
  int (*list)(const struct ip_set*, struct sk_buff*, struct netlink_callback*);
  void (*uref)(struct ip_set*, struct netlink_callback*, bool);
  bool (*same_set)(const struct ip_set*, const struct ip_set*);
  bool region_lock;
};

struct ip_set_type {
  struct list_head list;
  char name[32];
  u8 protocol;
  u8 dimension;
  u8 family;
  u8 revision_min;
  u8 revision_max;
  u8 create_flags[10];
  u16 features;
  int (*create)(struct net*, struct ip_set*, struct nlattr**, u32);
  const struct nla_policy create_policy[27];
  const struct nla_policy adt_policy[31];
  struct module* me;
};

enum {
  IPSET_CB_NET = 0,
  IPSET_CB_PROTO = 1,
  IPSET_CB_DUMP = 2,
  IPSET_CB_INDEX = 3,
  IPSET_CB_PRIVATE = 4,
  IPSET_CB_ARG0 = 5,
};

struct ip_set_net {
  struct ip_set** ip_set_list;
  ip_set_id_t ip_set_max;
  bool is_deleted;
  bool is_destroyed;
};

struct icmpv6_echo {
  __be16 identifier;
  __be16 sequence;
};

struct icmpv6_nd_advt {
  __u32 reserved : 5;
  __u32 override : 1;
  __u32 solicited : 1;
  __u32 router : 1;
  __u32 reserved2 : 24;
};

struct icmpv6_nd_ra {
  __u8 hop_limit;
  __u8 reserved : 3;
  __u8 router_pref : 2;
  __u8 home_agent : 1;
  __u8 other : 1;
  __u8 managed : 1;
  __be16 rt_lifetime;
};

struct icmp6hdr {
  __u8 icmp6_type;
  __u8 icmp6_code;
  __sum16 icmp6_cksum;
  union {
    __be32 un_data32[1];
    __be16 un_data16[2];
    __u8 un_data8[4];
    struct icmpv6_echo u_echo;
    struct icmpv6_nd_advt u_nd_advt;
    struct icmpv6_nd_ra u_nd_ra;
  } icmp6_dataun;
};

struct ip_mreqn {
  struct in_addr imr_multiaddr;
  struct in_addr imr_address;
  int imr_ifindex;
};

struct mr_table_ops {
  const struct rhashtable_params* rht_params;
  void* cmparg_any;
};

struct vif_device {
  struct net_device* dev;
  long unsigned int bytes_in;
  long unsigned int bytes_out;
  long unsigned int pkt_in;
  long unsigned int pkt_out;
  long unsigned int rate_limit;
  unsigned char threshold;
  short unsigned int flags;
  int link;
  struct netdev_phys_item_id dev_parent_id;
  __be32 local;
  __be32 remote;
};

struct mr_table {
  struct list_head list;
  possible_net_t net;
  struct mr_table_ops ops;
  u32 id;
  struct sock* mroute_sk;
  struct timer_list ipmr_expire_timer;
  struct list_head mfc_unres_queue;
  struct vif_device vif_table[32];
  struct rhltable mfc_hash;
  struct list_head mfc_cache_list;
  int maxvif;
  atomic_t cache_resolve_queue_len;
  bool mroute_do_assert;
  bool mroute_do_pim;
  bool mroute_do_wrvifwhole;
  int mroute_reg_vif_num;
};

struct rtmsg {
  unsigned char rtm_family;
  unsigned char rtm_dst_len;
  unsigned char rtm_src_len;
  unsigned char rtm_tos;
  unsigned char rtm_table;
  unsigned char rtm_protocol;
  unsigned char rtm_scope;
  unsigned char rtm_type;
  unsigned int rtm_flags;
};

struct rtvia {
  __kernel_sa_family_t rtvia_family;
  __u8 rtvia_addr[0];
};

struct ip_sf_list;

struct ip_mc_list {
  struct in_device* interface;
  __be32 multiaddr;
  unsigned int sfmode;
  struct ip_sf_list* sources;
  struct ip_sf_list* tomb;
  long unsigned int sfcount[2];
  union {
    struct ip_mc_list* next;
    struct ip_mc_list* next_rcu;
  };
  struct ip_mc_list* next_hash;
  struct timer_list timer;
  int users;
  refcount_t refcnt;
  spinlock_t lock;
  char tm_running;
  char reporter;
  char unsolicit_count;
  char loaded;
  unsigned char gsquery;
  unsigned char crcount;
  struct callback_head rcu;
};

struct ip_sf_socklist {
  unsigned int sl_max;
  unsigned int sl_count;
  struct callback_head rcu;
  __be32 sl_addr[0];
};

struct ip_mc_socklist {
  struct ip_mc_socklist* next_rcu;
  struct ip_mreqn multi;
  unsigned int sfmode;
  struct ip_sf_socklist* sflist;
  struct callback_head rcu;
};

struct ip_sf_list {
  struct ip_sf_list* sf_next;
  long unsigned int sf_count[2];
  __be32 sf_inaddr;
  unsigned char sf_gsresp;
  unsigned char sf_oldin;
  unsigned char sf_crcount;
};

struct ipv4_addr_key {
  __be32 addr;
  int vif;
};

struct inetpeer_addr {
  union {
    struct ipv4_addr_key a4;
    struct in6_addr a6;
    u32 key[4];
  };
  __u16 family;
};

struct inet_peer {
  struct rb_node rb_node;
  struct inetpeer_addr daddr;
  u32 metrics[17];
  u32 rate_tokens;
  u32 n_redirects;
  long unsigned int rate_last;
  union {
    struct {
      atomic_t rid;
    };
    struct callback_head rcu;
  };
  __u32 dtime;
  refcount_t refcnt;
};

struct fib_rt_info {
  struct fib_info* fi;
  u32 tb_id;
  __be32 dst;
  int dst_len;
  u8 tos;
  u8 type;
  u8 offload : 1;
  u8 trap : 1;
  u8 offload_failed : 1;
  u8 unused : 5;
};

struct uncached_list {
  spinlock_t lock;
  struct list_head head;
};

struct rt_cache_stat {
  unsigned int in_slow_tot;
  unsigned int in_slow_mc;
  unsigned int in_no_route;
  unsigned int in_brd;
  unsigned int in_martian_dst;
  unsigned int in_martian_src;
  unsigned int out_slow_tot;
  unsigned int out_slow_mc;
};

struct fib_alias {
  struct hlist_node fa_list;
  struct fib_info* fa_info;
  u8 fa_tos;
  u8 fa_type;
  u8 fa_state;
  u8 fa_slen;
  u32 tb_id;
  s16 fa_default;
  u8 offload : 1;
  u8 trap : 1;
  u8 offload_failed : 1;
  u8 unused : 5;
  struct callback_head rcu;
};

struct fib_prop {
  int error;
  u8 scope;
};

struct raw_hashinfo {
  rwlock_t lock;
  struct hlist_head ht[256];
};

enum ip_defrag_users {
  IP_DEFRAG_LOCAL_DELIVER = 0,
  IP_DEFRAG_CALL_RA_CHAIN = 1,
  IP_DEFRAG_CONNTRACK_IN = 2,
  __IP_DEFRAG_CONNTRACK_IN_END = 65537,
  IP_DEFRAG_CONNTRACK_OUT = 65538,
  __IP_DEFRAG_CONNTRACK_OUT_END = 131073,
  IP_DEFRAG_CONNTRACK_BRIDGE_IN = 131074,
  __IP_DEFRAG_CONNTRACK_BRIDGE_IN = 196609,
  IP_DEFRAG_VS_IN = 196610,
  IP_DEFRAG_VS_OUT = 196611,
  IP_DEFRAG_VS_FWD = 196612,
  IP_DEFRAG_AF_PACKET = 196613,
  IP_DEFRAG_MACVLAN = 196614,
};

enum {
  INET_FRAG_FIRST_IN = 1,
  INET_FRAG_LAST_IN = 2,
  INET_FRAG_COMPLETE = 4,
  INET_FRAG_HASH_DEAD = 8,
};

struct ipq {
  struct inet_frag_queue q;
  u8 ecn;
  u16 max_df_size;
  int iif;
  unsigned int rid;
  struct inet_peer* peer;
};

struct ip_options_data {
  struct ip_options_rcu opt;
  char data[40];
};

struct ipcm_cookie {
  struct sockcm_cookie sockc;
  __be32 addr;
  int oif;
  struct ip_options_rcu* opt;
  __u8 ttl;
  __s16 tos;
  char priority;
  __u16 gso_size;
};

struct ip_fraglist_iter {
  struct sk_buff* frag;
  struct iphdr* iph;
  int offset;
  unsigned int hlen;
};

struct ip_frag_state {
  bool DF;
  unsigned int hlen;
  unsigned int ll_rs;
  unsigned int mtu;
  unsigned int left;
  int offset;
  int ptr;
  __be16 not_last_frag;
};

struct ip_reply_arg {
  struct kvec iov[1];
  int flags;
  __wsum csum;
  int csumoffset;
  int bound_dev_if;
  u8 tos;
  kuid_t uid;
};

struct ip_mreq_source {
  __be32 imr_multiaddr;
  __be32 imr_interface;
  __be32 imr_sourceaddr;
};

struct ip_msfilter {
  __be32 imsf_multiaddr;
  __be32 imsf_interface;
  __u32 imsf_fmode;
  __u32 imsf_numsrc;
  __be32 imsf_slist[1];
};

struct group_req {
  __u32 gr_interface;
  struct __kernel_sockaddr_storage gr_group;
};

struct group_source_req {
  __u32 gsr_interface;
  struct __kernel_sockaddr_storage gsr_group;
  struct __kernel_sockaddr_storage gsr_source;
};

struct group_filter {
  __u32 gf_interface;
  struct __kernel_sockaddr_storage gf_group;
  __u32 gf_fmode;
  __u32 gf_numsrc;
  struct __kernel_sockaddr_storage gf_slist[1];
};

struct in_pktinfo {
  int ipi_ifindex;
  struct in_addr ipi_spec_dst;
  struct in_addr ipi_addr;
};

struct compat_group_req {
  __u32 gr_interface;
  struct __kernel_sockaddr_storage gr_group;
} __attribute__((packed));

struct compat_group_source_req {
  __u32 gsr_interface;
  struct __kernel_sockaddr_storage gsr_group;
  struct __kernel_sockaddr_storage gsr_source;
} __attribute__((packed));

struct compat_group_filter {
  __u32 gf_interface;
  struct __kernel_sockaddr_storage gf_group;
  __u32 gf_fmode;
  __u32 gf_numsrc;
  struct __kernel_sockaddr_storage gf_slist[1];
} __attribute__((packed));

struct bpfilter_umh_ops {
  struct umd_info info;
  struct mutex lock;
  int (*sockopt)(struct sock*, int, sockptr_t, unsigned int, bool);
  int (*start)();
};

struct tcpvegas_info {
  __u32 tcpv_enabled;
  __u32 tcpv_rttcnt;
  __u32 tcpv_rtt;
  __u32 tcpv_minrtt;
};

struct tcp_dctcp_info {
  __u16 dctcp_enabled;
  __u16 dctcp_ce_state;
  __u32 dctcp_alpha;
  __u32 dctcp_ab_ecn;
  __u32 dctcp_ab_tot;
};

struct tcp_bbr_info {
  __u32 bbr_bw_lo;
  __u32 bbr_bw_hi;
  __u32 bbr_min_rtt;
  __u32 bbr_pacing_gain;
  __u32 bbr_cwnd_gain;
};

union tcp_cc_info {
  struct tcpvegas_info vegas;
  struct tcp_dctcp_info dctcp;
  struct tcp_bbr_info bbr;
};

enum {
  BPF_TCP_ESTABLISHED = 1,
  BPF_TCP_SYN_SENT = 2,
  BPF_TCP_SYN_RECV = 3,
  BPF_TCP_FIN_WAIT1 = 4,
  BPF_TCP_FIN_WAIT2 = 5,
  BPF_TCP_TIME_WAIT = 6,
  BPF_TCP_CLOSE = 7,
  BPF_TCP_CLOSE_WAIT = 8,
  BPF_TCP_LAST_ACK = 9,
  BPF_TCP_LISTEN = 10,
  BPF_TCP_CLOSING = 11,
  BPF_TCP_NEW_SYN_RECV = 12,
  BPF_TCP_MAX_STATES = 13,
};

enum inet_csk_ack_state_t {
  ICSK_ACK_SCHED = 1,
  ICSK_ACK_TIMER = 2,
  ICSK_ACK_PUSHED = 4,
  ICSK_ACK_PUSHED2 = 8,
  ICSK_ACK_NOW = 16,
};

enum {
  TCP_FLAG_CWR = 32768,
  TCP_FLAG_ECE = 16384,
  TCP_FLAG_URG = 8192,
  TCP_FLAG_ACK = 4096,
  TCP_FLAG_PSH = 2048,
  TCP_FLAG_RST = 1024,
  TCP_FLAG_SYN = 512,
  TCP_FLAG_FIN = 256,
  TCP_RESERVED_BITS = 15,
  TCP_DATA_OFFSET = 240,
};

struct tcp_repair_opt {
  __u32 opt_code;
  __u32 opt_val;
};

struct tcp_repair_window {
  __u32 snd_wl1;
  __u32 snd_wnd;
  __u32 max_window;
  __u32 rcv_wnd;
  __u32 rcv_wup;
};

enum {
  TCP_NO_QUEUE = 0,
  TCP_RECV_QUEUE = 1,
  TCP_SEND_QUEUE = 2,
  TCP_QUEUES_NR = 3,
};

struct tcp_info {
  __u8 tcpi_state;
  __u8 tcpi_ca_state;
  __u8 tcpi_retransmits;
  __u8 tcpi_probes;
  __u8 tcpi_backoff;
  __u8 tcpi_options;
  __u8 tcpi_snd_wscale : 4;
  __u8 tcpi_rcv_wscale : 4;
  __u8 tcpi_delivery_rate_app_limited : 1;
  __u8 tcpi_fastopen_client_fail : 2;
  __u32 tcpi_rto;
  __u32 tcpi_ato;
  __u32 tcpi_snd_mss;
  __u32 tcpi_rcv_mss;
  __u32 tcpi_unacked;
  __u32 tcpi_sacked;
  __u32 tcpi_lost;
  __u32 tcpi_retrans;
  __u32 tcpi_fackets;
  __u32 tcpi_last_data_sent;
  __u32 tcpi_last_ack_sent;
  __u32 tcpi_last_data_recv;
  __u32 tcpi_last_ack_recv;
  __u32 tcpi_pmtu;
  __u32 tcpi_rcv_ssthresh;
  __u32 tcpi_rtt;
  __u32 tcpi_rttvar;
  __u32 tcpi_snd_ssthresh;
  __u32 tcpi_snd_cwnd;
  __u32 tcpi_advmss;
  __u32 tcpi_reordering;
  __u32 tcpi_rcv_rtt;
  __u32 tcpi_rcv_space;
  __u32 tcpi_total_retrans;
  __u64 tcpi_pacing_rate;
  __u64 tcpi_max_pacing_rate;
  __u64 tcpi_bytes_acked;
  __u64 tcpi_bytes_received;
  __u32 tcpi_segs_out;
  __u32 tcpi_segs_in;
  __u32 tcpi_notsent_bytes;
  __u32 tcpi_min_rtt;
  __u32 tcpi_data_segs_in;
  __u32 tcpi_data_segs_out;
  __u64 tcpi_delivery_rate;
  __u64 tcpi_busy_time;
  __u64 tcpi_rwnd_limited;
  __u64 tcpi_sndbuf_limited;
  __u32 tcpi_delivered;
  __u32 tcpi_delivered_ce;
  __u64 tcpi_bytes_sent;
  __u64 tcpi_bytes_retrans;
  __u32 tcpi_dsack_dups;
  __u32 tcpi_reord_seen;
  __u32 tcpi_rcv_ooopack;
  __u32 tcpi_snd_wnd;
};

enum {
  TCP_NLA_PAD = 0,
  TCP_NLA_BUSY = 1,
  TCP_NLA_RWND_LIMITED = 2,
  TCP_NLA_SNDBUF_LIMITED = 3,
  TCP_NLA_DATA_SEGS_OUT = 4,
  TCP_NLA_TOTAL_RETRANS = 5,
  TCP_NLA_PACING_RATE = 6,
  TCP_NLA_DELIVERY_RATE = 7,
  TCP_NLA_SND_CWND = 8,
  TCP_NLA_REORDERING = 9,
  TCP_NLA_MIN_RTT = 10,
  TCP_NLA_RECUR_RETRANS = 11,
  TCP_NLA_DELIVERY_RATE_APP_LMT = 12,
  TCP_NLA_SNDQ_SIZE = 13,
  TCP_NLA_CA_STATE = 14,
  TCP_NLA_SND_SSTHRESH = 15,
  TCP_NLA_DELIVERED = 16,
  TCP_NLA_DELIVERED_CE = 17,
  TCP_NLA_BYTES_SENT = 18,
  TCP_NLA_BYTES_RETRANS = 19,
  TCP_NLA_DSACK_DUPS = 20,
  TCP_NLA_REORD_SEEN = 21,
  TCP_NLA_SRTT = 22,
  TCP_NLA_TIMEOUT_REHASH = 23,
  TCP_NLA_BYTES_NOTSENT = 24,
  TCP_NLA_EDT = 25,
  TCP_NLA_TTL = 26,
};

struct tcp_zerocopy_receive {
  __u64 address;
  __u32 length;
  __u32 recv_skip_hint;
  __u32 inq;
  __s32 err;
  __u64 copybuf_address;
  __s32 copybuf_len;
  __u32 flags;
  __u64 msg_control;
  __u64 msg_controllen;
  __u32 msg_flags;
  __u32 reserved;
};

struct tcp_md5sig_pool {
  struct ahash_request* md5_req;
  void* scratch;
};

enum tcp_chrono {
  TCP_CHRONO_UNSPEC = 0,
  TCP_CHRONO_BUSY = 1,
  TCP_CHRONO_RWND_LIMITED = 2,
  TCP_CHRONO_SNDBUF_LIMITED = 3,
  __TCP_CHRONO_MAX = 4,
};

enum {
  TCP_CMSG_INQ = 1,
  TCP_CMSG_TS = 2,
};

struct tcp_splice_state {
  struct pipe_inode_info* pipe;
  size_t len;
  unsigned int flags;
};

enum tcp_fastopen_client_fail {
  TFO_STATUS_UNSPEC = 0,
  TFO_COOKIE_UNAVAILABLE = 1,
  TFO_DATA_NOT_ACKED = 2,
  TFO_SYN_RETRANSMITTED = 3,
};

struct tcp_sack_block_wire {
  __be32 start_seq;
  __be32 end_seq;
};

enum tcp_queue {
  TCP_FRAG_IN_WRITE_QUEUE = 0,
  TCP_FRAG_IN_RTX_QUEUE = 1,
};

enum tcp_ca_ack_event_flags {
  CA_ACK_SLOWPATH = 1,
  CA_ACK_WIN_UPDATE = 2,
  CA_ACK_ECE = 4,
};

struct tcp_sacktag_state {
  u64 first_sackt;
  u64 last_sackt;
  u32 reord;
  u32 sack_delivered;
  int flag;
  unsigned int mss_now;
  struct rate_sample* rate;
};

enum {
  BPF_WRITE_HDR_TCP_CURRENT_MSS = 1,
  BPF_WRITE_HDR_TCP_SYNACK_COOKIE = 2,
};

enum tsq_flags {
  TSQF_THROTTLED = 1,
  TSQF_QUEUED = 2,
  TCPF_TSQ_DEFERRED = 4,
  TCPF_WRITE_TIMER_DEFERRED = 8,
  TCPF_DELACK_TIMER_DEFERRED = 16,
  TCPF_MTU_REDUCED_DEFERRED = 32,
};

struct mptcp_out_options {};

struct tcp_out_options {
  u16 options;
  u16 mss;
  u8 ws;
  u8 num_sack_blocks;
  u8 hash_size;
  u8 bpf_opt_len;
  __u8* hash_location;
  __u32 tsval;
  __u32 tsecr;
  struct tcp_fastopen_cookie* fastopen_cookie;
  struct mptcp_out_options mptcp;
};

struct tsq_tasklet {
  struct tasklet_struct tasklet;
  struct list_head head;
};

struct tcp_md5sig {
  struct __kernel_sockaddr_storage tcpm_addr;
  __u8 tcpm_flags;
  __u8 tcpm_prefixlen;
  __u16 tcpm_keylen;
  int tcpm_ifindex;
  __u8 tcpm_key[80];
};

enum tcp_tw_status {
  TCP_TW_SUCCESS = 0,
  TCP_TW_RST = 1,
  TCP_TW_ACK = 2,
  TCP_TW_SYN = 3,
};

struct tcp4_pseudohdr {
  __be32 saddr;
  __be32 daddr;
  __u8 pad;
  __u8 protocol;
  __be16 len;
};

enum tcp_seq_states {
  TCP_SEQ_STATE_LISTENING = 0,
  TCP_SEQ_STATE_ESTABLISHED = 1,
};

struct tcp_seq_afinfo {
  sa_family_t family;
};

struct tcp_iter_state {
  struct seq_net_private p;
  enum tcp_seq_states state;
  struct sock* syn_wait_sk;
  int bucket;
  int offset;
  int sbucket;
  int num;
  loff_t last_pos;
};

struct bpf_tcp_iter_state {
  struct tcp_iter_state state;
  unsigned int cur_sk;
  unsigned int end_sk;
  unsigned int max_sk;
  struct sock** batch;
  bool st_bucket_done;
};

struct bpf_iter__tcp {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct sock_common* sk_common;
  };
  uid_t uid;
};

enum tcp_metric_index {
  TCP_METRIC_RTT = 0,
  TCP_METRIC_RTTVAR = 1,
  TCP_METRIC_SSTHRESH = 2,
  TCP_METRIC_CWND = 3,
  TCP_METRIC_REORDERING = 4,
  TCP_METRIC_RTT_US = 5,
  TCP_METRIC_RTTVAR_US = 6,
  __TCP_METRIC_MAX = 7,
};

enum {
  TCP_METRICS_ATTR_UNSPEC = 0,
  TCP_METRICS_ATTR_ADDR_IPV4 = 1,
  TCP_METRICS_ATTR_ADDR_IPV6 = 2,
  TCP_METRICS_ATTR_AGE = 3,
  TCP_METRICS_ATTR_TW_TSVAL = 4,
  TCP_METRICS_ATTR_TW_TS_STAMP = 5,
  TCP_METRICS_ATTR_VALS = 6,
  TCP_METRICS_ATTR_FOPEN_MSS = 7,
  TCP_METRICS_ATTR_FOPEN_SYN_DROPS = 8,
  TCP_METRICS_ATTR_FOPEN_SYN_DROP_TS = 9,
  TCP_METRICS_ATTR_FOPEN_COOKIE = 10,
  TCP_METRICS_ATTR_SADDR_IPV4 = 11,
  TCP_METRICS_ATTR_SADDR_IPV6 = 12,
  TCP_METRICS_ATTR_PAD = 13,
  __TCP_METRICS_ATTR_MAX = 14,
};

enum {
  TCP_METRICS_CMD_UNSPEC = 0,
  TCP_METRICS_CMD_GET = 1,
  TCP_METRICS_CMD_DEL = 2,
  __TCP_METRICS_CMD_MAX = 3,
};

struct tcp_fastopen_metrics {
  u16 mss;
  u16 syn_loss : 10;
  u16 try_exp : 2;
  long unsigned int last_syn_loss;
  struct tcp_fastopen_cookie cookie;
};

struct tcp_metrics_block {
  struct tcp_metrics_block* tcpm_next;
  possible_net_t tcpm_net;
  struct inetpeer_addr tcpm_saddr;
  struct inetpeer_addr tcpm_daddr;
  long unsigned int tcpm_stamp;
  u32 tcpm_lock;
  u32 tcpm_vals[5];
  struct tcp_fastopen_metrics tcpm_fastopen;
  struct callback_head callback_head;
};

struct tcpm_hash_bucket {
  struct tcp_metrics_block* chain;
};

struct icmp_filter {
  __u32 data;
};

struct raw_iter_state {
  struct seq_net_private p;
  int bucket;
};

struct raw_sock {
  struct inet_sock inet;
  struct icmp_filter filter;
  u32 ipmr_table;
};

struct raw_frag_vec {
  struct msghdr* msg;
  union {
    struct icmphdr icmph;
    char c[1];
  } hdr;
  int hlen;
};

struct udp_skb_cb {
  union {
    struct inet_skb_parm h4;
    struct inet6_skb_parm h6;
  } header;
  __u16 cscov;
  __u8 partial_cov;
};

struct udp_dev_scratch {
  u32 _tsize_state;
  u16 len;
  bool is_linear;
  bool csum_unnecessary;
};

struct udp_seq_afinfo {
  sa_family_t family;
  struct udp_table* udp_table;
};

struct udp_iter_state {
  struct seq_net_private p;
  int bucket;
  struct udp_seq_afinfo* bpf_seq_afinfo;
};

struct bpf_iter__udp {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct udp_sock* udp_sk;
  };
  uid_t uid;
  int : 32;
  int bucket;
};

struct inet_protosw {
  struct list_head list;
  short unsigned int type;
  short unsigned int protocol;
  struct proto* prot;
  const struct proto_ops* ops;
  unsigned char flags;
};

typedef struct sk_buff* (
    *gro_receive_sk_t)(struct sock*, struct list_head*, struct sk_buff*);

typedef struct sock* (*udp_lookup_t)(const struct sk_buff*, __be16, __be16);

struct arpreq {
  struct sockaddr arp_pa;
  struct sockaddr arp_ha;
  int arp_flags;
  struct sockaddr arp_netmask;
  char arp_dev[16];
};

typedef struct {
  char ax25_call[7];
} ax25_address;

enum {
  AX25_VALUES_IPDEFMODE = 0,
  AX25_VALUES_AXDEFMODE = 1,
  AX25_VALUES_BACKOFF = 2,
  AX25_VALUES_CONMODE = 3,
  AX25_VALUES_WINDOW = 4,
  AX25_VALUES_EWINDOW = 5,
  AX25_VALUES_T1 = 6,
  AX25_VALUES_T2 = 7,
  AX25_VALUES_T3 = 8,
  AX25_VALUES_IDLE = 9,
  AX25_VALUES_N2 = 10,
  AX25_VALUES_PACLEN = 11,
  AX25_VALUES_PROTOCOL = 12,
  AX25_VALUES_DS_TIMEOUT = 13,
  AX25_MAX_VALUES = 14,
};

struct ax25_dev {
  struct ax25_dev* next;
  struct net_device* dev;
  struct net_device* forward;
  struct ctl_table_header* sysheader;
  int values[14];
};

typedef struct ax25_dev ax25_dev;

enum ip_conntrack_status {
  IPS_EXPECTED_BIT = 0,
  IPS_EXPECTED = 1,
  IPS_SEEN_REPLY_BIT = 1,
  IPS_SEEN_REPLY = 2,
  IPS_ASSURED_BIT = 2,
  IPS_ASSURED = 4,
  IPS_CONFIRMED_BIT = 3,
  IPS_CONFIRMED = 8,
  IPS_SRC_NAT_BIT = 4,
  IPS_SRC_NAT = 16,
  IPS_DST_NAT_BIT = 5,
  IPS_DST_NAT = 32,
  IPS_NAT_MASK = 48,
  IPS_SEQ_ADJUST_BIT = 6,
  IPS_SEQ_ADJUST = 64,
  IPS_SRC_NAT_DONE_BIT = 7,
  IPS_SRC_NAT_DONE = 128,
  IPS_DST_NAT_DONE_BIT = 8,
  IPS_DST_NAT_DONE = 256,
  IPS_NAT_DONE_MASK = 384,
  IPS_DYING_BIT = 9,
  IPS_DYING = 512,
  IPS_FIXED_TIMEOUT_BIT = 10,
  IPS_FIXED_TIMEOUT = 1024,
  IPS_TEMPLATE_BIT = 11,
  IPS_TEMPLATE = 2048,
  IPS_UNTRACKED_BIT = 12,
  IPS_UNTRACKED = 4096,
  IPS_NAT_CLASH_BIT = 12,
  IPS_NAT_CLASH = 4096,
  IPS_HELPER_BIT = 13,
  IPS_HELPER = 8192,
  IPS_OFFLOAD_BIT = 14,
  IPS_OFFLOAD = 16384,
  IPS_HW_OFFLOAD_BIT = 15,
  IPS_HW_OFFLOAD = 32768,
  IPS_UNCHANGEABLE_MASK = 56313,
  __IPS_MAX_BIT = 16,
};

enum {
  XFRM_LOOKUP_ICMP = 1,
  XFRM_LOOKUP_QUEUE = 2,
  XFRM_LOOKUP_KEEP_DST_REF = 4,
};

struct icmp_ext_hdr {
  __u8 reserved1 : 4;
  __u8 version : 4;
  __u8 reserved2;
  __sum16 checksum;
};

struct icmp_extobj_hdr {
  __be16 length;
  __u8 class_num;
  __u8 class_type;
};

struct pingv6_ops {
  int (*ipv6_recv_error)(struct sock*, struct msghdr*, int, int*);
  void (*ip6_datagram_recv_common_ctl)(
      struct sock*,
      struct msghdr*,
      struct sk_buff*);
  void (*ip6_datagram_recv_specific_ctl)(
      struct sock*,
      struct msghdr*,
      struct sk_buff*);
  int (*icmpv6_err_convert)(u8, u8, int*);
  void (*ipv6_icmp_error)(struct sock*, struct sk_buff*, int, __be16, u32, u8*);
  int (*ipv6_chk_addr)(
      struct net*,
      const struct in6_addr*,
      const struct net_device*,
      int);
};

struct icmp_bxm {
  struct sk_buff* skb;
  int offset;
  int data_len;
  struct {
    struct icmphdr icmph;
    __be32 times[3];
  } data;
  int head_len;
  struct ip_options_data replyopts;
};

struct icmp_control {
  bool (*handler)(struct sk_buff*);
  short int error;
};

struct ifaddrmsg {
  __u8 ifa_family;
  __u8 ifa_prefixlen;
  __u8 ifa_flags;
  __u8 ifa_scope;
  __u32 ifa_index;
};

enum {
  IFA_UNSPEC = 0,
  IFA_ADDRESS = 1,
  IFA_LOCAL = 2,
  IFA_LABEL = 3,
  IFA_BROADCAST = 4,
  IFA_ANYCAST = 5,
  IFA_CACHEINFO = 6,
  IFA_MULTICAST = 7,
  IFA_FLAGS = 8,
  IFA_RT_PRIORITY = 9,
  IFA_TARGET_NETNSID = 10,
  __IFA_MAX = 11,
};

struct ifa_cacheinfo {
  __u32 ifa_prefered;
  __u32 ifa_valid;
  __u32 cstamp;
  __u32 tstamp;
};

enum {
  IFLA_INET_UNSPEC = 0,
  IFLA_INET_CONF = 1,
  __IFLA_INET_MAX = 2,
};

struct in_validator_info {
  __be32 ivi_addr;
  struct in_device* ivi_dev;
  struct netlink_ext_ack* extack;
};

struct netconfmsg {
  __u8 ncm_family;
};

enum {
  NETCONFA_UNSPEC = 0,
  NETCONFA_IFINDEX = 1,
  NETCONFA_FORWARDING = 2,
  NETCONFA_RP_FILTER = 3,
  NETCONFA_MC_FORWARDING = 4,
  NETCONFA_PROXY_NEIGH = 5,
  NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN = 6,
  NETCONFA_INPUT = 7,
  NETCONFA_BC_FORWARDING = 8,
  __NETCONFA_MAX = 9,
};

struct inet_fill_args {
  u32 portid;
  u32 seq;
  int event;
  unsigned int flags;
  int netnsid;
  int ifindex;
};

struct devinet_sysctl_table {
  struct ctl_table_header* sysctl_header;
  struct ctl_table devinet_vars[33];
};

struct rtentry {
  long unsigned int rt_pad1;
  struct sockaddr rt_dst;
  struct sockaddr rt_gateway;
  struct sockaddr rt_genmask;
  short unsigned int rt_flags;
  short int rt_pad2;
  long unsigned int rt_pad3;
  void* rt_pad4;
  short int rt_metric;
  char* rt_dev;
  long unsigned int rt_mtu;
  long unsigned int rt_window;
  short unsigned int rt_irtt;
};

struct compat_rtentry {
  u32 rt_pad1;
  struct sockaddr rt_dst;
  struct sockaddr rt_gateway;
  struct sockaddr rt_genmask;
  short unsigned int rt_flags;
  short int rt_pad2;
  u32 rt_pad3;
  unsigned char rt_tos;
  unsigned char rt_class;
  short int rt_pad4;
  short int rt_metric;
  compat_uptr_t rt_dev;
  u32 rt_mtu;
  u32 rt_window;
  short unsigned int rt_irtt;
};

struct igmphdr {
  __u8 type;
  __u8 code;
  __sum16 csum;
  __be32 group;
};

struct igmpv3_grec {
  __u8 grec_type;
  __u8 grec_auxwords;
  __be16 grec_nsrcs;
  __be32 grec_mca;
  __be32 grec_src[0];
};

struct igmpv3_report {
  __u8 type;
  __u8 resv1;
  __sum16 csum;
  __be16 resv2;
  __be16 ngrec;
  struct igmpv3_grec grec[0];
};

struct igmpv3_query {
  __u8 type;
  __u8 code;
  __sum16 csum;
  __be32 group;
  __u8 qrv : 3;
  __u8 suppress : 1;
  __u8 resv : 4;
  __u8 qqic;
  __be16 nsrcs;
  __be32 srcs[0];
};

struct igmp_mc_iter_state {
  struct seq_net_private p;
  struct net_device* dev;
  struct in_device* in_dev;
};

struct igmp_mcf_iter_state {
  struct seq_net_private p;
  struct net_device* dev;
  struct in_device* idev;
  struct ip_mc_list* im;
};

struct fib_config {
  u8 fc_dst_len;
  u8 fc_tos;
  u8 fc_protocol;
  u8 fc_scope;
  u8 fc_type;
  u8 fc_gw_family;
  u32 fc_table;
  __be32 fc_dst;
  union {
    __be32 fc_gw4;
    struct in6_addr fc_gw6;
  };
  int fc_oif;
  u32 fc_flags;
  u32 fc_priority;
  __be32 fc_prefsrc;
  u32 fc_nh_id;
  struct nlattr* fc_mx;
  struct rtnexthop* fc_mp;
  int fc_mx_len;
  int fc_mp_len;
  u32 fc_flow;
  u32 fc_nlflags;
  struct nl_info fc_nlinfo;
  struct nlattr* fc_encap;
  u16 fc_encap_type;
};

struct fib_result_nl {
  __be32 fl_addr;
  u32 fl_mark;
  unsigned char fl_tos;
  unsigned char fl_scope;
  unsigned char tb_id_in;
  unsigned char tb_id;
  unsigned char prefixlen;
  unsigned char nh_sel;
  unsigned char type;
  unsigned char scope;
  int err;
};

struct fib_dump_filter {
  u32 table_id;
  bool filter_set;
  bool dump_routes;
  bool dump_exceptions;
  unsigned char protocol;
  unsigned char rt_type;
  unsigned int flags;
  struct net_device* dev;
};

struct fib_nh_notifier_info {
  struct fib_notifier_info info;
  struct fib_nh* fib_nh;
};

struct fib_entry_notifier_info {
  struct fib_notifier_info info;
  u32 dst;
  int dst_len;
  struct fib_info* fi;
  u8 tos;
  u8 type;
  u32 tb_id;
};

typedef unsigned int t_key;

struct key_vector {
  t_key key;
  unsigned char pos;
  unsigned char bits;
  unsigned char slen;
  union {
    struct hlist_head leaf;
    struct key_vector* tnode[0];
  };
};

struct tnode {
  struct callback_head rcu;
  t_key empty_children;
  t_key full_children;
  struct key_vector* parent;
  struct key_vector kv[1];
};

struct trie_stat {
  unsigned int totdepth;
  unsigned int maxdepth;
  unsigned int tnodes;
  unsigned int leaves;
  unsigned int nullpointers;
  unsigned int prefixes;
  unsigned int nodesizes[32];
};

struct trie {
  struct key_vector kv[1];
};

struct fib_trie_iter {
  struct seq_net_private p;
  struct fib_table* tb;
  struct key_vector* tnode;
  unsigned int index;
  unsigned int depth;
};

struct fib_route_iter {
  struct seq_net_private p;
  struct fib_table* main_tb;
  struct key_vector* tnode;
  loff_t pos;
  t_key key;
};

struct ipfrag_skb_cb {
  union {
    struct inet_skb_parm h4;
    struct inet6_skb_parm h6;
  };
  struct sk_buff* next_frag;
  int frag_run_len;
};

struct ping_iter_state {
  struct seq_net_private p;
  int bucket;
  sa_family_t family;
};

struct pingfakehdr {
  struct icmphdr icmph;
  struct msghdr* msg;
  sa_family_t family;
  __wsum wcheck;
};

struct ping_table {
  struct hlist_nulls_head hash[64];
  rwlock_t lock;
};

enum lwtunnel_ip_t {
  LWTUNNEL_IP_UNSPEC = 0,
  LWTUNNEL_IP_ID = 1,
  LWTUNNEL_IP_DST = 2,
  LWTUNNEL_IP_SRC = 3,
  LWTUNNEL_IP_TTL = 4,
  LWTUNNEL_IP_TOS = 5,
  LWTUNNEL_IP_FLAGS = 6,
  LWTUNNEL_IP_PAD = 7,
  LWTUNNEL_IP_OPTS = 8,
  __LWTUNNEL_IP_MAX = 9,
};

enum lwtunnel_ip6_t {
  LWTUNNEL_IP6_UNSPEC = 0,
  LWTUNNEL_IP6_ID = 1,
  LWTUNNEL_IP6_DST = 2,
  LWTUNNEL_IP6_SRC = 3,
  LWTUNNEL_IP6_HOPLIMIT = 4,
  LWTUNNEL_IP6_TC = 5,
  LWTUNNEL_IP6_FLAGS = 6,
  LWTUNNEL_IP6_PAD = 7,
  LWTUNNEL_IP6_OPTS = 8,
  __LWTUNNEL_IP6_MAX = 9,
};

enum {
  LWTUNNEL_IP_OPTS_UNSPEC = 0,
  LWTUNNEL_IP_OPTS_GENEVE = 1,
  LWTUNNEL_IP_OPTS_VXLAN = 2,
  LWTUNNEL_IP_OPTS_ERSPAN = 3,
  __LWTUNNEL_IP_OPTS_MAX = 4,
};

enum {
  LWTUNNEL_IP_OPT_GENEVE_UNSPEC = 0,
  LWTUNNEL_IP_OPT_GENEVE_CLASS = 1,
  LWTUNNEL_IP_OPT_GENEVE_TYPE = 2,
  LWTUNNEL_IP_OPT_GENEVE_DATA = 3,
  __LWTUNNEL_IP_OPT_GENEVE_MAX = 4,
};

enum {
  LWTUNNEL_IP_OPT_VXLAN_UNSPEC = 0,
  LWTUNNEL_IP_OPT_VXLAN_GBP = 1,
  __LWTUNNEL_IP_OPT_VXLAN_MAX = 2,
};

enum {
  LWTUNNEL_IP_OPT_ERSPAN_UNSPEC = 0,
  LWTUNNEL_IP_OPT_ERSPAN_VER = 1,
  LWTUNNEL_IP_OPT_ERSPAN_INDEX = 2,
  LWTUNNEL_IP_OPT_ERSPAN_DIR = 3,
  LWTUNNEL_IP_OPT_ERSPAN_HWID = 4,
  __LWTUNNEL_IP_OPT_ERSPAN_MAX = 5,
};

struct ip6_tnl_encap_ops {
  size_t (*encap_hlen)(struct ip_tunnel_encap*);
  int (*build_header)(
      struct sk_buff*,
      struct ip_tunnel_encap*,
      u8*,
      struct flowi6*);
  int (*err_handler)(
      struct sk_buff*,
      struct inet6_skb_parm*,
      u8,
      u8,
      int,
      __be32);
};

struct geneve_opt {
  __be16 opt_class;
  u8 type;
  u8 length : 5;
  u8 r3 : 1;
  u8 r2 : 1;
  u8 r1 : 1;
  u8 opt_data[0];
};

struct vxlan_metadata {
  u32 gbp;
};

struct erspan_md2 {
  __be32 timestamp;
  __be16 sgt;
  __u8 hwid_upper : 2;
  __u8 ft : 5;
  __u8 p : 1;
  __u8 o : 1;
  __u8 gra : 2;
  __u8 dir : 1;
  __u8 hwid : 4;
};

struct erspan_metadata {
  int version;
  union {
    __be32 index;
    struct erspan_md2 md2;
  } u;
};

struct nhmsg {
  unsigned char nh_family;
  unsigned char nh_scope;
  unsigned char nh_protocol;
  unsigned char resvd;
  unsigned int nh_flags;
};

struct nexthop_grp {
  __u32 id;
  __u8 weight;
  __u8 resvd1;
  __u16 resvd2;
};

enum {
  NEXTHOP_GRP_TYPE_MPATH = 0,
  __NEXTHOP_GRP_TYPE_MAX = 1,
};

enum {
  NHA_UNSPEC = 0,
  NHA_ID = 1,
  NHA_GROUP = 2,
  NHA_GROUP_TYPE = 3,
  NHA_BLACKHOLE = 4,
  NHA_OIF = 5,
  NHA_GATEWAY = 6,
  NHA_ENCAP_TYPE = 7,
  NHA_ENCAP = 8,
  NHA_GROUPS = 9,
  NHA_MASTER = 10,
  NHA_FDB = 11,
  __NHA_MAX = 12,
};

struct nh_config {
  u32 nh_id;
  u8 nh_family;
  u8 nh_protocol;
  u8 nh_blackhole;
  u8 nh_fdb;
  u32 nh_flags;
  int nh_ifindex;
  struct net_device* dev;
  union {
    __be32 ipv4;
    struct in6_addr ipv6;
  } gw;
  struct nlattr* nh_grp;
  u16 nh_grp_type;
  struct nlattr* nh_encap;
  u16 nh_encap_type;
  u32 nlflags;
  struct nl_info nlinfo;
};

enum nexthop_event_type {
  NEXTHOP_EVENT_DEL = 0,
  NEXTHOP_EVENT_REPLACE = 1,
};

enum nh_notifier_info_type {
  NH_NOTIFIER_INFO_TYPE_SINGLE = 0,
  NH_NOTIFIER_INFO_TYPE_GRP = 1,
};

struct nh_notifier_single_info {
  struct net_device* dev;
  u8 gw_family;
  union {
    __be32 ipv4;
    struct in6_addr ipv6;
  };
  u8 is_reject : 1;
  u8 is_fdb : 1;
  u8 has_encap : 1;
};

struct nh_notifier_grp_entry_info {
  u8 weight;
  u32 id;
  struct nh_notifier_single_info nh;
};

struct nh_notifier_grp_info {
  u16 num_nh;
  bool is_fdb;
  struct nh_notifier_grp_entry_info nh_entries[0];
};

struct nh_notifier_info {
  struct net* net;
  struct netlink_ext_ack* extack;
  u32 id;
  enum nh_notifier_info_type type;
  union {
    struct nh_notifier_single_info* nh;
    struct nh_notifier_grp_info* nh_grp;
  };
};

struct nh_dump_filter {
  int dev_idx;
  int master_idx;
  bool group_filter;
  bool fdb_filter;
};

struct rtm_dump_nh_ctx {
  u32 idx;
};

struct snmp_mib {
  const char* name;
  int entry;
};

struct fib4_rule {
  struct fib_rule common;
  u8 dst_len;
  u8 src_len;
  u8 tos;
  __be32 src;
  __be32 srcmask;
  __be32 dst;
  __be32 dstmask;
  u32 tclassid;
};

enum {
  PIM_TYPE_HELLO = 0,
  PIM_TYPE_REGISTER = 1,
  PIM_TYPE_REGISTER_STOP = 2,
  PIM_TYPE_JOIN_PRUNE = 3,
  PIM_TYPE_BOOTSTRAP = 4,
  PIM_TYPE_ASSERT = 5,
  PIM_TYPE_GRAFT = 6,
  PIM_TYPE_GRAFT_ACK = 7,
  PIM_TYPE_CANDIDATE_RP_ADV = 8,
};

struct pimreghdr {
  __u8 type;
  __u8 reserved;
  __be16 csum;
  __be32 flags;
};

typedef short unsigned int vifi_t;

struct vifctl {
  vifi_t vifc_vifi;
  unsigned char vifc_flags;
  unsigned char vifc_threshold;
  unsigned int vifc_rate_limit;
  union {
    struct in_addr vifc_lcl_addr;
    int vifc_lcl_ifindex;
  };
  struct in_addr vifc_rmt_addr;
};

struct mfcctl {
  struct in_addr mfcc_origin;
  struct in_addr mfcc_mcastgrp;
  vifi_t mfcc_parent;
  unsigned char mfcc_ttls[32];
  unsigned int mfcc_pkt_cnt;
  unsigned int mfcc_byte_cnt;
  unsigned int mfcc_wrong_if;
  int mfcc_expire;
};

struct sioc_sg_req {
  struct in_addr src;
  struct in_addr grp;
  long unsigned int pktcnt;
  long unsigned int bytecnt;
  long unsigned int wrong_if;
};

struct sioc_vif_req {
  vifi_t vifi;
  long unsigned int icount;
  long unsigned int ocount;
  long unsigned int ibytes;
  long unsigned int obytes;
};

struct igmpmsg {
  __u32 unused1;
  __u32 unused2;
  unsigned char im_msgtype;
  unsigned char im_mbz;
  unsigned char im_vif;
  unsigned char im_vif_hi;
  struct in_addr im_src;
  struct in_addr im_dst;
};

enum {
  IPMRA_TABLE_UNSPEC = 0,
  IPMRA_TABLE_ID = 1,
  IPMRA_TABLE_CACHE_RES_QUEUE_LEN = 2,
  IPMRA_TABLE_MROUTE_REG_VIF_NUM = 3,
  IPMRA_TABLE_MROUTE_DO_ASSERT = 4,
  IPMRA_TABLE_MROUTE_DO_PIM = 5,
  IPMRA_TABLE_VIFS = 6,
  IPMRA_TABLE_MROUTE_DO_WRVIFWHOLE = 7,
  __IPMRA_TABLE_MAX = 8,
};

enum {
  IPMRA_VIF_UNSPEC = 0,
  IPMRA_VIF = 1,
  __IPMRA_VIF_MAX = 2,
};

enum {
  IPMRA_VIFA_UNSPEC = 0,
  IPMRA_VIFA_IFINDEX = 1,
  IPMRA_VIFA_VIF_ID = 2,
  IPMRA_VIFA_FLAGS = 3,
  IPMRA_VIFA_BYTES_IN = 4,
  IPMRA_VIFA_BYTES_OUT = 5,
  IPMRA_VIFA_PACKETS_IN = 6,
  IPMRA_VIFA_PACKETS_OUT = 7,
  IPMRA_VIFA_LOCAL_ADDR = 8,
  IPMRA_VIFA_REMOTE_ADDR = 9,
  IPMRA_VIFA_PAD = 10,
  __IPMRA_VIFA_MAX = 11,
};

enum {
  IPMRA_CREPORT_UNSPEC = 0,
  IPMRA_CREPORT_MSGTYPE = 1,
  IPMRA_CREPORT_VIF_ID = 2,
  IPMRA_CREPORT_SRC_ADDR = 3,
  IPMRA_CREPORT_DST_ADDR = 4,
  IPMRA_CREPORT_PKT = 5,
  IPMRA_CREPORT_TABLE = 6,
  __IPMRA_CREPORT_MAX = 7,
};

struct vif_entry_notifier_info {
  struct fib_notifier_info info;
  struct net_device* dev;
  short unsigned int vif_index;
  short unsigned int vif_flags;
  u32 tb_id;
};

enum {
  MFC_STATIC = 1,
  MFC_OFFLOAD = 2,
};

struct mr_mfc {
  struct rhlist_head mnode;
  short unsigned int mfc_parent;
  int mfc_flags;
  union {
    struct {
      long unsigned int expires;
      struct sk_buff_head unresolved;
    } unres;
    struct {
      long unsigned int last_assert;
      int minvif;
      int maxvif;
      long unsigned int bytes;
      long unsigned int pkt;
      long unsigned int wrong_if;
      long unsigned int lastuse;
      unsigned char ttls[32];
      refcount_t refcount;
    } res;
  } mfc_un;
  struct list_head list;
  struct callback_head rcu;
  void (*free)(struct callback_head*);
};

struct mfc_entry_notifier_info {
  struct fib_notifier_info info;
  struct mr_mfc* mfc;
  u32 tb_id;
};

struct mr_vif_iter {
  struct seq_net_private p;
  struct mr_table* mrt;
  int ct;
};

struct mr_mfc_iter {
  struct seq_net_private p;
  struct mr_table* mrt;
  struct list_head* cache;
  spinlock_t* lock;
};

struct mfc_cache_cmp_arg {
  __be32 mfc_mcastgrp;
  __be32 mfc_origin;
};

struct mfc_cache {
  struct mr_mfc _c;
  union {
    struct {
      __be32 mfc_mcastgrp;
      __be32 mfc_origin;
    };
    struct mfc_cache_cmp_arg cmparg;
  };
};

struct compat_sioc_sg_req {
  struct in_addr src;
  struct in_addr grp;
  compat_ulong_t pktcnt;
  compat_ulong_t bytecnt;
  compat_ulong_t wrong_if;
};

struct compat_sioc_vif_req {
  vifi_t vifi;
  compat_ulong_t icount;
  compat_ulong_t ocount;
  compat_ulong_t ibytes;
  compat_ulong_t obytes;
};

struct rta_mfc_stats {
  __u64 mfcs_packets;
  __u64 mfcs_bytes;
  __u64 mfcs_wrong_if;
};

struct xt_get_revision {
  char name[29];
  __u8 revision;
};

struct ipt_ip {
  struct in_addr src;
  struct in_addr dst;
  struct in_addr smsk;
  struct in_addr dmsk;
  char iniface[16];
  char outiface[16];
  unsigned char iniface_mask[16];
  unsigned char outiface_mask[16];
  __u16 proto;
  __u8 flags;
  __u8 invflags;
};

struct ipt_entry {
  struct ipt_ip ip;
  unsigned int nfcache;
  __u16 target_offset;
  __u16 next_offset;
  unsigned int comefrom;
  struct xt_counters counters;
  unsigned char elems[0];
};

struct ipt_icmp {
  __u8 type;
  __u8 code[2];
  __u8 invflags;
};

struct ipt_getinfo {
  char name[32];
  unsigned int valid_hooks;
  unsigned int hook_entry[5];
  unsigned int underflow[5];
  unsigned int num_entries;
  unsigned int size;
};

struct ipt_replace {
  char name[32];
  unsigned int valid_hooks;
  unsigned int num_entries;
  unsigned int size;
  unsigned int hook_entry[5];
  unsigned int underflow[5];
  unsigned int num_counters;
  struct xt_counters* counters;
  struct ipt_entry entries[0];
};

struct ipt_get_entries {
  char name[32];
  unsigned int size;
  struct ipt_entry entrytable[0];
};

struct ipt_standard {
  struct ipt_entry entry;
  struct xt_standard_target target;
};

struct ipt_error {
  struct ipt_entry entry;
  struct xt_error_target target;
};

struct compat_ipt_entry {
  struct ipt_ip ip;
  compat_uint_t nfcache;
  __u16 target_offset;
  __u16 next_offset;
  compat_uint_t comefrom;
  struct compat_xt_counters counters;
  unsigned char elems[0];
};

enum nf_ip_trace_comments {
  NF_IP_TRACE_COMMENT_RULE = 0,
  NF_IP_TRACE_COMMENT_RETURN = 1,
  NF_IP_TRACE_COMMENT_POLICY = 2,
};

struct compat_ipt_replace {
  char name[32];
  u32 valid_hooks;
  u32 num_entries;
  u32 size;
  u32 hook_entry[5];
  u32 underflow[5];
  u32 num_counters;
  compat_uptr_t counters;
  struct compat_ipt_entry entries[0];
} __attribute__((packed));

struct compat_ipt_get_entries {
  char name[32];
  compat_uint_t size;
  struct compat_ipt_entry entrytable[0];
} __attribute__((packed));

enum {
  INET_DIAG_NONE = 0,
  INET_DIAG_MEMINFO = 1,
  INET_DIAG_INFO = 2,
  INET_DIAG_VEGASINFO = 3,
  INET_DIAG_CONG = 4,
  INET_DIAG_TOS = 5,
  INET_DIAG_TCLASS = 6,
  INET_DIAG_SKMEMINFO = 7,
  INET_DIAG_SHUTDOWN = 8,
  INET_DIAG_DCTCPINFO = 9,
  INET_DIAG_PROTOCOL = 10,
  INET_DIAG_SKV6ONLY = 11,
  INET_DIAG_LOCALS = 12,
  INET_DIAG_PEERS = 13,
  INET_DIAG_PAD = 14,
  INET_DIAG_MARK = 15,
  INET_DIAG_BBRINFO = 16,
  INET_DIAG_CLASS_ID = 17,
  INET_DIAG_MD5SIG = 18,
  INET_DIAG_ULP_INFO = 19,
  INET_DIAG_SK_BPF_STORAGES = 20,
  INET_DIAG_CGROUP_ID = 21,
  INET_DIAG_SOCKOPT = 22,
  __INET_DIAG_MAX = 23,
};

enum bbr_mode {
  BBR_STARTUP = 0,
  BBR_DRAIN = 1,
  BBR_PROBE_BW = 2,
  BBR_PROBE_RTT = 3,
};

struct bbr {
  u32 min_rtt_us;
  u32 min_rtt_stamp;
  u32 probe_rtt_done_stamp;
  struct minmax bw;
  u32 rtt_cnt;
  u32 next_rtt_delivered;
  u64 cycle_mstamp;
  u32 mode : 3;
  u32 prev_ca_state : 3;
  u32 packet_conservation : 1;
  u32 round_start : 1;
  u32 idle_restart : 1;
  u32 probe_rtt_round_done : 1;
  u32 unused : 13;
  u32 lt_is_sampling : 1;
  u32 lt_rtt_cnt : 7;
  u32 lt_use_bw : 1;
  u32 lt_bw;
  u32 lt_last_delivered;
  u32 lt_last_stamp;
  u32 lt_last_lost;
  u32 pacing_gain : 10;
  u32 cwnd_gain : 10;
  u32 full_bw_reached : 1;
  u32 full_bw_cnt : 2;
  u32 cycle_idx : 3;
  u32 has_seen_rtt : 1;
  u32 unused_b : 5;
  u32 prior_cwnd;
  u32 full_bw;
  u64 ack_epoch_mstamp;
  u16 extra_acked[2];
  u32 ack_epoch_acked : 20;
  u32 extra_acked_win_rtts : 5;
  u32 extra_acked_win_idx : 1;
  u32 unused_c : 6;
};

struct bictcp {
  u32 cnt;
  u32 last_max_cwnd;
  u32 last_cwnd;
  u32 last_time;
  u32 bic_origin_point;
  u32 bic_K;
  u32 delay_min;
  u32 epoch_start;
  u32 ack_cnt;
  u32 tcp_cwnd;
  u16 unused;
  u8 sample_cnt;
  u8 found;
  u32 round_start;
  u32 end_seq;
  u32 last_ack;
  u32 curr_rtt;
};

struct dctcp {
  u32 old_delivered;
  u32 old_delivered_ce;
  u32 prior_rcv_nxt;
  u32 dctcp_alpha;
  u32 next_seq;
  u32 ce_state;
  u32 loss_cwnd;
};

struct tcpnv {
  long unsigned int nv_min_rtt_reset_jiffies;
  s8 cwnd_growth_factor;
  u8 available8;
  u16 available16;
  u8 nv_allow_cwnd_growth : 1;
  u8 nv_reset : 1;
  u8 nv_catchup : 1;
  u8 nv_eval_call_cnt;
  u8 nv_min_cwnd;
  u8 nv_rtt_cnt;
  u32 nv_last_rtt;
  u32 nv_min_rtt;
  u32 nv_min_rtt_new;
  u32 nv_base_rtt;
  u32 nv_lower_bound_rtt;
  u32 nv_rtt_max_rate;
  u32 nv_rtt_start_seq;
  u32 nv_last_snd_una;
  u32 nv_no_cong_cnt;
};

struct tls_rec {
  struct list_head list;
  int tx_ready;
  int tx_flags;
  struct sk_msg msg_plaintext;
  struct sk_msg msg_encrypted;
  struct scatterlist sg_aead_in[2];
  struct scatterlist sg_aead_out[2];
  char content_type;
  struct scatterlist sg_content_type;
  char aad_space[13];
  u8 iv_data[16];
  struct aead_request aead_req;
  u8 aead_req_ctx[0];
};

struct tx_work {
  struct delayed_work work;
  struct sock* sk;
};

struct tls_sw_context_tx {
  struct crypto_aead* aead_send;
  struct crypto_wait async_wait;
  struct tx_work tx_work;
  struct tls_rec* open_rec;
  struct list_head tx_list;
  atomic_t encrypt_pending;
  spinlock_t encrypt_compl_lock;
  int async_notify;
  u8 async_capable : 1;
  long unsigned int tx_bitmask;
};

enum {
  TCP_BPF_IPV4 = 0,
  TCP_BPF_IPV6 = 1,
  TCP_BPF_NUM_PROTS = 2,
};

enum {
  TCP_BPF_BASE = 0,
  TCP_BPF_TX = 1,
  TCP_BPF_NUM_CFGS = 2,
};

enum {
  UDP_BPF_IPV4 = 0,
  UDP_BPF_IPV6 = 1,
  UDP_BPF_NUM_PROTS = 2,
};

struct xfrm_policy_afinfo {
  struct dst_ops* dst_ops;
  struct dst_entry* (*dst_lookup)(
      struct net*,
      int,
      int,
      const xfrm_address_t*,
      const xfrm_address_t*,
      u32);
  int (*get_saddr)(struct net*, int, xfrm_address_t*, xfrm_address_t*, u32);
  int (*fill_dst)(struct xfrm_dst*, struct net_device*, const struct flowi*);
  struct dst_entry* (*blackhole_route)(struct net*, struct dst_entry*);
};

struct xfrm_state_afinfo {
  u8 family;
  u8 proto;
  const struct xfrm_type_offload* type_offload_esp;
  const struct xfrm_type* type_esp;
  const struct xfrm_type* type_ipip;
  const struct xfrm_type* type_ipip6;
  const struct xfrm_type* type_comp;
  const struct xfrm_type* type_ah;
  const struct xfrm_type* type_routing;
  const struct xfrm_type* type_dstopts;
  int (*output)(struct net*, struct sock*, struct sk_buff*);
  int (*transport_finish)(struct sk_buff*, int);
  void (*local_error)(struct sk_buff*, u32);
};

struct ip_tunnel;

struct ip6_tnl;

struct xfrm_tunnel_skb_cb {
  union {
    struct inet_skb_parm h4;
    struct inet6_skb_parm h6;
  } header;
  union {
    struct ip_tunnel* ip4;
    struct ip6_tnl* ip6;
  } tunnel;
};

struct xfrm_mode_skb_cb {
  struct xfrm_tunnel_skb_cb header;
  __be16 id;
  __be16 frag_off;
  u8 ihl;
  u8 tos;
  u8 ttl;
  u8 protocol;
  u8 optlen;
  u8 flow_lbl[3];
};

struct xfrm_spi_skb_cb {
  struct xfrm_tunnel_skb_cb header;
  unsigned int daddroff;
  unsigned int family;
  __be32 seq;
};

struct xfrm_input_afinfo {
  u8 family;
  bool is_ipip;
  int (*callback)(struct sk_buff*, u8, int);
};

struct xfrm4_protocol {
  int (*handler)(struct sk_buff*);
  int (*input_handler)(struct sk_buff*, int, __be32, int);
  int (*cb_handler)(struct sk_buff*, int);
  int (*err_handler)(struct sk_buff*, u32);
  struct xfrm4_protocol* next;
  int priority;
};

typedef u64 (*btf_bpf_tcp_send_ack)(struct tcp_sock*, u32);

enum {
  XFRM_STATE_VOID = 0,
  XFRM_STATE_ACQ = 1,
  XFRM_STATE_VALID = 2,
  XFRM_STATE_ERROR = 3,
  XFRM_STATE_EXPIRED = 4,
  XFRM_STATE_DEAD = 5,
};

struct xfrm_if;

struct xfrm_if_cb {
  struct xfrm_if* (*decode_session)(struct sk_buff*, short unsigned int);
};

struct xfrm_if_parms {
  int link;
  u32 if_id;
};

struct xfrm_if {
  struct xfrm_if* next;
  struct net_device* dev;
  struct net* net;
  struct xfrm_if_parms p;
  struct gro_cells gro_cells;
};

struct xfrm_policy_walk {
  struct xfrm_policy_walk_entry walk;
  u8 type;
  u32 seq;
};

struct xfrmk_spdinfo {
  u32 incnt;
  u32 outcnt;
  u32 fwdcnt;
  u32 inscnt;
  u32 outscnt;
  u32 fwdscnt;
  u32 spdhcnt;
  u32 spdhmcnt;
};

struct ip6_mh {
  __u8 ip6mh_proto;
  __u8 ip6mh_hdrlen;
  __u8 ip6mh_type;
  __u8 ip6mh_reserved;
  __u16 ip6mh_cksum;
  __u8 data[0];
};

struct xfrm_flo {
  struct dst_entry* dst_orig;
  u8 flags;
};

struct xfrm_pol_inexact_node {
  struct rb_node node;
  union {
    xfrm_address_t addr;
    struct callback_head rcu;
  };
  u8 prefixlen;
  struct rb_root root;
  struct hlist_head hhead;
};

struct xfrm_pol_inexact_key {
  possible_net_t net;
  u32 if_id;
  u16 family;
  u8 dir;
  u8 type;
};

struct xfrm_pol_inexact_bin {
  struct xfrm_pol_inexact_key k;
  struct rhash_head head;
  struct hlist_head hhead;
  seqcount_spinlock_t count;
  struct rb_root root_d;
  struct rb_root root_s;
  struct list_head inexact_bins;
  struct callback_head rcu;
};

enum xfrm_pol_inexact_candidate_type {
  XFRM_POL_CAND_BOTH = 0,
  XFRM_POL_CAND_SADDR = 1,
  XFRM_POL_CAND_DADDR = 2,
  XFRM_POL_CAND_ANY = 3,
  XFRM_POL_CAND_MAX = 4,
};

struct xfrm_pol_inexact_candidates {
  struct hlist_head* res[4];
};

enum xfrm_ae_ftype_t {
  XFRM_AE_UNSPEC = 0,
  XFRM_AE_RTHR = 1,
  XFRM_AE_RVAL = 2,
  XFRM_AE_LVAL = 4,
  XFRM_AE_ETHR = 8,
  XFRM_AE_CR = 16,
  XFRM_AE_CE = 32,
  XFRM_AE_CU = 64,
  __XFRM_AE_MAX = 65,
};

enum xfrm_nlgroups {
  XFRMNLGRP_NONE = 0,
  XFRMNLGRP_ACQUIRE = 1,
  XFRMNLGRP_EXPIRE = 2,
  XFRMNLGRP_SA = 3,
  XFRMNLGRP_POLICY = 4,
  XFRMNLGRP_AEVENTS = 5,
  XFRMNLGRP_REPORT = 6,
  XFRMNLGRP_MIGRATE = 7,
  XFRMNLGRP_MAPPING = 8,
  __XFRMNLGRP_MAX = 9,
};

enum {
  XFRM_MODE_FLAG_TUNNEL = 1,
};

struct km_event {
  union {
    u32 hard;
    u32 proto;
    u32 byid;
    u32 aevent;
    u32 type;
  } data;
  u32 seq;
  u32 portid;
  u32 event;
  struct net* net;
};

struct xfrm_kmaddress {
  xfrm_address_t local;
  xfrm_address_t remote;
  u32 reserved;
  u16 family;
};

struct xfrm_migrate {
  xfrm_address_t old_daddr;
  xfrm_address_t old_saddr;
  xfrm_address_t new_daddr;
  xfrm_address_t new_saddr;
  u8 proto;
  u8 mode;
  u16 reserved;
  u32 reqid;
  u16 old_family;
  u16 new_family;
};

struct xfrm_mgr {
  struct list_head list;
  int (*notify)(struct xfrm_state*, const struct km_event*);
  int (*acquire)(struct xfrm_state*, struct xfrm_tmpl*, struct xfrm_policy*);
  struct xfrm_policy* (*compile_policy)(struct sock*, int, u8*, int, int*);
  int (*new_mapping)(struct xfrm_state*, xfrm_address_t*, __be16);
  int (*notify_policy)(struct xfrm_policy*, int, const struct km_event*);
  int (*report)(struct net*, u8, struct xfrm_selector*, xfrm_address_t*);
  int (*migrate)(
      const struct xfrm_selector*,
      u8,
      u8,
      const struct xfrm_migrate*,
      int,
      const struct xfrm_kmaddress*,
      const struct xfrm_encap_tmpl*);
  bool (*is_alive)(const struct km_event*);
};

struct xfrmk_sadinfo {
  u32 sadhcnt;
  u32 sadhmcnt;
  u32 sadcnt;
};

struct xfrm_translator {
  int (*alloc_compat)(struct sk_buff*, const struct nlmsghdr*);
  struct nlmsghdr* (*rcv_msg_compat)(
      const struct nlmsghdr*,
      int,
      const struct nla_policy*,
      struct netlink_ext_ack*);
  int (*xlate_user_policy_sockptr)(u8**, int);
  struct module* owner;
};

struct ip_beet_phdr {
  __u8 nexthdr;
  __u8 hdrlen;
  __u8 padlen;
  __u8 reserved;
};

struct ip_tunnel_prl_entry;

struct ip_tunnel {
  struct ip_tunnel* next;
  struct hlist_node hash_node;
  struct net_device* dev;
  struct net* net;
  long unsigned int err_time;
  int err_count;
  u32 i_seqno;
  u32 o_seqno;
  int tun_hlen;
  u32 index;
  u8 erspan_ver;
  u8 dir;
  u16 hwid;
  struct dst_cache dst_cache;
  struct ip_tunnel_parm parms;
  int mlink;
  int encap_hlen;
  int hlen;
  struct ip_tunnel_encap encap;
  struct ip_tunnel_prl_entry* prl;
  unsigned int prl_count;
  unsigned int ip_tnl_net_id;
  struct gro_cells gro_cells;
  __u32 fwmark;
  bool collect_md;
  bool ignore_df;
};

struct __ip6_tnl_parm {
  char name[16];
  int link;
  __u8 proto;
  __u8 encap_limit;
  __u8 hop_limit;
  bool collect_md;
  __be32 flowinfo;
  __u32 flags;
  struct in6_addr laddr;
  struct in6_addr raddr;
  __be16 i_flags;
  __be16 o_flags;
  __be32 i_key;
  __be32 o_key;
  __u32 fwmark;
  __u32 index;
  __u8 erspan_ver;
  __u8 dir;
  __u16 hwid;
};

struct ip6_tnl {
  struct ip6_tnl* next;
  struct net_device* dev;
  struct net* net;
  struct __ip6_tnl_parm parms;
  struct flowi fl;
  struct dst_cache dst_cache;
  struct gro_cells gro_cells;
  int err_count;
  long unsigned int err_time;
  __u32 i_seqno;
  __u32 o_seqno;
  int hlen;
  int tun_hlen;
  int encap_hlen;
  struct ip_tunnel_encap encap;
  int mlink;
};

struct xfrm_skb_cb {
  struct xfrm_tunnel_skb_cb header;
  union {
    struct {
      __u32 low;
      __u32 hi;
    } output;
    struct {
      __be32 low;
      __be32 hi;
    } input;
  } seq;
};

struct ip_tunnel_prl_entry {
  struct ip_tunnel_prl_entry* next;
  __be32 addr;
  u16 flags;
  struct callback_head callback_head;
};

struct xfrm_trans_tasklet {
  struct tasklet_struct tasklet;
  struct sk_buff_head queue;
};

struct xfrm_trans_cb {
  union {
    struct inet_skb_parm h4;
    struct inet6_skb_parm h6;
  } header;
  int (*finish)(struct net*, struct sock*, struct sk_buff*);
  struct net* net;
};

struct sadb_alg {
  __u8 sadb_alg_id;
  __u8 sadb_alg_ivlen;
  __u16 sadb_alg_minbits;
  __u16 sadb_alg_maxbits;
  __u16 sadb_alg_reserved;
};

struct xfrm_algo_aead_info {
  char* geniv;
  u16 icv_truncbits;
};

struct xfrm_algo_auth_info {
  u16 icv_truncbits;
  u16 icv_fullbits;
};

struct xfrm_algo_encr_info {
  char* geniv;
  u16 blockbits;
  u16 defkeybits;
};

struct xfrm_algo_comp_info {
  u16 threshold;
};

struct xfrm_algo_desc {
  char* name;
  char* compat;
  u8 available : 1;
  u8 pfkey_supported : 1;
  union {
    struct xfrm_algo_aead_info aead;
    struct xfrm_algo_auth_info auth;
    struct xfrm_algo_encr_info encr;
    struct xfrm_algo_comp_info comp;
  } uinfo;
  struct sadb_alg desc;
};

struct xfrm_algo_list {
  struct xfrm_algo_desc* algs;
  int entries;
  u32 type;
  u32 mask;
};

struct xfrm_aead_name {
  const char* name;
  int icvbits;
};

enum {
  XFRM_SHARE_ANY = 0,
  XFRM_SHARE_SESSION = 1,
  XFRM_SHARE_USER = 2,
  XFRM_SHARE_UNIQUE = 3,
};

struct xfrm_user_sec_ctx {
  __u16 len;
  __u16 exttype;
  __u8 ctx_alg;
  __u8 ctx_doi;
  __u16 ctx_len;
};

struct xfrm_user_tmpl {
  struct xfrm_id id;
  __u16 family;
  xfrm_address_t saddr;
  __u32 reqid;
  __u8 mode;
  __u8 share;
  __u8 optional;
  __u32 aalgos;
  __u32 ealgos;
  __u32 calgos;
};

struct xfrm_userpolicy_type {
  __u8 type;
  __u16 reserved1;
  __u8 reserved2;
};

enum xfrm_sadattr_type_t {
  XFRMA_SAD_UNSPEC = 0,
  XFRMA_SAD_CNT = 1,
  XFRMA_SAD_HINFO = 2,
  __XFRMA_SAD_MAX = 3,
};

struct xfrmu_sadhinfo {
  __u32 sadhcnt;
  __u32 sadhmcnt;
};

enum xfrm_spdattr_type_t {
  XFRMA_SPD_UNSPEC = 0,
  XFRMA_SPD_INFO = 1,
  XFRMA_SPD_HINFO = 2,
  XFRMA_SPD_IPV4_HTHRESH = 3,
  XFRMA_SPD_IPV6_HTHRESH = 4,
  __XFRMA_SPD_MAX = 5,
};

struct xfrmu_spdinfo {
  __u32 incnt;
  __u32 outcnt;
  __u32 fwdcnt;
  __u32 inscnt;
  __u32 outscnt;
  __u32 fwdscnt;
};

struct xfrmu_spdhinfo {
  __u32 spdhcnt;
  __u32 spdhmcnt;
};

struct xfrmu_spdhthresh {
  __u8 lbits;
  __u8 rbits;
};

struct xfrm_usersa_info {
  struct xfrm_selector sel;
  struct xfrm_id id;
  xfrm_address_t saddr;
  struct xfrm_lifetime_cfg lft;
  struct xfrm_lifetime_cur curlft;
  struct xfrm_stats stats;
  __u32 seq;
  __u32 reqid;
  __u16 family;
  __u8 mode;
  __u8 replay_window;
  __u8 flags;
};

struct xfrm_usersa_id {
  xfrm_address_t daddr;
  __be32 spi;
  __u16 family;
  __u8 proto;
};

struct xfrm_aevent_id {
  struct xfrm_usersa_id sa_id;
  xfrm_address_t saddr;
  __u32 flags;
  __u32 reqid;
};

struct xfrm_userspi_info {
  struct xfrm_usersa_info info;
  __u32 min;
  __u32 max;
};

struct xfrm_userpolicy_info {
  struct xfrm_selector sel;
  struct xfrm_lifetime_cfg lft;
  struct xfrm_lifetime_cur curlft;
  __u32 priority;
  __u32 index;
  __u8 dir;
  __u8 action;
  __u8 flags;
  __u8 share;
};

struct xfrm_userpolicy_id {
  struct xfrm_selector sel;
  __u32 index;
  __u8 dir;
};

struct xfrm_user_acquire {
  struct xfrm_id id;
  xfrm_address_t saddr;
  struct xfrm_selector sel;
  struct xfrm_userpolicy_info policy;
  __u32 aalgos;
  __u32 ealgos;
  __u32 calgos;
  __u32 seq;
};

struct xfrm_user_expire {
  struct xfrm_usersa_info state;
  __u8 hard;
};

struct xfrm_user_polexpire {
  struct xfrm_userpolicy_info pol;
  __u8 hard;
};

struct xfrm_usersa_flush {
  __u8 proto;
};

struct xfrm_user_report {
  __u8 proto;
  struct xfrm_selector sel;
};

struct xfrm_user_mapping {
  struct xfrm_usersa_id id;
  __u32 reqid;
  xfrm_address_t old_saddr;
  xfrm_address_t new_saddr;
  __be16 old_sport;
  __be16 new_sport;
};

struct xfrm_user_offload {
  int ifindex;
  __u8 flags;
};

struct xfrm_dump_info {
  struct sk_buff* in_skb;
  struct sk_buff* out_skb;
  u32 nlmsg_seq;
  u16 nlmsg_flags;
};

struct xfrm_link {
  int (*doit)(struct sk_buff*, struct nlmsghdr*, struct nlattr**);
  int (*start)(struct netlink_callback*);
  int (*dump)(struct sk_buff*, struct netlink_callback*);
  int (*done)(struct netlink_callback*);
  const struct nla_policy* nla_pol;
  int nla_max;
};

struct unix_stream_read_state {
  int (*recv_actor)(struct sk_buff*, int, int, struct unix_stream_read_state*);
  struct socket* socket;
  struct msghdr* msg;
  struct pipe_inode_info* pipe;
  size_t size;
  int flags;
  unsigned int splice_flags;
};

struct bpf_iter__unix {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct unix_sock* unix_sk;
  };
  uid_t uid;
};

enum flowlabel_reflect {
  FLOWLABEL_REFLECT_ESTABLISHED = 1,
  FLOWLABEL_REFLECT_TCP_RESET = 2,
  FLOWLABEL_REFLECT_ICMPV6_ECHO_REPLIES = 4,
};

struct in6_rtmsg {
  struct in6_addr rtmsg_dst;
  struct in6_addr rtmsg_src;
  struct in6_addr rtmsg_gateway;
  __u32 rtmsg_type;
  __u16 rtmsg_dst_len;
  __u16 rtmsg_src_len;
  __u32 rtmsg_metric;
  long unsigned int rtmsg_info;
  __u32 rtmsg_flags;
  int rtmsg_ifindex;
};

struct compat_in6_rtmsg {
  struct in6_addr rtmsg_dst;
  struct in6_addr rtmsg_src;
  struct in6_addr rtmsg_gateway;
  u32 rtmsg_type;
  u16 rtmsg_dst_len;
  u16 rtmsg_src_len;
  u32 rtmsg_metric;
  u32 rtmsg_info;
  u32 rtmsg_flags;
  s32 rtmsg_ifindex;
};

struct ac6_iter_state {
  struct seq_net_private p;
  struct net_device* dev;
  struct inet6_dev* idev;
};

struct ip6_fraglist_iter {
  struct ipv6hdr* tmp_hdr;
  struct sk_buff* frag;
  int offset;
  unsigned int hlen;
  __be32 frag_id;
  u8 nexthdr;
};

struct ip6_frag_state {
  u8* prevhdr;
  unsigned int hlen;
  unsigned int mtu;
  unsigned int left;
  int offset;
  int ptr;
  int hroom;
  int troom;
  __be32 frag_id;
  u8 nexthdr;
};

struct ipcm6_cookie {
  struct sockcm_cookie sockc;
  __s16 hlimit;
  __s16 tclass;
  __s8 dontfrag;
  struct ipv6_txoptions* opt;
  __u16 gso_size;
};

enum {
  IFLA_INET6_UNSPEC = 0,
  IFLA_INET6_FLAGS = 1,
  IFLA_INET6_CONF = 2,
  IFLA_INET6_STATS = 3,
  IFLA_INET6_MCAST = 4,
  IFLA_INET6_CACHEINFO = 5,
  IFLA_INET6_ICMP6STATS = 6,
  IFLA_INET6_TOKEN = 7,
  IFLA_INET6_ADDR_GEN_MODE = 8,
  __IFLA_INET6_MAX = 9,
};

enum in6_addr_gen_mode {
  IN6_ADDR_GEN_MODE_EUI64 = 0,
  IN6_ADDR_GEN_MODE_NONE = 1,
  IN6_ADDR_GEN_MODE_STABLE_PRIVACY = 2,
  IN6_ADDR_GEN_MODE_RANDOM = 3,
};

struct ifla_cacheinfo {
  __u32 max_reasm_len;
  __u32 tstamp;
  __u32 reachable_time;
  __u32 retrans_time;
};

struct wpan_phy;

struct wpan_dev_header_ops;

struct wpan_dev {
  struct wpan_phy* wpan_phy;
  int iftype;
  struct list_head list;
  struct net_device* netdev;
  const struct wpan_dev_header_ops* header_ops;
  struct net_device* lowpan_dev;
  u32 identifier;
  __le16 pan_id;
  __le16 short_addr;
  __le64 extended_addr;
  atomic_t bsn;
  atomic_t dsn;
  u8 min_be;
  u8 max_be;
  u8 csma_retries;
  s8 frame_retries;
  bool lbt;
  bool promiscuous_mode;
  bool ackreq;
};

struct prefixmsg {
  unsigned char prefix_family;
  unsigned char prefix_pad1;
  short unsigned int prefix_pad2;
  int prefix_ifindex;
  unsigned char prefix_type;
  unsigned char prefix_len;
  unsigned char prefix_flags;
  unsigned char prefix_pad3;
};

enum {
  PREFIX_UNSPEC = 0,
  PREFIX_ADDRESS = 1,
  PREFIX_CACHEINFO = 2,
  __PREFIX_MAX = 3,
};

struct prefix_cacheinfo {
  __u32 preferred_time;
  __u32 valid_time;
};

struct in6_ifreq {
  struct in6_addr ifr6_addr;
  __u32 ifr6_prefixlen;
  int ifr6_ifindex;
};

enum {
  DEVCONF_FORWARDING = 0,
  DEVCONF_HOPLIMIT = 1,
  DEVCONF_MTU6 = 2,
  DEVCONF_ACCEPT_RA = 3,
  DEVCONF_ACCEPT_REDIRECTS = 4,
  DEVCONF_AUTOCONF = 5,
  DEVCONF_DAD_TRANSMITS = 6,
  DEVCONF_RTR_SOLICITS = 7,
  DEVCONF_RTR_SOLICIT_INTERVAL = 8,
  DEVCONF_RTR_SOLICIT_DELAY = 9,
  DEVCONF_USE_TEMPADDR = 10,
  DEVCONF_TEMP_VALID_LFT = 11,
  DEVCONF_TEMP_PREFERED_LFT = 12,
  DEVCONF_REGEN_MAX_RETRY = 13,
  DEVCONF_MAX_DESYNC_FACTOR = 14,
  DEVCONF_MAX_ADDRESSES = 15,
  DEVCONF_FORCE_MLD_VERSION = 16,
  DEVCONF_ACCEPT_RA_DEFRTR = 17,
  DEVCONF_ACCEPT_RA_PINFO = 18,
  DEVCONF_ACCEPT_RA_RTR_PREF = 19,
  DEVCONF_RTR_PROBE_INTERVAL = 20,
  DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN = 21,
  DEVCONF_PROXY_NDP = 22,
  DEVCONF_OPTIMISTIC_DAD = 23,
  DEVCONF_ACCEPT_SOURCE_ROUTE = 24,
  DEVCONF_MC_FORWARDING = 25,
  DEVCONF_DISABLE_IPV6 = 26,
  DEVCONF_ACCEPT_DAD = 27,
  DEVCONF_FORCE_TLLAO = 28,
  DEVCONF_NDISC_NOTIFY = 29,
  DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL = 30,
  DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL = 31,
  DEVCONF_SUPPRESS_FRAG_NDISC = 32,
  DEVCONF_ACCEPT_RA_FROM_LOCAL = 33,
  DEVCONF_USE_OPTIMISTIC = 34,
  DEVCONF_ACCEPT_RA_MTU = 35,
  DEVCONF_STABLE_SECRET = 36,
  DEVCONF_USE_OIF_ADDRS_ONLY = 37,
  DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT = 38,
  DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN = 39,
  DEVCONF_DROP_UNICAST_IN_L2_MULTICAST = 40,
  DEVCONF_DROP_UNSOLICITED_NA = 41,
  DEVCONF_KEEP_ADDR_ON_DOWN = 42,
  DEVCONF_RTR_SOLICIT_MAX_INTERVAL = 43,
  DEVCONF_SEG6_ENABLED = 44,
  DEVCONF_SEG6_REQUIRE_HMAC = 45,
  DEVCONF_ENHANCED_DAD = 46,
  DEVCONF_ADDR_GEN_MODE = 47,
  DEVCONF_DISABLE_POLICY = 48,
  DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN = 49,
  DEVCONF_NDISC_TCLASS = 50,
  DEVCONF_RPL_SEG_ENABLED = 51,
  DEVCONF_RA_DEFRTR_METRIC = 52,
  DEVCONF_MAX = 53,
};

enum {
  INET6_IFADDR_STATE_PREDAD = 0,
  INET6_IFADDR_STATE_DAD = 1,
  INET6_IFADDR_STATE_POSTDAD = 2,
  INET6_IFADDR_STATE_ERRDAD = 3,
  INET6_IFADDR_STATE_DEAD = 4,
};

enum nl802154_cca_modes {
  __NL802154_CCA_INVALID = 0,
  NL802154_CCA_ENERGY = 1,
  NL802154_CCA_CARRIER = 2,
  NL802154_CCA_ENERGY_CARRIER = 3,
  NL802154_CCA_ALOHA = 4,
  NL802154_CCA_UWB_SHR = 5,
  NL802154_CCA_UWB_MULTIPLEXED = 6,
  __NL802154_CCA_ATTR_AFTER_LAST = 7,
  NL802154_CCA_ATTR_MAX = 6,
};

enum nl802154_cca_opts {
  NL802154_CCA_OPT_ENERGY_CARRIER_AND = 0,
  NL802154_CCA_OPT_ENERGY_CARRIER_OR = 1,
  __NL802154_CCA_OPT_ATTR_AFTER_LAST = 2,
  NL802154_CCA_OPT_ATTR_MAX = 1,
};

enum nl802154_supported_bool_states {
  NL802154_SUPPORTED_BOOL_FALSE = 0,
  NL802154_SUPPORTED_BOOL_TRUE = 1,
  __NL802154_SUPPORTED_BOOL_INVALD = 2,
  NL802154_SUPPORTED_BOOL_BOTH = 3,
  __NL802154_SUPPORTED_BOOL_AFTER_LAST = 4,
  NL802154_SUPPORTED_BOOL_MAX = 3,
};

struct wpan_phy_supported {
  u32 channels[32];
  u32 cca_modes;
  u32 cca_opts;
  u32 iftypes;
  enum nl802154_supported_bool_states lbt;
  u8 min_minbe;
  u8 max_minbe;
  u8 min_maxbe;
  u8 max_maxbe;
  u8 min_csma_backoffs;
  u8 max_csma_backoffs;
  s8 min_frame_retries;
  s8 max_frame_retries;
  size_t tx_powers_size;
  size_t cca_ed_levels_size;
  const s32* tx_powers;
  const s32* cca_ed_levels;
};

struct wpan_phy_cca {
  enum nl802154_cca_modes mode;
  enum nl802154_cca_opts opt;
};

struct wpan_phy {
  const void* privid;
  u32 flags;
  u8 current_channel;
  u8 current_page;
  struct wpan_phy_supported supported;
  s32 transmit_power;
  struct wpan_phy_cca cca;
  __le64 perm_extended_addr;
  s32 cca_ed_level;
  u8 symbol_duration;
  u16 lifs_period;
  u16 sifs_period;
  struct device dev;
  possible_net_t _net;
  long : 64;
  long : 64;
  long : 64;
  char priv[0];
};

struct ieee802154_addr {
  u8 mode;
  __le16 pan_id;
  union {
    __le16 short_addr;
    __le64 extended_addr;
  };
};

struct wpan_dev_header_ops {
  int (*create)(
      struct sk_buff*,
      struct net_device*,
      const struct ieee802154_addr*,
      const struct ieee802154_addr*,
      unsigned int);
};

union fwnet_hwaddr {
  u8 u[16];
  struct {
    __be64 uniq_id;
    u8 max_rec;
    u8 sspd;
    __be16 fifo_hi;
    __be32 fifo_lo;
  } uc;
};

struct in6_validator_info {
  struct in6_addr i6vi_addr;
  struct inet6_dev* i6vi_dev;
  struct netlink_ext_ack* extack;
};

struct ifa6_config {
  const struct in6_addr* pfx;
  unsigned int plen;
  const struct in6_addr* peer_pfx;
  u32 rt_priority;
  u32 ifa_flags;
  u32 preferred_lft;
  u32 valid_lft;
  u16 scope;
};

enum cleanup_prefix_rt_t {
  CLEANUP_PREFIX_RT_NOP = 0,
  CLEANUP_PREFIX_RT_DEL = 1,
  CLEANUP_PREFIX_RT_EXPIRE = 2,
};

enum {
  IPV6_SADDR_RULE_INIT = 0,
  IPV6_SADDR_RULE_LOCAL = 1,
  IPV6_SADDR_RULE_SCOPE = 2,
  IPV6_SADDR_RULE_PREFERRED = 3,
  IPV6_SADDR_RULE_OIF = 4,
  IPV6_SADDR_RULE_LABEL = 5,
  IPV6_SADDR_RULE_PRIVACY = 6,
  IPV6_SADDR_RULE_ORCHID = 7,
  IPV6_SADDR_RULE_PREFIX = 8,
  IPV6_SADDR_RULE_MAX = 9,
};

struct ipv6_saddr_score {
  int rule;
  int addr_type;
  struct inet6_ifaddr* ifa;
  long unsigned int scorebits[1];
  int scopedist;
  int matchlen;
};

struct ipv6_saddr_dst {
  const struct in6_addr* addr;
  int ifindex;
  int scope;
  int label;
  unsigned int prefs;
};

struct if6_iter_state {
  struct seq_net_private p;
  int bucket;
  int offset;
};

enum addr_type_t {
  UNICAST_ADDR = 0,
  MULTICAST_ADDR = 1,
  ANYCAST_ADDR = 2,
};

struct inet6_fill_args {
  u32 portid;
  u32 seq;
  int event;
  unsigned int flags;
  int netnsid;
  int ifindex;
  enum addr_type_t type;
};

enum {
  DAD_PROCESS = 0,
  DAD_BEGIN = 1,
  DAD_ABORT = 2,
};

struct ifaddrlblmsg {
  __u8 ifal_family;
  __u8 __ifal_reserved;
  __u8 ifal_prefixlen;
  __u8 ifal_flags;
  __u32 ifal_index;
  __u32 ifal_seq;
};

enum {
  IFAL_ADDRESS = 1,
  IFAL_LABEL = 2,
  __IFAL_MAX = 3,
};

struct ip6addrlbl_entry {
  struct in6_addr prefix;
  int prefixlen;
  int ifindex;
  int addrtype;
  u32 label;
  struct hlist_node list;
  struct callback_head rcu;
};

struct ip6addrlbl_init_table {
  const struct in6_addr* prefix;
  int prefixlen;
  u32 label;
};

struct rd_msg {
  struct icmp6hdr icmph;
  struct in6_addr target;
  struct in6_addr dest;
  __u8 opt[0];
};

struct fib6_gc_args {
  int timeout;
  int more;
};

struct rt6_exception {
  struct hlist_node hlist;
  struct rt6_info* rt6i;
  long unsigned int stamp;
  struct callback_head rcu;
};

struct route_info {
  __u8 type;
  __u8 length;
  __u8 prefix_len;
  __u8 reserved_l : 3;
  __u8 route_pref : 2;
  __u8 reserved_h : 3;
  __be32 lifetime;
  __u8 prefix[0];
};

struct rt6_rtnl_dump_arg {
  struct sk_buff* skb;
  struct netlink_callback* cb;
  struct net* net;
  struct fib_dump_filter filter;
};

struct netevent_redirect {
  struct dst_entry* old;
  struct dst_entry* new;
  struct neighbour* neigh;
  const void* daddr;
};

struct trace_event_raw_fib6_table_lookup {
  struct trace_entry ent;
  u32 tb_id;
  int err;
  int oif;
  int iif;
  __u8 tos;
  __u8 scope;
  __u8 flags;
  __u8 src[16];
  __u8 dst[16];
  u16 sport;
  u16 dport;
  u8 proto;
  u8 rt_type;
  u32 __data_loc_name;
  __u8 gw[16];
  char __data[0];
};

struct trace_event_data_offsets_fib6_table_lookup {
  u32 name;
};

typedef void (*btf_trace_fib6_table_lookup)(
    void*,
    const struct net*,
    const struct fib6_result*,
    struct fib6_table*,
    const struct flowi6*);

enum rt6_nud_state {
  RT6_NUD_FAIL_HARD = 4294967293,
  RT6_NUD_FAIL_PROBE = 4294967294,
  RT6_NUD_FAIL_DO_RR = 4294967295,
  RT6_NUD_SUCCEED = 1,
};

struct fib6_nh_dm_arg {
  struct net* net;
  const struct in6_addr* saddr;
  int oif;
  int flags;
  struct fib6_nh* nh;
};

struct __rt6_probe_work {
  struct work_struct work;
  struct in6_addr target;
  struct net_device* dev;
};

struct fib6_nh_frl_arg {
  u32 flags;
  int oif;
  int strict;
  int* mpri;
  bool* do_rr;
  struct fib6_nh* nh;
};

struct fib6_nh_excptn_arg {
  struct rt6_info* rt;
  int plen;
};

struct fib6_nh_match_arg {
  const struct net_device* dev;
  const struct in6_addr* gw;
  struct fib6_nh* match;
};

struct fib6_nh_age_excptn_arg {
  struct fib6_gc_args* gc_args;
  long unsigned int now;
};

struct fib6_nh_rd_arg {
  struct fib6_result* res;
  struct flowi6* fl6;
  const struct in6_addr* gw;
  struct rt6_info** ret;
};

struct ip6rd_flowi {
  struct flowi6 fl6;
  struct in6_addr gateway;
};

struct fib6_nh_del_cached_rt_arg {
  struct fib6_config* cfg;
  struct fib6_info* f6i;
};

struct arg_dev_net_ip {
  struct net_device* dev;
  struct net* net;
  struct in6_addr* addr;
};

struct arg_netdev_event {
  const struct net_device* dev;
  union {
    unsigned char nh_flags;
    long unsigned int event;
  };
};

struct rt6_mtu_change_arg {
  struct net_device* dev;
  unsigned int mtu;
  struct fib6_info* f6i;
};

struct rt6_nh {
  struct fib6_info* fib6_info;
  struct fib6_config r_cfg;
  struct list_head next;
};

struct fib6_nh_exception_dump_walker {
  struct rt6_rtnl_dump_arg* dump;
  struct fib6_info* rt;
  unsigned int flags;
  unsigned int skip;
  unsigned int count;
};

enum fib6_walk_state {
  FWS_S = 0,
  FWS_L = 1,
  FWS_R = 2,
  FWS_C = 3,
  FWS_U = 4,
};

struct fib6_walker {
  struct list_head lh;
  struct fib6_node* root;
  struct fib6_node* node;
  struct fib6_info* leaf;
  enum fib6_walk_state state;
  unsigned int skip;
  unsigned int count;
  unsigned int skip_in_node;
  int (*func)(struct fib6_walker*);
  void* args;
};

struct fib6_entry_notifier_info {
  struct fib_notifier_info info;
  struct fib6_info* rt;
  unsigned int nsiblings;
};

struct ipv6_route_iter {
  struct seq_net_private p;
  struct fib6_walker w;
  loff_t skip;
  struct fib6_table* tbl;
  int sernum;
};

struct bpf_iter__ipv6_route {
  union {
    struct bpf_iter_meta* meta;
  };
  union {
    struct fib6_info* rt;
  };
};

struct fib6_cleaner {
  struct fib6_walker w;
  struct net* net;
  int (*func)(struct fib6_info*, void*);
  int sernum;
  void* arg;
  bool skip_notify;
};

enum {
  FIB6_NO_SERNUM_CHANGE = 0,
};

struct fib6_dump_arg {
  struct net* net;
  struct notifier_block* nb;
  struct netlink_ext_ack* extack;
};

struct fib6_nh_pcpu_arg {
  struct fib6_info* from;
  const struct fib6_table* table;
};

struct lookup_args {
  int offset;
  const struct in6_addr* addr;
};

struct ipv6_mreq {
  struct in6_addr ipv6mr_multiaddr;
  int ipv6mr_ifindex;
};

struct in6_flowlabel_req {
  struct in6_addr flr_dst;
  __be32 flr_label;
  __u8 flr_action;
  __u8 flr_share;
  __u16 flr_flags;
  __u16 flr_expires;
  __u16 flr_linger;
  __u32 __flr_pad;
};

struct ip6_mtuinfo {
  struct sockaddr_in6 ip6m_addr;
  __u32 ip6m_mtu;
};

struct nduseroptmsg {
  unsigned char nduseropt_family;
  unsigned char nduseropt_pad1;
  short unsigned int nduseropt_opts_len;
  int nduseropt_ifindex;
  __u8 nduseropt_icmp_type;
  __u8 nduseropt_icmp_code;
  short unsigned int nduseropt_pad2;
  unsigned int nduseropt_pad3;
};

enum {
  NDUSEROPT_UNSPEC = 0,
  NDUSEROPT_SRCADDR = 1,
  __NDUSEROPT_MAX = 2,
};

struct nd_msg {
  struct icmp6hdr icmph;
  struct in6_addr target;
  __u8 opt[0];
};

struct rs_msg {
  struct icmp6hdr icmph;
  __u8 opt[0];
};

struct ra_msg {
  struct icmp6hdr icmph;
  __be32 reachable_time;
  __be32 retrans_timer;
};

struct icmp6_filter {
  __u32 data[8];
};

struct raw6_sock {
  struct inet_sock inet;
  __u32 checksum;
  __u32 offset;
  struct icmp6_filter filter;
  __u32 ip6mr_table;
  struct ipv6_pinfo inet6;
};

typedef int mh_filter_t(struct sock*, struct sk_buff*);

struct raw6_frag_vec {
  struct msghdr* msg;
  int hlen;
  char c[4];
};

struct ipv6_destopt_hao {
  __u8 type;
  __u8 length;
  struct in6_addr addr;
} __attribute__((packed));

typedef void ip6_icmp_send_t(
    struct sk_buff*,
    u8,
    u8,
    __u32,
    const struct in6_addr*,
    const struct inet6_skb_parm*);

struct icmpv6_msg {
  struct sk_buff* skb;
  int offset;
  uint8_t type;
};

struct icmp6_err {
  int err;
  int fatal;
};

struct mld_msg {
  struct icmp6hdr mld_hdr;
  struct in6_addr mld_mca;
};

struct mld2_grec {
  __u8 grec_type;
  __u8 grec_auxwords;
  __be16 grec_nsrcs;
  struct in6_addr grec_mca;
  struct in6_addr grec_src[0];
};

struct mld2_report {
  struct icmp6hdr mld2r_hdr;
  struct mld2_grec mld2r_grec[0];
};

struct mld2_query {
  struct icmp6hdr mld2q_hdr;
  struct in6_addr mld2q_mca;
  __u8 mld2q_qrv : 3;
  __u8 mld2q_suppress : 1;
  __u8 mld2q_resv2 : 4;
  __u8 mld2q_qqic;
  __be16 mld2q_nsrcs;
  struct in6_addr mld2q_srcs[0];
};

struct igmp6_mc_iter_state {
  struct seq_net_private p;
  struct net_device* dev;
  struct inet6_dev* idev;
};

struct igmp6_mcf_iter_state {
  struct seq_net_private p;
  struct net_device* dev;
  struct inet6_dev* idev;
  struct ifmcaddr6* im;
};

enum ip6_defrag_users {
  IP6_DEFRAG_LOCAL_DELIVER = 0,
  IP6_DEFRAG_CONNTRACK_IN = 1,
  __IP6_DEFRAG_CONNTRACK_IN = 65536,
  IP6_DEFRAG_CONNTRACK_OUT = 65537,
  __IP6_DEFRAG_CONNTRACK_OUT = 131072,
  IP6_DEFRAG_CONNTRACK_BRIDGE_IN = 131073,
  __IP6_DEFRAG_CONNTRACK_BRIDGE_IN = 196608,
};

struct frag_queue {
  struct inet_frag_queue q;
  int iif;
  __u16 nhoffset;
  u8 ecn;
};

struct tcp6_pseudohdr {
  struct in6_addr saddr;
  struct in6_addr daddr;
  __be32 len;
  __be32 protocol;
};

struct rt0_hdr {
  struct ipv6_rt_hdr rt_hdr;
  __u32 reserved;
  struct in6_addr addr[0];
};

struct ipv6_rpl_sr_hdr {
  __u8 nexthdr;
  __u8 hdrlen;
  __u8 type;
  __u8 segments_left;
  __u32 cmpre : 4;
  __u32 cmpri : 4;
  __u32 reserved : 4;
  __u32 pad : 4;
  __u32 reserved1 : 16;
  union {
    struct in6_addr addr[0];
    __u8 data[0];
  } segments;
};

struct tlvtype_proc {
  int type;
  bool (*func)(struct sk_buff*, int);
};

struct ip6fl_iter_state {
  struct seq_net_private p;
  struct pid_namespace* pid_ns;
  int bucket;
};

struct sr6_tlv {
  __u8 type;
  __u8 len;
  __u8 data[0];
};

enum {
  SEG6_ATTR_UNSPEC = 0,
  SEG6_ATTR_DST = 1,
  SEG6_ATTR_DSTLEN = 2,
  SEG6_ATTR_HMACKEYID = 3,
  SEG6_ATTR_SECRET = 4,
  SEG6_ATTR_SECRETLEN = 5,
  SEG6_ATTR_ALGID = 6,
  SEG6_ATTR_HMACINFO = 7,
  __SEG6_ATTR_MAX = 8,
};

enum {
  SEG6_CMD_UNSPEC = 0,
  SEG6_CMD_SETHMAC = 1,
  SEG6_CMD_DUMPHMAC = 2,
  SEG6_CMD_SET_TUNSRC = 3,
  SEG6_CMD_GET_TUNSRC = 4,
  __SEG6_CMD_MAX = 5,
};

struct xfrm6_protocol {
  int (*handler)(struct sk_buff*);
  int (*input_handler)(struct sk_buff*, int, __be32, int);
  int (*cb_handler)(struct sk_buff*, int);
  int (*err_handler)(
      struct sk_buff*,
      struct inet6_skb_parm*,
      u8,
      u8,
      int,
      __be32);
  struct xfrm6_protocol* next;
  int priority;
};

struct br_input_skb_cb {
  struct net_device* brdev;
  u16 frag_max_size;
  u8 igmp;
  u8 mrouters_only : 1;
  u8 proxyarp_replied : 1;
  u8 src_port_isolated : 1;
  u8 br_netfilter_broute : 1;
  int offload_fwd_mark;
};

struct nf_bridge_frag_data;

typedef struct rt6_info* (*pol_lookup_t)(
    struct net*,
    struct fib6_table*,
    struct flowi6*,
    const struct sk_buff*,
    int);

struct fib6_rule {
  struct fib_rule common;
  struct rt6key src;
  struct rt6key dst;
  u8 tclass;
};

struct ip6t_ip6 {
  struct in6_addr src;
  struct in6_addr dst;
  struct in6_addr smsk;
  struct in6_addr dmsk;
  char iniface[16];
  char outiface[16];
  unsigned char iniface_mask[16];
  unsigned char outiface_mask[16];
  __u16 proto;
  __u8 tos;
  __u8 flags;
  __u8 invflags;
};

struct ip6t_entry {
  struct ip6t_ip6 ipv6;
  unsigned int nfcache;
  __u16 target_offset;
  __u16 next_offset;
  unsigned int comefrom;
  struct xt_counters counters;
  unsigned char elems[0];
};

struct ip6t_standard {
  struct ip6t_entry entry;
  struct xt_standard_target target;
};

struct ip6t_error {
  struct ip6t_entry entry;
  struct xt_error_target target;
};

struct ip6t_icmp {
  __u8 type;
  __u8 code[2];
  __u8 invflags;
};

struct ip6t_getinfo {
  char name[32];
  unsigned int valid_hooks;
  unsigned int hook_entry[5];
  unsigned int underflow[5];
  unsigned int num_entries;
  unsigned int size;
};

struct ip6t_replace {
  char name[32];
  unsigned int valid_hooks;
  unsigned int num_entries;
  unsigned int size;
  unsigned int hook_entry[5];
  unsigned int underflow[5];
  unsigned int num_counters;
  struct xt_counters* counters;
  struct ip6t_entry entries[0];
};

struct ip6t_get_entries {
  char name[32];
  unsigned int size;
  struct ip6t_entry entrytable[0];
};

struct compat_ip6t_entry {
  struct ip6t_ip6 ipv6;
  compat_uint_t nfcache;
  __u16 target_offset;
  __u16 next_offset;
  compat_uint_t comefrom;
  struct compat_xt_counters counters;
  unsigned char elems[0];
} __attribute__((packed));

enum nf_ip_trace_comments___2 {
  NF_IP6_TRACE_COMMENT_RULE = 0,
  NF_IP6_TRACE_COMMENT_RETURN = 1,
  NF_IP6_TRACE_COMMENT_POLICY = 2,
};

struct compat_ip6t_replace {
  char name[32];
  u32 valid_hooks;
  u32 num_entries;
  u32 size;
  u32 hook_entry[5];
  u32 underflow[5];
  u32 num_counters;
  compat_uptr_t counters;
  struct compat_ip6t_entry entries[0];
} __attribute__((packed));

struct compat_ip6t_get_entries {
  char name[32];
  compat_uint_t size;
  struct compat_ip6t_entry entrytable[0];
} __attribute__((packed));

enum {
  IP6_FH_F_FRAG = 1,
  IP6_FH_F_AUTH = 2,
  IP6_FH_F_SKIP_RH = 4,
};

struct sockaddr_pkt {
  short unsigned int spkt_family;
  unsigned char spkt_device[14];
  __be16 spkt_protocol;
};

struct sockaddr_ll {
  short unsigned int sll_family;
  __be16 sll_protocol;
  int sll_ifindex;
  short unsigned int sll_hatype;
  unsigned char sll_pkttype;
  unsigned char sll_halen;
  unsigned char sll_addr[8];
};

struct tpacket_stats {
  unsigned int tp_packets;
  unsigned int tp_drops;
};

struct tpacket_stats_v3 {
  unsigned int tp_packets;
  unsigned int tp_drops;
  unsigned int tp_freeze_q_cnt;
};

struct tpacket_rollover_stats {
  __u64 tp_all;
  __u64 tp_huge;
  __u64 tp_failed;
};

union tpacket_stats_u {
  struct tpacket_stats stats1;
  struct tpacket_stats_v3 stats3;
};

struct tpacket_auxdata {
  __u32 tp_status;
  __u32 tp_len;
  __u32 tp_snaplen;
  __u16 tp_mac;
  __u16 tp_net;
  __u16 tp_vlan_tci;
  __u16 tp_vlan_tpid;
};

struct tpacket_hdr {
  long unsigned int tp_status;
  unsigned int tp_len;
  unsigned int tp_snaplen;
  short unsigned int tp_mac;
  short unsigned int tp_net;
  unsigned int tp_sec;
  unsigned int tp_usec;
};

struct tpacket2_hdr {
  __u32 tp_status;
  __u32 tp_len;
  __u32 tp_snaplen;
  __u16 tp_mac;
  __u16 tp_net;
  __u32 tp_sec;
  __u32 tp_nsec;
  __u16 tp_vlan_tci;
  __u16 tp_vlan_tpid;
  __u8 tp_padding[4];
};

struct tpacket_hdr_variant1 {
  __u32 tp_rxhash;
  __u32 tp_vlan_tci;
  __u16 tp_vlan_tpid;
  __u16 tp_padding;
};

struct tpacket3_hdr {
  __u32 tp_next_offset;
  __u32 tp_sec;
  __u32 tp_nsec;
  __u32 tp_snaplen;
  __u32 tp_len;
  __u32 tp_status;
  __u16 tp_mac;
  __u16 tp_net;
  union {
    struct tpacket_hdr_variant1 hv1;
  };
  __u8 tp_padding[8];
};

struct tpacket_bd_ts {
  unsigned int ts_sec;
  union {
    unsigned int ts_usec;
    unsigned int ts_nsec;
  };
};

struct tpacket_hdr_v1 {
  __u32 block_status;
  __u32 num_pkts;
  __u32 offset_to_first_pkt;
  __u32 blk_len;
  __u64 seq_num;
  struct tpacket_bd_ts ts_first_pkt;
  struct tpacket_bd_ts ts_last_pkt;
};

union tpacket_bd_header_u {
  struct tpacket_hdr_v1 bh1;
};

struct tpacket_block_desc {
  __u32 version;
  __u32 offset_to_priv;
  union tpacket_bd_header_u hdr;
};

enum tpacket_versions {
  TPACKET_V1 = 0,
  TPACKET_V2 = 1,
  TPACKET_V3 = 2,
};

struct tpacket_req {
  unsigned int tp_block_size;
  unsigned int tp_block_nr;
  unsigned int tp_frame_size;
  unsigned int tp_frame_nr;
};

struct tpacket_req3 {
  unsigned int tp_block_size;
  unsigned int tp_block_nr;
  unsigned int tp_frame_size;
  unsigned int tp_frame_nr;
  unsigned int tp_retire_blk_tov;
  unsigned int tp_sizeof_priv;
  unsigned int tp_feature_req_word;
};

union tpacket_req_u {
  struct tpacket_req req;
  struct tpacket_req3 req3;
};

struct fanout_args {
  __u16 id;
  __u16 type_flags;
  __u32 max_num_members;
};

struct virtio_net_hdr {
  __u8 flags;
  __u8 gso_type;
  __virtio16 hdr_len;
  __virtio16 gso_size;
  __virtio16 csum_start;
  __virtio16 csum_offset;
};

struct packet_mclist {
  struct packet_mclist* next;
  int ifindex;
  int count;
  short unsigned int type;
  short unsigned int alen;
  unsigned char addr[32];
};

struct pgv;

struct tpacket_kbdq_core {
  struct pgv* pkbdq;
  unsigned int feature_req_word;
  unsigned int hdrlen;
  unsigned char reset_pending_on_curr_blk;
  unsigned char delete_blk_timer;
  short unsigned int kactive_blk_num;
  short unsigned int blk_sizeof_priv;
  short unsigned int last_kactive_blk_num;
  char* pkblk_start;
  char* pkblk_end;
  int kblk_size;
  unsigned int max_frame_len;
  unsigned int knum_blocks;
  uint64_t knxt_seq_num;
  char* prev;
  char* nxt_offset;
  struct sk_buff* skb;
  rwlock_t blk_fill_in_prog_lock;
  short unsigned int retire_blk_tov;
  short unsigned int version;
  long unsigned int tov_in_jiffies;
  struct timer_list retire_blk_timer;
};

struct pgv {
  char* buffer;
};

struct packet_ring_buffer {
  struct pgv* pg_vec;
  unsigned int head;
  unsigned int frames_per_block;
  unsigned int frame_size;
  unsigned int frame_max;
  unsigned int pg_vec_order;
  unsigned int pg_vec_pages;
  unsigned int pg_vec_len;
  unsigned int* pending_refcnt;
  union {
    long unsigned int* rx_owner_map;
    struct tpacket_kbdq_core prb_bdqc;
  };
};

struct packet_fanout {
  possible_net_t net;
  unsigned int num_members;
  u32 max_num_members;
  u16 id;
  u8 type;
  u8 flags;
  union {
    atomic_t rr_cur;
    struct bpf_prog* bpf_prog;
  };
  struct list_head list;
  spinlock_t lock;
  refcount_t sk_ref;
  long : 64;
  struct packet_type prot_hook;
  struct sock* arr[0];
};

struct packet_rollover {
  int sock;
  atomic_long_t num;
  atomic_long_t num_huge;
  atomic_long_t num_failed;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 history[16];
};

struct packet_sock {
  struct sock sk;
  struct packet_fanout* fanout;
  union tpacket_stats_u stats;
  struct packet_ring_buffer rx_ring;
  struct packet_ring_buffer tx_ring;
  int copy_thresh;
  spinlock_t bind_lock;
  struct mutex pg_vec_lock;
  unsigned int running;
  unsigned int auxdata : 1;
  unsigned int origdev : 1;
  unsigned int has_vnet_hdr : 1;
  unsigned int tp_loss : 1;
  unsigned int tp_tx_has_off : 1;
  int pressure;
  int ifindex;
  __be16 num;
  struct packet_rollover* rollover;
  struct packet_mclist* mclist;
  atomic_t mapped;
  enum tpacket_versions tp_version;
  unsigned int tp_hdrlen;
  unsigned int tp_reserve;
  unsigned int tp_tstamp;
  struct completion skb_completion;
  struct net_device* cached_dev;
  int (*xmit)(struct sk_buff*);
  struct packet_type prot_hook;
  atomic_t tp_drops;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct packet_mreq_max {
  int mr_ifindex;
  short unsigned int mr_type;
  short unsigned int mr_alen;
  unsigned char mr_address[32];
};

union tpacket_uhdr {
  struct tpacket_hdr* h1;
  struct tpacket2_hdr* h2;
  struct tpacket3_hdr* h3;
  void* raw;
};

struct packet_skb_cb {
  union {
    struct sockaddr_pkt pkt;
    union {
      unsigned int origlen;
      struct sockaddr_ll ll;
    };
  } sa;
};

struct _strp_msg {
  struct strp_msg strp;
  int accum_len;
};

struct vlan_group {
  unsigned int nr_vlan_devs;
  struct hlist_node hlist;
  struct net_device** vlan_devices_arrays[16];
};

struct vlan_info {
  struct net_device* real_dev;
  struct vlan_group grp;
  struct list_head vid_list;
  unsigned int nr_vids;
  struct callback_head rcu;
};

enum vlan_flags {
  VLAN_FLAG_REORDER_HDR = 1,
  VLAN_FLAG_GVRP = 2,
  VLAN_FLAG_LOOSE_BINDING = 4,
  VLAN_FLAG_MVRP = 8,
  VLAN_FLAG_BRIDGE_BINDING = 16,
};

struct vlan_priority_tci_mapping {
  u32 priority;
  u16 vlan_qos;
  struct vlan_priority_tci_mapping* next;
};

struct vlan_dev_priv {
  unsigned int nr_ingress_mappings;
  u32 ingress_priority_map[8];
  unsigned int nr_egress_mappings;
  struct vlan_priority_tci_mapping* egress_priority_map[16];
  __be16 vlan_proto;
  u16 vlan_id;
  u16 flags;
  struct net_device* real_dev;
  unsigned char real_dev_addr[6];
  struct proc_dir_entry* dent;
  struct vlan_pcpu_stats* vlan_pcpu_stats;
  struct netpoll* netpoll;
};

enum vlan_protos {
  VLAN_PROTO_8021Q = 0,
  VLAN_PROTO_8021AD = 1,
  VLAN_PROTO_NUM = 2,
};

struct vlan_vid_info {
  struct list_head list;
  __be16 proto;
  u16 vid;
  int refcount;
};

struct dcbmsg {
  __u8 dcb_family;
  __u8 cmd;
  __u16 dcb_pad;
};

enum dcbnl_commands {
  DCB_CMD_UNDEFINED = 0,
  DCB_CMD_GSTATE = 1,
  DCB_CMD_SSTATE = 2,
  DCB_CMD_PGTX_GCFG = 3,
  DCB_CMD_PGTX_SCFG = 4,
  DCB_CMD_PGRX_GCFG = 5,
  DCB_CMD_PGRX_SCFG = 6,
  DCB_CMD_PFC_GCFG = 7,
  DCB_CMD_PFC_SCFG = 8,
  DCB_CMD_SET_ALL = 9,
  DCB_CMD_GPERM_HWADDR = 10,
  DCB_CMD_GCAP = 11,
  DCB_CMD_GNUMTCS = 12,
  DCB_CMD_SNUMTCS = 13,
  DCB_CMD_PFC_GSTATE = 14,
  DCB_CMD_PFC_SSTATE = 15,
  DCB_CMD_BCN_GCFG = 16,
  DCB_CMD_BCN_SCFG = 17,
  DCB_CMD_GAPP = 18,
  DCB_CMD_SAPP = 19,
  DCB_CMD_IEEE_SET = 20,
  DCB_CMD_IEEE_GET = 21,
  DCB_CMD_GDCBX = 22,
  DCB_CMD_SDCBX = 23,
  DCB_CMD_GFEATCFG = 24,
  DCB_CMD_SFEATCFG = 25,
  DCB_CMD_CEE_GET = 26,
  DCB_CMD_IEEE_DEL = 27,
  __DCB_CMD_ENUM_MAX = 28,
  DCB_CMD_MAX = 27,
};

enum dcbnl_attrs {
  DCB_ATTR_UNDEFINED = 0,
  DCB_ATTR_IFNAME = 1,
  DCB_ATTR_STATE = 2,
  DCB_ATTR_PFC_STATE = 3,
  DCB_ATTR_PFC_CFG = 4,
  DCB_ATTR_NUM_TC = 5,
  DCB_ATTR_PG_CFG = 6,
  DCB_ATTR_SET_ALL = 7,
  DCB_ATTR_PERM_HWADDR = 8,
  DCB_ATTR_CAP = 9,
  DCB_ATTR_NUMTCS = 10,
  DCB_ATTR_BCN = 11,
  DCB_ATTR_APP = 12,
  DCB_ATTR_IEEE = 13,
  DCB_ATTR_DCBX = 14,
  DCB_ATTR_FEATCFG = 15,
  DCB_ATTR_CEE = 16,
  __DCB_ATTR_ENUM_MAX = 17,
  DCB_ATTR_MAX = 16,
};

enum ieee_attrs {
  DCB_ATTR_IEEE_UNSPEC = 0,
  DCB_ATTR_IEEE_ETS = 1,
  DCB_ATTR_IEEE_PFC = 2,
  DCB_ATTR_IEEE_APP_TABLE = 3,
  DCB_ATTR_IEEE_PEER_ETS = 4,
  DCB_ATTR_IEEE_PEER_PFC = 5,
  DCB_ATTR_IEEE_PEER_APP = 6,
  DCB_ATTR_IEEE_MAXRATE = 7,
  DCB_ATTR_IEEE_QCN = 8,
  DCB_ATTR_IEEE_QCN_STATS = 9,
  DCB_ATTR_DCB_BUFFER = 10,
  __DCB_ATTR_IEEE_MAX = 11,
};

enum ieee_attrs_app {
  DCB_ATTR_IEEE_APP_UNSPEC = 0,
  DCB_ATTR_IEEE_APP = 1,
  __DCB_ATTR_IEEE_APP_MAX = 2,
};

enum cee_attrs {
  DCB_ATTR_CEE_UNSPEC = 0,
  DCB_ATTR_CEE_PEER_PG = 1,
  DCB_ATTR_CEE_PEER_PFC = 2,
  DCB_ATTR_CEE_PEER_APP_TABLE = 3,
  DCB_ATTR_CEE_TX_PG = 4,
  DCB_ATTR_CEE_RX_PG = 5,
  DCB_ATTR_CEE_PFC = 6,
  DCB_ATTR_CEE_APP_TABLE = 7,
  DCB_ATTR_CEE_FEAT = 8,
  __DCB_ATTR_CEE_MAX = 9,
};

enum peer_app_attr {
  DCB_ATTR_CEE_PEER_APP_UNSPEC = 0,
  DCB_ATTR_CEE_PEER_APP_INFO = 1,
  DCB_ATTR_CEE_PEER_APP = 2,
  __DCB_ATTR_CEE_PEER_APP_MAX = 3,
};

enum dcbnl_tc_attrs {
  DCB_TC_ATTR_PARAM_UNDEFINED = 0,
  DCB_TC_ATTR_PARAM_PGID = 1,
  DCB_TC_ATTR_PARAM_UP_MAPPING = 2,
  DCB_TC_ATTR_PARAM_STRICT_PRIO = 3,
  DCB_TC_ATTR_PARAM_BW_PCT = 4,
  DCB_TC_ATTR_PARAM_ALL = 5,
  __DCB_TC_ATTR_PARAM_ENUM_MAX = 6,
  DCB_TC_ATTR_PARAM_MAX = 5,
};

enum dcbnl_bcn_attrs {
  DCB_BCN_ATTR_UNDEFINED = 0,
  DCB_BCN_ATTR_RP_0 = 1,
  DCB_BCN_ATTR_RP_1 = 2,
  DCB_BCN_ATTR_RP_2 = 3,
  DCB_BCN_ATTR_RP_3 = 4,
  DCB_BCN_ATTR_RP_4 = 5,
  DCB_BCN_ATTR_RP_5 = 6,
  DCB_BCN_ATTR_RP_6 = 7,
  DCB_BCN_ATTR_RP_7 = 8,
  DCB_BCN_ATTR_RP_ALL = 9,
  DCB_BCN_ATTR_BCNA_0 = 10,
  DCB_BCN_ATTR_BCNA_1 = 11,
  DCB_BCN_ATTR_ALPHA = 12,
  DCB_BCN_ATTR_BETA = 13,
  DCB_BCN_ATTR_GD = 14,
  DCB_BCN_ATTR_GI = 15,
  DCB_BCN_ATTR_TMAX = 16,
  DCB_BCN_ATTR_TD = 17,
  DCB_BCN_ATTR_RMIN = 18,
  DCB_BCN_ATTR_W = 19,
  DCB_BCN_ATTR_RD = 20,
  DCB_BCN_ATTR_RU = 21,
  DCB_BCN_ATTR_WRTT = 22,
  DCB_BCN_ATTR_RI = 23,
  DCB_BCN_ATTR_C = 24,
  DCB_BCN_ATTR_ALL = 25,
  __DCB_BCN_ATTR_ENUM_MAX = 26,
  DCB_BCN_ATTR_MAX = 25,
};

enum dcbnl_app_attrs {
  DCB_APP_ATTR_UNDEFINED = 0,
  DCB_APP_ATTR_IDTYPE = 1,
  DCB_APP_ATTR_ID = 2,
  DCB_APP_ATTR_PRIORITY = 3,
  __DCB_APP_ATTR_ENUM_MAX = 4,
  DCB_APP_ATTR_MAX = 3,
};

enum dcbnl_featcfg_attrs {
  DCB_FEATCFG_ATTR_UNDEFINED = 0,
  DCB_FEATCFG_ATTR_ALL = 1,
  DCB_FEATCFG_ATTR_PG = 2,
  DCB_FEATCFG_ATTR_PFC = 3,
  DCB_FEATCFG_ATTR_APP = 4,
  __DCB_FEATCFG_ATTR_ENUM_MAX = 5,
  DCB_FEATCFG_ATTR_MAX = 4,
};

struct dcb_app_type {
  int ifindex;
  struct dcb_app app;
  struct list_head list;
  u8 dcbx;
};

struct dcb_ieee_app_prio_map {
  u64 map[8];
};

struct dcb_ieee_app_dscp_map {
  u8 map[64];
};

enum dcbevent_notif_type {
  DCB_APP_EVENT = 1,
};

struct reply_func {
  int type;
  int (*cb)(
      struct net_device*,
      struct nlmsghdr*,
      u32,
      struct nlattr**,
      struct sk_buff*);
};

enum dns_payload_content_type {
  DNS_PAYLOAD_IS_SERVER_LIST = 0,
};

struct dns_payload_header {
  __u8 zero;
  __u8 content;
  __u8 version;
};

enum {
  dns_key_data = 0,
  dns_key_error = 1,
};

enum switchdev_attr_id {
  SWITCHDEV_ATTR_ID_UNDEFINED = 0,
  SWITCHDEV_ATTR_ID_PORT_STP_STATE = 1,
  SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS = 2,
  SWITCHDEV_ATTR_ID_PORT_PRE_BRIDGE_FLAGS = 3,
  SWITCHDEV_ATTR_ID_PORT_MROUTER = 4,
  SWITCHDEV_ATTR_ID_BRIDGE_AGEING_TIME = 5,
  SWITCHDEV_ATTR_ID_BRIDGE_VLAN_FILTERING = 6,
  SWITCHDEV_ATTR_ID_BRIDGE_VLAN_PROTOCOL = 7,
  SWITCHDEV_ATTR_ID_BRIDGE_MC_DISABLED = 8,
  SWITCHDEV_ATTR_ID_BRIDGE_MROUTER = 9,
  SWITCHDEV_ATTR_ID_MRP_PORT_ROLE = 10,
};

struct switchdev_brport_flags {
  long unsigned int val;
  long unsigned int mask;
};

struct switchdev_attr {
  struct net_device* orig_dev;
  enum switchdev_attr_id id;
  u32 flags;
  void* complete_priv;
  void (*complete)(struct net_device*, int, void*);
  union {
    u8 stp_state;
    struct switchdev_brport_flags brport_flags;
    bool mrouter;
    clock_t ageing_time;
    bool vlan_filtering;
    u16 vlan_protocol;
    bool mc_disabled;
    u8 mrp_port_role;
  } u;
};

enum switchdev_obj_id {
  SWITCHDEV_OBJ_ID_UNDEFINED = 0,
  SWITCHDEV_OBJ_ID_PORT_VLAN = 1,
  SWITCHDEV_OBJ_ID_PORT_MDB = 2,
  SWITCHDEV_OBJ_ID_HOST_MDB = 3,
  SWITCHDEV_OBJ_ID_MRP = 4,
  SWITCHDEV_OBJ_ID_RING_TEST_MRP = 5,
  SWITCHDEV_OBJ_ID_RING_ROLE_MRP = 6,
  SWITCHDEV_OBJ_ID_RING_STATE_MRP = 7,
  SWITCHDEV_OBJ_ID_IN_TEST_MRP = 8,
  SWITCHDEV_OBJ_ID_IN_ROLE_MRP = 9,
  SWITCHDEV_OBJ_ID_IN_STATE_MRP = 10,
};

struct switchdev_obj {
  struct net_device* orig_dev;
  enum switchdev_obj_id id;
  u32 flags;
  void* complete_priv;
  void (*complete)(struct net_device*, int, void*);
};

enum switchdev_notifier_type {
  SWITCHDEV_FDB_ADD_TO_BRIDGE = 1,
  SWITCHDEV_FDB_DEL_TO_BRIDGE = 2,
  SWITCHDEV_FDB_ADD_TO_DEVICE = 3,
  SWITCHDEV_FDB_DEL_TO_DEVICE = 4,
  SWITCHDEV_FDB_OFFLOADED = 5,
  SWITCHDEV_FDB_FLUSH_TO_BRIDGE = 6,
  SWITCHDEV_PORT_OBJ_ADD = 7,
  SWITCHDEV_PORT_OBJ_DEL = 8,
  SWITCHDEV_PORT_ATTR_SET = 9,
  SWITCHDEV_VXLAN_FDB_ADD_TO_BRIDGE = 10,
  SWITCHDEV_VXLAN_FDB_DEL_TO_BRIDGE = 11,
  SWITCHDEV_VXLAN_FDB_ADD_TO_DEVICE = 12,
  SWITCHDEV_VXLAN_FDB_DEL_TO_DEVICE = 13,
  SWITCHDEV_VXLAN_FDB_OFFLOADED = 14,
};

struct switchdev_notifier_info {
  struct net_device* dev;
  struct netlink_ext_ack* extack;
};

struct switchdev_notifier_port_obj_info {
  struct switchdev_notifier_info info;
  const struct switchdev_obj* obj;
  bool handled;
};

struct switchdev_notifier_port_attr_info {
  struct switchdev_notifier_info info;
  const struct switchdev_attr* attr;
  bool handled;
};

typedef void switchdev_deferred_func_t(struct net_device*, const void*);

struct switchdev_deferred_item {
  struct list_head list;
  struct net_device* dev;
  switchdev_deferred_func_t* func;
  long unsigned int data[0];
};

struct sockaddr_xdp {
  __u16 sxdp_family;
  __u16 sxdp_flags;
  __u32 sxdp_ifindex;
  __u32 sxdp_queue_id;
  __u32 sxdp_shared_umem_fd;
};

struct xdp_ring_offset {
  __u64 producer;
  __u64 consumer;
  __u64 desc;
  __u64 flags;
};

struct xdp_mmap_offsets {
  struct xdp_ring_offset rx;
  struct xdp_ring_offset tx;
  struct xdp_ring_offset fr;
  struct xdp_ring_offset cr;
};

struct xdp_umem_reg {
  __u64 addr;
  __u64 len;
  __u32 chunk_size;
  __u32 headroom;
  __u32 flags;
};

struct xdp_statistics {
  __u64 rx_dropped;
  __u64 rx_invalid_descs;
  __u64 tx_invalid_descs;
  __u64 rx_ring_full;
  __u64 rx_fill_ring_empty_descs;
  __u64 tx_ring_empty_descs;
};

struct xdp_options {
  __u32 flags;
};

struct xsk_map {
  struct bpf_map map;
  spinlock_t lock;
  struct xdp_sock* xsk_map[0];
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct xdp_ring;

struct xsk_queue {
  u32 ring_mask;
  u32 nentries;
  u32 cached_prod;
  u32 cached_cons;
  struct xdp_ring* ring;
  u64 invalid_descs;
  u64 queue_empty_descs;
};

struct xdp_ring_offset_v1 {
  __u64 producer;
  __u64 consumer;
  __u64 desc;
};

struct xdp_mmap_offsets_v1 {
  struct xdp_ring_offset_v1 rx;
  struct xdp_ring_offset_v1 tx;
  struct xdp_ring_offset_v1 fr;
  struct xdp_ring_offset_v1 cr;
};

struct xsk_map_node {
  struct list_head node;
  struct xsk_map* map;
  struct xdp_sock** map_entry;
};

struct xdp_ring {
  u32 producer;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 pad1;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 consumer;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 pad2;
  u32 flags;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  u32 pad3;
  long : 32;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
  long : 64;
};

struct xdp_rxtx_ring {
  struct xdp_ring ptrs;
  struct xdp_desc desc[0];
};

struct xdp_umem_ring {
  struct xdp_ring ptrs;
  u64 desc[0];
};

struct xsk_dma_map {
  dma_addr_t* dma_pages;
  struct device* dev;
  struct net_device* netdev;
  refcount_t users;
  struct list_head list;
  u32 dma_pages_cnt;
  bool dma_need_sync;
};

struct xdp_diag_req {
  __u8 sdiag_family;
  __u8 sdiag_protocol;
  __u16 pad;
  __u32 xdiag_ino;
  __u32 xdiag_show;
  __u32 xdiag_cookie[2];
};

struct xdp_diag_msg {
  __u8 xdiag_family;
  __u8 xdiag_type;
  __u16 pad;
  __u32 xdiag_ino;
  __u32 xdiag_cookie[2];
};

enum {
  XDP_DIAG_NONE = 0,
  XDP_DIAG_INFO = 1,
  XDP_DIAG_UID = 2,
  XDP_DIAG_RX_RING = 3,
  XDP_DIAG_TX_RING = 4,
  XDP_DIAG_UMEM = 5,
  XDP_DIAG_UMEM_FILL_RING = 6,
  XDP_DIAG_UMEM_COMPLETION_RING = 7,
  XDP_DIAG_MEMINFO = 8,
  XDP_DIAG_STATS = 9,
  __XDP_DIAG_MAX = 10,
};

struct xdp_diag_info {
  __u32 ifindex;
  __u32 queue_id;
};

struct xdp_diag_ring {
  __u32 entries;
};

struct xdp_diag_umem {
  __u64 size;
  __u32 id;
  __u32 num_pages;
  __u32 chunk_size;
  __u32 headroom;
  __u32 ifindex;
  __u32 queue_id;
  __u32 flags;
  __u32 refs;
};

struct xdp_diag_stats {
  __u64 n_rx_dropped;
  __u64 n_rx_invalid;
  __u64 n_rx_full;
  __u64 n_fill_ring_empty;
  __u64 n_tx_invalid;
  __u64 n_tx_ring_empty;
};

struct pcibios_fwaddrmap {
  struct list_head list;
  struct pci_dev* dev;
  resource_size_t fw_addr[17];
};

struct pci_check_idx_range {
  int start;
  int end;
};

struct pci_mmcfg_region {
  struct list_head list;
  struct resource res;
  u64 address;
  char* virt;
  u16 segment;
  u8 start_bus;
  u8 end_bus;
  char name[30];
};

struct acpi_table_mcfg {
  struct acpi_table_header header;
  u8 reserved[8];
};

struct acpi_mcfg_allocation {
  u64 address;
  u16 pci_segment;
  u8 start_bus_number;
  u8 end_bus_number;
  u32 reserved;
};

struct pci_mmcfg_hostbridge_probe {
  u32 bus;
  u32 devfn;
  u32 vendor;
  u32 device;
  const char* (*probe)();
};

typedef bool (*check_reserved_t)(u64, u64, enum e820_type);

struct pci_root_info {
  struct acpi_pci_root_info common;
  struct pci_sysdata sd;
  bool mcfg_added;
  u8 start_bus;
  u8 end_bus;
};

struct irq_info___2 {
  u8 bus;
  u8 devfn;
  struct {
    u8 link;
    u16 bitmap;
  } __attribute__((packed)) irq[4];
  u8 slot;
  u8 rfu;
};

struct irq_routing_table {
  u32 signature;
  u16 version;
  u16 size;
  u8 rtr_bus;
  u8 rtr_devfn;
  u16 exclusive_irqs;
  u16 rtr_vendor;
  u16 rtr_device;
  u32 miniport_data;
  u8 rfu[11];
  u8 checksum;
  struct irq_info___2 slots[0];
};

struct irq_router {
  char* name;
  u16 vendor;
  u16 device;
  int (*get)(struct pci_dev*, struct pci_dev*, int);
  int (*set)(struct pci_dev*, struct pci_dev*, int, int);
};

struct irq_router_handler {
  u16 vendor;
  int (*probe)(struct irq_router*, struct pci_dev*, u16);
};

struct pci_setup_rom {
  struct setup_data data;
  uint16_t vendor;
  uint16_t devid;
  uint64_t pcilen;
  long unsigned int segment;
  long unsigned int bus;
  long unsigned int device;
  long unsigned int function;
  uint8_t romdata[0];
};

enum pci_bf_sort_state {
  pci_bf_sort_default = 0,
  pci_force_nobf = 1,
  pci_force_bf = 2,
  pci_dmi_bf = 3,
};

struct pci_root_res {
  struct list_head list;
  struct resource res;
};

struct pci_root_info___2 {
  struct list_head list;
  char name[12];
  struct list_head resources;
  struct resource busn;
  int node;
  int link;
};

struct amd_hostbridge {
  u32 bus;
  u32 slot;
  u32 device;
};

#ifndef BPF_NO_PRESERVE_ACCESS_INDEX
#pragma clang attribute pop
#endif

#endif /* __VMLINUX_H__ */
